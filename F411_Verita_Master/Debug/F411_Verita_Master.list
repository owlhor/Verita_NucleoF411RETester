
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d890  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ba8c  0800da30  0800da30  0001da30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080194bc  080194bc  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  080194bc  080194bc  000294bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080194c4  080194c4  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080194c4  080194c4  000294c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080194c8  080194c8  000294c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080194cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000218  080196e0  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  080196e0  000306b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186c7  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334c  00000000  00000000  0004890b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0004bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0004d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e63  00000000  00000000  0004e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194ee  00000000  00000000  0006844b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099130  00000000  00000000  00081939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011aa69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c24  00000000  00000000  0011aabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800da18 	.word	0x0800da18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800da18 	.word	0x0800da18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f004 fb81 	bl	8005718 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00c fc72 	bl	800d930 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00c fc4d 	bl	800d930 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 fb26 	bl	8005718 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000238 	.word	0x20000238
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fbf0 	bl	800590c <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000234 	.word	0x20000234
 800114c:	20000235 	.word	0x20000235

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f004 fbc8 	bl	800590c <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000234 	.word	0x20000234
 8001194:	20000235 	.word	0x20000235

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f004 fba4 	bl	800590c <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000234 	.word	0x20000234
 8001208:	20000235 	.word	0x20000235
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f004 fb68 	bl	800590c <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	20000234 	.word	0x20000234
 800129c:	20000235 	.word	0x20000235
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f004 f897 	bl	80053f8 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 fa94 	bl	8008806 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f004 f888 	bl	80053f8 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine>:
  */


static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 800135e:	4b83      	ldr	r3, [pc, #524]	; (800156c <Rx_Verita_engine+0x21c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d023      	beq.n	80013ae <Rx_Verita_engine+0x5e>
 8001366:	2b02      	cmp	r3, #2
 8001368:	f000 8082 	beq.w	8001470 <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 800136c:	4b80      	ldr	r3, [pc, #512]	; (8001570 <Rx_Verita_engine+0x220>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b56      	cmp	r3, #86	; 0x56
 800137a:	d103      	bne.n	8001384 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 800137c:	4b7b      	ldr	r3, [pc, #492]	; (800156c <Rx_Verita_engine+0x21c>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index+=9;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 8001382:	e0ec      	b.n	800155e <Rx_Verita_engine+0x20e>
		index+=9;
 8001384:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <Rx_Verita_engine+0x220>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3309      	adds	r3, #9
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b78      	ldr	r3, [pc, #480]	; (8001570 <Rx_Verita_engine+0x220>)
 800138e:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 8001390:	4b77      	ldr	r3, [pc, #476]	; (8001570 <Rx_Verita_engine+0x220>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	089a      	lsrs	r2, r3, #2
 8001396:	4977      	ldr	r1, [pc, #476]	; (8001574 <Rx_Verita_engine+0x224>)
 8001398:	fba1 1202 	umull	r1, r2, r1, r2
 800139c:	08d2      	lsrs	r2, r2, #3
 800139e:	216c      	movs	r1, #108	; 0x6c
 80013a0:	fb01 f202 	mul.w	r2, r1, r2
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b71      	ldr	r3, [pc, #452]	; (8001570 <Rx_Verita_engine+0x220>)
 80013aa:	701a      	strb	r2, [r3, #0]
		break; //// init
 80013ac:	e0d7      	b.n	800155e <Rx_Verita_engine+0x20e>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 80013ae:	4b70      	ldr	r3, [pc, #448]	; (8001570 <Rx_Verita_engine+0x220>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b56      	cmp	r3, #86	; 0x56
 80013bc:	d13f      	bne.n	800143e <Rx_Verita_engine+0xee>
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <Rx_Verita_engine+0x220>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b52      	cmp	r3, #82	; 0x52
 80013cc:	d137      	bne.n	800143e <Rx_Verita_engine+0xee>
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <Rx_Verita_engine+0x220>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	3302      	adds	r3, #2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b54      	cmp	r3, #84	; 0x54
 80013dc:	d12f      	bne.n	800143e <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 80013de:	2400      	movs	r4, #0
 80013e0:	e009      	b.n	80013f6 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Rx_Verita_engine+0x220>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4423      	add	r3, r4
 80013e8:	3303      	adds	r3, #3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <Rx_Verita_engine+0x228>)
 80013f2:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013f4:	3401      	adds	r4, #1
 80013f6:	2c06      	cmp	r4, #6
 80013f8:	ddf3      	ble.n	80013e2 <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013fa:	2400      	movs	r4, #0
 80013fc:	e006      	b.n	800140c <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 80013fe:	7b3a      	ldrb	r2, [r7, #12]
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <Rx_Verita_engine+0x228>)
 8001402:	5d1b      	ldrb	r3, [r3, r4]
 8001404:	4413      	add	r3, r2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 800140a:	3401      	adds	r4, #1
 800140c:	2c04      	cmp	r4, #4
 800140e:	ddf6      	ble.n	80013fe <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001418:	7b7a      	ldrb	r2, [r7, #13]
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <Rx_Verita_engine+0x228>)
 800141c:	795b      	ldrb	r3, [r3, #5]
 800141e:	429a      	cmp	r2, r3
 8001420:	d10b      	bne.n	800143a <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <Rx_Verita_engine+0x220>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	22ff      	movs	r2, #255	; 0xff
 800142e:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <Rx_Verita_engine+0x21c>)
 8001432:	2202      	movs	r2, #2
 8001434:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001436:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001438:	e091      	b.n	800155e <Rx_Verita_engine+0x20e>
				return VRT_DataLoss;}
 800143a:	2393      	movs	r3, #147	; 0x93
 800143c:	e090      	b.n	8001560 <Rx_Verita_engine+0x210>
			verita_engine = init;
 800143e:	4b4b      	ldr	r3, [pc, #300]	; (800156c <Rx_Verita_engine+0x21c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			index += Framesize_VRT; // 9
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <Rx_Verita_engine+0x220>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3309      	adds	r3, #9
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <Rx_Verita_engine+0x220>)
 800144e:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001450:	4b47      	ldr	r3, [pc, #284]	; (8001570 <Rx_Verita_engine+0x220>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	089a      	lsrs	r2, r3, #2
 8001456:	4947      	ldr	r1, [pc, #284]	; (8001574 <Rx_Verita_engine+0x224>)
 8001458:	fba1 1202 	umull	r1, r2, r1, r2
 800145c:	08d2      	lsrs	r2, r2, #3
 800145e:	216c      	movs	r1, #108	; 0x6c
 8001460:	fb01 f202 	mul.w	r2, r1, r2
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <Rx_Verita_engine+0x220>)
 800146a:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 800146c:	2394      	movs	r3, #148	; 0x94
 800146e:	e077      	b.n	8001560 <Rx_Verita_engine+0x210>

	case decode:
		verita_engine = init;
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <Rx_Verita_engine+0x21c>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <Rx_Verita_engine+0x220>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3309      	adds	r3, #9
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <Rx_Verita_engine+0x220>)
 8001480:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <Rx_Verita_engine+0x220>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	089a      	lsrs	r2, r3, #2
 8001488:	493a      	ldr	r1, [pc, #232]	; (8001574 <Rx_Verita_engine+0x224>)
 800148a:	fba1 1202 	umull	r1, r2, r1, r2
 800148e:	08d2      	lsrs	r2, r2, #3
 8001490:	216c      	movs	r1, #108	; 0x6c
 8001492:	fb01 f202 	mul.w	r2, r1, r2
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <Rx_Verita_engine+0x220>)
 800149c:	701a      	strb	r2, [r3, #0]
		logu.U8[2] = logger[2];
		logu.U8[1] = logger[3];
		logu.U8[0] = logger[4];
#else
		//// Little endian
		logu.U8[0] = logger[1];
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <Rx_Verita_engine+0x228>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	723b      	strb	r3, [r7, #8]
		logu.U8[1] = logger[2];
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <Rx_Verita_engine+0x228>)
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	727b      	strb	r3, [r7, #9]
		logu.U8[2] = logger[3];
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <Rx_Verita_engine+0x228>)
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	72bb      	strb	r3, [r7, #10]
		logu.U8[3] = logger[4];
 80014b0:	4b31      	ldr	r3, [pc, #196]	; (8001578 <Rx_Verita_engine+0x228>)
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	72fb      	strb	r3, [r7, #11]
#endif

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <Rx_Verita_engine+0x228>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	d808      	bhi.n	80014d0 <Rx_Verita_engine+0x180>

			// place data into the request register
			regisk->U32[logger[0]] = logu.U32;
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <Rx_Verita_engine+0x228>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]


			return VRT_OK;
 80014cc:	2391      	movs	r3, #145	; 0x91
 80014ce:	e047      	b.n	8001560 <Rx_Verita_engine+0x210>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <Rx_Verita_engine+0x228>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b8f      	cmp	r3, #143	; 0x8f
 80014d6:	d941      	bls.n	800155c <Rx_Verita_engine+0x20c>
			switch(logger[0]){
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <Rx_Verita_engine+0x228>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3b91      	subs	r3, #145	; 0x91
 80014de:	2b11      	cmp	r3, #17
 80014e0:	d826      	bhi.n	8001530 <Rx_Verita_engine+0x1e0>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <Rx_Verita_engine+0x198>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001535 	.word	0x08001535
 80014ec:	08001539 	.word	0x08001539
 80014f0:	0800153d 	.word	0x0800153d
 80014f4:	08001541 	.word	0x08001541
 80014f8:	08001531 	.word	0x08001531
 80014fc:	08001531 	.word	0x08001531
 8001500:	08001531 	.word	0x08001531
 8001504:	08001531 	.word	0x08001531
 8001508:	08001531 	.word	0x08001531
 800150c:	08001531 	.word	0x08001531
 8001510:	08001531 	.word	0x08001531
 8001514:	08001531 	.word	0x08001531
 8001518:	08001531 	.word	0x08001531
 800151c:	08001531 	.word	0x08001531
 8001520:	08001531 	.word	0x08001531
 8001524:	08001545 	.word	0x08001545
 8001528:	0800154f 	.word	0x0800154f
 800152c:	08001553 	.word	0x08001553
				//// Status -------
				default:
				case 0x90:
					return VRT_ERROR;
 8001530:	2390      	movs	r3, #144	; 0x90
 8001532:	e015      	b.n	8001560 <Rx_Verita_engine+0x210>
				case 0x91:
					return VRT_OK;
 8001534:	2391      	movs	r3, #145	; 0x91
 8001536:	e013      	b.n	8001560 <Rx_Verita_engine+0x210>
				case 0x92:
					return VRT_Busy;
 8001538:	2392      	movs	r3, #146	; 0x92
 800153a:	e011      	b.n	8001560 <Rx_Verita_engine+0x210>
				case 0x93:
					return VRT_DataLoss;
 800153c:	2393      	movs	r3, #147	; 0x93
 800153e:	e00f      	b.n	8001560 <Rx_Verita_engine+0x210>
				case 0x94:
					return VRT_UnEnc;
 8001540:	2394      	movs	r3, #148	; 0x94
 8001542:	e00d      	b.n	8001560 <Rx_Verita_engine+0x210>

				//// Command -------------
				case VRC_Request:
					//// place Regis request & FlagRQ for Tx_RQ_Engine
					regisk->U32[VR_DataReq] = logu.U32;
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	601a      	str	r2, [r3, #0]
					return VRT_OK;
 800154a:	2391      	movs	r3, #145	; 0x91
 800154c:	e008      	b.n	8001560 <Rx_Verita_engine+0x210>
				case VRC_Next:
					// reserve for future use
					return VRT_OK;
 800154e:	2391      	movs	r3, #145	; 0x91
 8001550:	e006      	b.n	8001560 <Rx_Verita_engine+0x210>
				case VRC_Flag_1:
					regisk->Mark.Flag_gen = 0x01;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	64da      	str	r2, [r3, #76]	; 0x4c
					return VRT_OK;
 8001558:	2391      	movs	r3, #145	; 0x91
 800155a:	e001      	b.n	8001560 <Rx_Verita_engine+0x210>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 800155c:	bf00      	nop
	} // end switch


	return VRT_ERROR;
 800155e:	2390      	movs	r3, #144	; 0x90
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bc90      	pop	{r4, r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000023a 	.word	0x2000023a
 8001570:	2000023b 	.word	0x2000023b
 8001574:	4bda12f7 	.word	0x4bda12f7
 8001578:	2000023c 	.word	0x2000023c

0800157c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	885b      	ldrh	r3, [r3, #2]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d011      	beq.n	80015b2 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	4619      	mov	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f80b 	bl	80015bc <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 80015b2:	2391      	movs	r3, #145	; 0x91
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	460b      	mov	r3, r1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	2356      	movs	r3, #86	; 0x56
 80015da:	753b      	strb	r3, [r7, #20]
 80015dc:	2352      	movs	r3, #82	; 0x52
 80015de:	757b      	strb	r3, [r7, #21]
 80015e0:	2354      	movs	r3, #84	; 0x54
 80015e2:	75bb      	strb	r3, [r7, #22]
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80015e8:	2304      	movs	r3, #4
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80015f8:	2404      	movs	r4, #4
 80015fa:	e00f      	b.n	800161c <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80015fc:	1f23      	subs	r3, r4, #4
 80015fe:	3328      	adds	r3, #40	; 0x28
 8001600:	443b      	add	r3, r7
 8001602:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001606:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800160a:	443b      	add	r3, r7
 800160c:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 8001610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001614:	3301      	adds	r3, #1
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 800161a:	3401      	adds	r4, #1
 800161c:	2c07      	cmp	r4, #7
 800161e:	dded      	ble.n	80015fc <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 8001620:	2403      	movs	r4, #3
 8001622:	e00a      	b.n	800163a <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 8001624:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001628:	443b      	add	r3, r7
 800162a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800162e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001632:	4413      	add	r3, r2
 8001634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 8001638:	3401      	adds	r4, #1
 800163a:	2c07      	cmp	r4, #7
 800163c:	ddf2      	ble.n	8001624 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 800163e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001642:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001646:	43d2      	mvns	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	3328      	adds	r3, #40	; 0x28
 800164c:	443b      	add	r3, r7
 800164e:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	f107 0114 	add.w	r1, r7, #20
 8001660:	2332      	movs	r3, #50	; 0x32
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f007 fff7 	bl	8009656 <HAL_UART_Transmit>
}
 8001668:	bf00      	nop
 800166a:	372c      	adds	r7, #44	; 0x2c
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}

08001670 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
 800167c:	4613      	mov	r3, r2
 800167e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] flag need to send
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	2356      	movs	r3, #86	; 0x56
 8001690:	733b      	strb	r3, [r7, #12]
 8001692:	2352      	movs	r3, #82	; 0x52
 8001694:	737b      	strb	r3, [r7, #13]
 8001696:	2354      	movs	r3, #84	; 0x54
 8001698:	73bb      	strb	r3, [r7, #14]
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	78bb      	ldrb	r3, [r7, #2]
 80016a0:	743b      	strb	r3, [r7, #16]
 80016a2:	23ff      	movs	r3, #255	; 0xff
 80016a4:	74bb      	strb	r3, [r7, #18]
 80016a6:	23aa      	movs	r3, #170	; 0xaa
 80016a8:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	77fb      	strb	r3, [r7, #31]

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80016ae:	2403      	movs	r4, #3
 80016b0:	e008      	b.n	80016c4 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 80016b2:	f104 0320 	add.w	r3, r4, #32
 80016b6:	443b      	add	r3, r7
 80016b8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	4413      	add	r3, r2
 80016c0:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 80016c2:	3401      	adds	r4, #1
 80016c4:	2c07      	cmp	r4, #7
 80016c6:	ddf4      	ble.n	80016b2 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 80016d0:	f107 010c 	add.w	r1, r7, #12
 80016d4:	231e      	movs	r3, #30
 80016d6:	2209      	movs	r2, #9
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f007 ffbc 	bl	8009656 <HAL_UART_Transmit>
}
 80016de:	bf00      	nop
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
	...

080016e8 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 80016f0:	237f      	movs	r3, #127	; 0x7f
 80016f2:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fa:	4811      	ldr	r0, [pc, #68]	; (8001740 <BL_UART_Start+0x58>)
 80016fc:	f003 fe7c 	bl	80053f8 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <BL_UART_Start+0x5c>)
 8001706:	f003 fe77 	bl	80053f8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800170a:	2014      	movs	r0, #20
 800170c:	f002 ffaa 	bl	8004664 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2140      	movs	r1, #64	; 0x40
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <BL_UART_Start+0x5c>)
 8001716:	f003 fe6f 	bl	80053f8 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 800171a:	2055      	movs	r0, #85	; 0x55
 800171c:	f002 ffa2 	bl	8004664 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 8001720:	f107 010f 	add.w	r1, r7, #15
 8001724:	230a      	movs	r3, #10
 8001726:	2201      	movs	r2, #1
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f007 ff94 	bl	8009656 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 800172e:	2114      	movs	r1, #20
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f999 	bl	8001a68 <BL_UART_wait_ACK>

}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020000 	.word	0x40020000
 8001744:	40020800 	.word	0x40020800

08001748 <BL_UART_Finish>:

void BL_UART_Finish(){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 800174c:	2064      	movs	r0, #100	; 0x64
 800174e:	f002 ff89 	bl	8004664 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001758:	4808      	ldr	r0, [pc, #32]	; (800177c <BL_UART_Finish+0x34>)
 800175a:	f003 fe4d 	bl	80053f8 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <BL_UART_Finish+0x38>)
 8001764:	f003 fe48 	bl	80053f8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001768:	2014      	movs	r0, #20
 800176a:	f002 ff7b 	bl	8004664 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <BL_UART_Finish+0x38>)
 8001774:	f003 fe40 	bl	80053f8 <HAL_GPIO_WritePin>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020000 	.word	0x40020000
 8001780:	40020800 	.word	0x40020800

08001784 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b0cb      	sub	sp, #300	; 0x12c
 8001788:	af00      	add	r7, sp, #0
 800178a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800178e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001792:	6020      	str	r0, [r4, #0]
 8001794:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001798:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800179c:	6001      	str	r1, [r0, #0]
 800179e:	4611      	mov	r1, r2
 80017a0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017a4:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80017b2:	460a      	mov	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 80017b6:	f64c 6331 	movw	r3, #52785	; 0xce31
 80017ba:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 80017d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	3304      	adds	r3, #4
 80017e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f009 f9b4 	bl	800ab58 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 80017f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <BL_UART_WriteMem+0x254>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d909      	bls.n	8001814 <BL_UART_WriteMem+0x90>
 8001800:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001804:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800180e:	d201      	bcs.n	8001814 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 8001810:	23bc      	movs	r3, #188	; 0xbc
 8001812:	e0dc      	b.n	80019ce <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 8001814:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001818:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001820:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 8001828:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800182c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001830:	78db      	ldrb	r3, [r3, #3]
 8001832:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 8001836:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800183a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001844:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800184c:	785b      	ldrb	r3, [r3, #1]
 800184e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001852:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001856:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001860:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001864:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001868:	4053      	eors	r3, r2
 800186a:	b2da      	uxtb	r2, r3
 800186c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001870:	4053      	eors	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001878:	4053      	eors	r3, r2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001880:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001884:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800188e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001892:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001896:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800189a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800189e:	7812      	ldrb	r2, [r2, #0]
 80018a0:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 80018a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 80018b0:	2400      	movs	r4, #0
 80018b2:	e01c      	b.n	80018ee <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 80018b4:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 80018b8:	4621      	mov	r1, r4
 80018ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	440b      	add	r3, r1
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4053      	eors	r3, r2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 80018d0:	4622      	mov	r2, r4
 80018d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	441a      	add	r2, r3
 80018de:	1c63      	adds	r3, r4, #1
 80018e0:	7811      	ldrb	r1, [r2, #0]
 80018e2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018e6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018ea:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 80018ec:	3401      	adds	r4, #1
 80018ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	429c      	cmp	r4, r3
 80018fa:	dddb      	ble.n	80018b4 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 80018fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001900:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3302      	adds	r3, #2
 8001908:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 800190c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001910:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001914:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 8001916:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800191a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800191e:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001922:	230a      	movs	r3, #10
 8001924:	2202      	movs	r2, #2
 8001926:	6800      	ldr	r0, [r0, #0]
 8001928:	f007 fe95 	bl	8009656 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 800192c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001930:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001934:	210a      	movs	r1, #10
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	f000 f896 	bl	8001a68 <BL_UART_wait_ACK>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001946:	2b79      	cmp	r3, #121	; 0x79
 8001948:	d140      	bne.n	80019cc <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800194a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800194e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001952:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001956:	230f      	movs	r3, #15
 8001958:	2205      	movs	r2, #5
 800195a:	6800      	ldr	r0, [r0, #0]
 800195c:	f007 fe7b 	bl	8009656 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001960:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001964:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001968:	210a      	movs	r1, #10
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f000 f87c 	bl	8001a68 <BL_UART_wait_ACK>
 8001970:	4603      	mov	r3, r0
 8001972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800197a:	2b79      	cmp	r3, #121	; 0x79
 800197c:	d124      	bne.n	80019c8 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800197e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001982:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b29b      	uxth	r3, r3
 800198a:	3303      	adds	r3, #3
 800198c:	b29a      	uxth	r2, r3
 800198e:	f107 0114 	add.w	r1, r7, #20
 8001992:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001996:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	6800      	ldr	r0, [r0, #0]
 800199e:	f007 fe5a 	bl	8009656 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 80019a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019aa:	210a      	movs	r1, #10
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f000 f85b 	bl	8001a68 <BL_UART_wait_ACK>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 80019b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80019bc:	2b79      	cmp	r3, #121	; 0x79
 80019be:	d101      	bne.n	80019c4 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 80019c0:	2379      	movs	r3, #121	; 0x79
 80019c2:	e004      	b.n	80019ce <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 80019c4:	231f      	movs	r3, #31
 80019c6:	e002      	b.n	80019ce <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 80019c8:	231f      	movs	r3, #31
 80019ca:	e000      	b.n	80019ce <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 80019cc:	231f      	movs	r3, #31

	return UB_NACK;
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	1ffeffff 	.word	0x1ffeffff

080019dc <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 80019e8:	f64b 3344 	movw	r3, #47940	; 0xbb44
 80019ec:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <BL_UART_ExtendEraseMem_SP+0x88>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	823b      	strh	r3, [r7, #16]
 80019f8:	2300      	movs	r3, #0
 80019fa:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 8001a04:	7b3b      	ldrb	r3, [r7, #12]
 8001a06:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 8001a08:	7b3a      	ldrb	r2, [r7, #12]
 8001a0a:	7b7b      	ldrb	r3, [r7, #13]
 8001a0c:	4053      	eors	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 8001a12:	f107 0114 	add.w	r1, r7, #20
 8001a16:	230a      	movs	r3, #10
 8001a18:	2202      	movs	r2, #2
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f007 fe1b 	bl	8009656 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 8001a20:	210a      	movs	r1, #10
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f820 	bl	8001a68 <BL_UART_wait_ACK>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b79      	cmp	r3, #121	; 0x79
 8001a30:	d113      	bne.n	8001a5a <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 8001a32:	f107 0110 	add.w	r1, r7, #16
 8001a36:	230f      	movs	r3, #15
 8001a38:	2203      	movs	r2, #3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f007 fe0b 	bl	8009656 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001a40:	210a      	movs	r1, #10
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f810 	bl	8001a68 <BL_UART_wait_ACK>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b79      	cmp	r3, #121	; 0x79
 8001a50:	d101      	bne.n	8001a56 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001a52:	2379      	movs	r3, #121	; 0x79
 8001a54:	e002      	b.n	8001a5c <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 8001a56:	231f      	movs	r3, #31
 8001a58:	e000      	b.n	8001a5c <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 8001a5a:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0800da30 	.word	0x0800da30

08001a68 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a7c:	f002 fde6 	bl	800464c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	4413      	add	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a88:	e018      	b.n	8001abc <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a8a:	f107 010f 	add.w	r1, r7, #15
 8001a8e:	2302      	movs	r3, #2
 8001a90:	2201      	movs	r2, #1
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f007 fe71 	bl	800977a <HAL_UART_Receive>

		if(response == 0x79){
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b79      	cmp	r3, #121	; 0x79
 8001a9c:	d101      	bne.n	8001aa2 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a9e:	2379      	movs	r3, #121	; 0x79
 8001aa0:	e010      	b.n	8001ac4 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b1f      	cmp	r3, #31
 8001aa6:	d101      	bne.n	8001aac <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001aa8:	231f      	movs	r3, #31
 8001aaa:	e00b      	b.n	8001ac4 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001aac:	f002 fdce 	bl	800464c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d801      	bhi.n	8001abc <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001ab8:	23ab      	movs	r3, #171	; 0xab
 8001aba:	e003      	b.n	8001ac4 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1e3      	bne.n	8001a8a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001ac2:	231f      	movs	r3, #31
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad0:	b09a      	sub	sp, #104	; 0x68
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad4:	f002 fd54 	bl	8004580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad8:	f000 fa08 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001adc:	f000 fbea 	bl	80022b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ae0:	f000 fbc8 	bl	8002274 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ae4:	f000 fb72 	bl	80021cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ae8:	f000 fa68 	bl	8001fbc <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001aec:	f000 fb98 	bl	8002220 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001af0:	f000 fa92 	bl	8002018 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001af4:	f000 fb1a 	bl	800212c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001af8:	f000 fb3c 	bl	8002174 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001afc:	f000 fac2 	bl	8002084 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001b00:	4867      	ldr	r0, [pc, #412]	; (8001ca0 <main+0x1d4>)
 8001b02:	f007 f93d 	bl	8008d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001b06:	2104      	movs	r1, #4
 8001b08:	4866      	ldr	r0, [pc, #408]	; (8001ca4 <main+0x1d8>)
 8001b0a:	f007 fa70 	bl	8008fee <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001b0e:	4a66      	ldr	r2, [pc, #408]	; (8001ca8 <main+0x1dc>)
 8001b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b14:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001b16:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <main+0x1dc>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4a63      	ldr	r2, [pc, #396]	; (8001cac <main+0x1e0>)
 8001b1e:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001b20:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <main+0x1e4>)
 8001b22:	2301      	movs	r3, #1
 8001b24:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001b26:	4a62      	ldr	r2, [pc, #392]	; (8001cb0 <main+0x1e4>)
 8001b28:	23fa      	movs	r3, #250	; 0xfa
 8001b2a:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001b2c:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <main+0x1e4>)
 8001b2e:	2364      	movs	r3, #100	; 0x64
 8001b30:	8093      	strh	r3, [r2, #4]

  ili9341_Init();
 8001b32:	f001 fe35 	bl	80037a0 <ili9341_Init>
  ili9341_DisplayOn();
 8001b36:	f001 fe17 	bl	8003768 <ili9341_DisplayOn>
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);


#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	485d      	ldr	r0, [pc, #372]	; (8001cb4 <main+0x1e8>)
 8001b3e:	f7ff fa2f 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001b42:	2188      	movs	r1, #136	; 0x88
 8001b44:	485b      	ldr	r0, [pc, #364]	; (8001cb4 <main+0x1e8>)
 8001b46:	f7ff fa2b 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <main+0x1ec>)
 8001b4c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001b50:	461c      	mov	r4, r3
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fb38 	bl	80001e0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b78:	230a      	movs	r3, #10
 8001b7a:	4850      	ldr	r0, [pc, #320]	; (8001cbc <main+0x1f0>)
 8001b7c:	f007 fd6b 	bl	8009656 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 8001b80:	226c      	movs	r2, #108	; 0x6c
 8001b82:	494f      	ldr	r1, [pc, #316]	; (8001cc0 <main+0x1f4>)
 8001b84:	484f      	ldr	r0, [pc, #316]	; (8001cc4 <main+0x1f8>)
 8001b86:	f007 fe9a 	bl	80098be <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001b8a:	f000 fd3f 	bl	800260c <Button_machine>
	  ////  ------------- Verita UART Recieve --------------------------
	  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9); // Normal DMA
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  VRB_CL.U32
 8001b8e:	494e      	ldr	r1, [pc, #312]	; (8001cc8 <main+0x1fc>)
 8001b90:	484b      	ldr	r0, [pc, #300]	; (8001cc0 <main+0x1f4>)
 8001b92:	f7ff fbdd 	bl	8001350 <Rx_Verita_engine>
	  Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 8001b96:	494c      	ldr	r1, [pc, #304]	; (8001cc8 <main+0x1fc>)
 8001b98:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <main+0x1f8>)
 8001b9a:	f7ff fcef 	bl	800157c <Tx_Rq_Verita_engine>
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001b9e:	f002 fd55 	bl	800464c <HAL_GetTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	469a      	mov	sl, r3
 8001ba8:	4693      	mov	fp, r2
 8001baa:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <main+0x200>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	4592      	cmp	sl, r2
 8001bb2:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001bb6:	d36e      	bcc.n	8001c96 <main+0x1ca>
		timestamp_buzbtn += 100;
 8001bb8:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <main+0x200>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001bc2:	6239      	str	r1, [r7, #32]
 8001bc4:	f143 0300 	adc.w	r3, r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <main+0x200>)
 8001bcc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bd0:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001bd4:	f000 fd6a 	bl	80026ac <knob_rotter>
		/* function runs here with speed
		 * can change the number of selection following to the GrandState
		 * state_box_choice = 3;
		*/

		if(state_box_choice_n){
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <main+0x204>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05a      	beq.n	8001c96 <main+0x1ca>

		switch (a_boxpoint){
 8001be0:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <main+0x208>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d047      	beq.n	8001c78 <main+0x1ac>
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d056      	beq.n	8001c9a <main+0x1ce>

		default:
		case a_wait:

			if(k_flag.up){ //flag_k_up
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <main+0x20c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01d      	beq.n	8001c30 <main+0x164>

				state_box_choice_is++;
 8001bf4:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <main+0x210>)
 8001bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <main+0x210>)
 8001c04:	7013      	strb	r3, [r2, #0]
				state_box_choice_is %= state_box_choice_n; // don't be more than spec of Grandstate sub
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <main+0x210>)
 8001c08:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <main+0x204>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	fb91 f3f2 	sdiv	r3, r1, r2
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <main+0x210>)
 8001c22:	7013      	strb	r3, [r2, #0]
				//if(state_box_choice_is >= state_box_choice_n){state_box_choice_is = 0;}

				k_flag.up = 0;
 8001c24:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <main+0x20c>)
 8001c26:	2300      	movs	r3, #0
 8001c28:	7013      	strb	r3, [r2, #0]
				 a_boxpoint = a_change;}
 8001c2a:	4a2a      	ldr	r2, [pc, #168]	; (8001cd4 <main+0x208>)
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){ //flag_k_dn
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <main+0x20c>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d055      	beq.n	8001ce4 <main+0x218>

				state_box_choice_is--;
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <main+0x210>)
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <main+0x210>)
 8001c48:	7013      	strb	r3, [r2, #0]
				state_box_choice_is = (state_box_choice_is < 0) ? state_box_choice_n-1:state_box_choice_is;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <main+0x210>)
 8001c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da05      	bge.n	8001c60 <main+0x194>
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <main+0x204>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	b25b      	sxtb	r3, r3
 8001c5e:	e002      	b.n	8001c66 <main+0x19a>
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <main+0x210>)
 8001c62:	f993 3000 	ldrsb.w	r3, [r3]
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <main+0x210>)
 8001c68:	7013      	strb	r3, [r2, #0]
				//if(state_box_choice_is < 0){state_box_choice_is = state_box_choice_n - 1;}

				 k_flag.dn = 0;
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <main+0x20c>)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	7053      	strb	r3, [r2, #1]
				 a_boxpoint = a_change;}
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <main+0x208>)
 8001c72:	2301      	movs	r3, #1
 8001c74:	7013      	strb	r3, [r2, #0]

			break;
 8001c76:	e035      	b.n	8001ce4 <main+0x218>

		case a_change:

			box_pointer(20, bosy[state_box_choice_is]);
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <main+0x210>)
 8001c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <main+0x214>)
 8001c82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c86:	4619      	mov	r1, r3
 8001c88:	2014      	movs	r0, #20
 8001c8a:	f000 fc21 	bl	80024d0 <box_pointer>
			a_boxpoint = a_wait;
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <main+0x208>)
 8001c90:	2300      	movs	r3, #0
 8001c92:	7013      	strb	r3, [r2, #0]
			break;
 8001c94:	e027      	b.n	8001ce6 <main+0x21a>
		case a_boxclr:

			break;

			}
		}
 8001c96:	bf00      	nop
 8001c98:	e025      	b.n	8001ce6 <main+0x21a>
			break;
 8001c9a:	bf00      	nop
 8001c9c:	e023      	b.n	8001ce6 <main+0x21a>
 8001c9e:	bf00      	nop
 8001ca0:	2000033c 	.word	0x2000033c
 8001ca4:	200002f4 	.word	0x200002f4
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	20000684 	.word	0x20000684
 8001cb0:	20000670 	.word	0x20000670
 8001cb4:	20000248 	.word	0x20000248
 8001cb8:	0800da34 	.word	0x0800da34
 8001cbc:	200003c8 	.word	0x200003c8
 8001cc0:	2000057c 	.word	0x2000057c
 8001cc4:	2000040c 	.word	0x2000040c
 8001cc8:	20000518 	.word	0x20000518
 8001ccc:	20000660 	.word	0x20000660
 8001cd0:	20000014 	.word	0x20000014
 8001cd4:	2000068f 	.word	0x2000068f
 8001cd8:	2000068c 	.word	0x2000068c
 8001cdc:	20000015 	.word	0x20000015
 8001ce0:	20000008 	.word	0x20000008
			break;
 8001ce4:	bf00      	nop


	  }// timestamp_dis


	  if (HAL_GetTick() >= timestamp_one){
 8001ce6:	f002 fcb1 	bl	800464c <HAL_GetTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2200      	movs	r2, #0
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	61fa      	str	r2, [r7, #28]
 8001cf2:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <main+0x3f4>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	4291      	cmp	r1, r2
 8001d00:	4629      	mov	r1, r5
 8001d02:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d06:	d313      	bcc.n	8001d30 <main+0x264>
		  timestamp_one += 500;
 8001d08:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <main+0x3f4>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001d12:	6139      	str	r1, [r7, #16]
 8001d14:	f143 0300 	adc.w	r3, r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <main+0x3f4>)
 8001d1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d20:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d24:	2120      	movs	r1, #32
 8001d26:	4867      	ldr	r0, [pc, #412]	; (8001ec4 <main+0x3f8>)
 8001d28:	f003 fb7f 	bl	800542a <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001d2c:	f000 fd7a 	bl	8002824 <GrandState_Verita>

		  } // timestamp_one


	  if(HAL_GetTick() >= timestamp_sensors + 250){
 8001d30:	f002 fc8c 	bl	800464c <HAL_GetTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2200      	movs	r2, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	60fa      	str	r2, [r7, #12]
 8001d3c:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <main+0x3fc>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f112 08fa 	adds.w	r8, r2, #250	; 0xfa
 8001d46:	f143 0900 	adc.w	r9, r3, #0
 8001d4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4543      	cmp	r3, r8
 8001d52:	4613      	mov	r3, r2
 8001d54:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d58:	f4ff af17 	bcc.w	8001b8a <main+0xbe>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001d5c:	f002 fc76 	bl	800464c <HAL_GetTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <main+0x3fc>)
 8001d6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d6e:	e9c3 1200 	strd	r1, r2, [r3]
		  /* Request every dynamic parameters
		   *  - INA219#1 INA219#2
		   *  - MCP3208 CH[0..7]
		   *  - Client's MCU temp
		   * */
		  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
 8001d72:	2211      	movs	r2, #17
 8001d74:	21a0      	movs	r1, #160	; 0xa0
 8001d76:	4855      	ldr	r0, [pc, #340]	; (8001ecc <main+0x400>)
 8001d78:	f7ff fc7a 	bl	8001670 <Tx_UART_Verita_Command>

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	4854      	ldr	r0, [pc, #336]	; (8001ed0 <main+0x404>)
 8001d80:	f7ff f9be 	bl	8001100 <INA219Read_BusV>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a53      	ldr	r2, [pc, #332]	; (8001ed4 <main+0x408>)
 8001d88:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	4850      	ldr	r0, [pc, #320]	; (8001ed0 <main+0x404>)
 8001d8e:	f7ff f9df 	bl	8001150 <INA219Read_Current>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <main+0x408>)
 8001d98:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	484c      	ldr	r0, [pc, #304]	; (8001ed0 <main+0x404>)
 8001d9e:	f7ff fa37 	bl	8001210 <INA219Read_Power>
 8001da2:	eef0 7a40 	vmov.f32	s15, s0
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <main+0x408>)
 8001da8:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	4848      	ldr	r0, [pc, #288]	; (8001ed0 <main+0x404>)
 8001db0:	f7ff f9f2 	bl	8001198 <INA219Read_ShuntV>
 8001db4:	eef0 7a40 	vmov.f32	s15, s0
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <main+0x408>)
 8001dba:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001dbe:	2188      	movs	r1, #136	; 0x88
 8001dc0:	4843      	ldr	r0, [pc, #268]	; (8001ed0 <main+0x404>)
 8001dc2:	f7ff f99d 	bl	8001100 <INA219Read_BusV>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a43      	ldr	r2, [pc, #268]	; (8001ed8 <main+0x40c>)
 8001dca:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001dcc:	2188      	movs	r1, #136	; 0x88
 8001dce:	4840      	ldr	r0, [pc, #256]	; (8001ed0 <main+0x404>)
 8001dd0:	f7ff f9be 	bl	8001150 <INA219Read_Current>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4a3f      	ldr	r2, [pc, #252]	; (8001ed8 <main+0x40c>)
 8001dda:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001ddc:	2188      	movs	r1, #136	; 0x88
 8001dde:	483c      	ldr	r0, [pc, #240]	; (8001ed0 <main+0x404>)
 8001de0:	f7ff fa16 	bl	8001210 <INA219Read_Power>
 8001de4:	eef0 7a40 	vmov.f32	s15, s0
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <main+0x40c>)
 8001dea:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001dee:	2188      	movs	r1, #136	; 0x88
 8001df0:	4837      	ldr	r0, [pc, #220]	; (8001ed0 <main+0x404>)
 8001df2:	f7ff f9d1 	bl	8001198 <INA219Read_ShuntV>
 8001df6:	eef0 7a40 	vmov.f32	s15, s0
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <main+0x40c>)
 8001dfc:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001e00:	2118      	movs	r1, #24
 8001e02:	4836      	ldr	r0, [pc, #216]	; (8001edc <main+0x410>)
 8001e04:	f7ff fa4e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <main+0x414>)
 8001e0c:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001e0e:	2119      	movs	r1, #25
 8001e10:	4832      	ldr	r0, [pc, #200]	; (8001edc <main+0x410>)
 8001e12:	f7ff fa47 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <main+0x414>)
 8001e1a:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001e1c:	211a      	movs	r1, #26
 8001e1e:	482f      	ldr	r0, [pc, #188]	; (8001edc <main+0x410>)
 8001e20:	f7ff fa40 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a2e      	ldr	r2, [pc, #184]	; (8001ee0 <main+0x414>)
 8001e28:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001e2a:	211b      	movs	r1, #27
 8001e2c:	482b      	ldr	r0, [pc, #172]	; (8001edc <main+0x410>)
 8001e2e:	f7ff fa39 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <main+0x414>)
 8001e36:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001e38:	211c      	movs	r1, #28
 8001e3a:	4828      	ldr	r0, [pc, #160]	; (8001edc <main+0x410>)
 8001e3c:	f7ff fa32 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <main+0x414>)
 8001e44:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001e46:	211d      	movs	r1, #29
 8001e48:	4824      	ldr	r0, [pc, #144]	; (8001edc <main+0x410>)
 8001e4a:	f7ff fa2b 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <main+0x414>)
 8001e52:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001e54:	211e      	movs	r1, #30
 8001e56:	4821      	ldr	r0, [pc, #132]	; (8001edc <main+0x410>)
 8001e58:	f7ff fa24 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <main+0x414>)
 8001e60:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001e62:	211f      	movs	r1, #31
 8001e64:	481d      	ldr	r0, [pc, #116]	; (8001edc <main+0x410>)
 8001e66:	f7ff fa1d 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <main+0x414>)
 8001e6e:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i < 7;i++){
 8001e70:	2400      	movs	r4, #0
 8001e72:	e00e      	b.n	8001e92 <main+0x3c6>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <main+0x414>)
 8001e76:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fa48 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001e80:	eef0 7a40 	vmov.f32	s15, s0
 8001e84:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <main+0x414>)
 8001e86:	1d23      	adds	r3, r4, #4
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i < 7;i++){
 8001e90:	3401      	adds	r4, #1
 8001e92:	2c06      	cmp	r4, #6
 8001e94:	ddee      	ble.n	8001e74 <main+0x3a8>
		  }


		  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <main+0x418>)
 8001e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 f827 	bl	8002ef0 <ADCTVolta>
 8001ea2:	eef0 7a40 	vmov.f32	s15, s0
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	f001 f851 	bl	8002f50 <TempEquat>
 8001eae:	eef0 7a40 	vmov.f32	s15, s0
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <main+0x41c>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]

		  //Protection_machine();
		  manual_relay();
 8001eb8:	f000 fc24 	bl	8002704 <manual_relay>
	  Button_machine();
 8001ebc:	e665      	b.n	8001b8a <main+0xbe>
 8001ebe:	bf00      	nop
 8001ec0:	20000650 	.word	0x20000650
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	20000658 	.word	0x20000658
 8001ecc:	2000040c 	.word	0x2000040c
 8001ed0:	20000248 	.word	0x20000248
 8001ed4:	200005ec 	.word	0x200005ec
 8001ed8:	20000604 	.word	0x20000604
 8001edc:	2000029c 	.word	0x2000029c
 8001ee0:	2000061c 	.word	0x2000061c
 8001ee4:	20000518 	.word	0x20000518
 8001ee8:	200005e8 	.word	0x200005e8

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	; 0x50
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	; 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 fe2c 	bl	800ab58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <SystemClock_Config+0xc8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <SystemClock_Config+0xc8>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <SystemClock_Config+0xc8>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f50:	2310      	movs	r3, #16
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f54:	2302      	movs	r3, #2
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	4618      	mov	r0, r3
 8001f72:	f005 ff27 	bl	8007dc4 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f7c:	f001 f874 	bl	8003068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f006 f989 	bl	80082b4 <HAL_RCC_ClockConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fa8:	f001 f85e 	bl	8003068 <Error_Handler>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3750      	adds	r7, #80	; 0x50
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_I2C1_Init+0x50>)
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <MX_I2C1_Init+0x54>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_I2C1_Init+0x50>)
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_I2C1_Init+0x58>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_I2C1_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_I2C1_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_I2C1_Init+0x50>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <MX_I2C1_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_I2C1_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_I2C1_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_I2C1_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <MX_I2C1_Init+0x50>)
 8001ffa:	f003 fa49 	bl	8005490 <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f001 f830 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000248 	.word	0x20000248
 8002010:	40005400 	.word	0x40005400
 8002014:	00061a80 	.word	0x00061a80

08002018 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <MX_SPI3_Init+0x64>)
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <MX_SPI3_Init+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <MX_SPI3_Init+0x64>)
 8002024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_SPI3_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_SPI3_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_SPI3_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_SPI3_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_SPI3_Init+0x64>)
 8002044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002048:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_SPI3_Init+0x64>)
 800204c:	2220      	movs	r2, #32
 800204e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <MX_SPI3_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_SPI3_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <MX_SPI3_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_SPI3_Init+0x64>)
 8002064:	220a      	movs	r2, #10
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_SPI3_Init+0x64>)
 800206a:	f006 fb43 	bl	80086f4 <HAL_SPI_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002074:	f000 fff8 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000029c 	.word	0x2000029c
 8002080:	40003c00 	.word	0x40003c00

08002084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2224      	movs	r2, #36	; 0x24
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f008 fd60 	bl	800ab58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020a2:	4a21      	ldr	r2, [pc, #132]	; (8002128 <MX_TIM3_Init+0xa4>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020c6:	2303      	movs	r3, #3
 80020c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020ca:	2302      	movs	r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ce:	2301      	movs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020d2:	2304      	movs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80020d6:	2308      	movs	r3, #8
 80020d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020de:	2301      	movs	r3, #1
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80020e2:	2304      	movs	r3, #4
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80020e6:	2308      	movs	r3, #8
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <MX_TIM3_Init+0xa0>)
 80020f2:	f006 fed6 	bl	8008ea2 <HAL_TIM_Encoder_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f000 ffb4 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_TIM3_Init+0xa0>)
 800210e:	f007 f9d3 	bl	80094b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002118:	f000 ffa6 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200002f4 	.word	0x200002f4
 8002128:	40000400 	.word	0x40000400

0800212c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_TIM10_Init+0x40>)
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <MX_TIM10_Init+0x44>)
 8002134:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <MX_TIM10_Init+0x40>)
 8002138:	f240 32e7 	movw	r2, #999	; 0x3e7
 800213c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_TIM10_Init+0x40>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_TIM10_Init+0x40>)
 8002146:	f241 3287 	movw	r2, #4999	; 0x1387
 800214a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <MX_TIM10_Init+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_TIM10_Init+0x40>)
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <MX_TIM10_Init+0x40>)
 800215a:	f006 fdc1 	bl	8008ce0 <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002164:	f000 ff80 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000033c 	.word	0x2000033c
 8002170:	40014400 	.word	0x40014400

08002174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <MX_USART1_UART_Init+0x54>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 8002188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800218c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 80021b0:	f007 fa04 	bl	80095bc <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80021ba:	f000 ff55 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000384 	.word	0x20000384
 80021c8:	40011000 	.word	0x40011000

080021cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <MX_USART2_UART_Init+0x50>)
 80021d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021f2:	220c      	movs	r2, #12
 80021f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_USART2_UART_Init+0x4c>)
 8002204:	f007 f9da 	bl	80095bc <HAL_UART_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800220e:	f000 ff2b 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003c8 	.word	0x200003c8
 800221c:	40004400 	.word	0x40004400

08002220 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_USART6_UART_Init+0x4c>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <MX_USART6_UART_Init+0x50>)
 8002228:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <MX_USART6_UART_Init+0x4c>)
 800222c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002230:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_USART6_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_USART6_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_USART6_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_USART6_UART_Init+0x4c>)
 8002246:	220c      	movs	r2, #12
 8002248:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_USART6_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_USART6_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_USART6_UART_Init+0x4c>)
 8002258:	f007 f9b0 	bl	80095bc <HAL_UART_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002262:	f000 ff01 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000040c 	.word	0x2000040c
 8002270:	40011400 	.word	0x40011400

08002274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_DMA_Init+0x3c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <MX_DMA_Init+0x3c>)
 8002284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_DMA_Init+0x3c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2039      	movs	r0, #57	; 0x39
 800229c:	f002 fae1 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022a0:	2039      	movs	r0, #57	; 0x39
 80022a2:	f002 fafa 	bl	800489a <HAL_NVIC_EnableIRQ>

}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <MX_GPIO_Init+0x208>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <MX_GPIO_Init+0x208>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b78      	ldr	r3, [pc, #480]	; (80024bc <MX_GPIO_Init+0x208>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b74      	ldr	r3, [pc, #464]	; (80024bc <MX_GPIO_Init+0x208>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a73      	ldr	r2, [pc, #460]	; (80024bc <MX_GPIO_Init+0x208>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <MX_GPIO_Init+0x208>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <MX_GPIO_Init+0x208>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a6c      	ldr	r2, [pc, #432]	; (80024bc <MX_GPIO_Init+0x208>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <MX_GPIO_Init+0x208>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b66      	ldr	r3, [pc, #408]	; (80024bc <MX_GPIO_Init+0x208>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a65      	ldr	r2, [pc, #404]	; (80024bc <MX_GPIO_Init+0x208>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <MX_GPIO_Init+0x208>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <MX_GPIO_Init+0x208>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <MX_GPIO_Init+0x208>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <MX_GPIO_Init+0x208>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 8002356:	2200      	movs	r2, #0
 8002358:	f240 314b 	movw	r1, #843	; 0x34b
 800235c:	4858      	ldr	r0, [pc, #352]	; (80024c0 <MX_GPIO_Init+0x20c>)
 800235e:	f003 f84b 	bl	80053f8 <HAL_GPIO_WritePin>
                          |RelayClient_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002368:	4856      	ldr	r0, [pc, #344]	; (80024c4 <MX_GPIO_Init+0x210>)
 800236a:	f003 f845 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	2101      	movs	r1, #1
 8002372:	4855      	ldr	r0, [pc, #340]	; (80024c8 <MX_GPIO_Init+0x214>)
 8002374:	f003 f840 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2104      	movs	r1, #4
 800237c:	4853      	ldr	r0, [pc, #332]	; (80024cc <MX_GPIO_Init+0x218>)
 800237e:	f003 f83b 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002388:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4849      	ldr	r0, [pc, #292]	; (80024c0 <MX_GPIO_Init+0x20c>)
 800239a:	f002 fea9 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin RelayClient_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|RelayClient_Pin
 800239e:	f240 3343 	movw	r3, #835	; 0x343
 80023a2:	617b      	str	r3, [r7, #20]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	4842      	ldr	r0, [pc, #264]	; (80024c0 <MX_GPIO_Init+0x20c>)
 80023b8:	f002 fe9a 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80023bc:	2304      	movs	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	483c      	ldr	r0, [pc, #240]	; (80024c0 <MX_GPIO_Init+0x20c>)
 80023d0:	f002 fe8e 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80023d4:	2308      	movs	r3, #8
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4835      	ldr	r0, [pc, #212]	; (80024c0 <MX_GPIO_Init+0x20c>)
 80023ec:	f002 fe80 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 80023f0:	f44f 7398 	mov.w	r3, #304	; 0x130
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	482e      	ldr	r0, [pc, #184]	; (80024c4 <MX_GPIO_Init+0x210>)
 800240a:	f002 fe71 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800241a:	2301      	movs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4828      	ldr	r0, [pc, #160]	; (80024c8 <MX_GPIO_Init+0x214>)
 8002426:	f002 fe63 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 800242a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	4822      	ldr	r0, [pc, #136]	; (80024c8 <MX_GPIO_Init+0x214>)
 8002440:	f002 fe56 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002448:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	2301      	movs	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4819      	ldr	r0, [pc, #100]	; (80024c0 <MX_GPIO_Init+0x20c>)
 800245a:	f002 fe49 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800245e:	2304      	movs	r3, #4
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4815      	ldr	r0, [pc, #84]	; (80024cc <MX_GPIO_Init+0x218>)
 8002476:	f002 fe3b 	bl	80050f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	480e      	ldr	r0, [pc, #56]	; (80024c8 <MX_GPIO_Init+0x214>)
 800248e:	f002 fe2f 	bl	80050f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2017      	movs	r0, #23
 8002498:	f002 f9e3 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800249c:	2017      	movs	r0, #23
 800249e:	f002 f9fc 	bl	800489a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2028      	movs	r0, #40	; 0x28
 80024a8:	f002 f9db 	bl	8004862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024ac:	2028      	movs	r0, #40	; 0x28
 80024ae:	f002 f9f4 	bl	800489a <HAL_NVIC_EnableIRQ>

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020c00 	.word	0x40020c00

080024d0 <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4603      	mov	r3, r0
 80024d8:	460a      	mov	r2, r1
 80024da:	80fb      	strh	r3, [r7, #6]
 80024dc:	4613      	mov	r3, r2
 80024de:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <box_pointer+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <box_pointer+0x5c>)
 80024ea:	8818      	ldrh	r0, [r3, #0]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <box_pointer+0x5c>)
 80024ee:	8859      	ldrh	r1, [r3, #2]
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	230f      	movs	r3, #15
 80024f6:	220f      	movs	r2, #15
 80024f8:	f001 fa6a 	bl	80039d0 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 80024fc:	88b9      	ldrh	r1, [r7, #4]
 80024fe:	88f8      	ldrh	r0, [r7, #6]
 8002500:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	230f      	movs	r3, #15
 8002508:	220f      	movs	r2, #15
 800250a:	f001 fa61 	bl	80039d0 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <box_pointer+0x5c>)
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 8002514:	4a05      	ldr	r2, [pc, #20]	; (800252c <box_pointer+0x5c>)
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 800251a:	4b03      	ldr	r3, [pc, #12]	; (8002528 <box_pointer+0x58>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000068e 	.word	0x2000068e
 800252c:	20000690 	.word	0x20000690

08002530 <simple_scr>:

void simple_scr(){
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <simple_scr+0xac>)
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	461a      	mov	r2, r3
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <simple_scr+0xac>)
 800253e:	789b      	ldrb	r3, [r3, #2]
 8002540:	4619      	mov	r1, r3
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <simple_scr+0xb0>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	4926      	ldr	r1, [pc, #152]	; (80025e4 <simple_scr+0xb4>)
 800254c:	4826      	ldr	r0, [pc, #152]	; (80025e8 <simple_scr+0xb8>)
 800254e:	f008 ff75 	bl	800b43c <siprintf>
	  ili9341_WriteString(170, 10, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <simple_scr+0xbc>)
 8002554:	2200      	movs	r2, #0
 8002556:	9202      	str	r2, [sp, #8]
 8002558:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800255c:	9201      	str	r2, [sp, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	9200      	str	r2, [sp, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <simple_scr+0xb8>)
 8002566:	210a      	movs	r1, #10
 8002568:	20aa      	movs	r0, #170	; 0xaa
 800256a:	f001 fbb8 	bl	8003cde <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], btn_k_cnt, k_flag.up); //flag_k_up
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <simple_scr+0xc0>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <simple_scr+0xc4>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <simple_scr+0xc8>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	491e      	ldr	r1, [pc, #120]	; (80025fc <simple_scr+0xcc>)
 8002584:	4818      	ldr	r0, [pc, #96]	; (80025e8 <simple_scr+0xb8>)
 8002586:	f008 ff59 	bl	800b43c <siprintf>
	  ili9341_WriteString(170, 30, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <simple_scr+0xbc>)
 800258c:	2200      	movs	r2, #0
 800258e:	9202      	str	r2, [sp, #8]
 8002590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002594:	9201      	str	r2, [sp, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	9200      	str	r2, [sp, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <simple_scr+0xb8>)
 800259e:	211e      	movs	r1, #30
 80025a0:	20aa      	movs	r0, #170	; 0xaa
 80025a2:	f001 fb9c 	bl	8003cde <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, state_box_choice_is);
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <simple_scr+0xd0>)
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <simple_scr+0xd4>)
 80025ac:	f993 3000 	ldrsb.w	r3, [r3]
 80025b0:	4915      	ldr	r1, [pc, #84]	; (8002608 <simple_scr+0xd8>)
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <simple_scr+0xb8>)
 80025b4:	f008 ff42 	bl	800b43c <siprintf>
	  ili9341_WriteString(190, 50, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <simple_scr+0xbc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	9202      	str	r2, [sp, #8]
 80025be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c2:	9201      	str	r2, [sp, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	9200      	str	r2, [sp, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <simple_scr+0xb8>)
 80025cc:	2132      	movs	r1, #50	; 0x32
 80025ce:	20be      	movs	r0, #190	; 0xbe
 80025d0:	f001 fb85 	bl	8003cde <ili9341_WriteString>

}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000067c 	.word	0x2000067c
 80025e0:	20000680 	.word	0x20000680
 80025e4:	0800da70 	.word	0x0800da70
 80025e8:	200004b0 	.word	0x200004b0
 80025ec:	20000024 	.word	0x20000024
 80025f0:	20000684 	.word	0x20000684
 80025f4:	20000688 	.word	0x20000688
 80025f8:	2000068c 	.word	0x2000068c
 80025fc:	0800da80 	.word	0x0800da80
 8002600:	40000400 	.word	0x40000400
 8002604:	20000015 	.word	0x20000015
 8002608:	0800da90 	.word	0x0800da90

0800260c <Button_machine>:
		 }
	}
}


void Button_machine(){
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <Button_machine+0x88>)
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <Button_machine+0x88>)
 8002616:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <Button_machine+0x8c>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	0b1b      	lsrs	r3, r3, #12
 800261e:	b2db      	uxtb	r3, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <Button_machine+0x88>)
 800262c:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <Button_machine+0x88>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d017      	beq.n	8002666 <Button_machine+0x5a>
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <Button_machine+0x88>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <Button_machine+0x5a>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <Button_machine+0x88>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b29a      	uxth	r2, r3
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <Button_machine+0x90>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	4413      	add	r3, r2
 800264a:	b29a      	uxth	r2, r3
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <Button_machine+0x90>)
 800264e:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <Button_machine+0x88>)
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <Button_machine+0x88>)
 8002656:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <Button_machine+0x88>)
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <Button_machine+0x88>)
 800265e:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try
			flag_manual_relay = 1;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <Button_machine+0x94>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
//		}

//		knob_rotter();

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <Button_machine+0x98>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b10      	cmp	r3, #16
 800266c:	d905      	bls.n	800267a <Button_machine+0x6e>
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <Button_machine+0x98>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8002676:	4293      	cmp	r3, r2
 8002678:	d907      	bls.n	800268a <Button_machine+0x7e>
			TIM3->CNT = 0x8000; // back to center
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <Button_machine+0x9c>)
 800267c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <Button_machine+0x98>)
 8002684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002688:	801a      	strh	r2, [r3, #0]
		}


}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	2000067c 	.word	0x2000067c
 8002698:	40020400 	.word	0x40020400
 800269c:	20000680 	.word	0x20000680
 80026a0:	2000066c 	.word	0x2000066c
 80026a4:	20000684 	.word	0x20000684
 80026a8:	40000400 	.word	0x40000400

080026ac <knob_rotter>:

void knob_rotter(){
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <knob_rotter+0x4c>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <knob_rotter+0x50>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d908      	bls.n	80026d0 <knob_rotter+0x24>
		//flag_k_up = 1;
		k_flag.up = 1;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <knob_rotter+0x54>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <knob_rotter+0x4c>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <knob_rotter+0x50>)
 80026cc:	801a      	strh	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;

	}
	else{}

}
 80026ce:	e00e      	b.n	80026ee <knob_rotter+0x42>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <knob_rotter+0x4c>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <knob_rotter+0x50>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d207      	bcs.n	80026ee <knob_rotter+0x42>
		k_flag.dn = 1;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <knob_rotter+0x54>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <knob_rotter+0x4c>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <knob_rotter+0x50>)
 80026ec:	801a      	strh	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40000400 	.word	0x40000400
 80026fc:	20000684 	.word	0x20000684
 8002700:	2000068c 	.word	0x2000068c

08002704 <manual_relay>:
		}
	}else{counter_overcurrent = 0;}

}

void manual_relay(){
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <manual_relay+0x28>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <manual_relay+0x24>

		if(GrandState == monitor){
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <manual_relay+0x2c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b06      	cmp	r3, #6
 8002716:	d104      	bne.n	8002722 <manual_relay+0x1e>

			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 8002718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <manual_relay+0x30>)
 800271e:	f002 fe84 	bl	800542a <HAL_GPIO_TogglePin>

		}

		flag_manual_relay = 0;
 8002722:	4b02      	ldr	r3, [pc, #8]	; (800272c <manual_relay+0x28>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
	}
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000066c 	.word	0x2000066c
 8002730:	20000006 	.word	0x20000006
 8002734:	40020800 	.word	0x40020800

08002738 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8002738:	b598      	push	{r3, r4, r7, lr}
 800273a:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <buzzer_scream_cnt+0xdc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d039      	beq.n	80027b8 <buzzer_scream_cnt+0x80>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d01d      	beq.n	8002784 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <buzzer_scream_cnt+0xe0>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002750:	4832      	ldr	r0, [pc, #200]	; (800281c <buzzer_scream_cnt+0xe4>)
 8002752:	f006 fb15 	bl	8008d80 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002756:	4b30      	ldr	r3, [pc, #192]	; (8002818 <buzzer_scream_cnt+0xe0>)
 8002758:	885b      	ldrh	r3, [r3, #2]
 800275a:	461c      	mov	r4, r3
 800275c:	f001 ff76 	bl	800464c <HAL_GetTick>
 8002760:	4603      	mov	r3, r0
 8002762:	4423      	add	r3, r4
 8002764:	4a2c      	ldr	r2, [pc, #176]	; (8002818 <buzzer_scream_cnt+0xe0>)
 8002766:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <buzzer_scream_cnt+0xdc>)
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <buzzer_scream_cnt+0xe0>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	3b01      	subs	r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <buzzer_scream_cnt+0xe0>)
 8002778:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 800277a:	e048      	b.n	800280e <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 800277c:	4827      	ldr	r0, [pc, #156]	; (800281c <buzzer_scream_cnt+0xe4>)
 800277e:	f006 fb61 	bl	8008e44 <HAL_TIM_Base_Stop_IT>
			break;
 8002782:	e044      	b.n	800280e <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002784:	2201      	movs	r2, #1
 8002786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800278a:	4825      	ldr	r0, [pc, #148]	; (8002820 <buzzer_scream_cnt+0xe8>)
 800278c:	f002 fe34 	bl	80053f8 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002790:	f001 ff5c 	bl	800464c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <buzzer_scream_cnt+0xe0>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d334      	bcc.n	8002808 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	461c      	mov	r4, r3
 80027a4:	f001 ff52 	bl	800464c <HAL_GetTick>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4423      	add	r3, r4
 80027ac:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027ae:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <buzzer_scream_cnt+0xdc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027b6:	e027      	b.n	8002808 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027be:	4818      	ldr	r0, [pc, #96]	; (8002820 <buzzer_scream_cnt+0xe8>)
 80027c0:	f002 fe1a 	bl	80053f8 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 80027c4:	f001 ff42 	bl	800464c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d31c      	bcc.n	800280c <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027dc:	885b      	ldrh	r3, [r3, #2]
 80027de:	461c      	mov	r4, r3
 80027e0:	f001 ff34 	bl	800464c <HAL_GetTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4423      	add	r3, r4
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027ea:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <buzzer_scream_cnt+0xe0>)
 80027f6:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <buzzer_scream_cnt+0xdc>)
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 80027fe:	e005      	b.n	800280c <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <buzzer_scream_cnt+0xdc>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
			break;
 8002806:	e001      	b.n	800280c <buzzer_scream_cnt+0xd4>
			break;
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <buzzer_scream_cnt+0xd6>
			break;
 800280c:	bf00      	nop
		}

}
 800280e:	bf00      	nop
 8002810:	bd98      	pop	{r3, r4, r7, pc}
 8002812:	bf00      	nop
 8002814:	20000698 	.word	0x20000698
 8002818:	20000670 	.word	0x20000670
 800281c:	2000033c 	.word	0x2000033c
 8002820:	40020800 	.word	0x40020800

08002824 <GrandState_Verita>:


void GrandState_Verita(){
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b085      	sub	sp, #20
 8002828:	af04      	add	r7, sp, #16

	switch(GrandState){
 800282a:	4b9f      	ldr	r3, [pc, #636]	; (8002aa8 <GrandState_Verita+0x284>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b06      	cmp	r3, #6
 8002830:	d87e      	bhi.n	8002930 <GrandState_Verita+0x10c>
 8002832:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <GrandState_Verita+0x14>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	08002987 	.word	0x08002987
 800283c:	08002855 	.word	0x08002855
 8002840:	08002931 	.word	0x08002931
 8002844:	080029a9 	.word	0x080029a9
 8002848:	08002a01 	.word	0x08002a01
 800284c:	08002af9 	.word	0x08002af9
 8002850:	08002c2f 	.word	0x08002c2f

	case pre_lobby:
		state_box_choice_n = 4;
 8002854:	4b95      	ldr	r3, [pc, #596]	; (8002aac <GrandState_Verita+0x288>)
 8002856:	2204      	movs	r2, #4
 8002858:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	23f0      	movs	r3, #240	; 0xf0
 8002860:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002864:	2100      	movs	r1, #0
 8002866:	2000      	movs	r0, #0
 8002868:	f001 f8b2 	bl	80039d0 <ili9341_FillRect>

		ili9341_FillRect(300, 0, 20, 240, cl_ORANGE);
 800286c:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	23f0      	movs	r3, #240	; 0xf0
 8002874:	2214      	movs	r2, #20
 8002876:	2100      	movs	r1, #0
 8002878:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800287c:	f001 f8a8 	bl	80039d0 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_ORANGE);
 8002880:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	230a      	movs	r3, #10
 8002888:	220a      	movs	r2, #10
 800288a:	2100      	movs	r1, #0
 800288c:	2000      	movs	r0, #0
 800288e:	f001 f89f 	bl	80039d0 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Verita: Nucleo-F411RE Tester");
 8002892:	4987      	ldr	r1, [pc, #540]	; (8002ab0 <GrandState_Verita+0x28c>)
 8002894:	4887      	ldr	r0, [pc, #540]	; (8002ab4 <GrandState_Verita+0x290>)
 8002896:	f008 fdd1 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(10, 10, TextDispBuffer, Font20, cl_WHITE);
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <GrandState_Verita+0x294>)
 800289c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a0:	9201      	str	r2, [sp, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a82      	ldr	r2, [pc, #520]	; (8002ab4 <GrandState_Verita+0x290>)
 80028aa:	210a      	movs	r1, #10
 80028ac:	200a      	movs	r0, #10
 80028ae:	f001 fa63 	bl	8003d78 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Full Script");
 80028b2:	4982      	ldr	r1, [pc, #520]	; (8002abc <GrandState_Verita+0x298>)
 80028b4:	487f      	ldr	r0, [pc, #508]	; (8002ab4 <GrandState_Verita+0x290>)
 80028b6:	f008 fdc1 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 80028ba:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <GrandState_Verita+0x29c>)
 80028bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80028c0:	9201      	str	r2, [sp, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	9200      	str	r2, [sp, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7a      	ldr	r2, [pc, #488]	; (8002ab4 <GrandState_Verita+0x290>)
 80028ca:	213c      	movs	r1, #60	; 0x3c
 80028cc:	2032      	movs	r0, #50	; 0x32
 80028ce:	f001 fa53 	bl	8003d78 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR_Monitor");
 80028d2:	497c      	ldr	r1, [pc, #496]	; (8002ac4 <GrandState_Verita+0x2a0>)
 80028d4:	4877      	ldr	r0, [pc, #476]	; (8002ab4 <GrandState_Verita+0x290>)
 80028d6:	f008 fdb1 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(50, 90, TextDispBuffer, Font16, cl_CYAN);
 80028da:	4b79      	ldr	r3, [pc, #484]	; (8002ac0 <GrandState_Verita+0x29c>)
 80028dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80028e0:	9201      	str	r2, [sp, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	9200      	str	r2, [sp, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <GrandState_Verita+0x290>)
 80028ea:	215a      	movs	r1, #90	; 0x5a
 80028ec:	2032      	movs	r0, #50	; 0x32
 80028ee:	f001 fa43 	bl	8003d78 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Analog, coming soon");
 80028f2:	4975      	ldr	r1, [pc, #468]	; (8002ac8 <GrandState_Verita+0x2a4>)
 80028f4:	486f      	ldr	r0, [pc, #444]	; (8002ab4 <GrandState_Verita+0x290>)
 80028f6:	f008 fda1 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(50, 120, TextDispBuffer, Font16, cl_CYAN);
 80028fa:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <GrandState_Verita+0x29c>)
 80028fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002900:	9201      	str	r2, [sp, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6a      	ldr	r2, [pc, #424]	; (8002ab4 <GrandState_Verita+0x290>)
 800290a:	2178      	movs	r1, #120	; 0x78
 800290c:	2032      	movs	r0, #50	; 0x32
 800290e:	f001 fa33 	bl	8003d78 <ili9341_WriteStringNoBG>

		box_pointer(20, bosy[state_box_choice_is]);
 8002912:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <GrandState_Verita+0x2a8>)
 8002914:	f993 3000 	ldrsb.w	r3, [r3]
 8002918:	461a      	mov	r2, r3
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <GrandState_Verita+0x2ac>)
 800291c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002920:	4619      	mov	r1, r3
 8002922:	2014      	movs	r0, #20
 8002924:	f7ff fdd4 	bl	80024d0 <box_pointer>

		GrandState = lobby;
 8002928:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <GrandState_Verita+0x284>)
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
		break;
 800292e:	e2bd      	b.n	8002eac <GrandState_Verita+0x688>

	default:
	case lobby:
		state_box_choice_n = 4;
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <GrandState_Verita+0x288>)
 8002932:	2204      	movs	r2, #4
 8002934:	701a      	strb	r2, [r3, #0]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, state_box_choice_is);
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <GrandState_Verita+0x2b0>)
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	4b64      	ldr	r3, [pc, #400]	; (8002acc <GrandState_Verita+0x2a8>)
 800293c:	f993 3000 	ldrsb.w	r3, [r3]
 8002940:	4965      	ldr	r1, [pc, #404]	; (8002ad8 <GrandState_Verita+0x2b4>)
 8002942:	485c      	ldr	r0, [pc, #368]	; (8002ab4 <GrandState_Verita+0x290>)
 8002944:	f008 fd7a 	bl	800b43c <siprintf>
		ili9341_WriteString(120, 150, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002948:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <GrandState_Verita+0x29c>)
 800294a:	2200      	movs	r2, #0
 800294c:	9202      	str	r2, [sp, #8]
 800294e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002952:	9201      	str	r2, [sp, #4]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a56      	ldr	r2, [pc, #344]	; (8002ab4 <GrandState_Verita+0x290>)
 800295c:	2196      	movs	r1, #150	; 0x96
 800295e:	2078      	movs	r0, #120	; 0x78
 8002960:	f001 f9bd 	bl	8003cde <ili9341_WriteString>
		//simple_scr();
		if(btn_k_cnt){
 8002964:	4b5d      	ldr	r3, [pc, #372]	; (8002adc <GrandState_Verita+0x2b8>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 829c 	beq.w	8002ea6 <GrandState_Verita+0x682>

			if (state_box_choice_is == 2){GrandState = pre_monitor;}
 800296e:	4b57      	ldr	r3, [pc, #348]	; (8002acc <GrandState_Verita+0x2a8>)
 8002970:	f993 3000 	ldrsb.w	r3, [r3]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d102      	bne.n	800297e <GrandState_Verita+0x15a>
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <GrandState_Verita+0x284>)
 800297a:	2205      	movs	r2, #5
 800297c:	701a      	strb	r2, [r3, #0]

		btn_k_cnt = 0;
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <GrandState_Verita+0x2b8>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
		}

		break; // lobby
 8002984:	e28f      	b.n	8002ea6 <GrandState_Verita+0x682>

	case init:
		state_box_choice_n = 0;
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <GrandState_Verita+0x288>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
//		}
//		//// last round: send only left bit (less 255)
//		HAL_Delay(2);
//		BL_UART_WriteMem_d(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);

		BL_UART_Start(&huart1);
 800298c:	4854      	ldr	r0, [pc, #336]	; (8002ae0 <GrandState_Verita+0x2bc>)
 800298e:	f7fe feab 	bl	80016e8 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002992:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002996:	4852      	ldr	r0, [pc, #328]	; (8002ae0 <GrandState_Verita+0x2bc>)
 8002998:	f7ff f820 	bl	80019dc <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 800299c:	f7fe fed4 	bl	8001748 <BL_UART_Finish>

		GrandState = lobby;
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <GrandState_Verita+0x284>)
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
		break;
 80029a6:	e281      	b.n	8002eac <GrandState_Verita+0x688>

	case pre_bootloader:
		state_box_choice_n = 0;
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <GrandState_Verita+0x288>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 80029ae:	2300      	movs	r3, #0
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	23f0      	movs	r3, #240	; 0xf0
 80029b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029b8:	2100      	movs	r1, #0
 80029ba:	2000      	movs	r0, #0
 80029bc:	f001 f808 	bl	80039d0 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_PURPLE);
 80029c0:	f647 030f 	movw	r3, #30735	; 0x780f
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	230a      	movs	r3, #10
 80029c8:	220a      	movs	r2, #10
 80029ca:	2100      	movs	r1, #0
 80029cc:	2000      	movs	r0, #0
 80029ce:	f000 ffff 	bl	80039d0 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Boot...");
 80029d2:	4944      	ldr	r1, [pc, #272]	; (8002ae4 <GrandState_Verita+0x2c0>)
 80029d4:	4837      	ldr	r0, [pc, #220]	; (8002ab4 <GrandState_Verita+0x290>)
 80029d6:	f008 fd31 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(60, 120, TextDispBuffer, Font24, cl_WHITE);
 80029da:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <GrandState_Verita+0x2c4>)
 80029dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e0:	9201      	str	r2, [sp, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	9200      	str	r2, [sp, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a32      	ldr	r2, [pc, #200]	; (8002ab4 <GrandState_Verita+0x290>)
 80029ea:	2178      	movs	r1, #120	; 0x78
 80029ec:	203c      	movs	r0, #60	; 0x3c
 80029ee:	f001 f9c3 	bl	8003d78 <ili9341_WriteStringNoBG>

		btn_k_cnt = 0; //// prevent over state jump
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <GrandState_Verita+0x2b8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
		GrandState = s_bootloader;
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <GrandState_Verita+0x284>)
 80029fa:	2204      	movs	r2, #4
 80029fc:	701a      	strb	r2, [r3, #0]
		break;
 80029fe:	e255      	b.n	8002eac <GrandState_Verita+0x688>

	case s_bootloader:
		state_box_choice_n = 0;
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <GrandState_Verita+0x288>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <GrandState_Verita+0x2c8>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4a36      	ldr	r2, [pc, #216]	; (8002aec <GrandState_Verita+0x2c8>)
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	b292      	uxth	r2, r2
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2201      	movne	r2, #1
 8002a1e:	2200      	moveq	r2, #0
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4413      	add	r3, r2
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <GrandState_Verita+0x2cc>)
 8002a28:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8002a2a:	482d      	ldr	r0, [pc, #180]	; (8002ae0 <GrandState_Verita+0x2bc>)
 8002a2c:	f7fe fe5c 	bl	80016e8 <BL_UART_Start>

		//// Flash Memory Erase ============,
		//// Erase1_Mass_CMD makes bootloader not response to ALL write CMD / dont know why
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank1_CMD);
 8002a30:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002a34:	482a      	ldr	r0, [pc, #168]	; (8002ae0 <GrandState_Verita+0x2bc>)
 8002a36:	f7fe ffd1 	bl	80019dc <BL_UART_ExtendEraseMem_SP>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank2_CMD);
 8002a3a:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8002a3e:	4828      	ldr	r0, [pc, #160]	; (8002ae0 <GrandState_Verita+0x2bc>)
 8002a40:	f7fe ffcc 	bl	80019dc <BL_UART_ExtendEraseMem_SP>

		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002a44:	2400      	movs	r4, #0
 8002a46:	e00b      	b.n	8002a60 <GrandState_Verita+0x23c>
			BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8002a48:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4619      	mov	r1, r3
 8002a50:	0223      	lsls	r3, r4, #8
 8002a52:	4a28      	ldr	r2, [pc, #160]	; (8002af4 <GrandState_Verita+0x2d0>)
 8002a54:	4413      	add	r3, r2
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <GrandState_Verita+0x2bc>)
 8002a5a:	f7fe fe93 	bl	8001784 <BL_UART_WriteMem>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002a5e:	3401      	adds	r4, #1
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <GrandState_Verita+0x2cc>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	429c      	cmp	r4, r3
 8002a68:	dbee      	blt.n	8002a48 <GrandState_Verita+0x224>
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <GrandState_Verita+0x2cc>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8002a72:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <GrandState_Verita+0x2c8>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <GrandState_Verita+0x2cc>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	491a      	ldr	r1, [pc, #104]	; (8002af4 <GrandState_Verita+0x2d0>)
 8002a8a:	440b      	add	r3, r1
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <GrandState_Verita+0x2bc>)
 8002a90:	f7fe fe78 	bl	8001784 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8002a94:	f7fe fe58 	bl	8001748 <BL_UART_Finish>

		btn_k_cnt = 0; //// prevent over state jump
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <GrandState_Verita+0x2b8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
		GrandState = lobby;
 8002a9e:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <GrandState_Verita+0x284>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]

		break;
 8002aa4:	e202      	b.n	8002eac <GrandState_Verita+0x688>
 8002aa6:	bf00      	nop
 8002aa8:	20000006 	.word	0x20000006
 8002aac:	20000014 	.word	0x20000014
 8002ab0:	0800da98 	.word	0x0800da98
 8002ab4:	200004b0 	.word	0x200004b0
 8002ab8:	2000002c 	.word	0x2000002c
 8002abc:	0800dab8 	.word	0x0800dab8
 8002ac0:	20000024 	.word	0x20000024
 8002ac4:	0800dac4 	.word	0x0800dac4
 8002ac8:	0800dad0 	.word	0x0800dad0
 8002acc:	20000015 	.word	0x20000015
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	0800da90 	.word	0x0800da90
 8002adc:	20000688 	.word	0x20000688
 8002ae0:	20000384 	.word	0x20000384
 8002ae4:	0800dae4 	.word	0x0800dae4
 8002ae8:	20000034 	.word	0x20000034
 8002aec:	20000004 	.word	0x20000004
 8002af0:	20000514 	.word	0x20000514
 8002af4:	0800dbb8 	.word	0x0800dbb8

	case pre_monitor:
		state_box_choice_n = 0;
 8002af8:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <GrandState_Verita+0x49c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002afe:	2300      	movs	r3, #0
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	23f0      	movs	r3, #240	; 0xf0
 8002b04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b08:	2100      	movs	r1, #0
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 ff60 	bl	80039d0 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_ORANGE);
 8002b10:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	230a      	movs	r3, #10
 8002b18:	220a      	movs	r2, #10
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f000 ff57 	bl	80039d0 <ili9341_FillRect>

		sprintf(TextDispBuffer,"<-Back (Knob press)");
 8002b22:	4968      	ldr	r1, [pc, #416]	; (8002cc4 <GrandState_Verita+0x4a0>)
 8002b24:	4868      	ldr	r0, [pc, #416]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b26:	f008 fc89 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(60, 220, TextDispBuffer, Font16, cl_WHITE);
 8002b2a:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <GrandState_Verita+0x4a8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	9201      	str	r2, [sp, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	9200      	str	r2, [sp, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a63      	ldr	r2, [pc, #396]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b3a:	21dc      	movs	r1, #220	; 0xdc
 8002b3c:	203c      	movs	r0, #60	; 0x3c
 8002b3e:	f001 f91b 	bl	8003d78 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <GrandState_Verita+0x4ac>)
 8002b44:	8a5b      	ldrh	r3, [r3, #18]
 8002b46:	461a      	mov	r2, r3
 8002b48:	4962      	ldr	r1, [pc, #392]	; (8002cd4 <GrandState_Verita+0x4b0>)
 8002b4a:	485f      	ldr	r0, [pc, #380]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b4c:	f008 fc76 	bl	800b43c <siprintf>
		ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <GrandState_Verita+0x4b4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	9200      	str	r2, [sp, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a59      	ldr	r2, [pc, #356]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b64:	211e      	movs	r1, #30
 8002b66:	2014      	movs	r0, #20
 8002b68:	f001 f8b9 	bl	8003cde <ili9341_WriteString>

		sprintf(TextDispBuffer,"V mV:");
 8002b6c:	495b      	ldr	r1, [pc, #364]	; (8002cdc <GrandState_Verita+0x4b8>)
 8002b6e:	4856      	ldr	r0, [pc, #344]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b70:	f008 fc64 	bl	800b43c <siprintf>
		ili9341_WriteString(20, 50, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8002b74:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <GrandState_Verita+0x4bc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	9202      	str	r2, [sp, #8]
 8002b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a50      	ldr	r2, [pc, #320]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b88:	2132      	movs	r1, #50	; 0x32
 8002b8a:	2014      	movs	r0, #20
 8002b8c:	f001 f8a7 	bl	8003cde <ili9341_WriteString>

		sprintf(TextDispBuffer,"I mA:");
 8002b90:	4954      	ldr	r1, [pc, #336]	; (8002ce4 <GrandState_Verita+0x4c0>)
 8002b92:	484d      	ldr	r0, [pc, #308]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002b94:	f008 fc52 	bl	800b43c <siprintf>
		ili9341_WriteString(20, 90, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8002b98:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <GrandState_Verita+0x4bc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	9202      	str	r2, [sp, #8]
 8002b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba2:	9201      	str	r2, [sp, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a47      	ldr	r2, [pc, #284]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002bac:	215a      	movs	r1, #90	; 0x5a
 8002bae:	2014      	movs	r0, #20
 8002bb0:	f001 f895 	bl	8003cde <ili9341_WriteString>

		sprintf(TextDispBuffer,"P mW:");
 8002bb4:	494c      	ldr	r1, [pc, #304]	; (8002ce8 <GrandState_Verita+0x4c4>)
 8002bb6:	4844      	ldr	r0, [pc, #272]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002bb8:	f008 fc40 	bl	800b43c <siprintf>
		ili9341_WriteString(20, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8002bbc:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <GrandState_Verita+0x4bc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	9202      	str	r2, [sp, #8]
 8002bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a3e      	ldr	r2, [pc, #248]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002bd0:	2182      	movs	r1, #130	; 0x82
 8002bd2:	2014      	movs	r0, #20
 8002bd4:	f001 f883 	bl	8003cde <ili9341_WriteString>

		sprintf(TextDispBuffer,"MCP");
 8002bd8:	4944      	ldr	r1, [pc, #272]	; (8002cec <GrandState_Verita+0x4c8>)
 8002bda:	483b      	ldr	r0, [pc, #236]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002bdc:	f008 fc2e 	bl	800b43c <siprintf>
		ili9341_WriteString(220, 80, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <GrandState_Verita+0x4a8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	9202      	str	r2, [sp, #8]
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	9200      	str	r2, [sp, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a35      	ldr	r2, [pc, #212]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002bf4:	2150      	movs	r1, #80	; 0x50
 8002bf6:	20dc      	movs	r0, #220	; 0xdc
 8002bf8:	f001 f871 	bl	8003cde <ili9341_WriteString>

		sprintf(TextDispBuffer,"Cl_Temp:");
 8002bfc:	493c      	ldr	r1, [pc, #240]	; (8002cf0 <GrandState_Verita+0x4cc>)
 8002bfe:	4832      	ldr	r0, [pc, #200]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002c00:	f008 fc1c 	bl	800b43c <siprintf>
		ili9341_WriteString(20, 170, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <GrandState_Verita+0x4bc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	9202      	str	r2, [sp, #8]
 8002c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002c18:	21aa      	movs	r1, #170	; 0xaa
 8002c1a:	2014      	movs	r0, #20
 8002c1c:	f001 f85f 	bl	8003cde <ili9341_WriteString>

		btn_k_cnt = 0; //// prevent over state jump
 8002c20:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <GrandState_Verita+0x4d0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		GrandState = monitor;
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <GrandState_Verita+0x4d4>)
 8002c28:	2206      	movs	r2, #6
 8002c2a:	701a      	strb	r2, [r3, #0]
		break;
 8002c2c:	e13e      	b.n	8002eac <GrandState_Verita+0x688>


	case monitor:
		state_box_choice_n = 1;
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <GrandState_Verita+0x49c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
		simple_scr();
 8002c34:	f7ff fc7c 	bl	8002530 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <GrandState_Verita+0x4ac>)
 8002c3a:	8a1b      	ldrh	r3, [r3, #16]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	492f      	ldr	r1, [pc, #188]	; (8002cfc <GrandState_Verita+0x4d8>)
 8002c40:	4821      	ldr	r0, [pc, #132]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002c42:	f008 fbfb 	bl	800b43c <siprintf>
		if(inata.Bus_V < 2000){
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <GrandState_Verita+0x4ac>)
 8002c48:	8a1b      	ldrh	r3, [r3, #16]
 8002c4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c4e:	d20e      	bcs.n	8002c6e <GrandState_Verita+0x44a>
			ili9341_WriteString(100, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <GrandState_Verita+0x4a8>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	9202      	str	r2, [sp, #8]
 8002c56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c5a:	9201      	str	r2, [sp, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	9200      	str	r2, [sp, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002c64:	2132      	movs	r1, #50	; 0x32
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	f001 f839 	bl	8003cde <ili9341_WriteString>
 8002c6c:	e00d      	b.n	8002c8a <GrandState_Verita+0x466>
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <GrandState_Verita+0x4a8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	9202      	str	r2, [sp, #8]
 8002c74:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c78:	9201      	str	r2, [sp, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	9200      	str	r2, [sp, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002c82:	2132      	movs	r1, #50	; 0x32
 8002c84:	2064      	movs	r0, #100	; 0x64
 8002c86:	f001 f82a 	bl	8003cde <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <GrandState_Verita+0x4dc>)
 8002c8c:	8a1b      	ldrh	r3, [r3, #16]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <GrandState_Verita+0x4d8>)
 8002c92:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002c94:	f008 fbd2 	bl	800b43c <siprintf>
				if(inatb.Bus_V < 2000){
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <GrandState_Verita+0x4dc>)
 8002c9a:	8a1b      	ldrh	r3, [r3, #16]
 8002c9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ca0:	d230      	bcs.n	8002d04 <GrandState_Verita+0x4e0>
					ili9341_WriteString(100, 70, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <GrandState_Verita+0x4a8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	9202      	str	r2, [sp, #8]
 8002ca8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002cac:	9201      	str	r2, [sp, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <GrandState_Verita+0x4a4>)
 8002cb6:	2146      	movs	r1, #70	; 0x46
 8002cb8:	2064      	movs	r0, #100	; 0x64
 8002cba:	f001 f810 	bl	8003cde <ili9341_WriteString>
 8002cbe:	e02f      	b.n	8002d20 <GrandState_Verita+0x4fc>
 8002cc0:	20000014 	.word	0x20000014
 8002cc4:	0800daec 	.word	0x0800daec
 8002cc8:	200004b0 	.word	0x200004b0
 8002ccc:	20000024 	.word	0x20000024
 8002cd0:	200005ec 	.word	0x200005ec
 8002cd4:	0800db00 	.word	0x0800db00
 8002cd8:	2000001c 	.word	0x2000001c
 8002cdc:	0800db0c 	.word	0x0800db0c
 8002ce0:	2000002c 	.word	0x2000002c
 8002ce4:	0800db14 	.word	0x0800db14
 8002ce8:	0800db1c 	.word	0x0800db1c
 8002cec:	0800db24 	.word	0x0800db24
 8002cf0:	0800db28 	.word	0x0800db28
 8002cf4:	20000688 	.word	0x20000688
 8002cf8:	20000006 	.word	0x20000006
 8002cfc:	0800db34 	.word	0x0800db34
 8002d00:	20000604 	.word	0x20000604
				}else{
					ili9341_WriteString(100, 70, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <GrandState_Verita+0x690>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	9202      	str	r2, [sp, #8]
 8002d0a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d0e:	9201      	str	r2, [sp, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	9200      	str	r2, [sp, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a68      	ldr	r2, [pc, #416]	; (8002eb8 <GrandState_Verita+0x694>)
 8002d18:	2146      	movs	r1, #70	; 0x46
 8002d1a:	2064      	movs	r0, #100	; 0x64
 8002d1c:	f000 ffdf 	bl	8003cde <ili9341_WriteString>
				}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8002d20:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <GrandState_Verita+0x698>)
 8002d22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4965      	ldr	r1, [pc, #404]	; (8002ec0 <GrandState_Verita+0x69c>)
 8002d2a:	4863      	ldr	r0, [pc, #396]	; (8002eb8 <GrandState_Verita+0x694>)
 8002d2c:	f008 fb86 	bl	800b43c <siprintf>
		ili9341_WriteString(100, 90, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002d30:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <GrandState_Verita+0x690>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	9202      	str	r2, [sp, #8]
 8002d36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d3a:	9201      	str	r2, [sp, #4]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	9200      	str	r2, [sp, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <GrandState_Verita+0x694>)
 8002d44:	215a      	movs	r1, #90	; 0x5a
 8002d46:	2064      	movs	r0, #100	; 0x64
 8002d48:	f000 ffc9 	bl	8003cde <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8002d4c:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <GrandState_Verita+0x6a0>)
 8002d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d52:	461a      	mov	r2, r3
 8002d54:	495a      	ldr	r1, [pc, #360]	; (8002ec0 <GrandState_Verita+0x69c>)
 8002d56:	4858      	ldr	r0, [pc, #352]	; (8002eb8 <GrandState_Verita+0x694>)
 8002d58:	f008 fb70 	bl	800b43c <siprintf>
		ili9341_WriteString(100, 110, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002d5c:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <GrandState_Verita+0x690>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	9202      	str	r2, [sp, #8]
 8002d62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d66:	9201      	str	r2, [sp, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	9200      	str	r2, [sp, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <GrandState_Verita+0x694>)
 8002d70:	216e      	movs	r1, #110	; 0x6e
 8002d72:	2064      	movs	r0, #100	; 0x64
 8002d74:	f000 ffb3 	bl	8003cde <ili9341_WriteString>

		sprintf(TextDispBuffer,"%.2f", inata.POWER);
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <GrandState_Verita+0x698>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbeb 	bl	8000558 <__aeabi_f2d>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4950      	ldr	r1, [pc, #320]	; (8002ec8 <GrandState_Verita+0x6a4>)
 8002d88:	484b      	ldr	r0, [pc, #300]	; (8002eb8 <GrandState_Verita+0x694>)
 8002d8a:	f008 fb57 	bl	800b43c <siprintf>
		ili9341_WriteString(100, 130, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <GrandState_Verita+0x690>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	9202      	str	r2, [sp, #8]
 8002d94:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002d98:	9201      	str	r2, [sp, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	9200      	str	r2, [sp, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a45      	ldr	r2, [pc, #276]	; (8002eb8 <GrandState_Verita+0x694>)
 8002da2:	2182      	movs	r1, #130	; 0x82
 8002da4:	2064      	movs	r0, #100	; 0x64
 8002da6:	f000 ff9a 	bl	8003cde <ili9341_WriteString>
		sprintf(TextDispBuffer,"%.2f", inatb.POWER);
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <GrandState_Verita+0x6a0>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbd2 	bl	8000558 <__aeabi_f2d>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4943      	ldr	r1, [pc, #268]	; (8002ec8 <GrandState_Verita+0x6a4>)
 8002dba:	483f      	ldr	r0, [pc, #252]	; (8002eb8 <GrandState_Verita+0x694>)
 8002dbc:	f008 fb3e 	bl	800b43c <siprintf>
		ili9341_WriteString(100, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <GrandState_Verita+0x690>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	9202      	str	r2, [sp, #8]
 8002dc6:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002dca:	9201      	str	r2, [sp, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	9200      	str	r2, [sp, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <GrandState_Verita+0x694>)
 8002dd4:	2196      	movs	r1, #150	; 0x96
 8002dd6:	2064      	movs	r0, #100	; 0x64
 8002dd8:	f000 ff81 	bl	8003cde <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		ili9341_FillRect(220, 100, 30, 90, cl_BLACK);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	235a      	movs	r3, #90	; 0x5a
 8002de2:	221e      	movs	r2, #30
 8002de4:	2164      	movs	r1, #100	; 0x64
 8002de6:	20dc      	movs	r0, #220	; 0xdc
 8002de8:	f000 fdf2 	bl	80039d0 <ili9341_FillRect>
		for(register int t = 0; t < 7; t++){
 8002dec:	2400      	movs	r4, #0
 8002dee:	e01b      	b.n	8002e28 <GrandState_Verita+0x604>
			sprintf(TextDispBuffer,"%d",mcp_read.raw[t]);
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <GrandState_Verita+0x6a8>)
 8002df2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4935      	ldr	r1, [pc, #212]	; (8002ed0 <GrandState_Verita+0x6ac>)
 8002dfa:	482f      	ldr	r0, [pc, #188]	; (8002eb8 <GrandState_Verita+0x694>)
 8002dfc:	f008 fb1e 	bl	800b43c <siprintf>
		ili9341_WriteStringNoBG(220, 100 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 8002e00:	b2a3      	uxth	r3, r4
 8002e02:	461a      	mov	r2, r3
 8002e04:	0052      	lsls	r2, r2, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3364      	adds	r3, #100	; 0x64
 8002e0e:	b299      	uxth	r1, r3
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <GrandState_Verita+0x6b0>)
 8002e12:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e16:	9201      	str	r2, [sp, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	9200      	str	r2, [sp, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <GrandState_Verita+0x694>)
 8002e20:	20dc      	movs	r0, #220	; 0xdc
 8002e22:	f000 ffa9 	bl	8003d78 <ili9341_WriteStringNoBG>
		for(register int t = 0; t < 7; t++){
 8002e26:	3401      	adds	r4, #1
 8002e28:	2c06      	cmp	r4, #6
 8002e2a:	dde1      	ble.n	8002df0 <GrandState_Verita+0x5cc>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.2f", client_temp_mcuCC);
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <GrandState_Verita+0x6b4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb91 	bl	8000558 <__aeabi_f2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4928      	ldr	r1, [pc, #160]	; (8002edc <GrandState_Verita+0x6b8>)
 8002e3c:	481e      	ldr	r0, [pc, #120]	; (8002eb8 <GrandState_Verita+0x694>)
 8002e3e:	f008 fafd 	bl	800b43c <siprintf>
			if(client_temp_mcuCC < 65){
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <GrandState_Verita+0x6b4>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002ee0 <GrandState_Verita+0x6bc>
 8002e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	d50e      	bpl.n	8002e74 <GrandState_Verita+0x650>
				ili9341_WriteString(100, 180, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <GrandState_Verita+0x690>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	9202      	str	r2, [sp, #8]
 8002e5c:	f24c 6218 	movw	r2, #50712	; 0xc618
 8002e60:	9201      	str	r2, [sp, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <GrandState_Verita+0x694>)
 8002e6a:	21b4      	movs	r1, #180	; 0xb4
 8002e6c:	2064      	movs	r0, #100	; 0x64
 8002e6e:	f000 ff36 	bl	8003cde <ili9341_WriteString>
 8002e72:	e00d      	b.n	8002e90 <GrandState_Verita+0x66c>
			}else{
				ili9341_WriteString(100, 180, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <GrandState_Verita+0x690>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	9202      	str	r2, [sp, #8]
 8002e7a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002e7e:	9201      	str	r2, [sp, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	9200      	str	r2, [sp, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <GrandState_Verita+0x694>)
 8002e88:	21b4      	movs	r1, #180	; 0xb4
 8002e8a:	2064      	movs	r0, #100	; 0x64
 8002e8c:	f000 ff27 	bl	8003cde <ili9341_WriteString>
			}


		if(btn_k_cnt){ //// Back to lobby
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <GrandState_Verita+0x6c0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <GrandState_Verita+0x686>
			GrandState = pre_lobby;
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <GrandState_Verita+0x6c4>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
			btn_k_cnt = 0;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <GrandState_Verita+0x6c0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002ea4:	e001      	b.n	8002eaa <GrandState_Verita+0x686>
		break; // lobby
 8002ea6:	bf00      	nop
 8002ea8:	e000      	b.n	8002eac <GrandState_Verita+0x688>
		break;
 8002eaa:	bf00      	nop
	}
}
 8002eac:	bf00      	nop
 8002eae:	3704      	adds	r7, #4
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	20000024 	.word	0x20000024
 8002eb8:	200004b0 	.word	0x200004b0
 8002ebc:	200005ec 	.word	0x200005ec
 8002ec0:	0800db34 	.word	0x0800db34
 8002ec4:	20000604 	.word	0x20000604
 8002ec8:	0800db38 	.word	0x0800db38
 8002ecc:	2000061c 	.word	0x2000061c
 8002ed0:	0800db40 	.word	0x0800db40
 8002ed4:	2000001c 	.word	0x2000001c
 8002ed8:	200005e8 	.word	0x200005e8
 8002edc:	0800db44 	.word	0x0800db44
 8002ee0:	42820000 	.word	0x42820000
 8002ee4:	20000688 	.word	0x20000688
 8002ee8:	20000006 	.word	0x20000006
 8002eec:	00000000 	.word	0x00000000

08002ef0 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb19 	bl	8000534 <__aeabi_i2d>
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <ADCTVolta+0x58>)
 8002f08:	f7fd fca8 	bl	800085c <__aeabi_ddiv>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	a30a      	add	r3, pc, #40	; (adr r3, 8002f40 <ADCTVolta+0x50>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd fb75 	bl	8000608 <__aeabi_dmul>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f7fd fe67 	bl	8000bf8 <__aeabi_d2f>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	f3af 8000 	nop.w
 8002f40:	66666666 	.word	0x66666666
 8002f44:	400a6666 	.word	0x400a6666
 8002f48:	40b00000 	.word	0x40b00000
 8002f4c:	00000000 	.word	0x00000000

08002f50 <TempEquat>:
float TempEquat(float Vs){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fafc 	bl	8000558 <__aeabi_f2d>
 8002f60:	a314      	add	r3, pc, #80	; (adr r3, 8002fb4 <TempEquat+0x64>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd f997 	bl	8000298 <__aeabi_dsub>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	a312      	add	r3, pc, #72	; (adr r3, 8002fbc <TempEquat+0x6c>)
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f7fd fc70 	bl	800085c <__aeabi_ddiv>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <TempEquat+0x60>)
 8002f8a:	f7fd f987 	bl	800029c <__adddf3>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7fd fe2f 	bl	8000bf8 <__aeabi_d2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	ee07 3a90 	vmov	s15, r3
}
 8002fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	f3af 8000 	nop.w
 8002fb0:	40390000 	.word	0x40390000
 8002fb4:	851eb852 	.word	0x851eb852
 8002fb8:	3fe851eb 	.word	0x3fe851eb
 8002fbc:	47ae147b 	.word	0x47ae147b
 8002fc0:	3f647ae1 	.word	0x3f647ae1

08002fc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd4:	d113      	bne.n	8002ffe <HAL_GPIO_EXTI_Callback+0x3a>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_GPIO_EXTI_Callback+0x54>)
 8002fd8:	2208      	movs	r2, #8
 8002fda:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8002fdc:	f7ff fbac 	bl	8002738 <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);
 8002fe0:	2211      	movs	r2, #17
 8002fe2:	21a0      	movs	r1, #160	; 0xa0
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <HAL_GPIO_EXTI_Callback+0x58>)
 8002fe6:	f7fe fb43 	bl	8001670 <Tx_UART_Verita_Command>
		Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);
 8002fea:	2212      	movs	r2, #18
 8002fec:	21a0      	movs	r1, #160	; 0xa0
 8002fee:	480b      	ldr	r0, [pc, #44]	; (800301c <HAL_GPIO_EXTI_Callback+0x58>)
 8002ff0:	f7fe fb3e 	bl	8001670 <Tx_UART_Verita_Command>
		Tx_UART_Verita_Command(&huart6, VRC_Flag_1, 0x02);
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	21a2      	movs	r1, #162	; 0xa2
 8002ff8:	4808      	ldr	r0, [pc, #32]	; (800301c <HAL_GPIO_EXTI_Callback+0x58>)
 8002ffa:	f7fe fb39 	bl	8001670 <Tx_UART_Verita_Command>

		}

	if(GPIO_Pin == GPIO_PIN_7){
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d105      	bne.n	8003010 <HAL_GPIO_EXTI_Callback+0x4c>
		btn_k_cnt++;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <HAL_GPIO_EXTI_Callback+0x5c>)
 800300e:	701a      	strb	r2, [r3, #0]
	}
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000670 	.word	0x20000670
 800301c:	2000040c 	.word	0x2000040c
 8003020:	20000688 	.word	0x20000688

08003024 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d106      	bne.n	8003042 <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800303c:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 800303e:	f7ff fb7b 	bl	8002738 <buzzer_scream_cnt>
	}
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2000033c 	.word	0x2000033c
 8003050:	20000668 	.word	0x20000668

08003054 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	//counter++;
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003070:	e7fe      	b.n	8003070 <Error_Handler+0x8>
	...

08003074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_MspInit+0x4c>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4a0f      	ldr	r2, [pc, #60]	; (80030c0 <HAL_MspInit+0x4c>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003088:	6453      	str	r3, [r2, #68]	; 0x44
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_MspInit+0x4c>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_MspInit+0x4c>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_MspInit+0x4c>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_MspInit+0x4c>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030b2:	2007      	movs	r0, #7
 80030b4:	f001 fbca 	bl	800484c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_I2C_MspInit+0xa4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d13c      	bne.n	8003160 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_I2C_MspInit+0xa8>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_I2C_MspInit+0xa8>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_I2C_MspInit+0xa8>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003108:	2312      	movs	r3, #18
 800310a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003114:	2304      	movs	r3, #4
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4619      	mov	r1, r3
 800311e:	4814      	ldr	r0, [pc, #80]	; (8003170 <HAL_I2C_MspInit+0xac>)
 8003120:	f001 ffe6 	bl	80050f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_I2C_MspInit+0xa8>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HAL_I2C_MspInit+0xa8>)
 800312e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003132:	6413      	str	r3, [r2, #64]	; 0x40
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_I2C_MspInit+0xa8>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	201f      	movs	r0, #31
 8003146:	f001 fb8c 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800314a:	201f      	movs	r0, #31
 800314c:	f001 fba5 	bl	800489a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2100      	movs	r1, #0
 8003154:	2020      	movs	r0, #32
 8003156:	f001 fb84 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800315a:	2020      	movs	r0, #32
 800315c:	f001 fb9d 	bl	800489a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40005400 	.word	0x40005400
 800316c:	40023800 	.word	0x40023800
 8003170:	40020400 	.word	0x40020400

08003174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_SPI_MspInit+0x84>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12c      	bne.n	80031f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_SPI_MspInit+0x88>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a17      	ldr	r2, [pc, #92]	; (80031fc <HAL_SPI_MspInit+0x88>)
 80031a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_SPI_MspInit+0x88>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_SPI_MspInit+0x88>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_SPI_MspInit+0x88>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_SPI_MspInit+0x88>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80031d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	2302      	movs	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031dc:	2303      	movs	r3, #3
 80031de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031e0:	2306      	movs	r3, #6
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4619      	mov	r1, r3
 80031ea:	4805      	ldr	r0, [pc, #20]	; (8003200 <HAL_SPI_MspInit+0x8c>)
 80031ec:	f001 ff80 	bl	80050f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031f0:	bf00      	nop
 80031f2:	3728      	adds	r7, #40	; 0x28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40003c00 	.word	0x40003c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020800 	.word	0x40020800

08003204 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_TIM_Encoder_MspInit+0x84>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12b      	bne.n	800327e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_TIM_Encoder_MspInit+0x88>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_TIM_Encoder_MspInit+0x88>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_TIM_Encoder_MspInit+0x88>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_TIM_Encoder_MspInit+0x88>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_TIM_Encoder_MspInit+0x88>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_TIM_Encoder_MspInit+0x88>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800325e:	23c0      	movs	r3, #192	; 0xc0
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800326e:	2302      	movs	r3, #2
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	4805      	ldr	r0, [pc, #20]	; (8003290 <HAL_TIM_Encoder_MspInit+0x8c>)
 800327a:	f001 ff39 	bl	80050f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800327e:	bf00      	nop
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40000400 	.word	0x40000400
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000

08003294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_TIM_Base_MspInit+0x48>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d115      	bne.n	80032d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_TIM_Base_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_TIM_Base_MspInit+0x4c>)
 80032b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b4:	6453      	str	r3, [r2, #68]	; 0x44
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_TIM_Base_MspInit+0x4c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	2019      	movs	r0, #25
 80032c8:	f001 facb 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032cc:	2019      	movs	r0, #25
 80032ce:	f001 fae4 	bl	800489a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6b      	ldr	r2, [pc, #428]	; (80034b0 <HAL_UART_MspInit+0x1cc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d135      	bne.n	8003372 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003310:	f043 0310 	orr.w	r3, r3, #16
 8003314:	6453      	str	r3, [r2, #68]	; 0x44
 8003316:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800333e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003350:	2307      	movs	r3, #7
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	4857      	ldr	r0, [pc, #348]	; (80034b8 <HAL_UART_MspInit+0x1d4>)
 800335c:	f001 fec8 	bl	80050f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	2025      	movs	r0, #37	; 0x25
 8003366:	f001 fa7c 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800336a:	2025      	movs	r0, #37	; 0x25
 800336c:	f001 fa95 	bl	800489a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003370:	e09a      	b.n	80034a8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_UART_MspInit+0x1d8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d12c      	bne.n	80033d6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	4a4b      	ldr	r2, [pc, #300]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338a:	6413      	str	r3, [r2, #64]	; 0x40
 800338c:	4b49      	ldr	r3, [pc, #292]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4a44      	ldr	r2, [pc, #272]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6313      	str	r3, [r2, #48]	; 0x30
 80033a8:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033b4:	230c      	movs	r3, #12
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c4:	2307      	movs	r3, #7
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033cc:	4619      	mov	r1, r3
 80033ce:	483a      	ldr	r0, [pc, #232]	; (80034b8 <HAL_UART_MspInit+0x1d4>)
 80033d0:	f001 fe8e 	bl	80050f0 <HAL_GPIO_Init>
}
 80033d4:	e068      	b.n	80034a8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART6)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a39      	ldr	r2, [pc, #228]	; (80034c0 <HAL_UART_MspInit+0x1dc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d163      	bne.n	80034a8 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 80033ea:	f043 0320 	orr.w	r3, r3, #32
 80033ee:	6453      	str	r3, [r2, #68]	; 0x44
 80033f0:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_UART_MspInit+0x1d0>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003418:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800342a:	2308      	movs	r3, #8
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	4820      	ldr	r0, [pc, #128]	; (80034b8 <HAL_UART_MspInit+0x1d4>)
 8003436:	f001 fe5b 	bl	80050f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 800343c:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <HAL_UART_MspInit+0x1e4>)
 800343e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003442:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003446:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003448:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800345a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 800346a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003472:	2200      	movs	r2, #0
 8003474:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003478:	2200      	movs	r2, #0
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800347c:	4811      	ldr	r0, [pc, #68]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 800347e:	f001 fa27 	bl	80048d0 <HAL_DMA_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003488:	f7ff fdee 	bl	8003068 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_UART_MspInit+0x1e0>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	2047      	movs	r0, #71	; 0x47
 800349e:	f001 f9e0 	bl	8004862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80034a2:	2047      	movs	r0, #71	; 0x47
 80034a4:	f001 f9f9 	bl	800489a <HAL_NVIC_EnableIRQ>
}
 80034a8:	bf00      	nop
 80034aa:	3738      	adds	r7, #56	; 0x38
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40011000 	.word	0x40011000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40011400 	.word	0x40011400
 80034c4:	20000450 	.word	0x20000450
 80034c8:	40026428 	.word	0x40026428

080034cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <NMI_Handler+0x4>

080034d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d6:	e7fe      	b.n	80034d6 <HardFault_Handler+0x4>

080034d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034dc:	e7fe      	b.n	80034dc <MemManage_Handler+0x4>

080034de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e2:	e7fe      	b.n	80034e2 <BusFault_Handler+0x4>

080034e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <UsageFault_Handler+0x4>

080034ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003518:	f001 f884 	bl	8004624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}

08003520 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003524:	2080      	movs	r0, #128	; 0x80
 8003526:	f001 ff9b 	bl	8005460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003536:	f005 fde8 	bl	800910a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000033c 	.word	0x2000033c

08003544 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <I2C1_EV_IRQHandler+0x10>)
 800354a:	f002 fc05 	bl	8005d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000248 	.word	0x20000248

08003558 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <I2C1_ER_IRQHandler+0x10>)
 800355e:	f002 fd6c 	bl	800603a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000248 	.word	0x20000248

0800356c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <USART1_IRQHandler+0x10>)
 8003572:	f006 f9d5 	bl	8009920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000384 	.word	0x20000384

08003580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003588:	f001 ff6a 	bl	8005460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}

08003590 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA2_Stream1_IRQHandler+0x10>)
 8003596:	f001 fb33 	bl	8004c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000450 	.word	0x20000450

080035a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <USART6_IRQHandler+0x10>)
 80035aa:	f006 f9b9 	bl	8009920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000040c 	.word	0x2000040c

080035b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
	return 1;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_kill>:

int _kill(int pid, int sig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035d2:	f007 fa97 	bl	800ab04 <__errno>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2216      	movs	r2, #22
 80035da:	601a      	str	r2, [r3, #0]
	return -1;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_exit>:

void _exit (int status)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffe7 	bl	80035c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035fa:	e7fe      	b.n	80035fa <_exit+0x12>

080035fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e00a      	b.n	8003624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800360e:	f3af 8000 	nop.w
 8003612:	4601      	mov	r1, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	60ba      	str	r2, [r7, #8]
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	dbf0      	blt.n	800360e <_read+0x12>
	}

return len;
 800362c:	687b      	ldr	r3, [r7, #4]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e009      	b.n	800365c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	60ba      	str	r2, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	dbf1      	blt.n	8003648 <_write+0x12>
	}
	return len;
 8003664:	687b      	ldr	r3, [r7, #4]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_close>:

int _close(int file)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
	return -1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003696:	605a      	str	r2, [r3, #4]
	return 0;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <_isatty>:

int _isatty(int file)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	return 1;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
	return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <_sbrk+0x5c>)
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <_sbrk+0x60>)
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <_sbrk+0x64>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <_sbrk+0x64>)
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <_sbrk+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <_sbrk+0x64>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d207      	bcs.n	8003718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003708:	f007 f9fc 	bl	800ab04 <__errno>
 800370c:	4603      	mov	r3, r0
 800370e:	220c      	movs	r2, #12
 8003710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	e009      	b.n	800372c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <_sbrk+0x64>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <_sbrk+0x64>)
 8003728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800372a:	68fb      	ldr	r3, [r7, #12]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20020000 	.word	0x20020000
 8003738:	00000400 	.word	0x00000400
 800373c:	2000069c 	.word	0x2000069c
 8003740:	200006b8 	.word	0x200006b8

08003744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <SystemInit+0x20>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <SystemInit+0x20>)
 8003750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 800376c:	2001      	movs	r0, #1
 800376e:	f000 fdc6 	bl	80042fe <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8003772:	2011      	movs	r0, #17
 8003774:	f000 fe4a 	bl	800440c <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}

0800377c <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8003780:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8003792:	23f0      	movs	r3, #240	; 0xf0
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80037a6:	4b52      	ldr	r3, [pc, #328]	; (80038f0 <ili9341_Init+0x150>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d115      	bne.n	80037de <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80037b2:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <ili9341_Init+0x150>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <ili9341_Init+0x150>)
 80037be:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <ili9341_Init+0x150>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <ili9341_Init+0x30>
      LCD_IO_Init();
 80037cc:	f000 fda2 	bl	8004314 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80037d0:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <ili9341_Init+0x150>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <ili9341_Init+0x150>)
 80037dc:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80037de:	200a      	movs	r0, #10
 80037e0:	f000 fd82 	bl	80042e8 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80037e4:	2001      	movs	r0, #1
 80037e6:	f000 fe11 	bl	800440c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80037ea:	200a      	movs	r0, #10
 80037ec:	f000 fd7c 	bl	80042e8 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80037f0:	2203      	movs	r2, #3
 80037f2:	4940      	ldr	r1, [pc, #256]	; (80038f4 <ili9341_Init+0x154>)
 80037f4:	20ef      	movs	r0, #239	; 0xef
 80037f6:	f000 fe77 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80037fa:	2203      	movs	r2, #3
 80037fc:	493e      	ldr	r1, [pc, #248]	; (80038f8 <ili9341_Init+0x158>)
 80037fe:	20cf      	movs	r0, #207	; 0xcf
 8003800:	f000 fe72 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8003804:	2204      	movs	r2, #4
 8003806:	493d      	ldr	r1, [pc, #244]	; (80038fc <ili9341_Init+0x15c>)
 8003808:	20ed      	movs	r0, #237	; 0xed
 800380a:	f000 fe6d 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800380e:	2203      	movs	r2, #3
 8003810:	493b      	ldr	r1, [pc, #236]	; (8003900 <ili9341_Init+0x160>)
 8003812:	20e8      	movs	r0, #232	; 0xe8
 8003814:	f000 fe68 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8003818:	2205      	movs	r2, #5
 800381a:	493a      	ldr	r1, [pc, #232]	; (8003904 <ili9341_Init+0x164>)
 800381c:	20cb      	movs	r0, #203	; 0xcb
 800381e:	f000 fe63 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8003822:	2201      	movs	r2, #1
 8003824:	4938      	ldr	r1, [pc, #224]	; (8003908 <ili9341_Init+0x168>)
 8003826:	20f7      	movs	r0, #247	; 0xf7
 8003828:	f000 fe5e 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 800382c:	2202      	movs	r2, #2
 800382e:	4937      	ldr	r1, [pc, #220]	; (800390c <ili9341_Init+0x16c>)
 8003830:	20ea      	movs	r0, #234	; 0xea
 8003832:	f000 fe59 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8003836:	2201      	movs	r2, #1
 8003838:	4935      	ldr	r1, [pc, #212]	; (8003910 <ili9341_Init+0x170>)
 800383a:	20c0      	movs	r0, #192	; 0xc0
 800383c:	f000 fe54 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8003840:	2201      	movs	r2, #1
 8003842:	4934      	ldr	r1, [pc, #208]	; (8003914 <ili9341_Init+0x174>)
 8003844:	20c1      	movs	r0, #193	; 0xc1
 8003846:	f000 fe4f 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800384a:	2202      	movs	r2, #2
 800384c:	4932      	ldr	r1, [pc, #200]	; (8003918 <ili9341_Init+0x178>)
 800384e:	20c5      	movs	r0, #197	; 0xc5
 8003850:	f000 fe4a 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8003854:	2201      	movs	r2, #1
 8003856:	4931      	ldr	r1, [pc, #196]	; (800391c <ili9341_Init+0x17c>)
 8003858:	20c7      	movs	r0, #199	; 0xc7
 800385a:	f000 fe45 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 800385e:	2201      	movs	r2, #1
 8003860:	492f      	ldr	r1, [pc, #188]	; (8003920 <ili9341_Init+0x180>)
 8003862:	2037      	movs	r0, #55	; 0x37
 8003864:	f000 fe40 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8003868:	2201      	movs	r2, #1
 800386a:	492e      	ldr	r1, [pc, #184]	; (8003924 <ili9341_Init+0x184>)
 800386c:	203a      	movs	r0, #58	; 0x3a
 800386e:	f000 fe3b 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8003872:	2202      	movs	r2, #2
 8003874:	492c      	ldr	r1, [pc, #176]	; (8003928 <ili9341_Init+0x188>)
 8003876:	20b1      	movs	r0, #177	; 0xb1
 8003878:	f000 fe36 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 800387c:	2203      	movs	r2, #3
 800387e:	492b      	ldr	r1, [pc, #172]	; (800392c <ili9341_Init+0x18c>)
 8003880:	20b6      	movs	r0, #182	; 0xb6
 8003882:	f000 fe31 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8003886:	2201      	movs	r2, #1
 8003888:	4925      	ldr	r1, [pc, #148]	; (8003920 <ili9341_Init+0x180>)
 800388a:	20f2      	movs	r0, #242	; 0xf2
 800388c:	f000 fe2c 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8003890:	2201      	movs	r2, #1
 8003892:	4927      	ldr	r1, [pc, #156]	; (8003930 <ili9341_Init+0x190>)
 8003894:	2026      	movs	r0, #38	; 0x26
 8003896:	f000 fe27 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800389a:	220f      	movs	r2, #15
 800389c:	4925      	ldr	r1, [pc, #148]	; (8003934 <ili9341_Init+0x194>)
 800389e:	20e0      	movs	r0, #224	; 0xe0
 80038a0:	f000 fe22 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80038a4:	220f      	movs	r2, #15
 80038a6:	4924      	ldr	r1, [pc, #144]	; (8003938 <ili9341_Init+0x198>)
 80038a8:	20e1      	movs	r0, #225	; 0xe1
 80038aa:	f000 fe1d 	bl	80044e8 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80038ae:	2036      	movs	r0, #54	; 0x36
 80038b0:	f000 fdac 	bl	800440c <LCD_IO_WriteCmd8>
 80038b4:	20e8      	movs	r0, #232	; 0xe8
 80038b6:	f000 fdc7 	bl	8004448 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80038ba:	2011      	movs	r0, #17
 80038bc:	f000 fda6 	bl	800440c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80038c0:	200a      	movs	r0, #10
 80038c2:	f000 fd11 	bl	80042e8 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	23f0      	movs	r3, #240	; 0xf0
 80038cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038d0:	2100      	movs	r1, #0
 80038d2:	2000      	movs	r0, #0
 80038d4:	f000 f87c 	bl	80039d0 <ili9341_FillRect>
  LCD_Delay(10);
 80038d8:	200a      	movs	r0, #10
 80038da:	f000 fd05 	bl	80042e8 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80038de:	2029      	movs	r0, #41	; 0x29
 80038e0:	f000 fd94 	bl	800440c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80038e4:	200a      	movs	r0, #10
 80038e6:	f000 fcff 	bl	80042e8 <LCD_Delay>
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200006a0 	.word	0x200006a0
 80038f4:	0800db4c 	.word	0x0800db4c
 80038f8:	0800db50 	.word	0x0800db50
 80038fc:	0800db54 	.word	0x0800db54
 8003900:	0800db5c 	.word	0x0800db5c
 8003904:	0800db60 	.word	0x0800db60
 8003908:	0800db68 	.word	0x0800db68
 800390c:	0800db6c 	.word	0x0800db6c
 8003910:	0800db70 	.word	0x0800db70
 8003914:	0800db74 	.word	0x0800db74
 8003918:	0800db78 	.word	0x0800db78
 800391c:	0800db7c 	.word	0x0800db7c
 8003920:	0800db80 	.word	0x0800db80
 8003924:	0800db84 	.word	0x0800db84
 8003928:	0800db88 	.word	0x0800db88
 800392c:	0800db8c 	.word	0x0800db8c
 8003930:	0800db90 	.word	0x0800db90
 8003934:	0800db94 	.word	0x0800db94
 8003938:	0800dba4 	.word	0x0800dba4

0800393c <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	80fb      	strh	r3, [r7, #6]
 8003946:	460b      	mov	r3, r1
 8003948:	80bb      	strh	r3, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 800394e:	202a      	movs	r0, #42	; 0x2a
 8003950:	f000 fd5c 	bl	800440c <LCD_IO_WriteCmd8>
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	b29b      	uxth	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fd73 	bl	8004448 <LCD_IO_WriteData8>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fd6e 	bl	8004448 <LCD_IO_WriteData8>
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b29b      	uxth	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd67 	bl	8004448 <LCD_IO_WriteData8>
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fd62 	bl	8004448 <LCD_IO_WriteData8>
 8003984:	202b      	movs	r0, #43	; 0x2b
 8003986:	f000 fd41 	bl	800440c <LCD_IO_WriteCmd8>
 800398a:	88bb      	ldrh	r3, [r7, #4]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	b29b      	uxth	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fd58 	bl	8004448 <LCD_IO_WriteData8>
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fd53 	bl	8004448 <LCD_IO_WriteData8>
 80039a2:	88bb      	ldrh	r3, [r7, #4]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fd4c 	bl	8004448 <LCD_IO_WriteData8>
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fd47 	bl	8004448 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80039ba:	202c      	movs	r0, #44	; 0x2c
 80039bc:	f000 fd26 	bl	800440c <LCD_IO_WriteCmd8>
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fd56 	bl	8004474 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4623      	mov	r3, r4
 80039e0:	80fb      	strh	r3, [r7, #6]
 80039e2:	4603      	mov	r3, r0
 80039e4:	80bb      	strh	r3, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	807b      	strh	r3, [r7, #2]
 80039ea:	4613      	mov	r3, r2
 80039ec:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80039ee:	202a      	movs	r0, #42	; 0x2a
 80039f0:	f000 fd0c 	bl	800440c <LCD_IO_WriteCmd8>
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fd23 	bl	8004448 <LCD_IO_WriteData8>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fd1e 	bl	8004448 <LCD_IO_WriteData8>
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	4413      	add	r3, r2
 8003a12:	3b01      	subs	r3, #1
 8003a14:	121b      	asrs	r3, r3, #8
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fd15 	bl	8004448 <LCD_IO_WriteData8>
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd0a 	bl	8004448 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8003a34:	202b      	movs	r0, #43	; 0x2b
 8003a36:	f000 fce9 	bl	800440c <LCD_IO_WriteCmd8>
 8003a3a:	88bb      	ldrh	r3, [r7, #4]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fd00 	bl	8004448 <LCD_IO_WriteData8>
 8003a48:	88bb      	ldrh	r3, [r7, #4]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fcfb 	bl	8004448 <LCD_IO_WriteData8>
 8003a52:	88ba      	ldrh	r2, [r7, #4]
 8003a54:	883b      	ldrh	r3, [r7, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	121b      	asrs	r3, r3, #8
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fcf2 	bl	8004448 <LCD_IO_WriteData8>
 8003a64:	88bb      	ldrh	r3, [r7, #4]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	883b      	ldrh	r3, [r7, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fce7 	bl	8004448 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	883a      	ldrh	r2, [r7, #0]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	8b3b      	ldrh	r3, [r7, #24]
 8003a86:	4619      	mov	r1, r3
 8003a88:	202c      	movs	r0, #44	; 0x2c
 8003a8a:	f000 fd09 	bl	80044a0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}

08003a96 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003a96:	b082      	sub	sp, #8
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	603a      	str	r2, [r7, #0]
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003ab2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003ac0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac8:	f009 ff64 	bl	800d994 <ceilf>
 8003acc:	eef0 7a40 	vmov.f32	s15, s0
 8003ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad4:	ee17 3a90 	vmov	r3, s15
 8003ad8:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8003ae8:	2300      	movs	r3, #0
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	e060      	b.n	8003bb0 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e024      	b.n	8003b42 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8003af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	3a20      	subs	r2, #32
 8003b00:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003b02:	fb01 f202 	mul.w	r2, r1, r2
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	fb02 f101 	mul.w	r1, r2, r1
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	fb00 f202 	mul.w	r2, r0, r2
 8003b14:	4411      	add	r1, r2
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	440a      	add	r2, r1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	7819      	ldrb	r1, [r3, #0]
 8003b1e:	f107 020c 	add.w	r2, r7, #12
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	460a      	mov	r2, r1
 8003b28:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	f107 010c 	add.w	r1, r7, #12
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	440a      	add	r2, r1
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	dbd6      	blt.n	8003af8 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e027      	b.n	8003ba0 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	409a      	lsls	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	4413      	add	r3, r2
 8003b66:	b298      	uxth	r0, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7ff fee1 	bl	800393c <ili9341_WritePixel>
 8003b7a:	e00e      	b.n	8003b9a <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	4413      	add	r3, r2
 8003b84:	b298      	uxth	r0, r3
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	88bb      	ldrh	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7ff fed1 	bl	800393c <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	dbd2      	blt.n	8003b50 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	3301      	adds	r3, #1
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	db99      	blt.n	8003aee <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	3728      	adds	r7, #40	; 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc6:	b002      	add	sp, #8
 8003bc8:	4770      	bx	lr

08003bca <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 8003bca:	b082      	sub	sp, #8
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	603a      	str	r2, [r7, #0]
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003be6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003bf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bf8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bfc:	f009 feca 	bl	800d994 <ceilf>
 8003c00:	eef0 7a40 	vmov.f32	s15, s0
 8003c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c08:	ee17 3a90 	vmov	r3, s15
 8003c0c:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	e050      	b.n	8003cc4 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e024      	b.n	8003c76 <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	3a20      	subs	r2, #32
 8003c34:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003c36:	fb01 f202 	mul.w	r2, r1, r2
 8003c3a:	6979      	ldr	r1, [r7, #20]
 8003c3c:	fb02 f101 	mul.w	r1, r2, r1
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	fb00 f202 	mul.w	r2, r0, r2
 8003c48:	4411      	add	r1, r2
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	4413      	add	r3, r2
 8003c50:	7819      	ldrb	r1, [r3, #0]
 8003c52:	f107 020c 	add.w	r2, r7, #12
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	f107 010c 	add.w	r1, r7, #12
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	440a      	add	r2, r1
 8003c6a:	7812      	ldrb	r2, [r2, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	dbd6      	blt.n	8003c2c <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e017      	b.n	8003cb4 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	4413      	add	r3, r2
 8003c9a:	b298      	uxth	r0, r3
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	88bb      	ldrh	r3, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7ff fe47 	bl	800393c <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	dbe2      	blt.n	8003c84 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	dba9      	blt.n	8003c22 <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cda:	b002      	add	sp, #8
 8003cdc:	4770      	bx	lr

08003cde <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003cde:	b082      	sub	sp, #8
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af04      	add	r7, sp, #16
 8003ce6:	603a      	str	r2, [r7, #0]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	4603      	mov	r3, r0
 8003cec:	80fb      	strh	r3, [r7, #6]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8003cf2:	f7ff fd4c 	bl	800378e <ili9341_GetLcdPixelHeight>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8003cfa:	f7ff fd3f 	bl	800377c <ili9341_GetLcdPixelWidth>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8003d02:	e02c      	b.n	8003d5e <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	8c3a      	ldrh	r2, [r7, #32]
 8003d08:	441a      	add	r2, r3
 8003d0a:	89bb      	ldrh	r3, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	db13      	blt.n	8003d38 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8003d14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003d16:	88bb      	ldrh	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8003d1c:	88bb      	ldrh	r3, [r7, #4]
 8003d1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003d20:	441a      	add	r2, r3
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	da1f      	bge.n	8003d68 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d103      	bne.n	8003d38 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	603b      	str	r3, [r7, #0]
				continue;
 8003d36:	e012      	b.n	8003d5e <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8003d38:	88b9      	ldrh	r1, [r7, #4]
 8003d3a:	88f8      	ldrh	r0, [r7, #6]
 8003d3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d3e:	9302      	str	r3, [sp, #8]
 8003d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	f7ff fea3 	bl	8003a96 <ili9341_WriteChar>
		Xpo += fonto.Width;
 8003d50:	8c3a      	ldrh	r2, [r7, #32]
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	4413      	add	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
		strr++;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	603b      	str	r3, [r7, #0]
	while(*strr){
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ce      	bne.n	8003d04 <ili9341_WriteString+0x26>
	}
}
 8003d66:	e000      	b.n	8003d6a <ili9341_WriteString+0x8c>
				break;
 8003d68:	bf00      	nop
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d74:	b002      	add	sp, #8
 8003d76:	4770      	bx	lr

08003d78 <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8003d78:	b082      	sub	sp, #8
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af02      	add	r7, sp, #8
 8003d80:	603a      	str	r2, [r7, #0]
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	4603      	mov	r3, r0
 8003d86:	80fb      	strh	r3, [r7, #6]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8003d8c:	f7ff fcff 	bl	800378e <ili9341_GetLcdPixelHeight>
 8003d90:	4603      	mov	r3, r0
 8003d92:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8003d94:	f7ff fcf2 	bl	800377c <ili9341_GetLcdPixelWidth>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8003d9c:	e02a      	b.n	8003df4 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	8c3a      	ldrh	r2, [r7, #32]
 8003da2:	441a      	add	r2, r3
 8003da4:	89bb      	ldrh	r3, [r7, #12]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	db13      	blt.n	8003dd2 <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8003dae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003db0:	88bb      	ldrh	r3, [r7, #4]
 8003db2:	4413      	add	r3, r2
 8003db4:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8003db6:	88bb      	ldrh	r3, [r7, #4]
 8003db8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003dba:	441a      	add	r2, r3
 8003dbc:	89fb      	ldrh	r3, [r7, #14]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	da1d      	bge.n	8003dfe <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d103      	bne.n	8003dd2 <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	603b      	str	r3, [r7, #0]
				continue;
 8003dd0:	e010      	b.n	8003df4 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8003dd2:	88b9      	ldrh	r1, [r7, #4]
 8003dd4:	88f8      	ldrh	r0, [r7, #6]
 8003dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	f7ff fef2 	bl	8003bca <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8003de6:	8c3a      	ldrh	r2, [r7, #32]
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	4413      	add	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
		strr++;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	603b      	str	r3, [r7, #0]
	while(*strr){
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1d0      	bne.n	8003d9e <ili9341_WriteStringNoBG+0x26>
	}
}
 8003dfc:	e000      	b.n	8003e00 <ili9341_WriteStringNoBG+0x88>
				break;
 8003dfe:	bf00      	nop
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0a:	b002      	add	sp, #8
 8003e0c:	4770      	bx	lr
	...

08003e10 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	015b      	lsls	r3, r3, #5
 8003e24:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e28:	f023 031f 	bic.w	r3, r3, #31
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e32:	331c      	adds	r3, #28
 8003e34:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <LcdWrite8+0x174>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e3a:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <LcdWrite8+0x178>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <LcdWrite8+0x178>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003e4c:	1dfb      	adds	r3, r7, #7
 8003e4e:	015b      	lsls	r3, r3, #5
 8003e50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e54:	f023 031f 	bic.w	r3, r3, #31
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	3318      	adds	r3, #24
 8003e60:	4a48      	ldr	r2, [pc, #288]	; (8003f84 <LcdWrite8+0x174>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e66:	4b48      	ldr	r3, [pc, #288]	; (8003f88 <LcdWrite8+0x178>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <LcdWrite8+0x178>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	015b      	lsls	r3, r3, #5
 8003e7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e80:	f023 031f 	bic.w	r3, r3, #31
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <LcdWrite8+0x174>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e92:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <LcdWrite8+0x178>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <LcdWrite8+0x178>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003eac:	f023 031f 	bic.w	r3, r3, #31
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	3310      	adds	r3, #16
 8003eb8:	4a32      	ldr	r2, [pc, #200]	; (8003f84 <LcdWrite8+0x174>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <LcdWrite8+0x178>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <LcdWrite8+0x178>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8003eca:	1dfb      	adds	r3, r7, #7
 8003ecc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	015b      	lsls	r3, r3, #5
 8003ed4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003ed8:	f023 031f 	bic.w	r3, r3, #31
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <LcdWrite8+0x174>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003eea:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <LcdWrite8+0x178>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <LcdWrite8+0x178>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003efc:	1dfb      	adds	r3, r7, #7
 8003efe:	015b      	lsls	r3, r3, #5
 8003f00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003f04:	f023 031f 	bic.w	r3, r3, #31
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	3308      	adds	r3, #8
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <LcdWrite8+0x174>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <LcdWrite8+0x178>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <LcdWrite8+0x178>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003f28:	1dfb      	adds	r3, r7, #7
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003f30:	f023 031f 	bic.w	r3, r3, #31
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <LcdWrite8+0x174>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <LcdWrite8+0x178>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <LcdWrite8+0x178>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	015b      	lsls	r3, r3, #5
 8003f58:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003f5c:	f023 031f 	bic.w	r3, r3, #31
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <LcdWrite8+0x174>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <LcdWrite8+0x178>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <LcdWrite8+0x178>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	4241028c 	.word	0x4241028c
 8003f88:	42408280 	.word	0x42408280

08003f8c <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8003f96:	1dbb      	adds	r3, r7, #6
 8003f98:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003f9c:	1dbb      	adds	r3, r7, #6
 8003f9e:	015b      	lsls	r3, r3, #5
 8003fa0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003fa4:	f023 031f 	bic.w	r3, r3, #31
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003fae:	333c      	adds	r3, #60	; 0x3c
 8003fb0:	4aab      	ldr	r2, [pc, #684]	; (8004260 <LcdWrite16+0x2d4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003fb6:	4bab      	ldr	r3, [pc, #684]	; (8004264 <LcdWrite16+0x2d8>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	4ba9      	ldr	r3, [pc, #676]	; (8004264 <LcdWrite16+0x2d8>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8003fc2:	1dbb      	adds	r3, r7, #6
 8003fc4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003fc8:	1dbb      	adds	r3, r7, #6
 8003fca:	015b      	lsls	r3, r3, #5
 8003fcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003fd0:	f023 031f 	bic.w	r3, r3, #31
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003fda:	3338      	adds	r3, #56	; 0x38
 8003fdc:	4aa0      	ldr	r2, [pc, #640]	; (8004260 <LcdWrite16+0x2d4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003fe2:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <LcdWrite16+0x2d8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	4b9e      	ldr	r3, [pc, #632]	; (8004264 <LcdWrite16+0x2d8>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8003fee:	1dbb      	adds	r3, r7, #6
 8003ff0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ff4:	1dbb      	adds	r3, r7, #6
 8003ff6:	015b      	lsls	r3, r3, #5
 8003ff8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003ffc:	f023 031f 	bic.w	r3, r3, #31
 8004000:	4313      	orrs	r3, r2
 8004002:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004006:	3334      	adds	r3, #52	; 0x34
 8004008:	4a95      	ldr	r2, [pc, #596]	; (8004260 <LcdWrite16+0x2d4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800400e:	4b95      	ldr	r3, [pc, #596]	; (8004264 <LcdWrite16+0x2d8>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	4b93      	ldr	r3, [pc, #588]	; (8004264 <LcdWrite16+0x2d8>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 800401a:	1dbb      	adds	r3, r7, #6
 800401c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004020:	1dbb      	adds	r3, r7, #6
 8004022:	015b      	lsls	r3, r3, #5
 8004024:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004028:	f023 031f 	bic.w	r3, r3, #31
 800402c:	4313      	orrs	r3, r2
 800402e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004032:	3330      	adds	r3, #48	; 0x30
 8004034:	4a8a      	ldr	r2, [pc, #552]	; (8004260 <LcdWrite16+0x2d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800403a:	4b8a      	ldr	r3, [pc, #552]	; (8004264 <LcdWrite16+0x2d8>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	4b88      	ldr	r3, [pc, #544]	; (8004264 <LcdWrite16+0x2d8>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800404c:	1dbb      	adds	r3, r7, #6
 800404e:	015b      	lsls	r3, r3, #5
 8004050:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004054:	f023 031f 	bic.w	r3, r3, #31
 8004058:	4313      	orrs	r3, r2
 800405a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800405e:	332c      	adds	r3, #44	; 0x2c
 8004060:	4a7f      	ldr	r2, [pc, #508]	; (8004260 <LcdWrite16+0x2d4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004066:	4b7f      	ldr	r3, [pc, #508]	; (8004264 <LcdWrite16+0x2d8>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <LcdWrite16+0x2d8>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8004072:	1dbb      	adds	r3, r7, #6
 8004074:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004078:	1dbb      	adds	r3, r7, #6
 800407a:	015b      	lsls	r3, r3, #5
 800407c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004080:	f023 031f 	bic.w	r3, r3, #31
 8004084:	4313      	orrs	r3, r2
 8004086:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800408a:	3328      	adds	r3, #40	; 0x28
 800408c:	4a74      	ldr	r2, [pc, #464]	; (8004260 <LcdWrite16+0x2d4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004092:	4b74      	ldr	r3, [pc, #464]	; (8004264 <LcdWrite16+0x2d8>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	4b72      	ldr	r3, [pc, #456]	; (8004264 <LcdWrite16+0x2d8>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	015b      	lsls	r3, r3, #5
 80040a8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80040ac:	f023 031f 	bic.w	r3, r3, #31
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80040b6:	3324      	adds	r3, #36	; 0x24
 80040b8:	4a69      	ldr	r2, [pc, #420]	; (8004260 <LcdWrite16+0x2d4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80040be:	4b69      	ldr	r3, [pc, #420]	; (8004264 <LcdWrite16+0x2d8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	4b67      	ldr	r3, [pc, #412]	; (8004264 <LcdWrite16+0x2d8>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 80040ca:	1dbb      	adds	r3, r7, #6
 80040cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80040d0:	1dbb      	adds	r3, r7, #6
 80040d2:	015b      	lsls	r3, r3, #5
 80040d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80040d8:	f023 031f 	bic.w	r3, r3, #31
 80040dc:	4313      	orrs	r3, r2
 80040de:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80040e2:	3320      	adds	r3, #32
 80040e4:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <LcdWrite16+0x2d4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80040ea:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <LcdWrite16+0x2d8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <LcdWrite16+0x2d8>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 80040f6:	1dbb      	adds	r3, r7, #6
 80040f8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80040fc:	1dbb      	adds	r3, r7, #6
 80040fe:	015b      	lsls	r3, r3, #5
 8004100:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004104:	f023 031f 	bic.w	r3, r3, #31
 8004108:	4313      	orrs	r3, r2
 800410a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800410e:	331c      	adds	r3, #28
 8004110:	4a53      	ldr	r2, [pc, #332]	; (8004260 <LcdWrite16+0x2d4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <LcdWrite16+0x2d8>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	4b51      	ldr	r3, [pc, #324]	; (8004264 <LcdWrite16+0x2d8>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8004122:	1dbb      	adds	r3, r7, #6
 8004124:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004128:	1dbb      	adds	r3, r7, #6
 800412a:	015b      	lsls	r3, r3, #5
 800412c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004130:	f023 031f 	bic.w	r3, r3, #31
 8004134:	4313      	orrs	r3, r2
 8004136:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800413a:	3318      	adds	r3, #24
 800413c:	4a48      	ldr	r2, [pc, #288]	; (8004260 <LcdWrite16+0x2d4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <LcdWrite16+0x2d8>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	4b46      	ldr	r3, [pc, #280]	; (8004264 <LcdWrite16+0x2d8>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 800414e:	1dbb      	adds	r3, r7, #6
 8004150:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004154:	1dbb      	adds	r3, r7, #6
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800415c:	f023 031f 	bic.w	r3, r3, #31
 8004160:	4313      	orrs	r3, r2
 8004162:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004166:	3314      	adds	r3, #20
 8004168:	4a3d      	ldr	r2, [pc, #244]	; (8004260 <LcdWrite16+0x2d4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <LcdWrite16+0x2d8>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <LcdWrite16+0x2d8>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 800417a:	1dbb      	adds	r3, r7, #6
 800417c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004180:	1dbb      	adds	r3, r7, #6
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004188:	f023 031f 	bic.w	r3, r3, #31
 800418c:	4313      	orrs	r3, r2
 800418e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004192:	3310      	adds	r3, #16
 8004194:	4a32      	ldr	r2, [pc, #200]	; (8004260 <LcdWrite16+0x2d4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800419a:	4b32      	ldr	r3, [pc, #200]	; (8004264 <LcdWrite16+0x2d8>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <LcdWrite16+0x2d8>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 80041a6:	1dbb      	adds	r3, r7, #6
 80041a8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80041ac:	1dbb      	adds	r3, r7, #6
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80041b4:	f023 031f 	bic.w	r3, r3, #31
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80041be:	330c      	adds	r3, #12
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <LcdWrite16+0x2d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80041c6:	4b27      	ldr	r3, [pc, #156]	; (8004264 <LcdWrite16+0x2d8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <LcdWrite16+0x2d8>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 80041d2:	1dbb      	adds	r3, r7, #6
 80041d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	015b      	lsls	r3, r3, #5
 80041dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80041e0:	f023 031f 	bic.w	r3, r3, #31
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80041ea:	3308      	adds	r3, #8
 80041ec:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <LcdWrite16+0x2d4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80041f2:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <LcdWrite16+0x2d8>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <LcdWrite16+0x2d8>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 80041fe:	1dbb      	adds	r3, r7, #6
 8004200:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004204:	1dbb      	adds	r3, r7, #6
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800420c:	f023 031f 	bic.w	r3, r3, #31
 8004210:	4313      	orrs	r3, r2
 8004212:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004216:	3304      	adds	r3, #4
 8004218:	4a11      	ldr	r2, [pc, #68]	; (8004260 <LcdWrite16+0x2d4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <LcdWrite16+0x2d8>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <LcdWrite16+0x2d8>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 800422a:	1dbb      	adds	r3, r7, #6
 800422c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004230:	1dbb      	adds	r3, r7, #6
 8004232:	015b      	lsls	r3, r3, #5
 8004234:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004238:	f023 031f 	bic.w	r3, r3, #31
 800423c:	4313      	orrs	r3, r2
 800423e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004242:	4a07      	ldr	r2, [pc, #28]	; (8004260 <LcdWrite16+0x2d4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <LcdWrite16+0x2d8>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <LcdWrite16+0x2d8>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	4241028c 	.word	0x4241028c
 8004264:	42408280 	.word	0x42408280

08004268 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  while(Size--)
 8004274:	e00a      	b.n	800428c <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fdc8 	bl	8003e10 <LcdWrite8>
    if(dinc)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	60ba      	str	r2, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ef      	bne.n	8004276 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8004296:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <LCD_IO_WriteMultiData8+0x3c>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	42410284 	.word	0x42410284

080042a8 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  while(Size--)
 80042b4:	e00a      	b.n	80042cc <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fe66 	bl	8003f8c <LcdWrite16>
    if(dinc)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <LCD_IO_WriteMultiData16+0x24>
      pData++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3302      	adds	r3, #2
 80042ca:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1e5a      	subs	r2, r3, #1
 80042d0:	60ba      	str	r2, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ef      	bne.n	80042b6 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 80042d6:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <LCD_IO_WriteMultiData16+0x3c>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	42410284 	.word	0x42410284

080042e8 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f9b7 	bl	8004664 <HAL_Delay>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <LCD_IO_Init+0xd8>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	4a33      	ldr	r2, [pc, #204]	; (80043ec <LCD_IO_Init+0xd8>)
 800431e:	f043 0307 	orr.w	r3, r3, #7
 8004322:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8004324:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <LCD_IO_Init+0xdc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <LCD_IO_Init+0xdc>)
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8004334:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <LCD_IO_Init+0xdc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a2d      	ldr	r2, [pc, #180]	; (80043f0 <LCD_IO_Init+0xdc>)
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8004340:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <LCD_IO_Init+0xe0>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8004346:	4b2c      	ldr	r3, [pc, #176]	; (80043f8 <LCD_IO_Init+0xe4>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <LCD_IO_Init+0xe8>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8004352:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <LCD_IO_Init+0xec>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	4a29      	ldr	r2, [pc, #164]	; (8004400 <LCD_IO_Init+0xec>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <LCD_IO_Init+0xec>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 030c 	bic.w	r3, r3, #12
 800436a:	4a25      	ldr	r2, [pc, #148]	; (8004400 <LCD_IO_Init+0xec>)
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <LCD_IO_Init+0xec>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <LCD_IO_Init+0xec>)
 8004378:	f043 0303 	orr.w	r3, r3, #3
 800437c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <LCD_IO_Init+0xec>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <LCD_IO_Init+0xec>)
 8004384:	f043 030c 	orr.w	r3, r3, #12
 8004388:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <LCD_IO_Init+0xf0>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <LCD_IO_Init+0xf0>)
 8004390:	f043 0303 	orr.w	r3, r3, #3
 8004394:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <LCD_IO_Init+0xec>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	4a19      	ldr	r2, [pc, #100]	; (8004400 <LCD_IO_Init+0xec>)
 800439c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043a0:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <LCD_IO_Init+0xf4>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <LCD_IO_Init+0xf0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 0303 	bic.w	r3, r3, #3
 80043b0:	4a14      	ldr	r2, [pc, #80]	; (8004404 <LCD_IO_Init+0xf0>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <LCD_IO_Init+0xec>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <LCD_IO_Init+0xec>)
 80043c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c6:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80043c8:	200a      	movs	r0, #10
 80043ca:	f7ff ff8d 	bl	80042e8 <LCD_Delay>
  LCD_RST_ON;
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <LCD_IO_Init+0xe0>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80043d4:	200a      	movs	r0, #10
 80043d6:	f7ff ff87 	bl	80042e8 <LCD_Delay>
  LCD_RST_OFF;
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <LCD_IO_Init+0xe0>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80043e0:	200a      	movs	r0, #10
 80043e2:	f7ff ff81 	bl	80042e8 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40020000 	.word	0x40020000
 80043f4:	42400290 	.word	0x42400290
 80043f8:	42410280 	.word	0x42410280
 80043fc:	42410284 	.word	0x42410284
 8004400:	40020800 	.word	0x40020800
 8004404:	40020400 	.word	0x40020400
 8004408:	42408280 	.word	0x42408280

0800440c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <LCD_IO_WriteCmd8+0x34>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <LCD_IO_WriteCmd8+0x38>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fcf3 	bl	8003e10 <LcdWrite8>
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <LCD_IO_WriteCmd8+0x38>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <LCD_IO_WriteCmd8+0x34>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	42410284 	.word	0x42410284
 8004444:	42410280 	.word	0x42410280

08004448 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <LCD_IO_WriteData8+0x28>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fcd8 	bl	8003e10 <LcdWrite8>
  LCD_CS_OFF;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <LCD_IO_WriteData8+0x28>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	42410284 	.word	0x42410284

08004474 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <LCD_IO_WriteData16+0x28>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fd80 	bl	8003f8c <LcdWrite16>
  LCD_CS_OFF;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <LCD_IO_WriteData16+0x28>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	42410284 	.word	0x42410284

080044a0 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	603a      	str	r2, [r7, #0]
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	460b      	mov	r3, r1
 80044ae:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <LCD_IO_WriteCmd8DataFill16+0x40>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fca6 	bl	8003e10 <LcdWrite8>
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	2200      	movs	r2, #0
 80044ce:	6839      	ldr	r1, [r7, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fee9 	bl	80042a8 <LCD_IO_WriteMultiData16>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	42410284 	.word	0x42410284
 80044e4:	42410280 	.word	0x42410280

080044e8 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fc83 	bl	8003e10 <LcdWrite8>
 800450a:	4b07      	ldr	r3, [pc, #28]	; (8004528 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8004510:	2201      	movs	r2, #1
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	68b8      	ldr	r0, [r7, #8]
 8004516:	f7ff fea7 	bl	8004268 <LCD_IO_WriteMultiData8>
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	42410284 	.word	0x42410284
 8004528:	42410280 	.word	0x42410280

0800452c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800452c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004530:	480d      	ldr	r0, [pc, #52]	; (8004568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004532:	490e      	ldr	r1, [pc, #56]	; (800456c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004534:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004538:	e002      	b.n	8004540 <LoopCopyDataInit>

0800453a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800453a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800453c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800453e:	3304      	adds	r3, #4

08004540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004544:	d3f9      	bcc.n	800453a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004546:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004548:	4c0b      	ldr	r4, [pc, #44]	; (8004578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800454a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800454c:	e001      	b.n	8004552 <LoopFillZerobss>

0800454e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800454e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004550:	3204      	adds	r2, #4

08004552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004554:	d3fb      	bcc.n	800454e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004556:	f7ff f8f5 	bl	8003744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800455a:	f006 fad9 	bl	800ab10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800455e:	f7fd fab5 	bl	8001acc <main>
  bx  lr    
 8004562:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800456c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8004570:	080194cc 	.word	0x080194cc
  ldr r2, =_sbss
 8004574:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8004578:	200006b8 	.word	0x200006b8

0800457c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800457c:	e7fe      	b.n	800457c <ADC_IRQHandler>
	...

08004580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <HAL_Init+0x40>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a0d      	ldr	r2, [pc, #52]	; (80045c0 <HAL_Init+0x40>)
 800458a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800458e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_Init+0x40>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <HAL_Init+0x40>)
 8004596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800459a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <HAL_Init+0x40>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <HAL_Init+0x40>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a8:	2003      	movs	r0, #3
 80045aa:	f000 f94f 	bl	800484c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ae:	2000      	movs	r0, #0
 80045b0:	f000 f808 	bl	80045c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045b4:	f7fe fd5e 	bl	8003074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023c00 	.word	0x40023c00

080045c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_InitTick+0x54>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_InitTick+0x58>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045da:	fbb3 f3f1 	udiv	r3, r3, r1
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f967 	bl	80048b6 <HAL_SYSTICK_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e00e      	b.n	8004610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d80a      	bhi.n	800460e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f8:	2200      	movs	r2, #0
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	f000 f92f 	bl	8004862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004604:	4a06      	ldr	r2, [pc, #24]	; (8004620 <HAL_InitTick+0x5c>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000018 	.word	0x20000018
 800461c:	20000040 	.word	0x20000040
 8004620:	2000003c 	.word	0x2000003c

08004624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_IncTick+0x20>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_IncTick+0x24>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4413      	add	r3, r2
 8004634:	4a04      	ldr	r2, [pc, #16]	; (8004648 <HAL_IncTick+0x24>)
 8004636:	6013      	str	r3, [r2, #0]
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000040 	.word	0x20000040
 8004648:	200006a4 	.word	0x200006a4

0800464c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return uwTick;
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_GetTick+0x14>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	200006a4 	.word	0x200006a4

08004664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800466c:	f7ff ffee 	bl	800464c <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d005      	beq.n	800468a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_Delay+0x44>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800468a:	bf00      	nop
 800468c:	f7ff ffde 	bl	800464c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	429a      	cmp	r2, r3
 800469a:	d8f7      	bhi.n	800468c <HAL_Delay+0x28>
  {
  }
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000040 	.word	0x20000040

080046ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c8:	4013      	ands	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	60d3      	str	r3, [r2, #12]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <__NVIC_GetPriorityGrouping+0x18>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	f003 0307 	and.w	r3, r3, #7
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	db0b      	blt.n	800473a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	4907      	ldr	r1, [pc, #28]	; (8004748 <__NVIC_EnableIRQ+0x38>)
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2001      	movs	r0, #1
 8004732:	fa00 f202 	lsl.w	r2, r0, r2
 8004736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000e100 	.word	0xe000e100

0800474c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db0a      	blt.n	8004776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	490c      	ldr	r1, [pc, #48]	; (8004798 <__NVIC_SetPriority+0x4c>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	440b      	add	r3, r1
 8004770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004774:	e00a      	b.n	800478c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <__NVIC_SetPriority+0x50>)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3b04      	subs	r3, #4
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	440b      	add	r3, r1
 800478a:	761a      	strb	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000e100 	.word	0xe000e100
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f1c3 0307 	rsb	r3, r3, #7
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf28      	it	cs
 80047be:	2304      	movcs	r3, #4
 80047c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d902      	bls.n	80047d0 <NVIC_EncodePriority+0x30>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3b03      	subs	r3, #3
 80047ce:	e000      	b.n	80047d2 <NVIC_EncodePriority+0x32>
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43da      	mvns	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	401a      	ands	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e8:	f04f 31ff 	mov.w	r1, #4294967295
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	43d9      	mvns	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	4313      	orrs	r3, r2
         );
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004818:	d301      	bcc.n	800481e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <SysTick_Config+0x40>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004826:	210f      	movs	r1, #15
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f7ff ff8e 	bl	800474c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <SysTick_Config+0x40>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <SysTick_Config+0x40>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000e010 	.word	0xe000e010

0800484c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff29 	bl	80046ac <__NVIC_SetPriorityGrouping>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004874:	f7ff ff3e 	bl	80046f4 <__NVIC_GetPriorityGrouping>
 8004878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	f7ff ff8e 	bl	80047a0 <NVIC_EncodePriority>
 8004884:	4602      	mov	r2, r0
 8004886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff5d 	bl	800474c <__NVIC_SetPriority>
}
 8004892:	bf00      	nop
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff31 	bl	8004710 <__NVIC_EnableIRQ>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ffa2 	bl	8004808 <SysTick_Config>
 80048c4:	4603      	mov	r3, r0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7ff feb6 	bl	800464c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e099      	b.n	8004a20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800490c:	e00f      	b.n	800492e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800490e:	f7ff fe9d 	bl	800464c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b05      	cmp	r3, #5
 800491a:	d908      	bls.n	800492e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2203      	movs	r2, #3
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e078      	b.n	8004a20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e8      	bne.n	800490e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <HAL_DMA_Init+0x158>)
 8004948:	4013      	ands	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800495a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b04      	cmp	r3, #4
 8004986:	d107      	bne.n	8004998 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	4313      	orrs	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d117      	bne.n	80049f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00e      	beq.n	80049f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fb0f 	bl	8004ff8 <DMA_CheckFifoParam>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049ee:	2301      	movs	r3, #1
 80049f0:	e016      	b.n	8004a20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fac6 	bl	8004f8c <DMA_CalcBaseAndBitshift>
 8004a00:	4603      	mov	r3, r0
 8004a02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	223f      	movs	r2, #63	; 0x3f
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	f010803f 	.word	0xf010803f

08004a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_DMA_Start_IT+0x26>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e040      	b.n	8004ad4 <HAL_DMA_Start_IT+0xa8>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d12f      	bne.n	8004ac6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fa58 	bl	8004f30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	223f      	movs	r2, #63	; 0x3f
 8004a86:	409a      	lsls	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0216 	orr.w	r2, r2, #22
 8004a9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e005      	b.n	8004ad2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004aea:	f7ff fdaf 	bl	800464c <HAL_GetTick>
 8004aee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d008      	beq.n	8004b0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2280      	movs	r2, #128	; 0x80
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e052      	b.n	8004bb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0216 	bic.w	r2, r2, #22
 8004b1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <HAL_DMA_Abort+0x62>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0208 	bic.w	r2, r2, #8
 8004b4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b5e:	e013      	b.n	8004b88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b60:	f7ff fd74 	bl	800464c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d90c      	bls.n	8004b88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2203      	movs	r2, #3
 8004b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e015      	b.n	8004bb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e4      	bne.n	8004b60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	223f      	movs	r2, #63	; 0x3f
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d004      	beq.n	8004bda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e00c      	b.n	8004bf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2205      	movs	r2, #5
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c0c:	4b8e      	ldr	r3, [pc, #568]	; (8004e48 <HAL_DMA_IRQHandler+0x248>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a8e      	ldr	r2, [pc, #568]	; (8004e4c <HAL_DMA_IRQHandler+0x24c>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2208      	movs	r2, #8
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	2201      	movs	r2, #1
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	2201      	movs	r2, #1
 8004c90:	409a      	lsls	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f043 0204 	orr.w	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	2210      	movs	r2, #16
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d043      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d03c      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d018      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d024      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
 8004d2e:	e01f      	b.n	8004d70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
 8004d40:	e016      	b.n	8004d70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0208 	bic.w	r2, r2, #8
 8004d5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	2220      	movs	r2, #32
 8004d76:	409a      	lsls	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 808f 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8087 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	2220      	movs	r2, #32
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d136      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0216 	bic.w	r2, r2, #22
 8004db8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_DMA_IRQHandler+0x1da>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0208 	bic.w	r2, r2, #8
 8004de8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	223f      	movs	r2, #63	; 0x3f
 8004df0:	409a      	lsls	r2, r3
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d07e      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
        }
        return;
 8004e16:	e079      	b.n	8004f0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01d      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10d      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
 8004e44:	e02c      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
 8004e46:	bf00      	nop
 8004e48:	20000018 	.word	0x20000018
 8004e4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d023      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
 8004e60:	e01e      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10f      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0210 	bic.w	r2, r2, #16
 8004e7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d032      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d022      	beq.n	8004efa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d307      	bcc.n	8004ee8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f2      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x2cc>
 8004ee6:	e000      	b.n	8004eea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ee8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	e000      	b.n	8004f0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f0c:	bf00      	nop
    }
  }
}
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f22:	b2db      	uxtb	r3, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	d108      	bne.n	8004f70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f6e:	e007      	b.n	8004f80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	60da      	str	r2, [r3, #12]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	3b10      	subs	r3, #16
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x64>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fa6:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x68>)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d909      	bls.n	8004fce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	1d1a      	adds	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	659a      	str	r2, [r3, #88]	; 0x58
 8004fcc:	e007      	b.n	8004fde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	aaaaaaab 	.word	0xaaaaaaab
 8004ff4:	080190d8 	.word	0x080190d8

08004ff8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d11f      	bne.n	8005052 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d856      	bhi.n	80050c6 <DMA_CheckFifoParam+0xce>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <DMA_CheckFifoParam+0x28>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005031 	.word	0x08005031
 8005024:	08005043 	.word	0x08005043
 8005028:	08005031 	.word	0x08005031
 800502c:	080050c7 	.word	0x080050c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d046      	beq.n	80050ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005040:	e043      	b.n	80050ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800504a:	d140      	bne.n	80050ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005050:	e03d      	b.n	80050ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	d121      	bne.n	80050a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d837      	bhi.n	80050d2 <DMA_CheckFifoParam+0xda>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <DMA_CheckFifoParam+0x70>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	08005079 	.word	0x08005079
 800506c:	0800507f 	.word	0x0800507f
 8005070:	08005079 	.word	0x08005079
 8005074:	08005091 	.word	0x08005091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e030      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d025      	beq.n	80050d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800508e:	e022      	b.n	80050d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005098:	d11f      	bne.n	80050da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800509e:	e01c      	b.n	80050da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d903      	bls.n	80050ae <DMA_CheckFifoParam+0xb6>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d003      	beq.n	80050b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050ac:	e018      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
      break;
 80050b2:	e015      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
      break;
 80050c4:	e00b      	b.n	80050de <DMA_CheckFifoParam+0xe6>
      break;
 80050c6:	bf00      	nop
 80050c8:	e00a      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ca:	bf00      	nop
 80050cc:	e008      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ce:	bf00      	nop
 80050d0:	e006      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      break;
 80050d2:	bf00      	nop
 80050d4:	e004      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      break;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <DMA_CheckFifoParam+0xe8>
      break;
 80050de:	bf00      	nop
    }
  } 
  
  return status; 
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop

080050f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	e159      	b.n	80053c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800510c:	2201      	movs	r2, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4013      	ands	r3, r2
 800511e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	429a      	cmp	r2, r3
 8005126:	f040 8148 	bne.w	80053ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d005      	beq.n	8005142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800513e:	2b02      	cmp	r3, #2
 8005140:	d130      	bne.n	80051a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2203      	movs	r2, #3
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005178:	2201      	movs	r2, #1
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 0201 	and.w	r2, r3, #1
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d017      	beq.n	80051e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2203      	movs	r2, #3
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d123      	bne.n	8005234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	08da      	lsrs	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3208      	adds	r2, #8
 80051f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	220f      	movs	r2, #15
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	08da      	lsrs	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3208      	adds	r2, #8
 800522e:	69b9      	ldr	r1, [r7, #24]
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2203      	movs	r2, #3
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0203 	and.w	r2, r3, #3
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a2 	beq.w	80053ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4b57      	ldr	r3, [pc, #348]	; (80053d8 <HAL_GPIO_Init+0x2e8>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	4a56      	ldr	r2, [pc, #344]	; (80053d8 <HAL_GPIO_Init+0x2e8>)
 8005280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005284:	6453      	str	r3, [r2, #68]	; 0x44
 8005286:	4b54      	ldr	r3, [pc, #336]	; (80053d8 <HAL_GPIO_Init+0x2e8>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005292:	4a52      	ldr	r2, [pc, #328]	; (80053dc <HAL_GPIO_Init+0x2ec>)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	3302      	adds	r3, #2
 800529a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	220f      	movs	r2, #15
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a49      	ldr	r2, [pc, #292]	; (80053e0 <HAL_GPIO_Init+0x2f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d019      	beq.n	80052f2 <HAL_GPIO_Init+0x202>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a48      	ldr	r2, [pc, #288]	; (80053e4 <HAL_GPIO_Init+0x2f4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_GPIO_Init+0x1fe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a47      	ldr	r2, [pc, #284]	; (80053e8 <HAL_GPIO_Init+0x2f8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00d      	beq.n	80052ea <HAL_GPIO_Init+0x1fa>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a46      	ldr	r2, [pc, #280]	; (80053ec <HAL_GPIO_Init+0x2fc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <HAL_GPIO_Init+0x1f6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a45      	ldr	r2, [pc, #276]	; (80053f0 <HAL_GPIO_Init+0x300>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d101      	bne.n	80052e2 <HAL_GPIO_Init+0x1f2>
 80052de:	2304      	movs	r3, #4
 80052e0:	e008      	b.n	80052f4 <HAL_GPIO_Init+0x204>
 80052e2:	2307      	movs	r3, #7
 80052e4:	e006      	b.n	80052f4 <HAL_GPIO_Init+0x204>
 80052e6:	2303      	movs	r3, #3
 80052e8:	e004      	b.n	80052f4 <HAL_GPIO_Init+0x204>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e002      	b.n	80052f4 <HAL_GPIO_Init+0x204>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_GPIO_Init+0x204>
 80052f2:	2300      	movs	r3, #0
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f002 0203 	and.w	r2, r2, #3
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	4093      	lsls	r3, r2
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005304:	4935      	ldr	r1, [pc, #212]	; (80053dc <HAL_GPIO_Init+0x2ec>)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	3302      	adds	r3, #2
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005312:	4b38      	ldr	r3, [pc, #224]	; (80053f4 <HAL_GPIO_Init+0x304>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005336:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <HAL_GPIO_Init+0x304>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800533c:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <HAL_GPIO_Init+0x304>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <HAL_GPIO_Init+0x304>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <HAL_GPIO_Init+0x304>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538a:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <HAL_GPIO_Init+0x304>)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <HAL_GPIO_Init+0x304>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <HAL_GPIO_Init+0x304>)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	f67f aea2 	bls.w	800510c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3724      	adds	r7, #36	; 0x24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40013800 	.word	0x40013800
 80053e0:	40020000 	.word	0x40020000
 80053e4:	40020400 	.word	0x40020400
 80053e8:	40020800 	.word	0x40020800
 80053ec:	40020c00 	.word	0x40020c00
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40013c00 	.word	0x40013c00

080053f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
 8005404:	4613      	mov	r3, r2
 8005406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005408:	787b      	ldrb	r3, [r7, #1]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005414:	e003      	b.n	800541e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	041a      	lsls	r2, r3, #16
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	619a      	str	r2, [r3, #24]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800543c:	887a      	ldrh	r2, [r7, #2]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4013      	ands	r3, r2
 8005442:	041a      	lsls	r2, r3, #16
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	43d9      	mvns	r1, r3
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	400b      	ands	r3, r1
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	619a      	str	r2, [r3, #24]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005476:	4a05      	ldr	r2, [pc, #20]	; (800548c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd fda0 	bl	8002fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40013c00 	.word	0x40013c00

08005490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e12b      	b.n	80056fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fd fe04 	bl	80030c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054f4:	f003 f8d6 	bl	80086a4 <HAL_RCC_GetPCLK1Freq>
 80054f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4a81      	ldr	r2, [pc, #516]	; (8005704 <HAL_I2C_Init+0x274>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d807      	bhi.n	8005514 <HAL_I2C_Init+0x84>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a80      	ldr	r2, [pc, #512]	; (8005708 <HAL_I2C_Init+0x278>)
 8005508:	4293      	cmp	r3, r2
 800550a:	bf94      	ite	ls
 800550c:	2301      	movls	r3, #1
 800550e:	2300      	movhi	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e006      	b.n	8005522 <HAL_I2C_Init+0x92>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a7d      	ldr	r2, [pc, #500]	; (800570c <HAL_I2C_Init+0x27c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	bf94      	ite	ls
 800551c:	2301      	movls	r3, #1
 800551e:	2300      	movhi	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0e7      	b.n	80056fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a78      	ldr	r2, [pc, #480]	; (8005710 <HAL_I2C_Init+0x280>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	0c9b      	lsrs	r3, r3, #18
 8005534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a6a      	ldr	r2, [pc, #424]	; (8005704 <HAL_I2C_Init+0x274>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d802      	bhi.n	8005564 <HAL_I2C_Init+0xd4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3301      	adds	r3, #1
 8005562:	e009      	b.n	8005578 <HAL_I2C_Init+0xe8>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	4a69      	ldr	r2, [pc, #420]	; (8005714 <HAL_I2C_Init+0x284>)
 8005570:	fba2 2303 	umull	r2, r3, r2, r3
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	3301      	adds	r3, #1
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	430b      	orrs	r3, r1
 800557e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800558a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	495c      	ldr	r1, [pc, #368]	; (8005704 <HAL_I2C_Init+0x274>)
 8005594:	428b      	cmp	r3, r1
 8005596:	d819      	bhi.n	80055cc <HAL_I2C_Init+0x13c>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1e59      	subs	r1, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055ac:	400b      	ands	r3, r1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_I2C_Init+0x138>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1e59      	subs	r1, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c0:	3301      	adds	r3, #1
 80055c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c6:	e051      	b.n	800566c <HAL_I2C_Init+0x1dc>
 80055c8:	2304      	movs	r3, #4
 80055ca:	e04f      	b.n	800566c <HAL_I2C_Init+0x1dc>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d111      	bne.n	80055f8 <HAL_I2C_Init+0x168>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1e58      	subs	r0, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	440b      	add	r3, r1
 80055e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	e012      	b.n	800561e <HAL_I2C_Init+0x18e>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e58      	subs	r0, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	0099      	lsls	r1, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	fbb0 f3f3 	udiv	r3, r0, r3
 800560e:	3301      	adds	r3, #1
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Init+0x196>
 8005622:	2301      	movs	r3, #1
 8005624:	e022      	b.n	800566c <HAL_I2C_Init+0x1dc>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10e      	bne.n	800564c <HAL_I2C_Init+0x1bc>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1e58      	subs	r0, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	440b      	add	r3, r1
 800563c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005640:	3301      	adds	r3, #1
 8005642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564a:	e00f      	b.n	800566c <HAL_I2C_Init+0x1dc>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1e58      	subs	r0, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	0099      	lsls	r1, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	6809      	ldr	r1, [r1, #0]
 8005670:	4313      	orrs	r3, r2
 8005672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800569a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6911      	ldr	r1, [r2, #16]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68d2      	ldr	r2, [r2, #12]
 80056a6:	4311      	orrs	r1, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	000186a0 	.word	0x000186a0
 8005708:	001e847f 	.word	0x001e847f
 800570c:	003d08ff 	.word	0x003d08ff
 8005710:	431bde83 	.word	0x431bde83
 8005714:	10624dd3 	.word	0x10624dd3

08005718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	817b      	strh	r3, [r7, #10]
 800572a:	460b      	mov	r3, r1
 800572c:	813b      	strh	r3, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005732:	f7fe ff8b 	bl	800464c <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b20      	cmp	r3, #32
 8005742:	f040 80d9 	bne.w	80058f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2319      	movs	r3, #25
 800574c:	2201      	movs	r2, #1
 800574e:	496d      	ldr	r1, [pc, #436]	; (8005904 <HAL_I2C_Mem_Write+0x1ec>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f002 f90d 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	e0cc      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_I2C_Mem_Write+0x56>
 800576a:	2302      	movs	r3, #2
 800576c:	e0c5      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d007      	beq.n	8005794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2221      	movs	r2, #33	; 0x21
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2240      	movs	r2, #64	; 0x40
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a4d      	ldr	r2, [pc, #308]	; (8005908 <HAL_I2C_Mem_Write+0x1f0>)
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057d6:	88f8      	ldrh	r0, [r7, #6]
 80057d8:	893a      	ldrh	r2, [r7, #8]
 80057da:	8979      	ldrh	r1, [r7, #10]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4603      	mov	r3, r0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f001 fe9c 	bl	8007524 <I2C_RequestMemoryWrite>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d052      	beq.n	8005898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e081      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f002 f98e 	bl	8007b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b04      	cmp	r3, #4
 800580c:	d107      	bne.n	800581e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06b      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d11b      	bne.n	8005898 <HAL_I2C_Mem_Write+0x180>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1aa      	bne.n	80057f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f002 f97a 	bl	8007b9e <I2C_WaitOnBTFFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00d      	beq.n	80058cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d107      	bne.n	80058c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e016      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	00100002 	.word	0x00100002
 8005908:	ffff0000 	.word	0xffff0000

0800590c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	461a      	mov	r2, r3
 800591a:	4603      	mov	r3, r0
 800591c:	817b      	strh	r3, [r7, #10]
 800591e:	460b      	mov	r3, r1
 8005920:	813b      	strh	r3, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005926:	f7fe fe91 	bl	800464c <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b20      	cmp	r3, #32
 8005936:	f040 8208 	bne.w	8005d4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2319      	movs	r3, #25
 8005940:	2201      	movs	r2, #1
 8005942:	497b      	ldr	r1, [pc, #492]	; (8005b30 <HAL_I2C_Mem_Read+0x224>)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f002 f813 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005950:	2302      	movs	r3, #2
 8005952:	e1fb      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_I2C_Mem_Read+0x56>
 800595e:	2302      	movs	r3, #2
 8005960:	e1f4      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d007      	beq.n	8005988 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2222      	movs	r2, #34	; 0x22
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2240      	movs	r2, #64	; 0x40
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a5b      	ldr	r2, [pc, #364]	; (8005b34 <HAL_I2C_Mem_Read+0x228>)
 80059c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ca:	88f8      	ldrh	r0, [r7, #6]
 80059cc:	893a      	ldrh	r2, [r7, #8]
 80059ce:	8979      	ldrh	r1, [r7, #10]
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	4603      	mov	r3, r0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fe38 	bl	8007650 <I2C_RequestMemoryRead>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e1b0      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d113      	bne.n	8005a1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e184      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d11b      	bne.n	8005a5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e164      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d11b      	bne.n	8005a9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	e144      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ab0:	e138      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	f200 80f1 	bhi.w	8005c9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d123      	bne.n	8005b0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f002 f8db 	bl	8007c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e139      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b0a:	e10b      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d14e      	bne.n	8005bb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4906      	ldr	r1, [pc, #24]	; (8005b38 <HAL_I2C_Mem_Read+0x22c>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f001 ff26 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e10e      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
 8005b2e:	bf00      	nop
 8005b30:	00100002 	.word	0x00100002
 8005b34:	ffff0000 	.word	0xffff0000
 8005b38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bb0:	e0b8      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4966      	ldr	r1, [pc, #408]	; (8005d54 <HAL_I2C_Mem_Read+0x448>)
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f001 fed7 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0bf      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2200      	movs	r2, #0
 8005c16:	494f      	ldr	r1, [pc, #316]	; (8005d54 <HAL_I2C_Mem_Read+0x448>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f001 fea9 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e091      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c9c:	e042      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f001 ffee 	bl	8007c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e04c      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d118      	bne.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f aec2 	bne.w	8005ab2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e000      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d4a:	2302      	movs	r3, #2
  }
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3728      	adds	r7, #40	; 0x28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	00010004 	.word	0x00010004

08005d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d003      	beq.n	8005d90 <HAL_I2C_EV_IRQHandler+0x38>
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	f040 80c1 	bne.w	8005f12 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005db0:	d003      	beq.n	8005dba <HAL_I2C_EV_IRQHandler+0x62>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005db8:	d101      	bne.n	8005dbe <HAL_I2C_EV_IRQHandler+0x66>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <HAL_I2C_EV_IRQHandler+0x68>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f000 8132 	beq.w	800602a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00c      	beq.n	8005dea <HAL_I2C_EV_IRQHandler+0x92>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	0a5b      	lsrs	r3, r3, #9
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 ffd6 	bl	8007d8e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fd83 	bl	80068ee <I2C_Master_SB>
 8005de8:	e092      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <HAL_I2C_EV_IRQHandler+0xb2>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fdf9 	bl	80069fa <I2C_Master_ADD10>
 8005e08:	e082      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_I2C_EV_IRQHandler+0xd2>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	0a5b      	lsrs	r3, r3, #9
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fe13 	bl	8006a4e <I2C_Master_ADDR>
 8005e28:	e072      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	089b      	lsrs	r3, r3, #2
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d03b      	beq.n	8005eae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e44:	f000 80f3 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	09db      	lsrs	r3, r3, #7
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	0a9b      	lsrs	r3, r3, #10
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f9f3 	bl	8006258 <I2C_MasterTransmit_TXE>
 8005e72:	e04d      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	089b      	lsrs	r3, r3, #2
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80d6 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	0a5b      	lsrs	r3, r3, #9
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80cf 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e90:	7bbb      	ldrb	r3, [r7, #14]
 8005e92:	2b21      	cmp	r3, #33	; 0x21
 8005e94:	d103      	bne.n	8005e9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa7a 	bl	8006390 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e9c:	e0c7      	b.n	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	f040 80c4 	bne.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fae8 	bl	800647c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eac:	e0bf      	b.n	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebc:	f000 80b7 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	099b      	lsrs	r3, r3, #6
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00f      	beq.n	8005eec <HAL_I2C_EV_IRQHandler+0x194>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	0a9b      	lsrs	r3, r3, #10
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_I2C_EV_IRQHandler+0x194>
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb5d 	bl	80065a4 <I2C_MasterReceive_RXNE>
 8005eea:	e011      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 809a 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	0a5b      	lsrs	r3, r3, #9
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8093 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fc06 	bl	800671a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f0e:	e08e      	b.n	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f10:	e08d      	b.n	800602e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	e007      	b.n	8005f34 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x20e>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	0a5b      	lsrs	r3, r3, #9
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00c      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 ffc4 	bl	8006eec <I2C_Slave_ADDR>
 8005f64:	e066      	b.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <HAL_I2C_EV_IRQHandler+0x22e>
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	0a5b      	lsrs	r3, r3, #9
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fffe 	bl	8006f80 <I2C_Slave_STOPF>
 8005f84:	e056      	b.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b21      	cmp	r3, #33	; 0x21
 8005f8a:	d002      	beq.n	8005f92 <HAL_I2C_EV_IRQHandler+0x23a>
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	2b29      	cmp	r3, #41	; 0x29
 8005f90:	d125      	bne.n	8005fde <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	09db      	lsrs	r3, r3, #7
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00f      	beq.n	8005fbe <HAL_I2C_EV_IRQHandler+0x266>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	0a9b      	lsrs	r3, r3, #10
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <HAL_I2C_EV_IRQHandler+0x266>
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	089b      	lsrs	r3, r3, #2
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 feda 	bl	8006d70 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fbc:	e039      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d033      	beq.n	8006032 <HAL_I2C_EV_IRQHandler+0x2da>
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	0a5b      	lsrs	r3, r3, #9
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d02d      	beq.n	8006032 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 ff07 	bl	8006dea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fdc:	e029      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	099b      	lsrs	r3, r3, #6
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	0a9b      	lsrs	r3, r3, #10
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	089b      	lsrs	r3, r3, #2
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 ff12 	bl	8006e2c <I2C_SlaveReceive_RXNE>
 8006008:	e014      	b.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	089b      	lsrs	r3, r3, #2
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	0a5b      	lsrs	r3, r3, #9
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 ff40 	bl	8006ea8 <I2C_SlaveReceive_BTF>
 8006028:	e004      	b.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800602a:	bf00      	nop
 800602c:	e002      	b.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006032:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b08a      	sub	sp, #40	; 0x28
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	0a1b      	lsrs	r3, r3, #8
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00e      	beq.n	8006088 <HAL_I2C_ER_IRQHandler+0x4e>
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d008      	beq.n	8006088 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006086:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	0a5b      	lsrs	r3, r3, #9
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <HAL_I2C_ER_IRQHandler+0x78>
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80060b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	0a9b      	lsrs	r3, r3, #10
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d03f      	beq.n	800613e <HAL_I2C_ER_IRQHandler+0x104>
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d039      	beq.n	800613e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80060ca:	7efb      	ldrb	r3, [r7, #27]
 80060cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80060e4:	7ebb      	ldrb	r3, [r7, #26]
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d112      	bne.n	8006110 <HAL_I2C_ER_IRQHandler+0xd6>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10f      	bne.n	8006110 <HAL_I2C_ER_IRQHandler+0xd6>
 80060f0:	7cfb      	ldrb	r3, [r7, #19]
 80060f2:	2b21      	cmp	r3, #33	; 0x21
 80060f4:	d008      	beq.n	8006108 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80060f6:	7cfb      	ldrb	r3, [r7, #19]
 80060f8:	2b29      	cmp	r3, #41	; 0x29
 80060fa:	d005      	beq.n	8006108 <HAL_I2C_ER_IRQHandler+0xce>
 80060fc:	7cfb      	ldrb	r3, [r7, #19]
 80060fe:	2b28      	cmp	r3, #40	; 0x28
 8006100:	d106      	bne.n	8006110 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b21      	cmp	r3, #33	; 0x21
 8006106:	d103      	bne.n	8006110 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 f869 	bl	80071e0 <I2C_Slave_AF>
 800610e:	e016      	b.n	800613e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006118:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	f043 0304 	orr.w	r3, r3, #4
 8006120:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006122:	7efb      	ldrb	r3, [r7, #27]
 8006124:	2b10      	cmp	r3, #16
 8006126:	d002      	beq.n	800612e <HAL_I2C_ER_IRQHandler+0xf4>
 8006128:	7efb      	ldrb	r3, [r7, #27]
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d107      	bne.n	800613e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	0adb      	lsrs	r3, r3, #11
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <HAL_I2C_ER_IRQHandler+0x12e>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	0a1b      	lsrs	r3, r3, #8
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d008      	beq.n	8006168 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	f043 0308 	orr.w	r3, r3, #8
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006166:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 f8a0 	bl	80072c0 <I2C_ITError>
  }
}
 8006180:	bf00      	nop
 8006182:	3728      	adds	r7, #40	; 0x28
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
 80061e4:	4613      	mov	r3, r2
 80061e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d150      	bne.n	8006320 <I2C_MasterTransmit_TXE+0xc8>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b21      	cmp	r3, #33	; 0x21
 8006282:	d14d      	bne.n	8006320 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b08      	cmp	r3, #8
 8006288:	d01d      	beq.n	80062c6 <I2C_MasterTransmit_TXE+0x6e>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b20      	cmp	r3, #32
 800628e:	d01a      	beq.n	80062c6 <I2C_MasterTransmit_TXE+0x6e>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006296:	d016      	beq.n	80062c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2211      	movs	r2, #17
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ff62 	bl	8006188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062c4:	e060      	b.n	8006388 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d107      	bne.n	8006310 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ff7d 	bl	8006208 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800630e:	e03b      	b.n	8006388 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff ff35 	bl	8006188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800631e:	e033      	b.n	8006388 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b21      	cmp	r3, #33	; 0x21
 8006324:	d005      	beq.n	8006332 <I2C_MasterTransmit_TXE+0xda>
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d12d      	bne.n	8006388 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b22      	cmp	r3, #34	; 0x22
 8006330:	d12a      	bne.n	8006388 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d108      	bne.n	800634e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800634c:	e01c      	b.n	8006388 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d103      	bne.n	8006362 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f88e 	bl	800647c <I2C_MemoryTransmit_TXE_BTF>
}
 8006360:	e012      	b.n	8006388 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006386:	e7ff      	b.n	8006388 <I2C_MasterTransmit_TXE+0x130>
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b21      	cmp	r3, #33	; 0x21
 80063a8:	d164      	bne.n	8006474 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d012      	beq.n	80063da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80063d8:	e04c      	b.n	8006474 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d01d      	beq.n	800641c <I2C_MasterTransmit_BTF+0x8c>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d01a      	beq.n	800641c <I2C_MasterTransmit_BTF+0x8c>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063ec:	d016      	beq.n	800641c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2211      	movs	r2, #17
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff feb7 	bl	8006188 <HAL_I2C_MasterTxCpltCallback>
}
 800641a:	e02b      	b.n	8006474 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800642a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d107      	bne.n	8006466 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fed2 	bl	8006208 <HAL_I2C_MemTxCpltCallback>
}
 8006464:	e006      	b.n	8006474 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fe8a 	bl	8006188 <HAL_I2C_MasterTxCpltCallback>
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006490:	2b00      	cmp	r3, #0
 8006492:	d11d      	bne.n	80064d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10b      	bne.n	80064b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80064b2:	e073      	b.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	121b      	asrs	r3, r3, #8
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064ce:	e065      	b.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10b      	bne.n	80064f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064ee:	e055      	b.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d151      	bne.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b22      	cmp	r3, #34	; 0x22
 80064fc:	d10d      	bne.n	800651a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006518:	e040      	b.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b21      	cmp	r3, #33	; 0x21
 8006528:	d112      	bne.n	8006550 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800654e:	e025      	b.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d120      	bne.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b21      	cmp	r3, #33	; 0x21
 800655e:	d11d      	bne.n	800659c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800656e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff fe36 	bl	8006208 <HAL_I2C_MemTxCpltCallback>
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b22      	cmp	r3, #34	; 0x22
 80065b6:	f040 80ac 	bne.w	8006712 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d921      	bls.n	800660c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	f040 808c 	bne.w	8006712 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006608:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800660a:	e082      	b.n	8006712 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	2b02      	cmp	r3, #2
 8006612:	d075      	beq.n	8006700 <I2C_MasterReceive_RXNE+0x15c>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d002      	beq.n	8006620 <I2C_MasterReceive_RXNE+0x7c>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d16f      	bne.n	8006700 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fafd 	bl	8007c20 <I2C_WaitOnSTOPRequestThroughIT>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d142      	bne.n	80066b2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800664a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d10a      	bne.n	800669c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fdc1 	bl	800621c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800669a:	e03a      	b.n	8006712 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2212      	movs	r2, #18
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fd76 	bl	800619c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066b0:	e02f      	b.n	8006712 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fd99 	bl	8006230 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066fe:	e008      	b.n	8006712 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	605a      	str	r2, [r3, #4]
}
 8006710:	e7ff      	b.n	8006712 <I2C_MasterReceive_RXNE+0x16e>
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b04      	cmp	r3, #4
 8006730:	d11b      	bne.n	800676a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006740:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006768:	e0bd      	b.n	80068e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b03      	cmp	r3, #3
 8006772:	d129      	bne.n	80067c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006782:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d00a      	beq.n	80067a0 <I2C_MasterReceive_BTF+0x86>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d007      	beq.n	80067a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067c6:	e08e      	b.n	80068e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d176      	bne.n	80068c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d002      	beq.n	80067de <I2C_MasterReceive_BTF+0xc4>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d108      	bne.n	80067f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e019      	b.n	8006824 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d002      	beq.n	80067fc <I2C_MasterReceive_BTF+0xe2>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d108      	bne.n	800680e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e00a      	b.n	8006824 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d007      	beq.n	8006824 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006822:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800687e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b40      	cmp	r3, #64	; 0x40
 8006892:	d10a      	bne.n	80068aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fcba 	bl	800621c <HAL_I2C_MemRxCpltCallback>
}
 80068a8:	e01d      	b.n	80068e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2212      	movs	r2, #18
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fc6f 	bl	800619c <HAL_I2C_MasterRxCpltCallback>
}
 80068be:	e012      	b.n	80068e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d117      	bne.n	8006932 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800691a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800691c:	e067      	b.n	80069ee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	611a      	str	r2, [r3, #16]
}
 8006930:	e05d      	b.n	80069ee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693a:	d133      	bne.n	80069a4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b21      	cmp	r3, #33	; 0x21
 8006946:	d109      	bne.n	800695c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	b2db      	uxtb	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006958:	611a      	str	r2, [r3, #16]
 800695a:	e008      	b.n	800696e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <I2C_Master_SB+0x92>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d108      	bne.n	8006992 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d032      	beq.n	80069ee <I2C_Master_SB+0x100>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02d      	beq.n	80069ee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a0:	605a      	str	r2, [r3, #4]
}
 80069a2:	e024      	b.n	80069ee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10e      	bne.n	80069ca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	11db      	asrs	r3, r3, #7
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 0306 	and.w	r3, r3, #6
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f063 030f 	orn	r3, r3, #15
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	611a      	str	r2, [r3, #16]
}
 80069c8:	e011      	b.n	80069ee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10d      	bne.n	80069ee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	11db      	asrs	r3, r3, #7
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0306 	and.w	r3, r3, #6
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f063 030e 	orn	r3, r3, #14
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	611a      	str	r2, [r3, #16]
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <I2C_Master_ADD10+0x26>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d108      	bne.n	8006a32 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00c      	beq.n	8006a42 <I2C_Master_ADD10+0x48>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a40:	605a      	str	r2, [r3, #4]
  }
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b091      	sub	sp, #68	; 0x44
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b22      	cmp	r3, #34	; 0x22
 8006a76:	f040 8169 	bne.w	8006d4c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10f      	bne.n	8006aa2 <I2C_Master_ADDR+0x54>
 8006a82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d10b      	bne.n	8006aa2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	e160      	b.n	8006d64 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11d      	bne.n	8006ae6 <I2C_Master_ADDR+0x98>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ab2:	d118      	bne.n	8006ae6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ae4:	e13e      	b.n	8006d64 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d113      	bne.n	8006b18 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af0:	2300      	movs	r3, #0
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e115      	b.n	8006d44 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	f040 808a 	bne.w	8006c38 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b2a:	d137      	bne.n	8006b9c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4a:	d113      	bne.n	8006b74 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	e0e7      	b.n	8006d44 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b74:	2300      	movs	r3, #0
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	623b      	str	r3, [r7, #32]
 8006b88:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e0d3      	b.n	8006d44 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d02e      	beq.n	8006c00 <I2C_Master_ADDR+0x1b2>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d02b      	beq.n	8006c00 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	2b12      	cmp	r3, #18
 8006bac:	d102      	bne.n	8006bb4 <I2C_Master_ADDR+0x166>
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d125      	bne.n	8006c00 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00e      	beq.n	8006bd8 <I2C_Master_ADDR+0x18a>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d00b      	beq.n	8006bd8 <I2C_Master_ADDR+0x18a>
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d008      	beq.n	8006bd8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e007      	b.n	8006be8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	e0a1      	b.n	8006d44 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e085      	b.n	8006d44 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d14d      	bne.n	8006cde <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d016      	beq.n	8006c76 <I2C_Master_ADDR+0x228>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d013      	beq.n	8006c76 <I2C_Master_ADDR+0x228>
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d010      	beq.n	8006c76 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c62:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e007      	b.n	8006c86 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c84:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c94:	d117      	bne.n	8006cc6 <I2C_Master_ADDR+0x278>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c9c:	d00b      	beq.n	8006cb6 <I2C_Master_ADDR+0x268>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d008      	beq.n	8006cb6 <I2C_Master_ADDR+0x268>
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d005      	beq.n	8006cb6 <I2C_Master_ADDR+0x268>
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d002      	beq.n	8006cb6 <I2C_Master_ADDR+0x268>
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d107      	bne.n	8006cc6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	e032      	b.n	8006d44 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d117      	bne.n	8006d2e <I2C_Master_ADDR+0x2e0>
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d04:	d00b      	beq.n	8006d1e <I2C_Master_ADDR+0x2d0>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d008      	beq.n	8006d1e <I2C_Master_ADDR+0x2d0>
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d005      	beq.n	8006d1e <I2C_Master_ADDR+0x2d0>
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d002      	beq.n	8006d1e <I2C_Master_ADDR+0x2d0>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d107      	bne.n	8006d2e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d4a:	e00b      	b.n	8006d64 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
}
 8006d62:	e7ff      	b.n	8006d64 <I2C_Master_ADDR+0x316>
 8006d64:	bf00      	nop
 8006d66:	3744      	adds	r7, #68	; 0x44
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d02b      	beq.n	8006de2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d114      	bne.n	8006de2 <I2C_SlaveTransmit_TXE+0x72>
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b29      	cmp	r3, #41	; 0x29
 8006dbc:	d111      	bne.n	8006de2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dcc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2221      	movs	r2, #33	; 0x21
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2228      	movs	r2, #40	; 0x28
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff f9e7 	bl	80061b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d011      	beq.n	8006e20 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02c      	beq.n	8006ea0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d114      	bne.n	8006ea0 <I2C_SlaveReceive_RXNE+0x74>
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b2a      	cmp	r3, #42	; 0x2a
 8006e7a:	d111      	bne.n	8006ea0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2222      	movs	r2, #34	; 0x22
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2228      	movs	r2, #40	; 0x28
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff f992 	bl	80061c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d012      	beq.n	8006ee0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f06:	2b28      	cmp	r3, #40	; 0x28
 8006f08:	d127      	bne.n	8006f5a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f18:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	089b      	lsrs	r3, r3, #2
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f26:	2301      	movs	r3, #1
 8006f28:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	09db      	lsrs	r3, r3, #7
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	81bb      	strh	r3, [r7, #12]
 8006f3c:	e002      	b.n	8006f44 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f4c:	89ba      	ldrh	r2, [r7, #12]
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f940 	bl	80061d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f58:	e00e      	b.n	8006f78 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	60bb      	str	r3, [r7, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	60bb      	str	r3, [r7, #8]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	60bb      	str	r3, [r7, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fcc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fdc:	d172      	bne.n	80070c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b22      	cmp	r3, #34	; 0x22
 8006fe2:	d002      	beq.n	8006fea <I2C_Slave_STOPF+0x6a>
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe8:	d135      	bne.n	8007056 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	f043 0204 	orr.w	r2, r3, #4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800701c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd ff76 	bl	8004f14 <HAL_DMA_GetState>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d049      	beq.n	80070c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	4a69      	ldr	r2, [pc, #420]	; (80071d8 <I2C_Slave_STOPF+0x258>)
 8007034:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fdbe 	bl	8004bbc <HAL_DMA_Abort_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03d      	beq.n	80070c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007054:	e035      	b.n	80070c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	f043 0204 	orr.w	r2, r3, #4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007088:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd ff40 	bl	8004f14 <HAL_DMA_GetState>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d014      	beq.n	80070c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	4a4e      	ldr	r2, [pc, #312]	; (80071d8 <I2C_Slave_STOPF+0x258>)
 80070a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fd fd88 	bl	8004bbc <HAL_DMA_Abort_IT>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	e000      	b.n	80070c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d03e      	beq.n	800714c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d112      	bne.n	8007102 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710c:	2b40      	cmp	r3, #64	; 0x40
 800710e:	d112      	bne.n	8007136 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f043 0204 	orr.w	r2, r3, #4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8b3 	bl	80072c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800715a:	e039      	b.n	80071d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b2a      	cmp	r3, #42	; 0x2a
 8007160:	d109      	bne.n	8007176 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2228      	movs	r2, #40	; 0x28
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff f827 	bl	80061c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b28      	cmp	r3, #40	; 0x28
 8007180:	d111      	bne.n	80071a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a15      	ldr	r2, [pc, #84]	; (80071dc <I2C_Slave_STOPF+0x25c>)
 8007186:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff f828 	bl	80061f4 <HAL_I2C_ListenCpltCallback>
}
 80071a4:	e014      	b.n	80071d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	2b22      	cmp	r3, #34	; 0x22
 80071ac:	d002      	beq.n	80071b4 <I2C_Slave_STOPF+0x234>
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b22      	cmp	r3, #34	; 0x22
 80071b2:	d10d      	bne.n	80071d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fe fffa 	bl	80061c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	08007821 	.word	0x08007821
 80071dc:	ffff0000 	.word	0xffff0000

080071e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d002      	beq.n	8007202 <I2C_Slave_AF+0x22>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d129      	bne.n	8007256 <I2C_Slave_AF+0x76>
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2b28      	cmp	r3, #40	; 0x28
 8007206:	d126      	bne.n	8007256 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2c      	ldr	r2, [pc, #176]	; (80072bc <I2C_Slave_AF+0xdc>)
 800720c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800721c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007226:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007236:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fe ffd0 	bl	80061f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007254:	e02e      	b.n	80072b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b21      	cmp	r3, #33	; 0x21
 800725a:	d126      	bne.n	80072aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <I2C_Slave_AF+0xdc>)
 8007260:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2221      	movs	r2, #33	; 0x21
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007286:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007290:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fe ff84 	bl	80061b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80072a8:	e004      	b.n	80072b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072b2:	615a      	str	r2, [r3, #20]
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	ffff0000 	.word	0xffff0000

080072c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d002      	beq.n	80072e4 <I2C_ITError+0x24>
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d10a      	bne.n	80072fa <I2C_ITError+0x3a>
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	2b22      	cmp	r3, #34	; 0x22
 80072e8:	d107      	bne.n	80072fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007300:	2b28      	cmp	r3, #40	; 0x28
 8007302:	d107      	bne.n	8007314 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2228      	movs	r2, #40	; 0x28
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007312:	e015      	b.n	8007340 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007322:	d00a      	beq.n	800733a <I2C_ITError+0x7a>
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2b60      	cmp	r3, #96	; 0x60
 8007328:	d007      	beq.n	800733a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734e:	d162      	bne.n	8007416 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800735e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d020      	beq.n	80073b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	4a6a      	ldr	r2, [pc, #424]	; (800751c <I2C_ITError+0x25c>)
 8007374:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fc1e 	bl	8004bbc <HAL_DMA_Abort_IT>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8089 	beq.w	800749a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0201 	bic.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073aa:	4610      	mov	r0, r2
 80073ac:	4798      	blx	r3
 80073ae:	e074      	b.n	800749a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	4a59      	ldr	r2, [pc, #356]	; (800751c <I2C_ITError+0x25c>)
 80073b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fd fbfd 	bl	8004bbc <HAL_DMA_Abort_IT>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d068      	beq.n	800749a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d10b      	bne.n	80073ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0201 	bic.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
 8007414:	e041      	b.n	800749a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b60      	cmp	r3, #96	; 0x60
 8007420:	d125      	bne.n	800746e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d10b      	bne.n	8007456 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fe feec 	bl	8006244 <HAL_I2C_AbortCpltCallback>
 800746c:	e015      	b.n	800749a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d10b      	bne.n	8007494 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fe fecb 	bl	8006230 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10e      	bne.n	80074c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d113      	bne.n	8007514 <I2C_ITError+0x254>
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b28      	cmp	r3, #40	; 0x28
 80074f0:	d110      	bne.n	8007514 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <I2C_ITError+0x260>)
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fe fe70 	bl	80061f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	08007821 	.word	0x08007821
 8007520:	ffff0000 	.word	0xffff0000

08007524 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af02      	add	r7, sp, #8
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	461a      	mov	r2, r3
 8007532:	4603      	mov	r3, r0
 8007534:	817b      	strh	r3, [r7, #10]
 8007536:	460b      	mov	r3, r1
 8007538:	813b      	strh	r3, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800754c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	2200      	movs	r2, #0
 8007556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fa08 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00d      	beq.n	8007582 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007574:	d103      	bne.n	800757e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800757c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e05f      	b.n	8007642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007582:	897b      	ldrh	r3, [r7, #10]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	492d      	ldr	r1, [pc, #180]	; (800764c <I2C_RequestMemoryWrite+0x128>)
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa40 	bl	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e04c      	b.n	8007642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c0:	6a39      	ldr	r1, [r7, #32]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 faaa 	bl	8007b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00d      	beq.n	80075ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d107      	bne.n	80075e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e02b      	b.n	8007642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d105      	bne.n	80075fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075f0:	893b      	ldrh	r3, [r7, #8]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	611a      	str	r2, [r3, #16]
 80075fa:	e021      	b.n	8007640 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075fc:	893b      	ldrh	r3, [r7, #8]
 80075fe:	0a1b      	lsrs	r3, r3, #8
 8007600:	b29b      	uxth	r3, r3
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800760a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760c:	6a39      	ldr	r1, [r7, #32]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fa84 	bl	8007b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2b04      	cmp	r3, #4
 8007620:	d107      	bne.n	8007632 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e005      	b.n	8007642 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007636:	893b      	ldrh	r3, [r7, #8]
 8007638:	b2da      	uxtb	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	00010002 	.word	0x00010002

08007650 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	461a      	mov	r2, r3
 800765e:	4603      	mov	r3, r0
 8007660:	817b      	strh	r3, [r7, #10]
 8007662:	460b      	mov	r3, r1
 8007664:	813b      	strh	r3, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007678:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007688:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	2200      	movs	r2, #0
 8007692:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f96a 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00d      	beq.n	80076be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b0:	d103      	bne.n	80076ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e0aa      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076be:	897b      	ldrh	r3, [r7, #10]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	6a3a      	ldr	r2, [r7, #32]
 80076d2:	4952      	ldr	r1, [pc, #328]	; (800781c <I2C_RequestMemoryRead+0x1cc>)
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f9a2 	bl	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e097      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fc:	6a39      	ldr	r1, [r7, #32]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fa0c 	bl	8007b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	2b04      	cmp	r3, #4
 8007710:	d107      	bne.n	8007722 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007720:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e076      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d105      	bne.n	8007738 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800772c:	893b      	ldrh	r3, [r7, #8]
 800772e:	b2da      	uxtb	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	611a      	str	r2, [r3, #16]
 8007736:	e021      	b.n	800777c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007738:	893b      	ldrh	r3, [r7, #8]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	b29b      	uxth	r3, r3
 800773e:	b2da      	uxtb	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007748:	6a39      	ldr	r1, [r7, #32]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f9e6 	bl	8007b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00d      	beq.n	8007772 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	2b04      	cmp	r3, #4
 800775c:	d107      	bne.n	800776e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800776c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e050      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007772:	893b      	ldrh	r3, [r7, #8]
 8007774:	b2da      	uxtb	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	6a39      	ldr	r1, [r7, #32]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f9cb 	bl	8007b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00d      	beq.n	80077a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	2b04      	cmp	r3, #4
 8007792:	d107      	bne.n	80077a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e035      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	2200      	movs	r2, #0
 80077c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f8d3 	bl	8007970 <I2C_WaitOnFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00d      	beq.n	80077ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077de:	d103      	bne.n	80077e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e013      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077ec:	897b      	ldrh	r3, [r7, #10]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	4906      	ldr	r1, [pc, #24]	; (800781c <I2C_RequestMemoryRead+0x1cc>)
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f90b 	bl	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	00010002 	.word	0x00010002

08007820 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007838:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800783a:	4b4b      	ldr	r3, [pc, #300]	; (8007968 <I2C_DMAAbort+0x148>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	08db      	lsrs	r3, r3, #3
 8007840:	4a4a      	ldr	r2, [pc, #296]	; (800796c <I2C_DMAAbort+0x14c>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	0a1a      	lsrs	r2, r3, #8
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	00da      	lsls	r2, r3, #3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f043 0220 	orr.w	r2, r3, #32
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007866:	e00a      	b.n	800787e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3b01      	subs	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d0ea      	beq.n	8007854 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	2200      	movs	r2, #0
 800788c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	2200      	movs	r2, #0
 800789c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	2200      	movs	r2, #0
 80078c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	2200      	movs	r2, #0
 80078d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b60      	cmp	r3, #96	; 0x60
 80078ee:	d10e      	bne.n	800790e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2200      	movs	r2, #0
 8007904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007906:	6978      	ldr	r0, [r7, #20]
 8007908:	f7fe fc9c 	bl	8006244 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800790c:	e027      	b.n	800795e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800790e:	7cfb      	ldrb	r3, [r7, #19]
 8007910:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007914:	2b28      	cmp	r3, #40	; 0x28
 8007916:	d117      	bne.n	8007948 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007936:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2200      	movs	r2, #0
 800793c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2228      	movs	r2, #40	; 0x28
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007946:	e007      	b.n	8007958 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	f7fe fc69 	bl	8006230 <HAL_I2C_ErrorCallback>
}
 800795e:	bf00      	nop
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000018 	.word	0x20000018
 800796c:	14f8b589 	.word	0x14f8b589

08007970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	4613      	mov	r3, r2
 800797e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007980:	e025      	b.n	80079ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d021      	beq.n	80079ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800798a:	f7fc fe5f 	bl	800464c <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d302      	bcc.n	80079a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d116      	bne.n	80079ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f043 0220 	orr.w	r2, r3, #32
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e023      	b.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10d      	bne.n	80079f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	43da      	mvns	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	e00c      	b.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	43da      	mvns	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d0b6      	beq.n	8007982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a2c:	e051      	b.n	8007ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3c:	d123      	bne.n	8007a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	f043 0204 	orr.w	r2, r3, #4
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e046      	b.n	8007b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d021      	beq.n	8007ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8e:	f7fc fddd 	bl	800464c <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d302      	bcc.n	8007aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d116      	bne.n	8007ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e020      	b.n	8007b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d10c      	bne.n	8007af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	43da      	mvns	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e00b      	b.n	8007b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	43da      	mvns	r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4013      	ands	r3, r2
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d18d      	bne.n	8007a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b28:	e02d      	b.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f900 	bl	8007d30 <I2C_IsAcknowledgeFailed>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e02d      	b.n	8007b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b40:	d021      	beq.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b42:	f7fc fd83 	bl	800464c <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d302      	bcc.n	8007b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d116      	bne.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	f043 0220 	orr.w	r2, r3, #32
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e007      	b.n	8007b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b90:	2b80      	cmp	r3, #128	; 0x80
 8007b92:	d1ca      	bne.n	8007b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007baa:	e02d      	b.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f8bf 	bl	8007d30 <I2C_IsAcknowledgeFailed>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e02d      	b.n	8007c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d021      	beq.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc4:	f7fc fd42 	bl	800464c <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d302      	bcc.n	8007bda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d116      	bne.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	f043 0220 	orr.w	r2, r3, #32
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e007      	b.n	8007c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d1ca      	bne.n	8007bac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c2c:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	08db      	lsrs	r3, r3, #3
 8007c32:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	0a1a      	lsrs	r2, r3, #8
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d107      	bne.n	8007c5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f043 0220 	orr.w	r2, r3, #32
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e008      	b.n	8007c70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6c:	d0e9      	beq.n	8007c42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20000018 	.word	0x20000018
 8007c80:	14f8b589 	.word	0x14f8b589

08007c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c90:	e042      	b.n	8007d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d119      	bne.n	8007cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0210 	mvn.w	r2, #16
 8007ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e029      	b.n	8007d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd4:	f7fc fcba 	bl	800464c <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d302      	bcc.n	8007cea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d116      	bne.n	8007d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e007      	b.n	8007d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d1b5      	bne.n	8007c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d46:	d11b      	bne.n	8007d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	f043 0204 	orr.w	r2, r3, #4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007d9e:	d103      	bne.n	8007da8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007da6:	e007      	b.n	8007db8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007db0:	d102      	bne.n	8007db8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2208      	movs	r2, #8
 8007db6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e267      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d075      	beq.n	8007ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007de2:	4b88      	ldr	r3, [pc, #544]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 030c 	and.w	r3, r3, #12
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d00c      	beq.n	8007e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dee:	4b85      	ldr	r3, [pc, #532]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d112      	bne.n	8007e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dfa:	4b82      	ldr	r3, [pc, #520]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e06:	d10b      	bne.n	8007e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e08:	4b7e      	ldr	r3, [pc, #504]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d05b      	beq.n	8007ecc <HAL_RCC_OscConfig+0x108>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d157      	bne.n	8007ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e242      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e28:	d106      	bne.n	8007e38 <HAL_RCC_OscConfig+0x74>
 8007e2a:	4b76      	ldr	r3, [pc, #472]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a75      	ldr	r2, [pc, #468]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e01d      	b.n	8007e74 <HAL_RCC_OscConfig+0xb0>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e40:	d10c      	bne.n	8007e5c <HAL_RCC_OscConfig+0x98>
 8007e42:	4b70      	ldr	r3, [pc, #448]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6f      	ldr	r2, [pc, #444]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	4b6d      	ldr	r3, [pc, #436]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a6c      	ldr	r2, [pc, #432]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e00b      	b.n	8007e74 <HAL_RCC_OscConfig+0xb0>
 8007e5c:	4b69      	ldr	r3, [pc, #420]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a68      	ldr	r2, [pc, #416]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	4b66      	ldr	r3, [pc, #408]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a65      	ldr	r2, [pc, #404]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d013      	beq.n	8007ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e7c:	f7fc fbe6 	bl	800464c <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e84:	f7fc fbe2 	bl	800464c <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b64      	cmp	r3, #100	; 0x64
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e207      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e96:	4b5b      	ldr	r3, [pc, #364]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <HAL_RCC_OscConfig+0xc0>
 8007ea2:	e014      	b.n	8007ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea4:	f7fc fbd2 	bl	800464c <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eac:	f7fc fbce 	bl	800464c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b64      	cmp	r3, #100	; 0x64
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e1f3      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ebe:	4b51      	ldr	r3, [pc, #324]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0xe8>
 8007eca:	e000      	b.n	8007ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d063      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eda:	4b4a      	ldr	r3, [pc, #296]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 030c 	and.w	r3, r3, #12
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ee6:	4b47      	ldr	r3, [pc, #284]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d11c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ef2:	4b44      	ldr	r3, [pc, #272]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d116      	bne.n	8007f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007efe:	4b41      	ldr	r3, [pc, #260]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <HAL_RCC_OscConfig+0x152>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d001      	beq.n	8007f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e1c7      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f16:	4b3b      	ldr	r3, [pc, #236]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4937      	ldr	r1, [pc, #220]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f2a:	e03a      	b.n	8007fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d020      	beq.n	8007f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f34:	4b34      	ldr	r3, [pc, #208]	; (8008008 <HAL_RCC_OscConfig+0x244>)
 8007f36:	2201      	movs	r2, #1
 8007f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3a:	f7fc fb87 	bl	800464c <HAL_GetTick>
 8007f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f42:	f7fc fb83 	bl	800464c <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e1a8      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f54:	4b2b      	ldr	r3, [pc, #172]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0f0      	beq.n	8007f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4925      	ldr	r1, [pc, #148]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	600b      	str	r3, [r1, #0]
 8007f74:	e015      	b.n	8007fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f76:	4b24      	ldr	r3, [pc, #144]	; (8008008 <HAL_RCC_OscConfig+0x244>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fc fb66 	bl	800464c <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f84:	f7fc fb62 	bl	800464c <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e187      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f96:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d036      	beq.n	800801c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d016      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <HAL_RCC_OscConfig+0x248>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fbc:	f7fc fb46 	bl	800464c <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fc4:	f7fc fb42 	bl	800464c <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e167      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x200>
 8007fe2:	e01b      	b.n	800801c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <HAL_RCC_OscConfig+0x248>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fea:	f7fc fb2f 	bl	800464c <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ff0:	e00e      	b.n	8008010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ff2:	f7fc fb2b 	bl	800464c <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d907      	bls.n	8008010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e150      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
 8008004:	40023800 	.word	0x40023800
 8008008:	42470000 	.word	0x42470000
 800800c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008010:	4b88      	ldr	r3, [pc, #544]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1ea      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 8097 	beq.w	8008158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800802e:	4b81      	ldr	r3, [pc, #516]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10f      	bne.n	800805a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800803a:	2300      	movs	r3, #0
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	4b7d      	ldr	r3, [pc, #500]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	4a7c      	ldr	r2, [pc, #496]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008048:	6413      	str	r3, [r2, #64]	; 0x40
 800804a:	4b7a      	ldr	r3, [pc, #488]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800805a:	4b77      	ldr	r3, [pc, #476]	; (8008238 <HAL_RCC_OscConfig+0x474>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d118      	bne.n	8008098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008066:	4b74      	ldr	r3, [pc, #464]	; (8008238 <HAL_RCC_OscConfig+0x474>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a73      	ldr	r2, [pc, #460]	; (8008238 <HAL_RCC_OscConfig+0x474>)
 800806c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008072:	f7fc faeb 	bl	800464c <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800807a:	f7fc fae7 	bl	800464c <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e10c      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800808c:	4b6a      	ldr	r3, [pc, #424]	; (8008238 <HAL_RCC_OscConfig+0x474>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0f0      	beq.n	800807a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d106      	bne.n	80080ae <HAL_RCC_OscConfig+0x2ea>
 80080a0:	4b64      	ldr	r3, [pc, #400]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a4:	4a63      	ldr	r2, [pc, #396]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	6713      	str	r3, [r2, #112]	; 0x70
 80080ac:	e01c      	b.n	80080e8 <HAL_RCC_OscConfig+0x324>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d10c      	bne.n	80080d0 <HAL_RCC_OscConfig+0x30c>
 80080b6:	4b5f      	ldr	r3, [pc, #380]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	4a5e      	ldr	r2, [pc, #376]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080bc:	f043 0304 	orr.w	r3, r3, #4
 80080c0:	6713      	str	r3, [r2, #112]	; 0x70
 80080c2:	4b5c      	ldr	r3, [pc, #368]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	4a5b      	ldr	r2, [pc, #364]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	6713      	str	r3, [r2, #112]	; 0x70
 80080ce:	e00b      	b.n	80080e8 <HAL_RCC_OscConfig+0x324>
 80080d0:	4b58      	ldr	r3, [pc, #352]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	4a57      	ldr	r2, [pc, #348]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080d6:	f023 0301 	bic.w	r3, r3, #1
 80080da:	6713      	str	r3, [r2, #112]	; 0x70
 80080dc:	4b55      	ldr	r3, [pc, #340]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	4a54      	ldr	r2, [pc, #336]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80080e2:	f023 0304 	bic.w	r3, r3, #4
 80080e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d015      	beq.n	800811c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f0:	f7fc faac 	bl	800464c <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080f6:	e00a      	b.n	800810e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080f8:	f7fc faa8 	bl	800464c <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	f241 3288 	movw	r2, #5000	; 0x1388
 8008106:	4293      	cmp	r3, r2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e0cb      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800810e:	4b49      	ldr	r3, [pc, #292]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0ee      	beq.n	80080f8 <HAL_RCC_OscConfig+0x334>
 800811a:	e014      	b.n	8008146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811c:	f7fc fa96 	bl	800464c <HAL_GetTick>
 8008120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008122:	e00a      	b.n	800813a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008124:	f7fc fa92 	bl	800464c <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008132:	4293      	cmp	r3, r2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e0b5      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800813a:	4b3e      	ldr	r3, [pc, #248]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1ee      	bne.n	8008124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d105      	bne.n	8008158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800814c:	4b39      	ldr	r3, [pc, #228]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 800814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008150:	4a38      	ldr	r2, [pc, #224]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 80a1 	beq.w	80082a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008162:	4b34      	ldr	r3, [pc, #208]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 030c 	and.w	r3, r3, #12
 800816a:	2b08      	cmp	r3, #8
 800816c:	d05c      	beq.n	8008228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d141      	bne.n	80081fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008176:	4b31      	ldr	r3, [pc, #196]	; (800823c <HAL_RCC_OscConfig+0x478>)
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800817c:	f7fc fa66 	bl	800464c <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008182:	e008      	b.n	8008196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008184:	f7fc fa62 	bl	800464c <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e087      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008196:	4b27      	ldr	r3, [pc, #156]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f0      	bne.n	8008184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69da      	ldr	r2, [r3, #28]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	019b      	lsls	r3, r3, #6
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	085b      	lsrs	r3, r3, #1
 80081ba:	3b01      	subs	r3, #1
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	431a      	orrs	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	061b      	lsls	r3, r3, #24
 80081c6:	491b      	ldr	r1, [pc, #108]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081cc:	4b1b      	ldr	r3, [pc, #108]	; (800823c <HAL_RCC_OscConfig+0x478>)
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d2:	f7fc fa3b 	bl	800464c <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081d8:	e008      	b.n	80081ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081da:	f7fc fa37 	bl	800464c <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e05c      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ec:	4b11      	ldr	r3, [pc, #68]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0f0      	beq.n	80081da <HAL_RCC_OscConfig+0x416>
 80081f8:	e054      	b.n	80082a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081fa:	4b10      	ldr	r3, [pc, #64]	; (800823c <HAL_RCC_OscConfig+0x478>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008200:	f7fc fa24 	bl	800464c <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008206:	e008      	b.n	800821a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008208:	f7fc fa20 	bl	800464c <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d901      	bls.n	800821a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e045      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800821a:	4b06      	ldr	r3, [pc, #24]	; (8008234 <HAL_RCC_OscConfig+0x470>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1f0      	bne.n	8008208 <HAL_RCC_OscConfig+0x444>
 8008226:	e03d      	b.n	80082a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d107      	bne.n	8008240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e038      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
 8008234:	40023800 	.word	0x40023800
 8008238:	40007000 	.word	0x40007000
 800823c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008240:	4b1b      	ldr	r3, [pc, #108]	; (80082b0 <HAL_RCC_OscConfig+0x4ec>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d028      	beq.n	80082a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008258:	429a      	cmp	r2, r3
 800825a:	d121      	bne.n	80082a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008266:	429a      	cmp	r2, r3
 8008268:	d11a      	bne.n	80082a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008278:	4293      	cmp	r3, r2
 800827a:	d111      	bne.n	80082a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	3b01      	subs	r3, #1
 800828a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800828c:	429a      	cmp	r2, r3
 800828e:	d107      	bne.n	80082a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800829c:	429a      	cmp	r2, r3
 800829e:	d001      	beq.n	80082a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40023800 	.word	0x40023800

080082b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e0cc      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082c8:	4b68      	ldr	r3, [pc, #416]	; (800846c <HAL_RCC_ClockConfig+0x1b8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d90c      	bls.n	80082f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082d6:	4b65      	ldr	r3, [pc, #404]	; (800846c <HAL_RCC_ClockConfig+0x1b8>)
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b63      	ldr	r3, [pc, #396]	; (800846c <HAL_RCC_ClockConfig+0x1b8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e0b8      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d020      	beq.n	800833e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008308:	4b59      	ldr	r3, [pc, #356]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	4a58      	ldr	r2, [pc, #352]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008320:	4b53      	ldr	r3, [pc, #332]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	4a52      	ldr	r2, [pc, #328]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800832a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800832c:	4b50      	ldr	r3, [pc, #320]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	494d      	ldr	r1, [pc, #308]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 800833a:	4313      	orrs	r3, r2
 800833c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d044      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d107      	bne.n	8008362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008352:	4b47      	ldr	r3, [pc, #284]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d119      	bne.n	8008392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e07f      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d003      	beq.n	8008372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800836e:	2b03      	cmp	r3, #3
 8008370:	d107      	bne.n	8008382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008372:	4b3f      	ldr	r3, [pc, #252]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e06f      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008382:	4b3b      	ldr	r3, [pc, #236]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e067      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008392:	4b37      	ldr	r3, [pc, #220]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f023 0203 	bic.w	r2, r3, #3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	4934      	ldr	r1, [pc, #208]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083a4:	f7fc f952 	bl	800464c <HAL_GetTick>
 80083a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083aa:	e00a      	b.n	80083c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083ac:	f7fc f94e 	bl	800464c <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e04f      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083c2:	4b2b      	ldr	r3, [pc, #172]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 020c 	and.w	r2, r3, #12
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d1eb      	bne.n	80083ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083d4:	4b25      	ldr	r3, [pc, #148]	; (800846c <HAL_RCC_ClockConfig+0x1b8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d20c      	bcs.n	80083fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e2:	4b22      	ldr	r3, [pc, #136]	; (800846c <HAL_RCC_ClockConfig+0x1b8>)
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b20      	ldr	r3, [pc, #128]	; (800846c <HAL_RCC_ClockConfig+0x1b8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d001      	beq.n	80083fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e032      	b.n	8008462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	4916      	ldr	r1, [pc, #88]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	4313      	orrs	r3, r2
 8008418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0308 	and.w	r3, r3, #8
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008426:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	490e      	ldr	r1, [pc, #56]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008436:	4313      	orrs	r3, r2
 8008438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800843a:	f000 f821 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 800843e:	4602      	mov	r2, r0
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <HAL_RCC_ClockConfig+0x1bc>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	490a      	ldr	r1, [pc, #40]	; (8008474 <HAL_RCC_ClockConfig+0x1c0>)
 800844c:	5ccb      	ldrb	r3, [r1, r3]
 800844e:	fa22 f303 	lsr.w	r3, r2, r3
 8008452:	4a09      	ldr	r2, [pc, #36]	; (8008478 <HAL_RCC_ClockConfig+0x1c4>)
 8008454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <HAL_RCC_ClockConfig+0x1c8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7fc f8b2 	bl	80045c4 <HAL_InitTick>

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40023c00 	.word	0x40023c00
 8008470:	40023800 	.word	0x40023800
 8008474:	08015694 	.word	0x08015694
 8008478:	20000018 	.word	0x20000018
 800847c:	2000003c 	.word	0x2000003c

08008480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008484:	b094      	sub	sp, #80	; 0x50
 8008486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	647b      	str	r3, [r7, #68]	; 0x44
 800848c:	2300      	movs	r3, #0
 800848e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008490:	2300      	movs	r3, #0
 8008492:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008498:	4b79      	ldr	r3, [pc, #484]	; (8008680 <HAL_RCC_GetSysClockFreq+0x200>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 030c 	and.w	r3, r3, #12
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d00d      	beq.n	80084c0 <HAL_RCC_GetSysClockFreq+0x40>
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	f200 80e1 	bhi.w	800866c <HAL_RCC_GetSysClockFreq+0x1ec>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <HAL_RCC_GetSysClockFreq+0x34>
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d003      	beq.n	80084ba <HAL_RCC_GetSysClockFreq+0x3a>
 80084b2:	e0db      	b.n	800866c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084b4:	4b73      	ldr	r3, [pc, #460]	; (8008684 <HAL_RCC_GetSysClockFreq+0x204>)
 80084b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80084b8:	e0db      	b.n	8008672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084ba:	4b73      	ldr	r3, [pc, #460]	; (8008688 <HAL_RCC_GetSysClockFreq+0x208>)
 80084bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80084be:	e0d8      	b.n	8008672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084c0:	4b6f      	ldr	r3, [pc, #444]	; (8008680 <HAL_RCC_GetSysClockFreq+0x200>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084ca:	4b6d      	ldr	r3, [pc, #436]	; (8008680 <HAL_RCC_GetSysClockFreq+0x200>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d063      	beq.n	800859e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084d6:	4b6a      	ldr	r3, [pc, #424]	; (8008680 <HAL_RCC_GetSysClockFreq+0x200>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	099b      	lsrs	r3, r3, #6
 80084dc:	2200      	movs	r2, #0
 80084de:	63bb      	str	r3, [r7, #56]	; 0x38
 80084e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30
 80084ea:	2300      	movs	r3, #0
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80084f2:	4622      	mov	r2, r4
 80084f4:	462b      	mov	r3, r5
 80084f6:	f04f 0000 	mov.w	r0, #0
 80084fa:	f04f 0100 	mov.w	r1, #0
 80084fe:	0159      	lsls	r1, r3, #5
 8008500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008504:	0150      	lsls	r0, r2, #5
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4621      	mov	r1, r4
 800850c:	1a51      	subs	r1, r2, r1
 800850e:	6139      	str	r1, [r7, #16]
 8008510:	4629      	mov	r1, r5
 8008512:	eb63 0301 	sbc.w	r3, r3, r1
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008524:	4659      	mov	r1, fp
 8008526:	018b      	lsls	r3, r1, #6
 8008528:	4651      	mov	r1, sl
 800852a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800852e:	4651      	mov	r1, sl
 8008530:	018a      	lsls	r2, r1, #6
 8008532:	4651      	mov	r1, sl
 8008534:	ebb2 0801 	subs.w	r8, r2, r1
 8008538:	4659      	mov	r1, fp
 800853a:	eb63 0901 	sbc.w	r9, r3, r1
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	f04f 0300 	mov.w	r3, #0
 8008546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800854a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800854e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008552:	4690      	mov	r8, r2
 8008554:	4699      	mov	r9, r3
 8008556:	4623      	mov	r3, r4
 8008558:	eb18 0303 	adds.w	r3, r8, r3
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	462b      	mov	r3, r5
 8008560:	eb49 0303 	adc.w	r3, r9, r3
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008572:	4629      	mov	r1, r5
 8008574:	024b      	lsls	r3, r1, #9
 8008576:	4621      	mov	r1, r4
 8008578:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800857c:	4621      	mov	r1, r4
 800857e:	024a      	lsls	r2, r1, #9
 8008580:	4610      	mov	r0, r2
 8008582:	4619      	mov	r1, r3
 8008584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008586:	2200      	movs	r2, #0
 8008588:	62bb      	str	r3, [r7, #40]	; 0x28
 800858a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800858c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008590:	f7f8 fb82 	bl	8000c98 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4613      	mov	r3, r2
 800859a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859c:	e058      	b.n	8008650 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800859e:	4b38      	ldr	r3, [pc, #224]	; (8008680 <HAL_RCC_GetSysClockFreq+0x200>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	099b      	lsrs	r3, r3, #6
 80085a4:	2200      	movs	r2, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	4611      	mov	r1, r2
 80085aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085ae:	623b      	str	r3, [r7, #32]
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
 80085b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80085b8:	4642      	mov	r2, r8
 80085ba:	464b      	mov	r3, r9
 80085bc:	f04f 0000 	mov.w	r0, #0
 80085c0:	f04f 0100 	mov.w	r1, #0
 80085c4:	0159      	lsls	r1, r3, #5
 80085c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085ca:	0150      	lsls	r0, r2, #5
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4641      	mov	r1, r8
 80085d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80085d6:	4649      	mov	r1, r9
 80085d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80085e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80085ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80085f0:	ebb2 040a 	subs.w	r4, r2, sl
 80085f4:	eb63 050b 	sbc.w	r5, r3, fp
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	00eb      	lsls	r3, r5, #3
 8008602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008606:	00e2      	lsls	r2, r4, #3
 8008608:	4614      	mov	r4, r2
 800860a:	461d      	mov	r5, r3
 800860c:	4643      	mov	r3, r8
 800860e:	18e3      	adds	r3, r4, r3
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	464b      	mov	r3, r9
 8008614:	eb45 0303 	adc.w	r3, r5, r3
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008626:	4629      	mov	r1, r5
 8008628:	028b      	lsls	r3, r1, #10
 800862a:	4621      	mov	r1, r4
 800862c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008630:	4621      	mov	r1, r4
 8008632:	028a      	lsls	r2, r1, #10
 8008634:	4610      	mov	r0, r2
 8008636:	4619      	mov	r1, r3
 8008638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800863a:	2200      	movs	r2, #0
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	61fa      	str	r2, [r7, #28]
 8008640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008644:	f7f8 fb28 	bl	8000c98 <__aeabi_uldivmod>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4613      	mov	r3, r2
 800864e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <HAL_RCC_GetSysClockFreq+0x200>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	3301      	adds	r3, #1
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800866a:	e002      	b.n	8008672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <HAL_RCC_GetSysClockFreq+0x204>)
 800866e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008674:	4618      	mov	r0, r3
 8008676:	3750      	adds	r7, #80	; 0x50
 8008678:	46bd      	mov	sp, r7
 800867a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800867e:	bf00      	nop
 8008680:	40023800 	.word	0x40023800
 8008684:	00f42400 	.word	0x00f42400
 8008688:	007a1200 	.word	0x007a1200

0800868c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008692:	681b      	ldr	r3, [r3, #0]
}
 8008694:	4618      	mov	r0, r3
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20000018 	.word	0x20000018

080086a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086a8:	f7ff fff0 	bl	800868c <HAL_RCC_GetHCLKFreq>
 80086ac:	4602      	mov	r2, r0
 80086ae:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	0a9b      	lsrs	r3, r3, #10
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	4903      	ldr	r1, [pc, #12]	; (80086c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086ba:	5ccb      	ldrb	r3, [r1, r3]
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40023800 	.word	0x40023800
 80086c8:	080156a4 	.word	0x080156a4

080086cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086d0:	f7ff ffdc 	bl	800868c <HAL_RCC_GetHCLKFreq>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	0b5b      	lsrs	r3, r3, #13
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	4903      	ldr	r1, [pc, #12]	; (80086f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086e2:	5ccb      	ldrb	r3, [r1, r3]
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40023800 	.word	0x40023800
 80086f0:	080156a4 	.word	0x080156a4

080086f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e07b      	b.n	80087fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	2b00      	cmp	r3, #0
 800870c:	d108      	bne.n	8008720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008716:	d009      	beq.n	800872c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	61da      	str	r2, [r3, #28]
 800871e:	e005      	b.n	800872c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7fa fd14 	bl	8003174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	431a      	orrs	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b0:	ea42 0103 	orr.w	r1, r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	430a      	orrs	r2, r1
 80087c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	0c1b      	lsrs	r3, r3, #16
 80087ca:	f003 0104 	and.w	r1, r3, #4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	f003 0210 	and.w	r2, r3, #16
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69da      	ldr	r2, [r3, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b08c      	sub	sp, #48	; 0x30
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008814:	2301      	movs	r3, #1
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_SPI_TransmitReceive+0x26>
 8008828:	2302      	movs	r3, #2
 800882a:	e18a      	b.n	8008b42 <HAL_SPI_TransmitReceive+0x33c>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008834:	f7fb ff0a 	bl	800464c <HAL_GetTick>
 8008838:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800884a:	887b      	ldrh	r3, [r7, #2]
 800884c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800884e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008852:	2b01      	cmp	r3, #1
 8008854:	d00f      	beq.n	8008876 <HAL_SPI_TransmitReceive+0x70>
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800885c:	d107      	bne.n	800886e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <HAL_SPI_TransmitReceive+0x68>
 8008866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800886a:	2b04      	cmp	r3, #4
 800886c:	d003      	beq.n	8008876 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800886e:	2302      	movs	r3, #2
 8008870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008874:	e15b      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <HAL_SPI_TransmitReceive+0x82>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <HAL_SPI_TransmitReceive+0x82>
 8008882:	887b      	ldrh	r3, [r7, #2]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800888e:	e14e      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b04      	cmp	r3, #4
 800889a:	d003      	beq.n	80088a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2205      	movs	r2, #5
 80088a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	887a      	ldrh	r2, [r7, #2]
 80088b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	887a      	ldrh	r2, [r7, #2]
 80088ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	887a      	ldrh	r2, [r7, #2]
 80088c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	887a      	ldrh	r2, [r7, #2]
 80088cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	d007      	beq.n	80088f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008900:	d178      	bne.n	80089f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <HAL_SPI_TransmitReceive+0x10a>
 800890a:	8b7b      	ldrh	r3, [r7, #26]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d166      	bne.n	80089de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	881a      	ldrh	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008920:	1c9a      	adds	r2, r3, #2
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008934:	e053      	b.n	80089de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b02      	cmp	r3, #2
 8008942:	d11b      	bne.n	800897c <HAL_SPI_TransmitReceive+0x176>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d016      	beq.n	800897c <HAL_SPI_TransmitReceive+0x176>
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	2b01      	cmp	r3, #1
 8008952:	d113      	bne.n	800897c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	881a      	ldrh	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	1c9a      	adds	r2, r3, #2
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b01      	cmp	r3, #1
 8008988:	d119      	bne.n	80089be <HAL_SPI_TransmitReceive+0x1b8>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d014      	beq.n	80089be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	b292      	uxth	r2, r2
 80089a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089ba:	2301      	movs	r3, #1
 80089bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089be:	f7fb fe45 	bl	800464c <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d807      	bhi.n	80089de <HAL_SPI_TransmitReceive+0x1d8>
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d003      	beq.n	80089de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089dc:	e0a7      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1a6      	bne.n	8008936 <HAL_SPI_TransmitReceive+0x130>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1a1      	bne.n	8008936 <HAL_SPI_TransmitReceive+0x130>
 80089f2:	e07c      	b.n	8008aee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <HAL_SPI_TransmitReceive+0x1fc>
 80089fc:	8b7b      	ldrh	r3, [r7, #26]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d16b      	bne.n	8008ada <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	7812      	ldrb	r2, [r2, #0]
 8008a0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a28:	e057      	b.n	8008ada <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d11c      	bne.n	8008a72 <HAL_SPI_TransmitReceive+0x26c>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d017      	beq.n	8008a72 <HAL_SPI_TransmitReceive+0x26c>
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d114      	bne.n	8008a72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	7812      	ldrb	r2, [r2, #0]
 8008a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d119      	bne.n	8008ab4 <HAL_SPI_TransmitReceive+0x2ae>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d014      	beq.n	8008ab4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ab4:	f7fb fdca 	bl	800464c <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d803      	bhi.n	8008acc <HAL_SPI_TransmitReceive+0x2c6>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x2cc>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ad8:	e029      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1a2      	bne.n	8008a2a <HAL_SPI_TransmitReceive+0x224>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d19d      	bne.n	8008a2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f8b2 	bl	8008c5c <SPI_EndRxTxTransaction>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d006      	beq.n	8008b0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2220      	movs	r2, #32
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b0a:	e010      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	e000      	b.n	8008b2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3730      	adds	r7, #48	; 0x30
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b5c:	f7fb fd76 	bl	800464c <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	4413      	add	r3, r2
 8008b6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b6c:	f7fb fd6e 	bl	800464c <HAL_GetTick>
 8008b70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b72:	4b39      	ldr	r3, [pc, #228]	; (8008c58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	015b      	lsls	r3, r3, #5
 8008b78:	0d1b      	lsrs	r3, r3, #20
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	fb02 f303 	mul.w	r3, r2, r3
 8008b80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b82:	e054      	b.n	8008c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8a:	d050      	beq.n	8008c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b8c:	f7fb fd5e 	bl	800464c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d902      	bls.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d13d      	bne.n	8008c1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bba:	d111      	bne.n	8008be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc4:	d004      	beq.n	8008bd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bce:	d107      	bne.n	8008be0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be8:	d10f      	bne.n	8008c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e017      	b.n	8008c4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4013      	ands	r3, r2
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	bf0c      	ite	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	2300      	movne	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d19b      	bne.n	8008b84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3720      	adds	r7, #32
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000018 	.word	0x20000018

08008c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c68:	4b1b      	ldr	r3, [pc, #108]	; (8008cd8 <SPI_EndRxTxTransaction+0x7c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1b      	ldr	r2, [pc, #108]	; (8008cdc <SPI_EndRxTxTransaction+0x80>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	0d5b      	lsrs	r3, r3, #21
 8008c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c78:	fb02 f303 	mul.w	r3, r2, r3
 8008c7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c86:	d112      	bne.n	8008cae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2180      	movs	r1, #128	; 0x80
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff ff5a 	bl	8008b4c <SPI_WaitFlagStateUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d016      	beq.n	8008ccc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca2:	f043 0220 	orr.w	r2, r3, #32
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e00f      	b.n	8008cce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc4:	2b80      	cmp	r3, #128	; 0x80
 8008cc6:	d0f2      	beq.n	8008cae <SPI_EndRxTxTransaction+0x52>
 8008cc8:	e000      	b.n	8008ccc <SPI_EndRxTxTransaction+0x70>
        break;
 8008cca:	bf00      	nop
  }

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000018 	.word	0x20000018
 8008cdc:	165e9f81 	.word	0x165e9f81

08008ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e041      	b.n	8008d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fa fac4 	bl	8003294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f000 fb24 	bl	800936c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d001      	beq.n	8008d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e044      	b.n	8008e22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a1e      	ldr	r2, [pc, #120]	; (8008e30 <HAL_TIM_Base_Start_IT+0xb0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d018      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc2:	d013      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <HAL_TIM_Base_Start_IT+0xb4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00e      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <HAL_TIM_Base_Start_IT+0xb8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d009      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a17      	ldr	r2, [pc, #92]	; (8008e3c <HAL_TIM_Base_Start_IT+0xbc>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x6c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <HAL_TIM_Base_Start_IT+0xc0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d111      	bne.n	8008e10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b06      	cmp	r3, #6
 8008dfc:	d010      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0e:	e007      	b.n	8008e20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0201 	orr.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800
 8008e3c:	40000c00 	.word	0x40000c00
 8008e40:	40014000 	.word	0x40014000

08008e44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0201 	bic.w	r2, r2, #1
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a1a      	ldr	r2, [r3, #32]
 8008e62:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e66:	4013      	ands	r3, r2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10f      	bne.n	8008e8c <HAL_TIM_Base_Stop_IT+0x48>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6a1a      	ldr	r2, [r3, #32]
 8008e72:	f240 4344 	movw	r3, #1092	; 0x444
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_Base_Stop_IT+0x48>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e097      	b.n	8008fe6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7fa f99a 	bl	8003204 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f000 fa38 	bl	800936c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f24:	f023 0303 	bic.w	r3, r3, #3
 8008f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	4313      	orrs	r3, r2
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f42:	f023 030c 	bic.w	r3, r3, #12
 8008f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68da      	ldr	r2, [r3, #12]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	021b      	lsls	r3, r3, #8
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	011a      	lsls	r2, r3, #4
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	031b      	lsls	r3, r3, #12
 8008f72:	4313      	orrs	r3, r2
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008f80:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008f88:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	011b      	lsls	r3, r3, #4
 8008f94:	4313      	orrs	r3, r2
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ffe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009006:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800900e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009016:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d110      	bne.n	8009040 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d102      	bne.n	800902a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009024:	7b7b      	ldrb	r3, [r7, #13]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d001      	beq.n	800902e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e069      	b.n	8009102 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2202      	movs	r2, #2
 800903a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800903e:	e031      	b.n	80090a4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b04      	cmp	r3, #4
 8009044:	d110      	bne.n	8009068 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d102      	bne.n	8009052 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800904c:	7b3b      	ldrb	r3, [r7, #12]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d001      	beq.n	8009056 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e055      	b.n	8009102 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2202      	movs	r2, #2
 8009062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009066:	e01d      	b.n	80090a4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d108      	bne.n	8009080 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d105      	bne.n	8009080 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009074:	7b7b      	ldrb	r3, [r7, #13]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d102      	bne.n	8009080 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800907a:	7b3b      	ldrb	r3, [r7, #12]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e03e      	b.n	8009102 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_TIM_Encoder_Start+0xc4>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d008      	beq.n	80090c2 <HAL_TIM_Encoder_Start+0xd4>
 80090b0:	e00f      	b.n	80090d2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2201      	movs	r2, #1
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f9d6 	bl	800946c <TIM_CCxChannelCmd>
      break;
 80090c0:	e016      	b.n	80090f0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2201      	movs	r2, #1
 80090c8:	2104      	movs	r1, #4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f9ce 	bl	800946c <TIM_CCxChannelCmd>
      break;
 80090d0:	e00e      	b.n	80090f0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2201      	movs	r2, #1
 80090d8:	2100      	movs	r1, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f9c6 	bl	800946c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2201      	movs	r2, #1
 80090e6:	2104      	movs	r1, #4
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f9bf 	bl	800946c <TIM_CCxChannelCmd>
      break;
 80090ee:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0201 	orr.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b02      	cmp	r3, #2
 800911e:	d122      	bne.n	8009166 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d11b      	bne.n	8009166 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0202 	mvn.w	r2, #2
 8009136:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f8ee 	bl	800932e <HAL_TIM_IC_CaptureCallback>
 8009152:	e005      	b.n	8009160 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f8e0 	bl	800931a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8f1 	bl	8009342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b04      	cmp	r3, #4
 8009172:	d122      	bne.n	80091ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b04      	cmp	r3, #4
 8009180:	d11b      	bne.n	80091ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f06f 0204 	mvn.w	r2, #4
 800918a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8c4 	bl	800932e <HAL_TIM_IC_CaptureCallback>
 80091a6:	e005      	b.n	80091b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f8b6 	bl	800931a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8c7 	bl	8009342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f003 0308 	and.w	r3, r3, #8
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	d122      	bne.n	800920e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d11b      	bne.n	800920e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f06f 0208 	mvn.w	r2, #8
 80091de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2204      	movs	r2, #4
 80091e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f003 0303 	and.w	r3, r3, #3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f89a 	bl	800932e <HAL_TIM_IC_CaptureCallback>
 80091fa:	e005      	b.n	8009208 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f88c 	bl	800931a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f89d 	bl	8009342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b10      	cmp	r3, #16
 800921a:	d122      	bne.n	8009262 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b10      	cmp	r3, #16
 8009228:	d11b      	bne.n	8009262 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f06f 0210 	mvn.w	r2, #16
 8009232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2208      	movs	r2, #8
 8009238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f870 	bl	800932e <HAL_TIM_IC_CaptureCallback>
 800924e:	e005      	b.n	800925c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f862 	bl	800931a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f873 	bl	8009342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b01      	cmp	r3, #1
 800926e:	d10e      	bne.n	800928e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b01      	cmp	r3, #1
 800927c:	d107      	bne.n	800928e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f06f 0201 	mvn.w	r2, #1
 8009286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7f9 fecb 	bl	8003024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009298:	2b80      	cmp	r3, #128	; 0x80
 800929a:	d10e      	bne.n	80092ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d107      	bne.n	80092ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f977 	bl	80095a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	d10e      	bne.n	80092e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d2:	2b40      	cmp	r3, #64	; 0x40
 80092d4:	d107      	bne.n	80092e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f838 	bl	8009356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	f003 0320 	and.w	r3, r3, #32
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d10e      	bne.n	8009312 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b20      	cmp	r3, #32
 8009300:	d107      	bne.n	8009312 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f06f 0220 	mvn.w	r2, #32
 800930a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f941 	bl	8009594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a34      	ldr	r2, [pc, #208]	; (8009450 <TIM_Base_SetConfig+0xe4>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00f      	beq.n	80093a4 <TIM_Base_SetConfig+0x38>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938a:	d00b      	beq.n	80093a4 <TIM_Base_SetConfig+0x38>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a31      	ldr	r2, [pc, #196]	; (8009454 <TIM_Base_SetConfig+0xe8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d007      	beq.n	80093a4 <TIM_Base_SetConfig+0x38>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a30      	ldr	r2, [pc, #192]	; (8009458 <TIM_Base_SetConfig+0xec>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d003      	beq.n	80093a4 <TIM_Base_SetConfig+0x38>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a2f      	ldr	r2, [pc, #188]	; (800945c <TIM_Base_SetConfig+0xf0>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d108      	bne.n	80093b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a25      	ldr	r2, [pc, #148]	; (8009450 <TIM_Base_SetConfig+0xe4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01b      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c4:	d017      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a22      	ldr	r2, [pc, #136]	; (8009454 <TIM_Base_SetConfig+0xe8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a21      	ldr	r2, [pc, #132]	; (8009458 <TIM_Base_SetConfig+0xec>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00f      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a20      	ldr	r2, [pc, #128]	; (800945c <TIM_Base_SetConfig+0xf0>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00b      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a1f      	ldr	r2, [pc, #124]	; (8009460 <TIM_Base_SetConfig+0xf4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d007      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <TIM_Base_SetConfig+0xf8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d003      	beq.n	80093f6 <TIM_Base_SetConfig+0x8a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a1d      	ldr	r2, [pc, #116]	; (8009468 <TIM_Base_SetConfig+0xfc>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d108      	bne.n	8009408 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4313      	orrs	r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a08      	ldr	r2, [pc, #32]	; (8009450 <TIM_Base_SetConfig+0xe4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d103      	bne.n	800943c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	615a      	str	r2, [r3, #20]
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40010000 	.word	0x40010000
 8009454:	40000400 	.word	0x40000400
 8009458:	40000800 	.word	0x40000800
 800945c:	40000c00 	.word	0x40000c00
 8009460:	40014000 	.word	0x40014000
 8009464:	40014400 	.word	0x40014400
 8009468:	40014800 	.word	0x40014800

0800946c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f003 031f 	and.w	r3, r3, #31
 800947e:	2201      	movs	r2, #1
 8009480:	fa02 f303 	lsl.w	r3, r2, r3
 8009484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a1a      	ldr	r2, [r3, #32]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	43db      	mvns	r3, r3
 800948e:	401a      	ands	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a1a      	ldr	r2, [r3, #32]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 031f 	and.w	r3, r3, #31
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	fa01 f303 	lsl.w	r3, r1, r3
 80094a4:	431a      	orrs	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	621a      	str	r2, [r3, #32]
}
 80094aa:	bf00      	nop
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
	...

080094b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e050      	b.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a1c      	ldr	r2, [pc, #112]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d018      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951c:	d013      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a18      	ldr	r2, [pc, #96]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00e      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a16      	ldr	r2, [pc, #88]	; (8009588 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d009      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a15      	ldr	r2, [pc, #84]	; (800958c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d004      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a13      	ldr	r2, [pc, #76]	; (8009590 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d10c      	bne.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800954c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	4313      	orrs	r3, r2
 8009556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40010000 	.word	0x40010000
 8009584:	40000400 	.word	0x40000400
 8009588:	40000800 	.word	0x40000800
 800958c:	40000c00 	.word	0x40000c00
 8009590:	40014000 	.word	0x40014000

08009594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e03f      	b.n	800964e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7f9 fe7e 	bl	80032e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2224      	movs	r2, #36	; 0x24
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 f80b 	bl	800a61c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695a      	ldr	r2, [r3, #20]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b08a      	sub	sp, #40	; 0x28
 800965a:	af02      	add	r7, sp, #8
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b20      	cmp	r3, #32
 8009674:	d17c      	bne.n	8009770 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <HAL_UART_Transmit+0x2c>
 800967c:	88fb      	ldrh	r3, [r7, #6]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e075      	b.n	8009772 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_UART_Transmit+0x3e>
 8009690:	2302      	movs	r3, #2
 8009692:	e06e      	b.n	8009772 <HAL_UART_Transmit+0x11c>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2221      	movs	r2, #33	; 0x21
 80096a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096aa:	f7fa ffcf 	bl	800464c <HAL_GetTick>
 80096ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	88fa      	ldrh	r2, [r7, #6]
 80096b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	88fa      	ldrh	r2, [r7, #6]
 80096ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c4:	d108      	bne.n	80096d8 <HAL_UART_Transmit+0x82>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d104      	bne.n	80096d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e003      	b.n	80096e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096dc:	2300      	movs	r3, #0
 80096de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80096e8:	e02a      	b.n	8009740 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2200      	movs	r2, #0
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 fcc3 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e036      	b.n	8009772 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	3302      	adds	r3, #2
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	e007      	b.n	8009732 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	781a      	ldrb	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	3301      	adds	r3, #1
 8009730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009736:	b29b      	uxth	r3, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	b29a      	uxth	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009744:	b29b      	uxth	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1cf      	bne.n	80096ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2200      	movs	r2, #0
 8009752:	2140      	movs	r1, #64	; 0x40
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 fc93 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e006      	b.n	8009772 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	e000      	b.n	8009772 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009770:	2302      	movs	r3, #2
  }
}
 8009772:	4618      	mov	r0, r3
 8009774:	3720      	adds	r7, #32
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b08a      	sub	sp, #40	; 0x28
 800977e:	af02      	add	r7, sp, #8
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4613      	mov	r3, r2
 8009788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b20      	cmp	r3, #32
 8009798:	f040 808c 	bne.w	80098b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <HAL_UART_Receive+0x2e>
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e084      	b.n	80098b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <HAL_UART_Receive+0x40>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e07d      	b.n	80098b6 <HAL_UART_Receive+0x13c>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2222      	movs	r2, #34	; 0x22
 80097cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097d6:	f7fa ff39 	bl	800464c <HAL_GetTick>
 80097da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	88fa      	ldrh	r2, [r7, #6]
 80097e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f0:	d108      	bne.n	8009804 <HAL_UART_Receive+0x8a>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	e003      	b.n	800980c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009808:	2300      	movs	r3, #0
 800980a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009814:	e043      	b.n	800989e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2200      	movs	r2, #0
 800981e:	2120      	movs	r1, #32
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 fc2d 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e042      	b.n	80098b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10c      	bne.n	8009850 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	b29b      	uxth	r3, r3
 800983e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009842:	b29a      	uxth	r2, r3
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	3302      	adds	r3, #2
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e01f      	b.n	8009890 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009858:	d007      	beq.n	800986a <HAL_UART_Receive+0xf0>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <HAL_UART_Receive+0xfe>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	b2da      	uxtb	r2, r3
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	701a      	strb	r2, [r3, #0]
 8009876:	e008      	b.n	800988a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009884:	b2da      	uxtb	r2, r3
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	3301      	adds	r3, #1
 800988e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1b6      	bne.n	8009816 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e000      	b.n	80098b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80098b4:	2302      	movs	r3, #2
  }
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	4613      	mov	r3, r2
 80098ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d11d      	bne.n	8009914 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <HAL_UART_Receive_DMA+0x26>
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e016      	b.n	8009916 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_UART_Receive_DMA+0x38>
 80098f2:	2302      	movs	r3, #2
 80098f4:	e00f      	b.n	8009916 <HAL_UART_Receive_DMA+0x58>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	461a      	mov	r2, r3
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 fc26 	bl	800a15c <UART_Start_Receive_DMA>
 8009910:	4603      	mov	r3, r0
 8009912:	e000      	b.n	8009916 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b0ba      	sub	sp, #232	; 0xe8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009946:	2300      	movs	r3, #0
 8009948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800994c:	2300      	movs	r3, #0
 800994e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009956:	f003 030f 	and.w	r3, r3, #15
 800995a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800995e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10f      	bne.n	8009986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <HAL_UART_IRQHandler+0x66>
 8009972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fd91 	bl	800a4a6 <UART_Receive_IT>
      return;
 8009984:	e256      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 80de 	beq.w	8009b4c <HAL_UART_IRQHandler+0x22c>
 8009990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80d1 	beq.w	8009b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <HAL_UART_IRQHandler+0xae>
 80099b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	f043 0201 	orr.w	r2, r3, #1
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00b      	beq.n	80099f2 <HAL_UART_IRQHandler+0xd2>
 80099da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	f043 0202 	orr.w	r2, r3, #2
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <HAL_UART_IRQHandler+0xf6>
 80099fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	f043 0204 	orr.w	r2, r3, #4
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d011      	beq.n	8009a46 <HAL_UART_IRQHandler+0x126>
 8009a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	f043 0208 	orr.w	r2, r3, #8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 81ed 	beq.w	8009e2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_IRQHandler+0x14e>
 8009a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fd1c 	bl	800a4a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b40      	cmp	r3, #64	; 0x40
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2301      	moveq	r3, #1
 8009a7e:	2300      	movne	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <HAL_UART_IRQHandler+0x17a>
 8009a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04f      	beq.n	8009b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fc24 	bl	800a2e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aaa:	2b40      	cmp	r3, #64	; 0x40
 8009aac:	d141      	bne.n	8009b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3314      	adds	r3, #20
 8009ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3314      	adds	r3, #20
 8009ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1d9      	bne.n	8009aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d013      	beq.n	8009b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	4a7d      	ldr	r2, [pc, #500]	; (8009cfc <HAL_UART_IRQHandler+0x3dc>)
 8009b08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fb f854 	bl	8004bbc <HAL_DMA_Abort_IT>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d016      	beq.n	8009b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b28:	e00e      	b.n	8009b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f99a 	bl	8009e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b30:	e00a      	b.n	8009b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f996 	bl	8009e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b38:	e006      	b.n	8009b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f992 	bl	8009e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b46:	e170      	b.n	8009e2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b48:	bf00      	nop
    return;
 8009b4a:	e16e      	b.n	8009e2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f040 814a 	bne.w	8009dea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 8143 	beq.w	8009dea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 813c 	beq.w	8009dea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60bb      	str	r3, [r7, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b92:	2b40      	cmp	r3, #64	; 0x40
 8009b94:	f040 80b4 	bne.w	8009d00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 8140 	beq.w	8009e2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	f080 8139 	bcs.w	8009e2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bce:	f000 8088 	beq.w	8009ce2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d9      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3314      	adds	r3, #20
 8009c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c30:	f023 0301 	bic.w	r3, r3, #1
 8009c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3314      	adds	r3, #20
 8009c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e1      	bne.n	8009c1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3314      	adds	r3, #20
 8009c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e3      	bne.n	8009c5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009caa:	e853 3f00 	ldrex	r3, [r3]
 8009cae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb2:	f023 0310 	bic.w	r3, r3, #16
 8009cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	330c      	adds	r3, #12
 8009cc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e3      	bne.n	8009ca0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fa fefd 	bl	8004adc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f8c0 	bl	8009e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cf8:	e099      	b.n	8009e2e <HAL_UART_IRQHandler+0x50e>
 8009cfa:	bf00      	nop
 8009cfc:	0800a3af 	.word	0x0800a3af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 808b 	beq.w	8009e32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 8086 	beq.w	8009e32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	330c      	adds	r3, #12
 8009d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	330c      	adds	r3, #12
 8009d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d4a:	647a      	str	r2, [r7, #68]	; 0x44
 8009d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d52:	e841 2300 	strex	r3, r2, [r1]
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e3      	bne.n	8009d26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3314      	adds	r3, #20
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	e853 3f00 	ldrex	r3, [r3]
 8009d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	f023 0301 	bic.w	r3, r3, #1
 8009d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3314      	adds	r3, #20
 8009d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d82:	633a      	str	r2, [r7, #48]	; 0x30
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1e3      	bne.n	8009d5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	330c      	adds	r3, #12
 8009daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0310 	bic.w	r3, r3, #16
 8009dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	330c      	adds	r3, #12
 8009dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009dc8:	61fa      	str	r2, [r7, #28]
 8009dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	69b9      	ldr	r1, [r7, #24]
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e3      	bne.n	8009da4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f848 	bl	8009e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009de8:	e023      	b.n	8009e32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d009      	beq.n	8009e0a <HAL_UART_IRQHandler+0x4ea>
 8009df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fae7 	bl	800a3d6 <UART_Transmit_IT>
    return;
 8009e08:	e014      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00e      	beq.n	8009e34 <HAL_UART_IRQHandler+0x514>
 8009e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d008      	beq.n	8009e34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fb27 	bl	800a476 <UART_EndTransmit_IT>
    return;
 8009e28:	e004      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
    return;
 8009e2a:	bf00      	nop
 8009e2c:	e002      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
      return;
 8009e2e:	bf00      	nop
 8009e30:	e000      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
      return;
 8009e32:	bf00      	nop
  }
}
 8009e34:	37e8      	adds	r7, #232	; 0xe8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop

08009e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b09c      	sub	sp, #112	; 0x70
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d172      	bne.n	8009f92 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eae:	2200      	movs	r2, #0
 8009eb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	330c      	adds	r3, #12
 8009eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	330c      	adds	r3, #12
 8009ed0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ed2:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ed4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e5      	bne.n	8009eb2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3314      	adds	r3, #20
 8009eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	667b      	str	r3, [r7, #100]	; 0x64
 8009efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3314      	adds	r3, #20
 8009f04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f06:	647a      	str	r2, [r7, #68]	; 0x44
 8009f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e5      	bne.n	8009ee6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3314      	adds	r3, #20
 8009f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	623b      	str	r3, [r7, #32]
   return(result);
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f30:	663b      	str	r3, [r7, #96]	; 0x60
 8009f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	3314      	adds	r3, #20
 8009f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e5      	bne.n	8009f1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f50:	2220      	movs	r2, #32
 8009f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d119      	bne.n	8009f92 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	330c      	adds	r3, #12
 8009f64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f023 0310 	bic.w	r3, r3, #16
 8009f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	330c      	adds	r3, #12
 8009f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f7e:	61fa      	str	r2, [r7, #28]
 8009f80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	69b9      	ldr	r1, [r7, #24]
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e5      	bne.n	8009f5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d106      	bne.n	8009fa8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009fa2:	f7ff ff69 	bl	8009e78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fa6:	e002      	b.n	8009fae <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009fa8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009faa:	f7f9 f853 	bl	8003054 <HAL_UART_RxCpltCallback>
}
 8009fae:	bf00      	nop
 8009fb0:	3770      	adds	r7, #112	; 0x70
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d108      	bne.n	8009fde <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fd0:	085b      	lsrs	r3, r3, #1
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff ff4e 	bl	8009e78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fdc:	e002      	b.n	8009fe4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff ff36 	bl	8009e50 <HAL_UART_RxHalfCpltCallback>
}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a008:	2b80      	cmp	r3, #128	; 0x80
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b21      	cmp	r3, #33	; 0x21
 800a01e:	d108      	bne.n	800a032 <UART_DMAError+0x46>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d005      	beq.n	800a032 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2200      	movs	r2, #0
 800a02a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f000 f933 	bl	800a298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03c:	2b40      	cmp	r3, #64	; 0x40
 800a03e:	bf0c      	ite	eq
 800a040:	2301      	moveq	r3, #1
 800a042:	2300      	movne	r3, #0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b22      	cmp	r3, #34	; 0x22
 800a052:	d108      	bne.n	800a066 <UART_DMAError+0x7a>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a060:	68b8      	ldr	r0, [r7, #8]
 800a062:	f000 f941 	bl	800a2e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	f043 0210 	orr.w	r2, r3, #16
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f7ff fef6 	bl	8009e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b090      	sub	sp, #64	; 0x40
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a090:	e050      	b.n	800a134 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d04c      	beq.n	800a134 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d007      	beq.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0a0:	f7fa fad4 	bl	800464c <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d241      	bcs.n	800a134 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	330c      	adds	r3, #12
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0d0:	637a      	str	r2, [r7, #52]	; 0x34
 800a0d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e5      	bne.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3314      	adds	r3, #20
 800a0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f023 0301 	bic.w	r3, r3, #1
 800a0fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3314      	adds	r3, #20
 800a102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a104:	623a      	str	r2, [r7, #32]
 800a106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	69f9      	ldr	r1, [r7, #28]
 800a10a:	6a3a      	ldr	r2, [r7, #32]
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	61bb      	str	r3, [r7, #24]
   return(result);
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e5      	bne.n	800a0e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2220      	movs	r2, #32
 800a124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e00f      	b.n	800a154 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4013      	ands	r3, r2
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	429a      	cmp	r2, r3
 800a142:	bf0c      	ite	eq
 800a144:	2301      	moveq	r3, #1
 800a146:	2300      	movne	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	79fb      	ldrb	r3, [r7, #7]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d09f      	beq.n	800a092 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3740      	adds	r7, #64	; 0x40
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b098      	sub	sp, #96	; 0x60
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2222      	movs	r2, #34	; 0x22
 800a180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a188:	4a40      	ldr	r2, [pc, #256]	; (800a28c <UART_Start_Receive_DMA+0x130>)
 800a18a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a190:	4a3f      	ldr	r2, [pc, #252]	; (800a290 <UART_Start_Receive_DMA+0x134>)
 800a192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a198:	4a3e      	ldr	r2, [pc, #248]	; (800a294 <UART_Start_Receive_DMA+0x138>)
 800a19a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a1a4:	f107 0308 	add.w	r3, r7, #8
 800a1a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	f7fa fc36 	bl	8004a2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	613b      	str	r3, [r7, #16]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d019      	beq.n	800a21a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	330c      	adds	r3, #12
 800a1ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	330c      	adds	r3, #12
 800a204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a206:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a208:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a20c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e5      	bne.n	800a1e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3314      	adds	r3, #20
 800a220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	657b      	str	r3, [r7, #84]	; 0x54
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3314      	adds	r3, #20
 800a238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a23a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e5      	bne.n	800a21a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3314      	adds	r3, #20
 800a254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	617b      	str	r3, [r7, #20]
   return(result);
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a264:	653b      	str	r3, [r7, #80]	; 0x50
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3314      	adds	r3, #20
 800a26c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a26e:	627a      	str	r2, [r7, #36]	; 0x24
 800a270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6a39      	ldr	r1, [r7, #32]
 800a274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e5      	bne.n	800a24e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3760      	adds	r7, #96	; 0x60
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	08009e91 	.word	0x08009e91
 800a290:	08009fb7 	.word	0x08009fb7
 800a294:	08009fed 	.word	0x08009fed

0800a298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b089      	sub	sp, #36	; 0x24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	330c      	adds	r3, #12
 800a2a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	e853 3f00 	ldrex	r3, [r3]
 800a2ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	330c      	adds	r3, #12
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	61ba      	str	r2, [r7, #24]
 800a2c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c4:	6979      	ldr	r1, [r7, #20]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	e841 2300 	strex	r3, r2, [r1]
 800a2cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e5      	bne.n	800a2a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a2dc:	bf00      	nop
 800a2de:	3724      	adds	r7, #36	; 0x24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b095      	sub	sp, #84	; 0x54
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a306:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	330c      	adds	r3, #12
 800a30e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a310:	643a      	str	r2, [r7, #64]	; 0x40
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e5      	bne.n	800a2f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3314      	adds	r3, #20
 800a32a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	e853 3f00 	ldrex	r3, [r3]
 800a332:	61fb      	str	r3, [r7, #28]
   return(result);
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f023 0301 	bic.w	r3, r3, #1
 800a33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3314      	adds	r3, #20
 800a342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a344:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a34c:	e841 2300 	strex	r3, r2, [r1]
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e5      	bne.n	800a324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d119      	bne.n	800a394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	330c      	adds	r3, #12
 800a366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f023 0310 	bic.w	r3, r3, #16
 800a376:	647b      	str	r3, [r7, #68]	; 0x44
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	330c      	adds	r3, #12
 800a37e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a380:	61ba      	str	r2, [r7, #24]
 800a382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6979      	ldr	r1, [r7, #20]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	613b      	str	r3, [r7, #16]
   return(result);
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e5      	bne.n	800a360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a3a2:	bf00      	nop
 800a3a4:	3754      	adds	r7, #84	; 0x54
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fd4b 	bl	8009e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b21      	cmp	r3, #33	; 0x21
 800a3e8:	d13e      	bne.n	800a468 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f2:	d114      	bne.n	800a41e <UART_Transmit_IT+0x48>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d110      	bne.n	800a41e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a410:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	1c9a      	adds	r2, r3, #2
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	621a      	str	r2, [r3, #32]
 800a41c:	e008      	b.n	800a430 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	1c59      	adds	r1, r3, #1
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6211      	str	r1, [r2, #32]
 800a428:	781a      	ldrb	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a434:	b29b      	uxth	r3, r3
 800a436:	3b01      	subs	r3, #1
 800a438:	b29b      	uxth	r3, r3
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	4619      	mov	r1, r3
 800a43e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10f      	bne.n	800a464 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a452:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a462:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	e000      	b.n	800a46a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a468:	2302      	movs	r3, #2
  }
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a48c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2220      	movs	r2, #32
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff fcd0 	bl	8009e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b08c      	sub	sp, #48	; 0x30
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b22      	cmp	r3, #34	; 0x22
 800a4b8:	f040 80ab 	bne.w	800a612 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c4:	d117      	bne.n	800a4f6 <UART_Receive_IT+0x50>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d113      	bne.n	800a4f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a4f4:	e026      	b.n	800a544 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a508:	d007      	beq.n	800a51a <UART_Receive_IT+0x74>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <UART_Receive_IT+0x82>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	e008      	b.n	800a53a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a534:	b2da      	uxtb	r2, r3
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a548:	b29b      	uxth	r3, r3
 800a54a:	3b01      	subs	r3, #1
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4619      	mov	r1, r3
 800a552:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a554:	2b00      	cmp	r3, #0
 800a556:	d15a      	bne.n	800a60e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f022 0220 	bic.w	r2, r2, #32
 800a566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68da      	ldr	r2, [r3, #12]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695a      	ldr	r2, [r3, #20]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0201 	bic.w	r2, r2, #1
 800a586:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a594:	2b01      	cmp	r3, #1
 800a596:	d135      	bne.n	800a604 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f023 0310 	bic.w	r3, r3, #16
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	330c      	adds	r3, #12
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5be:	623a      	str	r2, [r7, #32]
 800a5c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	69f9      	ldr	r1, [r7, #28]
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e5      	bne.n	800a59e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0310 	and.w	r3, r3, #16
 800a5dc:	2b10      	cmp	r3, #16
 800a5de:	d10a      	bne.n	800a5f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff fc3b 	bl	8009e78 <HAL_UARTEx_RxEventCallback>
 800a602:	e002      	b.n	800a60a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7f8 fd25 	bl	8003054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e002      	b.n	800a614 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	e000      	b.n	800a614 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a612:	2302      	movs	r3, #2
  }
}
 800a614:	4618      	mov	r0, r3
 800a616:	3730      	adds	r7, #48	; 0x30
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a61c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a620:	b0c0      	sub	sp, #256	; 0x100
 800a622:	af00      	add	r7, sp, #0
 800a624:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a638:	68d9      	ldr	r1, [r3, #12]
 800a63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	ea40 0301 	orr.w	r3, r0, r1
 800a644:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	431a      	orrs	r2, r3
 800a654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	4313      	orrs	r3, r2
 800a664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a674:	f021 010c 	bic.w	r1, r1, #12
 800a678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a682:	430b      	orrs	r3, r1
 800a684:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a696:	6999      	ldr	r1, [r3, #24]
 800a698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	ea40 0301 	orr.w	r3, r0, r1
 800a6a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	4b8f      	ldr	r3, [pc, #572]	; (800a8e8 <UART_SetConfig+0x2cc>)
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d005      	beq.n	800a6bc <UART_SetConfig+0xa0>
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	4b8d      	ldr	r3, [pc, #564]	; (800a8ec <UART_SetConfig+0x2d0>)
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d104      	bne.n	800a6c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a6bc:	f7fe f806 	bl	80086cc <HAL_RCC_GetPCLK2Freq>
 800a6c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a6c4:	e003      	b.n	800a6ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6c6:	f7fd ffed 	bl	80086a4 <HAL_RCC_GetPCLK1Freq>
 800a6ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6d8:	f040 810c 	bne.w	800a8f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a6ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	462b      	mov	r3, r5
 800a6f2:	1891      	adds	r1, r2, r2
 800a6f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a6f6:	415b      	adcs	r3, r3
 800a6f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a6fe:	4621      	mov	r1, r4
 800a700:	eb12 0801 	adds.w	r8, r2, r1
 800a704:	4629      	mov	r1, r5
 800a706:	eb43 0901 	adc.w	r9, r3, r1
 800a70a:	f04f 0200 	mov.w	r2, #0
 800a70e:	f04f 0300 	mov.w	r3, #0
 800a712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a71a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a71e:	4690      	mov	r8, r2
 800a720:	4699      	mov	r9, r3
 800a722:	4623      	mov	r3, r4
 800a724:	eb18 0303 	adds.w	r3, r8, r3
 800a728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a72c:	462b      	mov	r3, r5
 800a72e:	eb49 0303 	adc.w	r3, r9, r3
 800a732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a742:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a746:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a74a:	460b      	mov	r3, r1
 800a74c:	18db      	adds	r3, r3, r3
 800a74e:	653b      	str	r3, [r7, #80]	; 0x50
 800a750:	4613      	mov	r3, r2
 800a752:	eb42 0303 	adc.w	r3, r2, r3
 800a756:	657b      	str	r3, [r7, #84]	; 0x54
 800a758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a75c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a760:	f7f6 fa9a 	bl	8000c98 <__aeabi_uldivmod>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4b61      	ldr	r3, [pc, #388]	; (800a8f0 <UART_SetConfig+0x2d4>)
 800a76a:	fba3 2302 	umull	r2, r3, r3, r2
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	011c      	lsls	r4, r3, #4
 800a772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a776:	2200      	movs	r2, #0
 800a778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a77c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a780:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a784:	4642      	mov	r2, r8
 800a786:	464b      	mov	r3, r9
 800a788:	1891      	adds	r1, r2, r2
 800a78a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a78c:	415b      	adcs	r3, r3
 800a78e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a790:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a794:	4641      	mov	r1, r8
 800a796:	eb12 0a01 	adds.w	sl, r2, r1
 800a79a:	4649      	mov	r1, r9
 800a79c:	eb43 0b01 	adc.w	fp, r3, r1
 800a7a0:	f04f 0200 	mov.w	r2, #0
 800a7a4:	f04f 0300 	mov.w	r3, #0
 800a7a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a7ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a7b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7b4:	4692      	mov	sl, r2
 800a7b6:	469b      	mov	fp, r3
 800a7b8:	4643      	mov	r3, r8
 800a7ba:	eb1a 0303 	adds.w	r3, sl, r3
 800a7be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	eb4b 0303 	adc.w	r3, fp, r3
 800a7c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a7dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	18db      	adds	r3, r3, r3
 800a7e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	eb42 0303 	adc.w	r3, r2, r3
 800a7ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a7f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a7f6:	f7f6 fa4f 	bl	8000c98 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4611      	mov	r1, r2
 800a800:	4b3b      	ldr	r3, [pc, #236]	; (800a8f0 <UART_SetConfig+0x2d4>)
 800a802:	fba3 2301 	umull	r2, r3, r3, r1
 800a806:	095b      	lsrs	r3, r3, #5
 800a808:	2264      	movs	r2, #100	; 0x64
 800a80a:	fb02 f303 	mul.w	r3, r2, r3
 800a80e:	1acb      	subs	r3, r1, r3
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a816:	4b36      	ldr	r3, [pc, #216]	; (800a8f0 <UART_SetConfig+0x2d4>)
 800a818:	fba3 2302 	umull	r2, r3, r3, r2
 800a81c:	095b      	lsrs	r3, r3, #5
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a824:	441c      	add	r4, r3
 800a826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a830:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a834:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a838:	4642      	mov	r2, r8
 800a83a:	464b      	mov	r3, r9
 800a83c:	1891      	adds	r1, r2, r2
 800a83e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a840:	415b      	adcs	r3, r3
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a848:	4641      	mov	r1, r8
 800a84a:	1851      	adds	r1, r2, r1
 800a84c:	6339      	str	r1, [r7, #48]	; 0x30
 800a84e:	4649      	mov	r1, r9
 800a850:	414b      	adcs	r3, r1
 800a852:	637b      	str	r3, [r7, #52]	; 0x34
 800a854:	f04f 0200 	mov.w	r2, #0
 800a858:	f04f 0300 	mov.w	r3, #0
 800a85c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a860:	4659      	mov	r1, fp
 800a862:	00cb      	lsls	r3, r1, #3
 800a864:	4651      	mov	r1, sl
 800a866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a86a:	4651      	mov	r1, sl
 800a86c:	00ca      	lsls	r2, r1, #3
 800a86e:	4610      	mov	r0, r2
 800a870:	4619      	mov	r1, r3
 800a872:	4603      	mov	r3, r0
 800a874:	4642      	mov	r2, r8
 800a876:	189b      	adds	r3, r3, r2
 800a878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a87c:	464b      	mov	r3, r9
 800a87e:	460a      	mov	r2, r1
 800a880:	eb42 0303 	adc.w	r3, r2, r3
 800a884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a894:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a89c:	460b      	mov	r3, r1
 800a89e:	18db      	adds	r3, r3, r3
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	eb42 0303 	adc.w	r3, r2, r3
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a8ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a8b2:	f7f6 f9f1 	bl	8000c98 <__aeabi_uldivmod>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <UART_SetConfig+0x2d4>)
 800a8bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c0:	095b      	lsrs	r3, r3, #5
 800a8c2:	2164      	movs	r1, #100	; 0x64
 800a8c4:	fb01 f303 	mul.w	r3, r1, r3
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	3332      	adds	r3, #50	; 0x32
 800a8ce:	4a08      	ldr	r2, [pc, #32]	; (800a8f0 <UART_SetConfig+0x2d4>)
 800a8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d4:	095b      	lsrs	r3, r3, #5
 800a8d6:	f003 0207 	and.w	r2, r3, #7
 800a8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4422      	add	r2, r4
 800a8e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8e4:	e105      	b.n	800aaf2 <UART_SetConfig+0x4d6>
 800a8e6:	bf00      	nop
 800a8e8:	40011000 	.word	0x40011000
 800a8ec:	40011400 	.word	0x40011400
 800a8f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a902:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a906:	4642      	mov	r2, r8
 800a908:	464b      	mov	r3, r9
 800a90a:	1891      	adds	r1, r2, r2
 800a90c:	6239      	str	r1, [r7, #32]
 800a90e:	415b      	adcs	r3, r3
 800a910:	627b      	str	r3, [r7, #36]	; 0x24
 800a912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a916:	4641      	mov	r1, r8
 800a918:	1854      	adds	r4, r2, r1
 800a91a:	4649      	mov	r1, r9
 800a91c:	eb43 0501 	adc.w	r5, r3, r1
 800a920:	f04f 0200 	mov.w	r2, #0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	00eb      	lsls	r3, r5, #3
 800a92a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a92e:	00e2      	lsls	r2, r4, #3
 800a930:	4614      	mov	r4, r2
 800a932:	461d      	mov	r5, r3
 800a934:	4643      	mov	r3, r8
 800a936:	18e3      	adds	r3, r4, r3
 800a938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a93c:	464b      	mov	r3, r9
 800a93e:	eb45 0303 	adc.w	r3, r5, r3
 800a942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a952:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	f04f 0300 	mov.w	r3, #0
 800a95e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a962:	4629      	mov	r1, r5
 800a964:	008b      	lsls	r3, r1, #2
 800a966:	4621      	mov	r1, r4
 800a968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a96c:	4621      	mov	r1, r4
 800a96e:	008a      	lsls	r2, r1, #2
 800a970:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a974:	f7f6 f990 	bl	8000c98 <__aeabi_uldivmod>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4b60      	ldr	r3, [pc, #384]	; (800ab00 <UART_SetConfig+0x4e4>)
 800a97e:	fba3 2302 	umull	r2, r3, r3, r2
 800a982:	095b      	lsrs	r3, r3, #5
 800a984:	011c      	lsls	r4, r3, #4
 800a986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a994:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a998:	4642      	mov	r2, r8
 800a99a:	464b      	mov	r3, r9
 800a99c:	1891      	adds	r1, r2, r2
 800a99e:	61b9      	str	r1, [r7, #24]
 800a9a0:	415b      	adcs	r3, r3
 800a9a2:	61fb      	str	r3, [r7, #28]
 800a9a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9a8:	4641      	mov	r1, r8
 800a9aa:	1851      	adds	r1, r2, r1
 800a9ac:	6139      	str	r1, [r7, #16]
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	414b      	adcs	r3, r1
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	f04f 0300 	mov.w	r3, #0
 800a9bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a9c0:	4659      	mov	r1, fp
 800a9c2:	00cb      	lsls	r3, r1, #3
 800a9c4:	4651      	mov	r1, sl
 800a9c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9ca:	4651      	mov	r1, sl
 800a9cc:	00ca      	lsls	r2, r1, #3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	189b      	adds	r3, r3, r2
 800a9d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9dc:	464b      	mov	r3, r9
 800a9de:	460a      	mov	r2, r1
 800a9e0:	eb42 0303 	adc.w	r3, r2, r3
 800a9e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a9f4:	f04f 0200 	mov.w	r2, #0
 800a9f8:	f04f 0300 	mov.w	r3, #0
 800a9fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aa00:	4649      	mov	r1, r9
 800aa02:	008b      	lsls	r3, r1, #2
 800aa04:	4641      	mov	r1, r8
 800aa06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa0a:	4641      	mov	r1, r8
 800aa0c:	008a      	lsls	r2, r1, #2
 800aa0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aa12:	f7f6 f941 	bl	8000c98 <__aeabi_uldivmod>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4b39      	ldr	r3, [pc, #228]	; (800ab00 <UART_SetConfig+0x4e4>)
 800aa1c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa20:	095b      	lsrs	r3, r3, #5
 800aa22:	2164      	movs	r1, #100	; 0x64
 800aa24:	fb01 f303 	mul.w	r3, r1, r3
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	011b      	lsls	r3, r3, #4
 800aa2c:	3332      	adds	r3, #50	; 0x32
 800aa2e:	4a34      	ldr	r2, [pc, #208]	; (800ab00 <UART_SetConfig+0x4e4>)
 800aa30:	fba2 2303 	umull	r2, r3, r2, r3
 800aa34:	095b      	lsrs	r3, r3, #5
 800aa36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa3a:	441c      	add	r4, r3
 800aa3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa40:	2200      	movs	r2, #0
 800aa42:	673b      	str	r3, [r7, #112]	; 0x70
 800aa44:	677a      	str	r2, [r7, #116]	; 0x74
 800aa46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aa4a:	4642      	mov	r2, r8
 800aa4c:	464b      	mov	r3, r9
 800aa4e:	1891      	adds	r1, r2, r2
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	415b      	adcs	r3, r3
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	1851      	adds	r1, r2, r1
 800aa5e:	6039      	str	r1, [r7, #0]
 800aa60:	4649      	mov	r1, r9
 800aa62:	414b      	adcs	r3, r1
 800aa64:	607b      	str	r3, [r7, #4]
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	f04f 0300 	mov.w	r3, #0
 800aa6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa72:	4659      	mov	r1, fp
 800aa74:	00cb      	lsls	r3, r1, #3
 800aa76:	4651      	mov	r1, sl
 800aa78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa7c:	4651      	mov	r1, sl
 800aa7e:	00ca      	lsls	r2, r1, #3
 800aa80:	4610      	mov	r0, r2
 800aa82:	4619      	mov	r1, r3
 800aa84:	4603      	mov	r3, r0
 800aa86:	4642      	mov	r2, r8
 800aa88:	189b      	adds	r3, r3, r2
 800aa8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	460a      	mov	r2, r1
 800aa90:	eb42 0303 	adc.w	r3, r2, r3
 800aa94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	663b      	str	r3, [r7, #96]	; 0x60
 800aaa0:	667a      	str	r2, [r7, #100]	; 0x64
 800aaa2:	f04f 0200 	mov.w	r2, #0
 800aaa6:	f04f 0300 	mov.w	r3, #0
 800aaaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aaae:	4649      	mov	r1, r9
 800aab0:	008b      	lsls	r3, r1, #2
 800aab2:	4641      	mov	r1, r8
 800aab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aab8:	4641      	mov	r1, r8
 800aaba:	008a      	lsls	r2, r1, #2
 800aabc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aac0:	f7f6 f8ea 	bl	8000c98 <__aeabi_uldivmod>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <UART_SetConfig+0x4e4>)
 800aaca:	fba3 1302 	umull	r1, r3, r3, r2
 800aace:	095b      	lsrs	r3, r3, #5
 800aad0:	2164      	movs	r1, #100	; 0x64
 800aad2:	fb01 f303 	mul.w	r3, r1, r3
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	011b      	lsls	r3, r3, #4
 800aada:	3332      	adds	r3, #50	; 0x32
 800aadc:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <UART_SetConfig+0x4e4>)
 800aade:	fba2 2303 	umull	r2, r3, r2, r3
 800aae2:	095b      	lsrs	r3, r3, #5
 800aae4:	f003 020f 	and.w	r2, r3, #15
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4422      	add	r2, r4
 800aaf0:	609a      	str	r2, [r3, #8]
}
 800aaf2:	bf00      	nop
 800aaf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aafe:	bf00      	nop
 800ab00:	51eb851f 	.word	0x51eb851f

0800ab04 <__errno>:
 800ab04:	4b01      	ldr	r3, [pc, #4]	; (800ab0c <__errno+0x8>)
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000044 	.word	0x20000044

0800ab10 <__libc_init_array>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	4d0d      	ldr	r5, [pc, #52]	; (800ab48 <__libc_init_array+0x38>)
 800ab14:	4c0d      	ldr	r4, [pc, #52]	; (800ab4c <__libc_init_array+0x3c>)
 800ab16:	1b64      	subs	r4, r4, r5
 800ab18:	10a4      	asrs	r4, r4, #2
 800ab1a:	2600      	movs	r6, #0
 800ab1c:	42a6      	cmp	r6, r4
 800ab1e:	d109      	bne.n	800ab34 <__libc_init_array+0x24>
 800ab20:	4d0b      	ldr	r5, [pc, #44]	; (800ab50 <__libc_init_array+0x40>)
 800ab22:	4c0c      	ldr	r4, [pc, #48]	; (800ab54 <__libc_init_array+0x44>)
 800ab24:	f002 ff78 	bl	800da18 <_init>
 800ab28:	1b64      	subs	r4, r4, r5
 800ab2a:	10a4      	asrs	r4, r4, #2
 800ab2c:	2600      	movs	r6, #0
 800ab2e:	42a6      	cmp	r6, r4
 800ab30:	d105      	bne.n	800ab3e <__libc_init_array+0x2e>
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
 800ab34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab38:	4798      	blx	r3
 800ab3a:	3601      	adds	r6, #1
 800ab3c:	e7ee      	b.n	800ab1c <__libc_init_array+0xc>
 800ab3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab42:	4798      	blx	r3
 800ab44:	3601      	adds	r6, #1
 800ab46:	e7f2      	b.n	800ab2e <__libc_init_array+0x1e>
 800ab48:	080194c4 	.word	0x080194c4
 800ab4c:	080194c4 	.word	0x080194c4
 800ab50:	080194c4 	.word	0x080194c4
 800ab54:	080194c8 	.word	0x080194c8

0800ab58 <memset>:
 800ab58:	4402      	add	r2, r0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d100      	bne.n	800ab62 <memset+0xa>
 800ab60:	4770      	bx	lr
 800ab62:	f803 1b01 	strb.w	r1, [r3], #1
 800ab66:	e7f9      	b.n	800ab5c <memset+0x4>

0800ab68 <__cvt>:
 800ab68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	ec55 4b10 	vmov	r4, r5, d0
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	460e      	mov	r6, r1
 800ab74:	4619      	mov	r1, r3
 800ab76:	462b      	mov	r3, r5
 800ab78:	bfbb      	ittet	lt
 800ab7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab7e:	461d      	movlt	r5, r3
 800ab80:	2300      	movge	r3, #0
 800ab82:	232d      	movlt	r3, #45	; 0x2d
 800ab84:	700b      	strb	r3, [r1, #0]
 800ab86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab8c:	4691      	mov	r9, r2
 800ab8e:	f023 0820 	bic.w	r8, r3, #32
 800ab92:	bfbc      	itt	lt
 800ab94:	4622      	movlt	r2, r4
 800ab96:	4614      	movlt	r4, r2
 800ab98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab9c:	d005      	beq.n	800abaa <__cvt+0x42>
 800ab9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aba2:	d100      	bne.n	800aba6 <__cvt+0x3e>
 800aba4:	3601      	adds	r6, #1
 800aba6:	2102      	movs	r1, #2
 800aba8:	e000      	b.n	800abac <__cvt+0x44>
 800abaa:	2103      	movs	r1, #3
 800abac:	ab03      	add	r3, sp, #12
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	ab02      	add	r3, sp, #8
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	ec45 4b10 	vmov	d0, r4, r5
 800abb8:	4653      	mov	r3, sl
 800abba:	4632      	mov	r2, r6
 800abbc:	f000 fcec 	bl	800b598 <_dtoa_r>
 800abc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abc4:	4607      	mov	r7, r0
 800abc6:	d102      	bne.n	800abce <__cvt+0x66>
 800abc8:	f019 0f01 	tst.w	r9, #1
 800abcc:	d022      	beq.n	800ac14 <__cvt+0xac>
 800abce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abd2:	eb07 0906 	add.w	r9, r7, r6
 800abd6:	d110      	bne.n	800abfa <__cvt+0x92>
 800abd8:	783b      	ldrb	r3, [r7, #0]
 800abda:	2b30      	cmp	r3, #48	; 0x30
 800abdc:	d10a      	bne.n	800abf4 <__cvt+0x8c>
 800abde:	2200      	movs	r2, #0
 800abe0:	2300      	movs	r3, #0
 800abe2:	4620      	mov	r0, r4
 800abe4:	4629      	mov	r1, r5
 800abe6:	f7f5 ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 800abea:	b918      	cbnz	r0, 800abf4 <__cvt+0x8c>
 800abec:	f1c6 0601 	rsb	r6, r6, #1
 800abf0:	f8ca 6000 	str.w	r6, [sl]
 800abf4:	f8da 3000 	ldr.w	r3, [sl]
 800abf8:	4499      	add	r9, r3
 800abfa:	2200      	movs	r2, #0
 800abfc:	2300      	movs	r3, #0
 800abfe:	4620      	mov	r0, r4
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f5 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac06:	b108      	cbz	r0, 800ac0c <__cvt+0xa4>
 800ac08:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac0c:	2230      	movs	r2, #48	; 0x30
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	454b      	cmp	r3, r9
 800ac12:	d307      	bcc.n	800ac24 <__cvt+0xbc>
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac18:	1bdb      	subs	r3, r3, r7
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	b004      	add	sp, #16
 800ac20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac24:	1c59      	adds	r1, r3, #1
 800ac26:	9103      	str	r1, [sp, #12]
 800ac28:	701a      	strb	r2, [r3, #0]
 800ac2a:	e7f0      	b.n	800ac0e <__cvt+0xa6>

0800ac2c <__exponent>:
 800ac2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2900      	cmp	r1, #0
 800ac32:	bfb8      	it	lt
 800ac34:	4249      	neglt	r1, r1
 800ac36:	f803 2b02 	strb.w	r2, [r3], #2
 800ac3a:	bfb4      	ite	lt
 800ac3c:	222d      	movlt	r2, #45	; 0x2d
 800ac3e:	222b      	movge	r2, #43	; 0x2b
 800ac40:	2909      	cmp	r1, #9
 800ac42:	7042      	strb	r2, [r0, #1]
 800ac44:	dd2a      	ble.n	800ac9c <__exponent+0x70>
 800ac46:	f10d 0407 	add.w	r4, sp, #7
 800ac4a:	46a4      	mov	ip, r4
 800ac4c:	270a      	movs	r7, #10
 800ac4e:	46a6      	mov	lr, r4
 800ac50:	460a      	mov	r2, r1
 800ac52:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac56:	fb07 1516 	mls	r5, r7, r6, r1
 800ac5a:	3530      	adds	r5, #48	; 0x30
 800ac5c:	2a63      	cmp	r2, #99	; 0x63
 800ac5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac66:	4631      	mov	r1, r6
 800ac68:	dcf1      	bgt.n	800ac4e <__exponent+0x22>
 800ac6a:	3130      	adds	r1, #48	; 0x30
 800ac6c:	f1ae 0502 	sub.w	r5, lr, #2
 800ac70:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac74:	1c44      	adds	r4, r0, #1
 800ac76:	4629      	mov	r1, r5
 800ac78:	4561      	cmp	r1, ip
 800ac7a:	d30a      	bcc.n	800ac92 <__exponent+0x66>
 800ac7c:	f10d 0209 	add.w	r2, sp, #9
 800ac80:	eba2 020e 	sub.w	r2, r2, lr
 800ac84:	4565      	cmp	r5, ip
 800ac86:	bf88      	it	hi
 800ac88:	2200      	movhi	r2, #0
 800ac8a:	4413      	add	r3, r2
 800ac8c:	1a18      	subs	r0, r3, r0
 800ac8e:	b003      	add	sp, #12
 800ac90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac96:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac9a:	e7ed      	b.n	800ac78 <__exponent+0x4c>
 800ac9c:	2330      	movs	r3, #48	; 0x30
 800ac9e:	3130      	adds	r1, #48	; 0x30
 800aca0:	7083      	strb	r3, [r0, #2]
 800aca2:	70c1      	strb	r1, [r0, #3]
 800aca4:	1d03      	adds	r3, r0, #4
 800aca6:	e7f1      	b.n	800ac8c <__exponent+0x60>

0800aca8 <_printf_float>:
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	ed2d 8b02 	vpush	{d8}
 800acb0:	b08d      	sub	sp, #52	; 0x34
 800acb2:	460c      	mov	r4, r1
 800acb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800acb8:	4616      	mov	r6, r2
 800acba:	461f      	mov	r7, r3
 800acbc:	4605      	mov	r5, r0
 800acbe:	f001 fa59 	bl	800c174 <_localeconv_r>
 800acc2:	f8d0 a000 	ldr.w	sl, [r0]
 800acc6:	4650      	mov	r0, sl
 800acc8:	f7f5 fa8a 	bl	80001e0 <strlen>
 800accc:	2300      	movs	r3, #0
 800acce:	930a      	str	r3, [sp, #40]	; 0x28
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	9305      	str	r3, [sp, #20]
 800acd4:	f8d8 3000 	ldr.w	r3, [r8]
 800acd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800acdc:	3307      	adds	r3, #7
 800acde:	f023 0307 	bic.w	r3, r3, #7
 800ace2:	f103 0208 	add.w	r2, r3, #8
 800ace6:	f8c8 2000 	str.w	r2, [r8]
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800acf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800acf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acfa:	9307      	str	r3, [sp, #28]
 800acfc:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad00:	ee08 0a10 	vmov	s16, r0
 800ad04:	4b9f      	ldr	r3, [pc, #636]	; (800af84 <_printf_float+0x2dc>)
 800ad06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0e:	f7f5 ff15 	bl	8000b3c <__aeabi_dcmpun>
 800ad12:	bb88      	cbnz	r0, 800ad78 <_printf_float+0xd0>
 800ad14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad18:	4b9a      	ldr	r3, [pc, #616]	; (800af84 <_printf_float+0x2dc>)
 800ad1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1e:	f7f5 feef 	bl	8000b00 <__aeabi_dcmple>
 800ad22:	bb48      	cbnz	r0, 800ad78 <_printf_float+0xd0>
 800ad24:	2200      	movs	r2, #0
 800ad26:	2300      	movs	r3, #0
 800ad28:	4640      	mov	r0, r8
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	f7f5 fede 	bl	8000aec <__aeabi_dcmplt>
 800ad30:	b110      	cbz	r0, 800ad38 <_printf_float+0x90>
 800ad32:	232d      	movs	r3, #45	; 0x2d
 800ad34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad38:	4b93      	ldr	r3, [pc, #588]	; (800af88 <_printf_float+0x2e0>)
 800ad3a:	4894      	ldr	r0, [pc, #592]	; (800af8c <_printf_float+0x2e4>)
 800ad3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad40:	bf94      	ite	ls
 800ad42:	4698      	movls	r8, r3
 800ad44:	4680      	movhi	r8, r0
 800ad46:	2303      	movs	r3, #3
 800ad48:	6123      	str	r3, [r4, #16]
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	f023 0204 	bic.w	r2, r3, #4
 800ad50:	6022      	str	r2, [r4, #0]
 800ad52:	f04f 0900 	mov.w	r9, #0
 800ad56:	9700      	str	r7, [sp, #0]
 800ad58:	4633      	mov	r3, r6
 800ad5a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 f9d8 	bl	800b114 <_printf_common>
 800ad64:	3001      	adds	r0, #1
 800ad66:	f040 8090 	bne.w	800ae8a <_printf_float+0x1e2>
 800ad6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6e:	b00d      	add	sp, #52	; 0x34
 800ad70:	ecbd 8b02 	vpop	{d8}
 800ad74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad78:	4642      	mov	r2, r8
 800ad7a:	464b      	mov	r3, r9
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fedc 	bl	8000b3c <__aeabi_dcmpun>
 800ad84:	b140      	cbz	r0, 800ad98 <_printf_float+0xf0>
 800ad86:	464b      	mov	r3, r9
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bfbc      	itt	lt
 800ad8c:	232d      	movlt	r3, #45	; 0x2d
 800ad8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad92:	487f      	ldr	r0, [pc, #508]	; (800af90 <_printf_float+0x2e8>)
 800ad94:	4b7f      	ldr	r3, [pc, #508]	; (800af94 <_printf_float+0x2ec>)
 800ad96:	e7d1      	b.n	800ad3c <_printf_float+0x94>
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad9e:	9206      	str	r2, [sp, #24]
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	d13f      	bne.n	800ae24 <_printf_float+0x17c>
 800ada4:	2306      	movs	r3, #6
 800ada6:	6063      	str	r3, [r4, #4]
 800ada8:	9b05      	ldr	r3, [sp, #20]
 800adaa:	6861      	ldr	r1, [r4, #4]
 800adac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800adb0:	2300      	movs	r3, #0
 800adb2:	9303      	str	r3, [sp, #12]
 800adb4:	ab0a      	add	r3, sp, #40	; 0x28
 800adb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800adba:	ab09      	add	r3, sp, #36	; 0x24
 800adbc:	ec49 8b10 	vmov	d0, r8, r9
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	6022      	str	r2, [r4, #0]
 800adc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800adc8:	4628      	mov	r0, r5
 800adca:	f7ff fecd 	bl	800ab68 <__cvt>
 800adce:	9b06      	ldr	r3, [sp, #24]
 800add0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800add2:	2b47      	cmp	r3, #71	; 0x47
 800add4:	4680      	mov	r8, r0
 800add6:	d108      	bne.n	800adea <_printf_float+0x142>
 800add8:	1cc8      	adds	r0, r1, #3
 800adda:	db02      	blt.n	800ade2 <_printf_float+0x13a>
 800addc:	6863      	ldr	r3, [r4, #4]
 800adde:	4299      	cmp	r1, r3
 800ade0:	dd41      	ble.n	800ae66 <_printf_float+0x1be>
 800ade2:	f1ab 0b02 	sub.w	fp, fp, #2
 800ade6:	fa5f fb8b 	uxtb.w	fp, fp
 800adea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adee:	d820      	bhi.n	800ae32 <_printf_float+0x18a>
 800adf0:	3901      	subs	r1, #1
 800adf2:	465a      	mov	r2, fp
 800adf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800adf8:	9109      	str	r1, [sp, #36]	; 0x24
 800adfa:	f7ff ff17 	bl	800ac2c <__exponent>
 800adfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae00:	1813      	adds	r3, r2, r0
 800ae02:	2a01      	cmp	r2, #1
 800ae04:	4681      	mov	r9, r0
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	dc02      	bgt.n	800ae10 <_printf_float+0x168>
 800ae0a:	6822      	ldr	r2, [r4, #0]
 800ae0c:	07d2      	lsls	r2, r2, #31
 800ae0e:	d501      	bpl.n	800ae14 <_printf_float+0x16c>
 800ae10:	3301      	adds	r3, #1
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d09c      	beq.n	800ad56 <_printf_float+0xae>
 800ae1c:	232d      	movs	r3, #45	; 0x2d
 800ae1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae22:	e798      	b.n	800ad56 <_printf_float+0xae>
 800ae24:	9a06      	ldr	r2, [sp, #24]
 800ae26:	2a47      	cmp	r2, #71	; 0x47
 800ae28:	d1be      	bne.n	800ada8 <_printf_float+0x100>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1bc      	bne.n	800ada8 <_printf_float+0x100>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e7b9      	b.n	800ada6 <_printf_float+0xfe>
 800ae32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae36:	d118      	bne.n	800ae6a <_printf_float+0x1c2>
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	6863      	ldr	r3, [r4, #4]
 800ae3c:	dd0b      	ble.n	800ae56 <_printf_float+0x1ae>
 800ae3e:	6121      	str	r1, [r4, #16]
 800ae40:	b913      	cbnz	r3, 800ae48 <_printf_float+0x1a0>
 800ae42:	6822      	ldr	r2, [r4, #0]
 800ae44:	07d0      	lsls	r0, r2, #31
 800ae46:	d502      	bpl.n	800ae4e <_printf_float+0x1a6>
 800ae48:	3301      	adds	r3, #1
 800ae4a:	440b      	add	r3, r1
 800ae4c:	6123      	str	r3, [r4, #16]
 800ae4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae50:	f04f 0900 	mov.w	r9, #0
 800ae54:	e7de      	b.n	800ae14 <_printf_float+0x16c>
 800ae56:	b913      	cbnz	r3, 800ae5e <_printf_float+0x1b6>
 800ae58:	6822      	ldr	r2, [r4, #0]
 800ae5a:	07d2      	lsls	r2, r2, #31
 800ae5c:	d501      	bpl.n	800ae62 <_printf_float+0x1ba>
 800ae5e:	3302      	adds	r3, #2
 800ae60:	e7f4      	b.n	800ae4c <_printf_float+0x1a4>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e7f2      	b.n	800ae4c <_printf_float+0x1a4>
 800ae66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6c:	4299      	cmp	r1, r3
 800ae6e:	db05      	blt.n	800ae7c <_printf_float+0x1d4>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	6121      	str	r1, [r4, #16]
 800ae74:	07d8      	lsls	r0, r3, #31
 800ae76:	d5ea      	bpl.n	800ae4e <_printf_float+0x1a6>
 800ae78:	1c4b      	adds	r3, r1, #1
 800ae7a:	e7e7      	b.n	800ae4c <_printf_float+0x1a4>
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	bfd4      	ite	le
 800ae80:	f1c1 0202 	rsble	r2, r1, #2
 800ae84:	2201      	movgt	r2, #1
 800ae86:	4413      	add	r3, r2
 800ae88:	e7e0      	b.n	800ae4c <_printf_float+0x1a4>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	055a      	lsls	r2, r3, #21
 800ae8e:	d407      	bmi.n	800aea0 <_printf_float+0x1f8>
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	4642      	mov	r2, r8
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d12c      	bne.n	800aef8 <_printf_float+0x250>
 800ae9e:	e764      	b.n	800ad6a <_printf_float+0xc2>
 800aea0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aea4:	f240 80e0 	bls.w	800b068 <_printf_float+0x3c0>
 800aea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aeac:	2200      	movs	r2, #0
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f7f5 fe12 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d034      	beq.n	800af22 <_printf_float+0x27a>
 800aeb8:	4a37      	ldr	r2, [pc, #220]	; (800af98 <_printf_float+0x2f0>)
 800aeba:	2301      	movs	r3, #1
 800aebc:	4631      	mov	r1, r6
 800aebe:	4628      	mov	r0, r5
 800aec0:	47b8      	blx	r7
 800aec2:	3001      	adds	r0, #1
 800aec4:	f43f af51 	beq.w	800ad6a <_printf_float+0xc2>
 800aec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aecc:	429a      	cmp	r2, r3
 800aece:	db02      	blt.n	800aed6 <_printf_float+0x22e>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	07d8      	lsls	r0, r3, #31
 800aed4:	d510      	bpl.n	800aef8 <_printf_float+0x250>
 800aed6:	ee18 3a10 	vmov	r3, s16
 800aeda:	4652      	mov	r2, sl
 800aedc:	4631      	mov	r1, r6
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	f43f af41 	beq.w	800ad6a <_printf_float+0xc2>
 800aee8:	f04f 0800 	mov.w	r8, #0
 800aeec:	f104 091a 	add.w	r9, r4, #26
 800aef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef2:	3b01      	subs	r3, #1
 800aef4:	4543      	cmp	r3, r8
 800aef6:	dc09      	bgt.n	800af0c <_printf_float+0x264>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	079b      	lsls	r3, r3, #30
 800aefc:	f100 8105 	bmi.w	800b10a <_printf_float+0x462>
 800af00:	68e0      	ldr	r0, [r4, #12]
 800af02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af04:	4298      	cmp	r0, r3
 800af06:	bfb8      	it	lt
 800af08:	4618      	movlt	r0, r3
 800af0a:	e730      	b.n	800ad6e <_printf_float+0xc6>
 800af0c:	2301      	movs	r3, #1
 800af0e:	464a      	mov	r2, r9
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f af27 	beq.w	800ad6a <_printf_float+0xc2>
 800af1c:	f108 0801 	add.w	r8, r8, #1
 800af20:	e7e6      	b.n	800aef0 <_printf_float+0x248>
 800af22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	dc39      	bgt.n	800af9c <_printf_float+0x2f4>
 800af28:	4a1b      	ldr	r2, [pc, #108]	; (800af98 <_printf_float+0x2f0>)
 800af2a:	2301      	movs	r3, #1
 800af2c:	4631      	mov	r1, r6
 800af2e:	4628      	mov	r0, r5
 800af30:	47b8      	blx	r7
 800af32:	3001      	adds	r0, #1
 800af34:	f43f af19 	beq.w	800ad6a <_printf_float+0xc2>
 800af38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af3c:	4313      	orrs	r3, r2
 800af3e:	d102      	bne.n	800af46 <_printf_float+0x29e>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	07d9      	lsls	r1, r3, #31
 800af44:	d5d8      	bpl.n	800aef8 <_printf_float+0x250>
 800af46:	ee18 3a10 	vmov	r3, s16
 800af4a:	4652      	mov	r2, sl
 800af4c:	4631      	mov	r1, r6
 800af4e:	4628      	mov	r0, r5
 800af50:	47b8      	blx	r7
 800af52:	3001      	adds	r0, #1
 800af54:	f43f af09 	beq.w	800ad6a <_printf_float+0xc2>
 800af58:	f04f 0900 	mov.w	r9, #0
 800af5c:	f104 0a1a 	add.w	sl, r4, #26
 800af60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af62:	425b      	negs	r3, r3
 800af64:	454b      	cmp	r3, r9
 800af66:	dc01      	bgt.n	800af6c <_printf_float+0x2c4>
 800af68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6a:	e792      	b.n	800ae92 <_printf_float+0x1ea>
 800af6c:	2301      	movs	r3, #1
 800af6e:	4652      	mov	r2, sl
 800af70:	4631      	mov	r1, r6
 800af72:	4628      	mov	r0, r5
 800af74:	47b8      	blx	r7
 800af76:	3001      	adds	r0, #1
 800af78:	f43f aef7 	beq.w	800ad6a <_printf_float+0xc2>
 800af7c:	f109 0901 	add.w	r9, r9, #1
 800af80:	e7ee      	b.n	800af60 <_printf_float+0x2b8>
 800af82:	bf00      	nop
 800af84:	7fefffff 	.word	0x7fefffff
 800af88:	080190e4 	.word	0x080190e4
 800af8c:	080190e8 	.word	0x080190e8
 800af90:	080190f0 	.word	0x080190f0
 800af94:	080190ec 	.word	0x080190ec
 800af98:	080190f4 	.word	0x080190f4
 800af9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afa0:	429a      	cmp	r2, r3
 800afa2:	bfa8      	it	ge
 800afa4:	461a      	movge	r2, r3
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	4691      	mov	r9, r2
 800afaa:	dc37      	bgt.n	800b01c <_printf_float+0x374>
 800afac:	f04f 0b00 	mov.w	fp, #0
 800afb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afb4:	f104 021a 	add.w	r2, r4, #26
 800afb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afba:	9305      	str	r3, [sp, #20]
 800afbc:	eba3 0309 	sub.w	r3, r3, r9
 800afc0:	455b      	cmp	r3, fp
 800afc2:	dc33      	bgt.n	800b02c <_printf_float+0x384>
 800afc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afc8:	429a      	cmp	r2, r3
 800afca:	db3b      	blt.n	800b044 <_printf_float+0x39c>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	07da      	lsls	r2, r3, #31
 800afd0:	d438      	bmi.n	800b044 <_printf_float+0x39c>
 800afd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd4:	9a05      	ldr	r2, [sp, #20]
 800afd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afd8:	1a9a      	subs	r2, r3, r2
 800afda:	eba3 0901 	sub.w	r9, r3, r1
 800afde:	4591      	cmp	r9, r2
 800afe0:	bfa8      	it	ge
 800afe2:	4691      	movge	r9, r2
 800afe4:	f1b9 0f00 	cmp.w	r9, #0
 800afe8:	dc35      	bgt.n	800b056 <_printf_float+0x3ae>
 800afea:	f04f 0800 	mov.w	r8, #0
 800afee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aff2:	f104 0a1a 	add.w	sl, r4, #26
 800aff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800affa:	1a9b      	subs	r3, r3, r2
 800affc:	eba3 0309 	sub.w	r3, r3, r9
 800b000:	4543      	cmp	r3, r8
 800b002:	f77f af79 	ble.w	800aef8 <_printf_float+0x250>
 800b006:	2301      	movs	r3, #1
 800b008:	4652      	mov	r2, sl
 800b00a:	4631      	mov	r1, r6
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b8      	blx	r7
 800b010:	3001      	adds	r0, #1
 800b012:	f43f aeaa 	beq.w	800ad6a <_printf_float+0xc2>
 800b016:	f108 0801 	add.w	r8, r8, #1
 800b01a:	e7ec      	b.n	800aff6 <_printf_float+0x34e>
 800b01c:	4613      	mov	r3, r2
 800b01e:	4631      	mov	r1, r6
 800b020:	4642      	mov	r2, r8
 800b022:	4628      	mov	r0, r5
 800b024:	47b8      	blx	r7
 800b026:	3001      	adds	r0, #1
 800b028:	d1c0      	bne.n	800afac <_printf_float+0x304>
 800b02a:	e69e      	b.n	800ad6a <_printf_float+0xc2>
 800b02c:	2301      	movs	r3, #1
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	9205      	str	r2, [sp, #20]
 800b034:	47b8      	blx	r7
 800b036:	3001      	adds	r0, #1
 800b038:	f43f ae97 	beq.w	800ad6a <_printf_float+0xc2>
 800b03c:	9a05      	ldr	r2, [sp, #20]
 800b03e:	f10b 0b01 	add.w	fp, fp, #1
 800b042:	e7b9      	b.n	800afb8 <_printf_float+0x310>
 800b044:	ee18 3a10 	vmov	r3, s16
 800b048:	4652      	mov	r2, sl
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	d1be      	bne.n	800afd2 <_printf_float+0x32a>
 800b054:	e689      	b.n	800ad6a <_printf_float+0xc2>
 800b056:	9a05      	ldr	r2, [sp, #20]
 800b058:	464b      	mov	r3, r9
 800b05a:	4442      	add	r2, r8
 800b05c:	4631      	mov	r1, r6
 800b05e:	4628      	mov	r0, r5
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	d1c1      	bne.n	800afea <_printf_float+0x342>
 800b066:	e680      	b.n	800ad6a <_printf_float+0xc2>
 800b068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b06a:	2a01      	cmp	r2, #1
 800b06c:	dc01      	bgt.n	800b072 <_printf_float+0x3ca>
 800b06e:	07db      	lsls	r3, r3, #31
 800b070:	d538      	bpl.n	800b0e4 <_printf_float+0x43c>
 800b072:	2301      	movs	r3, #1
 800b074:	4642      	mov	r2, r8
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	f43f ae74 	beq.w	800ad6a <_printf_float+0xc2>
 800b082:	ee18 3a10 	vmov	r3, s16
 800b086:	4652      	mov	r2, sl
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	f43f ae6b 	beq.w	800ad6a <_printf_float+0xc2>
 800b094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b098:	2200      	movs	r2, #0
 800b09a:	2300      	movs	r3, #0
 800b09c:	f7f5 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0a0:	b9d8      	cbnz	r0, 800b0da <_printf_float+0x432>
 800b0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0a4:	f108 0201 	add.w	r2, r8, #1
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d10e      	bne.n	800b0d2 <_printf_float+0x42a>
 800b0b4:	e659      	b.n	800ad6a <_printf_float+0xc2>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4652      	mov	r2, sl
 800b0ba:	4631      	mov	r1, r6
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b8      	blx	r7
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	f43f ae52 	beq.w	800ad6a <_printf_float+0xc2>
 800b0c6:	f108 0801 	add.w	r8, r8, #1
 800b0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	4543      	cmp	r3, r8
 800b0d0:	dcf1      	bgt.n	800b0b6 <_printf_float+0x40e>
 800b0d2:	464b      	mov	r3, r9
 800b0d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b0d8:	e6dc      	b.n	800ae94 <_printf_float+0x1ec>
 800b0da:	f04f 0800 	mov.w	r8, #0
 800b0de:	f104 0a1a 	add.w	sl, r4, #26
 800b0e2:	e7f2      	b.n	800b0ca <_printf_float+0x422>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	e7df      	b.n	800b0aa <_printf_float+0x402>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	464a      	mov	r2, r9
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f43f ae38 	beq.w	800ad6a <_printf_float+0xc2>
 800b0fa:	f108 0801 	add.w	r8, r8, #1
 800b0fe:	68e3      	ldr	r3, [r4, #12]
 800b100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b102:	1a5b      	subs	r3, r3, r1
 800b104:	4543      	cmp	r3, r8
 800b106:	dcf0      	bgt.n	800b0ea <_printf_float+0x442>
 800b108:	e6fa      	b.n	800af00 <_printf_float+0x258>
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	f104 0919 	add.w	r9, r4, #25
 800b112:	e7f4      	b.n	800b0fe <_printf_float+0x456>

0800b114 <_printf_common>:
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	4616      	mov	r6, r2
 800b11a:	4699      	mov	r9, r3
 800b11c:	688a      	ldr	r2, [r1, #8]
 800b11e:	690b      	ldr	r3, [r1, #16]
 800b120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b124:	4293      	cmp	r3, r2
 800b126:	bfb8      	it	lt
 800b128:	4613      	movlt	r3, r2
 800b12a:	6033      	str	r3, [r6, #0]
 800b12c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b130:	4607      	mov	r7, r0
 800b132:	460c      	mov	r4, r1
 800b134:	b10a      	cbz	r2, 800b13a <_printf_common+0x26>
 800b136:	3301      	adds	r3, #1
 800b138:	6033      	str	r3, [r6, #0]
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	0699      	lsls	r1, r3, #26
 800b13e:	bf42      	ittt	mi
 800b140:	6833      	ldrmi	r3, [r6, #0]
 800b142:	3302      	addmi	r3, #2
 800b144:	6033      	strmi	r3, [r6, #0]
 800b146:	6825      	ldr	r5, [r4, #0]
 800b148:	f015 0506 	ands.w	r5, r5, #6
 800b14c:	d106      	bne.n	800b15c <_printf_common+0x48>
 800b14e:	f104 0a19 	add.w	sl, r4, #25
 800b152:	68e3      	ldr	r3, [r4, #12]
 800b154:	6832      	ldr	r2, [r6, #0]
 800b156:	1a9b      	subs	r3, r3, r2
 800b158:	42ab      	cmp	r3, r5
 800b15a:	dc26      	bgt.n	800b1aa <_printf_common+0x96>
 800b15c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b160:	1e13      	subs	r3, r2, #0
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	bf18      	it	ne
 800b166:	2301      	movne	r3, #1
 800b168:	0692      	lsls	r2, r2, #26
 800b16a:	d42b      	bmi.n	800b1c4 <_printf_common+0xb0>
 800b16c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b170:	4649      	mov	r1, r9
 800b172:	4638      	mov	r0, r7
 800b174:	47c0      	blx	r8
 800b176:	3001      	adds	r0, #1
 800b178:	d01e      	beq.n	800b1b8 <_printf_common+0xa4>
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	68e5      	ldr	r5, [r4, #12]
 800b17e:	6832      	ldr	r2, [r6, #0]
 800b180:	f003 0306 	and.w	r3, r3, #6
 800b184:	2b04      	cmp	r3, #4
 800b186:	bf08      	it	eq
 800b188:	1aad      	subeq	r5, r5, r2
 800b18a:	68a3      	ldr	r3, [r4, #8]
 800b18c:	6922      	ldr	r2, [r4, #16]
 800b18e:	bf0c      	ite	eq
 800b190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b194:	2500      	movne	r5, #0
 800b196:	4293      	cmp	r3, r2
 800b198:	bfc4      	itt	gt
 800b19a:	1a9b      	subgt	r3, r3, r2
 800b19c:	18ed      	addgt	r5, r5, r3
 800b19e:	2600      	movs	r6, #0
 800b1a0:	341a      	adds	r4, #26
 800b1a2:	42b5      	cmp	r5, r6
 800b1a4:	d11a      	bne.n	800b1dc <_printf_common+0xc8>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	e008      	b.n	800b1bc <_printf_common+0xa8>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	4652      	mov	r2, sl
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	47c0      	blx	r8
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d103      	bne.n	800b1c0 <_printf_common+0xac>
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c0:	3501      	adds	r5, #1
 800b1c2:	e7c6      	b.n	800b152 <_printf_common+0x3e>
 800b1c4:	18e1      	adds	r1, r4, r3
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	2030      	movs	r0, #48	; 0x30
 800b1ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ce:	4422      	add	r2, r4
 800b1d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1d8:	3302      	adds	r3, #2
 800b1da:	e7c7      	b.n	800b16c <_printf_common+0x58>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	4622      	mov	r2, r4
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	47c0      	blx	r8
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d0e6      	beq.n	800b1b8 <_printf_common+0xa4>
 800b1ea:	3601      	adds	r6, #1
 800b1ec:	e7d9      	b.n	800b1a2 <_printf_common+0x8e>
	...

0800b1f0 <_printf_i>:
 800b1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f4:	7e0f      	ldrb	r7, [r1, #24]
 800b1f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1f8:	2f78      	cmp	r7, #120	; 0x78
 800b1fa:	4691      	mov	r9, r2
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	460c      	mov	r4, r1
 800b200:	469a      	mov	sl, r3
 800b202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b206:	d807      	bhi.n	800b218 <_printf_i+0x28>
 800b208:	2f62      	cmp	r7, #98	; 0x62
 800b20a:	d80a      	bhi.n	800b222 <_printf_i+0x32>
 800b20c:	2f00      	cmp	r7, #0
 800b20e:	f000 80d8 	beq.w	800b3c2 <_printf_i+0x1d2>
 800b212:	2f58      	cmp	r7, #88	; 0x58
 800b214:	f000 80a3 	beq.w	800b35e <_printf_i+0x16e>
 800b218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b21c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b220:	e03a      	b.n	800b298 <_printf_i+0xa8>
 800b222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b226:	2b15      	cmp	r3, #21
 800b228:	d8f6      	bhi.n	800b218 <_printf_i+0x28>
 800b22a:	a101      	add	r1, pc, #4	; (adr r1, 800b230 <_printf_i+0x40>)
 800b22c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b230:	0800b289 	.word	0x0800b289
 800b234:	0800b29d 	.word	0x0800b29d
 800b238:	0800b219 	.word	0x0800b219
 800b23c:	0800b219 	.word	0x0800b219
 800b240:	0800b219 	.word	0x0800b219
 800b244:	0800b219 	.word	0x0800b219
 800b248:	0800b29d 	.word	0x0800b29d
 800b24c:	0800b219 	.word	0x0800b219
 800b250:	0800b219 	.word	0x0800b219
 800b254:	0800b219 	.word	0x0800b219
 800b258:	0800b219 	.word	0x0800b219
 800b25c:	0800b3a9 	.word	0x0800b3a9
 800b260:	0800b2cd 	.word	0x0800b2cd
 800b264:	0800b38b 	.word	0x0800b38b
 800b268:	0800b219 	.word	0x0800b219
 800b26c:	0800b219 	.word	0x0800b219
 800b270:	0800b3cb 	.word	0x0800b3cb
 800b274:	0800b219 	.word	0x0800b219
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b219 	.word	0x0800b219
 800b280:	0800b219 	.word	0x0800b219
 800b284:	0800b393 	.word	0x0800b393
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	1d1a      	adds	r2, r3, #4
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	602a      	str	r2, [r5, #0]
 800b290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b298:	2301      	movs	r3, #1
 800b29a:	e0a3      	b.n	800b3e4 <_printf_i+0x1f4>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	6829      	ldr	r1, [r5, #0]
 800b2a0:	0606      	lsls	r6, r0, #24
 800b2a2:	f101 0304 	add.w	r3, r1, #4
 800b2a6:	d50a      	bpl.n	800b2be <_printf_i+0xce>
 800b2a8:	680e      	ldr	r6, [r1, #0]
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	2e00      	cmp	r6, #0
 800b2ae:	da03      	bge.n	800b2b8 <_printf_i+0xc8>
 800b2b0:	232d      	movs	r3, #45	; 0x2d
 800b2b2:	4276      	negs	r6, r6
 800b2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b8:	485e      	ldr	r0, [pc, #376]	; (800b434 <_printf_i+0x244>)
 800b2ba:	230a      	movs	r3, #10
 800b2bc:	e019      	b.n	800b2f2 <_printf_i+0x102>
 800b2be:	680e      	ldr	r6, [r1, #0]
 800b2c0:	602b      	str	r3, [r5, #0]
 800b2c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2c6:	bf18      	it	ne
 800b2c8:	b236      	sxthne	r6, r6
 800b2ca:	e7ef      	b.n	800b2ac <_printf_i+0xbc>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	6820      	ldr	r0, [r4, #0]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	6029      	str	r1, [r5, #0]
 800b2d4:	0601      	lsls	r1, r0, #24
 800b2d6:	d501      	bpl.n	800b2dc <_printf_i+0xec>
 800b2d8:	681e      	ldr	r6, [r3, #0]
 800b2da:	e002      	b.n	800b2e2 <_printf_i+0xf2>
 800b2dc:	0646      	lsls	r6, r0, #25
 800b2de:	d5fb      	bpl.n	800b2d8 <_printf_i+0xe8>
 800b2e0:	881e      	ldrh	r6, [r3, #0]
 800b2e2:	4854      	ldr	r0, [pc, #336]	; (800b434 <_printf_i+0x244>)
 800b2e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b2e6:	bf0c      	ite	eq
 800b2e8:	2308      	moveq	r3, #8
 800b2ea:	230a      	movne	r3, #10
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2f2:	6865      	ldr	r5, [r4, #4]
 800b2f4:	60a5      	str	r5, [r4, #8]
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	bfa2      	ittt	ge
 800b2fa:	6821      	ldrge	r1, [r4, #0]
 800b2fc:	f021 0104 	bicge.w	r1, r1, #4
 800b300:	6021      	strge	r1, [r4, #0]
 800b302:	b90e      	cbnz	r6, 800b308 <_printf_i+0x118>
 800b304:	2d00      	cmp	r5, #0
 800b306:	d04d      	beq.n	800b3a4 <_printf_i+0x1b4>
 800b308:	4615      	mov	r5, r2
 800b30a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b30e:	fb03 6711 	mls	r7, r3, r1, r6
 800b312:	5dc7      	ldrb	r7, [r0, r7]
 800b314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b318:	4637      	mov	r7, r6
 800b31a:	42bb      	cmp	r3, r7
 800b31c:	460e      	mov	r6, r1
 800b31e:	d9f4      	bls.n	800b30a <_printf_i+0x11a>
 800b320:	2b08      	cmp	r3, #8
 800b322:	d10b      	bne.n	800b33c <_printf_i+0x14c>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	07de      	lsls	r6, r3, #31
 800b328:	d508      	bpl.n	800b33c <_printf_i+0x14c>
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	6861      	ldr	r1, [r4, #4]
 800b32e:	4299      	cmp	r1, r3
 800b330:	bfde      	ittt	le
 800b332:	2330      	movle	r3, #48	; 0x30
 800b334:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b33c:	1b52      	subs	r2, r2, r5
 800b33e:	6122      	str	r2, [r4, #16]
 800b340:	f8cd a000 	str.w	sl, [sp]
 800b344:	464b      	mov	r3, r9
 800b346:	aa03      	add	r2, sp, #12
 800b348:	4621      	mov	r1, r4
 800b34a:	4640      	mov	r0, r8
 800b34c:	f7ff fee2 	bl	800b114 <_printf_common>
 800b350:	3001      	adds	r0, #1
 800b352:	d14c      	bne.n	800b3ee <_printf_i+0x1fe>
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	b004      	add	sp, #16
 800b35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35e:	4835      	ldr	r0, [pc, #212]	; (800b434 <_printf_i+0x244>)
 800b360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b364:	6829      	ldr	r1, [r5, #0]
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f851 6b04 	ldr.w	r6, [r1], #4
 800b36c:	6029      	str	r1, [r5, #0]
 800b36e:	061d      	lsls	r5, r3, #24
 800b370:	d514      	bpl.n	800b39c <_printf_i+0x1ac>
 800b372:	07df      	lsls	r7, r3, #31
 800b374:	bf44      	itt	mi
 800b376:	f043 0320 	orrmi.w	r3, r3, #32
 800b37a:	6023      	strmi	r3, [r4, #0]
 800b37c:	b91e      	cbnz	r6, 800b386 <_printf_i+0x196>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	f023 0320 	bic.w	r3, r3, #32
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	2310      	movs	r3, #16
 800b388:	e7b0      	b.n	800b2ec <_printf_i+0xfc>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	f043 0320 	orr.w	r3, r3, #32
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	2378      	movs	r3, #120	; 0x78
 800b394:	4828      	ldr	r0, [pc, #160]	; (800b438 <_printf_i+0x248>)
 800b396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b39a:	e7e3      	b.n	800b364 <_printf_i+0x174>
 800b39c:	0659      	lsls	r1, r3, #25
 800b39e:	bf48      	it	mi
 800b3a0:	b2b6      	uxthmi	r6, r6
 800b3a2:	e7e6      	b.n	800b372 <_printf_i+0x182>
 800b3a4:	4615      	mov	r5, r2
 800b3a6:	e7bb      	b.n	800b320 <_printf_i+0x130>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	6826      	ldr	r6, [r4, #0]
 800b3ac:	6961      	ldr	r1, [r4, #20]
 800b3ae:	1d18      	adds	r0, r3, #4
 800b3b0:	6028      	str	r0, [r5, #0]
 800b3b2:	0635      	lsls	r5, r6, #24
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	d501      	bpl.n	800b3bc <_printf_i+0x1cc>
 800b3b8:	6019      	str	r1, [r3, #0]
 800b3ba:	e002      	b.n	800b3c2 <_printf_i+0x1d2>
 800b3bc:	0670      	lsls	r0, r6, #25
 800b3be:	d5fb      	bpl.n	800b3b8 <_printf_i+0x1c8>
 800b3c0:	8019      	strh	r1, [r3, #0]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	4615      	mov	r5, r2
 800b3c8:	e7ba      	b.n	800b340 <_printf_i+0x150>
 800b3ca:	682b      	ldr	r3, [r5, #0]
 800b3cc:	1d1a      	adds	r2, r3, #4
 800b3ce:	602a      	str	r2, [r5, #0]
 800b3d0:	681d      	ldr	r5, [r3, #0]
 800b3d2:	6862      	ldr	r2, [r4, #4]
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f7f4 ff0a 	bl	80001f0 <memchr>
 800b3dc:	b108      	cbz	r0, 800b3e2 <_printf_i+0x1f2>
 800b3de:	1b40      	subs	r0, r0, r5
 800b3e0:	6060      	str	r0, [r4, #4]
 800b3e2:	6863      	ldr	r3, [r4, #4]
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ec:	e7a8      	b.n	800b340 <_printf_i+0x150>
 800b3ee:	6923      	ldr	r3, [r4, #16]
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	47d0      	blx	sl
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d0ab      	beq.n	800b354 <_printf_i+0x164>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	079b      	lsls	r3, r3, #30
 800b400:	d413      	bmi.n	800b42a <_printf_i+0x23a>
 800b402:	68e0      	ldr	r0, [r4, #12]
 800b404:	9b03      	ldr	r3, [sp, #12]
 800b406:	4298      	cmp	r0, r3
 800b408:	bfb8      	it	lt
 800b40a:	4618      	movlt	r0, r3
 800b40c:	e7a4      	b.n	800b358 <_printf_i+0x168>
 800b40e:	2301      	movs	r3, #1
 800b410:	4632      	mov	r2, r6
 800b412:	4649      	mov	r1, r9
 800b414:	4640      	mov	r0, r8
 800b416:	47d0      	blx	sl
 800b418:	3001      	adds	r0, #1
 800b41a:	d09b      	beq.n	800b354 <_printf_i+0x164>
 800b41c:	3501      	adds	r5, #1
 800b41e:	68e3      	ldr	r3, [r4, #12]
 800b420:	9903      	ldr	r1, [sp, #12]
 800b422:	1a5b      	subs	r3, r3, r1
 800b424:	42ab      	cmp	r3, r5
 800b426:	dcf2      	bgt.n	800b40e <_printf_i+0x21e>
 800b428:	e7eb      	b.n	800b402 <_printf_i+0x212>
 800b42a:	2500      	movs	r5, #0
 800b42c:	f104 0619 	add.w	r6, r4, #25
 800b430:	e7f5      	b.n	800b41e <_printf_i+0x22e>
 800b432:	bf00      	nop
 800b434:	080190f6 	.word	0x080190f6
 800b438:	08019107 	.word	0x08019107

0800b43c <siprintf>:
 800b43c:	b40e      	push	{r1, r2, r3}
 800b43e:	b500      	push	{lr}
 800b440:	b09c      	sub	sp, #112	; 0x70
 800b442:	ab1d      	add	r3, sp, #116	; 0x74
 800b444:	9002      	str	r0, [sp, #8]
 800b446:	9006      	str	r0, [sp, #24]
 800b448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b44c:	4809      	ldr	r0, [pc, #36]	; (800b474 <siprintf+0x38>)
 800b44e:	9107      	str	r1, [sp, #28]
 800b450:	9104      	str	r1, [sp, #16]
 800b452:	4909      	ldr	r1, [pc, #36]	; (800b478 <siprintf+0x3c>)
 800b454:	f853 2b04 	ldr.w	r2, [r3], #4
 800b458:	9105      	str	r1, [sp, #20]
 800b45a:	6800      	ldr	r0, [r0, #0]
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	a902      	add	r1, sp, #8
 800b460:	f001 fb78 	bl	800cb54 <_svfiprintf_r>
 800b464:	9b02      	ldr	r3, [sp, #8]
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	b01c      	add	sp, #112	; 0x70
 800b46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b470:	b003      	add	sp, #12
 800b472:	4770      	bx	lr
 800b474:	20000044 	.word	0x20000044
 800b478:	ffff0208 	.word	0xffff0208

0800b47c <quorem>:
 800b47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	6903      	ldr	r3, [r0, #16]
 800b482:	690c      	ldr	r4, [r1, #16]
 800b484:	42a3      	cmp	r3, r4
 800b486:	4607      	mov	r7, r0
 800b488:	f2c0 8081 	blt.w	800b58e <quorem+0x112>
 800b48c:	3c01      	subs	r4, #1
 800b48e:	f101 0814 	add.w	r8, r1, #20
 800b492:	f100 0514 	add.w	r5, r0, #20
 800b496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4b4:	d331      	bcc.n	800b51a <quorem+0x9e>
 800b4b6:	f04f 0e00 	mov.w	lr, #0
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	46ac      	mov	ip, r5
 800b4be:	46f2      	mov	sl, lr
 800b4c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4c4:	b293      	uxth	r3, r2
 800b4c6:	fb06 e303 	mla	r3, r6, r3, lr
 800b4ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	ebaa 0303 	sub.w	r3, sl, r3
 800b4d4:	f8dc a000 	ldr.w	sl, [ip]
 800b4d8:	0c12      	lsrs	r2, r2, #16
 800b4da:	fa13 f38a 	uxtah	r3, r3, sl
 800b4de:	fb06 e202 	mla	r2, r6, r2, lr
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4f8:	4581      	cmp	r9, r0
 800b4fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4fe:	f84c 3b04 	str.w	r3, [ip], #4
 800b502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b506:	d2db      	bcs.n	800b4c0 <quorem+0x44>
 800b508:	f855 300b 	ldr.w	r3, [r5, fp]
 800b50c:	b92b      	cbnz	r3, 800b51a <quorem+0x9e>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	3b04      	subs	r3, #4
 800b512:	429d      	cmp	r5, r3
 800b514:	461a      	mov	r2, r3
 800b516:	d32e      	bcc.n	800b576 <quorem+0xfa>
 800b518:	613c      	str	r4, [r7, #16]
 800b51a:	4638      	mov	r0, r7
 800b51c:	f001 f8c6 	bl	800c6ac <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	db24      	blt.n	800b56e <quorem+0xf2>
 800b524:	3601      	adds	r6, #1
 800b526:	4628      	mov	r0, r5
 800b528:	f04f 0c00 	mov.w	ip, #0
 800b52c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b530:	f8d0 e000 	ldr.w	lr, [r0]
 800b534:	b293      	uxth	r3, r2
 800b536:	ebac 0303 	sub.w	r3, ip, r3
 800b53a:	0c12      	lsrs	r2, r2, #16
 800b53c:	fa13 f38e 	uxtah	r3, r3, lr
 800b540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b548:	b29b      	uxth	r3, r3
 800b54a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b54e:	45c1      	cmp	r9, r8
 800b550:	f840 3b04 	str.w	r3, [r0], #4
 800b554:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b558:	d2e8      	bcs.n	800b52c <quorem+0xb0>
 800b55a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b562:	b922      	cbnz	r2, 800b56e <quorem+0xf2>
 800b564:	3b04      	subs	r3, #4
 800b566:	429d      	cmp	r5, r3
 800b568:	461a      	mov	r2, r3
 800b56a:	d30a      	bcc.n	800b582 <quorem+0x106>
 800b56c:	613c      	str	r4, [r7, #16]
 800b56e:	4630      	mov	r0, r6
 800b570:	b003      	add	sp, #12
 800b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b576:	6812      	ldr	r2, [r2, #0]
 800b578:	3b04      	subs	r3, #4
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	d1cc      	bne.n	800b518 <quorem+0x9c>
 800b57e:	3c01      	subs	r4, #1
 800b580:	e7c7      	b.n	800b512 <quorem+0x96>
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	3b04      	subs	r3, #4
 800b586:	2a00      	cmp	r2, #0
 800b588:	d1f0      	bne.n	800b56c <quorem+0xf0>
 800b58a:	3c01      	subs	r4, #1
 800b58c:	e7eb      	b.n	800b566 <quorem+0xea>
 800b58e:	2000      	movs	r0, #0
 800b590:	e7ee      	b.n	800b570 <quorem+0xf4>
 800b592:	0000      	movs	r0, r0
 800b594:	0000      	movs	r0, r0
	...

0800b598 <_dtoa_r>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	ed2d 8b04 	vpush	{d8-d9}
 800b5a0:	ec57 6b10 	vmov	r6, r7, d0
 800b5a4:	b093      	sub	sp, #76	; 0x4c
 800b5a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5ac:	9106      	str	r1, [sp, #24]
 800b5ae:	ee10 aa10 	vmov	sl, s0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5b6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5b8:	46bb      	mov	fp, r7
 800b5ba:	b975      	cbnz	r5, 800b5da <_dtoa_r+0x42>
 800b5bc:	2010      	movs	r0, #16
 800b5be:	f000 fddd 	bl	800c17c <malloc>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	6260      	str	r0, [r4, #36]	; 0x24
 800b5c6:	b920      	cbnz	r0, 800b5d2 <_dtoa_r+0x3a>
 800b5c8:	4ba7      	ldr	r3, [pc, #668]	; (800b868 <_dtoa_r+0x2d0>)
 800b5ca:	21ea      	movs	r1, #234	; 0xea
 800b5cc:	48a7      	ldr	r0, [pc, #668]	; (800b86c <_dtoa_r+0x2d4>)
 800b5ce:	f001 fbd1 	bl	800cd74 <__assert_func>
 800b5d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5d6:	6005      	str	r5, [r0, #0]
 800b5d8:	60c5      	str	r5, [r0, #12]
 800b5da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5dc:	6819      	ldr	r1, [r3, #0]
 800b5de:	b151      	cbz	r1, 800b5f6 <_dtoa_r+0x5e>
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	604a      	str	r2, [r1, #4]
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4093      	lsls	r3, r2
 800b5e8:	608b      	str	r3, [r1, #8]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fe1c 	bl	800c228 <_Bfree>
 800b5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	1e3b      	subs	r3, r7, #0
 800b5f8:	bfaa      	itet	ge
 800b5fa:	2300      	movge	r3, #0
 800b5fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b600:	f8c8 3000 	strge.w	r3, [r8]
 800b604:	4b9a      	ldr	r3, [pc, #616]	; (800b870 <_dtoa_r+0x2d8>)
 800b606:	bfbc      	itt	lt
 800b608:	2201      	movlt	r2, #1
 800b60a:	f8c8 2000 	strlt.w	r2, [r8]
 800b60e:	ea33 030b 	bics.w	r3, r3, fp
 800b612:	d11b      	bne.n	800b64c <_dtoa_r+0xb4>
 800b614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b616:	f242 730f 	movw	r3, #9999	; 0x270f
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b620:	4333      	orrs	r3, r6
 800b622:	f000 8592 	beq.w	800c14a <_dtoa_r+0xbb2>
 800b626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b628:	b963      	cbnz	r3, 800b644 <_dtoa_r+0xac>
 800b62a:	4b92      	ldr	r3, [pc, #584]	; (800b874 <_dtoa_r+0x2dc>)
 800b62c:	e022      	b.n	800b674 <_dtoa_r+0xdc>
 800b62e:	4b92      	ldr	r3, [pc, #584]	; (800b878 <_dtoa_r+0x2e0>)
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	3308      	adds	r3, #8
 800b634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	b013      	add	sp, #76	; 0x4c
 800b63c:	ecbd 8b04 	vpop	{d8-d9}
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b644:	4b8b      	ldr	r3, [pc, #556]	; (800b874 <_dtoa_r+0x2dc>)
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	3303      	adds	r3, #3
 800b64a:	e7f3      	b.n	800b634 <_dtoa_r+0x9c>
 800b64c:	2200      	movs	r2, #0
 800b64e:	2300      	movs	r3, #0
 800b650:	4650      	mov	r0, sl
 800b652:	4659      	mov	r1, fp
 800b654:	f7f5 fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 800b658:	ec4b ab19 	vmov	d9, sl, fp
 800b65c:	4680      	mov	r8, r0
 800b65e:	b158      	cbz	r0, 800b678 <_dtoa_r+0xe0>
 800b660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b662:	2301      	movs	r3, #1
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 856b 	beq.w	800c144 <_dtoa_r+0xbac>
 800b66e:	4883      	ldr	r0, [pc, #524]	; (800b87c <_dtoa_r+0x2e4>)
 800b670:	6018      	str	r0, [r3, #0]
 800b672:	1e43      	subs	r3, r0, #1
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	e7df      	b.n	800b638 <_dtoa_r+0xa0>
 800b678:	ec4b ab10 	vmov	d0, sl, fp
 800b67c:	aa10      	add	r2, sp, #64	; 0x40
 800b67e:	a911      	add	r1, sp, #68	; 0x44
 800b680:	4620      	mov	r0, r4
 800b682:	f001 f8b9 	bl	800c7f8 <__d2b>
 800b686:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b68a:	ee08 0a10 	vmov	s16, r0
 800b68e:	2d00      	cmp	r5, #0
 800b690:	f000 8084 	beq.w	800b79c <_dtoa_r+0x204>
 800b694:	ee19 3a90 	vmov	r3, s19
 800b698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b69c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b6a0:	4656      	mov	r6, sl
 800b6a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b6a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b6ae:	4b74      	ldr	r3, [pc, #464]	; (800b880 <_dtoa_r+0x2e8>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f4 fdef 	bl	8000298 <__aeabi_dsub>
 800b6ba:	a365      	add	r3, pc, #404	; (adr r3, 800b850 <_dtoa_r+0x2b8>)
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	f7f4 ffa2 	bl	8000608 <__aeabi_dmul>
 800b6c4:	a364      	add	r3, pc, #400	; (adr r3, 800b858 <_dtoa_r+0x2c0>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	f7f4 fde7 	bl	800029c <__adddf3>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	460f      	mov	r7, r1
 800b6d4:	f7f4 ff2e 	bl	8000534 <__aeabi_i2d>
 800b6d8:	a361      	add	r3, pc, #388	; (adr r3, 800b860 <_dtoa_r+0x2c8>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 ff93 	bl	8000608 <__aeabi_dmul>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f4 fdd7 	bl	800029c <__adddf3>
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	f7f5 fa39 	bl	8000b68 <__aeabi_d2iz>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	9000      	str	r0, [sp, #0]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f5 f9f4 	bl	8000aec <__aeabi_dcmplt>
 800b704:	b150      	cbz	r0, 800b71c <_dtoa_r+0x184>
 800b706:	9800      	ldr	r0, [sp, #0]
 800b708:	f7f4 ff14 	bl	8000534 <__aeabi_i2d>
 800b70c:	4632      	mov	r2, r6
 800b70e:	463b      	mov	r3, r7
 800b710:	f7f5 f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b714:	b910      	cbnz	r0, 800b71c <_dtoa_r+0x184>
 800b716:	9b00      	ldr	r3, [sp, #0]
 800b718:	3b01      	subs	r3, #1
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	9b00      	ldr	r3, [sp, #0]
 800b71e:	2b16      	cmp	r3, #22
 800b720:	d85a      	bhi.n	800b7d8 <_dtoa_r+0x240>
 800b722:	9a00      	ldr	r2, [sp, #0]
 800b724:	4b57      	ldr	r3, [pc, #348]	; (800b884 <_dtoa_r+0x2ec>)
 800b726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	ec51 0b19 	vmov	r0, r1, d9
 800b732:	f7f5 f9db 	bl	8000aec <__aeabi_dcmplt>
 800b736:	2800      	cmp	r0, #0
 800b738:	d050      	beq.n	800b7dc <_dtoa_r+0x244>
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	2300      	movs	r3, #0
 800b742:	930b      	str	r3, [sp, #44]	; 0x2c
 800b744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b746:	1b5d      	subs	r5, r3, r5
 800b748:	1e6b      	subs	r3, r5, #1
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	bf45      	ittet	mi
 800b74e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b752:	9304      	strmi	r3, [sp, #16]
 800b754:	2300      	movpl	r3, #0
 800b756:	2300      	movmi	r3, #0
 800b758:	bf4c      	ite	mi
 800b75a:	9305      	strmi	r3, [sp, #20]
 800b75c:	9304      	strpl	r3, [sp, #16]
 800b75e:	9b00      	ldr	r3, [sp, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	db3d      	blt.n	800b7e0 <_dtoa_r+0x248>
 800b764:	9b05      	ldr	r3, [sp, #20]
 800b766:	9a00      	ldr	r2, [sp, #0]
 800b768:	920a      	str	r2, [sp, #40]	; 0x28
 800b76a:	4413      	add	r3, r2
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	2300      	movs	r3, #0
 800b770:	9307      	str	r3, [sp, #28]
 800b772:	9b06      	ldr	r3, [sp, #24]
 800b774:	2b09      	cmp	r3, #9
 800b776:	f200 8089 	bhi.w	800b88c <_dtoa_r+0x2f4>
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	bfc4      	itt	gt
 800b77e:	3b04      	subgt	r3, #4
 800b780:	9306      	strgt	r3, [sp, #24]
 800b782:	9b06      	ldr	r3, [sp, #24]
 800b784:	f1a3 0302 	sub.w	r3, r3, #2
 800b788:	bfcc      	ite	gt
 800b78a:	2500      	movgt	r5, #0
 800b78c:	2501      	movle	r5, #1
 800b78e:	2b03      	cmp	r3, #3
 800b790:	f200 8087 	bhi.w	800b8a2 <_dtoa_r+0x30a>
 800b794:	e8df f003 	tbb	[pc, r3]
 800b798:	59383a2d 	.word	0x59383a2d
 800b79c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7a0:	441d      	add	r5, r3
 800b7a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7a6:	2b20      	cmp	r3, #32
 800b7a8:	bfc1      	itttt	gt
 800b7aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b7b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7ba:	bfda      	itte	le
 800b7bc:	f1c3 0320 	rsble	r3, r3, #32
 800b7c0:	fa06 f003 	lslle.w	r0, r6, r3
 800b7c4:	4318      	orrgt	r0, r3
 800b7c6:	f7f4 fea5 	bl	8000514 <__aeabi_ui2d>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7d2:	3d01      	subs	r5, #1
 800b7d4:	930e      	str	r3, [sp, #56]	; 0x38
 800b7d6:	e76a      	b.n	800b6ae <_dtoa_r+0x116>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e7b2      	b.n	800b742 <_dtoa_r+0x1aa>
 800b7dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7de:	e7b1      	b.n	800b744 <_dtoa_r+0x1ac>
 800b7e0:	9b04      	ldr	r3, [sp, #16]
 800b7e2:	9a00      	ldr	r2, [sp, #0]
 800b7e4:	1a9b      	subs	r3, r3, r2
 800b7e6:	9304      	str	r3, [sp, #16]
 800b7e8:	4253      	negs	r3, r2
 800b7ea:	9307      	str	r3, [sp, #28]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f0:	e7bf      	b.n	800b772 <_dtoa_r+0x1da>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9308      	str	r3, [sp, #32]
 800b7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dc55      	bgt.n	800b8a8 <_dtoa_r+0x310>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b802:	461a      	mov	r2, r3
 800b804:	9209      	str	r2, [sp, #36]	; 0x24
 800b806:	e00c      	b.n	800b822 <_dtoa_r+0x28a>
 800b808:	2301      	movs	r3, #1
 800b80a:	e7f3      	b.n	800b7f4 <_dtoa_r+0x25c>
 800b80c:	2300      	movs	r3, #0
 800b80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b810:	9308      	str	r3, [sp, #32]
 800b812:	9b00      	ldr	r3, [sp, #0]
 800b814:	4413      	add	r3, r2
 800b816:	9302      	str	r3, [sp, #8]
 800b818:	3301      	adds	r3, #1
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	9303      	str	r3, [sp, #12]
 800b81e:	bfb8      	it	lt
 800b820:	2301      	movlt	r3, #1
 800b822:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b824:	2200      	movs	r2, #0
 800b826:	6042      	str	r2, [r0, #4]
 800b828:	2204      	movs	r2, #4
 800b82a:	f102 0614 	add.w	r6, r2, #20
 800b82e:	429e      	cmp	r6, r3
 800b830:	6841      	ldr	r1, [r0, #4]
 800b832:	d93d      	bls.n	800b8b0 <_dtoa_r+0x318>
 800b834:	4620      	mov	r0, r4
 800b836:	f000 fcb7 	bl	800c1a8 <_Balloc>
 800b83a:	9001      	str	r0, [sp, #4]
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d13b      	bne.n	800b8b8 <_dtoa_r+0x320>
 800b840:	4b11      	ldr	r3, [pc, #68]	; (800b888 <_dtoa_r+0x2f0>)
 800b842:	4602      	mov	r2, r0
 800b844:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b848:	e6c0      	b.n	800b5cc <_dtoa_r+0x34>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e7df      	b.n	800b80e <_dtoa_r+0x276>
 800b84e:	bf00      	nop
 800b850:	636f4361 	.word	0x636f4361
 800b854:	3fd287a7 	.word	0x3fd287a7
 800b858:	8b60c8b3 	.word	0x8b60c8b3
 800b85c:	3fc68a28 	.word	0x3fc68a28
 800b860:	509f79fb 	.word	0x509f79fb
 800b864:	3fd34413 	.word	0x3fd34413
 800b868:	08019125 	.word	0x08019125
 800b86c:	0801913c 	.word	0x0801913c
 800b870:	7ff00000 	.word	0x7ff00000
 800b874:	08019121 	.word	0x08019121
 800b878:	08019118 	.word	0x08019118
 800b87c:	080190f5 	.word	0x080190f5
 800b880:	3ff80000 	.word	0x3ff80000
 800b884:	08019230 	.word	0x08019230
 800b888:	08019197 	.word	0x08019197
 800b88c:	2501      	movs	r5, #1
 800b88e:	2300      	movs	r3, #0
 800b890:	9306      	str	r3, [sp, #24]
 800b892:	9508      	str	r5, [sp, #32]
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
 800b898:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	2312      	movs	r3, #18
 800b8a0:	e7b0      	b.n	800b804 <_dtoa_r+0x26c>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	9308      	str	r3, [sp, #32]
 800b8a6:	e7f5      	b.n	800b894 <_dtoa_r+0x2fc>
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8ae:	e7b8      	b.n	800b822 <_dtoa_r+0x28a>
 800b8b0:	3101      	adds	r1, #1
 800b8b2:	6041      	str	r1, [r0, #4]
 800b8b4:	0052      	lsls	r2, r2, #1
 800b8b6:	e7b8      	b.n	800b82a <_dtoa_r+0x292>
 800b8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8ba:	9a01      	ldr	r2, [sp, #4]
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	2b0e      	cmp	r3, #14
 800b8c2:	f200 809d 	bhi.w	800ba00 <_dtoa_r+0x468>
 800b8c6:	2d00      	cmp	r5, #0
 800b8c8:	f000 809a 	beq.w	800ba00 <_dtoa_r+0x468>
 800b8cc:	9b00      	ldr	r3, [sp, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd32      	ble.n	800b938 <_dtoa_r+0x3a0>
 800b8d2:	4ab7      	ldr	r2, [pc, #732]	; (800bbb0 <_dtoa_r+0x618>)
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8e0:	9b00      	ldr	r3, [sp, #0]
 800b8e2:	05d8      	lsls	r0, r3, #23
 800b8e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b8e8:	d516      	bpl.n	800b918 <_dtoa_r+0x380>
 800b8ea:	4bb2      	ldr	r3, [pc, #712]	; (800bbb4 <_dtoa_r+0x61c>)
 800b8ec:	ec51 0b19 	vmov	r0, r1, d9
 800b8f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8f4:	f7f4 ffb2 	bl	800085c <__aeabi_ddiv>
 800b8f8:	f007 070f 	and.w	r7, r7, #15
 800b8fc:	4682      	mov	sl, r0
 800b8fe:	468b      	mov	fp, r1
 800b900:	2503      	movs	r5, #3
 800b902:	4eac      	ldr	r6, [pc, #688]	; (800bbb4 <_dtoa_r+0x61c>)
 800b904:	b957      	cbnz	r7, 800b91c <_dtoa_r+0x384>
 800b906:	4642      	mov	r2, r8
 800b908:	464b      	mov	r3, r9
 800b90a:	4650      	mov	r0, sl
 800b90c:	4659      	mov	r1, fp
 800b90e:	f7f4 ffa5 	bl	800085c <__aeabi_ddiv>
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	e028      	b.n	800b96a <_dtoa_r+0x3d2>
 800b918:	2502      	movs	r5, #2
 800b91a:	e7f2      	b.n	800b902 <_dtoa_r+0x36a>
 800b91c:	07f9      	lsls	r1, r7, #31
 800b91e:	d508      	bpl.n	800b932 <_dtoa_r+0x39a>
 800b920:	4640      	mov	r0, r8
 800b922:	4649      	mov	r1, r9
 800b924:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b928:	f7f4 fe6e 	bl	8000608 <__aeabi_dmul>
 800b92c:	3501      	adds	r5, #1
 800b92e:	4680      	mov	r8, r0
 800b930:	4689      	mov	r9, r1
 800b932:	107f      	asrs	r7, r7, #1
 800b934:	3608      	adds	r6, #8
 800b936:	e7e5      	b.n	800b904 <_dtoa_r+0x36c>
 800b938:	f000 809b 	beq.w	800ba72 <_dtoa_r+0x4da>
 800b93c:	9b00      	ldr	r3, [sp, #0]
 800b93e:	4f9d      	ldr	r7, [pc, #628]	; (800bbb4 <_dtoa_r+0x61c>)
 800b940:	425e      	negs	r6, r3
 800b942:	4b9b      	ldr	r3, [pc, #620]	; (800bbb0 <_dtoa_r+0x618>)
 800b944:	f006 020f 	and.w	r2, r6, #15
 800b948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	ec51 0b19 	vmov	r0, r1, d9
 800b954:	f7f4 fe58 	bl	8000608 <__aeabi_dmul>
 800b958:	1136      	asrs	r6, r6, #4
 800b95a:	4682      	mov	sl, r0
 800b95c:	468b      	mov	fp, r1
 800b95e:	2300      	movs	r3, #0
 800b960:	2502      	movs	r5, #2
 800b962:	2e00      	cmp	r6, #0
 800b964:	d17a      	bne.n	800ba5c <_dtoa_r+0x4c4>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1d3      	bne.n	800b912 <_dtoa_r+0x37a>
 800b96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 8082 	beq.w	800ba76 <_dtoa_r+0x4de>
 800b972:	4b91      	ldr	r3, [pc, #580]	; (800bbb8 <_dtoa_r+0x620>)
 800b974:	2200      	movs	r2, #0
 800b976:	4650      	mov	r0, sl
 800b978:	4659      	mov	r1, fp
 800b97a:	f7f5 f8b7 	bl	8000aec <__aeabi_dcmplt>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d079      	beq.n	800ba76 <_dtoa_r+0x4de>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d076      	beq.n	800ba76 <_dtoa_r+0x4de>
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dd36      	ble.n	800b9fc <_dtoa_r+0x464>
 800b98e:	9b00      	ldr	r3, [sp, #0]
 800b990:	4650      	mov	r0, sl
 800b992:	4659      	mov	r1, fp
 800b994:	1e5f      	subs	r7, r3, #1
 800b996:	2200      	movs	r2, #0
 800b998:	4b88      	ldr	r3, [pc, #544]	; (800bbbc <_dtoa_r+0x624>)
 800b99a:	f7f4 fe35 	bl	8000608 <__aeabi_dmul>
 800b99e:	9e02      	ldr	r6, [sp, #8]
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	468b      	mov	fp, r1
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7f4 fdc4 	bl	8000534 <__aeabi_i2d>
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	465b      	mov	r3, fp
 800b9b0:	f7f4 fe2a 	bl	8000608 <__aeabi_dmul>
 800b9b4:	4b82      	ldr	r3, [pc, #520]	; (800bbc0 <_dtoa_r+0x628>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f7f4 fc70 	bl	800029c <__adddf3>
 800b9bc:	46d0      	mov	r8, sl
 800b9be:	46d9      	mov	r9, fp
 800b9c0:	4682      	mov	sl, r0
 800b9c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	d158      	bne.n	800ba7c <_dtoa_r+0x4e4>
 800b9ca:	4b7e      	ldr	r3, [pc, #504]	; (800bbc4 <_dtoa_r+0x62c>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f4 fc61 	bl	8000298 <__aeabi_dsub>
 800b9d6:	4652      	mov	r2, sl
 800b9d8:	465b      	mov	r3, fp
 800b9da:	4680      	mov	r8, r0
 800b9dc:	4689      	mov	r9, r1
 800b9de:	f7f5 f8a3 	bl	8000b28 <__aeabi_dcmpgt>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f040 8295 	bne.w	800bf12 <_dtoa_r+0x97a>
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	f7f5 f87b 	bl	8000aec <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f040 8289 	bne.w	800bf0e <_dtoa_r+0x976>
 800b9fc:	ec5b ab19 	vmov	sl, fp, d9
 800ba00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f2c0 8148 	blt.w	800bc98 <_dtoa_r+0x700>
 800ba08:	9a00      	ldr	r2, [sp, #0]
 800ba0a:	2a0e      	cmp	r2, #14
 800ba0c:	f300 8144 	bgt.w	800bc98 <_dtoa_r+0x700>
 800ba10:	4b67      	ldr	r3, [pc, #412]	; (800bbb0 <_dtoa_r+0x618>)
 800ba12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f280 80d5 	bge.w	800bbcc <_dtoa_r+0x634>
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f300 80d1 	bgt.w	800bbcc <_dtoa_r+0x634>
 800ba2a:	f040 826f 	bne.w	800bf0c <_dtoa_r+0x974>
 800ba2e:	4b65      	ldr	r3, [pc, #404]	; (800bbc4 <_dtoa_r+0x62c>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f4 fde7 	bl	8000608 <__aeabi_dmul>
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	f7f5 f869 	bl	8000b14 <__aeabi_dcmpge>
 800ba42:	9e03      	ldr	r6, [sp, #12]
 800ba44:	4637      	mov	r7, r6
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f040 8245 	bne.w	800bed6 <_dtoa_r+0x93e>
 800ba4c:	9d01      	ldr	r5, [sp, #4]
 800ba4e:	2331      	movs	r3, #49	; 0x31
 800ba50:	f805 3b01 	strb.w	r3, [r5], #1
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	3301      	adds	r3, #1
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	e240      	b.n	800bede <_dtoa_r+0x946>
 800ba5c:	07f2      	lsls	r2, r6, #31
 800ba5e:	d505      	bpl.n	800ba6c <_dtoa_r+0x4d4>
 800ba60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba64:	f7f4 fdd0 	bl	8000608 <__aeabi_dmul>
 800ba68:	3501      	adds	r5, #1
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	1076      	asrs	r6, r6, #1
 800ba6e:	3708      	adds	r7, #8
 800ba70:	e777      	b.n	800b962 <_dtoa_r+0x3ca>
 800ba72:	2502      	movs	r5, #2
 800ba74:	e779      	b.n	800b96a <_dtoa_r+0x3d2>
 800ba76:	9f00      	ldr	r7, [sp, #0]
 800ba78:	9e03      	ldr	r6, [sp, #12]
 800ba7a:	e794      	b.n	800b9a6 <_dtoa_r+0x40e>
 800ba7c:	9901      	ldr	r1, [sp, #4]
 800ba7e:	4b4c      	ldr	r3, [pc, #304]	; (800bbb0 <_dtoa_r+0x618>)
 800ba80:	4431      	add	r1, r6
 800ba82:	910d      	str	r1, [sp, #52]	; 0x34
 800ba84:	9908      	ldr	r1, [sp, #32]
 800ba86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	d043      	beq.n	800bb1a <_dtoa_r+0x582>
 800ba92:	494d      	ldr	r1, [pc, #308]	; (800bbc8 <_dtoa_r+0x630>)
 800ba94:	2000      	movs	r0, #0
 800ba96:	f7f4 fee1 	bl	800085c <__aeabi_ddiv>
 800ba9a:	4652      	mov	r2, sl
 800ba9c:	465b      	mov	r3, fp
 800ba9e:	f7f4 fbfb 	bl	8000298 <__aeabi_dsub>
 800baa2:	9d01      	ldr	r5, [sp, #4]
 800baa4:	4682      	mov	sl, r0
 800baa6:	468b      	mov	fp, r1
 800baa8:	4649      	mov	r1, r9
 800baaa:	4640      	mov	r0, r8
 800baac:	f7f5 f85c 	bl	8000b68 <__aeabi_d2iz>
 800bab0:	4606      	mov	r6, r0
 800bab2:	f7f4 fd3f 	bl	8000534 <__aeabi_i2d>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f4 fbeb 	bl	8000298 <__aeabi_dsub>
 800bac2:	3630      	adds	r6, #48	; 0x30
 800bac4:	f805 6b01 	strb.w	r6, [r5], #1
 800bac8:	4652      	mov	r2, sl
 800baca:	465b      	mov	r3, fp
 800bacc:	4680      	mov	r8, r0
 800bace:	4689      	mov	r9, r1
 800bad0:	f7f5 f80c 	bl	8000aec <__aeabi_dcmplt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d163      	bne.n	800bba0 <_dtoa_r+0x608>
 800bad8:	4642      	mov	r2, r8
 800bada:	464b      	mov	r3, r9
 800badc:	4936      	ldr	r1, [pc, #216]	; (800bbb8 <_dtoa_r+0x620>)
 800bade:	2000      	movs	r0, #0
 800bae0:	f7f4 fbda 	bl	8000298 <__aeabi_dsub>
 800bae4:	4652      	mov	r2, sl
 800bae6:	465b      	mov	r3, fp
 800bae8:	f7f5 f800 	bl	8000aec <__aeabi_dcmplt>
 800baec:	2800      	cmp	r0, #0
 800baee:	f040 80b5 	bne.w	800bc5c <_dtoa_r+0x6c4>
 800baf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baf4:	429d      	cmp	r5, r3
 800baf6:	d081      	beq.n	800b9fc <_dtoa_r+0x464>
 800baf8:	4b30      	ldr	r3, [pc, #192]	; (800bbbc <_dtoa_r+0x624>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	4650      	mov	r0, sl
 800bafe:	4659      	mov	r1, fp
 800bb00:	f7f4 fd82 	bl	8000608 <__aeabi_dmul>
 800bb04:	4b2d      	ldr	r3, [pc, #180]	; (800bbbc <_dtoa_r+0x624>)
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f7f4 fd7a 	bl	8000608 <__aeabi_dmul>
 800bb14:	4680      	mov	r8, r0
 800bb16:	4689      	mov	r9, r1
 800bb18:	e7c6      	b.n	800baa8 <_dtoa_r+0x510>
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	4659      	mov	r1, fp
 800bb1e:	f7f4 fd73 	bl	8000608 <__aeabi_dmul>
 800bb22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb24:	9d01      	ldr	r5, [sp, #4]
 800bb26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f7f5 f81a 	bl	8000b68 <__aeabi_d2iz>
 800bb34:	4606      	mov	r6, r0
 800bb36:	f7f4 fcfd 	bl	8000534 <__aeabi_i2d>
 800bb3a:	3630      	adds	r6, #48	; 0x30
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	f7f4 fba8 	bl	8000298 <__aeabi_dsub>
 800bb48:	f805 6b01 	strb.w	r6, [r5], #1
 800bb4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb4e:	429d      	cmp	r5, r3
 800bb50:	4680      	mov	r8, r0
 800bb52:	4689      	mov	r9, r1
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	d124      	bne.n	800bba4 <_dtoa_r+0x60c>
 800bb5a:	4b1b      	ldr	r3, [pc, #108]	; (800bbc8 <_dtoa_r+0x630>)
 800bb5c:	4650      	mov	r0, sl
 800bb5e:	4659      	mov	r1, fp
 800bb60:	f7f4 fb9c 	bl	800029c <__adddf3>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4640      	mov	r0, r8
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7f4 ffdc 	bl	8000b28 <__aeabi_dcmpgt>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d173      	bne.n	800bc5c <_dtoa_r+0x6c4>
 800bb74:	4652      	mov	r2, sl
 800bb76:	465b      	mov	r3, fp
 800bb78:	4913      	ldr	r1, [pc, #76]	; (800bbc8 <_dtoa_r+0x630>)
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f7f4 fb8c 	bl	8000298 <__aeabi_dsub>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4640      	mov	r0, r8
 800bb86:	4649      	mov	r1, r9
 800bb88:	f7f4 ffb0 	bl	8000aec <__aeabi_dcmplt>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f43f af35 	beq.w	800b9fc <_dtoa_r+0x464>
 800bb92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb94:	1e6b      	subs	r3, r5, #1
 800bb96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb9c:	2b30      	cmp	r3, #48	; 0x30
 800bb9e:	d0f8      	beq.n	800bb92 <_dtoa_r+0x5fa>
 800bba0:	9700      	str	r7, [sp, #0]
 800bba2:	e049      	b.n	800bc38 <_dtoa_r+0x6a0>
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <_dtoa_r+0x624>)
 800bba6:	f7f4 fd2f 	bl	8000608 <__aeabi_dmul>
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	e7bd      	b.n	800bb2c <_dtoa_r+0x594>
 800bbb0:	08019230 	.word	0x08019230
 800bbb4:	08019208 	.word	0x08019208
 800bbb8:	3ff00000 	.word	0x3ff00000
 800bbbc:	40240000 	.word	0x40240000
 800bbc0:	401c0000 	.word	0x401c0000
 800bbc4:	40140000 	.word	0x40140000
 800bbc8:	3fe00000 	.word	0x3fe00000
 800bbcc:	9d01      	ldr	r5, [sp, #4]
 800bbce:	4656      	mov	r6, sl
 800bbd0:	465f      	mov	r7, fp
 800bbd2:	4642      	mov	r2, r8
 800bbd4:	464b      	mov	r3, r9
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 fe3f 	bl	800085c <__aeabi_ddiv>
 800bbde:	f7f4 ffc3 	bl	8000b68 <__aeabi_d2iz>
 800bbe2:	4682      	mov	sl, r0
 800bbe4:	f7f4 fca6 	bl	8000534 <__aeabi_i2d>
 800bbe8:	4642      	mov	r2, r8
 800bbea:	464b      	mov	r3, r9
 800bbec:	f7f4 fd0c 	bl	8000608 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bbfc:	f7f4 fb4c 	bl	8000298 <__aeabi_dsub>
 800bc00:	f805 6b01 	strb.w	r6, [r5], #1
 800bc04:	9e01      	ldr	r6, [sp, #4]
 800bc06:	9f03      	ldr	r7, [sp, #12]
 800bc08:	1bae      	subs	r6, r5, r6
 800bc0a:	42b7      	cmp	r7, r6
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	d135      	bne.n	800bc7e <_dtoa_r+0x6e6>
 800bc12:	f7f4 fb43 	bl	800029c <__adddf3>
 800bc16:	4642      	mov	r2, r8
 800bc18:	464b      	mov	r3, r9
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	f7f4 ff83 	bl	8000b28 <__aeabi_dcmpgt>
 800bc22:	b9d0      	cbnz	r0, 800bc5a <_dtoa_r+0x6c2>
 800bc24:	4642      	mov	r2, r8
 800bc26:	464b      	mov	r3, r9
 800bc28:	4630      	mov	r0, r6
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	f7f4 ff54 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc30:	b110      	cbz	r0, 800bc38 <_dtoa_r+0x6a0>
 800bc32:	f01a 0f01 	tst.w	sl, #1
 800bc36:	d110      	bne.n	800bc5a <_dtoa_r+0x6c2>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	ee18 1a10 	vmov	r1, s16
 800bc3e:	f000 faf3 	bl	800c228 <_Bfree>
 800bc42:	2300      	movs	r3, #0
 800bc44:	9800      	ldr	r0, [sp, #0]
 800bc46:	702b      	strb	r3, [r5, #0]
 800bc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	6018      	str	r0, [r3, #0]
 800bc4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f43f acf1 	beq.w	800b638 <_dtoa_r+0xa0>
 800bc56:	601d      	str	r5, [r3, #0]
 800bc58:	e4ee      	b.n	800b638 <_dtoa_r+0xa0>
 800bc5a:	9f00      	ldr	r7, [sp, #0]
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	461d      	mov	r5, r3
 800bc60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc64:	2a39      	cmp	r2, #57	; 0x39
 800bc66:	d106      	bne.n	800bc76 <_dtoa_r+0x6de>
 800bc68:	9a01      	ldr	r2, [sp, #4]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d1f7      	bne.n	800bc5e <_dtoa_r+0x6c6>
 800bc6e:	9901      	ldr	r1, [sp, #4]
 800bc70:	2230      	movs	r2, #48	; 0x30
 800bc72:	3701      	adds	r7, #1
 800bc74:	700a      	strb	r2, [r1, #0]
 800bc76:	781a      	ldrb	r2, [r3, #0]
 800bc78:	3201      	adds	r2, #1
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	e790      	b.n	800bba0 <_dtoa_r+0x608>
 800bc7e:	4ba6      	ldr	r3, [pc, #664]	; (800bf18 <_dtoa_r+0x980>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	f7f4 fcc1 	bl	8000608 <__aeabi_dmul>
 800bc86:	2200      	movs	r2, #0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	f7f4 ff23 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d09d      	beq.n	800bbd2 <_dtoa_r+0x63a>
 800bc96:	e7cf      	b.n	800bc38 <_dtoa_r+0x6a0>
 800bc98:	9a08      	ldr	r2, [sp, #32]
 800bc9a:	2a00      	cmp	r2, #0
 800bc9c:	f000 80d7 	beq.w	800be4e <_dtoa_r+0x8b6>
 800bca0:	9a06      	ldr	r2, [sp, #24]
 800bca2:	2a01      	cmp	r2, #1
 800bca4:	f300 80ba 	bgt.w	800be1c <_dtoa_r+0x884>
 800bca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcaa:	2a00      	cmp	r2, #0
 800bcac:	f000 80b2 	beq.w	800be14 <_dtoa_r+0x87c>
 800bcb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcb4:	9e07      	ldr	r6, [sp, #28]
 800bcb6:	9d04      	ldr	r5, [sp, #16]
 800bcb8:	9a04      	ldr	r2, [sp, #16]
 800bcba:	441a      	add	r2, r3
 800bcbc:	9204      	str	r2, [sp, #16]
 800bcbe:	9a05      	ldr	r2, [sp, #20]
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	441a      	add	r2, r3
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	9205      	str	r2, [sp, #20]
 800bcc8:	f000 fb66 	bl	800c398 <__i2b>
 800bccc:	4607      	mov	r7, r0
 800bcce:	2d00      	cmp	r5, #0
 800bcd0:	dd0c      	ble.n	800bcec <_dtoa_r+0x754>
 800bcd2:	9b05      	ldr	r3, [sp, #20]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd09      	ble.n	800bcec <_dtoa_r+0x754>
 800bcd8:	42ab      	cmp	r3, r5
 800bcda:	9a04      	ldr	r2, [sp, #16]
 800bcdc:	bfa8      	it	ge
 800bcde:	462b      	movge	r3, r5
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	9204      	str	r2, [sp, #16]
 800bce4:	9a05      	ldr	r2, [sp, #20]
 800bce6:	1aed      	subs	r5, r5, r3
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	b31b      	cbz	r3, 800bd38 <_dtoa_r+0x7a0>
 800bcf0:	9b08      	ldr	r3, [sp, #32]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80af 	beq.w	800be56 <_dtoa_r+0x8be>
 800bcf8:	2e00      	cmp	r6, #0
 800bcfa:	dd13      	ble.n	800bd24 <_dtoa_r+0x78c>
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4632      	mov	r2, r6
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 fc09 	bl	800c518 <__pow5mult>
 800bd06:	ee18 2a10 	vmov	r2, s16
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 fb58 	bl	800c3c4 <__multiply>
 800bd14:	ee18 1a10 	vmov	r1, s16
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 fa84 	bl	800c228 <_Bfree>
 800bd20:	ee08 8a10 	vmov	s16, r8
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	1b9a      	subs	r2, r3, r6
 800bd28:	d006      	beq.n	800bd38 <_dtoa_r+0x7a0>
 800bd2a:	ee18 1a10 	vmov	r1, s16
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 fbf2 	bl	800c518 <__pow5mult>
 800bd34:	ee08 0a10 	vmov	s16, r0
 800bd38:	2101      	movs	r1, #1
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fb2c 	bl	800c398 <__i2b>
 800bd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	4606      	mov	r6, r0
 800bd46:	f340 8088 	ble.w	800be5a <_dtoa_r+0x8c2>
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 fbe2 	bl	800c518 <__pow5mult>
 800bd54:	9b06      	ldr	r3, [sp, #24]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	4606      	mov	r6, r0
 800bd5a:	f340 8081 	ble.w	800be60 <_dtoa_r+0x8c8>
 800bd5e:	f04f 0800 	mov.w	r8, #0
 800bd62:	6933      	ldr	r3, [r6, #16]
 800bd64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd68:	6918      	ldr	r0, [r3, #16]
 800bd6a:	f000 fac5 	bl	800c2f8 <__hi0bits>
 800bd6e:	f1c0 0020 	rsb	r0, r0, #32
 800bd72:	9b05      	ldr	r3, [sp, #20]
 800bd74:	4418      	add	r0, r3
 800bd76:	f010 001f 	ands.w	r0, r0, #31
 800bd7a:	f000 8092 	beq.w	800bea2 <_dtoa_r+0x90a>
 800bd7e:	f1c0 0320 	rsb	r3, r0, #32
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	f340 808a 	ble.w	800be9c <_dtoa_r+0x904>
 800bd88:	f1c0 001c 	rsb	r0, r0, #28
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	4403      	add	r3, r0
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	9b05      	ldr	r3, [sp, #20]
 800bd94:	4403      	add	r3, r0
 800bd96:	4405      	add	r5, r0
 800bd98:	9305      	str	r3, [sp, #20]
 800bd9a:	9b04      	ldr	r3, [sp, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dd07      	ble.n	800bdb0 <_dtoa_r+0x818>
 800bda0:	ee18 1a10 	vmov	r1, s16
 800bda4:	461a      	mov	r2, r3
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 fc10 	bl	800c5cc <__lshift>
 800bdac:	ee08 0a10 	vmov	s16, r0
 800bdb0:	9b05      	ldr	r3, [sp, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	dd05      	ble.n	800bdc2 <_dtoa_r+0x82a>
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fc06 	bl	800c5cc <__lshift>
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d06e      	beq.n	800bea6 <_dtoa_r+0x90e>
 800bdc8:	ee18 0a10 	vmov	r0, s16
 800bdcc:	4631      	mov	r1, r6
 800bdce:	f000 fc6d 	bl	800c6ac <__mcmp>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	da67      	bge.n	800bea6 <_dtoa_r+0x90e>
 800bdd6:	9b00      	ldr	r3, [sp, #0]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	ee18 1a10 	vmov	r1, s16
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	220a      	movs	r2, #10
 800bde2:	2300      	movs	r3, #0
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fa41 	bl	800c26c <__multadd>
 800bdea:	9b08      	ldr	r3, [sp, #32]
 800bdec:	ee08 0a10 	vmov	s16, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 81b1 	beq.w	800c158 <_dtoa_r+0xbc0>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	220a      	movs	r2, #10
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f000 fa35 	bl	800c26c <__multadd>
 800be02:	9b02      	ldr	r3, [sp, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	4607      	mov	r7, r0
 800be08:	f300 808e 	bgt.w	800bf28 <_dtoa_r+0x990>
 800be0c:	9b06      	ldr	r3, [sp, #24]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	dc51      	bgt.n	800beb6 <_dtoa_r+0x91e>
 800be12:	e089      	b.n	800bf28 <_dtoa_r+0x990>
 800be14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be1a:	e74b      	b.n	800bcb4 <_dtoa_r+0x71c>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1e5e      	subs	r6, r3, #1
 800be20:	9b07      	ldr	r3, [sp, #28]
 800be22:	42b3      	cmp	r3, r6
 800be24:	bfbf      	itttt	lt
 800be26:	9b07      	ldrlt	r3, [sp, #28]
 800be28:	9607      	strlt	r6, [sp, #28]
 800be2a:	1af2      	sublt	r2, r6, r3
 800be2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be2e:	bfb6      	itet	lt
 800be30:	189b      	addlt	r3, r3, r2
 800be32:	1b9e      	subge	r6, r3, r6
 800be34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	bfb8      	it	lt
 800be3a:	2600      	movlt	r6, #0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfb7      	itett	lt
 800be40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be48:	1a9d      	sublt	r5, r3, r2
 800be4a:	2300      	movlt	r3, #0
 800be4c:	e734      	b.n	800bcb8 <_dtoa_r+0x720>
 800be4e:	9e07      	ldr	r6, [sp, #28]
 800be50:	9d04      	ldr	r5, [sp, #16]
 800be52:	9f08      	ldr	r7, [sp, #32]
 800be54:	e73b      	b.n	800bcce <_dtoa_r+0x736>
 800be56:	9a07      	ldr	r2, [sp, #28]
 800be58:	e767      	b.n	800bd2a <_dtoa_r+0x792>
 800be5a:	9b06      	ldr	r3, [sp, #24]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	dc18      	bgt.n	800be92 <_dtoa_r+0x8fa>
 800be60:	f1ba 0f00 	cmp.w	sl, #0
 800be64:	d115      	bne.n	800be92 <_dtoa_r+0x8fa>
 800be66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be6a:	b993      	cbnz	r3, 800be92 <_dtoa_r+0x8fa>
 800be6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be70:	0d1b      	lsrs	r3, r3, #20
 800be72:	051b      	lsls	r3, r3, #20
 800be74:	b183      	cbz	r3, 800be98 <_dtoa_r+0x900>
 800be76:	9b04      	ldr	r3, [sp, #16]
 800be78:	3301      	adds	r3, #1
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	9b05      	ldr	r3, [sp, #20]
 800be7e:	3301      	adds	r3, #1
 800be80:	9305      	str	r3, [sp, #20]
 800be82:	f04f 0801 	mov.w	r8, #1
 800be86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f47f af6a 	bne.w	800bd62 <_dtoa_r+0x7ca>
 800be8e:	2001      	movs	r0, #1
 800be90:	e76f      	b.n	800bd72 <_dtoa_r+0x7da>
 800be92:	f04f 0800 	mov.w	r8, #0
 800be96:	e7f6      	b.n	800be86 <_dtoa_r+0x8ee>
 800be98:	4698      	mov	r8, r3
 800be9a:	e7f4      	b.n	800be86 <_dtoa_r+0x8ee>
 800be9c:	f43f af7d 	beq.w	800bd9a <_dtoa_r+0x802>
 800bea0:	4618      	mov	r0, r3
 800bea2:	301c      	adds	r0, #28
 800bea4:	e772      	b.n	800bd8c <_dtoa_r+0x7f4>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dc37      	bgt.n	800bf1c <_dtoa_r+0x984>
 800beac:	9b06      	ldr	r3, [sp, #24]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	dd34      	ble.n	800bf1c <_dtoa_r+0x984>
 800beb2:	9b03      	ldr	r3, [sp, #12]
 800beb4:	9302      	str	r3, [sp, #8]
 800beb6:	9b02      	ldr	r3, [sp, #8]
 800beb8:	b96b      	cbnz	r3, 800bed6 <_dtoa_r+0x93e>
 800beba:	4631      	mov	r1, r6
 800bebc:	2205      	movs	r2, #5
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 f9d4 	bl	800c26c <__multadd>
 800bec4:	4601      	mov	r1, r0
 800bec6:	4606      	mov	r6, r0
 800bec8:	ee18 0a10 	vmov	r0, s16
 800becc:	f000 fbee 	bl	800c6ac <__mcmp>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	f73f adbb 	bgt.w	800ba4c <_dtoa_r+0x4b4>
 800bed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed8:	9d01      	ldr	r5, [sp, #4]
 800beda:	43db      	mvns	r3, r3
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	f04f 0800 	mov.w	r8, #0
 800bee2:	4631      	mov	r1, r6
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 f99f 	bl	800c228 <_Bfree>
 800beea:	2f00      	cmp	r7, #0
 800beec:	f43f aea4 	beq.w	800bc38 <_dtoa_r+0x6a0>
 800bef0:	f1b8 0f00 	cmp.w	r8, #0
 800bef4:	d005      	beq.n	800bf02 <_dtoa_r+0x96a>
 800bef6:	45b8      	cmp	r8, r7
 800bef8:	d003      	beq.n	800bf02 <_dtoa_r+0x96a>
 800befa:	4641      	mov	r1, r8
 800befc:	4620      	mov	r0, r4
 800befe:	f000 f993 	bl	800c228 <_Bfree>
 800bf02:	4639      	mov	r1, r7
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 f98f 	bl	800c228 <_Bfree>
 800bf0a:	e695      	b.n	800bc38 <_dtoa_r+0x6a0>
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	4637      	mov	r7, r6
 800bf10:	e7e1      	b.n	800bed6 <_dtoa_r+0x93e>
 800bf12:	9700      	str	r7, [sp, #0]
 800bf14:	4637      	mov	r7, r6
 800bf16:	e599      	b.n	800ba4c <_dtoa_r+0x4b4>
 800bf18:	40240000 	.word	0x40240000
 800bf1c:	9b08      	ldr	r3, [sp, #32]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 80ca 	beq.w	800c0b8 <_dtoa_r+0xb20>
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	9302      	str	r3, [sp, #8]
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	dd05      	ble.n	800bf38 <_dtoa_r+0x9a0>
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 fb4b 	bl	800c5cc <__lshift>
 800bf36:	4607      	mov	r7, r0
 800bf38:	f1b8 0f00 	cmp.w	r8, #0
 800bf3c:	d05b      	beq.n	800bff6 <_dtoa_r+0xa5e>
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 f931 	bl	800c1a8 <_Balloc>
 800bf46:	4605      	mov	r5, r0
 800bf48:	b928      	cbnz	r0, 800bf56 <_dtoa_r+0x9be>
 800bf4a:	4b87      	ldr	r3, [pc, #540]	; (800c168 <_dtoa_r+0xbd0>)
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf52:	f7ff bb3b 	b.w	800b5cc <_dtoa_r+0x34>
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	3202      	adds	r2, #2
 800bf5a:	0092      	lsls	r2, r2, #2
 800bf5c:	f107 010c 	add.w	r1, r7, #12
 800bf60:	300c      	adds	r0, #12
 800bf62:	f000 f913 	bl	800c18c <memcpy>
 800bf66:	2201      	movs	r2, #1
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 fb2e 	bl	800c5cc <__lshift>
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	f103 0901 	add.w	r9, r3, #1
 800bf76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	9305      	str	r3, [sp, #20]
 800bf7e:	f00a 0301 	and.w	r3, sl, #1
 800bf82:	46b8      	mov	r8, r7
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	4607      	mov	r7, r0
 800bf88:	4631      	mov	r1, r6
 800bf8a:	ee18 0a10 	vmov	r0, s16
 800bf8e:	f7ff fa75 	bl	800b47c <quorem>
 800bf92:	4641      	mov	r1, r8
 800bf94:	9002      	str	r0, [sp, #8]
 800bf96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf9a:	ee18 0a10 	vmov	r0, s16
 800bf9e:	f000 fb85 	bl	800c6ac <__mcmp>
 800bfa2:	463a      	mov	r2, r7
 800bfa4:	9003      	str	r0, [sp, #12]
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 fb9b 	bl	800c6e4 <__mdiff>
 800bfae:	68c2      	ldr	r2, [r0, #12]
 800bfb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	bb02      	cbnz	r2, 800bffa <_dtoa_r+0xa62>
 800bfb8:	4601      	mov	r1, r0
 800bfba:	ee18 0a10 	vmov	r0, s16
 800bfbe:	f000 fb75 	bl	800c6ac <__mcmp>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	9207      	str	r2, [sp, #28]
 800bfca:	f000 f92d 	bl	800c228 <_Bfree>
 800bfce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bfd2:	ea43 0102 	orr.w	r1, r3, r2
 800bfd6:	9b04      	ldr	r3, [sp, #16]
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	464d      	mov	r5, r9
 800bfdc:	d10f      	bne.n	800bffe <_dtoa_r+0xa66>
 800bfde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfe2:	d02a      	beq.n	800c03a <_dtoa_r+0xaa2>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	dd02      	ble.n	800bff0 <_dtoa_r+0xa58>
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bff0:	f88b a000 	strb.w	sl, [fp]
 800bff4:	e775      	b.n	800bee2 <_dtoa_r+0x94a>
 800bff6:	4638      	mov	r0, r7
 800bff8:	e7ba      	b.n	800bf70 <_dtoa_r+0x9d8>
 800bffa:	2201      	movs	r2, #1
 800bffc:	e7e2      	b.n	800bfc4 <_dtoa_r+0xa2c>
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	db04      	blt.n	800c00e <_dtoa_r+0xa76>
 800c004:	9906      	ldr	r1, [sp, #24]
 800c006:	430b      	orrs	r3, r1
 800c008:	9904      	ldr	r1, [sp, #16]
 800c00a:	430b      	orrs	r3, r1
 800c00c:	d122      	bne.n	800c054 <_dtoa_r+0xabc>
 800c00e:	2a00      	cmp	r2, #0
 800c010:	ddee      	ble.n	800bff0 <_dtoa_r+0xa58>
 800c012:	ee18 1a10 	vmov	r1, s16
 800c016:	2201      	movs	r2, #1
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 fad7 	bl	800c5cc <__lshift>
 800c01e:	4631      	mov	r1, r6
 800c020:	ee08 0a10 	vmov	s16, r0
 800c024:	f000 fb42 	bl	800c6ac <__mcmp>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dc03      	bgt.n	800c034 <_dtoa_r+0xa9c>
 800c02c:	d1e0      	bne.n	800bff0 <_dtoa_r+0xa58>
 800c02e:	f01a 0f01 	tst.w	sl, #1
 800c032:	d0dd      	beq.n	800bff0 <_dtoa_r+0xa58>
 800c034:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c038:	d1d7      	bne.n	800bfea <_dtoa_r+0xa52>
 800c03a:	2339      	movs	r3, #57	; 0x39
 800c03c:	f88b 3000 	strb.w	r3, [fp]
 800c040:	462b      	mov	r3, r5
 800c042:	461d      	mov	r5, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c04a:	2a39      	cmp	r2, #57	; 0x39
 800c04c:	d071      	beq.n	800c132 <_dtoa_r+0xb9a>
 800c04e:	3201      	adds	r2, #1
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	e746      	b.n	800bee2 <_dtoa_r+0x94a>
 800c054:	2a00      	cmp	r2, #0
 800c056:	dd07      	ble.n	800c068 <_dtoa_r+0xad0>
 800c058:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c05c:	d0ed      	beq.n	800c03a <_dtoa_r+0xaa2>
 800c05e:	f10a 0301 	add.w	r3, sl, #1
 800c062:	f88b 3000 	strb.w	r3, [fp]
 800c066:	e73c      	b.n	800bee2 <_dtoa_r+0x94a>
 800c068:	9b05      	ldr	r3, [sp, #20]
 800c06a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c06e:	4599      	cmp	r9, r3
 800c070:	d047      	beq.n	800c102 <_dtoa_r+0xb6a>
 800c072:	ee18 1a10 	vmov	r1, s16
 800c076:	2300      	movs	r3, #0
 800c078:	220a      	movs	r2, #10
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 f8f6 	bl	800c26c <__multadd>
 800c080:	45b8      	cmp	r8, r7
 800c082:	ee08 0a10 	vmov	s16, r0
 800c086:	f04f 0300 	mov.w	r3, #0
 800c08a:	f04f 020a 	mov.w	r2, #10
 800c08e:	4641      	mov	r1, r8
 800c090:	4620      	mov	r0, r4
 800c092:	d106      	bne.n	800c0a2 <_dtoa_r+0xb0a>
 800c094:	f000 f8ea 	bl	800c26c <__multadd>
 800c098:	4680      	mov	r8, r0
 800c09a:	4607      	mov	r7, r0
 800c09c:	f109 0901 	add.w	r9, r9, #1
 800c0a0:	e772      	b.n	800bf88 <_dtoa_r+0x9f0>
 800c0a2:	f000 f8e3 	bl	800c26c <__multadd>
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	220a      	movs	r2, #10
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 f8dc 	bl	800c26c <__multadd>
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	e7f1      	b.n	800c09c <_dtoa_r+0xb04>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	9302      	str	r3, [sp, #8]
 800c0bc:	9d01      	ldr	r5, [sp, #4]
 800c0be:	ee18 0a10 	vmov	r0, s16
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	f7ff f9da 	bl	800b47c <quorem>
 800c0c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	f805 ab01 	strb.w	sl, [r5], #1
 800c0d2:	1aea      	subs	r2, r5, r3
 800c0d4:	9b02      	ldr	r3, [sp, #8]
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	dd09      	ble.n	800c0ee <_dtoa_r+0xb56>
 800c0da:	ee18 1a10 	vmov	r1, s16
 800c0de:	2300      	movs	r3, #0
 800c0e0:	220a      	movs	r2, #10
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 f8c2 	bl	800c26c <__multadd>
 800c0e8:	ee08 0a10 	vmov	s16, r0
 800c0ec:	e7e7      	b.n	800c0be <_dtoa_r+0xb26>
 800c0ee:	9b02      	ldr	r3, [sp, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bfc8      	it	gt
 800c0f4:	461d      	movgt	r5, r3
 800c0f6:	9b01      	ldr	r3, [sp, #4]
 800c0f8:	bfd8      	it	le
 800c0fa:	2501      	movle	r5, #1
 800c0fc:	441d      	add	r5, r3
 800c0fe:	f04f 0800 	mov.w	r8, #0
 800c102:	ee18 1a10 	vmov	r1, s16
 800c106:	2201      	movs	r2, #1
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 fa5f 	bl	800c5cc <__lshift>
 800c10e:	4631      	mov	r1, r6
 800c110:	ee08 0a10 	vmov	s16, r0
 800c114:	f000 faca 	bl	800c6ac <__mcmp>
 800c118:	2800      	cmp	r0, #0
 800c11a:	dc91      	bgt.n	800c040 <_dtoa_r+0xaa8>
 800c11c:	d102      	bne.n	800c124 <_dtoa_r+0xb8c>
 800c11e:	f01a 0f01 	tst.w	sl, #1
 800c122:	d18d      	bne.n	800c040 <_dtoa_r+0xaa8>
 800c124:	462b      	mov	r3, r5
 800c126:	461d      	mov	r5, r3
 800c128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c12c:	2a30      	cmp	r2, #48	; 0x30
 800c12e:	d0fa      	beq.n	800c126 <_dtoa_r+0xb8e>
 800c130:	e6d7      	b.n	800bee2 <_dtoa_r+0x94a>
 800c132:	9a01      	ldr	r2, [sp, #4]
 800c134:	429a      	cmp	r2, r3
 800c136:	d184      	bne.n	800c042 <_dtoa_r+0xaaa>
 800c138:	9b00      	ldr	r3, [sp, #0]
 800c13a:	3301      	adds	r3, #1
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	2331      	movs	r3, #49	; 0x31
 800c140:	7013      	strb	r3, [r2, #0]
 800c142:	e6ce      	b.n	800bee2 <_dtoa_r+0x94a>
 800c144:	4b09      	ldr	r3, [pc, #36]	; (800c16c <_dtoa_r+0xbd4>)
 800c146:	f7ff ba95 	b.w	800b674 <_dtoa_r+0xdc>
 800c14a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f47f aa6e 	bne.w	800b62e <_dtoa_r+0x96>
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <_dtoa_r+0xbd8>)
 800c154:	f7ff ba8e 	b.w	800b674 <_dtoa_r+0xdc>
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	dcae      	bgt.n	800c0bc <_dtoa_r+0xb24>
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	2b02      	cmp	r3, #2
 800c162:	f73f aea8 	bgt.w	800beb6 <_dtoa_r+0x91e>
 800c166:	e7a9      	b.n	800c0bc <_dtoa_r+0xb24>
 800c168:	08019197 	.word	0x08019197
 800c16c:	080190f4 	.word	0x080190f4
 800c170:	08019118 	.word	0x08019118

0800c174 <_localeconv_r>:
 800c174:	4800      	ldr	r0, [pc, #0]	; (800c178 <_localeconv_r+0x4>)
 800c176:	4770      	bx	lr
 800c178:	20000198 	.word	0x20000198

0800c17c <malloc>:
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <malloc+0xc>)
 800c17e:	4601      	mov	r1, r0
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	f000 bc17 	b.w	800c9b4 <_malloc_r>
 800c186:	bf00      	nop
 800c188:	20000044 	.word	0x20000044

0800c18c <memcpy>:
 800c18c:	440a      	add	r2, r1
 800c18e:	4291      	cmp	r1, r2
 800c190:	f100 33ff 	add.w	r3, r0, #4294967295
 800c194:	d100      	bne.n	800c198 <memcpy+0xc>
 800c196:	4770      	bx	lr
 800c198:	b510      	push	{r4, lr}
 800c19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c19e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a2:	4291      	cmp	r1, r2
 800c1a4:	d1f9      	bne.n	800c19a <memcpy+0xe>
 800c1a6:	bd10      	pop	{r4, pc}

0800c1a8 <_Balloc>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	460d      	mov	r5, r1
 800c1b0:	b976      	cbnz	r6, 800c1d0 <_Balloc+0x28>
 800c1b2:	2010      	movs	r0, #16
 800c1b4:	f7ff ffe2 	bl	800c17c <malloc>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	6260      	str	r0, [r4, #36]	; 0x24
 800c1bc:	b920      	cbnz	r0, 800c1c8 <_Balloc+0x20>
 800c1be:	4b18      	ldr	r3, [pc, #96]	; (800c220 <_Balloc+0x78>)
 800c1c0:	4818      	ldr	r0, [pc, #96]	; (800c224 <_Balloc+0x7c>)
 800c1c2:	2166      	movs	r1, #102	; 0x66
 800c1c4:	f000 fdd6 	bl	800cd74 <__assert_func>
 800c1c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1cc:	6006      	str	r6, [r0, #0]
 800c1ce:	60c6      	str	r6, [r0, #12]
 800c1d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1d2:	68f3      	ldr	r3, [r6, #12]
 800c1d4:	b183      	cbz	r3, 800c1f8 <_Balloc+0x50>
 800c1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1de:	b9b8      	cbnz	r0, 800c210 <_Balloc+0x68>
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c1e6:	1d72      	adds	r2, r6, #5
 800c1e8:	0092      	lsls	r2, r2, #2
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 fb60 	bl	800c8b0 <_calloc_r>
 800c1f0:	b160      	cbz	r0, 800c20c <_Balloc+0x64>
 800c1f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1f6:	e00e      	b.n	800c216 <_Balloc+0x6e>
 800c1f8:	2221      	movs	r2, #33	; 0x21
 800c1fa:	2104      	movs	r1, #4
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 fb57 	bl	800c8b0 <_calloc_r>
 800c202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c204:	60f0      	str	r0, [r6, #12]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e4      	bne.n	800c1d6 <_Balloc+0x2e>
 800c20c:	2000      	movs	r0, #0
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	6802      	ldr	r2, [r0, #0]
 800c212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c216:	2300      	movs	r3, #0
 800c218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c21c:	e7f7      	b.n	800c20e <_Balloc+0x66>
 800c21e:	bf00      	nop
 800c220:	08019125 	.word	0x08019125
 800c224:	080191a8 	.word	0x080191a8

0800c228 <_Bfree>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c22c:	4605      	mov	r5, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	b976      	cbnz	r6, 800c250 <_Bfree+0x28>
 800c232:	2010      	movs	r0, #16
 800c234:	f7ff ffa2 	bl	800c17c <malloc>
 800c238:	4602      	mov	r2, r0
 800c23a:	6268      	str	r0, [r5, #36]	; 0x24
 800c23c:	b920      	cbnz	r0, 800c248 <_Bfree+0x20>
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <_Bfree+0x3c>)
 800c240:	4809      	ldr	r0, [pc, #36]	; (800c268 <_Bfree+0x40>)
 800c242:	218a      	movs	r1, #138	; 0x8a
 800c244:	f000 fd96 	bl	800cd74 <__assert_func>
 800c248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c24c:	6006      	str	r6, [r0, #0]
 800c24e:	60c6      	str	r6, [r0, #12]
 800c250:	b13c      	cbz	r4, 800c262 <_Bfree+0x3a>
 800c252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c254:	6862      	ldr	r2, [r4, #4]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c25c:	6021      	str	r1, [r4, #0]
 800c25e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	08019125 	.word	0x08019125
 800c268:	080191a8 	.word	0x080191a8

0800c26c <__multadd>:
 800c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c270:	690d      	ldr	r5, [r1, #16]
 800c272:	4607      	mov	r7, r0
 800c274:	460c      	mov	r4, r1
 800c276:	461e      	mov	r6, r3
 800c278:	f101 0c14 	add.w	ip, r1, #20
 800c27c:	2000      	movs	r0, #0
 800c27e:	f8dc 3000 	ldr.w	r3, [ip]
 800c282:	b299      	uxth	r1, r3
 800c284:	fb02 6101 	mla	r1, r2, r1, r6
 800c288:	0c1e      	lsrs	r6, r3, #16
 800c28a:	0c0b      	lsrs	r3, r1, #16
 800c28c:	fb02 3306 	mla	r3, r2, r6, r3
 800c290:	b289      	uxth	r1, r1
 800c292:	3001      	adds	r0, #1
 800c294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c298:	4285      	cmp	r5, r0
 800c29a:	f84c 1b04 	str.w	r1, [ip], #4
 800c29e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2a2:	dcec      	bgt.n	800c27e <__multadd+0x12>
 800c2a4:	b30e      	cbz	r6, 800c2ea <__multadd+0x7e>
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	42ab      	cmp	r3, r5
 800c2aa:	dc19      	bgt.n	800c2e0 <__multadd+0x74>
 800c2ac:	6861      	ldr	r1, [r4, #4]
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	3101      	adds	r1, #1
 800c2b2:	f7ff ff79 	bl	800c1a8 <_Balloc>
 800c2b6:	4680      	mov	r8, r0
 800c2b8:	b928      	cbnz	r0, 800c2c6 <__multadd+0x5a>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <__multadd+0x84>)
 800c2be:	480d      	ldr	r0, [pc, #52]	; (800c2f4 <__multadd+0x88>)
 800c2c0:	21b5      	movs	r1, #181	; 0xb5
 800c2c2:	f000 fd57 	bl	800cd74 <__assert_func>
 800c2c6:	6922      	ldr	r2, [r4, #16]
 800c2c8:	3202      	adds	r2, #2
 800c2ca:	f104 010c 	add.w	r1, r4, #12
 800c2ce:	0092      	lsls	r2, r2, #2
 800c2d0:	300c      	adds	r0, #12
 800c2d2:	f7ff ff5b 	bl	800c18c <memcpy>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7ff ffa5 	bl	800c228 <_Bfree>
 800c2de:	4644      	mov	r4, r8
 800c2e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	615e      	str	r6, [r3, #20]
 800c2e8:	6125      	str	r5, [r4, #16]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f0:	08019197 	.word	0x08019197
 800c2f4:	080191a8 	.word	0x080191a8

0800c2f8 <__hi0bits>:
 800c2f8:	0c03      	lsrs	r3, r0, #16
 800c2fa:	041b      	lsls	r3, r3, #16
 800c2fc:	b9d3      	cbnz	r3, 800c334 <__hi0bits+0x3c>
 800c2fe:	0400      	lsls	r0, r0, #16
 800c300:	2310      	movs	r3, #16
 800c302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c306:	bf04      	itt	eq
 800c308:	0200      	lsleq	r0, r0, #8
 800c30a:	3308      	addeq	r3, #8
 800c30c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c310:	bf04      	itt	eq
 800c312:	0100      	lsleq	r0, r0, #4
 800c314:	3304      	addeq	r3, #4
 800c316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c31a:	bf04      	itt	eq
 800c31c:	0080      	lsleq	r0, r0, #2
 800c31e:	3302      	addeq	r3, #2
 800c320:	2800      	cmp	r0, #0
 800c322:	db05      	blt.n	800c330 <__hi0bits+0x38>
 800c324:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c328:	f103 0301 	add.w	r3, r3, #1
 800c32c:	bf08      	it	eq
 800c32e:	2320      	moveq	r3, #32
 800c330:	4618      	mov	r0, r3
 800c332:	4770      	bx	lr
 800c334:	2300      	movs	r3, #0
 800c336:	e7e4      	b.n	800c302 <__hi0bits+0xa>

0800c338 <__lo0bits>:
 800c338:	6803      	ldr	r3, [r0, #0]
 800c33a:	f013 0207 	ands.w	r2, r3, #7
 800c33e:	4601      	mov	r1, r0
 800c340:	d00b      	beq.n	800c35a <__lo0bits+0x22>
 800c342:	07da      	lsls	r2, r3, #31
 800c344:	d423      	bmi.n	800c38e <__lo0bits+0x56>
 800c346:	0798      	lsls	r0, r3, #30
 800c348:	bf49      	itett	mi
 800c34a:	085b      	lsrmi	r3, r3, #1
 800c34c:	089b      	lsrpl	r3, r3, #2
 800c34e:	2001      	movmi	r0, #1
 800c350:	600b      	strmi	r3, [r1, #0]
 800c352:	bf5c      	itt	pl
 800c354:	600b      	strpl	r3, [r1, #0]
 800c356:	2002      	movpl	r0, #2
 800c358:	4770      	bx	lr
 800c35a:	b298      	uxth	r0, r3
 800c35c:	b9a8      	cbnz	r0, 800c38a <__lo0bits+0x52>
 800c35e:	0c1b      	lsrs	r3, r3, #16
 800c360:	2010      	movs	r0, #16
 800c362:	b2da      	uxtb	r2, r3
 800c364:	b90a      	cbnz	r2, 800c36a <__lo0bits+0x32>
 800c366:	3008      	adds	r0, #8
 800c368:	0a1b      	lsrs	r3, r3, #8
 800c36a:	071a      	lsls	r2, r3, #28
 800c36c:	bf04      	itt	eq
 800c36e:	091b      	lsreq	r3, r3, #4
 800c370:	3004      	addeq	r0, #4
 800c372:	079a      	lsls	r2, r3, #30
 800c374:	bf04      	itt	eq
 800c376:	089b      	lsreq	r3, r3, #2
 800c378:	3002      	addeq	r0, #2
 800c37a:	07da      	lsls	r2, r3, #31
 800c37c:	d403      	bmi.n	800c386 <__lo0bits+0x4e>
 800c37e:	085b      	lsrs	r3, r3, #1
 800c380:	f100 0001 	add.w	r0, r0, #1
 800c384:	d005      	beq.n	800c392 <__lo0bits+0x5a>
 800c386:	600b      	str	r3, [r1, #0]
 800c388:	4770      	bx	lr
 800c38a:	4610      	mov	r0, r2
 800c38c:	e7e9      	b.n	800c362 <__lo0bits+0x2a>
 800c38e:	2000      	movs	r0, #0
 800c390:	4770      	bx	lr
 800c392:	2020      	movs	r0, #32
 800c394:	4770      	bx	lr
	...

0800c398 <__i2b>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	460c      	mov	r4, r1
 800c39c:	2101      	movs	r1, #1
 800c39e:	f7ff ff03 	bl	800c1a8 <_Balloc>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	b928      	cbnz	r0, 800c3b2 <__i2b+0x1a>
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <__i2b+0x24>)
 800c3a8:	4805      	ldr	r0, [pc, #20]	; (800c3c0 <__i2b+0x28>)
 800c3aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3ae:	f000 fce1 	bl	800cd74 <__assert_func>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	6144      	str	r4, [r0, #20]
 800c3b6:	6103      	str	r3, [r0, #16]
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	bf00      	nop
 800c3bc:	08019197 	.word	0x08019197
 800c3c0:	080191a8 	.word	0x080191a8

0800c3c4 <__multiply>:
 800c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c8:	4691      	mov	r9, r2
 800c3ca:	690a      	ldr	r2, [r1, #16]
 800c3cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	bfb8      	it	lt
 800c3d4:	460b      	movlt	r3, r1
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	bfbc      	itt	lt
 800c3da:	464c      	movlt	r4, r9
 800c3dc:	4699      	movlt	r9, r3
 800c3de:	6927      	ldr	r7, [r4, #16]
 800c3e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3e4:	68a3      	ldr	r3, [r4, #8]
 800c3e6:	6861      	ldr	r1, [r4, #4]
 800c3e8:	eb07 060a 	add.w	r6, r7, sl
 800c3ec:	42b3      	cmp	r3, r6
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	bfb8      	it	lt
 800c3f2:	3101      	addlt	r1, #1
 800c3f4:	f7ff fed8 	bl	800c1a8 <_Balloc>
 800c3f8:	b930      	cbnz	r0, 800c408 <__multiply+0x44>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	4b44      	ldr	r3, [pc, #272]	; (800c510 <__multiply+0x14c>)
 800c3fe:	4845      	ldr	r0, [pc, #276]	; (800c514 <__multiply+0x150>)
 800c400:	f240 115d 	movw	r1, #349	; 0x15d
 800c404:	f000 fcb6 	bl	800cd74 <__assert_func>
 800c408:	f100 0514 	add.w	r5, r0, #20
 800c40c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c410:	462b      	mov	r3, r5
 800c412:	2200      	movs	r2, #0
 800c414:	4543      	cmp	r3, r8
 800c416:	d321      	bcc.n	800c45c <__multiply+0x98>
 800c418:	f104 0314 	add.w	r3, r4, #20
 800c41c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c420:	f109 0314 	add.w	r3, r9, #20
 800c424:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c428:	9202      	str	r2, [sp, #8]
 800c42a:	1b3a      	subs	r2, r7, r4
 800c42c:	3a15      	subs	r2, #21
 800c42e:	f022 0203 	bic.w	r2, r2, #3
 800c432:	3204      	adds	r2, #4
 800c434:	f104 0115 	add.w	r1, r4, #21
 800c438:	428f      	cmp	r7, r1
 800c43a:	bf38      	it	cc
 800c43c:	2204      	movcc	r2, #4
 800c43e:	9201      	str	r2, [sp, #4]
 800c440:	9a02      	ldr	r2, [sp, #8]
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	429a      	cmp	r2, r3
 800c446:	d80c      	bhi.n	800c462 <__multiply+0x9e>
 800c448:	2e00      	cmp	r6, #0
 800c44a:	dd03      	ble.n	800c454 <__multiply+0x90>
 800c44c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c450:	2b00      	cmp	r3, #0
 800c452:	d05a      	beq.n	800c50a <__multiply+0x146>
 800c454:	6106      	str	r6, [r0, #16]
 800c456:	b005      	add	sp, #20
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	f843 2b04 	str.w	r2, [r3], #4
 800c460:	e7d8      	b.n	800c414 <__multiply+0x50>
 800c462:	f8b3 a000 	ldrh.w	sl, [r3]
 800c466:	f1ba 0f00 	cmp.w	sl, #0
 800c46a:	d024      	beq.n	800c4b6 <__multiply+0xf2>
 800c46c:	f104 0e14 	add.w	lr, r4, #20
 800c470:	46a9      	mov	r9, r5
 800c472:	f04f 0c00 	mov.w	ip, #0
 800c476:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c47a:	f8d9 1000 	ldr.w	r1, [r9]
 800c47e:	fa1f fb82 	uxth.w	fp, r2
 800c482:	b289      	uxth	r1, r1
 800c484:	fb0a 110b 	mla	r1, sl, fp, r1
 800c488:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c48c:	f8d9 2000 	ldr.w	r2, [r9]
 800c490:	4461      	add	r1, ip
 800c492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c496:	fb0a c20b 	mla	r2, sl, fp, ip
 800c49a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c49e:	b289      	uxth	r1, r1
 800c4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4a4:	4577      	cmp	r7, lr
 800c4a6:	f849 1b04 	str.w	r1, [r9], #4
 800c4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4ae:	d8e2      	bhi.n	800c476 <__multiply+0xb2>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	f845 c002 	str.w	ip, [r5, r2]
 800c4b6:	9a03      	ldr	r2, [sp, #12]
 800c4b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	f1b9 0f00 	cmp.w	r9, #0
 800c4c2:	d020      	beq.n	800c506 <__multiply+0x142>
 800c4c4:	6829      	ldr	r1, [r5, #0]
 800c4c6:	f104 0c14 	add.w	ip, r4, #20
 800c4ca:	46ae      	mov	lr, r5
 800c4cc:	f04f 0a00 	mov.w	sl, #0
 800c4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c4d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800c4dc:	4492      	add	sl, r2
 800c4de:	b289      	uxth	r1, r1
 800c4e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c4e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c4e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4ec:	f8be 1000 	ldrh.w	r1, [lr]
 800c4f0:	0c12      	lsrs	r2, r2, #16
 800c4f2:	fb09 1102 	mla	r1, r9, r2, r1
 800c4f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c4fa:	4567      	cmp	r7, ip
 800c4fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c500:	d8e6      	bhi.n	800c4d0 <__multiply+0x10c>
 800c502:	9a01      	ldr	r2, [sp, #4]
 800c504:	50a9      	str	r1, [r5, r2]
 800c506:	3504      	adds	r5, #4
 800c508:	e79a      	b.n	800c440 <__multiply+0x7c>
 800c50a:	3e01      	subs	r6, #1
 800c50c:	e79c      	b.n	800c448 <__multiply+0x84>
 800c50e:	bf00      	nop
 800c510:	08019197 	.word	0x08019197
 800c514:	080191a8 	.word	0x080191a8

0800c518 <__pow5mult>:
 800c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	4615      	mov	r5, r2
 800c51e:	f012 0203 	ands.w	r2, r2, #3
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	d007      	beq.n	800c538 <__pow5mult+0x20>
 800c528:	4c25      	ldr	r4, [pc, #148]	; (800c5c0 <__pow5mult+0xa8>)
 800c52a:	3a01      	subs	r2, #1
 800c52c:	2300      	movs	r3, #0
 800c52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c532:	f7ff fe9b 	bl	800c26c <__multadd>
 800c536:	4607      	mov	r7, r0
 800c538:	10ad      	asrs	r5, r5, #2
 800c53a:	d03d      	beq.n	800c5b8 <__pow5mult+0xa0>
 800c53c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c53e:	b97c      	cbnz	r4, 800c560 <__pow5mult+0x48>
 800c540:	2010      	movs	r0, #16
 800c542:	f7ff fe1b 	bl	800c17c <malloc>
 800c546:	4602      	mov	r2, r0
 800c548:	6270      	str	r0, [r6, #36]	; 0x24
 800c54a:	b928      	cbnz	r0, 800c558 <__pow5mult+0x40>
 800c54c:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <__pow5mult+0xac>)
 800c54e:	481e      	ldr	r0, [pc, #120]	; (800c5c8 <__pow5mult+0xb0>)
 800c550:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c554:	f000 fc0e 	bl	800cd74 <__assert_func>
 800c558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c55c:	6004      	str	r4, [r0, #0]
 800c55e:	60c4      	str	r4, [r0, #12]
 800c560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c568:	b94c      	cbnz	r4, 800c57e <__pow5mult+0x66>
 800c56a:	f240 2171 	movw	r1, #625	; 0x271
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff ff12 	bl	800c398 <__i2b>
 800c574:	2300      	movs	r3, #0
 800c576:	f8c8 0008 	str.w	r0, [r8, #8]
 800c57a:	4604      	mov	r4, r0
 800c57c:	6003      	str	r3, [r0, #0]
 800c57e:	f04f 0900 	mov.w	r9, #0
 800c582:	07eb      	lsls	r3, r5, #31
 800c584:	d50a      	bpl.n	800c59c <__pow5mult+0x84>
 800c586:	4639      	mov	r1, r7
 800c588:	4622      	mov	r2, r4
 800c58a:	4630      	mov	r0, r6
 800c58c:	f7ff ff1a 	bl	800c3c4 <__multiply>
 800c590:	4639      	mov	r1, r7
 800c592:	4680      	mov	r8, r0
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff fe47 	bl	800c228 <_Bfree>
 800c59a:	4647      	mov	r7, r8
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	d00b      	beq.n	800c5b8 <__pow5mult+0xa0>
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	b938      	cbnz	r0, 800c5b4 <__pow5mult+0x9c>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7ff ff0b 	bl	800c3c4 <__multiply>
 800c5ae:	6020      	str	r0, [r4, #0]
 800c5b0:	f8c0 9000 	str.w	r9, [r0]
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	e7e4      	b.n	800c582 <__pow5mult+0x6a>
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5be:	bf00      	nop
 800c5c0:	080192f8 	.word	0x080192f8
 800c5c4:	08019125 	.word	0x08019125
 800c5c8:	080191a8 	.word	0x080191a8

0800c5cc <__lshift>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	6849      	ldr	r1, [r1, #4]
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	4607      	mov	r7, r0
 800c5de:	4691      	mov	r9, r2
 800c5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5e4:	f108 0601 	add.w	r6, r8, #1
 800c5e8:	42b3      	cmp	r3, r6
 800c5ea:	db0b      	blt.n	800c604 <__lshift+0x38>
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff fddb 	bl	800c1a8 <_Balloc>
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b948      	cbnz	r0, 800c60a <__lshift+0x3e>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	4b2a      	ldr	r3, [pc, #168]	; (800c6a4 <__lshift+0xd8>)
 800c5fa:	482b      	ldr	r0, [pc, #172]	; (800c6a8 <__lshift+0xdc>)
 800c5fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c600:	f000 fbb8 	bl	800cd74 <__assert_func>
 800c604:	3101      	adds	r1, #1
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	e7ee      	b.n	800c5e8 <__lshift+0x1c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	f100 0114 	add.w	r1, r0, #20
 800c610:	f100 0210 	add.w	r2, r0, #16
 800c614:	4618      	mov	r0, r3
 800c616:	4553      	cmp	r3, sl
 800c618:	db37      	blt.n	800c68a <__lshift+0xbe>
 800c61a:	6920      	ldr	r0, [r4, #16]
 800c61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c620:	f104 0314 	add.w	r3, r4, #20
 800c624:	f019 091f 	ands.w	r9, r9, #31
 800c628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c62c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c630:	d02f      	beq.n	800c692 <__lshift+0xc6>
 800c632:	f1c9 0e20 	rsb	lr, r9, #32
 800c636:	468a      	mov	sl, r1
 800c638:	f04f 0c00 	mov.w	ip, #0
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	fa02 f209 	lsl.w	r2, r2, r9
 800c642:	ea42 020c 	orr.w	r2, r2, ip
 800c646:	f84a 2b04 	str.w	r2, [sl], #4
 800c64a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c64e:	4298      	cmp	r0, r3
 800c650:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c654:	d8f2      	bhi.n	800c63c <__lshift+0x70>
 800c656:	1b03      	subs	r3, r0, r4
 800c658:	3b15      	subs	r3, #21
 800c65a:	f023 0303 	bic.w	r3, r3, #3
 800c65e:	3304      	adds	r3, #4
 800c660:	f104 0215 	add.w	r2, r4, #21
 800c664:	4290      	cmp	r0, r2
 800c666:	bf38      	it	cc
 800c668:	2304      	movcc	r3, #4
 800c66a:	f841 c003 	str.w	ip, [r1, r3]
 800c66e:	f1bc 0f00 	cmp.w	ip, #0
 800c672:	d001      	beq.n	800c678 <__lshift+0xac>
 800c674:	f108 0602 	add.w	r6, r8, #2
 800c678:	3e01      	subs	r6, #1
 800c67a:	4638      	mov	r0, r7
 800c67c:	612e      	str	r6, [r5, #16]
 800c67e:	4621      	mov	r1, r4
 800c680:	f7ff fdd2 	bl	800c228 <_Bfree>
 800c684:	4628      	mov	r0, r5
 800c686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c68e:	3301      	adds	r3, #1
 800c690:	e7c1      	b.n	800c616 <__lshift+0x4a>
 800c692:	3904      	subs	r1, #4
 800c694:	f853 2b04 	ldr.w	r2, [r3], #4
 800c698:	f841 2f04 	str.w	r2, [r1, #4]!
 800c69c:	4298      	cmp	r0, r3
 800c69e:	d8f9      	bhi.n	800c694 <__lshift+0xc8>
 800c6a0:	e7ea      	b.n	800c678 <__lshift+0xac>
 800c6a2:	bf00      	nop
 800c6a4:	08019197 	.word	0x08019197
 800c6a8:	080191a8 	.word	0x080191a8

0800c6ac <__mcmp>:
 800c6ac:	b530      	push	{r4, r5, lr}
 800c6ae:	6902      	ldr	r2, [r0, #16]
 800c6b0:	690c      	ldr	r4, [r1, #16]
 800c6b2:	1b12      	subs	r2, r2, r4
 800c6b4:	d10e      	bne.n	800c6d4 <__mcmp+0x28>
 800c6b6:	f100 0314 	add.w	r3, r0, #20
 800c6ba:	3114      	adds	r1, #20
 800c6bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6cc:	42a5      	cmp	r5, r4
 800c6ce:	d003      	beq.n	800c6d8 <__mcmp+0x2c>
 800c6d0:	d305      	bcc.n	800c6de <__mcmp+0x32>
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	bd30      	pop	{r4, r5, pc}
 800c6d8:	4283      	cmp	r3, r0
 800c6da:	d3f3      	bcc.n	800c6c4 <__mcmp+0x18>
 800c6dc:	e7fa      	b.n	800c6d4 <__mcmp+0x28>
 800c6de:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e2:	e7f7      	b.n	800c6d4 <__mcmp+0x28>

0800c6e4 <__mdiff>:
 800c6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	4690      	mov	r8, r2
 800c6f2:	f7ff ffdb 	bl	800c6ac <__mcmp>
 800c6f6:	1e05      	subs	r5, r0, #0
 800c6f8:	d110      	bne.n	800c71c <__mdiff+0x38>
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	f7ff fd53 	bl	800c1a8 <_Balloc>
 800c702:	b930      	cbnz	r0, 800c712 <__mdiff+0x2e>
 800c704:	4b3a      	ldr	r3, [pc, #232]	; (800c7f0 <__mdiff+0x10c>)
 800c706:	4602      	mov	r2, r0
 800c708:	f240 2132 	movw	r1, #562	; 0x232
 800c70c:	4839      	ldr	r0, [pc, #228]	; (800c7f4 <__mdiff+0x110>)
 800c70e:	f000 fb31 	bl	800cd74 <__assert_func>
 800c712:	2301      	movs	r3, #1
 800c714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71c:	bfa4      	itt	ge
 800c71e:	4643      	movge	r3, r8
 800c720:	46a0      	movge	r8, r4
 800c722:	4630      	mov	r0, r6
 800c724:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c728:	bfa6      	itte	ge
 800c72a:	461c      	movge	r4, r3
 800c72c:	2500      	movge	r5, #0
 800c72e:	2501      	movlt	r5, #1
 800c730:	f7ff fd3a 	bl	800c1a8 <_Balloc>
 800c734:	b920      	cbnz	r0, 800c740 <__mdiff+0x5c>
 800c736:	4b2e      	ldr	r3, [pc, #184]	; (800c7f0 <__mdiff+0x10c>)
 800c738:	4602      	mov	r2, r0
 800c73a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c73e:	e7e5      	b.n	800c70c <__mdiff+0x28>
 800c740:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c744:	6926      	ldr	r6, [r4, #16]
 800c746:	60c5      	str	r5, [r0, #12]
 800c748:	f104 0914 	add.w	r9, r4, #20
 800c74c:	f108 0514 	add.w	r5, r8, #20
 800c750:	f100 0e14 	add.w	lr, r0, #20
 800c754:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c758:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c75c:	f108 0210 	add.w	r2, r8, #16
 800c760:	46f2      	mov	sl, lr
 800c762:	2100      	movs	r1, #0
 800c764:	f859 3b04 	ldr.w	r3, [r9], #4
 800c768:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c76c:	fa1f f883 	uxth.w	r8, r3
 800c770:	fa11 f18b 	uxtah	r1, r1, fp
 800c774:	0c1b      	lsrs	r3, r3, #16
 800c776:	eba1 0808 	sub.w	r8, r1, r8
 800c77a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c77e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c782:	fa1f f888 	uxth.w	r8, r8
 800c786:	1419      	asrs	r1, r3, #16
 800c788:	454e      	cmp	r6, r9
 800c78a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c78e:	f84a 3b04 	str.w	r3, [sl], #4
 800c792:	d8e7      	bhi.n	800c764 <__mdiff+0x80>
 800c794:	1b33      	subs	r3, r6, r4
 800c796:	3b15      	subs	r3, #21
 800c798:	f023 0303 	bic.w	r3, r3, #3
 800c79c:	3304      	adds	r3, #4
 800c79e:	3415      	adds	r4, #21
 800c7a0:	42a6      	cmp	r6, r4
 800c7a2:	bf38      	it	cc
 800c7a4:	2304      	movcc	r3, #4
 800c7a6:	441d      	add	r5, r3
 800c7a8:	4473      	add	r3, lr
 800c7aa:	469e      	mov	lr, r3
 800c7ac:	462e      	mov	r6, r5
 800c7ae:	4566      	cmp	r6, ip
 800c7b0:	d30e      	bcc.n	800c7d0 <__mdiff+0xec>
 800c7b2:	f10c 0203 	add.w	r2, ip, #3
 800c7b6:	1b52      	subs	r2, r2, r5
 800c7b8:	f022 0203 	bic.w	r2, r2, #3
 800c7bc:	3d03      	subs	r5, #3
 800c7be:	45ac      	cmp	ip, r5
 800c7c0:	bf38      	it	cc
 800c7c2:	2200      	movcc	r2, #0
 800c7c4:	441a      	add	r2, r3
 800c7c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7ca:	b17b      	cbz	r3, 800c7ec <__mdiff+0x108>
 800c7cc:	6107      	str	r7, [r0, #16]
 800c7ce:	e7a3      	b.n	800c718 <__mdiff+0x34>
 800c7d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7d4:	fa11 f288 	uxtah	r2, r1, r8
 800c7d8:	1414      	asrs	r4, r2, #16
 800c7da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7de:	b292      	uxth	r2, r2
 800c7e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7e4:	f84e 2b04 	str.w	r2, [lr], #4
 800c7e8:	1421      	asrs	r1, r4, #16
 800c7ea:	e7e0      	b.n	800c7ae <__mdiff+0xca>
 800c7ec:	3f01      	subs	r7, #1
 800c7ee:	e7ea      	b.n	800c7c6 <__mdiff+0xe2>
 800c7f0:	08019197 	.word	0x08019197
 800c7f4:	080191a8 	.word	0x080191a8

0800c7f8 <__d2b>:
 800c7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7fc:	4689      	mov	r9, r1
 800c7fe:	2101      	movs	r1, #1
 800c800:	ec57 6b10 	vmov	r6, r7, d0
 800c804:	4690      	mov	r8, r2
 800c806:	f7ff fccf 	bl	800c1a8 <_Balloc>
 800c80a:	4604      	mov	r4, r0
 800c80c:	b930      	cbnz	r0, 800c81c <__d2b+0x24>
 800c80e:	4602      	mov	r2, r0
 800c810:	4b25      	ldr	r3, [pc, #148]	; (800c8a8 <__d2b+0xb0>)
 800c812:	4826      	ldr	r0, [pc, #152]	; (800c8ac <__d2b+0xb4>)
 800c814:	f240 310a 	movw	r1, #778	; 0x30a
 800c818:	f000 faac 	bl	800cd74 <__assert_func>
 800c81c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c824:	bb35      	cbnz	r5, 800c874 <__d2b+0x7c>
 800c826:	2e00      	cmp	r6, #0
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	d028      	beq.n	800c87e <__d2b+0x86>
 800c82c:	4668      	mov	r0, sp
 800c82e:	9600      	str	r6, [sp, #0]
 800c830:	f7ff fd82 	bl	800c338 <__lo0bits>
 800c834:	9900      	ldr	r1, [sp, #0]
 800c836:	b300      	cbz	r0, 800c87a <__d2b+0x82>
 800c838:	9a01      	ldr	r2, [sp, #4]
 800c83a:	f1c0 0320 	rsb	r3, r0, #32
 800c83e:	fa02 f303 	lsl.w	r3, r2, r3
 800c842:	430b      	orrs	r3, r1
 800c844:	40c2      	lsrs	r2, r0
 800c846:	6163      	str	r3, [r4, #20]
 800c848:	9201      	str	r2, [sp, #4]
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	61a3      	str	r3, [r4, #24]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bf14      	ite	ne
 800c852:	2202      	movne	r2, #2
 800c854:	2201      	moveq	r2, #1
 800c856:	6122      	str	r2, [r4, #16]
 800c858:	b1d5      	cbz	r5, 800c890 <__d2b+0x98>
 800c85a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c85e:	4405      	add	r5, r0
 800c860:	f8c9 5000 	str.w	r5, [r9]
 800c864:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c868:	f8c8 0000 	str.w	r0, [r8]
 800c86c:	4620      	mov	r0, r4
 800c86e:	b003      	add	sp, #12
 800c870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c878:	e7d5      	b.n	800c826 <__d2b+0x2e>
 800c87a:	6161      	str	r1, [r4, #20]
 800c87c:	e7e5      	b.n	800c84a <__d2b+0x52>
 800c87e:	a801      	add	r0, sp, #4
 800c880:	f7ff fd5a 	bl	800c338 <__lo0bits>
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	6163      	str	r3, [r4, #20]
 800c888:	2201      	movs	r2, #1
 800c88a:	6122      	str	r2, [r4, #16]
 800c88c:	3020      	adds	r0, #32
 800c88e:	e7e3      	b.n	800c858 <__d2b+0x60>
 800c890:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c894:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c898:	f8c9 0000 	str.w	r0, [r9]
 800c89c:	6918      	ldr	r0, [r3, #16]
 800c89e:	f7ff fd2b 	bl	800c2f8 <__hi0bits>
 800c8a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8a6:	e7df      	b.n	800c868 <__d2b+0x70>
 800c8a8:	08019197 	.word	0x08019197
 800c8ac:	080191a8 	.word	0x080191a8

0800c8b0 <_calloc_r>:
 800c8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8b2:	fba1 2402 	umull	r2, r4, r1, r2
 800c8b6:	b94c      	cbnz	r4, 800c8cc <_calloc_r+0x1c>
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	9201      	str	r2, [sp, #4]
 800c8bc:	f000 f87a 	bl	800c9b4 <_malloc_r>
 800c8c0:	9a01      	ldr	r2, [sp, #4]
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b930      	cbnz	r0, 800c8d4 <_calloc_r+0x24>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	b003      	add	sp, #12
 800c8ca:	bd30      	pop	{r4, r5, pc}
 800c8cc:	220c      	movs	r2, #12
 800c8ce:	6002      	str	r2, [r0, #0]
 800c8d0:	2500      	movs	r5, #0
 800c8d2:	e7f8      	b.n	800c8c6 <_calloc_r+0x16>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	f7fe f93f 	bl	800ab58 <memset>
 800c8da:	e7f4      	b.n	800c8c6 <_calloc_r+0x16>

0800c8dc <_free_r>:
 800c8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d044      	beq.n	800c96c <_free_r+0x90>
 800c8e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8e6:	9001      	str	r0, [sp, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f1a1 0404 	sub.w	r4, r1, #4
 800c8ee:	bfb8      	it	lt
 800c8f0:	18e4      	addlt	r4, r4, r3
 800c8f2:	f000 fa9b 	bl	800ce2c <__malloc_lock>
 800c8f6:	4a1e      	ldr	r2, [pc, #120]	; (800c970 <_free_r+0x94>)
 800c8f8:	9801      	ldr	r0, [sp, #4]
 800c8fa:	6813      	ldr	r3, [r2, #0]
 800c8fc:	b933      	cbnz	r3, 800c90c <_free_r+0x30>
 800c8fe:	6063      	str	r3, [r4, #4]
 800c900:	6014      	str	r4, [r2, #0]
 800c902:	b003      	add	sp, #12
 800c904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c908:	f000 ba96 	b.w	800ce38 <__malloc_unlock>
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d908      	bls.n	800c922 <_free_r+0x46>
 800c910:	6825      	ldr	r5, [r4, #0]
 800c912:	1961      	adds	r1, r4, r5
 800c914:	428b      	cmp	r3, r1
 800c916:	bf01      	itttt	eq
 800c918:	6819      	ldreq	r1, [r3, #0]
 800c91a:	685b      	ldreq	r3, [r3, #4]
 800c91c:	1949      	addeq	r1, r1, r5
 800c91e:	6021      	streq	r1, [r4, #0]
 800c920:	e7ed      	b.n	800c8fe <_free_r+0x22>
 800c922:	461a      	mov	r2, r3
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	b10b      	cbz	r3, 800c92c <_free_r+0x50>
 800c928:	42a3      	cmp	r3, r4
 800c92a:	d9fa      	bls.n	800c922 <_free_r+0x46>
 800c92c:	6811      	ldr	r1, [r2, #0]
 800c92e:	1855      	adds	r5, r2, r1
 800c930:	42a5      	cmp	r5, r4
 800c932:	d10b      	bne.n	800c94c <_free_r+0x70>
 800c934:	6824      	ldr	r4, [r4, #0]
 800c936:	4421      	add	r1, r4
 800c938:	1854      	adds	r4, r2, r1
 800c93a:	42a3      	cmp	r3, r4
 800c93c:	6011      	str	r1, [r2, #0]
 800c93e:	d1e0      	bne.n	800c902 <_free_r+0x26>
 800c940:	681c      	ldr	r4, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	6053      	str	r3, [r2, #4]
 800c946:	4421      	add	r1, r4
 800c948:	6011      	str	r1, [r2, #0]
 800c94a:	e7da      	b.n	800c902 <_free_r+0x26>
 800c94c:	d902      	bls.n	800c954 <_free_r+0x78>
 800c94e:	230c      	movs	r3, #12
 800c950:	6003      	str	r3, [r0, #0]
 800c952:	e7d6      	b.n	800c902 <_free_r+0x26>
 800c954:	6825      	ldr	r5, [r4, #0]
 800c956:	1961      	adds	r1, r4, r5
 800c958:	428b      	cmp	r3, r1
 800c95a:	bf04      	itt	eq
 800c95c:	6819      	ldreq	r1, [r3, #0]
 800c95e:	685b      	ldreq	r3, [r3, #4]
 800c960:	6063      	str	r3, [r4, #4]
 800c962:	bf04      	itt	eq
 800c964:	1949      	addeq	r1, r1, r5
 800c966:	6021      	streq	r1, [r4, #0]
 800c968:	6054      	str	r4, [r2, #4]
 800c96a:	e7ca      	b.n	800c902 <_free_r+0x26>
 800c96c:	b003      	add	sp, #12
 800c96e:	bd30      	pop	{r4, r5, pc}
 800c970:	200006a8 	.word	0x200006a8

0800c974 <sbrk_aligned>:
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	4e0e      	ldr	r6, [pc, #56]	; (800c9b0 <sbrk_aligned+0x3c>)
 800c978:	460c      	mov	r4, r1
 800c97a:	6831      	ldr	r1, [r6, #0]
 800c97c:	4605      	mov	r5, r0
 800c97e:	b911      	cbnz	r1, 800c986 <sbrk_aligned+0x12>
 800c980:	f000 f9e8 	bl	800cd54 <_sbrk_r>
 800c984:	6030      	str	r0, [r6, #0]
 800c986:	4621      	mov	r1, r4
 800c988:	4628      	mov	r0, r5
 800c98a:	f000 f9e3 	bl	800cd54 <_sbrk_r>
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	d00a      	beq.n	800c9a8 <sbrk_aligned+0x34>
 800c992:	1cc4      	adds	r4, r0, #3
 800c994:	f024 0403 	bic.w	r4, r4, #3
 800c998:	42a0      	cmp	r0, r4
 800c99a:	d007      	beq.n	800c9ac <sbrk_aligned+0x38>
 800c99c:	1a21      	subs	r1, r4, r0
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f000 f9d8 	bl	800cd54 <_sbrk_r>
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	d101      	bne.n	800c9ac <sbrk_aligned+0x38>
 800c9a8:	f04f 34ff 	mov.w	r4, #4294967295
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	200006ac 	.word	0x200006ac

0800c9b4 <_malloc_r>:
 800c9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b8:	1ccd      	adds	r5, r1, #3
 800c9ba:	f025 0503 	bic.w	r5, r5, #3
 800c9be:	3508      	adds	r5, #8
 800c9c0:	2d0c      	cmp	r5, #12
 800c9c2:	bf38      	it	cc
 800c9c4:	250c      	movcc	r5, #12
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	db01      	blt.n	800c9d0 <_malloc_r+0x1c>
 800c9cc:	42a9      	cmp	r1, r5
 800c9ce:	d905      	bls.n	800c9dc <_malloc_r+0x28>
 800c9d0:	230c      	movs	r3, #12
 800c9d2:	603b      	str	r3, [r7, #0]
 800c9d4:	2600      	movs	r6, #0
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	4e2e      	ldr	r6, [pc, #184]	; (800ca98 <_malloc_r+0xe4>)
 800c9de:	f000 fa25 	bl	800ce2c <__malloc_lock>
 800c9e2:	6833      	ldr	r3, [r6, #0]
 800c9e4:	461c      	mov	r4, r3
 800c9e6:	bb34      	cbnz	r4, 800ca36 <_malloc_r+0x82>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	f7ff ffc2 	bl	800c974 <sbrk_aligned>
 800c9f0:	1c43      	adds	r3, r0, #1
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	d14d      	bne.n	800ca92 <_malloc_r+0xde>
 800c9f6:	6834      	ldr	r4, [r6, #0]
 800c9f8:	4626      	mov	r6, r4
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	d140      	bne.n	800ca80 <_malloc_r+0xcc>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	4631      	mov	r1, r6
 800ca02:	4638      	mov	r0, r7
 800ca04:	eb04 0803 	add.w	r8, r4, r3
 800ca08:	f000 f9a4 	bl	800cd54 <_sbrk_r>
 800ca0c:	4580      	cmp	r8, r0
 800ca0e:	d13a      	bne.n	800ca86 <_malloc_r+0xd2>
 800ca10:	6821      	ldr	r1, [r4, #0]
 800ca12:	3503      	adds	r5, #3
 800ca14:	1a6d      	subs	r5, r5, r1
 800ca16:	f025 0503 	bic.w	r5, r5, #3
 800ca1a:	3508      	adds	r5, #8
 800ca1c:	2d0c      	cmp	r5, #12
 800ca1e:	bf38      	it	cc
 800ca20:	250c      	movcc	r5, #12
 800ca22:	4629      	mov	r1, r5
 800ca24:	4638      	mov	r0, r7
 800ca26:	f7ff ffa5 	bl	800c974 <sbrk_aligned>
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	d02b      	beq.n	800ca86 <_malloc_r+0xd2>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	442b      	add	r3, r5
 800ca32:	6023      	str	r3, [r4, #0]
 800ca34:	e00e      	b.n	800ca54 <_malloc_r+0xa0>
 800ca36:	6822      	ldr	r2, [r4, #0]
 800ca38:	1b52      	subs	r2, r2, r5
 800ca3a:	d41e      	bmi.n	800ca7a <_malloc_r+0xc6>
 800ca3c:	2a0b      	cmp	r2, #11
 800ca3e:	d916      	bls.n	800ca6e <_malloc_r+0xba>
 800ca40:	1961      	adds	r1, r4, r5
 800ca42:	42a3      	cmp	r3, r4
 800ca44:	6025      	str	r5, [r4, #0]
 800ca46:	bf18      	it	ne
 800ca48:	6059      	strne	r1, [r3, #4]
 800ca4a:	6863      	ldr	r3, [r4, #4]
 800ca4c:	bf08      	it	eq
 800ca4e:	6031      	streq	r1, [r6, #0]
 800ca50:	5162      	str	r2, [r4, r5]
 800ca52:	604b      	str	r3, [r1, #4]
 800ca54:	4638      	mov	r0, r7
 800ca56:	f104 060b 	add.w	r6, r4, #11
 800ca5a:	f000 f9ed 	bl	800ce38 <__malloc_unlock>
 800ca5e:	f026 0607 	bic.w	r6, r6, #7
 800ca62:	1d23      	adds	r3, r4, #4
 800ca64:	1af2      	subs	r2, r6, r3
 800ca66:	d0b6      	beq.n	800c9d6 <_malloc_r+0x22>
 800ca68:	1b9b      	subs	r3, r3, r6
 800ca6a:	50a3      	str	r3, [r4, r2]
 800ca6c:	e7b3      	b.n	800c9d6 <_malloc_r+0x22>
 800ca6e:	6862      	ldr	r2, [r4, #4]
 800ca70:	42a3      	cmp	r3, r4
 800ca72:	bf0c      	ite	eq
 800ca74:	6032      	streq	r2, [r6, #0]
 800ca76:	605a      	strne	r2, [r3, #4]
 800ca78:	e7ec      	b.n	800ca54 <_malloc_r+0xa0>
 800ca7a:	4623      	mov	r3, r4
 800ca7c:	6864      	ldr	r4, [r4, #4]
 800ca7e:	e7b2      	b.n	800c9e6 <_malloc_r+0x32>
 800ca80:	4634      	mov	r4, r6
 800ca82:	6876      	ldr	r6, [r6, #4]
 800ca84:	e7b9      	b.n	800c9fa <_malloc_r+0x46>
 800ca86:	230c      	movs	r3, #12
 800ca88:	603b      	str	r3, [r7, #0]
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	f000 f9d4 	bl	800ce38 <__malloc_unlock>
 800ca90:	e7a1      	b.n	800c9d6 <_malloc_r+0x22>
 800ca92:	6025      	str	r5, [r4, #0]
 800ca94:	e7de      	b.n	800ca54 <_malloc_r+0xa0>
 800ca96:	bf00      	nop
 800ca98:	200006a8 	.word	0x200006a8

0800ca9c <__ssputs_r>:
 800ca9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa0:	688e      	ldr	r6, [r1, #8]
 800caa2:	429e      	cmp	r6, r3
 800caa4:	4682      	mov	sl, r0
 800caa6:	460c      	mov	r4, r1
 800caa8:	4690      	mov	r8, r2
 800caaa:	461f      	mov	r7, r3
 800caac:	d838      	bhi.n	800cb20 <__ssputs_r+0x84>
 800caae:	898a      	ldrh	r2, [r1, #12]
 800cab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cab4:	d032      	beq.n	800cb1c <__ssputs_r+0x80>
 800cab6:	6825      	ldr	r5, [r4, #0]
 800cab8:	6909      	ldr	r1, [r1, #16]
 800caba:	eba5 0901 	sub.w	r9, r5, r1
 800cabe:	6965      	ldr	r5, [r4, #20]
 800cac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cac8:	3301      	adds	r3, #1
 800caca:	444b      	add	r3, r9
 800cacc:	106d      	asrs	r5, r5, #1
 800cace:	429d      	cmp	r5, r3
 800cad0:	bf38      	it	cc
 800cad2:	461d      	movcc	r5, r3
 800cad4:	0553      	lsls	r3, r2, #21
 800cad6:	d531      	bpl.n	800cb3c <__ssputs_r+0xa0>
 800cad8:	4629      	mov	r1, r5
 800cada:	f7ff ff6b 	bl	800c9b4 <_malloc_r>
 800cade:	4606      	mov	r6, r0
 800cae0:	b950      	cbnz	r0, 800caf8 <__ssputs_r+0x5c>
 800cae2:	230c      	movs	r3, #12
 800cae4:	f8ca 3000 	str.w	r3, [sl]
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caee:	81a3      	strh	r3, [r4, #12]
 800caf0:	f04f 30ff 	mov.w	r0, #4294967295
 800caf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf8:	6921      	ldr	r1, [r4, #16]
 800cafa:	464a      	mov	r2, r9
 800cafc:	f7ff fb46 	bl	800c18c <memcpy>
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb0a:	81a3      	strh	r3, [r4, #12]
 800cb0c:	6126      	str	r6, [r4, #16]
 800cb0e:	6165      	str	r5, [r4, #20]
 800cb10:	444e      	add	r6, r9
 800cb12:	eba5 0509 	sub.w	r5, r5, r9
 800cb16:	6026      	str	r6, [r4, #0]
 800cb18:	60a5      	str	r5, [r4, #8]
 800cb1a:	463e      	mov	r6, r7
 800cb1c:	42be      	cmp	r6, r7
 800cb1e:	d900      	bls.n	800cb22 <__ssputs_r+0x86>
 800cb20:	463e      	mov	r6, r7
 800cb22:	6820      	ldr	r0, [r4, #0]
 800cb24:	4632      	mov	r2, r6
 800cb26:	4641      	mov	r1, r8
 800cb28:	f000 f966 	bl	800cdf8 <memmove>
 800cb2c:	68a3      	ldr	r3, [r4, #8]
 800cb2e:	1b9b      	subs	r3, r3, r6
 800cb30:	60a3      	str	r3, [r4, #8]
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	4433      	add	r3, r6
 800cb36:	6023      	str	r3, [r4, #0]
 800cb38:	2000      	movs	r0, #0
 800cb3a:	e7db      	b.n	800caf4 <__ssputs_r+0x58>
 800cb3c:	462a      	mov	r2, r5
 800cb3e:	f000 f981 	bl	800ce44 <_realloc_r>
 800cb42:	4606      	mov	r6, r0
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d1e1      	bne.n	800cb0c <__ssputs_r+0x70>
 800cb48:	6921      	ldr	r1, [r4, #16]
 800cb4a:	4650      	mov	r0, sl
 800cb4c:	f7ff fec6 	bl	800c8dc <_free_r>
 800cb50:	e7c7      	b.n	800cae2 <__ssputs_r+0x46>
	...

0800cb54 <_svfiprintf_r>:
 800cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	4698      	mov	r8, r3
 800cb5a:	898b      	ldrh	r3, [r1, #12]
 800cb5c:	061b      	lsls	r3, r3, #24
 800cb5e:	b09d      	sub	sp, #116	; 0x74
 800cb60:	4607      	mov	r7, r0
 800cb62:	460d      	mov	r5, r1
 800cb64:	4614      	mov	r4, r2
 800cb66:	d50e      	bpl.n	800cb86 <_svfiprintf_r+0x32>
 800cb68:	690b      	ldr	r3, [r1, #16]
 800cb6a:	b963      	cbnz	r3, 800cb86 <_svfiprintf_r+0x32>
 800cb6c:	2140      	movs	r1, #64	; 0x40
 800cb6e:	f7ff ff21 	bl	800c9b4 <_malloc_r>
 800cb72:	6028      	str	r0, [r5, #0]
 800cb74:	6128      	str	r0, [r5, #16]
 800cb76:	b920      	cbnz	r0, 800cb82 <_svfiprintf_r+0x2e>
 800cb78:	230c      	movs	r3, #12
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb80:	e0d1      	b.n	800cd26 <_svfiprintf_r+0x1d2>
 800cb82:	2340      	movs	r3, #64	; 0x40
 800cb84:	616b      	str	r3, [r5, #20]
 800cb86:	2300      	movs	r3, #0
 800cb88:	9309      	str	r3, [sp, #36]	; 0x24
 800cb8a:	2320      	movs	r3, #32
 800cb8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb90:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb94:	2330      	movs	r3, #48	; 0x30
 800cb96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd40 <_svfiprintf_r+0x1ec>
 800cb9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb9e:	f04f 0901 	mov.w	r9, #1
 800cba2:	4623      	mov	r3, r4
 800cba4:	469a      	mov	sl, r3
 800cba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbaa:	b10a      	cbz	r2, 800cbb0 <_svfiprintf_r+0x5c>
 800cbac:	2a25      	cmp	r2, #37	; 0x25
 800cbae:	d1f9      	bne.n	800cba4 <_svfiprintf_r+0x50>
 800cbb0:	ebba 0b04 	subs.w	fp, sl, r4
 800cbb4:	d00b      	beq.n	800cbce <_svfiprintf_r+0x7a>
 800cbb6:	465b      	mov	r3, fp
 800cbb8:	4622      	mov	r2, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f7ff ff6d 	bl	800ca9c <__ssputs_r>
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	f000 80aa 	beq.w	800cd1c <_svfiprintf_r+0x1c8>
 800cbc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbca:	445a      	add	r2, fp
 800cbcc:	9209      	str	r2, [sp, #36]	; 0x24
 800cbce:	f89a 3000 	ldrb.w	r3, [sl]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 80a2 	beq.w	800cd1c <_svfiprintf_r+0x1c8>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295
 800cbde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbe2:	f10a 0a01 	add.w	sl, sl, #1
 800cbe6:	9304      	str	r3, [sp, #16]
 800cbe8:	9307      	str	r3, [sp, #28]
 800cbea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbee:	931a      	str	r3, [sp, #104]	; 0x68
 800cbf0:	4654      	mov	r4, sl
 800cbf2:	2205      	movs	r2, #5
 800cbf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf8:	4851      	ldr	r0, [pc, #324]	; (800cd40 <_svfiprintf_r+0x1ec>)
 800cbfa:	f7f3 faf9 	bl	80001f0 <memchr>
 800cbfe:	9a04      	ldr	r2, [sp, #16]
 800cc00:	b9d8      	cbnz	r0, 800cc3a <_svfiprintf_r+0xe6>
 800cc02:	06d0      	lsls	r0, r2, #27
 800cc04:	bf44      	itt	mi
 800cc06:	2320      	movmi	r3, #32
 800cc08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc0c:	0711      	lsls	r1, r2, #28
 800cc0e:	bf44      	itt	mi
 800cc10:	232b      	movmi	r3, #43	; 0x2b
 800cc12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc16:	f89a 3000 	ldrb.w	r3, [sl]
 800cc1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1c:	d015      	beq.n	800cc4a <_svfiprintf_r+0xf6>
 800cc1e:	9a07      	ldr	r2, [sp, #28]
 800cc20:	4654      	mov	r4, sl
 800cc22:	2000      	movs	r0, #0
 800cc24:	f04f 0c0a 	mov.w	ip, #10
 800cc28:	4621      	mov	r1, r4
 800cc2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc2e:	3b30      	subs	r3, #48	; 0x30
 800cc30:	2b09      	cmp	r3, #9
 800cc32:	d94e      	bls.n	800ccd2 <_svfiprintf_r+0x17e>
 800cc34:	b1b0      	cbz	r0, 800cc64 <_svfiprintf_r+0x110>
 800cc36:	9207      	str	r2, [sp, #28]
 800cc38:	e014      	b.n	800cc64 <_svfiprintf_r+0x110>
 800cc3a:	eba0 0308 	sub.w	r3, r0, r8
 800cc3e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc42:	4313      	orrs	r3, r2
 800cc44:	9304      	str	r3, [sp, #16]
 800cc46:	46a2      	mov	sl, r4
 800cc48:	e7d2      	b.n	800cbf0 <_svfiprintf_r+0x9c>
 800cc4a:	9b03      	ldr	r3, [sp, #12]
 800cc4c:	1d19      	adds	r1, r3, #4
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	9103      	str	r1, [sp, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	bfbb      	ittet	lt
 800cc56:	425b      	neglt	r3, r3
 800cc58:	f042 0202 	orrlt.w	r2, r2, #2
 800cc5c:	9307      	strge	r3, [sp, #28]
 800cc5e:	9307      	strlt	r3, [sp, #28]
 800cc60:	bfb8      	it	lt
 800cc62:	9204      	strlt	r2, [sp, #16]
 800cc64:	7823      	ldrb	r3, [r4, #0]
 800cc66:	2b2e      	cmp	r3, #46	; 0x2e
 800cc68:	d10c      	bne.n	800cc84 <_svfiprintf_r+0x130>
 800cc6a:	7863      	ldrb	r3, [r4, #1]
 800cc6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc6e:	d135      	bne.n	800ccdc <_svfiprintf_r+0x188>
 800cc70:	9b03      	ldr	r3, [sp, #12]
 800cc72:	1d1a      	adds	r2, r3, #4
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	9203      	str	r2, [sp, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	bfb8      	it	lt
 800cc7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc80:	3402      	adds	r4, #2
 800cc82:	9305      	str	r3, [sp, #20]
 800cc84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd50 <_svfiprintf_r+0x1fc>
 800cc88:	7821      	ldrb	r1, [r4, #0]
 800cc8a:	2203      	movs	r2, #3
 800cc8c:	4650      	mov	r0, sl
 800cc8e:	f7f3 faaf 	bl	80001f0 <memchr>
 800cc92:	b140      	cbz	r0, 800cca6 <_svfiprintf_r+0x152>
 800cc94:	2340      	movs	r3, #64	; 0x40
 800cc96:	eba0 000a 	sub.w	r0, r0, sl
 800cc9a:	fa03 f000 	lsl.w	r0, r3, r0
 800cc9e:	9b04      	ldr	r3, [sp, #16]
 800cca0:	4303      	orrs	r3, r0
 800cca2:	3401      	adds	r4, #1
 800cca4:	9304      	str	r3, [sp, #16]
 800cca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccaa:	4826      	ldr	r0, [pc, #152]	; (800cd44 <_svfiprintf_r+0x1f0>)
 800ccac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccb0:	2206      	movs	r2, #6
 800ccb2:	f7f3 fa9d 	bl	80001f0 <memchr>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d038      	beq.n	800cd2c <_svfiprintf_r+0x1d8>
 800ccba:	4b23      	ldr	r3, [pc, #140]	; (800cd48 <_svfiprintf_r+0x1f4>)
 800ccbc:	bb1b      	cbnz	r3, 800cd06 <_svfiprintf_r+0x1b2>
 800ccbe:	9b03      	ldr	r3, [sp, #12]
 800ccc0:	3307      	adds	r3, #7
 800ccc2:	f023 0307 	bic.w	r3, r3, #7
 800ccc6:	3308      	adds	r3, #8
 800ccc8:	9303      	str	r3, [sp, #12]
 800ccca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cccc:	4433      	add	r3, r6
 800ccce:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd0:	e767      	b.n	800cba2 <_svfiprintf_r+0x4e>
 800ccd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	2001      	movs	r0, #1
 800ccda:	e7a5      	b.n	800cc28 <_svfiprintf_r+0xd4>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	3401      	adds	r4, #1
 800cce0:	9305      	str	r3, [sp, #20]
 800cce2:	4619      	mov	r1, r3
 800cce4:	f04f 0c0a 	mov.w	ip, #10
 800cce8:	4620      	mov	r0, r4
 800ccea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccee:	3a30      	subs	r2, #48	; 0x30
 800ccf0:	2a09      	cmp	r2, #9
 800ccf2:	d903      	bls.n	800ccfc <_svfiprintf_r+0x1a8>
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d0c5      	beq.n	800cc84 <_svfiprintf_r+0x130>
 800ccf8:	9105      	str	r1, [sp, #20]
 800ccfa:	e7c3      	b.n	800cc84 <_svfiprintf_r+0x130>
 800ccfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd00:	4604      	mov	r4, r0
 800cd02:	2301      	movs	r3, #1
 800cd04:	e7f0      	b.n	800cce8 <_svfiprintf_r+0x194>
 800cd06:	ab03      	add	r3, sp, #12
 800cd08:	9300      	str	r3, [sp, #0]
 800cd0a:	462a      	mov	r2, r5
 800cd0c:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <_svfiprintf_r+0x1f8>)
 800cd0e:	a904      	add	r1, sp, #16
 800cd10:	4638      	mov	r0, r7
 800cd12:	f7fd ffc9 	bl	800aca8 <_printf_float>
 800cd16:	1c42      	adds	r2, r0, #1
 800cd18:	4606      	mov	r6, r0
 800cd1a:	d1d6      	bne.n	800ccca <_svfiprintf_r+0x176>
 800cd1c:	89ab      	ldrh	r3, [r5, #12]
 800cd1e:	065b      	lsls	r3, r3, #25
 800cd20:	f53f af2c 	bmi.w	800cb7c <_svfiprintf_r+0x28>
 800cd24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd26:	b01d      	add	sp, #116	; 0x74
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2c:	ab03      	add	r3, sp, #12
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	462a      	mov	r2, r5
 800cd32:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <_svfiprintf_r+0x1f8>)
 800cd34:	a904      	add	r1, sp, #16
 800cd36:	4638      	mov	r0, r7
 800cd38:	f7fe fa5a 	bl	800b1f0 <_printf_i>
 800cd3c:	e7eb      	b.n	800cd16 <_svfiprintf_r+0x1c2>
 800cd3e:	bf00      	nop
 800cd40:	08019304 	.word	0x08019304
 800cd44:	0801930e 	.word	0x0801930e
 800cd48:	0800aca9 	.word	0x0800aca9
 800cd4c:	0800ca9d 	.word	0x0800ca9d
 800cd50:	0801930a 	.word	0x0801930a

0800cd54 <_sbrk_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4d06      	ldr	r5, [pc, #24]	; (800cd70 <_sbrk_r+0x1c>)
 800cd58:	2300      	movs	r3, #0
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	602b      	str	r3, [r5, #0]
 800cd60:	f7f6 fcba 	bl	80036d8 <_sbrk>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_sbrk_r+0x1a>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_sbrk_r+0x1a>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	200006b0 	.word	0x200006b0

0800cd74 <__assert_func>:
 800cd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd76:	4614      	mov	r4, r2
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4b09      	ldr	r3, [pc, #36]	; (800cda0 <__assert_func+0x2c>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4605      	mov	r5, r0
 800cd80:	68d8      	ldr	r0, [r3, #12]
 800cd82:	b14c      	cbz	r4, 800cd98 <__assert_func+0x24>
 800cd84:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <__assert_func+0x30>)
 800cd86:	9100      	str	r1, [sp, #0]
 800cd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd8c:	4906      	ldr	r1, [pc, #24]	; (800cda8 <__assert_func+0x34>)
 800cd8e:	462b      	mov	r3, r5
 800cd90:	f000 f80e 	bl	800cdb0 <fiprintf>
 800cd94:	f000 faac 	bl	800d2f0 <abort>
 800cd98:	4b04      	ldr	r3, [pc, #16]	; (800cdac <__assert_func+0x38>)
 800cd9a:	461c      	mov	r4, r3
 800cd9c:	e7f3      	b.n	800cd86 <__assert_func+0x12>
 800cd9e:	bf00      	nop
 800cda0:	20000044 	.word	0x20000044
 800cda4:	08019315 	.word	0x08019315
 800cda8:	08019322 	.word	0x08019322
 800cdac:	08019350 	.word	0x08019350

0800cdb0 <fiprintf>:
 800cdb0:	b40e      	push	{r1, r2, r3}
 800cdb2:	b503      	push	{r0, r1, lr}
 800cdb4:	4601      	mov	r1, r0
 800cdb6:	ab03      	add	r3, sp, #12
 800cdb8:	4805      	ldr	r0, [pc, #20]	; (800cdd0 <fiprintf+0x20>)
 800cdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdbe:	6800      	ldr	r0, [r0, #0]
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	f000 f897 	bl	800cef4 <_vfiprintf_r>
 800cdc6:	b002      	add	sp, #8
 800cdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdcc:	b003      	add	sp, #12
 800cdce:	4770      	bx	lr
 800cdd0:	20000044 	.word	0x20000044

0800cdd4 <__ascii_mbtowc>:
 800cdd4:	b082      	sub	sp, #8
 800cdd6:	b901      	cbnz	r1, 800cdda <__ascii_mbtowc+0x6>
 800cdd8:	a901      	add	r1, sp, #4
 800cdda:	b142      	cbz	r2, 800cdee <__ascii_mbtowc+0x1a>
 800cddc:	b14b      	cbz	r3, 800cdf2 <__ascii_mbtowc+0x1e>
 800cdde:	7813      	ldrb	r3, [r2, #0]
 800cde0:	600b      	str	r3, [r1, #0]
 800cde2:	7812      	ldrb	r2, [r2, #0]
 800cde4:	1e10      	subs	r0, r2, #0
 800cde6:	bf18      	it	ne
 800cde8:	2001      	movne	r0, #1
 800cdea:	b002      	add	sp, #8
 800cdec:	4770      	bx	lr
 800cdee:	4610      	mov	r0, r2
 800cdf0:	e7fb      	b.n	800cdea <__ascii_mbtowc+0x16>
 800cdf2:	f06f 0001 	mvn.w	r0, #1
 800cdf6:	e7f8      	b.n	800cdea <__ascii_mbtowc+0x16>

0800cdf8 <memmove>:
 800cdf8:	4288      	cmp	r0, r1
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	eb01 0402 	add.w	r4, r1, r2
 800ce00:	d902      	bls.n	800ce08 <memmove+0x10>
 800ce02:	4284      	cmp	r4, r0
 800ce04:	4623      	mov	r3, r4
 800ce06:	d807      	bhi.n	800ce18 <memmove+0x20>
 800ce08:	1e43      	subs	r3, r0, #1
 800ce0a:	42a1      	cmp	r1, r4
 800ce0c:	d008      	beq.n	800ce20 <memmove+0x28>
 800ce0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce16:	e7f8      	b.n	800ce0a <memmove+0x12>
 800ce18:	4402      	add	r2, r0
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	428a      	cmp	r2, r1
 800ce1e:	d100      	bne.n	800ce22 <memmove+0x2a>
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce2a:	e7f7      	b.n	800ce1c <memmove+0x24>

0800ce2c <__malloc_lock>:
 800ce2c:	4801      	ldr	r0, [pc, #4]	; (800ce34 <__malloc_lock+0x8>)
 800ce2e:	f000 bc1f 	b.w	800d670 <__retarget_lock_acquire_recursive>
 800ce32:	bf00      	nop
 800ce34:	200006b4 	.word	0x200006b4

0800ce38 <__malloc_unlock>:
 800ce38:	4801      	ldr	r0, [pc, #4]	; (800ce40 <__malloc_unlock+0x8>)
 800ce3a:	f000 bc1a 	b.w	800d672 <__retarget_lock_release_recursive>
 800ce3e:	bf00      	nop
 800ce40:	200006b4 	.word	0x200006b4

0800ce44 <_realloc_r>:
 800ce44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	4680      	mov	r8, r0
 800ce4a:	4614      	mov	r4, r2
 800ce4c:	460e      	mov	r6, r1
 800ce4e:	b921      	cbnz	r1, 800ce5a <_realloc_r+0x16>
 800ce50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	4611      	mov	r1, r2
 800ce56:	f7ff bdad 	b.w	800c9b4 <_malloc_r>
 800ce5a:	b92a      	cbnz	r2, 800ce68 <_realloc_r+0x24>
 800ce5c:	f7ff fd3e 	bl	800c8dc <_free_r>
 800ce60:	4625      	mov	r5, r4
 800ce62:	4628      	mov	r0, r5
 800ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce68:	f000 fc6a 	bl	800d740 <_malloc_usable_size_r>
 800ce6c:	4284      	cmp	r4, r0
 800ce6e:	4607      	mov	r7, r0
 800ce70:	d802      	bhi.n	800ce78 <_realloc_r+0x34>
 800ce72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce76:	d812      	bhi.n	800ce9e <_realloc_r+0x5a>
 800ce78:	4621      	mov	r1, r4
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	f7ff fd9a 	bl	800c9b4 <_malloc_r>
 800ce80:	4605      	mov	r5, r0
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d0ed      	beq.n	800ce62 <_realloc_r+0x1e>
 800ce86:	42bc      	cmp	r4, r7
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	bf28      	it	cs
 800ce8e:	463a      	movcs	r2, r7
 800ce90:	f7ff f97c 	bl	800c18c <memcpy>
 800ce94:	4631      	mov	r1, r6
 800ce96:	4640      	mov	r0, r8
 800ce98:	f7ff fd20 	bl	800c8dc <_free_r>
 800ce9c:	e7e1      	b.n	800ce62 <_realloc_r+0x1e>
 800ce9e:	4635      	mov	r5, r6
 800cea0:	e7df      	b.n	800ce62 <_realloc_r+0x1e>

0800cea2 <__sfputc_r>:
 800cea2:	6893      	ldr	r3, [r2, #8]
 800cea4:	3b01      	subs	r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	b410      	push	{r4}
 800ceaa:	6093      	str	r3, [r2, #8]
 800ceac:	da08      	bge.n	800cec0 <__sfputc_r+0x1e>
 800ceae:	6994      	ldr	r4, [r2, #24]
 800ceb0:	42a3      	cmp	r3, r4
 800ceb2:	db01      	blt.n	800ceb8 <__sfputc_r+0x16>
 800ceb4:	290a      	cmp	r1, #10
 800ceb6:	d103      	bne.n	800cec0 <__sfputc_r+0x1e>
 800ceb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cebc:	f000 b94a 	b.w	800d154 <__swbuf_r>
 800cec0:	6813      	ldr	r3, [r2, #0]
 800cec2:	1c58      	adds	r0, r3, #1
 800cec4:	6010      	str	r0, [r2, #0]
 800cec6:	7019      	strb	r1, [r3, #0]
 800cec8:	4608      	mov	r0, r1
 800ceca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <__sfputs_r>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	4606      	mov	r6, r0
 800ced4:	460f      	mov	r7, r1
 800ced6:	4614      	mov	r4, r2
 800ced8:	18d5      	adds	r5, r2, r3
 800ceda:	42ac      	cmp	r4, r5
 800cedc:	d101      	bne.n	800cee2 <__sfputs_r+0x12>
 800cede:	2000      	movs	r0, #0
 800cee0:	e007      	b.n	800cef2 <__sfputs_r+0x22>
 800cee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee6:	463a      	mov	r2, r7
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7ff ffda 	bl	800cea2 <__sfputc_r>
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	d1f3      	bne.n	800ceda <__sfputs_r+0xa>
 800cef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cef4 <_vfiprintf_r>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	460d      	mov	r5, r1
 800cefa:	b09d      	sub	sp, #116	; 0x74
 800cefc:	4614      	mov	r4, r2
 800cefe:	4698      	mov	r8, r3
 800cf00:	4606      	mov	r6, r0
 800cf02:	b118      	cbz	r0, 800cf0c <_vfiprintf_r+0x18>
 800cf04:	6983      	ldr	r3, [r0, #24]
 800cf06:	b90b      	cbnz	r3, 800cf0c <_vfiprintf_r+0x18>
 800cf08:	f000 fb14 	bl	800d534 <__sinit>
 800cf0c:	4b89      	ldr	r3, [pc, #548]	; (800d134 <_vfiprintf_r+0x240>)
 800cf0e:	429d      	cmp	r5, r3
 800cf10:	d11b      	bne.n	800cf4a <_vfiprintf_r+0x56>
 800cf12:	6875      	ldr	r5, [r6, #4]
 800cf14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf16:	07d9      	lsls	r1, r3, #31
 800cf18:	d405      	bmi.n	800cf26 <_vfiprintf_r+0x32>
 800cf1a:	89ab      	ldrh	r3, [r5, #12]
 800cf1c:	059a      	lsls	r2, r3, #22
 800cf1e:	d402      	bmi.n	800cf26 <_vfiprintf_r+0x32>
 800cf20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf22:	f000 fba5 	bl	800d670 <__retarget_lock_acquire_recursive>
 800cf26:	89ab      	ldrh	r3, [r5, #12]
 800cf28:	071b      	lsls	r3, r3, #28
 800cf2a:	d501      	bpl.n	800cf30 <_vfiprintf_r+0x3c>
 800cf2c:	692b      	ldr	r3, [r5, #16]
 800cf2e:	b9eb      	cbnz	r3, 800cf6c <_vfiprintf_r+0x78>
 800cf30:	4629      	mov	r1, r5
 800cf32:	4630      	mov	r0, r6
 800cf34:	f000 f96e 	bl	800d214 <__swsetup_r>
 800cf38:	b1c0      	cbz	r0, 800cf6c <_vfiprintf_r+0x78>
 800cf3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf3c:	07dc      	lsls	r4, r3, #31
 800cf3e:	d50e      	bpl.n	800cf5e <_vfiprintf_r+0x6a>
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295
 800cf44:	b01d      	add	sp, #116	; 0x74
 800cf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4a:	4b7b      	ldr	r3, [pc, #492]	; (800d138 <_vfiprintf_r+0x244>)
 800cf4c:	429d      	cmp	r5, r3
 800cf4e:	d101      	bne.n	800cf54 <_vfiprintf_r+0x60>
 800cf50:	68b5      	ldr	r5, [r6, #8]
 800cf52:	e7df      	b.n	800cf14 <_vfiprintf_r+0x20>
 800cf54:	4b79      	ldr	r3, [pc, #484]	; (800d13c <_vfiprintf_r+0x248>)
 800cf56:	429d      	cmp	r5, r3
 800cf58:	bf08      	it	eq
 800cf5a:	68f5      	ldreq	r5, [r6, #12]
 800cf5c:	e7da      	b.n	800cf14 <_vfiprintf_r+0x20>
 800cf5e:	89ab      	ldrh	r3, [r5, #12]
 800cf60:	0598      	lsls	r0, r3, #22
 800cf62:	d4ed      	bmi.n	800cf40 <_vfiprintf_r+0x4c>
 800cf64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf66:	f000 fb84 	bl	800d672 <__retarget_lock_release_recursive>
 800cf6a:	e7e9      	b.n	800cf40 <_vfiprintf_r+0x4c>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf70:	2320      	movs	r3, #32
 800cf72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf7a:	2330      	movs	r3, #48	; 0x30
 800cf7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d140 <_vfiprintf_r+0x24c>
 800cf80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf84:	f04f 0901 	mov.w	r9, #1
 800cf88:	4623      	mov	r3, r4
 800cf8a:	469a      	mov	sl, r3
 800cf8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf90:	b10a      	cbz	r2, 800cf96 <_vfiprintf_r+0xa2>
 800cf92:	2a25      	cmp	r2, #37	; 0x25
 800cf94:	d1f9      	bne.n	800cf8a <_vfiprintf_r+0x96>
 800cf96:	ebba 0b04 	subs.w	fp, sl, r4
 800cf9a:	d00b      	beq.n	800cfb4 <_vfiprintf_r+0xc0>
 800cf9c:	465b      	mov	r3, fp
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff ff94 	bl	800ced0 <__sfputs_r>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	f000 80aa 	beq.w	800d102 <_vfiprintf_r+0x20e>
 800cfae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfb0:	445a      	add	r2, fp
 800cfb2:	9209      	str	r2, [sp, #36]	; 0x24
 800cfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80a2 	beq.w	800d102 <_vfiprintf_r+0x20e>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfc8:	f10a 0a01 	add.w	sl, sl, #1
 800cfcc:	9304      	str	r3, [sp, #16]
 800cfce:	9307      	str	r3, [sp, #28]
 800cfd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfd4:	931a      	str	r3, [sp, #104]	; 0x68
 800cfd6:	4654      	mov	r4, sl
 800cfd8:	2205      	movs	r2, #5
 800cfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfde:	4858      	ldr	r0, [pc, #352]	; (800d140 <_vfiprintf_r+0x24c>)
 800cfe0:	f7f3 f906 	bl	80001f0 <memchr>
 800cfe4:	9a04      	ldr	r2, [sp, #16]
 800cfe6:	b9d8      	cbnz	r0, 800d020 <_vfiprintf_r+0x12c>
 800cfe8:	06d1      	lsls	r1, r2, #27
 800cfea:	bf44      	itt	mi
 800cfec:	2320      	movmi	r3, #32
 800cfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff2:	0713      	lsls	r3, r2, #28
 800cff4:	bf44      	itt	mi
 800cff6:	232b      	movmi	r3, #43	; 0x2b
 800cff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cffc:	f89a 3000 	ldrb.w	r3, [sl]
 800d000:	2b2a      	cmp	r3, #42	; 0x2a
 800d002:	d015      	beq.n	800d030 <_vfiprintf_r+0x13c>
 800d004:	9a07      	ldr	r2, [sp, #28]
 800d006:	4654      	mov	r4, sl
 800d008:	2000      	movs	r0, #0
 800d00a:	f04f 0c0a 	mov.w	ip, #10
 800d00e:	4621      	mov	r1, r4
 800d010:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d014:	3b30      	subs	r3, #48	; 0x30
 800d016:	2b09      	cmp	r3, #9
 800d018:	d94e      	bls.n	800d0b8 <_vfiprintf_r+0x1c4>
 800d01a:	b1b0      	cbz	r0, 800d04a <_vfiprintf_r+0x156>
 800d01c:	9207      	str	r2, [sp, #28]
 800d01e:	e014      	b.n	800d04a <_vfiprintf_r+0x156>
 800d020:	eba0 0308 	sub.w	r3, r0, r8
 800d024:	fa09 f303 	lsl.w	r3, r9, r3
 800d028:	4313      	orrs	r3, r2
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	46a2      	mov	sl, r4
 800d02e:	e7d2      	b.n	800cfd6 <_vfiprintf_r+0xe2>
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	1d19      	adds	r1, r3, #4
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	9103      	str	r1, [sp, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bfbb      	ittet	lt
 800d03c:	425b      	neglt	r3, r3
 800d03e:	f042 0202 	orrlt.w	r2, r2, #2
 800d042:	9307      	strge	r3, [sp, #28]
 800d044:	9307      	strlt	r3, [sp, #28]
 800d046:	bfb8      	it	lt
 800d048:	9204      	strlt	r2, [sp, #16]
 800d04a:	7823      	ldrb	r3, [r4, #0]
 800d04c:	2b2e      	cmp	r3, #46	; 0x2e
 800d04e:	d10c      	bne.n	800d06a <_vfiprintf_r+0x176>
 800d050:	7863      	ldrb	r3, [r4, #1]
 800d052:	2b2a      	cmp	r3, #42	; 0x2a
 800d054:	d135      	bne.n	800d0c2 <_vfiprintf_r+0x1ce>
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	1d1a      	adds	r2, r3, #4
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	9203      	str	r2, [sp, #12]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	bfb8      	it	lt
 800d062:	f04f 33ff 	movlt.w	r3, #4294967295
 800d066:	3402      	adds	r4, #2
 800d068:	9305      	str	r3, [sp, #20]
 800d06a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d150 <_vfiprintf_r+0x25c>
 800d06e:	7821      	ldrb	r1, [r4, #0]
 800d070:	2203      	movs	r2, #3
 800d072:	4650      	mov	r0, sl
 800d074:	f7f3 f8bc 	bl	80001f0 <memchr>
 800d078:	b140      	cbz	r0, 800d08c <_vfiprintf_r+0x198>
 800d07a:	2340      	movs	r3, #64	; 0x40
 800d07c:	eba0 000a 	sub.w	r0, r0, sl
 800d080:	fa03 f000 	lsl.w	r0, r3, r0
 800d084:	9b04      	ldr	r3, [sp, #16]
 800d086:	4303      	orrs	r3, r0
 800d088:	3401      	adds	r4, #1
 800d08a:	9304      	str	r3, [sp, #16]
 800d08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d090:	482c      	ldr	r0, [pc, #176]	; (800d144 <_vfiprintf_r+0x250>)
 800d092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d096:	2206      	movs	r2, #6
 800d098:	f7f3 f8aa 	bl	80001f0 <memchr>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d03f      	beq.n	800d120 <_vfiprintf_r+0x22c>
 800d0a0:	4b29      	ldr	r3, [pc, #164]	; (800d148 <_vfiprintf_r+0x254>)
 800d0a2:	bb1b      	cbnz	r3, 800d0ec <_vfiprintf_r+0x1f8>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	3307      	adds	r3, #7
 800d0a8:	f023 0307 	bic.w	r3, r3, #7
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	9303      	str	r3, [sp, #12]
 800d0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b2:	443b      	add	r3, r7
 800d0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b6:	e767      	b.n	800cf88 <_vfiprintf_r+0x94>
 800d0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0bc:	460c      	mov	r4, r1
 800d0be:	2001      	movs	r0, #1
 800d0c0:	e7a5      	b.n	800d00e <_vfiprintf_r+0x11a>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	3401      	adds	r4, #1
 800d0c6:	9305      	str	r3, [sp, #20]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	f04f 0c0a 	mov.w	ip, #10
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0d4:	3a30      	subs	r2, #48	; 0x30
 800d0d6:	2a09      	cmp	r2, #9
 800d0d8:	d903      	bls.n	800d0e2 <_vfiprintf_r+0x1ee>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d0c5      	beq.n	800d06a <_vfiprintf_r+0x176>
 800d0de:	9105      	str	r1, [sp, #20]
 800d0e0:	e7c3      	b.n	800d06a <_vfiprintf_r+0x176>
 800d0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e7f0      	b.n	800d0ce <_vfiprintf_r+0x1da>
 800d0ec:	ab03      	add	r3, sp, #12
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4b16      	ldr	r3, [pc, #88]	; (800d14c <_vfiprintf_r+0x258>)
 800d0f4:	a904      	add	r1, sp, #16
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f7fd fdd6 	bl	800aca8 <_printf_float>
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	1c78      	adds	r0, r7, #1
 800d100:	d1d6      	bne.n	800d0b0 <_vfiprintf_r+0x1bc>
 800d102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d104:	07d9      	lsls	r1, r3, #31
 800d106:	d405      	bmi.n	800d114 <_vfiprintf_r+0x220>
 800d108:	89ab      	ldrh	r3, [r5, #12]
 800d10a:	059a      	lsls	r2, r3, #22
 800d10c:	d402      	bmi.n	800d114 <_vfiprintf_r+0x220>
 800d10e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d110:	f000 faaf 	bl	800d672 <__retarget_lock_release_recursive>
 800d114:	89ab      	ldrh	r3, [r5, #12]
 800d116:	065b      	lsls	r3, r3, #25
 800d118:	f53f af12 	bmi.w	800cf40 <_vfiprintf_r+0x4c>
 800d11c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d11e:	e711      	b.n	800cf44 <_vfiprintf_r+0x50>
 800d120:	ab03      	add	r3, sp, #12
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	462a      	mov	r2, r5
 800d126:	4b09      	ldr	r3, [pc, #36]	; (800d14c <_vfiprintf_r+0x258>)
 800d128:	a904      	add	r1, sp, #16
 800d12a:	4630      	mov	r0, r6
 800d12c:	f7fe f860 	bl	800b1f0 <_printf_i>
 800d130:	e7e4      	b.n	800d0fc <_vfiprintf_r+0x208>
 800d132:	bf00      	nop
 800d134:	0801947c 	.word	0x0801947c
 800d138:	0801949c 	.word	0x0801949c
 800d13c:	0801945c 	.word	0x0801945c
 800d140:	08019304 	.word	0x08019304
 800d144:	0801930e 	.word	0x0801930e
 800d148:	0800aca9 	.word	0x0800aca9
 800d14c:	0800ced1 	.word	0x0800ced1
 800d150:	0801930a 	.word	0x0801930a

0800d154 <__swbuf_r>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	460e      	mov	r6, r1
 800d158:	4614      	mov	r4, r2
 800d15a:	4605      	mov	r5, r0
 800d15c:	b118      	cbz	r0, 800d166 <__swbuf_r+0x12>
 800d15e:	6983      	ldr	r3, [r0, #24]
 800d160:	b90b      	cbnz	r3, 800d166 <__swbuf_r+0x12>
 800d162:	f000 f9e7 	bl	800d534 <__sinit>
 800d166:	4b21      	ldr	r3, [pc, #132]	; (800d1ec <__swbuf_r+0x98>)
 800d168:	429c      	cmp	r4, r3
 800d16a:	d12b      	bne.n	800d1c4 <__swbuf_r+0x70>
 800d16c:	686c      	ldr	r4, [r5, #4]
 800d16e:	69a3      	ldr	r3, [r4, #24]
 800d170:	60a3      	str	r3, [r4, #8]
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	071a      	lsls	r2, r3, #28
 800d176:	d52f      	bpl.n	800d1d8 <__swbuf_r+0x84>
 800d178:	6923      	ldr	r3, [r4, #16]
 800d17a:	b36b      	cbz	r3, 800d1d8 <__swbuf_r+0x84>
 800d17c:	6923      	ldr	r3, [r4, #16]
 800d17e:	6820      	ldr	r0, [r4, #0]
 800d180:	1ac0      	subs	r0, r0, r3
 800d182:	6963      	ldr	r3, [r4, #20]
 800d184:	b2f6      	uxtb	r6, r6
 800d186:	4283      	cmp	r3, r0
 800d188:	4637      	mov	r7, r6
 800d18a:	dc04      	bgt.n	800d196 <__swbuf_r+0x42>
 800d18c:	4621      	mov	r1, r4
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 f93c 	bl	800d40c <_fflush_r>
 800d194:	bb30      	cbnz	r0, 800d1e4 <__swbuf_r+0x90>
 800d196:	68a3      	ldr	r3, [r4, #8]
 800d198:	3b01      	subs	r3, #1
 800d19a:	60a3      	str	r3, [r4, #8]
 800d19c:	6823      	ldr	r3, [r4, #0]
 800d19e:	1c5a      	adds	r2, r3, #1
 800d1a0:	6022      	str	r2, [r4, #0]
 800d1a2:	701e      	strb	r6, [r3, #0]
 800d1a4:	6963      	ldr	r3, [r4, #20]
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	4283      	cmp	r3, r0
 800d1aa:	d004      	beq.n	800d1b6 <__swbuf_r+0x62>
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	07db      	lsls	r3, r3, #31
 800d1b0:	d506      	bpl.n	800d1c0 <__swbuf_r+0x6c>
 800d1b2:	2e0a      	cmp	r6, #10
 800d1b4:	d104      	bne.n	800d1c0 <__swbuf_r+0x6c>
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f000 f927 	bl	800d40c <_fflush_r>
 800d1be:	b988      	cbnz	r0, 800d1e4 <__swbuf_r+0x90>
 800d1c0:	4638      	mov	r0, r7
 800d1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c4:	4b0a      	ldr	r3, [pc, #40]	; (800d1f0 <__swbuf_r+0x9c>)
 800d1c6:	429c      	cmp	r4, r3
 800d1c8:	d101      	bne.n	800d1ce <__swbuf_r+0x7a>
 800d1ca:	68ac      	ldr	r4, [r5, #8]
 800d1cc:	e7cf      	b.n	800d16e <__swbuf_r+0x1a>
 800d1ce:	4b09      	ldr	r3, [pc, #36]	; (800d1f4 <__swbuf_r+0xa0>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	bf08      	it	eq
 800d1d4:	68ec      	ldreq	r4, [r5, #12]
 800d1d6:	e7ca      	b.n	800d16e <__swbuf_r+0x1a>
 800d1d8:	4621      	mov	r1, r4
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f000 f81a 	bl	800d214 <__swsetup_r>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d0cb      	beq.n	800d17c <__swbuf_r+0x28>
 800d1e4:	f04f 37ff 	mov.w	r7, #4294967295
 800d1e8:	e7ea      	b.n	800d1c0 <__swbuf_r+0x6c>
 800d1ea:	bf00      	nop
 800d1ec:	0801947c 	.word	0x0801947c
 800d1f0:	0801949c 	.word	0x0801949c
 800d1f4:	0801945c 	.word	0x0801945c

0800d1f8 <__ascii_wctomb>:
 800d1f8:	b149      	cbz	r1, 800d20e <__ascii_wctomb+0x16>
 800d1fa:	2aff      	cmp	r2, #255	; 0xff
 800d1fc:	bf85      	ittet	hi
 800d1fe:	238a      	movhi	r3, #138	; 0x8a
 800d200:	6003      	strhi	r3, [r0, #0]
 800d202:	700a      	strbls	r2, [r1, #0]
 800d204:	f04f 30ff 	movhi.w	r0, #4294967295
 800d208:	bf98      	it	ls
 800d20a:	2001      	movls	r0, #1
 800d20c:	4770      	bx	lr
 800d20e:	4608      	mov	r0, r1
 800d210:	4770      	bx	lr
	...

0800d214 <__swsetup_r>:
 800d214:	4b32      	ldr	r3, [pc, #200]	; (800d2e0 <__swsetup_r+0xcc>)
 800d216:	b570      	push	{r4, r5, r6, lr}
 800d218:	681d      	ldr	r5, [r3, #0]
 800d21a:	4606      	mov	r6, r0
 800d21c:	460c      	mov	r4, r1
 800d21e:	b125      	cbz	r5, 800d22a <__swsetup_r+0x16>
 800d220:	69ab      	ldr	r3, [r5, #24]
 800d222:	b913      	cbnz	r3, 800d22a <__swsetup_r+0x16>
 800d224:	4628      	mov	r0, r5
 800d226:	f000 f985 	bl	800d534 <__sinit>
 800d22a:	4b2e      	ldr	r3, [pc, #184]	; (800d2e4 <__swsetup_r+0xd0>)
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d10f      	bne.n	800d250 <__swsetup_r+0x3c>
 800d230:	686c      	ldr	r4, [r5, #4]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d238:	0719      	lsls	r1, r3, #28
 800d23a:	d42c      	bmi.n	800d296 <__swsetup_r+0x82>
 800d23c:	06dd      	lsls	r5, r3, #27
 800d23e:	d411      	bmi.n	800d264 <__swsetup_r+0x50>
 800d240:	2309      	movs	r3, #9
 800d242:	6033      	str	r3, [r6, #0]
 800d244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	f04f 30ff 	mov.w	r0, #4294967295
 800d24e:	e03e      	b.n	800d2ce <__swsetup_r+0xba>
 800d250:	4b25      	ldr	r3, [pc, #148]	; (800d2e8 <__swsetup_r+0xd4>)
 800d252:	429c      	cmp	r4, r3
 800d254:	d101      	bne.n	800d25a <__swsetup_r+0x46>
 800d256:	68ac      	ldr	r4, [r5, #8]
 800d258:	e7eb      	b.n	800d232 <__swsetup_r+0x1e>
 800d25a:	4b24      	ldr	r3, [pc, #144]	; (800d2ec <__swsetup_r+0xd8>)
 800d25c:	429c      	cmp	r4, r3
 800d25e:	bf08      	it	eq
 800d260:	68ec      	ldreq	r4, [r5, #12]
 800d262:	e7e6      	b.n	800d232 <__swsetup_r+0x1e>
 800d264:	0758      	lsls	r0, r3, #29
 800d266:	d512      	bpl.n	800d28e <__swsetup_r+0x7a>
 800d268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d26a:	b141      	cbz	r1, 800d27e <__swsetup_r+0x6a>
 800d26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d270:	4299      	cmp	r1, r3
 800d272:	d002      	beq.n	800d27a <__swsetup_r+0x66>
 800d274:	4630      	mov	r0, r6
 800d276:	f7ff fb31 	bl	800c8dc <_free_r>
 800d27a:	2300      	movs	r3, #0
 800d27c:	6363      	str	r3, [r4, #52]	; 0x34
 800d27e:	89a3      	ldrh	r3, [r4, #12]
 800d280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	2300      	movs	r3, #0
 800d288:	6063      	str	r3, [r4, #4]
 800d28a:	6923      	ldr	r3, [r4, #16]
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	f043 0308 	orr.w	r3, r3, #8
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	b94b      	cbnz	r3, 800d2ae <__swsetup_r+0x9a>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2a4:	d003      	beq.n	800d2ae <__swsetup_r+0x9a>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f000 fa09 	bl	800d6c0 <__smakebuf_r>
 800d2ae:	89a0      	ldrh	r0, [r4, #12]
 800d2b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2b4:	f010 0301 	ands.w	r3, r0, #1
 800d2b8:	d00a      	beq.n	800d2d0 <__swsetup_r+0xbc>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60a3      	str	r3, [r4, #8]
 800d2be:	6963      	ldr	r3, [r4, #20]
 800d2c0:	425b      	negs	r3, r3
 800d2c2:	61a3      	str	r3, [r4, #24]
 800d2c4:	6923      	ldr	r3, [r4, #16]
 800d2c6:	b943      	cbnz	r3, 800d2da <__swsetup_r+0xc6>
 800d2c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2cc:	d1ba      	bne.n	800d244 <__swsetup_r+0x30>
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}
 800d2d0:	0781      	lsls	r1, r0, #30
 800d2d2:	bf58      	it	pl
 800d2d4:	6963      	ldrpl	r3, [r4, #20]
 800d2d6:	60a3      	str	r3, [r4, #8]
 800d2d8:	e7f4      	b.n	800d2c4 <__swsetup_r+0xb0>
 800d2da:	2000      	movs	r0, #0
 800d2dc:	e7f7      	b.n	800d2ce <__swsetup_r+0xba>
 800d2de:	bf00      	nop
 800d2e0:	20000044 	.word	0x20000044
 800d2e4:	0801947c 	.word	0x0801947c
 800d2e8:	0801949c 	.word	0x0801949c
 800d2ec:	0801945c 	.word	0x0801945c

0800d2f0 <abort>:
 800d2f0:	b508      	push	{r3, lr}
 800d2f2:	2006      	movs	r0, #6
 800d2f4:	f000 fa54 	bl	800d7a0 <raise>
 800d2f8:	2001      	movs	r0, #1
 800d2fa:	f7f6 f975 	bl	80035e8 <_exit>
	...

0800d300 <__sflush_r>:
 800d300:	898a      	ldrh	r2, [r1, #12]
 800d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d306:	4605      	mov	r5, r0
 800d308:	0710      	lsls	r0, r2, #28
 800d30a:	460c      	mov	r4, r1
 800d30c:	d458      	bmi.n	800d3c0 <__sflush_r+0xc0>
 800d30e:	684b      	ldr	r3, [r1, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	dc05      	bgt.n	800d320 <__sflush_r+0x20>
 800d314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d316:	2b00      	cmp	r3, #0
 800d318:	dc02      	bgt.n	800d320 <__sflush_r+0x20>
 800d31a:	2000      	movs	r0, #0
 800d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d322:	2e00      	cmp	r6, #0
 800d324:	d0f9      	beq.n	800d31a <__sflush_r+0x1a>
 800d326:	2300      	movs	r3, #0
 800d328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d32c:	682f      	ldr	r7, [r5, #0]
 800d32e:	602b      	str	r3, [r5, #0]
 800d330:	d032      	beq.n	800d398 <__sflush_r+0x98>
 800d332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d334:	89a3      	ldrh	r3, [r4, #12]
 800d336:	075a      	lsls	r2, r3, #29
 800d338:	d505      	bpl.n	800d346 <__sflush_r+0x46>
 800d33a:	6863      	ldr	r3, [r4, #4]
 800d33c:	1ac0      	subs	r0, r0, r3
 800d33e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d340:	b10b      	cbz	r3, 800d346 <__sflush_r+0x46>
 800d342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d344:	1ac0      	subs	r0, r0, r3
 800d346:	2300      	movs	r3, #0
 800d348:	4602      	mov	r2, r0
 800d34a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d34c:	6a21      	ldr	r1, [r4, #32]
 800d34e:	4628      	mov	r0, r5
 800d350:	47b0      	blx	r6
 800d352:	1c43      	adds	r3, r0, #1
 800d354:	89a3      	ldrh	r3, [r4, #12]
 800d356:	d106      	bne.n	800d366 <__sflush_r+0x66>
 800d358:	6829      	ldr	r1, [r5, #0]
 800d35a:	291d      	cmp	r1, #29
 800d35c:	d82c      	bhi.n	800d3b8 <__sflush_r+0xb8>
 800d35e:	4a2a      	ldr	r2, [pc, #168]	; (800d408 <__sflush_r+0x108>)
 800d360:	40ca      	lsrs	r2, r1
 800d362:	07d6      	lsls	r6, r2, #31
 800d364:	d528      	bpl.n	800d3b8 <__sflush_r+0xb8>
 800d366:	2200      	movs	r2, #0
 800d368:	6062      	str	r2, [r4, #4]
 800d36a:	04d9      	lsls	r1, r3, #19
 800d36c:	6922      	ldr	r2, [r4, #16]
 800d36e:	6022      	str	r2, [r4, #0]
 800d370:	d504      	bpl.n	800d37c <__sflush_r+0x7c>
 800d372:	1c42      	adds	r2, r0, #1
 800d374:	d101      	bne.n	800d37a <__sflush_r+0x7a>
 800d376:	682b      	ldr	r3, [r5, #0]
 800d378:	b903      	cbnz	r3, 800d37c <__sflush_r+0x7c>
 800d37a:	6560      	str	r0, [r4, #84]	; 0x54
 800d37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d37e:	602f      	str	r7, [r5, #0]
 800d380:	2900      	cmp	r1, #0
 800d382:	d0ca      	beq.n	800d31a <__sflush_r+0x1a>
 800d384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d388:	4299      	cmp	r1, r3
 800d38a:	d002      	beq.n	800d392 <__sflush_r+0x92>
 800d38c:	4628      	mov	r0, r5
 800d38e:	f7ff faa5 	bl	800c8dc <_free_r>
 800d392:	2000      	movs	r0, #0
 800d394:	6360      	str	r0, [r4, #52]	; 0x34
 800d396:	e7c1      	b.n	800d31c <__sflush_r+0x1c>
 800d398:	6a21      	ldr	r1, [r4, #32]
 800d39a:	2301      	movs	r3, #1
 800d39c:	4628      	mov	r0, r5
 800d39e:	47b0      	blx	r6
 800d3a0:	1c41      	adds	r1, r0, #1
 800d3a2:	d1c7      	bne.n	800d334 <__sflush_r+0x34>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d0c4      	beq.n	800d334 <__sflush_r+0x34>
 800d3aa:	2b1d      	cmp	r3, #29
 800d3ac:	d001      	beq.n	800d3b2 <__sflush_r+0xb2>
 800d3ae:	2b16      	cmp	r3, #22
 800d3b0:	d101      	bne.n	800d3b6 <__sflush_r+0xb6>
 800d3b2:	602f      	str	r7, [r5, #0]
 800d3b4:	e7b1      	b.n	800d31a <__sflush_r+0x1a>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3bc:	81a3      	strh	r3, [r4, #12]
 800d3be:	e7ad      	b.n	800d31c <__sflush_r+0x1c>
 800d3c0:	690f      	ldr	r7, [r1, #16]
 800d3c2:	2f00      	cmp	r7, #0
 800d3c4:	d0a9      	beq.n	800d31a <__sflush_r+0x1a>
 800d3c6:	0793      	lsls	r3, r2, #30
 800d3c8:	680e      	ldr	r6, [r1, #0]
 800d3ca:	bf08      	it	eq
 800d3cc:	694b      	ldreq	r3, [r1, #20]
 800d3ce:	600f      	str	r7, [r1, #0]
 800d3d0:	bf18      	it	ne
 800d3d2:	2300      	movne	r3, #0
 800d3d4:	eba6 0807 	sub.w	r8, r6, r7
 800d3d8:	608b      	str	r3, [r1, #8]
 800d3da:	f1b8 0f00 	cmp.w	r8, #0
 800d3de:	dd9c      	ble.n	800d31a <__sflush_r+0x1a>
 800d3e0:	6a21      	ldr	r1, [r4, #32]
 800d3e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3e4:	4643      	mov	r3, r8
 800d3e6:	463a      	mov	r2, r7
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	47b0      	blx	r6
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	dc06      	bgt.n	800d3fe <__sflush_r+0xfe>
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f6:	81a3      	strh	r3, [r4, #12]
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fc:	e78e      	b.n	800d31c <__sflush_r+0x1c>
 800d3fe:	4407      	add	r7, r0
 800d400:	eba8 0800 	sub.w	r8, r8, r0
 800d404:	e7e9      	b.n	800d3da <__sflush_r+0xda>
 800d406:	bf00      	nop
 800d408:	20400001 	.word	0x20400001

0800d40c <_fflush_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	690b      	ldr	r3, [r1, #16]
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	b913      	cbnz	r3, 800d41c <_fflush_r+0x10>
 800d416:	2500      	movs	r5, #0
 800d418:	4628      	mov	r0, r5
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	b118      	cbz	r0, 800d426 <_fflush_r+0x1a>
 800d41e:	6983      	ldr	r3, [r0, #24]
 800d420:	b90b      	cbnz	r3, 800d426 <_fflush_r+0x1a>
 800d422:	f000 f887 	bl	800d534 <__sinit>
 800d426:	4b14      	ldr	r3, [pc, #80]	; (800d478 <_fflush_r+0x6c>)
 800d428:	429c      	cmp	r4, r3
 800d42a:	d11b      	bne.n	800d464 <_fflush_r+0x58>
 800d42c:	686c      	ldr	r4, [r5, #4]
 800d42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0ef      	beq.n	800d416 <_fflush_r+0xa>
 800d436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d438:	07d0      	lsls	r0, r2, #31
 800d43a:	d404      	bmi.n	800d446 <_fflush_r+0x3a>
 800d43c:	0599      	lsls	r1, r3, #22
 800d43e:	d402      	bmi.n	800d446 <_fflush_r+0x3a>
 800d440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d442:	f000 f915 	bl	800d670 <__retarget_lock_acquire_recursive>
 800d446:	4628      	mov	r0, r5
 800d448:	4621      	mov	r1, r4
 800d44a:	f7ff ff59 	bl	800d300 <__sflush_r>
 800d44e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d450:	07da      	lsls	r2, r3, #31
 800d452:	4605      	mov	r5, r0
 800d454:	d4e0      	bmi.n	800d418 <_fflush_r+0xc>
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	059b      	lsls	r3, r3, #22
 800d45a:	d4dd      	bmi.n	800d418 <_fflush_r+0xc>
 800d45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d45e:	f000 f908 	bl	800d672 <__retarget_lock_release_recursive>
 800d462:	e7d9      	b.n	800d418 <_fflush_r+0xc>
 800d464:	4b05      	ldr	r3, [pc, #20]	; (800d47c <_fflush_r+0x70>)
 800d466:	429c      	cmp	r4, r3
 800d468:	d101      	bne.n	800d46e <_fflush_r+0x62>
 800d46a:	68ac      	ldr	r4, [r5, #8]
 800d46c:	e7df      	b.n	800d42e <_fflush_r+0x22>
 800d46e:	4b04      	ldr	r3, [pc, #16]	; (800d480 <_fflush_r+0x74>)
 800d470:	429c      	cmp	r4, r3
 800d472:	bf08      	it	eq
 800d474:	68ec      	ldreq	r4, [r5, #12]
 800d476:	e7da      	b.n	800d42e <_fflush_r+0x22>
 800d478:	0801947c 	.word	0x0801947c
 800d47c:	0801949c 	.word	0x0801949c
 800d480:	0801945c 	.word	0x0801945c

0800d484 <std>:
 800d484:	2300      	movs	r3, #0
 800d486:	b510      	push	{r4, lr}
 800d488:	4604      	mov	r4, r0
 800d48a:	e9c0 3300 	strd	r3, r3, [r0]
 800d48e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d492:	6083      	str	r3, [r0, #8]
 800d494:	8181      	strh	r1, [r0, #12]
 800d496:	6643      	str	r3, [r0, #100]	; 0x64
 800d498:	81c2      	strh	r2, [r0, #14]
 800d49a:	6183      	str	r3, [r0, #24]
 800d49c:	4619      	mov	r1, r3
 800d49e:	2208      	movs	r2, #8
 800d4a0:	305c      	adds	r0, #92	; 0x5c
 800d4a2:	f7fd fb59 	bl	800ab58 <memset>
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <std+0x38>)
 800d4a8:	6263      	str	r3, [r4, #36]	; 0x24
 800d4aa:	4b05      	ldr	r3, [pc, #20]	; (800d4c0 <std+0x3c>)
 800d4ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4ae:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <std+0x40>)
 800d4b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4b2:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <std+0x44>)
 800d4b4:	6224      	str	r4, [r4, #32]
 800d4b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d4b8:	bd10      	pop	{r4, pc}
 800d4ba:	bf00      	nop
 800d4bc:	0800d7d9 	.word	0x0800d7d9
 800d4c0:	0800d7fb 	.word	0x0800d7fb
 800d4c4:	0800d833 	.word	0x0800d833
 800d4c8:	0800d857 	.word	0x0800d857

0800d4cc <_cleanup_r>:
 800d4cc:	4901      	ldr	r1, [pc, #4]	; (800d4d4 <_cleanup_r+0x8>)
 800d4ce:	f000 b8af 	b.w	800d630 <_fwalk_reent>
 800d4d2:	bf00      	nop
 800d4d4:	0800d40d 	.word	0x0800d40d

0800d4d8 <__sfmoreglue>:
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	2268      	movs	r2, #104	; 0x68
 800d4dc:	1e4d      	subs	r5, r1, #1
 800d4de:	4355      	muls	r5, r2
 800d4e0:	460e      	mov	r6, r1
 800d4e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4e6:	f7ff fa65 	bl	800c9b4 <_malloc_r>
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	b140      	cbz	r0, 800d500 <__sfmoreglue+0x28>
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	e9c0 1600 	strd	r1, r6, [r0]
 800d4f4:	300c      	adds	r0, #12
 800d4f6:	60a0      	str	r0, [r4, #8]
 800d4f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4fc:	f7fd fb2c 	bl	800ab58 <memset>
 800d500:	4620      	mov	r0, r4
 800d502:	bd70      	pop	{r4, r5, r6, pc}

0800d504 <__sfp_lock_acquire>:
 800d504:	4801      	ldr	r0, [pc, #4]	; (800d50c <__sfp_lock_acquire+0x8>)
 800d506:	f000 b8b3 	b.w	800d670 <__retarget_lock_acquire_recursive>
 800d50a:	bf00      	nop
 800d50c:	200006b5 	.word	0x200006b5

0800d510 <__sfp_lock_release>:
 800d510:	4801      	ldr	r0, [pc, #4]	; (800d518 <__sfp_lock_release+0x8>)
 800d512:	f000 b8ae 	b.w	800d672 <__retarget_lock_release_recursive>
 800d516:	bf00      	nop
 800d518:	200006b5 	.word	0x200006b5

0800d51c <__sinit_lock_acquire>:
 800d51c:	4801      	ldr	r0, [pc, #4]	; (800d524 <__sinit_lock_acquire+0x8>)
 800d51e:	f000 b8a7 	b.w	800d670 <__retarget_lock_acquire_recursive>
 800d522:	bf00      	nop
 800d524:	200006b6 	.word	0x200006b6

0800d528 <__sinit_lock_release>:
 800d528:	4801      	ldr	r0, [pc, #4]	; (800d530 <__sinit_lock_release+0x8>)
 800d52a:	f000 b8a2 	b.w	800d672 <__retarget_lock_release_recursive>
 800d52e:	bf00      	nop
 800d530:	200006b6 	.word	0x200006b6

0800d534 <__sinit>:
 800d534:	b510      	push	{r4, lr}
 800d536:	4604      	mov	r4, r0
 800d538:	f7ff fff0 	bl	800d51c <__sinit_lock_acquire>
 800d53c:	69a3      	ldr	r3, [r4, #24]
 800d53e:	b11b      	cbz	r3, 800d548 <__sinit+0x14>
 800d540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d544:	f7ff bff0 	b.w	800d528 <__sinit_lock_release>
 800d548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d54c:	6523      	str	r3, [r4, #80]	; 0x50
 800d54e:	4b13      	ldr	r3, [pc, #76]	; (800d59c <__sinit+0x68>)
 800d550:	4a13      	ldr	r2, [pc, #76]	; (800d5a0 <__sinit+0x6c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	62a2      	str	r2, [r4, #40]	; 0x28
 800d556:	42a3      	cmp	r3, r4
 800d558:	bf04      	itt	eq
 800d55a:	2301      	moveq	r3, #1
 800d55c:	61a3      	streq	r3, [r4, #24]
 800d55e:	4620      	mov	r0, r4
 800d560:	f000 f820 	bl	800d5a4 <__sfp>
 800d564:	6060      	str	r0, [r4, #4]
 800d566:	4620      	mov	r0, r4
 800d568:	f000 f81c 	bl	800d5a4 <__sfp>
 800d56c:	60a0      	str	r0, [r4, #8]
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 f818 	bl	800d5a4 <__sfp>
 800d574:	2200      	movs	r2, #0
 800d576:	60e0      	str	r0, [r4, #12]
 800d578:	2104      	movs	r1, #4
 800d57a:	6860      	ldr	r0, [r4, #4]
 800d57c:	f7ff ff82 	bl	800d484 <std>
 800d580:	68a0      	ldr	r0, [r4, #8]
 800d582:	2201      	movs	r2, #1
 800d584:	2109      	movs	r1, #9
 800d586:	f7ff ff7d 	bl	800d484 <std>
 800d58a:	68e0      	ldr	r0, [r4, #12]
 800d58c:	2202      	movs	r2, #2
 800d58e:	2112      	movs	r1, #18
 800d590:	f7ff ff78 	bl	800d484 <std>
 800d594:	2301      	movs	r3, #1
 800d596:	61a3      	str	r3, [r4, #24]
 800d598:	e7d2      	b.n	800d540 <__sinit+0xc>
 800d59a:	bf00      	nop
 800d59c:	080190e0 	.word	0x080190e0
 800d5a0:	0800d4cd 	.word	0x0800d4cd

0800d5a4 <__sfp>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	f7ff ffac 	bl	800d504 <__sfp_lock_acquire>
 800d5ac:	4b1e      	ldr	r3, [pc, #120]	; (800d628 <__sfp+0x84>)
 800d5ae:	681e      	ldr	r6, [r3, #0]
 800d5b0:	69b3      	ldr	r3, [r6, #24]
 800d5b2:	b913      	cbnz	r3, 800d5ba <__sfp+0x16>
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7ff ffbd 	bl	800d534 <__sinit>
 800d5ba:	3648      	adds	r6, #72	; 0x48
 800d5bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	d503      	bpl.n	800d5cc <__sfp+0x28>
 800d5c4:	6833      	ldr	r3, [r6, #0]
 800d5c6:	b30b      	cbz	r3, 800d60c <__sfp+0x68>
 800d5c8:	6836      	ldr	r6, [r6, #0]
 800d5ca:	e7f7      	b.n	800d5bc <__sfp+0x18>
 800d5cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d5d0:	b9d5      	cbnz	r5, 800d608 <__sfp+0x64>
 800d5d2:	4b16      	ldr	r3, [pc, #88]	; (800d62c <__sfp+0x88>)
 800d5d4:	60e3      	str	r3, [r4, #12]
 800d5d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5da:	6665      	str	r5, [r4, #100]	; 0x64
 800d5dc:	f000 f847 	bl	800d66e <__retarget_lock_init_recursive>
 800d5e0:	f7ff ff96 	bl	800d510 <__sfp_lock_release>
 800d5e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d5e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d5ec:	6025      	str	r5, [r4, #0]
 800d5ee:	61a5      	str	r5, [r4, #24]
 800d5f0:	2208      	movs	r2, #8
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5f8:	f7fd faae 	bl	800ab58 <memset>
 800d5fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d604:	4620      	mov	r0, r4
 800d606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d608:	3468      	adds	r4, #104	; 0x68
 800d60a:	e7d9      	b.n	800d5c0 <__sfp+0x1c>
 800d60c:	2104      	movs	r1, #4
 800d60e:	4638      	mov	r0, r7
 800d610:	f7ff ff62 	bl	800d4d8 <__sfmoreglue>
 800d614:	4604      	mov	r4, r0
 800d616:	6030      	str	r0, [r6, #0]
 800d618:	2800      	cmp	r0, #0
 800d61a:	d1d5      	bne.n	800d5c8 <__sfp+0x24>
 800d61c:	f7ff ff78 	bl	800d510 <__sfp_lock_release>
 800d620:	230c      	movs	r3, #12
 800d622:	603b      	str	r3, [r7, #0]
 800d624:	e7ee      	b.n	800d604 <__sfp+0x60>
 800d626:	bf00      	nop
 800d628:	080190e0 	.word	0x080190e0
 800d62c:	ffff0001 	.word	0xffff0001

0800d630 <_fwalk_reent>:
 800d630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d634:	4606      	mov	r6, r0
 800d636:	4688      	mov	r8, r1
 800d638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d63c:	2700      	movs	r7, #0
 800d63e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d642:	f1b9 0901 	subs.w	r9, r9, #1
 800d646:	d505      	bpl.n	800d654 <_fwalk_reent+0x24>
 800d648:	6824      	ldr	r4, [r4, #0]
 800d64a:	2c00      	cmp	r4, #0
 800d64c:	d1f7      	bne.n	800d63e <_fwalk_reent+0xe>
 800d64e:	4638      	mov	r0, r7
 800d650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d654:	89ab      	ldrh	r3, [r5, #12]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d907      	bls.n	800d66a <_fwalk_reent+0x3a>
 800d65a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d65e:	3301      	adds	r3, #1
 800d660:	d003      	beq.n	800d66a <_fwalk_reent+0x3a>
 800d662:	4629      	mov	r1, r5
 800d664:	4630      	mov	r0, r6
 800d666:	47c0      	blx	r8
 800d668:	4307      	orrs	r7, r0
 800d66a:	3568      	adds	r5, #104	; 0x68
 800d66c:	e7e9      	b.n	800d642 <_fwalk_reent+0x12>

0800d66e <__retarget_lock_init_recursive>:
 800d66e:	4770      	bx	lr

0800d670 <__retarget_lock_acquire_recursive>:
 800d670:	4770      	bx	lr

0800d672 <__retarget_lock_release_recursive>:
 800d672:	4770      	bx	lr

0800d674 <__swhatbuf_r>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	460e      	mov	r6, r1
 800d678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d67c:	2900      	cmp	r1, #0
 800d67e:	b096      	sub	sp, #88	; 0x58
 800d680:	4614      	mov	r4, r2
 800d682:	461d      	mov	r5, r3
 800d684:	da08      	bge.n	800d698 <__swhatbuf_r+0x24>
 800d686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	602a      	str	r2, [r5, #0]
 800d68e:	061a      	lsls	r2, r3, #24
 800d690:	d410      	bmi.n	800d6b4 <__swhatbuf_r+0x40>
 800d692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d696:	e00e      	b.n	800d6b6 <__swhatbuf_r+0x42>
 800d698:	466a      	mov	r2, sp
 800d69a:	f000 f903 	bl	800d8a4 <_fstat_r>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	dbf1      	blt.n	800d686 <__swhatbuf_r+0x12>
 800d6a2:	9a01      	ldr	r2, [sp, #4]
 800d6a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6ac:	425a      	negs	r2, r3
 800d6ae:	415a      	adcs	r2, r3
 800d6b0:	602a      	str	r2, [r5, #0]
 800d6b2:	e7ee      	b.n	800d692 <__swhatbuf_r+0x1e>
 800d6b4:	2340      	movs	r3, #64	; 0x40
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	b016      	add	sp, #88	; 0x58
 800d6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d6c0 <__smakebuf_r>:
 800d6c0:	898b      	ldrh	r3, [r1, #12]
 800d6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6c4:	079d      	lsls	r5, r3, #30
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	d507      	bpl.n	800d6dc <__smakebuf_r+0x1c>
 800d6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6d0:	6023      	str	r3, [r4, #0]
 800d6d2:	6123      	str	r3, [r4, #16]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	6163      	str	r3, [r4, #20]
 800d6d8:	b002      	add	sp, #8
 800d6da:	bd70      	pop	{r4, r5, r6, pc}
 800d6dc:	ab01      	add	r3, sp, #4
 800d6de:	466a      	mov	r2, sp
 800d6e0:	f7ff ffc8 	bl	800d674 <__swhatbuf_r>
 800d6e4:	9900      	ldr	r1, [sp, #0]
 800d6e6:	4605      	mov	r5, r0
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7ff f963 	bl	800c9b4 <_malloc_r>
 800d6ee:	b948      	cbnz	r0, 800d704 <__smakebuf_r+0x44>
 800d6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f4:	059a      	lsls	r2, r3, #22
 800d6f6:	d4ef      	bmi.n	800d6d8 <__smakebuf_r+0x18>
 800d6f8:	f023 0303 	bic.w	r3, r3, #3
 800d6fc:	f043 0302 	orr.w	r3, r3, #2
 800d700:	81a3      	strh	r3, [r4, #12]
 800d702:	e7e3      	b.n	800d6cc <__smakebuf_r+0xc>
 800d704:	4b0d      	ldr	r3, [pc, #52]	; (800d73c <__smakebuf_r+0x7c>)
 800d706:	62b3      	str	r3, [r6, #40]	; 0x28
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	6020      	str	r0, [r4, #0]
 800d70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d710:	81a3      	strh	r3, [r4, #12]
 800d712:	9b00      	ldr	r3, [sp, #0]
 800d714:	6163      	str	r3, [r4, #20]
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	6120      	str	r0, [r4, #16]
 800d71a:	b15b      	cbz	r3, 800d734 <__smakebuf_r+0x74>
 800d71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d720:	4630      	mov	r0, r6
 800d722:	f000 f8d1 	bl	800d8c8 <_isatty_r>
 800d726:	b128      	cbz	r0, 800d734 <__smakebuf_r+0x74>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	f023 0303 	bic.w	r3, r3, #3
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	89a0      	ldrh	r0, [r4, #12]
 800d736:	4305      	orrs	r5, r0
 800d738:	81a5      	strh	r5, [r4, #12]
 800d73a:	e7cd      	b.n	800d6d8 <__smakebuf_r+0x18>
 800d73c:	0800d4cd 	.word	0x0800d4cd

0800d740 <_malloc_usable_size_r>:
 800d740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d744:	1f18      	subs	r0, r3, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	bfbc      	itt	lt
 800d74a:	580b      	ldrlt	r3, [r1, r0]
 800d74c:	18c0      	addlt	r0, r0, r3
 800d74e:	4770      	bx	lr

0800d750 <_raise_r>:
 800d750:	291f      	cmp	r1, #31
 800d752:	b538      	push	{r3, r4, r5, lr}
 800d754:	4604      	mov	r4, r0
 800d756:	460d      	mov	r5, r1
 800d758:	d904      	bls.n	800d764 <_raise_r+0x14>
 800d75a:	2316      	movs	r3, #22
 800d75c:	6003      	str	r3, [r0, #0]
 800d75e:	f04f 30ff 	mov.w	r0, #4294967295
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d766:	b112      	cbz	r2, 800d76e <_raise_r+0x1e>
 800d768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d76c:	b94b      	cbnz	r3, 800d782 <_raise_r+0x32>
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 f830 	bl	800d7d4 <_getpid_r>
 800d774:	462a      	mov	r2, r5
 800d776:	4601      	mov	r1, r0
 800d778:	4620      	mov	r0, r4
 800d77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d77e:	f000 b817 	b.w	800d7b0 <_kill_r>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d00a      	beq.n	800d79c <_raise_r+0x4c>
 800d786:	1c59      	adds	r1, r3, #1
 800d788:	d103      	bne.n	800d792 <_raise_r+0x42>
 800d78a:	2316      	movs	r3, #22
 800d78c:	6003      	str	r3, [r0, #0]
 800d78e:	2001      	movs	r0, #1
 800d790:	e7e7      	b.n	800d762 <_raise_r+0x12>
 800d792:	2400      	movs	r4, #0
 800d794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d798:	4628      	mov	r0, r5
 800d79a:	4798      	blx	r3
 800d79c:	2000      	movs	r0, #0
 800d79e:	e7e0      	b.n	800d762 <_raise_r+0x12>

0800d7a0 <raise>:
 800d7a0:	4b02      	ldr	r3, [pc, #8]	; (800d7ac <raise+0xc>)
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	6818      	ldr	r0, [r3, #0]
 800d7a6:	f7ff bfd3 	b.w	800d750 <_raise_r>
 800d7aa:	bf00      	nop
 800d7ac:	20000044 	.word	0x20000044

0800d7b0 <_kill_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d07      	ldr	r5, [pc, #28]	; (800d7d0 <_kill_r+0x20>)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	4608      	mov	r0, r1
 800d7ba:	4611      	mov	r1, r2
 800d7bc:	602b      	str	r3, [r5, #0]
 800d7be:	f7f5 ff03 	bl	80035c8 <_kill>
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	d102      	bne.n	800d7cc <_kill_r+0x1c>
 800d7c6:	682b      	ldr	r3, [r5, #0]
 800d7c8:	b103      	cbz	r3, 800d7cc <_kill_r+0x1c>
 800d7ca:	6023      	str	r3, [r4, #0]
 800d7cc:	bd38      	pop	{r3, r4, r5, pc}
 800d7ce:	bf00      	nop
 800d7d0:	200006b0 	.word	0x200006b0

0800d7d4 <_getpid_r>:
 800d7d4:	f7f5 bef0 	b.w	80035b8 <_getpid>

0800d7d8 <__sread>:
 800d7d8:	b510      	push	{r4, lr}
 800d7da:	460c      	mov	r4, r1
 800d7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e0:	f000 f894 	bl	800d90c <_read_r>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	bfab      	itete	ge
 800d7e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ea:	89a3      	ldrhlt	r3, [r4, #12]
 800d7ec:	181b      	addge	r3, r3, r0
 800d7ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7f2:	bfac      	ite	ge
 800d7f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7f6:	81a3      	strhlt	r3, [r4, #12]
 800d7f8:	bd10      	pop	{r4, pc}

0800d7fa <__swrite>:
 800d7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fe:	461f      	mov	r7, r3
 800d800:	898b      	ldrh	r3, [r1, #12]
 800d802:	05db      	lsls	r3, r3, #23
 800d804:	4605      	mov	r5, r0
 800d806:	460c      	mov	r4, r1
 800d808:	4616      	mov	r6, r2
 800d80a:	d505      	bpl.n	800d818 <__swrite+0x1e>
 800d80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d810:	2302      	movs	r3, #2
 800d812:	2200      	movs	r2, #0
 800d814:	f000 f868 	bl	800d8e8 <_lseek_r>
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d81e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d822:	81a3      	strh	r3, [r4, #12]
 800d824:	4632      	mov	r2, r6
 800d826:	463b      	mov	r3, r7
 800d828:	4628      	mov	r0, r5
 800d82a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d82e:	f000 b817 	b.w	800d860 <_write_r>

0800d832 <__sseek>:
 800d832:	b510      	push	{r4, lr}
 800d834:	460c      	mov	r4, r1
 800d836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83a:	f000 f855 	bl	800d8e8 <_lseek_r>
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	89a3      	ldrh	r3, [r4, #12]
 800d842:	bf15      	itete	ne
 800d844:	6560      	strne	r0, [r4, #84]	; 0x54
 800d846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d84a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d84e:	81a3      	strheq	r3, [r4, #12]
 800d850:	bf18      	it	ne
 800d852:	81a3      	strhne	r3, [r4, #12]
 800d854:	bd10      	pop	{r4, pc}

0800d856 <__sclose>:
 800d856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85a:	f000 b813 	b.w	800d884 <_close_r>
	...

0800d860 <_write_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d07      	ldr	r5, [pc, #28]	; (800d880 <_write_r+0x20>)
 800d864:	4604      	mov	r4, r0
 800d866:	4608      	mov	r0, r1
 800d868:	4611      	mov	r1, r2
 800d86a:	2200      	movs	r2, #0
 800d86c:	602a      	str	r2, [r5, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	f7f5 fee1 	bl	8003636 <_write>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_write_r+0x1e>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_write_r+0x1e>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	200006b0 	.word	0x200006b0

0800d884 <_close_r>:
 800d884:	b538      	push	{r3, r4, r5, lr}
 800d886:	4d06      	ldr	r5, [pc, #24]	; (800d8a0 <_close_r+0x1c>)
 800d888:	2300      	movs	r3, #0
 800d88a:	4604      	mov	r4, r0
 800d88c:	4608      	mov	r0, r1
 800d88e:	602b      	str	r3, [r5, #0]
 800d890:	f7f5 feed 	bl	800366e <_close>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_close_r+0x1a>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_close_r+0x1a>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	200006b0 	.word	0x200006b0

0800d8a4 <_fstat_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	4d07      	ldr	r5, [pc, #28]	; (800d8c4 <_fstat_r+0x20>)
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	4608      	mov	r0, r1
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	602b      	str	r3, [r5, #0]
 800d8b2:	f7f5 fee8 	bl	8003686 <_fstat>
 800d8b6:	1c43      	adds	r3, r0, #1
 800d8b8:	d102      	bne.n	800d8c0 <_fstat_r+0x1c>
 800d8ba:	682b      	ldr	r3, [r5, #0]
 800d8bc:	b103      	cbz	r3, 800d8c0 <_fstat_r+0x1c>
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	bd38      	pop	{r3, r4, r5, pc}
 800d8c2:	bf00      	nop
 800d8c4:	200006b0 	.word	0x200006b0

0800d8c8 <_isatty_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d06      	ldr	r5, [pc, #24]	; (800d8e4 <_isatty_r+0x1c>)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	f7f5 fee7 	bl	80036a6 <_isatty>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d102      	bne.n	800d8e2 <_isatty_r+0x1a>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	b103      	cbz	r3, 800d8e2 <_isatty_r+0x1a>
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	200006b0 	.word	0x200006b0

0800d8e8 <_lseek_r>:
 800d8e8:	b538      	push	{r3, r4, r5, lr}
 800d8ea:	4d07      	ldr	r5, [pc, #28]	; (800d908 <_lseek_r+0x20>)
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	4608      	mov	r0, r1
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	602a      	str	r2, [r5, #0]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f7f5 fee0 	bl	80036bc <_lseek>
 800d8fc:	1c43      	adds	r3, r0, #1
 800d8fe:	d102      	bne.n	800d906 <_lseek_r+0x1e>
 800d900:	682b      	ldr	r3, [r5, #0]
 800d902:	b103      	cbz	r3, 800d906 <_lseek_r+0x1e>
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	200006b0 	.word	0x200006b0

0800d90c <_read_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	4d07      	ldr	r5, [pc, #28]	; (800d92c <_read_r+0x20>)
 800d910:	4604      	mov	r4, r0
 800d912:	4608      	mov	r0, r1
 800d914:	4611      	mov	r1, r2
 800d916:	2200      	movs	r2, #0
 800d918:	602a      	str	r2, [r5, #0]
 800d91a:	461a      	mov	r2, r3
 800d91c:	f7f5 fe6e 	bl	80035fc <_read>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <_read_r+0x1e>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	b103      	cbz	r3, 800d92a <_read_r+0x1e>
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	200006b0 	.word	0x200006b0

0800d930 <trunc>:
 800d930:	ec51 0b10 	vmov	r0, r1, d0
 800d934:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d938:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d93c:	2b13      	cmp	r3, #19
 800d93e:	b5d0      	push	{r4, r6, r7, lr}
 800d940:	460c      	mov	r4, r1
 800d942:	dc10      	bgt.n	800d966 <trunc+0x36>
 800d944:	2b00      	cmp	r3, #0
 800d946:	bfa5      	ittet	ge
 800d948:	4a11      	ldrge	r2, [pc, #68]	; (800d990 <trunc+0x60>)
 800d94a:	fa42 f303 	asrge.w	r3, r2, r3
 800d94e:	2100      	movlt	r1, #0
 800d950:	2100      	movge	r1, #0
 800d952:	bfb9      	ittee	lt
 800d954:	2000      	movlt	r0, #0
 800d956:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800d95a:	2000      	movge	r0, #0
 800d95c:	ea24 0103 	bicge.w	r1, r4, r3
 800d960:	ec41 0b10 	vmov	d0, r0, r1
 800d964:	bdd0      	pop	{r4, r6, r7, pc}
 800d966:	2b33      	cmp	r3, #51	; 0x33
 800d968:	dd08      	ble.n	800d97c <trunc+0x4c>
 800d96a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d96e:	d1f7      	bne.n	800d960 <trunc+0x30>
 800d970:	ee10 2a10 	vmov	r2, s0
 800d974:	460b      	mov	r3, r1
 800d976:	f7f2 fc91 	bl	800029c <__adddf3>
 800d97a:	e7f1      	b.n	800d960 <trunc+0x30>
 800d97c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d980:	f04f 33ff 	mov.w	r3, #4294967295
 800d984:	fa23 f202 	lsr.w	r2, r3, r2
 800d988:	ea20 0602 	bic.w	r6, r0, r2
 800d98c:	4630      	mov	r0, r6
 800d98e:	e7e7      	b.n	800d960 <trunc+0x30>
 800d990:	000fffff 	.word	0x000fffff

0800d994 <ceilf>:
 800d994:	ee10 3a10 	vmov	r3, s0
 800d998:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d99c:	3a7f      	subs	r2, #127	; 0x7f
 800d99e:	2a16      	cmp	r2, #22
 800d9a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d9a4:	dc2a      	bgt.n	800d9fc <ceilf+0x68>
 800d9a6:	2a00      	cmp	r2, #0
 800d9a8:	da11      	bge.n	800d9ce <ceilf+0x3a>
 800d9aa:	eddf 7a19 	vldr	s15, [pc, #100]	; 800da10 <ceilf+0x7c>
 800d9ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d9b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	dd05      	ble.n	800d9c8 <ceilf+0x34>
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	db23      	blt.n	800da08 <ceilf+0x74>
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	bf18      	it	ne
 800d9c4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800d9c8:	ee00 3a10 	vmov	s0, r3
 800d9cc:	4770      	bx	lr
 800d9ce:	4911      	ldr	r1, [pc, #68]	; (800da14 <ceilf+0x80>)
 800d9d0:	4111      	asrs	r1, r2
 800d9d2:	420b      	tst	r3, r1
 800d9d4:	d0fa      	beq.n	800d9cc <ceilf+0x38>
 800d9d6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800da10 <ceilf+0x7c>
 800d9da:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d9de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e6:	ddef      	ble.n	800d9c8 <ceilf+0x34>
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bfc2      	ittt	gt
 800d9ec:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800d9f0:	fa40 f202 	asrgt.w	r2, r0, r2
 800d9f4:	189b      	addgt	r3, r3, r2
 800d9f6:	ea23 0301 	bic.w	r3, r3, r1
 800d9fa:	e7e5      	b.n	800d9c8 <ceilf+0x34>
 800d9fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800da00:	d3e4      	bcc.n	800d9cc <ceilf+0x38>
 800da02:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da06:	4770      	bx	lr
 800da08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da0c:	e7dc      	b.n	800d9c8 <ceilf+0x34>
 800da0e:	bf00      	nop
 800da10:	7149f2ca 	.word	0x7149f2ca
 800da14:	007fffff 	.word	0x007fffff

0800da18 <_init>:
 800da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1a:	bf00      	nop
 800da1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1e:	bc08      	pop	{r3}
 800da20:	469e      	mov	lr, r3
 800da22:	4770      	bx	lr

0800da24 <_fini>:
 800da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da26:	bf00      	nop
 800da28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2a:	bc08      	pop	{r3}
 800da2c:	469e      	mov	lr, r3
 800da2e:	4770      	bx	lr
