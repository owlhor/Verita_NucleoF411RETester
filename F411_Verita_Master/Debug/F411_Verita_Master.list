
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d500  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ba74  0800d6a0  0800d6a0  0001d6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019114  08019114  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08019114  08019114  00029114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801911c  0801911c  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801911c  0801911c  0002911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019120  08019120  00029120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08019124  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000218  08019338  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08019338  00030658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182ba  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e1  00000000  00000000  000484fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0004b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0004cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e57  00000000  00000000  0004e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193aa  00000000  00000000  00067f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009903a  00000000  00000000  00081321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a35b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b68  00000000  00000000  0011a3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d688 	.word	0x0800d688

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800d688 	.word	0x0800d688

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f004 f9bb 	bl	800538c <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00c faaa 	bl	800d5a0 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00c fa85 	bl	800d5a0 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 f960 	bl	800538c <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000238 	.word	0x20000238
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fa2a 	bl	8005580 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000234 	.word	0x20000234
 800114c:	20000235 	.word	0x20000235

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f004 fa02 	bl	8005580 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000234 	.word	0x20000234
 8001194:	20000235 	.word	0x20000235

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f004 f9de 	bl	8005580 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000234 	.word	0x20000234
 8001208:	20000235 	.word	0x20000235
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f004 f9a2 	bl	8005580 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	20000234 	.word	0x20000234
 800129c:	20000235 	.word	0x20000235
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f003 fed1 	bl	800506c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 f8ce 	bl	800847a <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f003 fec2 	bl	800506c <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine>:
  */


static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 800135e:	4b6f      	ldr	r3, [pc, #444]	; (800151c <Rx_Verita_engine+0x1cc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d023      	beq.n	80013ae <Rx_Verita_engine+0x5e>
 8001366:	2b02      	cmp	r3, #2
 8001368:	f000 8082 	beq.w	8001470 <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 800136c:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <Rx_Verita_engine+0x1d0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b56      	cmp	r3, #86	; 0x56
 800137a:	d103      	bne.n	8001384 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 800137c:	4b67      	ldr	r3, [pc, #412]	; (800151c <Rx_Verita_engine+0x1cc>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index+=9;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 8001382:	e0c4      	b.n	800150e <Rx_Verita_engine+0x1be>
		index+=9;
 8001384:	4b66      	ldr	r3, [pc, #408]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3309      	adds	r3, #9
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b64      	ldr	r3, [pc, #400]	; (8001520 <Rx_Verita_engine+0x1d0>)
 800138e:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 8001390:	4b63      	ldr	r3, [pc, #396]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	4b63      	ldr	r3, [pc, #396]	; (8001524 <Rx_Verita_engine+0x1d4>)
 8001396:	fba3 1302 	umull	r1, r3, r3, r2
 800139a:	08d9      	lsrs	r1, r3, #3
 800139c:	460b      	mov	r3, r1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <Rx_Verita_engine+0x1d0>)
 80013aa:	701a      	strb	r2, [r3, #0]
		break; //// init
 80013ac:	e0af      	b.n	800150e <Rx_Verita_engine+0x1be>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 80013ae:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <Rx_Verita_engine+0x1d0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b56      	cmp	r3, #86	; 0x56
 80013bc:	d13f      	bne.n	800143e <Rx_Verita_engine+0xee>
 80013be:	4b58      	ldr	r3, [pc, #352]	; (8001520 <Rx_Verita_engine+0x1d0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b52      	cmp	r3, #82	; 0x52
 80013cc:	d137      	bne.n	800143e <Rx_Verita_engine+0xee>
 80013ce:	4b54      	ldr	r3, [pc, #336]	; (8001520 <Rx_Verita_engine+0x1d0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	3302      	adds	r3, #2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b54      	cmp	r3, #84	; 0x54
 80013dc:	d12f      	bne.n	800143e <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 80013de:	2400      	movs	r4, #0
 80013e0:	e009      	b.n	80013f6 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 80013e2:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <Rx_Verita_engine+0x1d0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4423      	add	r3, r4
 80013e8:	3303      	adds	r3, #3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80013f2:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013f4:	3401      	adds	r4, #1
 80013f6:	2c06      	cmp	r4, #6
 80013f8:	ddf3      	ble.n	80013e2 <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013fa:	2400      	movs	r4, #0
 80013fc:	e006      	b.n	800140c <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 80013fe:	7b3a      	ldrb	r2, [r7, #12]
 8001400:	4b49      	ldr	r3, [pc, #292]	; (8001528 <Rx_Verita_engine+0x1d8>)
 8001402:	5d1b      	ldrb	r3, [r3, r4]
 8001404:	4413      	add	r3, r2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 800140a:	3401      	adds	r4, #1
 800140c:	2c04      	cmp	r4, #4
 800140e:	ddf6      	ble.n	80013fe <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001418:	7b7a      	ldrb	r2, [r7, #13]
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <Rx_Verita_engine+0x1d8>)
 800141c:	795b      	ldrb	r3, [r3, #5]
 800141e:	429a      	cmp	r2, r3
 8001420:	d10b      	bne.n	800143a <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	22ff      	movs	r2, #255	; 0xff
 800142e:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <Rx_Verita_engine+0x1cc>)
 8001432:	2202      	movs	r2, #2
 8001434:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001436:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001438:	e069      	b.n	800150e <Rx_Verita_engine+0x1be>
				return VRT_DataLoss;}
 800143a:	2395      	movs	r3, #149	; 0x95
 800143c:	e068      	b.n	8001510 <Rx_Verita_engine+0x1c0>
			verita_engine = init;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <Rx_Verita_engine+0x1cc>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			index += Framesize_VRT; // 9
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3309      	adds	r3, #9
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b34      	ldr	r3, [pc, #208]	; (8001520 <Rx_Verita_engine+0x1d0>)
 800144e:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <Rx_Verita_engine+0x1d4>)
 8001456:	fba3 1302 	umull	r1, r3, r3, r2
 800145a:	08d9      	lsrs	r1, r3, #3
 800145c:	460b      	mov	r3, r1
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <Rx_Verita_engine+0x1d0>)
 800146a:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 800146c:	2396      	movs	r3, #150	; 0x96
 800146e:	e04f      	b.n	8001510 <Rx_Verita_engine+0x1c0>

	case decode:
		verita_engine = init;
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <Rx_Verita_engine+0x1cc>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3309      	adds	r3, #9
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001480:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <Rx_Verita_engine+0x1d0>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <Rx_Verita_engine+0x1d4>)
 8001488:	fba3 1302 	umull	r1, r3, r3, r2
 800148c:	08d9      	lsrs	r1, r3, #3
 800148e:	460b      	mov	r3, r1
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <Rx_Verita_engine+0x1d0>)
 800149c:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d814      	bhi.n	80014d0 <Rx_Verita_engine+0x180>
			logu.U8[2] = logger[2];
			logu.U8[1] = logger[3];
			logu.U8[0] = logger[4];
#else
			//// Little endian
			logu.U8[0] = logger[1];
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	723b      	strb	r3, [r7, #8]
			logu.U8[1] = logger[2];
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	727b      	strb	r3, [r7, #9]
			logu.U8[2] = logger[3];
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014b4:	78db      	ldrb	r3, [r3, #3]
 80014b6:	72bb      	strb	r3, [r7, #10]
			logu.U8[3] = logger[4];
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	72fb      	strb	r3, [r7, #11]
#endif
			// place data into the request register
			regisk[logger[0]] = logu.U32;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	601a      	str	r2, [r3, #0]


			return VRT_OK;
 80014cc:	2391      	movs	r3, #145	; 0x91
 80014ce:	e01f      	b.n	8001510 <Rx_Verita_engine+0x1c0>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b8f      	cmp	r3, #143	; 0x8f
 80014d6:	d919      	bls.n	800150c <Rx_Verita_engine+0x1bc>
			switch(logger[0]){
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <Rx_Verita_engine+0x1d8>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3b91      	subs	r3, #145	; 0x91
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d80a      	bhi.n	80014f8 <Rx_Verita_engine+0x1a8>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <Rx_Verita_engine+0x198>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	08001501 	.word	0x08001501
 80014f0:	08001505 	.word	0x08001505
 80014f4:	08001509 	.word	0x08001509
				default:
				case 0x90:
					return VRT_ERROR;
 80014f8:	2390      	movs	r3, #144	; 0x90
 80014fa:	e009      	b.n	8001510 <Rx_Verita_engine+0x1c0>
				case 0x91:
					return VRT_OK;
 80014fc:	2391      	movs	r3, #145	; 0x91
 80014fe:	e007      	b.n	8001510 <Rx_Verita_engine+0x1c0>
				case 0x92:
					return VRT_Busy;
 8001500:	2392      	movs	r3, #146	; 0x92
 8001502:	e005      	b.n	8001510 <Rx_Verita_engine+0x1c0>
				case 0x93:
					return VRT_Regain;
 8001504:	2393      	movs	r3, #147	; 0x93
 8001506:	e003      	b.n	8001510 <Rx_Verita_engine+0x1c0>
				case 0x94:
					return VRT_Next;
 8001508:	2394      	movs	r3, #148	; 0x94
 800150a:	e001      	b.n	8001510 <Rx_Verita_engine+0x1c0>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 800150c:	bf00      	nop
	} // end switch
	return VRT_ERROR;
 800150e:	2390      	movs	r3, #144	; 0x90
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bc90      	pop	{r4, r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2000023a 	.word	0x2000023a
 8001520:	2000023b 	.word	0x2000023b
 8001524:	38e38e39 	.word	0x38e38e39
 8001528:	2000023c 	.word	0x2000023c

0800152c <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 8001534:	237f      	movs	r3, #127	; 0x7f
 8001536:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153e:	4811      	ldr	r0, [pc, #68]	; (8001584 <BL_UART_Start+0x58>)
 8001540:	f003 fd94 	bl	800506c <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <BL_UART_Start+0x5c>)
 800154a:	f003 fd8f 	bl	800506c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800154e:	2014      	movs	r0, #20
 8001550:	f002 fec2 	bl	80042d8 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <BL_UART_Start+0x5c>)
 800155a:	f003 fd87 	bl	800506c <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 800155e:	2055      	movs	r0, #85	; 0x55
 8001560:	f002 feba 	bl	80042d8 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 8001564:	f107 010f 	add.w	r1, r7, #15
 8001568:	230a      	movs	r3, #10
 800156a:	2201      	movs	r2, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f007 feac 	bl	80092ca <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 8001572:	2114      	movs	r1, #20
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f999 	bl	80018ac <BL_UART_wait_ACK>

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000
 8001588:	40020800 	.word	0x40020800

0800158c <BL_UART_Finish>:

void BL_UART_Finish(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f002 fea1 	bl	80042d8 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <BL_UART_Finish+0x34>)
 800159e:	f003 fd65 	bl	800506c <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <BL_UART_Finish+0x38>)
 80015a8:	f003 fd60 	bl	800506c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015ac:	2014      	movs	r0, #20
 80015ae:	f002 fe93 	bl	80042d8 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <BL_UART_Finish+0x38>)
 80015b8:	f003 fd58 	bl	800506c <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020800 	.word	0x40020800

080015c8 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b0cb      	sub	sp, #300	; 0x12c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80015d2:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80015d6:	6020      	str	r0, [r4, #0]
 80015d8:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80015dc:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80015e0:	6001      	str	r1, [r0, #0]
 80015e2:	4611      	mov	r1, r2
 80015e4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80015e8:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80015f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 80015fa:	f64c 6331 	movw	r3, #52785	; 0xce31
 80015fe:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001608:	2300      	movs	r3, #0
 800160a:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001614:	2300      	movs	r3, #0
 8001616:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 800161a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800161e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	3304      	adds	r3, #4
 8001628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f009 f8cc 	bl	800a7cc <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 8001634:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001638:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a77      	ldr	r2, [pc, #476]	; (800181c <BL_UART_WriteMem+0x254>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d909      	bls.n	8001658 <BL_UART_WriteMem+0x90>
 8001644:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001648:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001652:	d201      	bcs.n	8001658 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 8001654:	23bc      	movs	r3, #188	; 0xbc
 8001656:	e0dc      	b.n	8001812 <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 8001658:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800165c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001660:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001664:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 800166c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001670:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 800167a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800167e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001688:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800168c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001696:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800169a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 80016a4:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 80016a8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80016ac:	4053      	eors	r3, r2
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80016b4:	4053      	eors	r3, r2
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80016bc:	4053      	eors	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 80016c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 80016d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016da:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80016de:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 80016e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 80016f4:	2400      	movs	r4, #0
 80016f6:	e01c      	b.n	8001732 <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 80016f8:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 80016fc:	4621      	mov	r1, r4
 80016fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001702:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	440b      	add	r3, r1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4053      	eors	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001714:	4622      	mov	r2, r4
 8001716:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800171a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	441a      	add	r2, r3
 8001722:	1c63      	adds	r3, r4, #1
 8001724:	7811      	ldrb	r1, [r2, #0]
 8001726:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800172a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800172e:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 8001730:	3401      	adds	r4, #1
 8001732:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001736:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	429c      	cmp	r4, r3
 800173e:	dddb      	ble.n	80016f8 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 8001740:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001744:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3302      	adds	r3, #2
 800174c:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 8001750:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001754:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001758:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 800175a:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800175e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001762:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001766:	230a      	movs	r3, #10
 8001768:	2202      	movs	r2, #2
 800176a:	6800      	ldr	r0, [r0, #0]
 800176c:	f007 fdad 	bl	80092ca <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 8001770:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001774:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001778:	210a      	movs	r1, #10
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	f000 f896 	bl	80018ac <BL_UART_wait_ACK>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800178a:	2b79      	cmp	r3, #121	; 0x79
 800178c:	d140      	bne.n	8001810 <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800178e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001792:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001796:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800179a:	230f      	movs	r3, #15
 800179c:	2205      	movs	r2, #5
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	f007 fd93 	bl	80092ca <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 80017a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017ac:	210a      	movs	r1, #10
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f000 f87c 	bl	80018ac <BL_UART_wait_ACK>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 80017ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017be:	2b79      	cmp	r3, #121	; 0x79
 80017c0:	d124      	bne.n	800180c <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 80017c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3303      	adds	r3, #3
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	f107 0114 	add.w	r1, r7, #20
 80017d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017da:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	f007 fd72 	bl	80092ca <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 80017e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017ee:	210a      	movs	r1, #10
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f000 f85b 	bl	80018ac <BL_UART_wait_ACK>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 80017fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001800:	2b79      	cmp	r3, #121	; 0x79
 8001802:	d101      	bne.n	8001808 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001804:	2379      	movs	r3, #121	; 0x79
 8001806:	e004      	b.n	8001812 <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001808:	231f      	movs	r3, #31
 800180a:	e002      	b.n	8001812 <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 800180c:	231f      	movs	r3, #31
 800180e:	e000      	b.n	8001812 <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 8001810:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001812:	4618      	mov	r0, r3
 8001814:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	1ffeffff 	.word	0x1ffeffff

08001820 <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 800182c:	f64b 3344 	movw	r3, #47940	; 0xbb44
 8001830:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <BL_UART_ExtendEraseMem_SP+0x88>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	823b      	strh	r3, [r7, #16]
 800183c:	2300      	movs	r3, #0
 800183e:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 8001844:	7b7b      	ldrb	r3, [r7, #13]
 8001846:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 8001848:	7b3b      	ldrb	r3, [r7, #12]
 800184a:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 800184c:	7b3a      	ldrb	r2, [r7, #12]
 800184e:	7b7b      	ldrb	r3, [r7, #13]
 8001850:	4053      	eors	r3, r2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 8001856:	f107 0114 	add.w	r1, r7, #20
 800185a:	230a      	movs	r3, #10
 800185c:	2202      	movs	r2, #2
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f007 fd33 	bl	80092ca <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 8001864:	210a      	movs	r1, #10
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f820 	bl	80018ac <BL_UART_wait_ACK>
 800186c:	4603      	mov	r3, r0
 800186e:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b79      	cmp	r3, #121	; 0x79
 8001874:	d113      	bne.n	800189e <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 8001876:	f107 0110 	add.w	r1, r7, #16
 800187a:	230f      	movs	r3, #15
 800187c:	2203      	movs	r2, #3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f007 fd23 	bl	80092ca <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001884:	210a      	movs	r1, #10
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f810 	bl	80018ac <BL_UART_wait_ACK>
 800188c:	4603      	mov	r3, r0
 800188e:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b79      	cmp	r3, #121	; 0x79
 8001894:	d101      	bne.n	800189a <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001896:	2379      	movs	r3, #121	; 0x79
 8001898:	e002      	b.n	80018a0 <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 800189a:	231f      	movs	r3, #31
 800189c:	e000      	b.n	80018a0 <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 800189e:	231f      	movs	r3, #31

	return UB_NACK;
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0800d6a0 	.word	0x0800d6a0

080018ac <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 80018c0:	f002 fcfe 	bl	80042c0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	4413      	add	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

	while(tick){
 80018cc:	e018      	b.n	8001900 <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 80018ce:	f107 010f 	add.w	r1, r7, #15
 80018d2:	2302      	movs	r3, #2
 80018d4:	2201      	movs	r2, #1
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f007 fd89 	bl	80093ee <HAL_UART_Receive>

		if(response == 0x79){
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b79      	cmp	r3, #121	; 0x79
 80018e0:	d101      	bne.n	80018e6 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 80018e2:	2379      	movs	r3, #121	; 0x79
 80018e4:	e010      	b.n	8001908 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b1f      	cmp	r3, #31
 80018ea:	d101      	bne.n	80018f0 <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 80018ec:	231f      	movs	r3, #31
 80018ee:	e00b      	b.n	8001908 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 80018f0:	f002 fce6 	bl	80042c0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d801      	bhi.n	8001900 <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 80018fc:	23ab      	movs	r3, #171	; 0xab
 80018fe:	e003      	b.n	8001908 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e3      	bne.n	80018ce <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001906:	231f      	movs	r3, #31
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b09a      	sub	sp, #104	; 0x68
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f002 fc6c 	bl	80041f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 f9ea 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001920:	f000 fbcc 	bl	80020bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001924:	f000 fbaa 	bl	800207c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001928:	f000 fb54 	bl	8001fd4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800192c:	f000 fa4a 	bl	8001dc4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001930:	f000 fb7a 	bl	8002028 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001934:	f000 fa74 	bl	8001e20 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001938:	f000 fafc 	bl	8001f34 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800193c:	f000 fb1e 	bl	8001f7c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001940:	f000 faa4 	bl	8001e8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001944:	4865      	ldr	r0, [pc, #404]	; (8001adc <main+0x1cc>)
 8001946:	f007 f855 	bl	80089f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800194a:	2104      	movs	r1, #4
 800194c:	4864      	ldr	r0, [pc, #400]	; (8001ae0 <main+0x1d0>)
 800194e:	f007 f988 	bl	8008c62 <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001952:	4a64      	ldr	r2, [pc, #400]	; (8001ae4 <main+0x1d4>)
 8001954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001958:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 800195a:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <main+0x1d4>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	b29b      	uxth	r3, r3
 8001960:	4a61      	ldr	r2, [pc, #388]	; (8001ae8 <main+0x1d8>)
 8001962:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001964:	4a61      	ldr	r2, [pc, #388]	; (8001aec <main+0x1dc>)
 8001966:	2301      	movs	r3, #1
 8001968:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 800196a:	4a60      	ldr	r2, [pc, #384]	; (8001aec <main+0x1dc>)
 800196c:	23fa      	movs	r3, #250	; 0xfa
 800196e:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001970:	4a5e      	ldr	r2, [pc, #376]	; (8001aec <main+0x1dc>)
 8001972:	2364      	movs	r3, #100	; 0x64
 8001974:	8093      	strh	r3, [r2, #4]

  ili9341_Init();
 8001976:	f001 fd4d 	bl	8003414 <ili9341_Init>
  ili9341_DisplayOn();
 800197a:	f001 fd2f 	bl	80033dc <ili9341_DisplayOn>
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);


#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	485b      	ldr	r0, [pc, #364]	; (8001af0 <main+0x1e0>)
 8001982:	f7ff fb0d 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001986:	2188      	movs	r1, #136	; 0x88
 8001988:	4859      	ldr	r0, [pc, #356]	; (8001af0 <main+0x1e0>)
 800198a:	f7ff fb09 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 800198e:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <main+0x1e4>)
 8001990:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001994:	461c      	mov	r4, r3
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc16 	bl	80001e0 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80019bc:	230a      	movs	r3, #10
 80019be:	484e      	ldr	r0, [pc, #312]	; (8001af8 <main+0x1e8>)
 80019c0:	f007 fc83 	bl	80092ca <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 80019c4:	2224      	movs	r2, #36	; 0x24
 80019c6:	494d      	ldr	r1, [pc, #308]	; (8001afc <main+0x1ec>)
 80019c8:	484d      	ldr	r0, [pc, #308]	; (8001b00 <main+0x1f0>)
 80019ca:	f007 fdb2 	bl	8009532 <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 80019ce:	f000 fd21 	bl	8002414 <Button_machine>
	  ////  ------------- Verita UART Recieve --------------------------
	  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9); // Normal DMA
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  Rx_Verita_engine(RxBufferMtCl, VRB.U32);
 80019d2:	494c      	ldr	r1, [pc, #304]	; (8001b04 <main+0x1f4>)
 80019d4:	4849      	ldr	r0, [pc, #292]	; (8001afc <main+0x1ec>)
 80019d6:	f7ff fcbb 	bl	8001350 <Rx_Verita_engine>
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 80019da:	f002 fc71 	bl	80042c0 <HAL_GetTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2200      	movs	r2, #0
 80019e2:	469a      	mov	sl, r3
 80019e4:	4693      	mov	fp, r2
 80019e6:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <main+0x1f8>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	4592      	cmp	sl, r2
 80019ee:	eb7b 0303 	sbcs.w	r3, fp, r3
 80019f2:	d36e      	bcc.n	8001ad2 <main+0x1c2>
		timestamp_buzbtn += 100;
 80019f4:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <main+0x1f8>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80019fe:	6239      	str	r1, [r7, #32]
 8001a00:	f143 0300 	adc.w	r3, r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <main+0x1f8>)
 8001a08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001a0c:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001a10:	f000 fd50 	bl	80024b4 <knob_rotter>
		/* function runs here with speed
		 * can change the number of selection following to the GrandState
		 * state_box_choice = 3;
		*/

		if(state_box_choice_n){
 8001a14:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <main+0x1fc>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d05a      	beq.n	8001ad2 <main+0x1c2>

		switch (a_boxpoint){
 8001a1c:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <main+0x200>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d047      	beq.n	8001ab4 <main+0x1a4>
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d056      	beq.n	8001ad6 <main+0x1c6>

		default:
		case a_wait:

			if(flag_k_up){
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <main+0x204>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01d      	beq.n	8001a6c <main+0x15c>

				state_box_choice_is++;
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <main+0x208>)
 8001a32:	f993 3000 	ldrsb.w	r3, [r3]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4a36      	ldr	r2, [pc, #216]	; (8001b18 <main+0x208>)
 8001a40:	7013      	strb	r3, [r2, #0]
				state_box_choice_is %= state_box_choice_n; // don't be more than spec of Grandstate sub
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <main+0x208>)
 8001a44:	f993 3000 	ldrsb.w	r3, [r3]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <main+0x1fc>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	fb91 f3f2 	sdiv	r3, r1, r2
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	1acb      	subs	r3, r1, r3
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	4a2e      	ldr	r2, [pc, #184]	; (8001b18 <main+0x208>)
 8001a5e:	7013      	strb	r3, [r2, #0]
				//if(state_box_choice_is >= state_box_choice_n){state_box_choice_is = 0;}

				 flag_k_up = 0;
 8001a60:	4a2c      	ldr	r2, [pc, #176]	; (8001b14 <main+0x204>)
 8001a62:	2300      	movs	r3, #0
 8001a64:	7013      	strb	r3, [r2, #0]
				 a_boxpoint = a_change;}
 8001a66:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <main+0x200>)
 8001a68:	2301      	movs	r3, #1
 8001a6a:	7013      	strb	r3, [r2, #0]
			if(flag_k_dn){
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <main+0x20c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d057      	beq.n	8001b24 <main+0x214>

				state_box_choice_is--;
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <main+0x208>)
 8001a76:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <main+0x208>)
 8001a84:	7013      	strb	r3, [r2, #0]
				state_box_choice_is = (state_box_choice_is < 0) ? state_box_choice_n-1:state_box_choice_is;
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <main+0x208>)
 8001a88:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da05      	bge.n	8001a9c <main+0x18c>
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <main+0x1fc>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	e002      	b.n	8001aa2 <main+0x192>
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <main+0x208>)
 8001a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <main+0x208>)
 8001aa4:	7013      	strb	r3, [r2, #0]
				//if(state_box_choice_is < 0){state_box_choice_is = state_box_choice_n - 1;}

				 flag_k_dn = 0;
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <main+0x20c>)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	7013      	strb	r3, [r2, #0]
				 a_boxpoint = a_change;}
 8001aac:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <main+0x200>)
 8001aae:	2301      	movs	r3, #1
 8001ab0:	7013      	strb	r3, [r2, #0]

			break;
 8001ab2:	e037      	b.n	8001b24 <main+0x214>

		case a_change:

			box_pointer(20, bosy[state_box_choice_is]);
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <main+0x208>)
 8001ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <main+0x210>)
 8001abe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	2014      	movs	r0, #20
 8001ac6:	f000 fc07 	bl	80022d8 <box_pointer>
			a_boxpoint = a_wait;
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <main+0x200>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	7013      	strb	r3, [r2, #0]
			break;
 8001ad0:	e029      	b.n	8001b26 <main+0x216>
		case a_boxclr:

			break;

			}
		}
 8001ad2:	bf00      	nop
 8001ad4:	e027      	b.n	8001b26 <main+0x216>
			break;
 8001ad6:	bf00      	nop
 8001ad8:	e025      	b.n	8001b26 <main+0x216>
 8001ada:	bf00      	nop
 8001adc:	2000033c 	.word	0x2000033c
 8001ae0:	200002f4 	.word	0x200002f4
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	20000624 	.word	0x20000624
 8001aec:	20000610 	.word	0x20000610
 8001af0:	20000248 	.word	0x20000248
 8001af4:	0800d6a4 	.word	0x0800d6a4
 8001af8:	200003c8 	.word	0x200003c8
 8001afc:	20000514 	.word	0x20000514
 8001b00:	2000040c 	.word	0x2000040c
 8001b04:	2000053c 	.word	0x2000053c
 8001b08:	20000600 	.word	0x20000600
 8001b0c:	20000014 	.word	0x20000014
 8001b10:	2000062c 	.word	0x2000062c
 8001b14:	20000629 	.word	0x20000629
 8001b18:	20000015 	.word	0x20000015
 8001b1c:	2000062a 	.word	0x2000062a
 8001b20:	20000008 	.word	0x20000008
			break;
 8001b24:	bf00      	nop


	  }// timestamp_dis


	  if (HAL_GetTick() >= timestamp_one){
 8001b26:	f002 fbcb 	bl	80042c0 <HAL_GetTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	61fa      	str	r2, [r7, #28]
 8001b32:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <main+0x3c4>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4291      	cmp	r1, r2
 8001b40:	4629      	mov	r1, r5
 8001b42:	eb71 0303 	sbcs.w	r3, r1, r3
 8001b46:	d313      	bcc.n	8001b70 <main+0x260>
		  timestamp_one += 500;
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <main+0x3c4>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001b52:	6139      	str	r1, [r7, #16]
 8001b54:	f143 0300 	adc.w	r3, r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <main+0x3c4>)
 8001b5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001b60:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b64:	2120      	movs	r1, #32
 8001b66:	485c      	ldr	r0, [pc, #368]	; (8001cd8 <main+0x3c8>)
 8001b68:	f003 fa99 	bl	800509e <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001b6c:	f000 fd60 	bl	8002630 <GrandState_Verita>

		  } // timestamp_one

	  if(HAL_GetTick() >= timestamp_sensors + 250){
 8001b70:	f002 fba6 	bl	80042c0 <HAL_GetTick>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2200      	movs	r2, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	60fa      	str	r2, [r7, #12]
 8001b7c:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <main+0x3cc>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f112 08fa 	adds.w	r8, r2, #250	; 0xfa
 8001b86:	f143 0900 	adc.w	r9, r3, #0
 8001b8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4543      	cmp	r3, r8
 8001b92:	4613      	mov	r3, r2
 8001b94:	eb73 0309 	sbcs.w	r3, r3, r9
 8001b98:	f4ff af19 	bcc.w	80019ce <main+0xbe>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001b9c:	f002 fb90 	bl	80042c0 <HAL_GetTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <main+0x3cc>)
 8001baa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bae:	e9c3 1200 	strd	r1, r2, [r3]

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	484a      	ldr	r0, [pc, #296]	; (8001ce0 <main+0x3d0>)
 8001bb6:	f7ff faa3 	bl	8001100 <INA219Read_BusV>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <main+0x3d4>)
 8001bbe:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	4847      	ldr	r0, [pc, #284]	; (8001ce0 <main+0x3d0>)
 8001bc4:	f7ff fac4 	bl	8001150 <INA219Read_Current>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4a45      	ldr	r2, [pc, #276]	; (8001ce4 <main+0x3d4>)
 8001bce:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	4843      	ldr	r0, [pc, #268]	; (8001ce0 <main+0x3d0>)
 8001bd4:	f7ff fb1c 	bl	8001210 <INA219Read_Power>
 8001bd8:	eef0 7a40 	vmov.f32	s15, s0
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <main+0x3d4>)
 8001bde:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	483e      	ldr	r0, [pc, #248]	; (8001ce0 <main+0x3d0>)
 8001be6:	f7ff fad7 	bl	8001198 <INA219Read_ShuntV>
 8001bea:	eef0 7a40 	vmov.f32	s15, s0
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <main+0x3d4>)
 8001bf0:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001bf4:	2188      	movs	r1, #136	; 0x88
 8001bf6:	483a      	ldr	r0, [pc, #232]	; (8001ce0 <main+0x3d0>)
 8001bf8:	f7ff fa82 	bl	8001100 <INA219Read_BusV>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ce8 <main+0x3d8>)
 8001c00:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001c02:	2188      	movs	r1, #136	; 0x88
 8001c04:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <main+0x3d0>)
 8001c06:	f7ff faa3 	bl	8001150 <INA219Read_Current>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <main+0x3d8>)
 8001c10:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001c12:	2188      	movs	r1, #136	; 0x88
 8001c14:	4832      	ldr	r0, [pc, #200]	; (8001ce0 <main+0x3d0>)
 8001c16:	f7ff fafb 	bl	8001210 <INA219Read_Power>
 8001c1a:	eef0 7a40 	vmov.f32	s15, s0
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <main+0x3d8>)
 8001c20:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001c24:	2188      	movs	r1, #136	; 0x88
 8001c26:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <main+0x3d0>)
 8001c28:	f7ff fab6 	bl	8001198 <INA219Read_ShuntV>
 8001c2c:	eef0 7a40 	vmov.f32	s15, s0
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <main+0x3d8>)
 8001c32:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001c36:	2118      	movs	r1, #24
 8001c38:	482c      	ldr	r0, [pc, #176]	; (8001cec <main+0x3dc>)
 8001c3a:	f7ff fb33 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <main+0x3e0>)
 8001c42:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001c44:	2119      	movs	r1, #25
 8001c46:	4829      	ldr	r0, [pc, #164]	; (8001cec <main+0x3dc>)
 8001c48:	f7ff fb2c 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <main+0x3e0>)
 8001c50:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001c52:	211a      	movs	r1, #26
 8001c54:	4825      	ldr	r0, [pc, #148]	; (8001cec <main+0x3dc>)
 8001c56:	f7ff fb25 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <main+0x3e0>)
 8001c5e:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001c60:	211b      	movs	r1, #27
 8001c62:	4822      	ldr	r0, [pc, #136]	; (8001cec <main+0x3dc>)
 8001c64:	f7ff fb1e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <main+0x3e0>)
 8001c6c:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001c6e:	211c      	movs	r1, #28
 8001c70:	481e      	ldr	r0, [pc, #120]	; (8001cec <main+0x3dc>)
 8001c72:	f7ff fb17 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <main+0x3e0>)
 8001c7a:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001c7c:	211d      	movs	r1, #29
 8001c7e:	481b      	ldr	r0, [pc, #108]	; (8001cec <main+0x3dc>)
 8001c80:	f7ff fb10 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <main+0x3e0>)
 8001c88:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001c8a:	211e      	movs	r1, #30
 8001c8c:	4817      	ldr	r0, [pc, #92]	; (8001cec <main+0x3dc>)
 8001c8e:	f7ff fb09 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <main+0x3e0>)
 8001c96:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001c98:	211f      	movs	r1, #31
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <main+0x3dc>)
 8001c9c:	f7ff fb02 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <main+0x3e0>)
 8001ca4:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i < 7;i++){
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	e00e      	b.n	8001cc8 <main+0x3b8>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <main+0x3e0>)
 8001cac:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fb2d 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001cb6:	eef0 7a40 	vmov.f32	s15, s0
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <main+0x3e0>)
 8001cbc:	1d23      	adds	r3, r4, #4
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i < 7;i++){
 8001cc6:	3401      	adds	r4, #1
 8001cc8:	2c06      	cmp	r4, #6
 8001cca:	ddee      	ble.n	8001caa <main+0x39a>
		  }

		  //Protection_machine();
		  manual_relay();
 8001ccc:	f000 fc20 	bl	8002510 <manual_relay>
	  Button_machine();
 8001cd0:	e67d      	b.n	80019ce <main+0xbe>
 8001cd2:	bf00      	nop
 8001cd4:	200005f0 	.word	0x200005f0
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	200005f8 	.word	0x200005f8
 8001ce0:	20000248 	.word	0x20000248
 8001ce4:	2000058c 	.word	0x2000058c
 8001ce8:	200005a4 	.word	0x200005a4
 8001cec:	2000029c 	.word	0x2000029c
 8001cf0:	200005bc 	.word	0x200005bc

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	; 0x50
 8001cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	2230      	movs	r2, #48	; 0x30
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f008 fd62 	bl	800a7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <SystemClock_Config+0xc8>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <SystemClock_Config+0xc8>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <SystemClock_Config+0xc8>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <SystemClock_Config+0xcc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <SystemClock_Config+0xcc>)
 8001d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <SystemClock_Config+0xcc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d64:	2308      	movs	r3, #8
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d70:	2304      	movs	r3, #4
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fe5d 	bl	8007a38 <HAL_RCC_OscConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d84:	f000 ffaa 	bl	8002cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d88:	230f      	movs	r3, #15
 8001d8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	2103      	movs	r1, #3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 f8bf 	bl	8007f28 <HAL_RCC_ClockConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001db0:	f000 ff94 	bl	8002cdc <Error_Handler>
  }
}
 8001db4:	bf00      	nop
 8001db6:	3750      	adds	r7, #80	; 0x50
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dca:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <MX_I2C1_Init+0x54>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dd0:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <MX_I2C1_Init+0x58>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001e02:	f003 f97f 	bl	8005104 <HAL_I2C_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e0c:	f000 ff66 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000248 	.word	0x20000248
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	00061a80 	.word	0x00061a80

08001e20 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <MX_SPI3_Init+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e50:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e54:	2220      	movs	r2, #32
 8001e56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	; (8001e84 <MX_SPI3_Init+0x64>)
 8001e72:	f006 fa79 	bl	8008368 <HAL_SPI_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001e7c:	f000 ff2e 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000029c 	.word	0x2000029c
 8001e88:	40003c00 	.word	0x40003c00

08001e8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f008 fc96 	bl	800a7cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <MX_TIM3_Init+0xa4>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8001eda:	2304      	movs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8001eea:	2304      	movs	r3, #4
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001efa:	f006 fe0c 	bl	8008b16 <HAL_TIM_Encoder_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f04:	f000 feea 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_TIM3_Init+0xa0>)
 8001f16:	f007 f909 	bl	800912c <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f20:	f000 fedc 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200002f4 	.word	0x200002f4
 8001f30:	40000400 	.word	0x40000400

08001f34 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <MX_TIM10_Init+0x44>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f44:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f52:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_TIM10_Init+0x40>)
 8001f62:	f006 fcf7 	bl	8008954 <HAL_TIM_Base_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001f6c:	f000 feb6 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000033c 	.word	0x2000033c
 8001f78:	40014400 	.word	0x40014400

08001f7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <MX_USART1_UART_Init+0x54>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f94:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001fb8:	f007 f93a 	bl	8009230 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001fc2:	f000 fe8b 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000384 	.word	0x20000384
 8001fd0:	40011000 	.word	0x40011000

08001fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_USART2_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 800200c:	f007 f910 	bl	8009230 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f000 fe61 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200003c8 	.word	0x200003c8
 8002024:	40004400 	.word	0x40004400

08002028 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <MX_USART6_UART_Init+0x50>)
 8002030:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USART6_UART_Init+0x4c>)
 8002060:	f007 f8e6 	bl	8009230 <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800206a:	f000 fe37 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000040c 	.word	0x2000040c
 8002078:	40011400 	.word	0x40011400

0800207c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_DMA_Init+0x3c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <MX_DMA_Init+0x3c>)
 800208c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_DMA_Init+0x3c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2039      	movs	r0, #57	; 0x39
 80020a4:	f002 fa17 	bl	80044d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020a8:	2039      	movs	r0, #57	; 0x39
 80020aa:	f002 fa30 	bl	800450e <HAL_NVIC_EnableIRQ>

}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <MX_GPIO_Init+0x208>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <MX_GPIO_Init+0x208>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <MX_GPIO_Init+0x208>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <MX_GPIO_Init+0x208>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a73      	ldr	r2, [pc, #460]	; (80022c4 <MX_GPIO_Init+0x208>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b71      	ldr	r3, [pc, #452]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <MX_GPIO_Init+0x208>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <MX_GPIO_Init+0x208>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a65      	ldr	r2, [pc, #404]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a5e      	ldr	r2, [pc, #376]	; (80022c4 <MX_GPIO_Init+0x208>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <MX_GPIO_Init+0x208>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 800215e:	2200      	movs	r2, #0
 8002160:	f240 314b 	movw	r1, #843	; 0x34b
 8002164:	4858      	ldr	r0, [pc, #352]	; (80022c8 <MX_GPIO_Init+0x20c>)
 8002166:	f002 ff81 	bl	800506c <HAL_GPIO_WritePin>
                          |RelayClient_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002170:	4856      	ldr	r0, [pc, #344]	; (80022cc <MX_GPIO_Init+0x210>)
 8002172:	f002 ff7b 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2101      	movs	r1, #1
 800217a:	4855      	ldr	r0, [pc, #340]	; (80022d0 <MX_GPIO_Init+0x214>)
 800217c:	f002 ff76 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2104      	movs	r1, #4
 8002184:	4853      	ldr	r0, [pc, #332]	; (80022d4 <MX_GPIO_Init+0x218>)
 8002186:	f002 ff71 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800218a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002190:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4849      	ldr	r0, [pc, #292]	; (80022c8 <MX_GPIO_Init+0x20c>)
 80021a2:	f002 fddf 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin RelayClient_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|RelayClient_Pin
 80021a6:	f240 3343 	movw	r3, #835	; 0x343
 80021aa:	617b      	str	r3, [r7, #20]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4842      	ldr	r0, [pc, #264]	; (80022c8 <MX_GPIO_Init+0x20c>)
 80021c0:	f002 fdd0 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80021c4:	2304      	movs	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	483c      	ldr	r0, [pc, #240]	; (80022c8 <MX_GPIO_Init+0x20c>)
 80021d8:	f002 fdc4 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80021dc:	2308      	movs	r3, #8
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e8:	2302      	movs	r3, #2
 80021ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4835      	ldr	r0, [pc, #212]	; (80022c8 <MX_GPIO_Init+0x20c>)
 80021f4:	f002 fdb6 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 80021f8:	f44f 7398 	mov.w	r3, #304	; 0x130
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	482e      	ldr	r0, [pc, #184]	; (80022cc <MX_GPIO_Init+0x210>)
 8002212:	f002 fda7 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002222:	2301      	movs	r3, #1
 8002224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4828      	ldr	r0, [pc, #160]	; (80022d0 <MX_GPIO_Init+0x214>)
 800222e:	f002 fd99 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8002232:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4822      	ldr	r0, [pc, #136]	; (80022d0 <MX_GPIO_Init+0x214>)
 8002248:	f002 fd8c 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002250:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <MX_GPIO_Init+0x20c>)
 8002262:	f002 fd7f 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002266:	2304      	movs	r3, #4
 8002268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <MX_GPIO_Init+0x218>)
 800227e:	f002 fd71 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228a:	2301      	movs	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	480e      	ldr	r0, [pc, #56]	; (80022d0 <MX_GPIO_Init+0x214>)
 8002296:	f002 fd65 	bl	8004d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2017      	movs	r0, #23
 80022a0:	f002 f919 	bl	80044d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022a4:	2017      	movs	r0, #23
 80022a6:	f002 f932 	bl	800450e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2028      	movs	r0, #40	; 0x28
 80022b0:	f002 f911 	bl	80044d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022b4:	2028      	movs	r0, #40	; 0x28
 80022b6:	f002 f92a 	bl	800450e <HAL_NVIC_EnableIRQ>

}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020c00 	.word	0x40020c00

080022d8 <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4603      	mov	r3, r0
 80022e0:	460a      	mov	r2, r1
 80022e2:	80fb      	strh	r3, [r7, #6]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <box_pointer+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <box_pointer+0x5c>)
 80022f2:	8818      	ldrh	r0, [r3, #0]
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <box_pointer+0x5c>)
 80022f6:	8859      	ldrh	r1, [r3, #2]
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	230f      	movs	r3, #15
 80022fe:	220f      	movs	r2, #15
 8002300:	f001 f9a0 	bl	8003644 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002304:	88b9      	ldrh	r1, [r7, #4]
 8002306:	88f8      	ldrh	r0, [r7, #6]
 8002308:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	230f      	movs	r3, #15
 8002310:	220f      	movs	r2, #15
 8002312:	f001 f997 	bl	8003644 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <box_pointer+0x5c>)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <box_pointer+0x5c>)
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <box_pointer+0x58>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000062b 	.word	0x2000062b
 8002334:	20000630 	.word	0x20000630

08002338 <simple_scr>:

void simple_scr(){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <simple_scr+0xac>)
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	461a      	mov	r2, r3
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <simple_scr+0xac>)
 8002346:	789b      	ldrb	r3, [r3, #2]
 8002348:	4619      	mov	r1, r3
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <simple_scr+0xb0>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	4926      	ldr	r1, [pc, #152]	; (80023ec <simple_scr+0xb4>)
 8002354:	4826      	ldr	r0, [pc, #152]	; (80023f0 <simple_scr+0xb8>)
 8002356:	f008 feab 	bl	800b0b0 <siprintf>
	  ili9341_WriteString(170, 10, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <simple_scr+0xbc>)
 800235c:	2200      	movs	r2, #0
 800235e:	9202      	str	r2, [sp, #8]
 8002360:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002364:	9201      	str	r2, [sp, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <simple_scr+0xb8>)
 800236e:	210a      	movs	r1, #10
 8002370:	20aa      	movs	r0, #170	; 0xaa
 8002372:	f001 faee 	bl	8003952 <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], btn_k_cnt, flag_k_up);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <simple_scr+0xc0>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <simple_scr+0xc4>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <simple_scr+0xc8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	460b      	mov	r3, r1
 800238a:	491e      	ldr	r1, [pc, #120]	; (8002404 <simple_scr+0xcc>)
 800238c:	4818      	ldr	r0, [pc, #96]	; (80023f0 <simple_scr+0xb8>)
 800238e:	f008 fe8f 	bl	800b0b0 <siprintf>
	  ili9341_WriteString(170, 30, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <simple_scr+0xbc>)
 8002394:	2200      	movs	r2, #0
 8002396:	9202      	str	r2, [sp, #8]
 8002398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239c:	9201      	str	r2, [sp, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	9200      	str	r2, [sp, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <simple_scr+0xb8>)
 80023a6:	211e      	movs	r1, #30
 80023a8:	20aa      	movs	r0, #170	; 0xaa
 80023aa:	f001 fad2 	bl	8003952 <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, state_box_choice_is);
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <simple_scr+0xd0>)
 80023b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <simple_scr+0xd4>)
 80023b4:	f993 3000 	ldrsb.w	r3, [r3]
 80023b8:	4915      	ldr	r1, [pc, #84]	; (8002410 <simple_scr+0xd8>)
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <simple_scr+0xb8>)
 80023bc:	f008 fe78 	bl	800b0b0 <siprintf>
	  ili9341_WriteString(190, 50, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <simple_scr+0xbc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	9202      	str	r2, [sp, #8]
 80023c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	9200      	str	r2, [sp, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <simple_scr+0xb8>)
 80023d4:	2132      	movs	r1, #50	; 0x32
 80023d6:	20be      	movs	r0, #190	; 0xbe
 80023d8:	f001 fabb 	bl	8003952 <ili9341_WriteString>


}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000061c 	.word	0x2000061c
 80023e8:	20000620 	.word	0x20000620
 80023ec:	0800d6e0 	.word	0x0800d6e0
 80023f0:	200004b0 	.word	0x200004b0
 80023f4:	20000024 	.word	0x20000024
 80023f8:	20000624 	.word	0x20000624
 80023fc:	20000628 	.word	0x20000628
 8002400:	20000629 	.word	0x20000629
 8002404:	0800d6f0 	.word	0x0800d6f0
 8002408:	40000400 	.word	0x40000400
 800240c:	20000015 	.word	0x20000015
 8002410:	0800d700 	.word	0x0800d700

08002414 <Button_machine>:


void Button_machine(){
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8002418:	4b20      	ldr	r3, [pc, #128]	; (800249c <Button_machine+0x88>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <Button_machine+0x88>)
 800241e:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <Button_machine+0x8c>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	0b1b      	lsrs	r3, r3, #12
 8002426:	b2db      	uxtb	r3, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <Button_machine+0x88>)
 8002434:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <Button_machine+0x88>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d017      	beq.n	800246e <Button_machine+0x5a>
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <Button_machine+0x88>)
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d113      	bne.n	800246e <Button_machine+0x5a>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <Button_machine+0x88>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <Button_machine+0x90>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	4413      	add	r3, r2
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <Button_machine+0x90>)
 8002456:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <Button_machine+0x88>)
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <Button_machine+0x88>)
 800245e:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <Button_machine+0x88>)
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <Button_machine+0x88>)
 8002466:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try
			flag_manual_relay = 1;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <Button_machine+0x94>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
//		}

//		knob_rotter();

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <Button_machine+0x98>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	2b10      	cmp	r3, #16
 8002474:	d905      	bls.n	8002482 <Button_machine+0x6e>
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <Button_machine+0x98>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800247e:	4293      	cmp	r3, r2
 8002480:	d907      	bls.n	8002492 <Button_machine+0x7e>
			TIM3->CNT = 0x8000; // back to center
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <Button_machine+0x9c>)
 8002484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <Button_machine+0x98>)
 800248c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002490:	801a      	strh	r2, [r3, #0]
		}


}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	2000061c 	.word	0x2000061c
 80024a0:	40020400 	.word	0x40020400
 80024a4:	20000620 	.word	0x20000620
 80024a8:	2000060d 	.word	0x2000060d
 80024ac:	20000624 	.word	0x20000624
 80024b0:	40000400 	.word	0x40000400

080024b4 <knob_rotter>:

void knob_rotter(){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <knob_rotter+0x4c>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <knob_rotter+0x50>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d908      	bls.n	80024d8 <knob_rotter+0x24>
		flag_k_up = 1;
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <knob_rotter+0x54>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <knob_rotter+0x4c>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <knob_rotter+0x50>)
 80024d4:	801a      	strh	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;

	}
	else{}

}
 80024d6:	e00e      	b.n	80024f6 <knob_rotter+0x42>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <knob_rotter+0x4c>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <knob_rotter+0x50>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d207      	bcs.n	80024f6 <knob_rotter+0x42>
		flag_k_dn = 1;
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <knob_rotter+0x58>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <knob_rotter+0x4c>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <knob_rotter+0x50>)
 80024f4:	801a      	strh	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40000400 	.word	0x40000400
 8002504:	20000624 	.word	0x20000624
 8002508:	20000629 	.word	0x20000629
 800250c:	2000062a 	.word	0x2000062a

08002510 <manual_relay>:
		}
	}else{counter_overcurrent = 0;}

}

void manual_relay(){
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <manual_relay+0x28>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <manual_relay+0x24>

		if(GrandState == monitor){
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <manual_relay+0x2c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b06      	cmp	r3, #6
 8002522:	d104      	bne.n	800252e <manual_relay+0x1e>

			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 8002524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <manual_relay+0x30>)
 800252a:	f002 fdb8 	bl	800509e <HAL_GPIO_TogglePin>

		}

		flag_manual_relay = 0;
 800252e:	4b02      	ldr	r3, [pc, #8]	; (8002538 <manual_relay+0x28>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
	}
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000060d 	.word	0x2000060d
 800253c:	20000006 	.word	0x20000006
 8002540:	40020800 	.word	0x40020800

08002544 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8002544:	b598      	push	{r3, r4, r7, lr}
 8002546:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <buzzer_scream_cnt+0xdc>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d039      	beq.n	80025c4 <buzzer_scream_cnt+0x80>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d01d      	beq.n	8002590 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 8002554:	4b33      	ldr	r3, [pc, #204]	; (8002624 <buzzer_scream_cnt+0xe0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 800255c:	4832      	ldr	r0, [pc, #200]	; (8002628 <buzzer_scream_cnt+0xe4>)
 800255e:	f006 fa49 	bl	80089f4 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <buzzer_scream_cnt+0xe0>)
 8002564:	885b      	ldrh	r3, [r3, #2]
 8002566:	461c      	mov	r4, r3
 8002568:	f001 feaa 	bl	80042c0 <HAL_GetTick>
 800256c:	4603      	mov	r3, r0
 800256e:	4423      	add	r3, r4
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <buzzer_scream_cnt+0xe0>)
 8002572:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <buzzer_scream_cnt+0xdc>)
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <buzzer_scream_cnt+0xe0>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <buzzer_scream_cnt+0xe0>)
 8002584:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002586:	e048      	b.n	800261a <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002588:	4827      	ldr	r0, [pc, #156]	; (8002628 <buzzer_scream_cnt+0xe4>)
 800258a:	f006 fa95 	bl	8008ab8 <HAL_TIM_Base_Stop_IT>
			break;
 800258e:	e044      	b.n	800261a <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002596:	4825      	ldr	r0, [pc, #148]	; (800262c <buzzer_scream_cnt+0xe8>)
 8002598:	f002 fd68 	bl	800506c <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 800259c:	f001 fe90 	bl	80042c0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d334      	bcc.n	8002614 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025ac:	889b      	ldrh	r3, [r3, #4]
 80025ae:	461c      	mov	r4, r3
 80025b0:	f001 fe86 	bl	80042c0 <HAL_GetTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4423      	add	r3, r4
 80025b8:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025ba:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <buzzer_scream_cnt+0xdc>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80025c2:	e027      	b.n	8002614 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ca:	4818      	ldr	r0, [pc, #96]	; (800262c <buzzer_scream_cnt+0xe8>)
 80025cc:	f002 fd4e 	bl	800506c <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 80025d0:	f001 fe76 	bl	80042c0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d31c      	bcc.n	8002618 <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d012      	beq.n	800260c <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025e8:	885b      	ldrh	r3, [r3, #2]
 80025ea:	461c      	mov	r4, r3
 80025ec:	f001 fe68 	bl	80042c0 <HAL_GetTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4423      	add	r3, r4
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025f6:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <buzzer_scream_cnt+0xe0>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <buzzer_scream_cnt+0xe0>)
 8002602:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <buzzer_scream_cnt+0xdc>)
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 800260a:	e005      	b.n	8002618 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <buzzer_scream_cnt+0xdc>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
			break;
 8002612:	e001      	b.n	8002618 <buzzer_scream_cnt+0xd4>
			break;
 8002614:	bf00      	nop
 8002616:	e000      	b.n	800261a <buzzer_scream_cnt+0xd6>
			break;
 8002618:	bf00      	nop
		}

}
 800261a:	bf00      	nop
 800261c:	bd98      	pop	{r3, r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	20000638 	.word	0x20000638
 8002624:	20000610 	.word	0x20000610
 8002628:	2000033c 	.word	0x2000033c
 800262c:	40020800 	.word	0x40020800

08002630 <GrandState_Verita>:


void GrandState_Verita(){
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b085      	sub	sp, #20
 8002634:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002636:	4b9f      	ldr	r3, [pc, #636]	; (80028b4 <GrandState_Verita+0x284>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d87e      	bhi.n	800273c <GrandState_Verita+0x10c>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <GrandState_Verita+0x14>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002793 	.word	0x08002793
 8002648:	08002661 	.word	0x08002661
 800264c:	0800273d 	.word	0x0800273d
 8002650:	080027b5 	.word	0x080027b5
 8002654:	0800280d 	.word	0x0800280d
 8002658:	08002905 	.word	0x08002905
 800265c:	08002a17 	.word	0x08002a17

	case pre_lobby:
		state_box_choice_n = 4;
 8002660:	4b95      	ldr	r3, [pc, #596]	; (80028b8 <GrandState_Verita+0x288>)
 8002662:	2204      	movs	r2, #4
 8002664:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	23f0      	movs	r3, #240	; 0xf0
 800266c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002670:	2100      	movs	r1, #0
 8002672:	2000      	movs	r0, #0
 8002674:	f000 ffe6 	bl	8003644 <ili9341_FillRect>

		ili9341_FillRect(300, 0, 20, 240, cl_ORANGE);
 8002678:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	23f0      	movs	r3, #240	; 0xf0
 8002680:	2214      	movs	r2, #20
 8002682:	2100      	movs	r1, #0
 8002684:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002688:	f000 ffdc 	bl	8003644 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_ORANGE);
 800268c:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	230a      	movs	r3, #10
 8002694:	220a      	movs	r2, #10
 8002696:	2100      	movs	r1, #0
 8002698:	2000      	movs	r0, #0
 800269a:	f000 ffd3 	bl	8003644 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Verita: Nucleo-F411RE Tester");
 800269e:	4987      	ldr	r1, [pc, #540]	; (80028bc <GrandState_Verita+0x28c>)
 80026a0:	4887      	ldr	r0, [pc, #540]	; (80028c0 <GrandState_Verita+0x290>)
 80026a2:	f008 fd05 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(10, 10, TextDispBuffer, Font20, cl_WHITE);
 80026a6:	4b87      	ldr	r3, [pc, #540]	; (80028c4 <GrandState_Verita+0x294>)
 80026a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ac:	9201      	str	r2, [sp, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a82      	ldr	r2, [pc, #520]	; (80028c0 <GrandState_Verita+0x290>)
 80026b6:	210a      	movs	r1, #10
 80026b8:	200a      	movs	r0, #10
 80026ba:	f001 f997 	bl	80039ec <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Full Script");
 80026be:	4982      	ldr	r1, [pc, #520]	; (80028c8 <GrandState_Verita+0x298>)
 80026c0:	487f      	ldr	r0, [pc, #508]	; (80028c0 <GrandState_Verita+0x290>)
 80026c2:	f008 fcf5 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 80026c6:	4b81      	ldr	r3, [pc, #516]	; (80028cc <GrandState_Verita+0x29c>)
 80026c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026cc:	9201      	str	r2, [sp, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	9200      	str	r2, [sp, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <GrandState_Verita+0x290>)
 80026d6:	213c      	movs	r1, #60	; 0x3c
 80026d8:	2032      	movs	r0, #50	; 0x32
 80026da:	f001 f987 	bl	80039ec <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR_Monitor");
 80026de:	497c      	ldr	r1, [pc, #496]	; (80028d0 <GrandState_Verita+0x2a0>)
 80026e0:	4877      	ldr	r0, [pc, #476]	; (80028c0 <GrandState_Verita+0x290>)
 80026e2:	f008 fce5 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(50, 90, TextDispBuffer, Font16, cl_CYAN);
 80026e6:	4b79      	ldr	r3, [pc, #484]	; (80028cc <GrandState_Verita+0x29c>)
 80026e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026ec:	9201      	str	r2, [sp, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a72      	ldr	r2, [pc, #456]	; (80028c0 <GrandState_Verita+0x290>)
 80026f6:	215a      	movs	r1, #90	; 0x5a
 80026f8:	2032      	movs	r0, #50	; 0x32
 80026fa:	f001 f977 	bl	80039ec <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Analog, coming soon");
 80026fe:	4975      	ldr	r1, [pc, #468]	; (80028d4 <GrandState_Verita+0x2a4>)
 8002700:	486f      	ldr	r0, [pc, #444]	; (80028c0 <GrandState_Verita+0x290>)
 8002702:	f008 fcd5 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(50, 120, TextDispBuffer, Font16, cl_CYAN);
 8002706:	4b71      	ldr	r3, [pc, #452]	; (80028cc <GrandState_Verita+0x29c>)
 8002708:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800270c:	9201      	str	r2, [sp, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <GrandState_Verita+0x290>)
 8002716:	2178      	movs	r1, #120	; 0x78
 8002718:	2032      	movs	r0, #50	; 0x32
 800271a:	f001 f967 	bl	80039ec <ili9341_WriteStringNoBG>

		box_pointer(20, bosy[state_box_choice_is]);
 800271e:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <GrandState_Verita+0x2a8>)
 8002720:	f993 3000 	ldrsb.w	r3, [r3]
 8002724:	461a      	mov	r2, r3
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <GrandState_Verita+0x2ac>)
 8002728:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800272c:	4619      	mov	r1, r3
 800272e:	2014      	movs	r0, #20
 8002730:	f7ff fdd2 	bl	80022d8 <box_pointer>

		GrandState = lobby;
 8002734:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <GrandState_Verita+0x284>)
 8002736:	2202      	movs	r2, #2
 8002738:	701a      	strb	r2, [r3, #0]
		break;
 800273a:	e279      	b.n	8002c30 <GrandState_Verita+0x600>

	default:
	case lobby:
		state_box_choice_n = 4;
 800273c:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <GrandState_Verita+0x288>)
 800273e:	2204      	movs	r2, #4
 8002740:	701a      	strb	r2, [r3, #0]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, state_box_choice_is);
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <GrandState_Verita+0x2b0>)
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <GrandState_Verita+0x2a8>)
 8002748:	f993 3000 	ldrsb.w	r3, [r3]
 800274c:	4965      	ldr	r1, [pc, #404]	; (80028e4 <GrandState_Verita+0x2b4>)
 800274e:	485c      	ldr	r0, [pc, #368]	; (80028c0 <GrandState_Verita+0x290>)
 8002750:	f008 fcae 	bl	800b0b0 <siprintf>
		ili9341_WriteString(120, 150, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002754:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <GrandState_Verita+0x29c>)
 8002756:	2200      	movs	r2, #0
 8002758:	9202      	str	r2, [sp, #8]
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	9201      	str	r2, [sp, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <GrandState_Verita+0x290>)
 8002768:	2196      	movs	r1, #150	; 0x96
 800276a:	2078      	movs	r0, #120	; 0x78
 800276c:	f001 f8f1 	bl	8003952 <ili9341_WriteString>
		//simple_scr();
		if(btn_k_cnt){
 8002770:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <GrandState_Verita+0x2b8>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8258 	beq.w	8002c2a <GrandState_Verita+0x5fa>

			if (state_box_choice_is == 2){GrandState = pre_monitor;}
 800277a:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <GrandState_Verita+0x2a8>)
 800277c:	f993 3000 	ldrsb.w	r3, [r3]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d102      	bne.n	800278a <GrandState_Verita+0x15a>
 8002784:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <GrandState_Verita+0x284>)
 8002786:	2205      	movs	r2, #5
 8002788:	701a      	strb	r2, [r3, #0]

		btn_k_cnt = 0;
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <GrandState_Verita+0x2b8>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
		}

		break; // lobby
 8002790:	e24b      	b.n	8002c2a <GrandState_Verita+0x5fa>

	case init:
		state_box_choice_n = 0;
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <GrandState_Verita+0x288>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
//		}
//		//// last round: send only left bit (less 255)
//		HAL_Delay(2);
//		BL_UART_WriteMem_d(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);

		BL_UART_Start(&huart1);
 8002798:	4854      	ldr	r0, [pc, #336]	; (80028ec <GrandState_Verita+0x2bc>)
 800279a:	f7fe fec7 	bl	800152c <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 800279e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027a2:	4852      	ldr	r0, [pc, #328]	; (80028ec <GrandState_Verita+0x2bc>)
 80027a4:	f7ff f83c 	bl	8001820 <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 80027a8:	f7fe fef0 	bl	800158c <BL_UART_Finish>

		GrandState = lobby;
 80027ac:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <GrandState_Verita+0x284>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
		break;
 80027b2:	e23d      	b.n	8002c30 <GrandState_Verita+0x600>

	case pre_bootloader:
		state_box_choice_n = 0;
 80027b4:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <GrandState_Verita+0x288>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	23f0      	movs	r3, #240	; 0xf0
 80027c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80027c4:	2100      	movs	r1, #0
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 ff3c 	bl	8003644 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_PURPLE);
 80027cc:	f647 030f 	movw	r3, #30735	; 0x780f
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	230a      	movs	r3, #10
 80027d4:	220a      	movs	r2, #10
 80027d6:	2100      	movs	r1, #0
 80027d8:	2000      	movs	r0, #0
 80027da:	f000 ff33 	bl	8003644 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Boot...");
 80027de:	4944      	ldr	r1, [pc, #272]	; (80028f0 <GrandState_Verita+0x2c0>)
 80027e0:	4837      	ldr	r0, [pc, #220]	; (80028c0 <GrandState_Verita+0x290>)
 80027e2:	f008 fc65 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(60, 120, TextDispBuffer, Font24, cl_WHITE);
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <GrandState_Verita+0x2c4>)
 80027e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ec:	9201      	str	r2, [sp, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a32      	ldr	r2, [pc, #200]	; (80028c0 <GrandState_Verita+0x290>)
 80027f6:	2178      	movs	r1, #120	; 0x78
 80027f8:	203c      	movs	r0, #60	; 0x3c
 80027fa:	f001 f8f7 	bl	80039ec <ili9341_WriteStringNoBG>

		btn_k_cnt = 0; //// prevent over state jump
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <GrandState_Verita+0x2b8>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
		GrandState = s_bootloader;
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <GrandState_Verita+0x284>)
 8002806:	2204      	movs	r2, #4
 8002808:	701a      	strb	r2, [r3, #0]
		break;
 800280a:	e211      	b.n	8002c30 <GrandState_Verita+0x600>

	case s_bootloader:
		state_box_choice_n = 0;
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <GrandState_Verita+0x288>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8002812:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <GrandState_Verita+0x2c8>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	b29b      	uxth	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <GrandState_Verita+0x2c8>)
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	b292      	uxth	r2, r2
 8002824:	2a00      	cmp	r2, #0
 8002826:	bf14      	ite	ne
 8002828:	2201      	movne	r2, #1
 800282a:	2200      	moveq	r2, #0
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4413      	add	r3, r2
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b32      	ldr	r3, [pc, #200]	; (80028fc <GrandState_Verita+0x2cc>)
 8002834:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8002836:	482d      	ldr	r0, [pc, #180]	; (80028ec <GrandState_Verita+0x2bc>)
 8002838:	f7fe fe78 	bl	800152c <BL_UART_Start>

		//// Flash Memory Erase ============,
		//// Erase1_Mass_CMD makes bootloader not response to ALL write CMD / dont know why
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank1_CMD);
 800283c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002840:	482a      	ldr	r0, [pc, #168]	; (80028ec <GrandState_Verita+0x2bc>)
 8002842:	f7fe ffed 	bl	8001820 <BL_UART_ExtendEraseMem_SP>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank2_CMD);
 8002846:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 800284a:	4828      	ldr	r0, [pc, #160]	; (80028ec <GrandState_Verita+0x2bc>)
 800284c:	f7fe ffe8 	bl	8001820 <BL_UART_ExtendEraseMem_SP>

		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002850:	2400      	movs	r4, #0
 8002852:	e00b      	b.n	800286c <GrandState_Verita+0x23c>
			BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8002854:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	4619      	mov	r1, r3
 800285c:	0223      	lsls	r3, r4, #8
 800285e:	4a28      	ldr	r2, [pc, #160]	; (8002900 <GrandState_Verita+0x2d0>)
 8002860:	4413      	add	r3, r2
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	4821      	ldr	r0, [pc, #132]	; (80028ec <GrandState_Verita+0x2bc>)
 8002866:	f7fe feaf 	bl	80015c8 <BL_UART_WriteMem>
		for(register int b = 0;b < bootloop_n - 1;b++){
 800286a:	3401      	adds	r4, #1
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <GrandState_Verita+0x2cc>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	3b01      	subs	r3, #1
 8002872:	429c      	cmp	r4, r3
 8002874:	dbee      	blt.n	8002854 <GrandState_Verita+0x224>
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <GrandState_Verita+0x2cc>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 800287e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	4618      	mov	r0, r3
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <GrandState_Verita+0x2c8>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <GrandState_Verita+0x2cc>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	491a      	ldr	r1, [pc, #104]	; (8002900 <GrandState_Verita+0x2d0>)
 8002896:	440b      	add	r3, r1
 8002898:	4601      	mov	r1, r0
 800289a:	4814      	ldr	r0, [pc, #80]	; (80028ec <GrandState_Verita+0x2bc>)
 800289c:	f7fe fe94 	bl	80015c8 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 80028a0:	f7fe fe74 	bl	800158c <BL_UART_Finish>

		btn_k_cnt = 0; //// prevent over state jump
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <GrandState_Verita+0x2b8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
		GrandState = lobby;
 80028aa:	4b02      	ldr	r3, [pc, #8]	; (80028b4 <GrandState_Verita+0x284>)
 80028ac:	2202      	movs	r2, #2
 80028ae:	701a      	strb	r2, [r3, #0]

		break;
 80028b0:	e1be      	b.n	8002c30 <GrandState_Verita+0x600>
 80028b2:	bf00      	nop
 80028b4:	20000006 	.word	0x20000006
 80028b8:	20000014 	.word	0x20000014
 80028bc:	0800d708 	.word	0x0800d708
 80028c0:	200004b0 	.word	0x200004b0
 80028c4:	2000002c 	.word	0x2000002c
 80028c8:	0800d728 	.word	0x0800d728
 80028cc:	20000024 	.word	0x20000024
 80028d0:	0800d734 	.word	0x0800d734
 80028d4:	0800d740 	.word	0x0800d740
 80028d8:	20000015 	.word	0x20000015
 80028dc:	20000008 	.word	0x20000008
 80028e0:	40000400 	.word	0x40000400
 80028e4:	0800d700 	.word	0x0800d700
 80028e8:	20000628 	.word	0x20000628
 80028ec:	20000384 	.word	0x20000384
 80028f0:	0800d754 	.word	0x0800d754
 80028f4:	20000034 	.word	0x20000034
 80028f8:	20000004 	.word	0x20000004
 80028fc:	20000538 	.word	0x20000538
 8002900:	0800d814 	.word	0x0800d814

	case pre_monitor:
		state_box_choice_n = 0;
 8002904:	4ba3      	ldr	r3, [pc, #652]	; (8002b94 <GrandState_Verita+0x564>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 800290a:	2300      	movs	r3, #0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	23f0      	movs	r3, #240	; 0xf0
 8002910:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002914:	2100      	movs	r1, #0
 8002916:	2000      	movs	r0, #0
 8002918:	f000 fe94 	bl	8003644 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_ORANGE);
 800291c:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	230a      	movs	r3, #10
 8002924:	220a      	movs	r2, #10
 8002926:	2100      	movs	r1, #0
 8002928:	2000      	movs	r0, #0
 800292a:	f000 fe8b 	bl	8003644 <ili9341_FillRect>

		sprintf(TextDispBuffer,"<-Back (Knob press)");
 800292e:	499a      	ldr	r1, [pc, #616]	; (8002b98 <GrandState_Verita+0x568>)
 8002930:	489a      	ldr	r0, [pc, #616]	; (8002b9c <GrandState_Verita+0x56c>)
 8002932:	f008 fbbd 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(60, 220, TextDispBuffer, Font16, cl_WHITE);
 8002936:	4b9a      	ldr	r3, [pc, #616]	; (8002ba0 <GrandState_Verita+0x570>)
 8002938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800293c:	9201      	str	r2, [sp, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	9200      	str	r2, [sp, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a95      	ldr	r2, [pc, #596]	; (8002b9c <GrandState_Verita+0x56c>)
 8002946:	21dc      	movs	r1, #220	; 0xdc
 8002948:	203c      	movs	r0, #60	; 0x3c
 800294a:	f001 f84f 	bl	80039ec <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
 800294e:	4b95      	ldr	r3, [pc, #596]	; (8002ba4 <GrandState_Verita+0x574>)
 8002950:	8a5b      	ldrh	r3, [r3, #18]
 8002952:	461a      	mov	r2, r3
 8002954:	4994      	ldr	r1, [pc, #592]	; (8002ba8 <GrandState_Verita+0x578>)
 8002956:	4891      	ldr	r0, [pc, #580]	; (8002b9c <GrandState_Verita+0x56c>)
 8002958:	f008 fbaa 	bl	800b0b0 <siprintf>
		ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 800295c:	4b93      	ldr	r3, [pc, #588]	; (8002bac <GrandState_Verita+0x57c>)
 800295e:	2200      	movs	r2, #0
 8002960:	9202      	str	r2, [sp, #8]
 8002962:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	9200      	str	r2, [sp, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a8b      	ldr	r2, [pc, #556]	; (8002b9c <GrandState_Verita+0x56c>)
 8002970:	211e      	movs	r1, #30
 8002972:	2014      	movs	r0, #20
 8002974:	f000 ffed 	bl	8003952 <ili9341_WriteString>

		sprintf(TextDispBuffer,"V mV:");
 8002978:	498d      	ldr	r1, [pc, #564]	; (8002bb0 <GrandState_Verita+0x580>)
 800297a:	4888      	ldr	r0, [pc, #544]	; (8002b9c <GrandState_Verita+0x56c>)
 800297c:	f008 fb98 	bl	800b0b0 <siprintf>
		ili9341_WriteString(20, 50, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8002980:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <GrandState_Verita+0x584>)
 8002982:	2200      	movs	r2, #0
 8002984:	9202      	str	r2, [sp, #8]
 8002986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298a:	9201      	str	r2, [sp, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a82      	ldr	r2, [pc, #520]	; (8002b9c <GrandState_Verita+0x56c>)
 8002994:	2132      	movs	r1, #50	; 0x32
 8002996:	2014      	movs	r0, #20
 8002998:	f000 ffdb 	bl	8003952 <ili9341_WriteString>

		sprintf(TextDispBuffer,"I mA:");
 800299c:	4986      	ldr	r1, [pc, #536]	; (8002bb8 <GrandState_Verita+0x588>)
 800299e:	487f      	ldr	r0, [pc, #508]	; (8002b9c <GrandState_Verita+0x56c>)
 80029a0:	f008 fb86 	bl	800b0b0 <siprintf>
		ili9341_WriteString(20, 90, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80029a4:	4b83      	ldr	r3, [pc, #524]	; (8002bb4 <GrandState_Verita+0x584>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	9202      	str	r2, [sp, #8]
 80029aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ae:	9201      	str	r2, [sp, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	9200      	str	r2, [sp, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a79      	ldr	r2, [pc, #484]	; (8002b9c <GrandState_Verita+0x56c>)
 80029b8:	215a      	movs	r1, #90	; 0x5a
 80029ba:	2014      	movs	r0, #20
 80029bc:	f000 ffc9 	bl	8003952 <ili9341_WriteString>

		sprintf(TextDispBuffer,"P mW:");
 80029c0:	497e      	ldr	r1, [pc, #504]	; (8002bbc <GrandState_Verita+0x58c>)
 80029c2:	4876      	ldr	r0, [pc, #472]	; (8002b9c <GrandState_Verita+0x56c>)
 80029c4:	f008 fb74 	bl	800b0b0 <siprintf>
		ili9341_WriteString(20, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80029c8:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <GrandState_Verita+0x584>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	9202      	str	r2, [sp, #8]
 80029ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d2:	9201      	str	r2, [sp, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	9200      	str	r2, [sp, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a70      	ldr	r2, [pc, #448]	; (8002b9c <GrandState_Verita+0x56c>)
 80029dc:	2182      	movs	r1, #130	; 0x82
 80029de:	2014      	movs	r0, #20
 80029e0:	f000 ffb7 	bl	8003952 <ili9341_WriteString>

		sprintf(TextDispBuffer,"MCP");
 80029e4:	4976      	ldr	r1, [pc, #472]	; (8002bc0 <GrandState_Verita+0x590>)
 80029e6:	486d      	ldr	r0, [pc, #436]	; (8002b9c <GrandState_Verita+0x56c>)
 80029e8:	f008 fb62 	bl	800b0b0 <siprintf>
		ili9341_WriteString(220, 80, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 80029ec:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <GrandState_Verita+0x570>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	9202      	str	r2, [sp, #8]
 80029f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f6:	9201      	str	r2, [sp, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	9200      	str	r2, [sp, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a67      	ldr	r2, [pc, #412]	; (8002b9c <GrandState_Verita+0x56c>)
 8002a00:	2150      	movs	r1, #80	; 0x50
 8002a02:	20dc      	movs	r0, #220	; 0xdc
 8002a04:	f000 ffa5 	bl	8003952 <ili9341_WriteString>

		btn_k_cnt = 0; //// prevent over state jump
 8002a08:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <GrandState_Verita+0x594>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
		GrandState = monitor;
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <GrandState_Verita+0x598>)
 8002a10:	2206      	movs	r2, #6
 8002a12:	701a      	strb	r2, [r3, #0]
		break;
 8002a14:	e10c      	b.n	8002c30 <GrandState_Verita+0x600>


	case monitor:
		state_box_choice_n = 1;
 8002a16:	4b5f      	ldr	r3, [pc, #380]	; (8002b94 <GrandState_Verita+0x564>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
		simple_scr();
 8002a1c:	f7ff fc8c 	bl	8002338 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 8002a20:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <GrandState_Verita+0x574>)
 8002a22:	8a1b      	ldrh	r3, [r3, #16]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4969      	ldr	r1, [pc, #420]	; (8002bcc <GrandState_Verita+0x59c>)
 8002a28:	485c      	ldr	r0, [pc, #368]	; (8002b9c <GrandState_Verita+0x56c>)
 8002a2a:	f008 fb41 	bl	800b0b0 <siprintf>
		if(inata.Bus_V < 2000){
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <GrandState_Verita+0x574>)
 8002a30:	8a1b      	ldrh	r3, [r3, #16]
 8002a32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a36:	d20e      	bcs.n	8002a56 <GrandState_Verita+0x426>
			ili9341_WriteString(100, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <GrandState_Verita+0x570>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	9202      	str	r2, [sp, #8]
 8002a3e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	9200      	str	r2, [sp, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <GrandState_Verita+0x56c>)
 8002a4c:	2132      	movs	r1, #50	; 0x32
 8002a4e:	2064      	movs	r0, #100	; 0x64
 8002a50:	f000 ff7f 	bl	8003952 <ili9341_WriteString>
 8002a54:	e00d      	b.n	8002a72 <GrandState_Verita+0x442>
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8002a56:	4b52      	ldr	r3, [pc, #328]	; (8002ba0 <GrandState_Verita+0x570>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	9202      	str	r2, [sp, #8]
 8002a5c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	9200      	str	r2, [sp, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <GrandState_Verita+0x56c>)
 8002a6a:	2132      	movs	r1, #50	; 0x32
 8002a6c:	2064      	movs	r0, #100	; 0x64
 8002a6e:	f000 ff70 	bl	8003952 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <GrandState_Verita+0x5a0>)
 8002a74:	8a1b      	ldrh	r3, [r3, #16]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4954      	ldr	r1, [pc, #336]	; (8002bcc <GrandState_Verita+0x59c>)
 8002a7a:	4848      	ldr	r0, [pc, #288]	; (8002b9c <GrandState_Verita+0x56c>)
 8002a7c:	f008 fb18 	bl	800b0b0 <siprintf>
				if(inatb.Bus_V < 2000){
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <GrandState_Verita+0x5a0>)
 8002a82:	8a1b      	ldrh	r3, [r3, #16]
 8002a84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a88:	d20e      	bcs.n	8002aa8 <GrandState_Verita+0x478>
					ili9341_WriteString(100, 70, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002a8a:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <GrandState_Verita+0x570>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	9202      	str	r2, [sp, #8]
 8002a90:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a94:	9201      	str	r2, [sp, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3f      	ldr	r2, [pc, #252]	; (8002b9c <GrandState_Verita+0x56c>)
 8002a9e:	2146      	movs	r1, #70	; 0x46
 8002aa0:	2064      	movs	r0, #100	; 0x64
 8002aa2:	f000 ff56 	bl	8003952 <ili9341_WriteString>
 8002aa6:	e00d      	b.n	8002ac4 <GrandState_Verita+0x494>
				}else{
					ili9341_WriteString(100, 70, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <GrandState_Verita+0x570>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	9202      	str	r2, [sp, #8]
 8002aae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ab2:	9201      	str	r2, [sp, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	9200      	str	r2, [sp, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <GrandState_Verita+0x56c>)
 8002abc:	2146      	movs	r1, #70	; 0x46
 8002abe:	2064      	movs	r0, #100	; 0x64
 8002ac0:	f000 ff47 	bl	8003952 <ili9341_WriteString>
				}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <GrandState_Verita+0x574>)
 8002ac6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002aca:	461a      	mov	r2, r3
 8002acc:	493f      	ldr	r1, [pc, #252]	; (8002bcc <GrandState_Verita+0x59c>)
 8002ace:	4833      	ldr	r0, [pc, #204]	; (8002b9c <GrandState_Verita+0x56c>)
 8002ad0:	f008 faee 	bl	800b0b0 <siprintf>
		ili9341_WriteString(100, 90, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <GrandState_Verita+0x570>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	9202      	str	r2, [sp, #8]
 8002ada:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <GrandState_Verita+0x56c>)
 8002ae8:	215a      	movs	r1, #90	; 0x5a
 8002aea:	2064      	movs	r0, #100	; 0x64
 8002aec:	f000 ff31 	bl	8003952 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <GrandState_Verita+0x5a0>)
 8002af2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002af6:	461a      	mov	r2, r3
 8002af8:	4934      	ldr	r1, [pc, #208]	; (8002bcc <GrandState_Verita+0x59c>)
 8002afa:	4828      	ldr	r0, [pc, #160]	; (8002b9c <GrandState_Verita+0x56c>)
 8002afc:	f008 fad8 	bl	800b0b0 <siprintf>
		ili9341_WriteString(100, 110, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <GrandState_Verita+0x570>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	9202      	str	r2, [sp, #8]
 8002b06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002b0a:	9201      	str	r2, [sp, #4]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	9200      	str	r2, [sp, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <GrandState_Verita+0x56c>)
 8002b14:	216e      	movs	r1, #110	; 0x6e
 8002b16:	2064      	movs	r0, #100	; 0x64
 8002b18:	f000 ff1b 	bl	8003952 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%.2f", inata.POWER);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <GrandState_Verita+0x574>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fd19 	bl	8000558 <__aeabi_f2d>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	492a      	ldr	r1, [pc, #168]	; (8002bd4 <GrandState_Verita+0x5a4>)
 8002b2c:	481b      	ldr	r0, [pc, #108]	; (8002b9c <GrandState_Verita+0x56c>)
 8002b2e:	f008 fabf 	bl	800b0b0 <siprintf>
		ili9341_WriteString(100, 130, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <GrandState_Verita+0x570>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	9202      	str	r2, [sp, #8]
 8002b38:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	9200      	str	r2, [sp, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <GrandState_Verita+0x56c>)
 8002b46:	2182      	movs	r1, #130	; 0x82
 8002b48:	2064      	movs	r0, #100	; 0x64
 8002b4a:	f000 ff02 	bl	8003952 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%.2f", inatb.POWER);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <GrandState_Verita+0x5a0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fd00 	bl	8000558 <__aeabi_f2d>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	491d      	ldr	r1, [pc, #116]	; (8002bd4 <GrandState_Verita+0x5a4>)
 8002b5e:	480f      	ldr	r0, [pc, #60]	; (8002b9c <GrandState_Verita+0x56c>)
 8002b60:	f008 faa6 	bl	800b0b0 <siprintf>
		ili9341_WriteString(100, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <GrandState_Verita+0x570>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002b6e:	9201      	str	r2, [sp, #4]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	9200      	str	r2, [sp, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <GrandState_Verita+0x56c>)
 8002b78:	2196      	movs	r1, #150	; 0x96
 8002b7a:	2064      	movs	r0, #100	; 0x64
 8002b7c:	f000 fee9 	bl	8003952 <ili9341_WriteString>
//				mcp_read.raw[6],mcp_read.raw[7]);
//		ili9341_FillRect(110, 50, 30, 110, cl_BLACK);
//		ili9341_WriteStringNoBG(110, 50, TextDispBuffer, Font12, cl_YELLOW);


		ili9341_FillRect(220, 100, 30, 90, cl_BLACK);
 8002b80:	2300      	movs	r3, #0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	235a      	movs	r3, #90	; 0x5a
 8002b86:	221e      	movs	r2, #30
 8002b88:	2164      	movs	r1, #100	; 0x64
 8002b8a:	20dc      	movs	r0, #220	; 0xdc
 8002b8c:	f000 fd5a 	bl	8003644 <ili9341_FillRect>
		for(register int t = 0; t < 7; t++){
 8002b90:	2400      	movs	r4, #0
 8002b92:	e03d      	b.n	8002c10 <GrandState_Verita+0x5e0>
 8002b94:	20000014 	.word	0x20000014
 8002b98:	0800d75c 	.word	0x0800d75c
 8002b9c:	200004b0 	.word	0x200004b0
 8002ba0:	20000024 	.word	0x20000024
 8002ba4:	2000058c 	.word	0x2000058c
 8002ba8:	0800d770 	.word	0x0800d770
 8002bac:	2000001c 	.word	0x2000001c
 8002bb0:	0800d77c 	.word	0x0800d77c
 8002bb4:	2000002c 	.word	0x2000002c
 8002bb8:	0800d784 	.word	0x0800d784
 8002bbc:	0800d78c 	.word	0x0800d78c
 8002bc0:	0800d794 	.word	0x0800d794
 8002bc4:	20000628 	.word	0x20000628
 8002bc8:	20000006 	.word	0x20000006
 8002bcc:	0800d798 	.word	0x0800d798
 8002bd0:	200005a4 	.word	0x200005a4
 8002bd4:	0800d79c 	.word	0x0800d79c
			sprintf(TextDispBuffer,"%d",mcp_read.raw[t]);
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <GrandState_Verita+0x608>)
 8002bda:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <GrandState_Verita+0x60c>)
 8002be2:	4817      	ldr	r0, [pc, #92]	; (8002c40 <GrandState_Verita+0x610>)
 8002be4:	f008 fa64 	bl	800b0b0 <siprintf>
		ili9341_WriteStringNoBG(220, 100 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 8002be8:	b2a3      	uxth	r3, r4
 8002bea:	461a      	mov	r2, r3
 8002bec:	0052      	lsls	r2, r2, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3364      	adds	r3, #100	; 0x64
 8002bf6:	b299      	uxth	r1, r3
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <GrandState_Verita+0x614>)
 8002bfa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	9200      	str	r2, [sp, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <GrandState_Verita+0x610>)
 8002c08:	20dc      	movs	r0, #220	; 0xdc
 8002c0a:	f000 feef 	bl	80039ec <ili9341_WriteStringNoBG>
		for(register int t = 0; t < 7; t++){
 8002c0e:	3401      	adds	r4, #1
 8002c10:	2c06      	cmp	r4, #6
 8002c12:	dde1      	ble.n	8002bd8 <GrandState_Verita+0x5a8>





		if(btn_k_cnt){ //// Back to lobby
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <GrandState_Verita+0x618>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <GrandState_Verita+0x5fe>
			GrandState = pre_lobby;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <GrandState_Verita+0x61c>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
			btn_k_cnt = 0;
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <GrandState_Verita+0x618>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002c28:	e001      	b.n	8002c2e <GrandState_Verita+0x5fe>
		break; // lobby
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <GrandState_Verita+0x600>
		break;
 8002c2e:	bf00      	nop
	}
}
 8002c30:	bf00      	nop
 8002c32:	3704      	adds	r7, #4
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	200005bc 	.word	0x200005bc
 8002c3c:	0800d7a4 	.word	0x0800d7a4
 8002c40:	200004b0 	.word	0x200004b0
 8002c44:	2000001c 	.word	0x2000001c
 8002c48:	20000628 	.word	0x20000628
 8002c4c:	20000006 	.word	0x20000006

08002c50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c60:	d107      	bne.n	8002c72 <HAL_GPIO_EXTI_Callback+0x22>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		flagc_bz = 12;
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c64:	220c      	movs	r2, #12
 8002c66:	701a      	strb	r2, [r3, #0]
		buzzr.flag = 12;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8002c6e:	f7ff fc69 	bl	8002544 <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;
		}

	if(GPIO_Pin == GPIO_PIN_7){
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d105      	bne.n	8002c84 <HAL_GPIO_EXTI_Callback+0x34>
		btn_k_cnt++;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c82:	701a      	strb	r2, [r3, #0]
	}
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000060c 	.word	0x2000060c
 8002c90:	20000610 	.word	0x20000610
 8002c94:	20000628 	.word	0x20000628

08002c98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d106      	bne.n	8002cb6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002cb0:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 8002cb2:	f7ff fc47 	bl	8002544 <buzzer_scream_cnt>
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000033c 	.word	0x2000033c
 8002cc4:	20000608 	.word	0x20000608

08002cc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	//counter++;
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <Error_Handler+0x8>
	...

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_MspInit+0x4c>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x4c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d26:	2007      	movs	r0, #7
 8002d28:	f001 fbca 	bl	80044c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_I2C_MspInit+0xa4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d13c      	bne.n	8002dd4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_I2C_MspInit+0xa8>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <HAL_I2C_MspInit+0xa8>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_I2C_MspInit+0xa8>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d7c:	2312      	movs	r3, #18
 8002d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d88:	2304      	movs	r3, #4
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	4619      	mov	r1, r3
 8002d92:	4814      	ldr	r0, [pc, #80]	; (8002de4 <HAL_I2C_MspInit+0xac>)
 8002d94:	f001 ffe6 	bl	8004d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_I2C_MspInit+0xa8>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_I2C_MspInit+0xa8>)
 8002da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002da6:	6413      	str	r3, [r2, #64]	; 0x40
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_I2C_MspInit+0xa8>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	201f      	movs	r0, #31
 8002dba:	f001 fb8c 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002dbe:	201f      	movs	r0, #31
 8002dc0:	f001 fba5 	bl	800450e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2020      	movs	r0, #32
 8002dca:	f001 fb84 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002dce:	2020      	movs	r0, #32
 8002dd0:	f001 fb9d 	bl	800450e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40005400 	.word	0x40005400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020400 	.word	0x40020400

08002de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_SPI_MspInit+0x84>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12c      	bne.n	8002e64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_SPI_MspInit+0x88>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_SPI_MspInit+0x88>)
 8002e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_SPI_MspInit+0x88>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_SPI_MspInit+0x88>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_SPI_MspInit+0x88>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_SPI_MspInit+0x88>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e42:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e54:	2306      	movs	r3, #6
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <HAL_SPI_MspInit+0x8c>)
 8002e60:	f001 ff80 	bl	8004d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	3728      	adds	r7, #40	; 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40003c00 	.word	0x40003c00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020800 	.word	0x40020800

08002e78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_TIM_Encoder_MspInit+0x84>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12b      	bne.n	8002ef2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ed2:	23c0      	movs	r3, #192	; 0xc0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	4805      	ldr	r0, [pc, #20]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002eee:	f001 ff39 	bl	8004d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	3728      	adds	r7, #40	; 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_TIM_Base_MspInit+0x48>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d115      	bne.n	8002f46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_TIM_Base_MspInit+0x4c>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_TIM_Base_MspInit+0x4c>)
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_TIM_Base_MspInit+0x4c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2019      	movs	r0, #25
 8002f3c:	f001 facb 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f40:	2019      	movs	r0, #25
 8002f42:	f001 fae4 	bl	800450e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6b      	ldr	r2, [pc, #428]	; (8003124 <HAL_UART_MspInit+0x1cc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d135      	bne.n	8002fe6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
 8002f7e:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a69      	ldr	r2, [pc, #420]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002f84:	f043 0310 	orr.w	r3, r3, #16
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a62      	ldr	r2, [pc, #392]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b60      	ldr	r3, [pc, #384]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4857      	ldr	r0, [pc, #348]	; (800312c <HAL_UART_MspInit+0x1d4>)
 8002fd0:	f001 fec8 	bl	8004d64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2025      	movs	r0, #37	; 0x25
 8002fda:	f001 fa7c 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fde:	2025      	movs	r0, #37	; 0x25
 8002fe0:	f001 fa95 	bl	800450e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002fe4:	e09a      	b.n	800311c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a51      	ldr	r2, [pc, #324]	; (8003130 <HAL_UART_MspInit+0x1d8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d12c      	bne.n	800304a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	4a4b      	ldr	r2, [pc, #300]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a44      	ldr	r2, [pc, #272]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003028:	230c      	movs	r3, #12
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003034:	2303      	movs	r3, #3
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003038:	2307      	movs	r3, #7
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	483a      	ldr	r0, [pc, #232]	; (800312c <HAL_UART_MspInit+0x1d4>)
 8003044:	f001 fe8e 	bl	8004d64 <HAL_GPIO_Init>
}
 8003048:	e068      	b.n	800311c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART6)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a39      	ldr	r2, [pc, #228]	; (8003134 <HAL_UART_MspInit+0x1dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d163      	bne.n	800311c <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	6453      	str	r3, [r2, #68]	; 0x44
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_UART_MspInit+0x1d0>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800308c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800309e:	2308      	movs	r3, #8
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a6:	4619      	mov	r1, r3
 80030a8:	4820      	ldr	r0, [pc, #128]	; (800312c <HAL_UART_MspInit+0x1d4>)
 80030aa:	f001 fe5b 	bl	8004d64 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_UART_MspInit+0x1e4>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030b6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80030ba:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ce:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80030f0:	4811      	ldr	r0, [pc, #68]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 80030f2:	f001 fa27 	bl	8004544 <HAL_DMA_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80030fc:	f7ff fdee 	bl	8002cdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <HAL_UART_MspInit+0x1e0>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	2047      	movs	r0, #71	; 0x47
 8003112:	f001 f9e0 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003116:	2047      	movs	r0, #71	; 0x47
 8003118:	f001 f9f9 	bl	800450e <HAL_NVIC_EnableIRQ>
}
 800311c:	bf00      	nop
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40011000 	.word	0x40011000
 8003128:	40023800 	.word	0x40023800
 800312c:	40020000 	.word	0x40020000
 8003130:	40004400 	.word	0x40004400
 8003134:	40011400 	.word	0x40011400
 8003138:	20000450 	.word	0x20000450
 800313c:	40026428 	.word	0x40026428

08003140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <NMI_Handler+0x4>

08003146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800314a:	e7fe      	b.n	800314a <HardFault_Handler+0x4>

0800314c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <MemManage_Handler+0x4>

08003152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <BusFault_Handler+0x4>

08003158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <UsageFault_Handler+0x4>

0800315e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800318c:	f001 f884 	bl	8004298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003198:	2080      	movs	r0, #128	; 0x80
 800319a:	f001 ff9b 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031aa:	f005 fde8 	bl	8008d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000033c 	.word	0x2000033c

080031b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <I2C1_EV_IRQHandler+0x10>)
 80031be:	f002 fc05 	bl	80059cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000248 	.word	0x20000248

080031cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <I2C1_ER_IRQHandler+0x10>)
 80031d2:	f002 fd6c 	bl	8005cae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000248 	.word	0x20000248

080031e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <USART1_IRQHandler+0x10>)
 80031e6:	f006 f9d5 	bl	8009594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000384 	.word	0x20000384

080031f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031fc:	f001 ff6a 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <DMA2_Stream1_IRQHandler+0x10>)
 800320a:	f001 fb33 	bl	8004874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000450 	.word	0x20000450

08003218 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <USART6_IRQHandler+0x10>)
 800321e:	f006 f9b9 	bl	8009594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000040c 	.word	0x2000040c

0800322c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
	return 1;
 8003230:	2301      	movs	r3, #1
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <_kill>:

int _kill(int pid, int sig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003246:	f007 fa97 	bl	800a778 <__errno>
 800324a:	4603      	mov	r3, r0
 800324c:	2216      	movs	r2, #22
 800324e:	601a      	str	r2, [r3, #0]
	return -1;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <_exit>:

void _exit (int status)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ffe7 	bl	800323c <_kill>
	while (1) {}		/* Make sure we hang here */
 800326e:	e7fe      	b.n	800326e <_exit+0x12>

08003270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e00a      	b.n	8003298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003282:	f3af 8000 	nop.w
 8003286:	4601      	mov	r1, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	b2ca      	uxtb	r2, r1
 8003290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	dbf0      	blt.n	8003282 <_read+0x12>
	}

return len;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e009      	b.n	80032d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	60ba      	str	r2, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbf1      	blt.n	80032bc <_write+0x12>
	}
	return len;
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_close>:

int _close(int file)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	return -1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330a:	605a      	str	r2, [r3, #4]
	return 0;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_isatty>:

int _isatty(int file)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
	return 1;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	return 0;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <_sbrk+0x5c>)
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <_sbrk+0x60>)
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <_sbrk+0x64>)
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <_sbrk+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800337c:	f007 f9fc 	bl	800a778 <__errno>
 8003380:	4603      	mov	r3, r0
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	e009      	b.n	80033a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <_sbrk+0x64>)
 800339c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20020000 	.word	0x20020000
 80033ac:	00000400 	.word	0x00000400
 80033b0:	2000063c 	.word	0x2000063c
 80033b4:	20000658 	.word	0x20000658

080033b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <SystemInit+0x20>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <SystemInit+0x20>)
 80033c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f000 fdc6 	bl	8003f72 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80033e6:	2011      	movs	r0, #17
 80033e8:	f000 fe4a 	bl	8004080 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80033f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8003406:	23f0      	movs	r3, #240	; 0xf0
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800341a:	4b52      	ldr	r3, [pc, #328]	; (8003564 <ili9341_Init+0x150>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8003426:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <ili9341_Init+0x150>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4b4c      	ldr	r3, [pc, #304]	; (8003564 <ili9341_Init+0x150>)
 8003432:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <ili9341_Init+0x150>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <ili9341_Init+0x30>
      LCD_IO_Init();
 8003440:	f000 fda2 	bl	8003f88 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8003444:	4b47      	ldr	r3, [pc, #284]	; (8003564 <ili9341_Init+0x150>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b45      	ldr	r3, [pc, #276]	; (8003564 <ili9341_Init+0x150>)
 8003450:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8003452:	200a      	movs	r0, #10
 8003454:	f000 fd82 	bl	8003f5c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8003458:	2001      	movs	r0, #1
 800345a:	f000 fe11 	bl	8004080 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800345e:	200a      	movs	r0, #10
 8003460:	f000 fd7c 	bl	8003f5c <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8003464:	2203      	movs	r2, #3
 8003466:	4940      	ldr	r1, [pc, #256]	; (8003568 <ili9341_Init+0x154>)
 8003468:	20ef      	movs	r0, #239	; 0xef
 800346a:	f000 fe77 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800346e:	2203      	movs	r2, #3
 8003470:	493e      	ldr	r1, [pc, #248]	; (800356c <ili9341_Init+0x158>)
 8003472:	20cf      	movs	r0, #207	; 0xcf
 8003474:	f000 fe72 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8003478:	2204      	movs	r2, #4
 800347a:	493d      	ldr	r1, [pc, #244]	; (8003570 <ili9341_Init+0x15c>)
 800347c:	20ed      	movs	r0, #237	; 0xed
 800347e:	f000 fe6d 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8003482:	2203      	movs	r2, #3
 8003484:	493b      	ldr	r1, [pc, #236]	; (8003574 <ili9341_Init+0x160>)
 8003486:	20e8      	movs	r0, #232	; 0xe8
 8003488:	f000 fe68 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800348c:	2205      	movs	r2, #5
 800348e:	493a      	ldr	r1, [pc, #232]	; (8003578 <ili9341_Init+0x164>)
 8003490:	20cb      	movs	r0, #203	; 0xcb
 8003492:	f000 fe63 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8003496:	2201      	movs	r2, #1
 8003498:	4938      	ldr	r1, [pc, #224]	; (800357c <ili9341_Init+0x168>)
 800349a:	20f7      	movs	r0, #247	; 0xf7
 800349c:	f000 fe5e 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 80034a0:	2202      	movs	r2, #2
 80034a2:	4937      	ldr	r1, [pc, #220]	; (8003580 <ili9341_Init+0x16c>)
 80034a4:	20ea      	movs	r0, #234	; 0xea
 80034a6:	f000 fe59 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80034aa:	2201      	movs	r2, #1
 80034ac:	4935      	ldr	r1, [pc, #212]	; (8003584 <ili9341_Init+0x170>)
 80034ae:	20c0      	movs	r0, #192	; 0xc0
 80034b0:	f000 fe54 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 80034b4:	2201      	movs	r2, #1
 80034b6:	4934      	ldr	r1, [pc, #208]	; (8003588 <ili9341_Init+0x174>)
 80034b8:	20c1      	movs	r0, #193	; 0xc1
 80034ba:	f000 fe4f 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 80034be:	2202      	movs	r2, #2
 80034c0:	4932      	ldr	r1, [pc, #200]	; (800358c <ili9341_Init+0x178>)
 80034c2:	20c5      	movs	r0, #197	; 0xc5
 80034c4:	f000 fe4a 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 80034c8:	2201      	movs	r2, #1
 80034ca:	4931      	ldr	r1, [pc, #196]	; (8003590 <ili9341_Init+0x17c>)
 80034cc:	20c7      	movs	r0, #199	; 0xc7
 80034ce:	f000 fe45 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80034d2:	2201      	movs	r2, #1
 80034d4:	492f      	ldr	r1, [pc, #188]	; (8003594 <ili9341_Init+0x180>)
 80034d6:	2037      	movs	r0, #55	; 0x37
 80034d8:	f000 fe40 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80034dc:	2201      	movs	r2, #1
 80034de:	492e      	ldr	r1, [pc, #184]	; (8003598 <ili9341_Init+0x184>)
 80034e0:	203a      	movs	r0, #58	; 0x3a
 80034e2:	f000 fe3b 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80034e6:	2202      	movs	r2, #2
 80034e8:	492c      	ldr	r1, [pc, #176]	; (800359c <ili9341_Init+0x188>)
 80034ea:	20b1      	movs	r0, #177	; 0xb1
 80034ec:	f000 fe36 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80034f0:	2203      	movs	r2, #3
 80034f2:	492b      	ldr	r1, [pc, #172]	; (80035a0 <ili9341_Init+0x18c>)
 80034f4:	20b6      	movs	r0, #182	; 0xb6
 80034f6:	f000 fe31 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80034fa:	2201      	movs	r2, #1
 80034fc:	4925      	ldr	r1, [pc, #148]	; (8003594 <ili9341_Init+0x180>)
 80034fe:	20f2      	movs	r0, #242	; 0xf2
 8003500:	f000 fe2c 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8003504:	2201      	movs	r2, #1
 8003506:	4927      	ldr	r1, [pc, #156]	; (80035a4 <ili9341_Init+0x190>)
 8003508:	2026      	movs	r0, #38	; 0x26
 800350a:	f000 fe27 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800350e:	220f      	movs	r2, #15
 8003510:	4925      	ldr	r1, [pc, #148]	; (80035a8 <ili9341_Init+0x194>)
 8003512:	20e0      	movs	r0, #224	; 0xe0
 8003514:	f000 fe22 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8003518:	220f      	movs	r2, #15
 800351a:	4924      	ldr	r1, [pc, #144]	; (80035ac <ili9341_Init+0x198>)
 800351c:	20e1      	movs	r0, #225	; 0xe1
 800351e:	f000 fe1d 	bl	800415c <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8003522:	2036      	movs	r0, #54	; 0x36
 8003524:	f000 fdac 	bl	8004080 <LCD_IO_WriteCmd8>
 8003528:	20e8      	movs	r0, #232	; 0xe8
 800352a:	f000 fdc7 	bl	80040bc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800352e:	2011      	movs	r0, #17
 8003530:	f000 fda6 	bl	8004080 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8003534:	200a      	movs	r0, #10
 8003536:	f000 fd11 	bl	8003f5c <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 800353a:	2300      	movs	r3, #0
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	23f0      	movs	r3, #240	; 0xf0
 8003540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003544:	2100      	movs	r1, #0
 8003546:	2000      	movs	r0, #0
 8003548:	f000 f87c 	bl	8003644 <ili9341_FillRect>
  LCD_Delay(10);
 800354c:	200a      	movs	r0, #10
 800354e:	f000 fd05 	bl	8003f5c <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8003552:	2029      	movs	r0, #41	; 0x29
 8003554:	f000 fd94 	bl	8004080 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8003558:	200a      	movs	r0, #10
 800355a:	f000 fcff 	bl	8003f5c <LCD_Delay>
}
 800355e:	bf00      	nop
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000640 	.word	0x20000640
 8003568:	0800d7a8 	.word	0x0800d7a8
 800356c:	0800d7ac 	.word	0x0800d7ac
 8003570:	0800d7b0 	.word	0x0800d7b0
 8003574:	0800d7b8 	.word	0x0800d7b8
 8003578:	0800d7bc 	.word	0x0800d7bc
 800357c:	0800d7c4 	.word	0x0800d7c4
 8003580:	0800d7c8 	.word	0x0800d7c8
 8003584:	0800d7cc 	.word	0x0800d7cc
 8003588:	0800d7d0 	.word	0x0800d7d0
 800358c:	0800d7d4 	.word	0x0800d7d4
 8003590:	0800d7d8 	.word	0x0800d7d8
 8003594:	0800d7dc 	.word	0x0800d7dc
 8003598:	0800d7e0 	.word	0x0800d7e0
 800359c:	0800d7e4 	.word	0x0800d7e4
 80035a0:	0800d7e8 	.word	0x0800d7e8
 80035a4:	0800d7ec 	.word	0x0800d7ec
 80035a8:	0800d7f0 	.word	0x0800d7f0
 80035ac:	0800d800 	.word	0x0800d800

080035b0 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
 80035ba:	460b      	mov	r3, r1
 80035bc:	80bb      	strh	r3, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80035c2:	202a      	movs	r0, #42	; 0x2a
 80035c4:	f000 fd5c 	bl	8004080 <LCD_IO_WriteCmd8>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fd73 	bl	80040bc <LCD_IO_WriteData8>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fd6e 	bl	80040bc <LCD_IO_WriteData8>
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd67 	bl	80040bc <LCD_IO_WriteData8>
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fd62 	bl	80040bc <LCD_IO_WriteData8>
 80035f8:	202b      	movs	r0, #43	; 0x2b
 80035fa:	f000 fd41 	bl	8004080 <LCD_IO_WriteCmd8>
 80035fe:	88bb      	ldrh	r3, [r7, #4]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	b29b      	uxth	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fd58 	bl	80040bc <LCD_IO_WriteData8>
 800360c:	88bb      	ldrh	r3, [r7, #4]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fd53 	bl	80040bc <LCD_IO_WriteData8>
 8003616:	88bb      	ldrh	r3, [r7, #4]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	b29b      	uxth	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fd4c 	bl	80040bc <LCD_IO_WriteData8>
 8003624:	88bb      	ldrh	r3, [r7, #4]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fd47 	bl	80040bc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800362e:	202c      	movs	r0, #44	; 0x2c
 8003630:	f000 fd26 	bl	8004080 <LCD_IO_WriteCmd8>
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fd56 	bl	80040e8 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4623      	mov	r3, r4
 8003654:	80fb      	strh	r3, [r7, #6]
 8003656:	4603      	mov	r3, r0
 8003658:	80bb      	strh	r3, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	807b      	strh	r3, [r7, #2]
 800365e:	4613      	mov	r3, r2
 8003660:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8003662:	202a      	movs	r0, #42	; 0x2a
 8003664:	f000 fd0c 	bl	8004080 <LCD_IO_WriteCmd8>
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd23 	bl	80040bc <LCD_IO_WriteData8>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd1e 	bl	80040bc <LCD_IO_WriteData8>
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	4413      	add	r3, r2
 8003686:	3b01      	subs	r3, #1
 8003688:	121b      	asrs	r3, r3, #8
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fd15 	bl	80040bc <LCD_IO_WriteData8>
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	4413      	add	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fd0a 	bl	80040bc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80036a8:	202b      	movs	r0, #43	; 0x2b
 80036aa:	f000 fce9 	bl	8004080 <LCD_IO_WriteCmd8>
 80036ae:	88bb      	ldrh	r3, [r7, #4]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fd00 	bl	80040bc <LCD_IO_WriteData8>
 80036bc:	88bb      	ldrh	r3, [r7, #4]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fcfb 	bl	80040bc <LCD_IO_WriteData8>
 80036c6:	88ba      	ldrh	r2, [r7, #4]
 80036c8:	883b      	ldrh	r3, [r7, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	3b01      	subs	r3, #1
 80036ce:	121b      	asrs	r3, r3, #8
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fcf2 	bl	80040bc <LCD_IO_WriteData8>
 80036d8:	88bb      	ldrh	r3, [r7, #4]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	883b      	ldrh	r3, [r7, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fce7 	bl	80040bc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	883a      	ldrh	r2, [r7, #0]
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	8b3b      	ldrh	r3, [r7, #24]
 80036fa:	4619      	mov	r1, r3
 80036fc:	202c      	movs	r0, #44	; 0x2c
 80036fe:	f000 fd09 	bl	8004114 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}

0800370a <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 800370a:	b082      	sub	sp, #8
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	603a      	str	r2, [r7, #0]
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
 800371a:	460b      	mov	r3, r1
 800371c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003726:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003730:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003734:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003738:	eeb0 0a47 	vmov.f32	s0, s14
 800373c:	f009 ff62 	bl	800d604 <ceilf>
 8003740:	eef0 7a40 	vmov.f32	s15, s0
 8003744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003748:	ee17 3a90 	vmov	r3, s15
 800374c:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	3b01      	subs	r3, #1
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	2280      	movs	r2, #128	; 0x80
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	e060      	b.n	8003824 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e024      	b.n	80037b6 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 800376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	7812      	ldrb	r2, [r2, #0]
 8003772:	3a20      	subs	r2, #32
 8003774:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003776:	fb01 f202 	mul.w	r2, r1, r2
 800377a:	6979      	ldr	r1, [r7, #20]
 800377c:	fb02 f101 	mul.w	r1, r2, r1
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	fb00 f202 	mul.w	r2, r0, r2
 8003788:	4411      	add	r1, r2
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	440a      	add	r2, r1
 800378e:	4413      	add	r3, r2
 8003790:	7819      	ldrb	r1, [r3, #0]
 8003792:	f107 020c 	add.w	r2, r7, #12
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	460a      	mov	r2, r1
 800379c:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	f107 010c 	add.w	r1, r7, #12
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	440a      	add	r2, r1
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	dbd6      	blt.n	800376c <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e027      	b.n	8003814 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80037c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00e      	beq.n	80037f0 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	4413      	add	r3, r2
 80037da:	b298      	uxth	r0, r3
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	88bb      	ldrh	r3, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7ff fee1 	bl	80035b0 <ili9341_WritePixel>
 80037ee:	e00e      	b.n	800380e <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	4413      	add	r3, r2
 80037f8:	b298      	uxth	r0, r3
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	88bb      	ldrh	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003808:	4619      	mov	r1, r3
 800380a:	f7ff fed1 	bl	80035b0 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3301      	adds	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003816:	461a      	mov	r2, r3
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4293      	cmp	r3, r2
 800381c:	dbd2      	blt.n	80037c4 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	3301      	adds	r3, #1
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003826:	461a      	mov	r2, r3
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	4293      	cmp	r3, r2
 800382c:	db99      	blt.n	8003762 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800383a:	b002      	add	sp, #8
 800383c:	4770      	bx	lr

0800383e <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 800383e:	b082      	sub	sp, #8
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	603a      	str	r2, [r7, #0]
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
 800384a:	4603      	mov	r3, r0
 800384c:	80fb      	strh	r3, [r7, #6]
 800384e:	460b      	mov	r3, r1
 8003850:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 800385a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003864:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003868:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800386c:	eeb0 0a47 	vmov.f32	s0, s14
 8003870:	f009 fec8 	bl	800d604 <ceilf>
 8003874:	eef0 7a40 	vmov.f32	s15, s0
 8003878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800387c:	ee17 3a90 	vmov	r3, s15
 8003880:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3b01      	subs	r3, #1
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	e050      	b.n	8003938 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e024      	b.n	80038ea <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	3a20      	subs	r2, #32
 80038a8:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80038aa:	fb01 f202 	mul.w	r2, r1, r2
 80038ae:	6979      	ldr	r1, [r7, #20]
 80038b0:	fb02 f101 	mul.w	r1, r2, r1
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	fb00 f202 	mul.w	r2, r0, r2
 80038bc:	4411      	add	r1, r2
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	440a      	add	r2, r1
 80038c2:	4413      	add	r3, r2
 80038c4:	7819      	ldrb	r1, [r3, #0]
 80038c6:	f107 020c 	add.w	r2, r7, #12
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	460a      	mov	r2, r1
 80038d0:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	f107 010c 	add.w	r1, r7, #12
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	440a      	add	r2, r1
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	4413      	add	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbd6      	blt.n	80038a0 <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e017      	b.n	8003928 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	b29a      	uxth	r2, r3
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	4413      	add	r3, r2
 800390e:	b298      	uxth	r0, r3
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	b29a      	uxth	r2, r3
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	b29b      	uxth	r3, r3
 800391a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800391c:	4619      	mov	r1, r3
 800391e:	f7ff fe47 	bl	80035b0 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3301      	adds	r3, #1
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800392a:	461a      	mov	r2, r3
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	4293      	cmp	r3, r2
 8003930:	dbe2      	blt.n	80038f8 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	3301      	adds	r3, #1
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800393a:	461a      	mov	r2, r3
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	4293      	cmp	r3, r2
 8003940:	dba9      	blt.n	8003896 <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	3728      	adds	r7, #40	; 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800394e:	b002      	add	sp, #8
 8003950:	4770      	bx	lr

08003952 <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003952:	b082      	sub	sp, #8
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af04      	add	r7, sp, #16
 800395a:	603a      	str	r2, [r7, #0]
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
 8003962:	460b      	mov	r3, r1
 8003964:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8003966:	f7ff fd4c 	bl	8003402 <ili9341_GetLcdPixelHeight>
 800396a:	4603      	mov	r3, r0
 800396c:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 800396e:	f7ff fd3f 	bl	80033f0 <ili9341_GetLcdPixelWidth>
 8003972:	4603      	mov	r3, r0
 8003974:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8003976:	e02c      	b.n	80039d2 <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	8c3a      	ldrh	r2, [r7, #32]
 800397c:	441a      	add	r2, r3
 800397e:	89bb      	ldrh	r3, [r7, #12]
 8003980:	429a      	cmp	r2, r3
 8003982:	db13      	blt.n	80039ac <ili9341_WriteString+0x5a>
			Xpo = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8003988:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800398a:	88bb      	ldrh	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8003990:	88bb      	ldrh	r3, [r7, #4]
 8003992:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003994:	441a      	add	r2, r3
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	429a      	cmp	r2, r3
 800399a:	da1f      	bge.n	80039dc <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d103      	bne.n	80039ac <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	3301      	adds	r3, #1
 80039a8:	603b      	str	r3, [r7, #0]
				continue;
 80039aa:	e012      	b.n	80039d2 <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 80039ac:	88b9      	ldrh	r1, [r7, #4]
 80039ae:	88f8      	ldrh	r0, [r7, #6]
 80039b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80039b2:	9302      	str	r3, [sp, #8]
 80039b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	f7ff fea3 	bl	800370a <ili9341_WriteChar>
		Xpo += fonto.Width;
 80039c4:	8c3a      	ldrh	r2, [r7, #32]
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	4413      	add	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
		strr++;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	603b      	str	r3, [r7, #0]
	while(*strr){
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ce      	bne.n	8003978 <ili9341_WriteString+0x26>
	}
}
 80039da:	e000      	b.n	80039de <ili9341_WriteString+0x8c>
				break;
 80039dc:	bf00      	nop
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039e8:	b002      	add	sp, #8
 80039ea:	4770      	bx	lr

080039ec <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 80039ec:	b082      	sub	sp, #8
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	603a      	str	r2, [r7, #0]
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	4603      	mov	r3, r0
 80039fa:	80fb      	strh	r3, [r7, #6]
 80039fc:	460b      	mov	r3, r1
 80039fe:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8003a00:	f7ff fcff 	bl	8003402 <ili9341_GetLcdPixelHeight>
 8003a04:	4603      	mov	r3, r0
 8003a06:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8003a08:	f7ff fcf2 	bl	80033f0 <ili9341_GetLcdPixelWidth>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8003a10:	e02a      	b.n	8003a68 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	8c3a      	ldrh	r2, [r7, #32]
 8003a16:	441a      	add	r2, r3
 8003a18:	89bb      	ldrh	r3, [r7, #12]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	db13      	blt.n	8003a46 <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8003a22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003a24:	88bb      	ldrh	r3, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8003a2a:	88bb      	ldrh	r3, [r7, #4]
 8003a2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003a2e:	441a      	add	r2, r3
 8003a30:	89fb      	ldrh	r3, [r7, #14]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	da1d      	bge.n	8003a72 <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d103      	bne.n	8003a46 <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	603b      	str	r3, [r7, #0]
				continue;
 8003a44:	e010      	b.n	8003a68 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8003a46:	88b9      	ldrh	r1, [r7, #4]
 8003a48:	88f8      	ldrh	r0, [r7, #6]
 8003a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	f7ff fef2 	bl	800383e <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8003a5a:	8c3a      	ldrh	r2, [r7, #32]
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4413      	add	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
		strr++;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	603b      	str	r3, [r7, #0]
	while(*strr){
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1d0      	bne.n	8003a12 <ili9341_WriteStringNoBG+0x26>
	}
}
 8003a70:	e000      	b.n	8003a74 <ili9341_WriteStringNoBG+0x88>
				break;
 8003a72:	bf00      	nop
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a7e:	b002      	add	sp, #8
 8003a80:	4770      	bx	lr
	...

08003a84 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a94:	1dfb      	adds	r3, r7, #7
 8003a96:	015b      	lsls	r3, r3, #5
 8003a98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003a9c:	f023 031f 	bic.w	r3, r3, #31
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	331c      	adds	r3, #28
 8003aa8:	4a53      	ldr	r2, [pc, #332]	; (8003bf8 <LcdWrite8+0x174>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003aae:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <LcdWrite8+0x178>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <LcdWrite8+0x178>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003ac8:	f023 031f 	bic.w	r3, r3, #31
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <LcdWrite8+0x174>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003ada:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <LcdWrite8+0x178>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <LcdWrite8+0x178>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003aec:	1dfb      	adds	r3, r7, #7
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003af4:	f023 031f 	bic.w	r3, r3, #31
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003afe:	3314      	adds	r3, #20
 8003b00:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <LcdWrite8+0x174>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <LcdWrite8+0x178>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <LcdWrite8+0x178>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	015b      	lsls	r3, r3, #5
 8003b1c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003b20:	f023 031f 	bic.w	r3, r3, #31
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	3310      	adds	r3, #16
 8003b2c:	4a32      	ldr	r2, [pc, #200]	; (8003bf8 <LcdWrite8+0x174>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b32:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <LcdWrite8+0x178>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <LcdWrite8+0x178>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8003b3e:	1dfb      	adds	r3, r7, #7
 8003b40:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b44:	1dfb      	adds	r3, r7, #7
 8003b46:	015b      	lsls	r3, r3, #5
 8003b48:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003b4c:	f023 031f 	bic.w	r3, r3, #31
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b56:	330c      	adds	r3, #12
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <LcdWrite8+0x174>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <LcdWrite8+0x178>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <LcdWrite8+0x178>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8003b6a:	1dfb      	adds	r3, r7, #7
 8003b6c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	015b      	lsls	r3, r3, #5
 8003b74:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003b78:	f023 031f 	bic.w	r3, r3, #31
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b82:	3308      	adds	r3, #8
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <LcdWrite8+0x174>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <LcdWrite8+0x178>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <LcdWrite8+0x178>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8003b96:	1dfb      	adds	r3, r7, #7
 8003b98:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b9c:	1dfb      	adds	r3, r7, #7
 8003b9e:	015b      	lsls	r3, r3, #5
 8003ba0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003ba4:	f023 031f 	bic.w	r3, r3, #31
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <LcdWrite8+0x174>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <LcdWrite8+0x178>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <LcdWrite8+0x178>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003bc8:	1dfb      	adds	r3, r7, #7
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003bd0:	f023 031f 	bic.w	r3, r3, #31
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003bda:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <LcdWrite8+0x174>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <LcdWrite8+0x178>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <LcdWrite8+0x178>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	4241028c 	.word	0x4241028c
 8003bfc:	42408280 	.word	0x42408280

08003c00 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8003c0a:	1dbb      	adds	r3, r7, #6
 8003c0c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	015b      	lsls	r3, r3, #5
 8003c14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003c18:	f023 031f 	bic.w	r3, r3, #31
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003c22:	333c      	adds	r3, #60	; 0x3c
 8003c24:	4aab      	ldr	r2, [pc, #684]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003c2a:	4bab      	ldr	r3, [pc, #684]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	4ba9      	ldr	r3, [pc, #676]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	015b      	lsls	r3, r3, #5
 8003c40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003c44:	f023 031f 	bic.w	r3, r3, #31
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	3338      	adds	r3, #56	; 0x38
 8003c50:	4aa0      	ldr	r2, [pc, #640]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003c56:	4ba0      	ldr	r3, [pc, #640]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	4b9e      	ldr	r3, [pc, #632]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003c68:	1dbb      	adds	r3, r7, #6
 8003c6a:	015b      	lsls	r3, r3, #5
 8003c6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003c70:	f023 031f 	bic.w	r3, r3, #31
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	3334      	adds	r3, #52	; 0x34
 8003c7c:	4a95      	ldr	r2, [pc, #596]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003c82:	4b95      	ldr	r3, [pc, #596]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	4b93      	ldr	r3, [pc, #588]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8003c8e:	1dbb      	adds	r3, r7, #6
 8003c90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003c94:	1dbb      	adds	r3, r7, #6
 8003c96:	015b      	lsls	r3, r3, #5
 8003c98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003c9c:	f023 031f 	bic.w	r3, r3, #31
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	3330      	adds	r3, #48	; 0x30
 8003ca8:	4a8a      	ldr	r2, [pc, #552]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003cae:	4b8a      	ldr	r3, [pc, #552]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003cc0:	1dbb      	adds	r3, r7, #6
 8003cc2:	015b      	lsls	r3, r3, #5
 8003cc4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003cc8:	f023 031f 	bic.w	r3, r3, #31
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	332c      	adds	r3, #44	; 0x2c
 8003cd4:	4a7f      	ldr	r2, [pc, #508]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003cda:	4b7f      	ldr	r3, [pc, #508]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8003ce6:	1dbb      	adds	r3, r7, #6
 8003ce8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003cec:	1dbb      	adds	r3, r7, #6
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003cf4:	f023 031f 	bic.w	r3, r3, #31
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	3328      	adds	r3, #40	; 0x28
 8003d00:	4a74      	ldr	r2, [pc, #464]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003d06:	4b74      	ldr	r3, [pc, #464]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	4b72      	ldr	r3, [pc, #456]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8003d12:	1dbb      	adds	r3, r7, #6
 8003d14:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003d18:	1dbb      	adds	r3, r7, #6
 8003d1a:	015b      	lsls	r3, r3, #5
 8003d1c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003d20:	f023 031f 	bic.w	r3, r3, #31
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	3324      	adds	r3, #36	; 0x24
 8003d2c:	4a69      	ldr	r2, [pc, #420]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003d32:	4b69      	ldr	r3, [pc, #420]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8003d3e:	1dbb      	adds	r3, r7, #6
 8003d40:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003d44:	1dbb      	adds	r3, r7, #6
 8003d46:	015b      	lsls	r3, r3, #5
 8003d48:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003d4c:	f023 031f 	bic.w	r3, r3, #31
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003d56:	3320      	adds	r3, #32
 8003d58:	4a5e      	ldr	r2, [pc, #376]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003d5e:	4b5e      	ldr	r3, [pc, #376]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003d70:	1dbb      	adds	r3, r7, #6
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003d78:	f023 031f 	bic.w	r3, r3, #31
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003d82:	331c      	adds	r3, #28
 8003d84:	4a53      	ldr	r2, [pc, #332]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8003d96:	1dbb      	adds	r3, r7, #6
 8003d98:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003d9c:	1dbb      	adds	r3, r7, #6
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003da4:	f023 031f 	bic.w	r3, r3, #31
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003dae:	3318      	adds	r3, #24
 8003db0:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003db6:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003dc8:	1dbb      	adds	r3, r7, #6
 8003dca:	015b      	lsls	r3, r3, #5
 8003dcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003dd0:	f023 031f 	bic.w	r3, r3, #31
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003dda:	3314      	adds	r3, #20
 8003ddc:	4a3d      	ldr	r2, [pc, #244]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8003dee:	1dbb      	adds	r3, r7, #6
 8003df0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003df4:	1dbb      	adds	r3, r7, #6
 8003df6:	015b      	lsls	r3, r3, #5
 8003df8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003dfc:	f023 031f 	bic.w	r3, r3, #31
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e06:	3310      	adds	r3, #16
 8003e08:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e0e:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003e20:	1dbb      	adds	r3, r7, #6
 8003e22:	015b      	lsls	r3, r3, #5
 8003e24:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e28:	f023 031f 	bic.w	r3, r3, #31
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e32:	330c      	adds	r3, #12
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8003e46:	1dbb      	adds	r3, r7, #6
 8003e48:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003e4c:	1dbb      	adds	r3, r7, #6
 8003e4e:	015b      	lsls	r3, r3, #5
 8003e50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e54:	f023 031f 	bic.w	r3, r3, #31
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	3308      	adds	r3, #8
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8003e72:	1dbb      	adds	r3, r7, #6
 8003e74:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003e78:	1dbb      	adds	r3, r7, #6
 8003e7a:	015b      	lsls	r3, r3, #5
 8003e7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e80:	f023 031f 	bic.w	r3, r3, #31
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ea4:	1dbb      	adds	r3, r7, #6
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003eac:	f023 031f 	bic.w	r3, r3, #31
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <LcdWrite16+0x2d4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <LcdWrite16+0x2d8>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	4241028c 	.word	0x4241028c
 8003ed8:	42408280 	.word	0x42408280

08003edc <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  while(Size--)
 8003ee8:	e00a      	b.n	8003f00 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fdc8 	bl	8003a84 <LcdWrite8>
    if(dinc)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	1e5a      	subs	r2, r3, #1
 8003f04:	60ba      	str	r2, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ef      	bne.n	8003eea <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8003f0a:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <LCD_IO_WriteMultiData8+0x3c>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	42410284 	.word	0x42410284

08003f1c <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while(Size--)
 8003f28:	e00a      	b.n	8003f40 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fe66 	bl	8003c00 <LcdWrite16>
    if(dinc)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1e5a      	subs	r2, r3, #1
 8003f44:	60ba      	str	r2, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ef      	bne.n	8003f2a <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8003f4a:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <LCD_IO_WriteMultiData16+0x3c>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	42410284 	.word	0x42410284

08003f5c <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f9b7 	bl	80042d8 <HAL_Delay>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8003f8c:	4b34      	ldr	r3, [pc, #208]	; (8004060 <LCD_IO_Init+0xd8>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4a33      	ldr	r2, [pc, #204]	; (8004060 <LCD_IO_Init+0xd8>)
 8003f92:	f043 0307 	orr.w	r3, r3, #7
 8003f96:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <LCD_IO_Init+0xdc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	4a30      	ldr	r2, [pc, #192]	; (8004064 <LCD_IO_Init+0xdc>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <LCD_IO_Init+0xdc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <LCD_IO_Init+0xdc>)
 8003fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb2:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <LCD_IO_Init+0xe0>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8003fba:	4b2c      	ldr	r3, [pc, #176]	; (800406c <LCD_IO_Init+0xe4>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <LCD_IO_Init+0xe8>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <LCD_IO_Init+0xec>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	4a29      	ldr	r2, [pc, #164]	; (8004074 <LCD_IO_Init+0xec>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <LCD_IO_Init+0xec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 030c 	bic.w	r3, r3, #12
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <LCD_IO_Init+0xec>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <LCD_IO_Init+0xec>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a22      	ldr	r2, [pc, #136]	; (8004074 <LCD_IO_Init+0xec>)
 8003fec:	f043 0303 	orr.w	r3, r3, #3
 8003ff0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <LCD_IO_Init+0xec>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <LCD_IO_Init+0xec>)
 8003ff8:	f043 030c 	orr.w	r3, r3, #12
 8003ffc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <LCD_IO_Init+0xf0>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <LCD_IO_Init+0xf0>)
 8004004:	f043 0303 	orr.w	r3, r3, #3
 8004008:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <LCD_IO_Init+0xec>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <LCD_IO_Init+0xec>)
 8004010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004014:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <LCD_IO_Init+0xf4>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <LCD_IO_Init+0xf0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 0303 	bic.w	r3, r3, #3
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <LCD_IO_Init+0xf0>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <LCD_IO_Init+0xec>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <LCD_IO_Init+0xec>)
 8004036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403a:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 800403c:	200a      	movs	r0, #10
 800403e:	f7ff ff8d 	bl	8003f5c <LCD_Delay>
  LCD_RST_ON;
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <LCD_IO_Init+0xe0>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8004048:	200a      	movs	r0, #10
 800404a:	f7ff ff87 	bl	8003f5c <LCD_Delay>
  LCD_RST_OFF;
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <LCD_IO_Init+0xe0>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8004054:	200a      	movs	r0, #10
 8004056:	f7ff ff81 	bl	8003f5c <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	40020000 	.word	0x40020000
 8004068:	42400290 	.word	0x42400290
 800406c:	42410280 	.word	0x42410280
 8004070:	42410284 	.word	0x42410284
 8004074:	40020800 	.word	0x40020800
 8004078:	40020400 	.word	0x40020400
 800407c:	42408280 	.word	0x42408280

08004080 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <LCD_IO_WriteCmd8+0x34>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <LCD_IO_WriteCmd8+0x38>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fcf3 	bl	8003a84 <LcdWrite8>
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <LCD_IO_WriteCmd8+0x38>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <LCD_IO_WriteCmd8+0x34>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	42410284 	.word	0x42410284
 80040b8:	42410280 	.word	0x42410280

080040bc <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <LCD_IO_WriteData8+0x28>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fcd8 	bl	8003a84 <LcdWrite8>
  LCD_CS_OFF;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <LCD_IO_WriteData8+0x28>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	42410284 	.word	0x42410284

080040e8 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <LCD_IO_WriteData16+0x28>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fd80 	bl	8003c00 <LcdWrite16>
  LCD_CS_OFF;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <LCD_IO_WriteData16+0x28>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	42410284 	.word	0x42410284

08004114 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	603a      	str	r2, [r7, #0]
 800411e:	71fb      	strb	r3, [r7, #7]
 8004120:	460b      	mov	r3, r1
 8004122:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fca6 	bl	8003a84 <LcdWrite8>
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	2200      	movs	r2, #0
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fee9 	bl	8003f1c <LCD_IO_WriteMultiData16>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	42410284 	.word	0x42410284
 8004158:	42410280 	.word	0x42410280

0800415c <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fc83 	bl	8003a84 <LcdWrite8>
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8004184:	2201      	movs	r2, #1
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68b8      	ldr	r0, [r7, #8]
 800418a:	f7ff fea7 	bl	8003edc <LCD_IO_WriteMultiData8>
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	42410284 	.word	0x42410284
 800419c:	42410280 	.word	0x42410280

080041a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80041a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041a4:	480d      	ldr	r0, [pc, #52]	; (80041dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041a6:	490e      	ldr	r1, [pc, #56]	; (80041e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041ac:	e002      	b.n	80041b4 <LoopCopyDataInit>

080041ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041b2:	3304      	adds	r3, #4

080041b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041b8:	d3f9      	bcc.n	80041ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041bc:	4c0b      	ldr	r4, [pc, #44]	; (80041ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80041be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041c0:	e001      	b.n	80041c6 <LoopFillZerobss>

080041c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041c4:	3204      	adds	r2, #4

080041c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041c8:	d3fb      	bcc.n	80041c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041ca:	f7ff f8f5 	bl	80033b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ce:	f006 fad9 	bl	800a784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041d2:	f7fd fb9d 	bl	8001910 <main>
  bx  lr    
 80041d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80041d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041e0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80041e4:	08019124 	.word	0x08019124
  ldr r2, =_sbss
 80041e8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80041ec:	20000658 	.word	0x20000658

080041f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f0:	e7fe      	b.n	80041f0 <ADC_IRQHandler>
	...

080041f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <HAL_Init+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <HAL_Init+0x40>)
 80041fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_Init+0x40>)
 800420a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <HAL_Init+0x40>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800421c:	2003      	movs	r0, #3
 800421e:	f000 f94f 	bl	80044c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004222:	2000      	movs	r0, #0
 8004224:	f000 f808 	bl	8004238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004228:	f7fe fd5e 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00

08004238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_InitTick+0x54>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_InitTick+0x58>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f967 	bl	800452a <HAL_SYSTICK_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e00e      	b.n	8004284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d80a      	bhi.n	8004282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800426c:	2200      	movs	r2, #0
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	f000 f92f 	bl	80044d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <HAL_InitTick+0x5c>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000018 	.word	0x20000018
 8004290:	20000040 	.word	0x20000040
 8004294:	2000003c 	.word	0x2000003c

08004298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_IncTick+0x20>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_IncTick+0x24>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_IncTick+0x24>)
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000040 	.word	0x20000040
 80042bc:	20000644 	.word	0x20000644

080042c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return uwTick;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_GetTick+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000644 	.word	0x20000644

080042d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff ffee 	bl	80042c0 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d005      	beq.n	80042fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_Delay+0x44>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042fe:	bf00      	nop
 8004300:	f7ff ffde 	bl	80042c0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	429a      	cmp	r2, r3
 800430e:	d8f7      	bhi.n	8004300 <HAL_Delay+0x28>
  {
  }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000040 	.word	0x20000040

08004320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800433c:	4013      	ands	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800434c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004352:	4a04      	ldr	r2, [pc, #16]	; (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60d3      	str	r3, [r2, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <__NVIC_GetPriorityGrouping+0x18>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 0307 	and.w	r3, r3, #7
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	2b00      	cmp	r3, #0
 8004394:	db0b      	blt.n	80043ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	4907      	ldr	r1, [pc, #28]	; (80043bc <__NVIC_EnableIRQ+0x38>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2001      	movs	r0, #1
 80043a6:	fa00 f202 	lsl.w	r2, r0, r2
 80043aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e100 	.word	0xe000e100

080043c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	db0a      	blt.n	80043ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	490c      	ldr	r1, [pc, #48]	; (800440c <__NVIC_SetPriority+0x4c>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	0112      	lsls	r2, r2, #4
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	440b      	add	r3, r1
 80043e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e8:	e00a      	b.n	8004400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4908      	ldr	r1, [pc, #32]	; (8004410 <__NVIC_SetPriority+0x50>)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	3b04      	subs	r3, #4
 80043f8:	0112      	lsls	r2, r2, #4
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	440b      	add	r3, r1
 80043fe:	761a      	strb	r2, [r3, #24]
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000e100 	.word	0xe000e100
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	; 0x24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f1c3 0307 	rsb	r3, r3, #7
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf28      	it	cs
 8004432:	2304      	movcs	r3, #4
 8004434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3304      	adds	r3, #4
 800443a:	2b06      	cmp	r3, #6
 800443c:	d902      	bls.n	8004444 <NVIC_EncodePriority+0x30>
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3b03      	subs	r3, #3
 8004442:	e000      	b.n	8004446 <NVIC_EncodePriority+0x32>
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	f04f 32ff 	mov.w	r2, #4294967295
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	401a      	ands	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800445c:	f04f 31ff 	mov.w	r1, #4294967295
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa01 f303 	lsl.w	r3, r1, r3
 8004466:	43d9      	mvns	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800446c:	4313      	orrs	r3, r2
         );
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3b01      	subs	r3, #1
 8004488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800448c:	d301      	bcc.n	8004492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448e:	2301      	movs	r3, #1
 8004490:	e00f      	b.n	80044b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <SysTick_Config+0x40>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b01      	subs	r3, #1
 8004498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449a:	210f      	movs	r1, #15
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	f7ff ff8e 	bl	80043c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <SysTick_Config+0x40>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <SysTick_Config+0x40>)
 80044ac:	2207      	movs	r2, #7
 80044ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	e000e010 	.word	0xe000e010

080044c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff29 	bl	8004320 <__NVIC_SetPriorityGrouping>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e8:	f7ff ff3e 	bl	8004368 <__NVIC_GetPriorityGrouping>
 80044ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	6978      	ldr	r0, [r7, #20]
 80044f4:	f7ff ff8e 	bl	8004414 <NVIC_EncodePriority>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff5d 	bl	80043c0 <__NVIC_SetPriority>
}
 8004506:	bf00      	nop
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff31 	bl	8004384 <__NVIC_EnableIRQ>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffa2 	bl	800447c <SysTick_Config>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7ff feb6 	bl	80042c0 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e099      	b.n	8004694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004580:	e00f      	b.n	80045a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004582:	f7ff fe9d 	bl	80042c0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b05      	cmp	r3, #5
 800458e:	d908      	bls.n	80045a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e078      	b.n	8004694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e8      	bne.n	8004582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_DMA_Init+0x158>)
 80045bc:	4013      	ands	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d107      	bne.n	800460c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	4313      	orrs	r3, r2
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b04      	cmp	r3, #4
 8004634:	d117      	bne.n	8004666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fb0f 	bl	8004c6c <DMA_CheckFifoParam>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004662:	2301      	movs	r3, #1
 8004664:	e016      	b.n	8004694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fac6 	bl	8004c00 <DMA_CalcBaseAndBitshift>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	223f      	movs	r2, #63	; 0x3f
 800467e:	409a      	lsls	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	f010803f 	.word	0xf010803f

080046a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Start_IT+0x26>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e040      	b.n	8004748 <HAL_DMA_Start_IT+0xa8>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d12f      	bne.n	800473a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa58 	bl	8004ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	223f      	movs	r2, #63	; 0x3f
 80046fa:	409a      	lsls	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0216 	orr.w	r2, r2, #22
 800470e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0208 	orr.w	r2, r2, #8
 8004726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e005      	b.n	8004746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004742:	2302      	movs	r3, #2
 8004744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004746:	7dfb      	ldrb	r3, [r7, #23]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800475e:	f7ff fdaf 	bl	80042c0 <HAL_GetTick>
 8004762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d008      	beq.n	8004782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e052      	b.n	8004828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0216 	bic.w	r2, r2, #22
 8004790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_DMA_Abort+0x62>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0208 	bic.w	r2, r2, #8
 80047c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d2:	e013      	b.n	80047fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d4:	f7ff fd74 	bl	80042c0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d90c      	bls.n	80047fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2203      	movs	r2, #3
 80047ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e015      	b.n	8004828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e4      	bne.n	80047d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	223f      	movs	r2, #63	; 0x3f
 8004810:	409a      	lsls	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d004      	beq.n	800484e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2280      	movs	r2, #128	; 0x80
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e00c      	b.n	8004868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2205      	movs	r2, #5
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004880:	4b8e      	ldr	r3, [pc, #568]	; (8004abc <HAL_DMA_IRQHandler+0x248>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a8e      	ldr	r2, [pc, #568]	; (8004ac0 <HAL_DMA_IRQHandler+0x24c>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0a9b      	lsrs	r3, r3, #10
 800488c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2208      	movs	r2, #8
 80048a0:	409a      	lsls	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01a      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0204 	bic.w	r2, r2, #4
 80048c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2208      	movs	r2, #8
 80048ce:	409a      	lsls	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	2201      	movs	r2, #1
 80048e6:	409a      	lsls	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	f043 0202 	orr.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	2204      	movs	r2, #4
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d012      	beq.n	800494c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2204      	movs	r2, #4
 800493a:	409a      	lsls	r2, r3
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	2210      	movs	r2, #16
 8004952:	409a      	lsls	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d043      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03c      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	2210      	movs	r2, #16
 8004970:	409a      	lsls	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d024      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
 80049a2:	e01f      	b.n	80049e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
 80049b4:	e016      	b.n	80049e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0208 	bic.w	r2, r2, #8
 80049d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	2220      	movs	r2, #32
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 808f 	beq.w	8004b14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8087 	beq.w	8004b14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d136      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0216 	bic.w	r2, r2, #22
 8004a2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <HAL_DMA_IRQHandler+0x1da>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0208 	bic.w	r2, r2, #8
 8004a5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	223f      	movs	r2, #63	; 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d07e      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
        }
        return;
 8004a8a:	e079      	b.n	8004b80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01d      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d031      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
 8004ab8:	e02c      	b.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
 8004aba:	bf00      	nop
 8004abc:	20000018 	.word	0x20000018
 8004ac0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d023      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
 8004ad4:	e01e      	b.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0210 	bic.w	r2, r2, #16
 8004af2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d032      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d022      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d307      	bcc.n	8004b5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f2      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x2cc>
 8004b5a:	e000      	b.n	8004b5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
 8004b7e:	e000      	b.n	8004b82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b80:	bf00      	nop
    }
  }
}
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b96:	b2db      	uxtb	r3, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d108      	bne.n	8004be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004be2:	e007      	b.n	8004bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3b10      	subs	r3, #16
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <DMA_CalcBaseAndBitshift+0x64>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c1a:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <DMA_CalcBaseAndBitshift+0x68>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d909      	bls.n	8004c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c40:	e007      	b.n	8004c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	aaaaaaab 	.word	0xaaaaaaab
 8004c68:	08018d34 	.word	0x08018d34

08004c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11f      	bne.n	8004cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d856      	bhi.n	8004d3a <DMA_CheckFifoParam+0xce>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <DMA_CheckFifoParam+0x28>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cb7 	.word	0x08004cb7
 8004c9c:	08004ca5 	.word	0x08004ca5
 8004ca0:	08004d3b 	.word	0x08004d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d046      	beq.n	8004d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb4:	e043      	b.n	8004d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cbe:	d140      	bne.n	8004d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc4:	e03d      	b.n	8004d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cce:	d121      	bne.n	8004d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d837      	bhi.n	8004d46 <DMA_CheckFifoParam+0xda>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <DMA_CheckFifoParam+0x70>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004cf3 	.word	0x08004cf3
 8004ce4:	08004ced 	.word	0x08004ced
 8004ce8:	08004d05 	.word	0x08004d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf0:	e030      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d025      	beq.n	8004d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d02:	e022      	b.n	8004d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d0c:	d11f      	bne.n	8004d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d12:	e01c      	b.n	8004d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d903      	bls.n	8004d22 <DMA_CheckFifoParam+0xb6>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d003      	beq.n	8004d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d20:	e018      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
      break;
 8004d26:	e015      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	e00b      	b.n	8004d52 <DMA_CheckFifoParam+0xe6>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e00a      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e008      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e006      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d46:	bf00      	nop
 8004d48:	e004      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d52:	bf00      	nop
    }
  } 
  
  return status; 
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop

08004d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e159      	b.n	8005034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d80:	2201      	movs	r2, #1
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	f040 8148 	bne.w	800502e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d005      	beq.n	8004db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d130      	bne.n	8004e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dec:	2201      	movs	r2, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 0201 	and.w	r2, r3, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d017      	beq.n	8004e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	2203      	movs	r2, #3
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d123      	bne.n	8004ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	08da      	lsrs	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3208      	adds	r2, #8
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	220f      	movs	r2, #15
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	08da      	lsrs	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3208      	adds	r2, #8
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80a2 	beq.w	800502e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	4b57      	ldr	r3, [pc, #348]	; (800504c <HAL_GPIO_Init+0x2e8>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	4a56      	ldr	r2, [pc, #344]	; (800504c <HAL_GPIO_Init+0x2e8>)
 8004ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8004efa:	4b54      	ldr	r3, [pc, #336]	; (800504c <HAL_GPIO_Init+0x2e8>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f06:	4a52      	ldr	r2, [pc, #328]	; (8005050 <HAL_GPIO_Init+0x2ec>)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4013      	ands	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a49      	ldr	r2, [pc, #292]	; (8005054 <HAL_GPIO_Init+0x2f0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d019      	beq.n	8004f66 <HAL_GPIO_Init+0x202>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a48      	ldr	r2, [pc, #288]	; (8005058 <HAL_GPIO_Init+0x2f4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_GPIO_Init+0x1fe>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a47      	ldr	r2, [pc, #284]	; (800505c <HAL_GPIO_Init+0x2f8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00d      	beq.n	8004f5e <HAL_GPIO_Init+0x1fa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a46      	ldr	r2, [pc, #280]	; (8005060 <HAL_GPIO_Init+0x2fc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <HAL_GPIO_Init+0x1f6>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a45      	ldr	r2, [pc, #276]	; (8005064 <HAL_GPIO_Init+0x300>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <HAL_GPIO_Init+0x1f2>
 8004f52:	2304      	movs	r3, #4
 8004f54:	e008      	b.n	8004f68 <HAL_GPIO_Init+0x204>
 8004f56:	2307      	movs	r3, #7
 8004f58:	e006      	b.n	8004f68 <HAL_GPIO_Init+0x204>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e004      	b.n	8004f68 <HAL_GPIO_Init+0x204>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e002      	b.n	8004f68 <HAL_GPIO_Init+0x204>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_GPIO_Init+0x204>
 8004f66:	2300      	movs	r3, #0
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	f002 0203 	and.w	r2, r2, #3
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	4093      	lsls	r3, r2
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f78:	4935      	ldr	r1, [pc, #212]	; (8005050 <HAL_GPIO_Init+0x2ec>)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	3302      	adds	r3, #2
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f86:	4b38      	ldr	r3, [pc, #224]	; (8005068 <HAL_GPIO_Init+0x304>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004faa:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <HAL_GPIO_Init+0x304>)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <HAL_GPIO_Init+0x304>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fd4:	4a24      	ldr	r2, [pc, #144]	; (8005068 <HAL_GPIO_Init+0x304>)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fda:	4b23      	ldr	r3, [pc, #140]	; (8005068 <HAL_GPIO_Init+0x304>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ffe:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <HAL_GPIO_Init+0x304>)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005004:	4b18      	ldr	r3, [pc, #96]	; (8005068 <HAL_GPIO_Init+0x304>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005028:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <HAL_GPIO_Init+0x304>)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	f67f aea2 	bls.w	8004d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40013800 	.word	0x40013800
 8005054:	40020000 	.word	0x40020000
 8005058:	40020400 	.word	0x40020400
 800505c:	40020800 	.word	0x40020800
 8005060:	40020c00 	.word	0x40020c00
 8005064:	40021000 	.word	0x40021000
 8005068:	40013c00 	.word	0x40013c00

0800506c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	4613      	mov	r3, r2
 800507a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800507c:	787b      	ldrb	r3, [r7, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005088:	e003      	b.n	8005092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	041a      	lsls	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050b0:	887a      	ldrh	r2, [r7, #2]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	041a      	lsls	r2, r3, #16
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	43d9      	mvns	r1, r3
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	400b      	ands	r3, r1
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fd fdac 	bl	8002c50 <HAL_GPIO_EXTI_Callback>
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013c00 	.word	0x40013c00

08005104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e12b      	b.n	800536e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fd fe04 	bl	8002d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005168:	f003 f8d6 	bl	8008318 <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4a81      	ldr	r2, [pc, #516]	; (8005378 <HAL_I2C_Init+0x274>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d807      	bhi.n	8005188 <HAL_I2C_Init+0x84>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a80      	ldr	r2, [pc, #512]	; (800537c <HAL_I2C_Init+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	bf94      	ite	ls
 8005180:	2301      	movls	r3, #1
 8005182:	2300      	movhi	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e006      	b.n	8005196 <HAL_I2C_Init+0x92>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a7d      	ldr	r2, [pc, #500]	; (8005380 <HAL_I2C_Init+0x27c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	bf94      	ite	ls
 8005190:	2301      	movls	r3, #1
 8005192:	2300      	movhi	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0e7      	b.n	800536e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a78      	ldr	r2, [pc, #480]	; (8005384 <HAL_I2C_Init+0x280>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a6a      	ldr	r2, [pc, #424]	; (8005378 <HAL_I2C_Init+0x274>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <HAL_I2C_Init+0xd4>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	e009      	b.n	80051ec <HAL_I2C_Init+0xe8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4a69      	ldr	r2, [pc, #420]	; (8005388 <HAL_I2C_Init+0x284>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	3301      	adds	r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	495c      	ldr	r1, [pc, #368]	; (8005378 <HAL_I2C_Init+0x274>)
 8005208:	428b      	cmp	r3, r1
 800520a:	d819      	bhi.n	8005240 <HAL_I2C_Init+0x13c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e59      	subs	r1, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fbb1 f3f3 	udiv	r3, r1, r3
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005220:	400b      	ands	r3, r1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_I2C_Init+0x138>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1e59      	subs	r1, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fbb1 f3f3 	udiv	r3, r1, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	e051      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800523c:	2304      	movs	r3, #4
 800523e:	e04f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <HAL_I2C_Init+0x168>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e58      	subs	r0, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e012      	b.n	8005292 <HAL_I2C_Init+0x18e>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e58      	subs	r0, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	0099      	lsls	r1, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_I2C_Init+0x196>
 8005296:	2301      	movs	r3, #1
 8005298:	e022      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_I2C_Init+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e58      	subs	r0, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	440b      	add	r3, r1
 80052b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052be:	e00f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1e58      	subs	r0, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	0099      	lsls	r1, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6809      	ldr	r1, [r1, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800530e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6911      	ldr	r1, [r2, #16]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	000186a0 	.word	0x000186a0
 800537c:	001e847f 	.word	0x001e847f
 8005380:	003d08ff 	.word	0x003d08ff
 8005384:	431bde83 	.word	0x431bde83
 8005388:	10624dd3 	.word	0x10624dd3

0800538c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053a6:	f7fe ff8b 	bl	80042c0 <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	f040 80d9 	bne.w	800556c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2319      	movs	r3, #25
 80053c0:	2201      	movs	r2, #1
 80053c2:	496d      	ldr	r1, [pc, #436]	; (8005578 <HAL_I2C_Mem_Write+0x1ec>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f002 f90d 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0cc      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_I2C_Mem_Write+0x56>
 80053de:	2302      	movs	r3, #2
 80053e0:	e0c5      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d007      	beq.n	8005408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2221      	movs	r2, #33	; 0x21
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a3a      	ldr	r2, [r7, #32]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a4d      	ldr	r2, [pc, #308]	; (800557c <HAL_I2C_Mem_Write+0x1f0>)
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544a:	88f8      	ldrh	r0, [r7, #6]
 800544c:	893a      	ldrh	r2, [r7, #8]
 800544e:	8979      	ldrh	r1, [r7, #10]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4603      	mov	r3, r0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f001 fe9c 	bl	8007198 <I2C_RequestMemoryWrite>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d052      	beq.n	800550c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e081      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f002 f98e 	bl	8007790 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06b      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d11b      	bne.n	800550c <HAL_I2C_Mem_Write+0x180>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d017      	beq.n	800550c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1aa      	bne.n	800546a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f002 f97a 	bl	8007812 <I2C_WaitOnBTFFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	2b04      	cmp	r3, #4
 800552a:	d107      	bne.n	800553c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e016      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	00100002 	.word	0x00100002
 800557c:	ffff0000 	.word	0xffff0000

08005580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800559a:	f7fe fe91 	bl	80042c0 <HAL_GetTick>
 800559e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	f040 8208 	bne.w	80059be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2319      	movs	r3, #25
 80055b4:	2201      	movs	r2, #1
 80055b6:	497b      	ldr	r1, [pc, #492]	; (80057a4 <HAL_I2C_Mem_Read+0x224>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f002 f813 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e1fb      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Mem_Read+0x56>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e1f4      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d007      	beq.n	80055fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2222      	movs	r2, #34	; 0x22
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800562c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a5b      	ldr	r2, [pc, #364]	; (80057a8 <HAL_I2C_Mem_Read+0x228>)
 800563c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800563e:	88f8      	ldrh	r0, [r7, #6]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4603      	mov	r3, r0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f001 fe38 	bl	80072c4 <I2C_RequestMemoryRead>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e1b0      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d113      	bne.n	800568e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e184      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	2b01      	cmp	r3, #1
 8005694:	d11b      	bne.n	80056ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e164      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d11b      	bne.n	800570e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	e144      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005724:	e138      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	2b03      	cmp	r3, #3
 800572c:	f200 80f1 	bhi.w	8005912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	2b01      	cmp	r3, #1
 8005736:	d123      	bne.n	8005780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f002 f8db 	bl	80078f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e139      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800577e:	e10b      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	2b02      	cmp	r3, #2
 8005786:	d14e      	bne.n	8005826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	2200      	movs	r2, #0
 8005790:	4906      	ldr	r1, [pc, #24]	; (80057ac <HAL_I2C_Mem_Read+0x22c>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f001 ff26 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e10e      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
 80057a2:	bf00      	nop
 80057a4:	00100002 	.word	0x00100002
 80057a8:	ffff0000 	.word	0xffff0000
 80057ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005824:	e0b8      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	2200      	movs	r2, #0
 800582e:	4966      	ldr	r1, [pc, #408]	; (80059c8 <HAL_I2C_Mem_Read+0x448>)
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f001 fed7 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0bf      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	2200      	movs	r2, #0
 800588a:	494f      	ldr	r1, [pc, #316]	; (80059c8 <HAL_I2C_Mem_Read+0x448>)
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f001 fea9 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e091      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005910:	e042      	b.n	8005998 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 ffee 	bl	80078f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e04c      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d118      	bne.n	8005998 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f aec2 	bne.w	8005726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	; 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	00010004 	.word	0x00010004

080059cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d003      	beq.n	8005a04 <HAL_I2C_EV_IRQHandler+0x38>
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	f040 80c1 	bne.w	8005b86 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <HAL_I2C_EV_IRQHandler+0x6e>
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a24:	d003      	beq.n	8005a2e <HAL_I2C_EV_IRQHandler+0x62>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2C_EV_IRQHandler+0x66>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_I2C_EV_IRQHandler+0x68>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f000 8132 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00c      	beq.n	8005a5e <HAL_I2C_EV_IRQHandler+0x92>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	0a5b      	lsrs	r3, r3, #9
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d006      	beq.n	8005a5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 ffd6 	bl	8007a02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fd83 	bl	8006562 <I2C_Master_SB>
 8005a5c:	e092      	b.n	8005b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	08db      	lsrs	r3, r3, #3
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0xb2>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	0a5b      	lsrs	r3, r3, #9
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fdf9 	bl	800666e <I2C_Master_ADD10>
 8005a7c:	e082      	b.n	8005b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0xd2>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fe13 	bl	80066c2 <I2C_Master_ADDR>
 8005a9c:	e072      	b.n	8005b84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	089b      	lsrs	r3, r3, #2
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d03b      	beq.n	8005b22 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab8:	f000 80f3 	beq.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f9f3 	bl	8005ecc <I2C_MasterTransmit_TXE>
 8005ae6:	e04d      	b.n	8005b84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80d6 	beq.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80cf 	beq.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b21      	cmp	r3, #33	; 0x21
 8005b08:	d103      	bne.n	8005b12 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa7a 	bl	8006004 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b10:	e0c7      	b.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	f040 80c4 	bne.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fae8 	bl	80060f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b20:	e0bf      	b.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b30:	f000 80b7 	beq.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	099b      	lsrs	r3, r3, #6
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00f      	beq.n	8005b60 <HAL_I2C_EV_IRQHandler+0x194>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	0a9b      	lsrs	r3, r3, #10
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <HAL_I2C_EV_IRQHandler+0x194>
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	089b      	lsrs	r3, r3, #2
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb5d 	bl	8006218 <I2C_MasterReceive_RXNE>
 8005b5e:	e011      	b.n	8005b84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 809a 	beq.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	0a5b      	lsrs	r3, r3, #9
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8093 	beq.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fc06 	bl	800638e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b82:	e08e      	b.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b84:	e08d      	b.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	e007      	b.n	8005ba8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <HAL_I2C_EV_IRQHandler+0x20e>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	0a5b      	lsrs	r3, r3, #9
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005bd0:	69b9      	ldr	r1, [r7, #24]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 ffc4 	bl	8006b60 <I2C_Slave_ADDR>
 8005bd8:	e066      	b.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <HAL_I2C_EV_IRQHandler+0x22e>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	0a5b      	lsrs	r3, r3, #9
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fffe 	bl	8006bf4 <I2C_Slave_STOPF>
 8005bf8:	e056      	b.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	2b21      	cmp	r3, #33	; 0x21
 8005bfe:	d002      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x23a>
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b29      	cmp	r3, #41	; 0x29
 8005c04:	d125      	bne.n	8005c52 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	09db      	lsrs	r3, r3, #7
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00f      	beq.n	8005c32 <HAL_I2C_EV_IRQHandler+0x266>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	0a9b      	lsrs	r3, r3, #10
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_I2C_EV_IRQHandler+0x266>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 feda 	bl	80069e4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c30:	e039      	b.n	8005ca6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	089b      	lsrs	r3, r3, #2
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d033      	beq.n	8005ca6 <HAL_I2C_EV_IRQHandler+0x2da>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	0a5b      	lsrs	r3, r3, #9
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d02d      	beq.n	8005ca6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 ff07 	bl	8006a5e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c50:	e029      	b.n	8005ca6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	099b      	lsrs	r3, r3, #6
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00f      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	0a9b      	lsrs	r3, r3, #10
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 ff12 	bl	8006aa0 <I2C_SlaveReceive_RXNE>
 8005c7c:	e014      	b.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d008      	beq.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 ff40 	bl	8006b1c <I2C_SlaveReceive_BTF>
 8005c9c:	e004      	b.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c9e:	bf00      	nop
 8005ca0:	e002      	b.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ca6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005ca8:	3720      	adds	r7, #32
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	; 0x28
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	0a1b      	lsrs	r3, r3, #8
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <HAL_I2C_ER_IRQHandler+0x4e>
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	0a5b      	lsrs	r3, r3, #9
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00e      	beq.n	8005d26 <HAL_I2C_ER_IRQHandler+0x78>
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	f043 0302 	orr.w	r3, r3, #2
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005d24:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	0a9b      	lsrs	r3, r3, #10
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d03f      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0x104>
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d039      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d3e:	7efb      	ldrb	r3, [r7, #27]
 8005d40:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d58:	7ebb      	ldrb	r3, [r7, #26]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d112      	bne.n	8005d84 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10f      	bne.n	8005d84 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b21      	cmp	r3, #33	; 0x21
 8005d68:	d008      	beq.n	8005d7c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	2b29      	cmp	r3, #41	; 0x29
 8005d6e:	d005      	beq.n	8005d7c <HAL_I2C_ER_IRQHandler+0xce>
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b28      	cmp	r3, #40	; 0x28
 8005d74:	d106      	bne.n	8005d84 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b21      	cmp	r3, #33	; 0x21
 8005d7a:	d103      	bne.n	8005d84 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 f869 	bl	8006e54 <I2C_Slave_AF>
 8005d82:	e016      	b.n	8005db2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d8c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d96:	7efb      	ldrb	r3, [r7, #27]
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d002      	beq.n	8005da2 <HAL_I2C_ER_IRQHandler+0xf4>
 8005d9c:	7efb      	ldrb	r3, [r7, #27]
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d107      	bne.n	8005db2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	0adb      	lsrs	r3, r3, #11
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_I2C_ER_IRQHandler+0x12e>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f043 0308 	orr.w	r3, r3, #8
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005dda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 f8a0 	bl	8006f34 <I2C_ITError>
  }
}
 8005df4:	bf00      	nop
 8005df6:	3728      	adds	r7, #40	; 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ee2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d150      	bne.n	8005f94 <I2C_MasterTransmit_TXE+0xc8>
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b21      	cmp	r3, #33	; 0x21
 8005ef6:	d14d      	bne.n	8005f94 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d01d      	beq.n	8005f3a <I2C_MasterTransmit_TXE+0x6e>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d01a      	beq.n	8005f3a <I2C_MasterTransmit_TXE+0x6e>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f0a:	d016      	beq.n	8005f3a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f1a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2211      	movs	r2, #17
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ff62 	bl	8005dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f38:	e060      	b.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f48:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f58:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d107      	bne.n	8005f84 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff7d 	bl	8005e7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f82:	e03b      	b.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ff35 	bl	8005dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f92:	e033      	b.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b21      	cmp	r3, #33	; 0x21
 8005f98:	d005      	beq.n	8005fa6 <I2C_MasterTransmit_TXE+0xda>
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d12d      	bne.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b22      	cmp	r3, #34	; 0x22
 8005fa4:	d12a      	bne.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d108      	bne.n	8005fc2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fbe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005fc0:	e01c      	b.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d103      	bne.n	8005fd6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f88e 	bl	80060f0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005fd4:	e012      	b.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ffa:	e7ff      	b.n	8005ffc <I2C_MasterTransmit_TXE+0x130>
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b21      	cmp	r3, #33	; 0x21
 800601c:	d164      	bne.n	80060e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800604c:	e04c      	b.n	80060e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d01d      	beq.n	8006090 <I2C_MasterTransmit_BTF+0x8c>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b20      	cmp	r3, #32
 8006058:	d01a      	beq.n	8006090 <I2C_MasterTransmit_BTF+0x8c>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006060:	d016      	beq.n	8006090 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006070:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2211      	movs	r2, #17
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff feb7 	bl	8005dfc <HAL_I2C_MasterTxCpltCallback>
}
 800608e:	e02b      	b.n	80060e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800609e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d107      	bne.n	80060da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fed2 	bl	8005e7c <HAL_I2C_MemTxCpltCallback>
}
 80060d8:	e006      	b.n	80060e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fe8a 	bl	8005dfc <HAL_I2C_MasterTxCpltCallback>
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006104:	2b00      	cmp	r3, #0
 8006106:	d11d      	bne.n	8006144 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10b      	bne.n	8006128 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006114:	b2da      	uxtb	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006126:	e073      	b.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612c:	b29b      	uxth	r3, r3
 800612e:	121b      	asrs	r3, r3, #8
 8006130:	b2da      	uxtb	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006142:	e065      	b.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006148:	2b01      	cmp	r3, #1
 800614a:	d10b      	bne.n	8006164 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006150:	b2da      	uxtb	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006162:	e055      	b.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006168:	2b02      	cmp	r3, #2
 800616a:	d151      	bne.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b22      	cmp	r3, #34	; 0x22
 8006170:	d10d      	bne.n	800618e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006180:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800618c:	e040      	b.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d015      	beq.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b21      	cmp	r3, #33	; 0x21
 800619c:	d112      	bne.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061c2:	e025      	b.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d120      	bne.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b21      	cmp	r3, #33	; 0x21
 80061d2:	d11d      	bne.n	8006210 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fe36 	bl	8005e7c <HAL_I2C_MemTxCpltCallback>
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b22      	cmp	r3, #34	; 0x22
 800622a:	f040 80ac 	bne.w	8006386 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b03      	cmp	r3, #3
 800623a:	d921      	bls.n	8006280 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b03      	cmp	r3, #3
 800626a:	f040 808c 	bne.w	8006386 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800627e:	e082      	b.n	8006386 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	2b02      	cmp	r3, #2
 8006286:	d075      	beq.n	8006374 <I2C_MasterReceive_RXNE+0x15c>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d002      	beq.n	8006294 <I2C_MasterReceive_RXNE+0x7c>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d16f      	bne.n	8006374 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fafd 	bl	8007894 <I2C_WaitOnSTOPRequestThroughIT>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d142      	bne.n	8006326 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d10a      	bne.n	8006310 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fdc1 	bl	8005e90 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800630e:	e03a      	b.n	8006386 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2212      	movs	r2, #18
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fd76 	bl	8005e10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006324:	e02f      	b.n	8006386 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006334:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff fd99 	bl	8005ea4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006372:	e008      	b.n	8006386 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006382:	605a      	str	r2, [r3, #4]
}
 8006384:	e7ff      	b.n	8006386 <I2C_MasterReceive_RXNE+0x16e>
 8006386:	bf00      	nop
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d11b      	bne.n	80063de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063dc:	e0bd      	b.n	800655a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d129      	bne.n	800643c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d00a      	beq.n	8006414 <I2C_MasterReceive_BTF+0x86>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d007      	beq.n	8006414 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800643a:	e08e      	b.n	800655a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d176      	bne.n	8006534 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d002      	beq.n	8006452 <I2C_MasterReceive_BTF+0xc4>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b10      	cmp	r3, #16
 8006450:	d108      	bne.n	8006464 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e019      	b.n	8006498 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b04      	cmp	r3, #4
 8006468:	d002      	beq.n	8006470 <I2C_MasterReceive_BTF+0xe2>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d108      	bne.n	8006482 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e00a      	b.n	8006498 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b10      	cmp	r3, #16
 8006486:	d007      	beq.n	8006498 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006496:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d10a      	bne.n	800651e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fcba 	bl	8005e90 <HAL_I2C_MemRxCpltCallback>
}
 800651c:	e01d      	b.n	800655a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2212      	movs	r2, #18
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff fc6f 	bl	8005e10 <HAL_I2C_MasterRxCpltCallback>
}
 8006532:	e012      	b.n	800655a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d117      	bne.n	80065a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800658e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006590:	e067      	b.n	8006662 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	b2da      	uxtb	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	611a      	str	r2, [r3, #16]
}
 80065a4:	e05d      	b.n	8006662 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ae:	d133      	bne.n	8006618 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b21      	cmp	r3, #33	; 0x21
 80065ba:	d109      	bne.n	80065d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065cc:	611a      	str	r2, [r3, #16]
 80065ce:	e008      	b.n	80065e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <I2C_Master_SB+0x92>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d032      	beq.n	8006662 <I2C_Master_SB+0x100>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d02d      	beq.n	8006662 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006614:	605a      	str	r2, [r3, #4]
}
 8006616:	e024      	b.n	8006662 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10e      	bne.n	800663e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	b29b      	uxth	r3, r3
 8006626:	11db      	asrs	r3, r3, #7
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0306 	and.w	r3, r3, #6
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f063 030f 	orn	r3, r3, #15
 8006634:	b2da      	uxtb	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	611a      	str	r2, [r3, #16]
}
 800663c:	e011      	b.n	8006662 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006642:	2b01      	cmp	r3, #1
 8006644:	d10d      	bne.n	8006662 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	b29b      	uxth	r3, r3
 800664c:	11db      	asrs	r3, r3, #7
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0306 	and.w	r3, r3, #6
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f063 030e 	orn	r3, r3, #14
 800665a:	b2da      	uxtb	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	611a      	str	r2, [r3, #16]
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	b2da      	uxtb	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <I2C_Master_ADD10+0x26>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <I2C_Master_ADD10+0x48>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b4:	605a      	str	r2, [r3, #4]
  }
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b091      	sub	sp, #68	; 0x44
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b22      	cmp	r3, #34	; 0x22
 80066ea:	f040 8169 	bne.w	80069c0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <I2C_Master_ADDR+0x54>
 80066f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d10b      	bne.n	8006716 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	633b      	str	r3, [r7, #48]	; 0x30
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	e160      	b.n	80069d8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671a:	2b00      	cmp	r3, #0
 800671c:	d11d      	bne.n	800675a <I2C_Master_ADDR+0x98>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006726:	d118      	bne.n	800675a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	651a      	str	r2, [r3, #80]	; 0x50
 8006758:	e13e      	b.n	80069d8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d113      	bne.n	800678c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006764:	2300      	movs	r3, #0
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e115      	b.n	80069b8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	f040 808a 	bne.w	80068ac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800679e:	d137      	bne.n	8006810 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d113      	bne.n	80067e8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d0:	2300      	movs	r3, #0
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	e0e7      	b.n	80069b8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e8:	2300      	movs	r3, #0
 80067ea:	623b      	str	r3, [r7, #32]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	623b      	str	r3, [r7, #32]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	623b      	str	r3, [r7, #32]
 80067fc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e0d3      	b.n	80069b8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	2b08      	cmp	r3, #8
 8006814:	d02e      	beq.n	8006874 <I2C_Master_ADDR+0x1b2>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	2b20      	cmp	r3, #32
 800681a:	d02b      	beq.n	8006874 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	2b12      	cmp	r3, #18
 8006820:	d102      	bne.n	8006828 <I2C_Master_ADDR+0x166>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2b01      	cmp	r3, #1
 8006826:	d125      	bne.n	8006874 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	2b04      	cmp	r3, #4
 800682c:	d00e      	beq.n	800684c <I2C_Master_ADDR+0x18a>
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	2b02      	cmp	r3, #2
 8006832:	d00b      	beq.n	800684c <I2C_Master_ADDR+0x18a>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	2b10      	cmp	r3, #16
 8006838:	d008      	beq.n	800684c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e007      	b.n	800685c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800685a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685c:	2300      	movs	r3, #0
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	e0a1      	b.n	80069b8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006882:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e085      	b.n	80069b8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d14d      	bne.n	8006952 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d016      	beq.n	80068ea <I2C_Master_ADDR+0x228>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d013      	beq.n	80068ea <I2C_Master_ADDR+0x228>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d010      	beq.n	80068ea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	e007      	b.n	80068fa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068f8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006908:	d117      	bne.n	800693a <I2C_Master_ADDR+0x278>
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006910:	d00b      	beq.n	800692a <I2C_Master_ADDR+0x268>
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	2b01      	cmp	r3, #1
 8006916:	d008      	beq.n	800692a <I2C_Master_ADDR+0x268>
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	2b08      	cmp	r3, #8
 800691c:	d005      	beq.n	800692a <I2C_Master_ADDR+0x268>
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b10      	cmp	r3, #16
 8006922:	d002      	beq.n	800692a <I2C_Master_ADDR+0x268>
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	2b20      	cmp	r3, #32
 8006928:	d107      	bne.n	800693a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006938:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	e032      	b.n	80069b8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006960:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006970:	d117      	bne.n	80069a2 <I2C_Master_ADDR+0x2e0>
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006978:	d00b      	beq.n	8006992 <I2C_Master_ADDR+0x2d0>
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	2b01      	cmp	r3, #1
 800697e:	d008      	beq.n	8006992 <I2C_Master_ADDR+0x2d0>
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	2b08      	cmp	r3, #8
 8006984:	d005      	beq.n	8006992 <I2C_Master_ADDR+0x2d0>
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2b10      	cmp	r3, #16
 800698a:	d002      	beq.n	8006992 <I2C_Master_ADDR+0x2d0>
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	2b20      	cmp	r3, #32
 8006990:	d107      	bne.n	80069a2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80069be:	e00b      	b.n	80069d8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	e7ff      	b.n	80069d8 <I2C_Master_ADDR+0x316>
 80069d8:	bf00      	nop
 80069da:	3744      	adds	r7, #68	; 0x44
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02b      	beq.n	8006a56 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d114      	bne.n	8006a56 <I2C_SlaveTransmit_TXE+0x72>
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b29      	cmp	r3, #41	; 0x29
 8006a30:	d111      	bne.n	8006a56 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2221      	movs	r2, #33	; 0x21
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2228      	movs	r2, #40	; 0x28
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff f9e7 	bl	8005e24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d011      	beq.n	8006a94 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d02c      	beq.n	8006b14 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d114      	bne.n	8006b14 <I2C_SlaveReceive_RXNE+0x74>
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b2a      	cmp	r3, #42	; 0x2a
 8006aee:	d111      	bne.n	8006b14 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2222      	movs	r2, #34	; 0x22
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2228      	movs	r2, #40	; 0x28
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff f992 	bl	8005e38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b7a:	2b28      	cmp	r3, #40	; 0x28
 8006b7c:	d127      	bne.n	8006bce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	089b      	lsrs	r3, r3, #2
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	09db      	lsrs	r3, r3, #7
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	81bb      	strh	r3, [r7, #12]
 8006bb0:	e002      	b.n	8006bb8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006bc0:	89ba      	ldrh	r2, [r7, #12]
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff f940 	bl	8005e4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bcc:	e00e      	b.n	8006bec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c14:	2300      	movs	r3, #0
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c50:	d172      	bne.n	8006d38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b22      	cmp	r3, #34	; 0x22
 8006c56:	d002      	beq.n	8006c5e <I2C_Slave_STOPF+0x6a>
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c5c:	d135      	bne.n	8006cca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f043 0204 	orr.w	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fd ff76 	bl	8004b88 <HAL_DMA_GetState>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d049      	beq.n	8006d36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	4a69      	ldr	r2, [pc, #420]	; (8006e4c <I2C_Slave_STOPF+0x258>)
 8006ca8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fd fdbe 	bl	8004830 <HAL_DMA_Abort_IT>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d03d      	beq.n	8006d36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cc8:	e035      	b.n	8006d36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f043 0204 	orr.w	r2, r3, #4
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd ff40 	bl	8004b88 <HAL_DMA_GetState>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d014      	beq.n	8006d38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	4a4e      	ldr	r2, [pc, #312]	; (8006e4c <I2C_Slave_STOPF+0x258>)
 8006d14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fd fd88 	bl	8004830 <HAL_DMA_Abort_IT>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	e000      	b.n	8006d38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03e      	beq.n	8006dc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d112      	bne.n	8006d76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d80:	2b40      	cmp	r3, #64	; 0x40
 8006d82:	d112      	bne.n	8006daa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	f043 0204 	orr.w	r2, r3, #4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8b3 	bl	8006f34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006dce:	e039      	b.n	8006e44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd4:	d109      	bne.n	8006dea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2228      	movs	r2, #40	; 0x28
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff f827 	bl	8005e38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b28      	cmp	r3, #40	; 0x28
 8006df4:	d111      	bne.n	8006e1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <I2C_Slave_STOPF+0x25c>)
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff f828 	bl	8005e68 <HAL_I2C_ListenCpltCallback>
}
 8006e18:	e014      	b.n	8006e44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	2b22      	cmp	r3, #34	; 0x22
 8006e20:	d002      	beq.n	8006e28 <I2C_Slave_STOPF+0x234>
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2b22      	cmp	r3, #34	; 0x22
 8006e26:	d10d      	bne.n	8006e44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fe fffa 	bl	8005e38 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	08007495 	.word	0x08007495
 8006e50:	ffff0000 	.word	0xffff0000

08006e54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d002      	beq.n	8006e76 <I2C_Slave_AF+0x22>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d129      	bne.n	8006eca <I2C_Slave_AF+0x76>
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b28      	cmp	r3, #40	; 0x28
 8006e7a:	d126      	bne.n	8006eca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a2c      	ldr	r2, [pc, #176]	; (8006f30 <I2C_Slave_AF+0xdc>)
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eaa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe ffd0 	bl	8005e68 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006ec8:	e02e      	b.n	8006f28 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b21      	cmp	r3, #33	; 0x21
 8006ece:	d126      	bne.n	8006f1e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a17      	ldr	r2, [pc, #92]	; (8006f30 <I2C_Slave_AF+0xdc>)
 8006ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2221      	movs	r2, #33	; 0x21
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006efa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f14:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fe ff84 	bl	8005e24 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f1c:	e004      	b.n	8006f28 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f26:	615a      	str	r2, [r3, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	ffff0000 	.word	0xffff0000

08006f34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b10      	cmp	r3, #16
 8006f50:	d002      	beq.n	8006f58 <I2C_ITError+0x24>
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d10a      	bne.n	8006f6e <I2C_ITError+0x3a>
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b22      	cmp	r3, #34	; 0x22
 8006f5c:	d107      	bne.n	8006f6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f74:	2b28      	cmp	r3, #40	; 0x28
 8006f76:	d107      	bne.n	8006f88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2228      	movs	r2, #40	; 0x28
 8006f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f86:	e015      	b.n	8006fb4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f96:	d00a      	beq.n	8006fae <I2C_ITError+0x7a>
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b60      	cmp	r3, #96	; 0x60
 8006f9c:	d007      	beq.n	8006fae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc2:	d162      	bne.n	800708a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d020      	beq.n	8007024 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	4a6a      	ldr	r2, [pc, #424]	; (8007190 <I2C_ITError+0x25c>)
 8006fe8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fd fc1e 	bl	8004830 <HAL_DMA_Abort_IT>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8089 	beq.w	800710e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800701e:	4610      	mov	r0, r2
 8007020:	4798      	blx	r3
 8007022:	e074      	b.n	800710e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	4a59      	ldr	r2, [pc, #356]	; (8007190 <I2C_ITError+0x25c>)
 800702a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd fbfd 	bl	8004830 <HAL_DMA_Abort_IT>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d068      	beq.n	800710e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d10b      	bne.n	8007062 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	e041      	b.n	800710e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b60      	cmp	r3, #96	; 0x60
 8007094:	d125      	bne.n	80070e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d10b      	bne.n	80070ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fe feec 	bl	8005eb8 <HAL_I2C_AbortCpltCallback>
 80070e0:	e015      	b.n	800710e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d10b      	bne.n	8007108 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691a      	ldr	r2, [r3, #16]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fe fecb 	bl	8005ea4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10e      	bne.n	800713c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800714a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007152:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b04      	cmp	r3, #4
 800715e:	d113      	bne.n	8007188 <I2C_ITError+0x254>
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b28      	cmp	r3, #40	; 0x28
 8007164:	d110      	bne.n	8007188 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <I2C_ITError+0x260>)
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fe fe70 	bl	8005e68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	08007495 	.word	0x08007495
 8007194:	ffff0000 	.word	0xffff0000

08007198 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	4608      	mov	r0, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	817b      	strh	r3, [r7, #10]
 80071aa:	460b      	mov	r3, r1
 80071ac:	813b      	strh	r3, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fa08 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00d      	beq.n	80071f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e8:	d103      	bne.n	80071f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e05f      	b.n	80072b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071f6:	897b      	ldrh	r3, [r7, #10]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	6a3a      	ldr	r2, [r7, #32]
 800720a:	492d      	ldr	r1, [pc, #180]	; (80072c0 <I2C_RequestMemoryWrite+0x128>)
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fa40 	bl	8007692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e04c      	b.n	80072b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007234:	6a39      	ldr	r1, [r7, #32]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 faaa 	bl	8007790 <I2C_WaitOnTXEFlagUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00d      	beq.n	800725e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	2b04      	cmp	r3, #4
 8007248:	d107      	bne.n	800725a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e02b      	b.n	80072b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d105      	bne.n	8007270 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007264:	893b      	ldrh	r3, [r7, #8]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	611a      	str	r2, [r3, #16]
 800726e:	e021      	b.n	80072b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007270:	893b      	ldrh	r3, [r7, #8]
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	b29b      	uxth	r3, r3
 8007276:	b2da      	uxtb	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800727e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007280:	6a39      	ldr	r1, [r7, #32]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fa84 	bl	8007790 <I2C_WaitOnTXEFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00d      	beq.n	80072aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	2b04      	cmp	r3, #4
 8007294:	d107      	bne.n	80072a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e005      	b.n	80072b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072aa:	893b      	ldrh	r3, [r7, #8]
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	00010002 	.word	0x00010002

080072c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	817b      	strh	r3, [r7, #10]
 80072d6:	460b      	mov	r3, r1
 80072d8:	813b      	strh	r3, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	2200      	movs	r2, #0
 8007306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f96a 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007324:	d103      	bne.n	800732e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800732c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e0aa      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007332:	897b      	ldrh	r3, [r7, #10]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	6a3a      	ldr	r2, [r7, #32]
 8007346:	4952      	ldr	r1, [pc, #328]	; (8007490 <I2C_RequestMemoryRead+0x1cc>)
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f9a2 	bl	8007692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e097      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800736e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007370:	6a39      	ldr	r1, [r7, #32]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fa0c 	bl	8007790 <I2C_WaitOnTXEFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2b04      	cmp	r3, #4
 8007384:	d107      	bne.n	8007396 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e076      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d105      	bne.n	80073ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073a0:	893b      	ldrh	r3, [r7, #8]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	611a      	str	r2, [r3, #16]
 80073aa:	e021      	b.n	80073f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073ac:	893b      	ldrh	r3, [r7, #8]
 80073ae:	0a1b      	lsrs	r3, r3, #8
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073bc:	6a39      	ldr	r1, [r7, #32]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f9e6 	bl	8007790 <I2C_WaitOnTXEFlagUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d107      	bne.n	80073e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e050      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	6a39      	ldr	r1, [r7, #32]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f9cb 	bl	8007790 <I2C_WaitOnTXEFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00d      	beq.n	800741c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	2b04      	cmp	r3, #4
 8007406:	d107      	bne.n	8007418 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007416:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e035      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800742a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	2200      	movs	r2, #0
 8007434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f8d3 	bl	80075e4 <I2C_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00d      	beq.n	8007460 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007452:	d103      	bne.n	800745c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800745a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e013      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007460:	897b      	ldrh	r3, [r7, #10]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f043 0301 	orr.w	r3, r3, #1
 8007468:	b2da      	uxtb	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	4906      	ldr	r1, [pc, #24]	; (8007490 <I2C_RequestMemoryRead+0x1cc>)
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 f90b 	bl	8007692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	00010002 	.word	0x00010002

08007494 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80074ae:	4b4b      	ldr	r3, [pc, #300]	; (80075dc <I2C_DMAAbort+0x148>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	08db      	lsrs	r3, r3, #3
 80074b4:	4a4a      	ldr	r2, [pc, #296]	; (80075e0 <I2C_DMAAbort+0x14c>)
 80074b6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ba:	0a1a      	lsrs	r2, r3, #8
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	00da      	lsls	r2, r3, #3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80074da:	e00a      	b.n	80074f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3b01      	subs	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d0ea      	beq.n	80074c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	2200      	movs	r2, #0
 8007500:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	2200      	movs	r2, #0
 8007510:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007520:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2200      	movs	r2, #0
 8007526:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	2200      	movs	r2, #0
 8007536:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	2200      	movs	r2, #0
 8007546:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b60      	cmp	r3, #96	; 0x60
 8007562:	d10e      	bne.n	8007582 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f7fe fc9c 	bl	8005eb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007580:	e027      	b.n	80075d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007588:	2b28      	cmp	r3, #40	; 0x28
 800758a:	d117      	bne.n	80075bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2228      	movs	r2, #40	; 0x28
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075ba:	e007      	b.n	80075cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2220      	movs	r2, #32
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80075cc:	6978      	ldr	r0, [r7, #20]
 80075ce:	f7fe fc69 	bl	8005ea4 <HAL_I2C_ErrorCallback>
}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000018 	.word	0x20000018
 80075e0:	14f8b589 	.word	0x14f8b589

080075e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075f4:	e025      	b.n	8007642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d021      	beq.n	8007642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fe:	f7fc fe5f 	bl	80042c0 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d302      	bcc.n	8007614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d116      	bne.n	8007642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f043 0220 	orr.w	r2, r3, #32
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e023      	b.n	800768a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d10d      	bne.n	8007668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	43da      	mvns	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4013      	ands	r3, r2
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	e00c      	b.n	8007682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	43da      	mvns	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4013      	ands	r3, r2
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf0c      	ite	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	2300      	movne	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	429a      	cmp	r2, r3
 8007686:	d0b6      	beq.n	80075f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
 800769e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076a0:	e051      	b.n	8007746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b0:	d123      	bne.n	80076fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f043 0204 	orr.w	r2, r3, #4
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e046      	b.n	8007788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d021      	beq.n	8007746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007702:	f7fc fddd 	bl	80042c0 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	d302      	bcc.n	8007718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d116      	bne.n	8007746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f043 0220 	orr.w	r2, r3, #32
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e020      	b.n	8007788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	0c1b      	lsrs	r3, r3, #16
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	d10c      	bne.n	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	43da      	mvns	r2, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4013      	ands	r3, r2
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2301      	movne	r3, #1
 8007764:	2300      	moveq	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	e00b      	b.n	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	43da      	mvns	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4013      	ands	r3, r2
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	bf14      	ite	ne
 800777c:	2301      	movne	r3, #1
 800777e:	2300      	moveq	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d18d      	bne.n	80076a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800779c:	e02d      	b.n	80077fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f900 	bl	80079a4 <I2C_IsAcknowledgeFailed>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e02d      	b.n	800780a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d021      	beq.n	80077fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f7fc fd83 	bl	80042c0 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d302      	bcc.n	80077cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d116      	bne.n	80077fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f043 0220 	orr.w	r2, r3, #32
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e007      	b.n	800780a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d1ca      	bne.n	800779e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800781e:	e02d      	b.n	800787c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f8bf 	bl	80079a4 <I2C_IsAcknowledgeFailed>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e02d      	b.n	800788c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d021      	beq.n	800787c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007838:	f7fc fd42 	bl	80042c0 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	429a      	cmp	r2, r3
 8007846:	d302      	bcc.n	800784e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d116      	bne.n	800787c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e007      	b.n	800788c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b04      	cmp	r3, #4
 8007888:	d1ca      	bne.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80078a0:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	08db      	lsrs	r3, r3, #3
 80078a6:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	0a1a      	lsrs	r2, r3, #8
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d107      	bne.n	80078d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f043 0220 	orr.w	r2, r3, #32
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e008      	b.n	80078e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e0:	d0e9      	beq.n	80078b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	20000018 	.word	0x20000018
 80078f4:	14f8b589 	.word	0x14f8b589

080078f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007904:	e042      	b.n	800798c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b10      	cmp	r3, #16
 8007912:	d119      	bne.n	8007948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0210 	mvn.w	r2, #16
 800791c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e029      	b.n	800799c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007948:	f7fc fcba 	bl	80042c0 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	f043 0220 	orr.w	r2, r3, #32
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e007      	b.n	800799c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d1b5      	bne.n	8007906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ba:	d11b      	bne.n	80079f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	f043 0204 	orr.w	r2, r3, #4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007a12:	d103      	bne.n	8007a1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007a1a:	e007      	b.n	8007a2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007a24:	d102      	bne.n	8007a2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e267      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d075      	beq.n	8007b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a56:	4b88      	ldr	r3, [pc, #544]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 030c 	and.w	r3, r3, #12
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d00c      	beq.n	8007a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a62:	4b85      	ldr	r3, [pc, #532]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d112      	bne.n	8007a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a6e:	4b82      	ldr	r3, [pc, #520]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a7a:	d10b      	bne.n	8007a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a7c:	4b7e      	ldr	r3, [pc, #504]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d05b      	beq.n	8007b40 <HAL_RCC_OscConfig+0x108>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d157      	bne.n	8007b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e242      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a9c:	d106      	bne.n	8007aac <HAL_RCC_OscConfig+0x74>
 8007a9e:	4b76      	ldr	r3, [pc, #472]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a75      	ldr	r2, [pc, #468]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e01d      	b.n	8007ae8 <HAL_RCC_OscConfig+0xb0>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ab4:	d10c      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x98>
 8007ab6:	4b70      	ldr	r3, [pc, #448]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a6f      	ldr	r2, [pc, #444]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	4b6d      	ldr	r3, [pc, #436]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a6c      	ldr	r2, [pc, #432]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e00b      	b.n	8007ae8 <HAL_RCC_OscConfig+0xb0>
 8007ad0:	4b69      	ldr	r3, [pc, #420]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a68      	ldr	r2, [pc, #416]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	4b66      	ldr	r3, [pc, #408]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a65      	ldr	r2, [pc, #404]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d013      	beq.n	8007b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af0:	f7fc fbe6 	bl	80042c0 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007af8:	f7fc fbe2 	bl	80042c0 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b64      	cmp	r3, #100	; 0x64
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e207      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0a:	4b5b      	ldr	r3, [pc, #364]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0f0      	beq.n	8007af8 <HAL_RCC_OscConfig+0xc0>
 8007b16:	e014      	b.n	8007b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b18:	f7fc fbd2 	bl	80042c0 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b20:	f7fc fbce 	bl	80042c0 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b64      	cmp	r3, #100	; 0x64
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e1f3      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b32:	4b51      	ldr	r3, [pc, #324]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0xe8>
 8007b3e:	e000      	b.n	8007b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d063      	beq.n	8007c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b4e:	4b4a      	ldr	r3, [pc, #296]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 030c 	and.w	r3, r3, #12
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b5a:	4b47      	ldr	r3, [pc, #284]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b62:	2b08      	cmp	r3, #8
 8007b64:	d11c      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b66:	4b44      	ldr	r3, [pc, #272]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d116      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b72:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_RCC_OscConfig+0x152>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d001      	beq.n	8007b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e1c7      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8a:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	4937      	ldr	r1, [pc, #220]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b9e:	e03a      	b.n	8007c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d020      	beq.n	8007bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ba8:	4b34      	ldr	r3, [pc, #208]	; (8007c7c <HAL_RCC_OscConfig+0x244>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bae:	f7fc fb87 	bl	80042c0 <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bb6:	f7fc fb83 	bl	80042c0 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e1a8      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bc8:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd4:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	4925      	ldr	r1, [pc, #148]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	600b      	str	r3, [r1, #0]
 8007be8:	e015      	b.n	8007c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <HAL_RCC_OscConfig+0x244>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fc fb66 	bl	80042c0 <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bf8:	f7fc fb62 	bl	80042c0 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e187      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d036      	beq.n	8007c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c2a:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <HAL_RCC_OscConfig+0x248>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c30:	f7fc fb46 	bl	80042c0 <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c38:	f7fc fb42 	bl	80042c0 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e167      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCC_OscConfig+0x240>)
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCC_OscConfig+0x200>
 8007c56:	e01b      	b.n	8007c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c58:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <HAL_RCC_OscConfig+0x248>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c5e:	f7fc fb2f 	bl	80042c0 <HAL_GetTick>
 8007c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c64:	e00e      	b.n	8007c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c66:	f7fc fb2b 	bl	80042c0 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d907      	bls.n	8007c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e150      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	42470000 	.word	0x42470000
 8007c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c84:	4b88      	ldr	r3, [pc, #544]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1ea      	bne.n	8007c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8097 	beq.w	8007dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ca2:	4b81      	ldr	r3, [pc, #516]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10f      	bne.n	8007cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
 8007cb2:	4b7d      	ldr	r3, [pc, #500]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	4a7c      	ldr	r2, [pc, #496]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cbe:	4b7a      	ldr	r3, [pc, #488]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc6:	60bb      	str	r3, [r7, #8]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cce:	4b77      	ldr	r3, [pc, #476]	; (8007eac <HAL_RCC_OscConfig+0x474>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d118      	bne.n	8007d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cda:	4b74      	ldr	r3, [pc, #464]	; (8007eac <HAL_RCC_OscConfig+0x474>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a73      	ldr	r2, [pc, #460]	; (8007eac <HAL_RCC_OscConfig+0x474>)
 8007ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ce6:	f7fc faeb 	bl	80042c0 <HAL_GetTick>
 8007cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cec:	e008      	b.n	8007d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cee:	f7fc fae7 	bl	80042c0 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e10c      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d00:	4b6a      	ldr	r3, [pc, #424]	; (8007eac <HAL_RCC_OscConfig+0x474>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0f0      	beq.n	8007cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d106      	bne.n	8007d22 <HAL_RCC_OscConfig+0x2ea>
 8007d14:	4b64      	ldr	r3, [pc, #400]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d18:	4a63      	ldr	r2, [pc, #396]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d1a:	f043 0301 	orr.w	r3, r3, #1
 8007d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d20:	e01c      	b.n	8007d5c <HAL_RCC_OscConfig+0x324>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d10c      	bne.n	8007d44 <HAL_RCC_OscConfig+0x30c>
 8007d2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	4a5e      	ldr	r2, [pc, #376]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d30:	f043 0304 	orr.w	r3, r3, #4
 8007d34:	6713      	str	r3, [r2, #112]	; 0x70
 8007d36:	4b5c      	ldr	r3, [pc, #368]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	4a5b      	ldr	r2, [pc, #364]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d3c:	f043 0301 	orr.w	r3, r3, #1
 8007d40:	6713      	str	r3, [r2, #112]	; 0x70
 8007d42:	e00b      	b.n	8007d5c <HAL_RCC_OscConfig+0x324>
 8007d44:	4b58      	ldr	r3, [pc, #352]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	4a57      	ldr	r2, [pc, #348]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d4a:	f023 0301 	bic.w	r3, r3, #1
 8007d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d50:	4b55      	ldr	r3, [pc, #340]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	4a54      	ldr	r2, [pc, #336]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d56:	f023 0304 	bic.w	r3, r3, #4
 8007d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d015      	beq.n	8007d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d64:	f7fc faac 	bl	80042c0 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d6a:	e00a      	b.n	8007d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d6c:	f7fc faa8 	bl	80042c0 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e0cb      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d82:	4b49      	ldr	r3, [pc, #292]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0ee      	beq.n	8007d6c <HAL_RCC_OscConfig+0x334>
 8007d8e:	e014      	b.n	8007dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d90:	f7fc fa96 	bl	80042c0 <HAL_GetTick>
 8007d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d96:	e00a      	b.n	8007dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d98:	f7fc fa92 	bl	80042c0 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e0b5      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dae:	4b3e      	ldr	r3, [pc, #248]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1ee      	bne.n	8007d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d105      	bne.n	8007dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dc0:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	4a38      	ldr	r2, [pc, #224]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80a1 	beq.w	8007f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dd6:	4b34      	ldr	r3, [pc, #208]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d05c      	beq.n	8007e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d141      	bne.n	8007e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dea:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <HAL_RCC_OscConfig+0x478>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df0:	f7fc fa66 	bl	80042c0 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df8:	f7fc fa62 	bl	80042c0 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e087      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e0a:	4b27      	ldr	r3, [pc, #156]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69da      	ldr	r2, [r3, #28]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	019b      	lsls	r3, r3, #6
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	061b      	lsls	r3, r3, #24
 8007e3a:	491b      	ldr	r1, [pc, #108]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e40:	4b1b      	ldr	r3, [pc, #108]	; (8007eb0 <HAL_RCC_OscConfig+0x478>)
 8007e42:	2201      	movs	r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e46:	f7fc fa3b 	bl	80042c0 <HAL_GetTick>
 8007e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e4c:	e008      	b.n	8007e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e4e:	f7fc fa37 	bl	80042c0 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e05c      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0f0      	beq.n	8007e4e <HAL_RCC_OscConfig+0x416>
 8007e6c:	e054      	b.n	8007f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e6e:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <HAL_RCC_OscConfig+0x478>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e74:	f7fc fa24 	bl	80042c0 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e7c:	f7fc fa20 	bl	80042c0 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e045      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e8e:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <HAL_RCC_OscConfig+0x470>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <HAL_RCC_OscConfig+0x444>
 8007e9a:	e03d      	b.n	8007f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e038      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	40007000 	.word	0x40007000
 8007eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007eb4:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <HAL_RCC_OscConfig+0x4ec>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d028      	beq.n	8007f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d121      	bne.n	8007f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d11a      	bne.n	8007f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d111      	bne.n	8007f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	3b01      	subs	r3, #1
 8007efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d107      	bne.n	8007f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d001      	beq.n	8007f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e000      	b.n	8007f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40023800 	.word	0x40023800

08007f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e0cc      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f3c:	4b68      	ldr	r3, [pc, #416]	; (80080e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0307 	and.w	r3, r3, #7
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d90c      	bls.n	8007f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f4a:	4b65      	ldr	r3, [pc, #404]	; (80080e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f52:	4b63      	ldr	r3, [pc, #396]	; (80080e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0b8      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d020      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f7c:	4b59      	ldr	r3, [pc, #356]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	4a58      	ldr	r2, [pc, #352]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f94:	4b53      	ldr	r3, [pc, #332]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	4a52      	ldr	r2, [pc, #328]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fa0:	4b50      	ldr	r3, [pc, #320]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	494d      	ldr	r1, [pc, #308]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d044      	beq.n	8008048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fc6:	4b47      	ldr	r3, [pc, #284]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d119      	bne.n	8008006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e07f      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d107      	bne.n	8007ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe6:	4b3f      	ldr	r3, [pc, #252]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e06f      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ff6:	4b3b      	ldr	r3, [pc, #236]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e067      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008006:	4b37      	ldr	r3, [pc, #220]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f023 0203 	bic.w	r2, r3, #3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	4934      	ldr	r1, [pc, #208]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008014:	4313      	orrs	r3, r2
 8008016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008018:	f7fc f952 	bl	80042c0 <HAL_GetTick>
 800801c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801e:	e00a      	b.n	8008036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008020:	f7fc f94e 	bl	80042c0 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f241 3288 	movw	r2, #5000	; 0x1388
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e04f      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008036:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 020c 	and.w	r2, r3, #12
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	429a      	cmp	r2, r3
 8008046:	d1eb      	bne.n	8008020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008048:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <HAL_RCC_ClockConfig+0x1b8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d20c      	bcs.n	8008070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008056:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800805e:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e032      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	4916      	ldr	r1, [pc, #88]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	4313      	orrs	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	490e      	ldr	r1, [pc, #56]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080ae:	f000 f821 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <HAL_RCC_ClockConfig+0x1bc>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	091b      	lsrs	r3, r3, #4
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	490a      	ldr	r1, [pc, #40]	; (80080e8 <HAL_RCC_ClockConfig+0x1c0>)
 80080c0:	5ccb      	ldrb	r3, [r1, r3]
 80080c2:	fa22 f303 	lsr.w	r3, r2, r3
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <HAL_RCC_ClockConfig+0x1c4>)
 80080c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <HAL_RCC_ClockConfig+0x1c8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fc f8b2 	bl	8004238 <HAL_InitTick>

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40023c00 	.word	0x40023c00
 80080e4:	40023800 	.word	0x40023800
 80080e8:	080152f0 	.word	0x080152f0
 80080ec:	20000018 	.word	0x20000018
 80080f0:	2000003c 	.word	0x2000003c

080080f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f8:	b094      	sub	sp, #80	; 0x50
 80080fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008100:	2300      	movs	r3, #0
 8008102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008104:	2300      	movs	r3, #0
 8008106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800810c:	4b79      	ldr	r3, [pc, #484]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 030c 	and.w	r3, r3, #12
 8008114:	2b08      	cmp	r3, #8
 8008116:	d00d      	beq.n	8008134 <HAL_RCC_GetSysClockFreq+0x40>
 8008118:	2b08      	cmp	r3, #8
 800811a:	f200 80e1 	bhi.w	80082e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_RCC_GetSysClockFreq+0x34>
 8008122:	2b04      	cmp	r3, #4
 8008124:	d003      	beq.n	800812e <HAL_RCC_GetSysClockFreq+0x3a>
 8008126:	e0db      	b.n	80082e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008128:	4b73      	ldr	r3, [pc, #460]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800812a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800812c:	e0db      	b.n	80082e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800812e:	4b73      	ldr	r3, [pc, #460]	; (80082fc <HAL_RCC_GetSysClockFreq+0x208>)
 8008130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008132:	e0d8      	b.n	80082e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008134:	4b6f      	ldr	r3, [pc, #444]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800813c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800813e:	4b6d      	ldr	r3, [pc, #436]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d063      	beq.n	8008212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800814a:	4b6a      	ldr	r3, [pc, #424]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	099b      	lsrs	r3, r3, #6
 8008150:	2200      	movs	r2, #0
 8008152:	63bb      	str	r3, [r7, #56]	; 0x38
 8008154:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
 800815e:	2300      	movs	r3, #0
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
 8008162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008166:	4622      	mov	r2, r4
 8008168:	462b      	mov	r3, r5
 800816a:	f04f 0000 	mov.w	r0, #0
 800816e:	f04f 0100 	mov.w	r1, #0
 8008172:	0159      	lsls	r1, r3, #5
 8008174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008178:	0150      	lsls	r0, r2, #5
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4621      	mov	r1, r4
 8008180:	1a51      	subs	r1, r2, r1
 8008182:	6139      	str	r1, [r7, #16]
 8008184:	4629      	mov	r1, r5
 8008186:	eb63 0301 	sbc.w	r3, r3, r1
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008198:	4659      	mov	r1, fp
 800819a:	018b      	lsls	r3, r1, #6
 800819c:	4651      	mov	r1, sl
 800819e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081a2:	4651      	mov	r1, sl
 80081a4:	018a      	lsls	r2, r1, #6
 80081a6:	4651      	mov	r1, sl
 80081a8:	ebb2 0801 	subs.w	r8, r2, r1
 80081ac:	4659      	mov	r1, fp
 80081ae:	eb63 0901 	sbc.w	r9, r3, r1
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081c6:	4690      	mov	r8, r2
 80081c8:	4699      	mov	r9, r3
 80081ca:	4623      	mov	r3, r4
 80081cc:	eb18 0303 	adds.w	r3, r8, r3
 80081d0:	60bb      	str	r3, [r7, #8]
 80081d2:	462b      	mov	r3, r5
 80081d4:	eb49 0303 	adc.w	r3, r9, r3
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081e6:	4629      	mov	r1, r5
 80081e8:	024b      	lsls	r3, r1, #9
 80081ea:	4621      	mov	r1, r4
 80081ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081f0:	4621      	mov	r1, r4
 80081f2:	024a      	lsls	r2, r1, #9
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fa:	2200      	movs	r2, #0
 80081fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008204:	f7f8 fd48 	bl	8000c98 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4613      	mov	r3, r2
 800820e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008210:	e058      	b.n	80082c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008212:	4b38      	ldr	r3, [pc, #224]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	2200      	movs	r2, #0
 800821a:	4618      	mov	r0, r3
 800821c:	4611      	mov	r1, r2
 800821e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008222:	623b      	str	r3, [r7, #32]
 8008224:	2300      	movs	r3, #0
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
 8008228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800822c:	4642      	mov	r2, r8
 800822e:	464b      	mov	r3, r9
 8008230:	f04f 0000 	mov.w	r0, #0
 8008234:	f04f 0100 	mov.w	r1, #0
 8008238:	0159      	lsls	r1, r3, #5
 800823a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800823e:	0150      	lsls	r0, r2, #5
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4641      	mov	r1, r8
 8008246:	ebb2 0a01 	subs.w	sl, r2, r1
 800824a:	4649      	mov	r1, r9
 800824c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800825c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008264:	ebb2 040a 	subs.w	r4, r2, sl
 8008268:	eb63 050b 	sbc.w	r5, r3, fp
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	00eb      	lsls	r3, r5, #3
 8008276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800827a:	00e2      	lsls	r2, r4, #3
 800827c:	4614      	mov	r4, r2
 800827e:	461d      	mov	r5, r3
 8008280:	4643      	mov	r3, r8
 8008282:	18e3      	adds	r3, r4, r3
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	464b      	mov	r3, r9
 8008288:	eb45 0303 	adc.w	r3, r5, r3
 800828c:	607b      	str	r3, [r7, #4]
 800828e:	f04f 0200 	mov.w	r2, #0
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800829a:	4629      	mov	r1, r5
 800829c:	028b      	lsls	r3, r1, #10
 800829e:	4621      	mov	r1, r4
 80082a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082a4:	4621      	mov	r1, r4
 80082a6:	028a      	lsls	r2, r1, #10
 80082a8:	4610      	mov	r0, r2
 80082aa:	4619      	mov	r1, r3
 80082ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ae:	2200      	movs	r2, #0
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	61fa      	str	r2, [r7, #28]
 80082b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082b8:	f7f8 fcee 	bl	8000c98 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4613      	mov	r3, r2
 80082c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	3301      	adds	r3, #1
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80082d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082de:	e002      	b.n	80082e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80082e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3750      	adds	r7, #80	; 0x50
 80082ec:	46bd      	mov	sp, r7
 80082ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082f2:	bf00      	nop
 80082f4:	40023800 	.word	0x40023800
 80082f8:	00f42400 	.word	0x00f42400
 80082fc:	007a1200 	.word	0x007a1200

08008300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008304:	4b03      	ldr	r3, [pc, #12]	; (8008314 <HAL_RCC_GetHCLKFreq+0x14>)
 8008306:	681b      	ldr	r3, [r3, #0]
}
 8008308:	4618      	mov	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000018 	.word	0x20000018

08008318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800831c:	f7ff fff0 	bl	8008300 <HAL_RCC_GetHCLKFreq>
 8008320:	4602      	mov	r2, r0
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	0a9b      	lsrs	r3, r3, #10
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	4903      	ldr	r1, [pc, #12]	; (800833c <HAL_RCC_GetPCLK1Freq+0x24>)
 800832e:	5ccb      	ldrb	r3, [r1, r3]
 8008330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008334:	4618      	mov	r0, r3
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40023800 	.word	0x40023800
 800833c:	08015300 	.word	0x08015300

08008340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008344:	f7ff ffdc 	bl	8008300 <HAL_RCC_GetHCLKFreq>
 8008348:	4602      	mov	r2, r0
 800834a:	4b05      	ldr	r3, [pc, #20]	; (8008360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	0b5b      	lsrs	r3, r3, #13
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	4903      	ldr	r1, [pc, #12]	; (8008364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008356:	5ccb      	ldrb	r3, [r1, r3]
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40023800 	.word	0x40023800
 8008364:	08015300 	.word	0x08015300

08008368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e07b      	b.n	8008472 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	d108      	bne.n	8008394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800838a:	d009      	beq.n	80083a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	61da      	str	r2, [r3, #28]
 8008392:	e005      	b.n	80083a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fa fd14 	bl	8002de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008424:	ea42 0103 	orr.w	r1, r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	f003 0104 	and.w	r1, r3, #4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	f003 0210 	and.w	r2, r3, #16
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b08c      	sub	sp, #48	; 0x30
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008488:	2301      	movs	r3, #1
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x26>
 800849c:	2302      	movs	r3, #2
 800849e:	e18a      	b.n	80087b6 <HAL_SPI_TransmitReceive+0x33c>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084a8:	f7fb ff0a 	bl	80042c0 <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d00f      	beq.n	80084ea <HAL_SPI_TransmitReceive+0x70>
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084d0:	d107      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x68>
 80084da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d003      	beq.n	80084ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80084e2:	2302      	movs	r3, #2
 80084e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80084e8:	e15b      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x82>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x82>
 80084f6:	887b      	ldrh	r3, [r7, #2]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008502:	e14e      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b04      	cmp	r3, #4
 800850e:	d003      	beq.n	8008518 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2205      	movs	r2, #5
 8008514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	887a      	ldrh	r2, [r7, #2]
 8008528:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	887a      	ldrh	r2, [r7, #2]
 800852e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	887a      	ldrh	r2, [r7, #2]
 800853a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d007      	beq.n	800856c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008574:	d178      	bne.n	8008668 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x10a>
 800857e:	8b7b      	ldrh	r3, [r7, #26]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d166      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	881a      	ldrh	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	1c9a      	adds	r2, r3, #2
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a8:	e053      	b.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d11b      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x176>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <HAL_SPI_TransmitReceive+0x176>
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d113      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	881a      	ldrh	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	1c9a      	adds	r2, r3, #2
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d119      	bne.n	8008632 <HAL_SPI_TransmitReceive+0x1b8>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d014      	beq.n	8008632 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	b292      	uxth	r2, r2
 8008614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	1c9a      	adds	r2, r3, #2
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800862e:	2301      	movs	r3, #1
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008632:	f7fb fe45 	bl	80042c0 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800863e:	429a      	cmp	r2, r3
 8008640:	d807      	bhi.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d003      	beq.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008650:	e0a7      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1a6      	bne.n	80085aa <HAL_SPI_TransmitReceive+0x130>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1a1      	bne.n	80085aa <HAL_SPI_TransmitReceive+0x130>
 8008666:	e07c      	b.n	8008762 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_SPI_TransmitReceive+0x1fc>
 8008670:	8b7b      	ldrh	r3, [r7, #26]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d16b      	bne.n	800874e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800869c:	e057      	b.n	800874e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d11c      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x26c>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d017      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x26c>
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d114      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	330c      	adds	r3, #12
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d119      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x2ae>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d014      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008724:	2301      	movs	r3, #1
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008728:	f7fb fdca 	bl	80042c0 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008734:	429a      	cmp	r2, r3
 8008736:	d803      	bhi.n	8008740 <HAL_SPI_TransmitReceive+0x2c6>
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d102      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x2cc>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800874c:	e029      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1a2      	bne.n	800869e <HAL_SPI_TransmitReceive+0x224>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d19d      	bne.n	800869e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 f8b2 	bl	80088d0 <SPI_EndRxTxTransaction>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2220      	movs	r2, #32
 800877c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800877e:	e010      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	e000      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80087a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3730      	adds	r7, #48	; 0x30
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087d0:	f7fb fd76 	bl	80042c0 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4413      	add	r3, r2
 80087de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087e0:	f7fb fd6e 	bl	80042c0 <HAL_GetTick>
 80087e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087e6:	4b39      	ldr	r3, [pc, #228]	; (80088cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	015b      	lsls	r3, r3, #5
 80087ec:	0d1b      	lsrs	r3, r3, #20
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	fb02 f303 	mul.w	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087f6:	e054      	b.n	80088a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	d050      	beq.n	80088a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008800:	f7fb fd5e 	bl	80042c0 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	429a      	cmp	r2, r3
 800880e:	d902      	bls.n	8008816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d13d      	bne.n	8008892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800882e:	d111      	bne.n	8008854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008838:	d004      	beq.n	8008844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008842:	d107      	bne.n	8008854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885c:	d10f      	bne.n	800887e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800887c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e017      	b.n	80088c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	3b01      	subs	r3, #1
 80088a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4013      	ands	r3, r2
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	bf0c      	ite	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	2300      	movne	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	461a      	mov	r2, r3
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d19b      	bne.n	80087f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3720      	adds	r7, #32
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000018 	.word	0x20000018

080088d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088dc:	4b1b      	ldr	r3, [pc, #108]	; (800894c <SPI_EndRxTxTransaction+0x7c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <SPI_EndRxTxTransaction+0x80>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	0d5b      	lsrs	r3, r3, #21
 80088e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088ec:	fb02 f303 	mul.w	r3, r2, r3
 80088f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088fa:	d112      	bne.n	8008922 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2200      	movs	r2, #0
 8008904:	2180      	movs	r1, #128	; 0x80
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff ff5a 	bl	80087c0 <SPI_WaitFlagStateUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d016      	beq.n	8008940 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	f043 0220 	orr.w	r2, r3, #32
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e00f      	b.n	8008942 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	3b01      	subs	r3, #1
 800892c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008938:	2b80      	cmp	r3, #128	; 0x80
 800893a:	d0f2      	beq.n	8008922 <SPI_EndRxTxTransaction+0x52>
 800893c:	e000      	b.n	8008940 <SPI_EndRxTxTransaction+0x70>
        break;
 800893e:	bf00      	nop
  }

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000018 	.word	0x20000018
 8008950:	165e9f81 	.word	0x165e9f81

08008954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e041      	b.n	80089ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d106      	bne.n	8008980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fa fac4 	bl	8002f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3304      	adds	r3, #4
 8008990:	4619      	mov	r1, r3
 8008992:	4610      	mov	r0, r2
 8008994:	f000 fb24 	bl	8008fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d001      	beq.n	8008a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e044      	b.n	8008a96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0201 	orr.w	r2, r2, #1
 8008a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a1e      	ldr	r2, [pc, #120]	; (8008aa4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d018      	beq.n	8008a60 <HAL_TIM_Base_Start_IT+0x6c>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a36:	d013      	beq.n	8008a60 <HAL_TIM_Base_Start_IT+0x6c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1a      	ldr	r2, [pc, #104]	; (8008aa8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00e      	beq.n	8008a60 <HAL_TIM_Base_Start_IT+0x6c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a19      	ldr	r2, [pc, #100]	; (8008aac <HAL_TIM_Base_Start_IT+0xb8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d009      	beq.n	8008a60 <HAL_TIM_Base_Start_IT+0x6c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a17      	ldr	r2, [pc, #92]	; (8008ab0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIM_Base_Start_IT+0x6c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a16      	ldr	r2, [pc, #88]	; (8008ab4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d111      	bne.n	8008a84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b06      	cmp	r3, #6
 8008a70:	d010      	beq.n	8008a94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0201 	orr.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a82:	e007      	b.n	8008a94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40010000 	.word	0x40010000
 8008aa8:	40000400 	.word	0x40000400
 8008aac:	40000800 	.word	0x40000800
 8008ab0:	40000c00 	.word	0x40000c00
 8008ab4:	40014000 	.word	0x40014000

08008ab8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 0201 	bic.w	r2, r2, #1
 8008ace:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10f      	bne.n	8008b00 <HAL_TIM_Base_Stop_IT+0x48>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6a1a      	ldr	r2, [r3, #32]
 8008ae6:	f240 4344 	movw	r3, #1092	; 0x444
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d107      	bne.n	8008b00 <HAL_TIM_Base_Stop_IT+0x48>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e097      	b.n	8008c5a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fa f99a 	bl	8002e78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f000 fa38 	bl	8008fe0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b98:	f023 0303 	bic.w	r3, r3, #3
 8008b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008bb6:	f023 030c 	bic.w	r3, r3, #12
 8008bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	011a      	lsls	r2, r3, #4
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	031b      	lsls	r3, r3, #12
 8008be6:	4313      	orrs	r3, r2
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008bf4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008bfc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c72:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c82:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c8a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d110      	bne.n	8008cb4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d102      	bne.n	8008c9e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c98:	7b7b      	ldrb	r3, [r7, #13]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d001      	beq.n	8008ca2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e069      	b.n	8008d76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cb2:	e031      	b.n	8008d18 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d110      	bne.n	8008cdc <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d102      	bne.n	8008cc6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cc0:	7b3b      	ldrb	r3, [r7, #12]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d001      	beq.n	8008cca <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e055      	b.n	8008d76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cda:	e01d      	b.n	8008d18 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d108      	bne.n	8008cf4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d105      	bne.n	8008cf4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ce8:	7b7b      	ldrb	r3, [r7, #13]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d102      	bne.n	8008cf4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cee:	7b3b      	ldrb	r3, [r7, #12]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d001      	beq.n	8008cf8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e03e      	b.n	8008d76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <HAL_TIM_Encoder_Start+0xc4>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d008      	beq.n	8008d36 <HAL_TIM_Encoder_Start+0xd4>
 8008d24:	e00f      	b.n	8008d46 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f9d6 	bl	80090e0 <TIM_CCxChannelCmd>
      break;
 8008d34:	e016      	b.n	8008d64 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f9ce 	bl	80090e0 <TIM_CCxChannelCmd>
      break;
 8008d44:	e00e      	b.n	8008d64 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f9c6 	bl	80090e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f9bf 	bl	80090e0 <TIM_CCxChannelCmd>
      break;
 8008d62:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d122      	bne.n	8008dda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d11b      	bne.n	8008dda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f06f 0202 	mvn.w	r2, #2
 8008daa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8ee 	bl	8008fa2 <HAL_TIM_IC_CaptureCallback>
 8008dc6:	e005      	b.n	8008dd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f8e0 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f8f1 	bl	8008fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d122      	bne.n	8008e2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d11b      	bne.n	8008e2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f06f 0204 	mvn.w	r2, #4
 8008dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f8c4 	bl	8008fa2 <HAL_TIM_IC_CaptureCallback>
 8008e1a:	e005      	b.n	8008e28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f8b6 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f8c7 	bl	8008fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d122      	bne.n	8008e82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f003 0308 	and.w	r3, r3, #8
 8008e46:	2b08      	cmp	r3, #8
 8008e48:	d11b      	bne.n	8008e82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f06f 0208 	mvn.w	r2, #8
 8008e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2204      	movs	r2, #4
 8008e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f89a 	bl	8008fa2 <HAL_TIM_IC_CaptureCallback>
 8008e6e:	e005      	b.n	8008e7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f88c 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f89d 	bl	8008fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b10      	cmp	r3, #16
 8008e8e:	d122      	bne.n	8008ed6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	2b10      	cmp	r3, #16
 8008e9c:	d11b      	bne.n	8008ed6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f06f 0210 	mvn.w	r2, #16
 8008ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2208      	movs	r2, #8
 8008eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f870 	bl	8008fa2 <HAL_TIM_IC_CaptureCallback>
 8008ec2:	e005      	b.n	8008ed0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f862 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f873 	bl	8008fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d10e      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d107      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f06f 0201 	mvn.w	r2, #1
 8008efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7f9 fecb 	bl	8002c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d10e      	bne.n	8008f2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1a:	2b80      	cmp	r3, #128	; 0x80
 8008f1c:	d107      	bne.n	8008f2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f977 	bl	800921c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f38:	2b40      	cmp	r3, #64	; 0x40
 8008f3a:	d10e      	bne.n	8008f5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d107      	bne.n	8008f5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f838 	bl	8008fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	d10e      	bne.n	8008f86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d107      	bne.n	8008f86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f06f 0220 	mvn.w	r2, #32
 8008f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f941 	bl	8009208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f96:	bf00      	nop
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
	...

08008fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a34      	ldr	r2, [pc, #208]	; (80090c4 <TIM_Base_SetConfig+0xe4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00f      	beq.n	8009018 <TIM_Base_SetConfig+0x38>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffe:	d00b      	beq.n	8009018 <TIM_Base_SetConfig+0x38>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a31      	ldr	r2, [pc, #196]	; (80090c8 <TIM_Base_SetConfig+0xe8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <TIM_Base_SetConfig+0x38>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a30      	ldr	r2, [pc, #192]	; (80090cc <TIM_Base_SetConfig+0xec>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_Base_SetConfig+0x38>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a2f      	ldr	r2, [pc, #188]	; (80090d0 <TIM_Base_SetConfig+0xf0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d108      	bne.n	800902a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a25      	ldr	r2, [pc, #148]	; (80090c4 <TIM_Base_SetConfig+0xe4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01b      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009038:	d017      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a22      	ldr	r2, [pc, #136]	; (80090c8 <TIM_Base_SetConfig+0xe8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a21      	ldr	r2, [pc, #132]	; (80090cc <TIM_Base_SetConfig+0xec>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00f      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a20      	ldr	r2, [pc, #128]	; (80090d0 <TIM_Base_SetConfig+0xf0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00b      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a1f      	ldr	r2, [pc, #124]	; (80090d4 <TIM_Base_SetConfig+0xf4>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d007      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a1e      	ldr	r2, [pc, #120]	; (80090d8 <TIM_Base_SetConfig+0xf8>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d003      	beq.n	800906a <TIM_Base_SetConfig+0x8a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1d      	ldr	r2, [pc, #116]	; (80090dc <TIM_Base_SetConfig+0xfc>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d108      	bne.n	800907c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <TIM_Base_SetConfig+0xe4>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d103      	bne.n	80090b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	615a      	str	r2, [r3, #20]
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40010000 	.word	0x40010000
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40014000 	.word	0x40014000
 80090d8:	40014400 	.word	0x40014400
 80090dc:	40014800 	.word	0x40014800

080090e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f003 031f 	and.w	r3, r3, #31
 80090f2:	2201      	movs	r2, #1
 80090f4:	fa02 f303 	lsl.w	r3, r2, r3
 80090f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1a      	ldr	r2, [r3, #32]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	43db      	mvns	r3, r3
 8009102:	401a      	ands	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a1a      	ldr	r2, [r3, #32]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f003 031f 	and.w	r3, r3, #31
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	fa01 f303 	lsl.w	r3, r1, r3
 8009118:	431a      	orrs	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	621a      	str	r2, [r3, #32]
}
 800911e:	bf00      	nop
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009140:	2302      	movs	r3, #2
 8009142:	e050      	b.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1c      	ldr	r2, [pc, #112]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d018      	beq.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009190:	d013      	beq.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a18      	ldr	r2, [pc, #96]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d00e      	beq.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a16      	ldr	r2, [pc, #88]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d009      	beq.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a15      	ldr	r2, [pc, #84]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d004      	beq.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a13      	ldr	r2, [pc, #76]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d10c      	bne.n	80091d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40000400 	.word	0x40000400
 80091fc:	40000800 	.word	0x40000800
 8009200:	40000c00 	.word	0x40000c00
 8009204:	40014000 	.word	0x40014000

08009208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e03f      	b.n	80092c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d106      	bne.n	800925c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7f9 fe7e 	bl	8002f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2224      	movs	r2, #36	; 0x24
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 f80b 	bl	800a290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b08a      	sub	sp, #40	; 0x28
 80092ce:	af02      	add	r7, sp, #8
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d17c      	bne.n	80093e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HAL_UART_Transmit+0x2c>
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e075      	b.n	80093e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_UART_Transmit+0x3e>
 8009304:	2302      	movs	r3, #2
 8009306:	e06e      	b.n	80093e6 <HAL_UART_Transmit+0x11c>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2221      	movs	r2, #33	; 0x21
 800931a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800931e:	f7fa ffcf 	bl	80042c0 <HAL_GetTick>
 8009322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	88fa      	ldrh	r2, [r7, #6]
 800932e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009338:	d108      	bne.n	800934c <HAL_UART_Transmit+0x82>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	e003      	b.n	8009354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800935c:	e02a      	b.n	80093b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2200      	movs	r2, #0
 8009366:	2180      	movs	r1, #128	; 0x80
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fcc3 	bl	8009cf4 <UART_WaitOnFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e036      	b.n	80093e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10b      	bne.n	8009396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800938c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	3302      	adds	r3, #2
 8009392:	61bb      	str	r3, [r7, #24]
 8009394:	e007      	b.n	80093a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	781a      	ldrb	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	3301      	adds	r3, #1
 80093a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1cf      	bne.n	800935e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2140      	movs	r1, #64	; 0x40
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fc93 	bl	8009cf4 <UART_WaitOnFlagUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e006      	b.n	80093e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e000      	b.n	80093e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80093e4:	2302      	movs	r3, #2
  }
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b08a      	sub	sp, #40	; 0x28
 80093f2:	af02      	add	r7, sp, #8
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b20      	cmp	r3, #32
 800940c:	f040 808c 	bne.w	8009528 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <HAL_UART_Receive+0x2e>
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e084      	b.n	800952a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_UART_Receive+0x40>
 800942a:	2302      	movs	r3, #2
 800942c:	e07d      	b.n	800952a <HAL_UART_Receive+0x13c>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2222      	movs	r2, #34	; 0x22
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800944a:	f7fa ff39 	bl	80042c0 <HAL_GetTick>
 800944e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	88fa      	ldrh	r2, [r7, #6]
 8009454:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	88fa      	ldrh	r2, [r7, #6]
 800945a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009464:	d108      	bne.n	8009478 <HAL_UART_Receive+0x8a>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	61bb      	str	r3, [r7, #24]
 8009476:	e003      	b.n	8009480 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009488:	e043      	b.n	8009512 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2200      	movs	r2, #0
 8009492:	2120      	movs	r1, #32
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fc2d 	bl	8009cf4 <UART_WaitOnFlagUntilTimeout>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e042      	b.n	800952a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10c      	bne.n	80094c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	3302      	adds	r3, #2
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	e01f      	b.n	8009504 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094cc:	d007      	beq.n	80094de <HAL_UART_Receive+0xf0>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <HAL_UART_Receive+0xfe>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	e008      	b.n	80094fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	3301      	adds	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1b6      	bne.n	800948a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	e000      	b.n	800952a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009528:	2302      	movs	r3, #2
  }
}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	4613      	mov	r3, r2
 800953e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b20      	cmp	r3, #32
 800954a:	d11d      	bne.n	8009588 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <HAL_UART_Receive_DMA+0x26>
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e016      	b.n	800958a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_UART_Receive_DMA+0x38>
 8009566:	2302      	movs	r3, #2
 8009568:	e00f      	b.n	800958a <HAL_UART_Receive_DMA+0x58>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	461a      	mov	r2, r3
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fc26 	bl	8009dd0 <UART_Start_Receive_DMA>
 8009584:	4603      	mov	r3, r0
 8009586:	e000      	b.n	800958a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009588:	2302      	movs	r3, #2
  }
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b0ba      	sub	sp, #232	; 0xe8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10f      	bne.n	80095fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <HAL_UART_IRQHandler+0x66>
 80095e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fd91 	bl	800a11a <UART_Receive_IT>
      return;
 80095f8:	e256      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80de 	beq.w	80097c0 <HAL_UART_IRQHandler+0x22c>
 8009604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 80d1 	beq.w	80097c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800961e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <HAL_UART_IRQHandler+0xae>
 800962a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f043 0201 	orr.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <HAL_UART_IRQHandler+0xd2>
 800964e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	f043 0202 	orr.w	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <HAL_UART_IRQHandler+0xf6>
 8009672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f043 0204 	orr.w	r2, r3, #4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800968a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d011      	beq.n	80096ba <HAL_UART_IRQHandler+0x126>
 8009696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	f043 0208 	orr.w	r2, r3, #8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 81ed 	beq.w	8009a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d008      	beq.n	80096e2 <HAL_UART_IRQHandler+0x14e>
 80096d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fd1c 	bl	800a11a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <HAL_UART_IRQHandler+0x17a>
 8009706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d04f      	beq.n	80097ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc24 	bl	8009f5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b40      	cmp	r3, #64	; 0x40
 8009720:	d141      	bne.n	80097a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3314      	adds	r3, #20
 8009728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800973c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3314      	adds	r3, #20
 800974a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800974e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800975a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1d9      	bne.n	8009722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	d013      	beq.n	800979e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	4a7d      	ldr	r2, [pc, #500]	; (8009970 <HAL_UART_IRQHandler+0x3dc>)
 800977c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	4618      	mov	r0, r3
 8009784:	f7fb f854 	bl	8004830 <HAL_DMA_Abort_IT>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d016      	beq.n	80097bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	e00e      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f99a 	bl	8009ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	e00a      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f996 	bl	8009ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ac:	e006      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f992 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097ba:	e170      	b.n	8009a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097bc:	bf00      	nop
    return;
 80097be:	e16e      	b.n	8009a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	f040 814a 	bne.w	8009a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8143 	beq.w	8009a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 813c 	beq.w	8009a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097e6:	2300      	movs	r3, #0
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	f040 80b4 	bne.w	8009974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8140 	beq.w	8009aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800982a:	429a      	cmp	r2, r3
 800982c:	f080 8139 	bcs.w	8009aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009842:	f000 8088 	beq.w	8009956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800985c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800987e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800988a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1d9      	bne.n	8009846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e1      	bne.n	8009892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3314      	adds	r3, #20
 80098ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e3      	bne.n	80098ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	330c      	adds	r3, #12
 800991a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009926:	f023 0310 	bic.w	r3, r3, #16
 800992a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	330c      	adds	r3, #12
 8009934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009938:	65ba      	str	r2, [r7, #88]	; 0x58
 800993a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800993e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e3      	bne.n	8009914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	4618      	mov	r0, r3
 8009952:	f7fa fefd 	bl	8004750 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800995e:	b29b      	uxth	r3, r3
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	b29b      	uxth	r3, r3
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f8c0 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800996c:	e099      	b.n	8009aa2 <HAL_UART_IRQHandler+0x50e>
 800996e:	bf00      	nop
 8009970:	0800a023 	.word	0x0800a023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800997c:	b29b      	uxth	r3, r3
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 808b 	beq.w	8009aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 8086 	beq.w	8009aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	330c      	adds	r3, #12
 80099a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099be:	647a      	str	r2, [r7, #68]	; 0x44
 80099c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e3      	bne.n	800999a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3314      	adds	r3, #20
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	623b      	str	r3, [r7, #32]
   return(result);
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3314      	adds	r3, #20
 80099f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099f6:	633a      	str	r2, [r7, #48]	; 0x30
 80099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e3      	bne.n	80099d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0310 	bic.w	r3, r3, #16
 8009a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	330c      	adds	r3, #12
 8009a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a3c:	61fa      	str	r2, [r7, #28]
 8009a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	617b      	str	r3, [r7, #20]
   return(result);
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e3      	bne.n	8009a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f848 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a5c:	e023      	b.n	8009aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <HAL_UART_IRQHandler+0x4ea>
 8009a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fae7 	bl	800a04a <UART_Transmit_IT>
    return;
 8009a7c:	e014      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00e      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x514>
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d008      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fb27 	bl	800a0ea <UART_EndTransmit_IT>
    return;
 8009a9c:	e004      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8009a9e:	bf00      	nop
 8009aa0:	e002      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8009aa6:	bf00      	nop
  }
}
 8009aa8:	37e8      	adds	r7, #232	; 0xe8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop

08009ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b09c      	sub	sp, #112	; 0x70
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d172      	bne.n	8009c06 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b22:	2200      	movs	r2, #0
 8009b24:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	330c      	adds	r3, #12
 8009b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	330c      	adds	r3, #12
 8009b44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b46:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b4e:	e841 2300 	strex	r3, r2, [r1]
 8009b52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1e5      	bne.n	8009b26 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3314      	adds	r3, #20
 8009b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6c:	f023 0301 	bic.w	r3, r3, #1
 8009b70:	667b      	str	r3, [r7, #100]	; 0x64
 8009b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3314      	adds	r3, #20
 8009b78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b7a:	647a      	str	r2, [r7, #68]	; 0x44
 8009b7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e5      	bne.n	8009b5a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3314      	adds	r3, #20
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3314      	adds	r3, #20
 8009bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bae:	633a      	str	r2, [r7, #48]	; 0x30
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e5      	bne.n	8009b8e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d119      	bne.n	8009c06 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f023 0310 	bic.w	r3, r3, #16
 8009be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	330c      	adds	r3, #12
 8009bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bf2:	61fa      	str	r2, [r7, #28]
 8009bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	69b9      	ldr	r1, [r7, #24]
 8009bf8:	69fa      	ldr	r2, [r7, #28]
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e5      	bne.n	8009bd2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d106      	bne.n	8009c1c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c12:	4619      	mov	r1, r3
 8009c14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c16:	f7ff ff69 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c1a:	e002      	b.n	8009c22 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009c1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c1e:	f7f9 f853 	bl	8002cc8 <HAL_UART_RxCpltCallback>
}
 8009c22:	bf00      	nop
 8009c24:	3770      	adds	r7, #112	; 0x70
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d108      	bne.n	8009c52 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c44:	085b      	lsrs	r3, r3, #1
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4619      	mov	r1, r3
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff ff4e 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c50:	e002      	b.n	8009c58 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7ff ff36 	bl	8009ac4 <HAL_UART_RxHalfCpltCallback>
}
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7c:	2b80      	cmp	r3, #128	; 0x80
 8009c7e:	bf0c      	ite	eq
 8009c80:	2301      	moveq	r3, #1
 8009c82:	2300      	movne	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b21      	cmp	r3, #33	; 0x21
 8009c92:	d108      	bne.n	8009ca6 <UART_DMAError+0x46>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d005      	beq.n	8009ca6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ca0:	68b8      	ldr	r0, [r7, #8]
 8009ca2:	f000 f933 	bl	8009f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb0:	2b40      	cmp	r3, #64	; 0x40
 8009cb2:	bf0c      	ite	eq
 8009cb4:	2301      	moveq	r3, #1
 8009cb6:	2300      	movne	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b22      	cmp	r3, #34	; 0x22
 8009cc6:	d108      	bne.n	8009cda <UART_DMAError+0x7a>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	f000 f941 	bl	8009f5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	f043 0210 	orr.w	r2, r3, #16
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ce6:	68b8      	ldr	r0, [r7, #8]
 8009ce8:	f7ff fef6 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b090      	sub	sp, #64	; 0x40
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	4613      	mov	r3, r2
 8009d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d04:	e050      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d04c      	beq.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d007      	beq.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d14:	f7fa fad4 	bl	80042c0 <HAL_GetTick>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d241      	bcs.n	8009da8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	330c      	adds	r3, #12
 8009d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d44:	637a      	str	r2, [r7, #52]	; 0x34
 8009d46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d4c:	e841 2300 	strex	r3, r2, [r1]
 8009d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e5      	bne.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3314      	adds	r3, #20
 8009d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	613b      	str	r3, [r7, #16]
   return(result);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f023 0301 	bic.w	r3, r3, #1
 8009d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3314      	adds	r3, #20
 8009d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d78:	623a      	str	r2, [r7, #32]
 8009d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	69f9      	ldr	r1, [r7, #28]
 8009d7e:	6a3a      	ldr	r2, [r7, #32]
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e5      	bne.n	8009d58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e00f      	b.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4013      	ands	r3, r2
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	bf0c      	ite	eq
 8009db8:	2301      	moveq	r3, #1
 8009dba:	2300      	movne	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d09f      	beq.n	8009d06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3740      	adds	r7, #64	; 0x40
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b098      	sub	sp, #96	; 0x60
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	88fa      	ldrh	r2, [r7, #6]
 8009de8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2222      	movs	r2, #34	; 0x22
 8009df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfc:	4a40      	ldr	r2, [pc, #256]	; (8009f00 <UART_Start_Receive_DMA+0x130>)
 8009dfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	4a3f      	ldr	r2, [pc, #252]	; (8009f04 <UART_Start_Receive_DMA+0x134>)
 8009e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0c:	4a3e      	ldr	r2, [pc, #248]	; (8009f08 <UART_Start_Receive_DMA+0x138>)
 8009e0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	2200      	movs	r2, #0
 8009e16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	f7fa fc36 	bl	80046a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e34:	2300      	movs	r3, #0
 8009e36:	613b      	str	r3, [r7, #16]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	613b      	str	r3, [r7, #16]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	613b      	str	r3, [r7, #16]
 8009e48:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d019      	beq.n	8009e8e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	330c      	adds	r3, #12
 8009e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e70:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	330c      	adds	r3, #12
 8009e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e5      	bne.n	8009e5a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3314      	adds	r3, #20
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	657b      	str	r3, [r7, #84]	; 0x54
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3314      	adds	r3, #20
 8009eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009eae:	63ba      	str	r2, [r7, #56]	; 0x38
 8009eb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e5      	bne.n	8009e8e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3314      	adds	r3, #20
 8009ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3314      	adds	r3, #20
 8009ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8009ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	6a39      	ldr	r1, [r7, #32]
 8009ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e5      	bne.n	8009ec2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3760      	adds	r7, #96	; 0x60
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	08009b05 	.word	0x08009b05
 8009f04:	08009c2b 	.word	0x08009c2b
 8009f08:	08009c61 	.word	0x08009c61

08009f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b089      	sub	sp, #36	; 0x24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	330c      	adds	r3, #12
 8009f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f2a:	61fb      	str	r3, [r7, #28]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	330c      	adds	r3, #12
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	61ba      	str	r2, [r7, #24]
 8009f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	6979      	ldr	r1, [r7, #20]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	613b      	str	r3, [r7, #16]
   return(result);
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e5      	bne.n	8009f14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009f50:	bf00      	nop
 8009f52:	3724      	adds	r7, #36	; 0x24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b095      	sub	sp, #84	; 0x54
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	330c      	adds	r3, #12
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	330c      	adds	r3, #12
 8009f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f84:	643a      	str	r2, [r7, #64]	; 0x40
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e5      	bne.n	8009f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f023 0301 	bic.w	r3, r3, #1
 8009fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3314      	adds	r3, #20
 8009fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e5      	bne.n	8009f98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d119      	bne.n	800a008 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f023 0310 	bic.w	r3, r3, #16
 8009fea:	647b      	str	r3, [r7, #68]	; 0x44
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	330c      	adds	r3, #12
 8009ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ff4:	61ba      	str	r2, [r7, #24]
 8009ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6979      	ldr	r1, [r7, #20]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	613b      	str	r3, [r7, #16]
   return(result);
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e5      	bne.n	8009fd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2220      	movs	r2, #32
 800a00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a016:	bf00      	nop
 800a018:	3754      	adds	r7, #84	; 0x54
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7ff fd4b 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a042:	bf00      	nop
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b21      	cmp	r3, #33	; 0x21
 800a05c:	d13e      	bne.n	800a0dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a066:	d114      	bne.n	800a092 <UART_Transmit_IT+0x48>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d110      	bne.n	800a092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	1c9a      	adds	r2, r3, #2
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	621a      	str	r2, [r3, #32]
 800a090:	e008      	b.n	800a0a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	1c59      	adds	r1, r3, #1
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6211      	str	r1, [r2, #32]
 800a09c:	781a      	ldrb	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10f      	bne.n	800a0d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e000      	b.n	800a0de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a0dc:	2302      	movs	r3, #2
  }
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2220      	movs	r2, #32
 800a106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff fcd0 	bl	8009ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b08c      	sub	sp, #48	; 0x30
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b22      	cmp	r3, #34	; 0x22
 800a12c:	f040 80ab 	bne.w	800a286 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a138:	d117      	bne.n	800a16a <UART_Receive_IT+0x50>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d113      	bne.n	800a16a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	b29b      	uxth	r3, r3
 800a154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	1c9a      	adds	r2, r3, #2
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	629a      	str	r2, [r3, #40]	; 0x28
 800a168:	e026      	b.n	800a1b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a170:	2300      	movs	r3, #0
 800a172:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17c:	d007      	beq.n	800a18e <UART_Receive_IT+0x74>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <UART_Receive_IT+0x82>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	b2da      	uxtb	r2, r3
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	701a      	strb	r2, [r3, #0]
 800a19a:	e008      	b.n	800a1ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d15a      	bne.n	800a282 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0220 	bic.w	r2, r2, #32
 800a1da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68da      	ldr	r2, [r3, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	695a      	ldr	r2, [r3, #20]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 0201 	bic.w	r2, r2, #1
 800a1fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d135      	bne.n	800a278 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	330c      	adds	r3, #12
 800a218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	613b      	str	r3, [r7, #16]
   return(result);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f023 0310 	bic.w	r3, r3, #16
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a232:	623a      	str	r2, [r7, #32]
 800a234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	69f9      	ldr	r1, [r7, #28]
 800a238:	6a3a      	ldr	r2, [r7, #32]
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e5      	bne.n	800a212 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0310 	and.w	r3, r3, #16
 800a250:	2b10      	cmp	r3, #16
 800a252:	d10a      	bne.n	800a26a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a254:	2300      	movs	r3, #0
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff fc3b 	bl	8009aec <HAL_UARTEx_RxEventCallback>
 800a276:	e002      	b.n	800a27e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7f8 fd25 	bl	8002cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	e002      	b.n	800a288 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	e000      	b.n	800a288 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a286:	2302      	movs	r3, #2
  }
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3730      	adds	r7, #48	; 0x30
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a294:	b0c0      	sub	sp, #256	; 0x100
 800a296:	af00      	add	r7, sp, #0
 800a298:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ac:	68d9      	ldr	r1, [r3, #12]
 800a2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	ea40 0301 	orr.w	r3, r0, r1
 800a2b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2be:	689a      	ldr	r2, [r3, #8]
 800a2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2e8:	f021 010c 	bic.w	r1, r1, #12
 800a2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2f6:	430b      	orrs	r3, r1
 800a2f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30a:	6999      	ldr	r1, [r3, #24]
 800a30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	ea40 0301 	orr.w	r3, r0, r1
 800a316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	4b8f      	ldr	r3, [pc, #572]	; (800a55c <UART_SetConfig+0x2cc>)
 800a320:	429a      	cmp	r2, r3
 800a322:	d005      	beq.n	800a330 <UART_SetConfig+0xa0>
 800a324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4b8d      	ldr	r3, [pc, #564]	; (800a560 <UART_SetConfig+0x2d0>)
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d104      	bne.n	800a33a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a330:	f7fe f806 	bl	8008340 <HAL_RCC_GetPCLK2Freq>
 800a334:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a338:	e003      	b.n	800a342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a33a:	f7fd ffed 	bl	8008318 <HAL_RCC_GetPCLK1Freq>
 800a33e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a34c:	f040 810c 	bne.w	800a568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a354:	2200      	movs	r2, #0
 800a356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a35a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a35e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a362:	4622      	mov	r2, r4
 800a364:	462b      	mov	r3, r5
 800a366:	1891      	adds	r1, r2, r2
 800a368:	65b9      	str	r1, [r7, #88]	; 0x58
 800a36a:	415b      	adcs	r3, r3
 800a36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a36e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a372:	4621      	mov	r1, r4
 800a374:	eb12 0801 	adds.w	r8, r2, r1
 800a378:	4629      	mov	r1, r5
 800a37a:	eb43 0901 	adc.w	r9, r3, r1
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	f04f 0300 	mov.w	r3, #0
 800a386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a38a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a38e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a392:	4690      	mov	r8, r2
 800a394:	4699      	mov	r9, r3
 800a396:	4623      	mov	r3, r4
 800a398:	eb18 0303 	adds.w	r3, r8, r3
 800a39c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3a0:	462b      	mov	r3, r5
 800a3a2:	eb49 0303 	adc.w	r3, r9, r3
 800a3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a3ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a3be:	460b      	mov	r3, r1
 800a3c0:	18db      	adds	r3, r3, r3
 800a3c2:	653b      	str	r3, [r7, #80]	; 0x50
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	eb42 0303 	adc.w	r3, r2, r3
 800a3ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a3cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a3d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3d4:	f7f6 fc60 	bl	8000c98 <__aeabi_uldivmod>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4b61      	ldr	r3, [pc, #388]	; (800a564 <UART_SetConfig+0x2d4>)
 800a3de:	fba3 2302 	umull	r2, r3, r3, r2
 800a3e2:	095b      	lsrs	r3, r3, #5
 800a3e4:	011c      	lsls	r4, r3, #4
 800a3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a3f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	1891      	adds	r1, r2, r2
 800a3fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800a400:	415b      	adcs	r3, r3
 800a402:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a408:	4641      	mov	r1, r8
 800a40a:	eb12 0a01 	adds.w	sl, r2, r1
 800a40e:	4649      	mov	r1, r9
 800a410:	eb43 0b01 	adc.w	fp, r3, r1
 800a414:	f04f 0200 	mov.w	r2, #0
 800a418:	f04f 0300 	mov.w	r3, #0
 800a41c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a428:	4692      	mov	sl, r2
 800a42a:	469b      	mov	fp, r3
 800a42c:	4643      	mov	r3, r8
 800a42e:	eb1a 0303 	adds.w	r3, sl, r3
 800a432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a436:	464b      	mov	r3, r9
 800a438:	eb4b 0303 	adc.w	r3, fp, r3
 800a43c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a44c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a454:	460b      	mov	r3, r1
 800a456:	18db      	adds	r3, r3, r3
 800a458:	643b      	str	r3, [r7, #64]	; 0x40
 800a45a:	4613      	mov	r3, r2
 800a45c:	eb42 0303 	adc.w	r3, r2, r3
 800a460:	647b      	str	r3, [r7, #68]	; 0x44
 800a462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a46a:	f7f6 fc15 	bl	8000c98 <__aeabi_uldivmod>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4611      	mov	r1, r2
 800a474:	4b3b      	ldr	r3, [pc, #236]	; (800a564 <UART_SetConfig+0x2d4>)
 800a476:	fba3 2301 	umull	r2, r3, r3, r1
 800a47a:	095b      	lsrs	r3, r3, #5
 800a47c:	2264      	movs	r2, #100	; 0x64
 800a47e:	fb02 f303 	mul.w	r3, r2, r3
 800a482:	1acb      	subs	r3, r1, r3
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a48a:	4b36      	ldr	r3, [pc, #216]	; (800a564 <UART_SetConfig+0x2d4>)
 800a48c:	fba3 2302 	umull	r2, r3, r3, r2
 800a490:	095b      	lsrs	r3, r3, #5
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a498:	441c      	add	r4, r3
 800a49a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a4a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a4ac:	4642      	mov	r2, r8
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	1891      	adds	r1, r2, r2
 800a4b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4b4:	415b      	adcs	r3, r3
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4bc:	4641      	mov	r1, r8
 800a4be:	1851      	adds	r1, r2, r1
 800a4c0:	6339      	str	r1, [r7, #48]	; 0x30
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	414b      	adcs	r3, r1
 800a4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c8:	f04f 0200 	mov.w	r2, #0
 800a4cc:	f04f 0300 	mov.w	r3, #0
 800a4d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	00cb      	lsls	r3, r1, #3
 800a4d8:	4651      	mov	r1, sl
 800a4da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4de:	4651      	mov	r1, sl
 800a4e0:	00ca      	lsls	r2, r1, #3
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4642      	mov	r2, r8
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	460a      	mov	r2, r1
 800a4f4:	eb42 0303 	adc.w	r3, r2, r3
 800a4f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a508:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a50c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a510:	460b      	mov	r3, r1
 800a512:	18db      	adds	r3, r3, r3
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
 800a516:	4613      	mov	r3, r2
 800a518:	eb42 0303 	adc.w	r3, r2, r3
 800a51c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a51e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a526:	f7f6 fbb7 	bl	8000c98 <__aeabi_uldivmod>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <UART_SetConfig+0x2d4>)
 800a530:	fba3 1302 	umull	r1, r3, r3, r2
 800a534:	095b      	lsrs	r3, r3, #5
 800a536:	2164      	movs	r1, #100	; 0x64
 800a538:	fb01 f303 	mul.w	r3, r1, r3
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	3332      	adds	r3, #50	; 0x32
 800a542:	4a08      	ldr	r2, [pc, #32]	; (800a564 <UART_SetConfig+0x2d4>)
 800a544:	fba2 2303 	umull	r2, r3, r2, r3
 800a548:	095b      	lsrs	r3, r3, #5
 800a54a:	f003 0207 	and.w	r2, r3, #7
 800a54e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4422      	add	r2, r4
 800a556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a558:	e105      	b.n	800a766 <UART_SetConfig+0x4d6>
 800a55a:	bf00      	nop
 800a55c:	40011000 	.word	0x40011000
 800a560:	40011400 	.word	0x40011400
 800a564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a572:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a57a:	4642      	mov	r2, r8
 800a57c:	464b      	mov	r3, r9
 800a57e:	1891      	adds	r1, r2, r2
 800a580:	6239      	str	r1, [r7, #32]
 800a582:	415b      	adcs	r3, r3
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
 800a586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a58a:	4641      	mov	r1, r8
 800a58c:	1854      	adds	r4, r2, r1
 800a58e:	4649      	mov	r1, r9
 800a590:	eb43 0501 	adc.w	r5, r3, r1
 800a594:	f04f 0200 	mov.w	r2, #0
 800a598:	f04f 0300 	mov.w	r3, #0
 800a59c:	00eb      	lsls	r3, r5, #3
 800a59e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5a2:	00e2      	lsls	r2, r4, #3
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	461d      	mov	r5, r3
 800a5a8:	4643      	mov	r3, r8
 800a5aa:	18e3      	adds	r3, r4, r3
 800a5ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5b0:	464b      	mov	r3, r9
 800a5b2:	eb45 0303 	adc.w	r3, r5, r3
 800a5b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a5ca:	f04f 0200 	mov.w	r2, #0
 800a5ce:	f04f 0300 	mov.w	r3, #0
 800a5d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	008b      	lsls	r3, r1, #2
 800a5da:	4621      	mov	r1, r4
 800a5dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	008a      	lsls	r2, r1, #2
 800a5e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5e8:	f7f6 fb56 	bl	8000c98 <__aeabi_uldivmod>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4b60      	ldr	r3, [pc, #384]	; (800a774 <UART_SetConfig+0x4e4>)
 800a5f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a5f6:	095b      	lsrs	r3, r3, #5
 800a5f8:	011c      	lsls	r4, r3, #4
 800a5fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a604:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a60c:	4642      	mov	r2, r8
 800a60e:	464b      	mov	r3, r9
 800a610:	1891      	adds	r1, r2, r2
 800a612:	61b9      	str	r1, [r7, #24]
 800a614:	415b      	adcs	r3, r3
 800a616:	61fb      	str	r3, [r7, #28]
 800a618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a61c:	4641      	mov	r1, r8
 800a61e:	1851      	adds	r1, r2, r1
 800a620:	6139      	str	r1, [r7, #16]
 800a622:	4649      	mov	r1, r9
 800a624:	414b      	adcs	r3, r1
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	f04f 0200 	mov.w	r2, #0
 800a62c:	f04f 0300 	mov.w	r3, #0
 800a630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a634:	4659      	mov	r1, fp
 800a636:	00cb      	lsls	r3, r1, #3
 800a638:	4651      	mov	r1, sl
 800a63a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a63e:	4651      	mov	r1, sl
 800a640:	00ca      	lsls	r2, r1, #3
 800a642:	4610      	mov	r0, r2
 800a644:	4619      	mov	r1, r3
 800a646:	4603      	mov	r3, r0
 800a648:	4642      	mov	r2, r8
 800a64a:	189b      	adds	r3, r3, r2
 800a64c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a650:	464b      	mov	r3, r9
 800a652:	460a      	mov	r2, r1
 800a654:	eb42 0303 	adc.w	r3, r2, r3
 800a658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	67bb      	str	r3, [r7, #120]	; 0x78
 800a666:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a668:	f04f 0200 	mov.w	r2, #0
 800a66c:	f04f 0300 	mov.w	r3, #0
 800a670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a674:	4649      	mov	r1, r9
 800a676:	008b      	lsls	r3, r1, #2
 800a678:	4641      	mov	r1, r8
 800a67a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a67e:	4641      	mov	r1, r8
 800a680:	008a      	lsls	r2, r1, #2
 800a682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a686:	f7f6 fb07 	bl	8000c98 <__aeabi_uldivmod>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4b39      	ldr	r3, [pc, #228]	; (800a774 <UART_SetConfig+0x4e4>)
 800a690:	fba3 1302 	umull	r1, r3, r3, r2
 800a694:	095b      	lsrs	r3, r3, #5
 800a696:	2164      	movs	r1, #100	; 0x64
 800a698:	fb01 f303 	mul.w	r3, r1, r3
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	011b      	lsls	r3, r3, #4
 800a6a0:	3332      	adds	r3, #50	; 0x32
 800a6a2:	4a34      	ldr	r2, [pc, #208]	; (800a774 <UART_SetConfig+0x4e4>)
 800a6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a8:	095b      	lsrs	r3, r3, #5
 800a6aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ae:	441c      	add	r4, r3
 800a6b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	673b      	str	r3, [r7, #112]	; 0x70
 800a6b8:	677a      	str	r2, [r7, #116]	; 0x74
 800a6ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	1891      	adds	r1, r2, r2
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	415b      	adcs	r3, r3
 800a6c8:	60fb      	str	r3, [r7, #12]
 800a6ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6ce:	4641      	mov	r1, r8
 800a6d0:	1851      	adds	r1, r2, r1
 800a6d2:	6039      	str	r1, [r7, #0]
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	414b      	adcs	r3, r1
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	f04f 0200 	mov.w	r2, #0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6e6:	4659      	mov	r1, fp
 800a6e8:	00cb      	lsls	r3, r1, #3
 800a6ea:	4651      	mov	r1, sl
 800a6ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6f0:	4651      	mov	r1, sl
 800a6f2:	00ca      	lsls	r2, r1, #3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	4642      	mov	r2, r8
 800a6fc:	189b      	adds	r3, r3, r2
 800a6fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a700:	464b      	mov	r3, r9
 800a702:	460a      	mov	r2, r1
 800a704:	eb42 0303 	adc.w	r3, r2, r3
 800a708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	663b      	str	r3, [r7, #96]	; 0x60
 800a714:	667a      	str	r2, [r7, #100]	; 0x64
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	f04f 0300 	mov.w	r3, #0
 800a71e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a722:	4649      	mov	r1, r9
 800a724:	008b      	lsls	r3, r1, #2
 800a726:	4641      	mov	r1, r8
 800a728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a72c:	4641      	mov	r1, r8
 800a72e:	008a      	lsls	r2, r1, #2
 800a730:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a734:	f7f6 fab0 	bl	8000c98 <__aeabi_uldivmod>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <UART_SetConfig+0x4e4>)
 800a73e:	fba3 1302 	umull	r1, r3, r3, r2
 800a742:	095b      	lsrs	r3, r3, #5
 800a744:	2164      	movs	r1, #100	; 0x64
 800a746:	fb01 f303 	mul.w	r3, r1, r3
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	3332      	adds	r3, #50	; 0x32
 800a750:	4a08      	ldr	r2, [pc, #32]	; (800a774 <UART_SetConfig+0x4e4>)
 800a752:	fba2 2303 	umull	r2, r3, r2, r3
 800a756:	095b      	lsrs	r3, r3, #5
 800a758:	f003 020f 	and.w	r2, r3, #15
 800a75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4422      	add	r2, r4
 800a764:	609a      	str	r2, [r3, #8]
}
 800a766:	bf00      	nop
 800a768:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a76c:	46bd      	mov	sp, r7
 800a76e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a772:	bf00      	nop
 800a774:	51eb851f 	.word	0x51eb851f

0800a778 <__errno>:
 800a778:	4b01      	ldr	r3, [pc, #4]	; (800a780 <__errno+0x8>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20000044 	.word	0x20000044

0800a784 <__libc_init_array>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4d0d      	ldr	r5, [pc, #52]	; (800a7bc <__libc_init_array+0x38>)
 800a788:	4c0d      	ldr	r4, [pc, #52]	; (800a7c0 <__libc_init_array+0x3c>)
 800a78a:	1b64      	subs	r4, r4, r5
 800a78c:	10a4      	asrs	r4, r4, #2
 800a78e:	2600      	movs	r6, #0
 800a790:	42a6      	cmp	r6, r4
 800a792:	d109      	bne.n	800a7a8 <__libc_init_array+0x24>
 800a794:	4d0b      	ldr	r5, [pc, #44]	; (800a7c4 <__libc_init_array+0x40>)
 800a796:	4c0c      	ldr	r4, [pc, #48]	; (800a7c8 <__libc_init_array+0x44>)
 800a798:	f002 ff76 	bl	800d688 <_init>
 800a79c:	1b64      	subs	r4, r4, r5
 800a79e:	10a4      	asrs	r4, r4, #2
 800a7a0:	2600      	movs	r6, #0
 800a7a2:	42a6      	cmp	r6, r4
 800a7a4:	d105      	bne.n	800a7b2 <__libc_init_array+0x2e>
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ac:	4798      	blx	r3
 800a7ae:	3601      	adds	r6, #1
 800a7b0:	e7ee      	b.n	800a790 <__libc_init_array+0xc>
 800a7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b6:	4798      	blx	r3
 800a7b8:	3601      	adds	r6, #1
 800a7ba:	e7f2      	b.n	800a7a2 <__libc_init_array+0x1e>
 800a7bc:	0801911c 	.word	0x0801911c
 800a7c0:	0801911c 	.word	0x0801911c
 800a7c4:	0801911c 	.word	0x0801911c
 800a7c8:	08019120 	.word	0x08019120

0800a7cc <memset>:
 800a7cc:	4402      	add	r2, r0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d100      	bne.n	800a7d6 <memset+0xa>
 800a7d4:	4770      	bx	lr
 800a7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7da:	e7f9      	b.n	800a7d0 <memset+0x4>

0800a7dc <__cvt>:
 800a7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	ec55 4b10 	vmov	r4, r5, d0
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	460e      	mov	r6, r1
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	462b      	mov	r3, r5
 800a7ec:	bfbb      	ittet	lt
 800a7ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a7f2:	461d      	movlt	r5, r3
 800a7f4:	2300      	movge	r3, #0
 800a7f6:	232d      	movlt	r3, #45	; 0x2d
 800a7f8:	700b      	strb	r3, [r1, #0]
 800a7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a800:	4691      	mov	r9, r2
 800a802:	f023 0820 	bic.w	r8, r3, #32
 800a806:	bfbc      	itt	lt
 800a808:	4622      	movlt	r2, r4
 800a80a:	4614      	movlt	r4, r2
 800a80c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a810:	d005      	beq.n	800a81e <__cvt+0x42>
 800a812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a816:	d100      	bne.n	800a81a <__cvt+0x3e>
 800a818:	3601      	adds	r6, #1
 800a81a:	2102      	movs	r1, #2
 800a81c:	e000      	b.n	800a820 <__cvt+0x44>
 800a81e:	2103      	movs	r1, #3
 800a820:	ab03      	add	r3, sp, #12
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	ab02      	add	r3, sp, #8
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	ec45 4b10 	vmov	d0, r4, r5
 800a82c:	4653      	mov	r3, sl
 800a82e:	4632      	mov	r2, r6
 800a830:	f000 fcea 	bl	800b208 <_dtoa_r>
 800a834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a838:	4607      	mov	r7, r0
 800a83a:	d102      	bne.n	800a842 <__cvt+0x66>
 800a83c:	f019 0f01 	tst.w	r9, #1
 800a840:	d022      	beq.n	800a888 <__cvt+0xac>
 800a842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a846:	eb07 0906 	add.w	r9, r7, r6
 800a84a:	d110      	bne.n	800a86e <__cvt+0x92>
 800a84c:	783b      	ldrb	r3, [r7, #0]
 800a84e:	2b30      	cmp	r3, #48	; 0x30
 800a850:	d10a      	bne.n	800a868 <__cvt+0x8c>
 800a852:	2200      	movs	r2, #0
 800a854:	2300      	movs	r3, #0
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f6 f93d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a85e:	b918      	cbnz	r0, 800a868 <__cvt+0x8c>
 800a860:	f1c6 0601 	rsb	r6, r6, #1
 800a864:	f8ca 6000 	str.w	r6, [sl]
 800a868:	f8da 3000 	ldr.w	r3, [sl]
 800a86c:	4499      	add	r9, r3
 800a86e:	2200      	movs	r2, #0
 800a870:	2300      	movs	r3, #0
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f6 f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a87a:	b108      	cbz	r0, 800a880 <__cvt+0xa4>
 800a87c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a880:	2230      	movs	r2, #48	; 0x30
 800a882:	9b03      	ldr	r3, [sp, #12]
 800a884:	454b      	cmp	r3, r9
 800a886:	d307      	bcc.n	800a898 <__cvt+0xbc>
 800a888:	9b03      	ldr	r3, [sp, #12]
 800a88a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a88c:	1bdb      	subs	r3, r3, r7
 800a88e:	4638      	mov	r0, r7
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	b004      	add	sp, #16
 800a894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a898:	1c59      	adds	r1, r3, #1
 800a89a:	9103      	str	r1, [sp, #12]
 800a89c:	701a      	strb	r2, [r3, #0]
 800a89e:	e7f0      	b.n	800a882 <__cvt+0xa6>

0800a8a0 <__exponent>:
 800a8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	bfb8      	it	lt
 800a8a8:	4249      	neglt	r1, r1
 800a8aa:	f803 2b02 	strb.w	r2, [r3], #2
 800a8ae:	bfb4      	ite	lt
 800a8b0:	222d      	movlt	r2, #45	; 0x2d
 800a8b2:	222b      	movge	r2, #43	; 0x2b
 800a8b4:	2909      	cmp	r1, #9
 800a8b6:	7042      	strb	r2, [r0, #1]
 800a8b8:	dd2a      	ble.n	800a910 <__exponent+0x70>
 800a8ba:	f10d 0407 	add.w	r4, sp, #7
 800a8be:	46a4      	mov	ip, r4
 800a8c0:	270a      	movs	r7, #10
 800a8c2:	46a6      	mov	lr, r4
 800a8c4:	460a      	mov	r2, r1
 800a8c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a8ca:	fb07 1516 	mls	r5, r7, r6, r1
 800a8ce:	3530      	adds	r5, #48	; 0x30
 800a8d0:	2a63      	cmp	r2, #99	; 0x63
 800a8d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a8d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a8da:	4631      	mov	r1, r6
 800a8dc:	dcf1      	bgt.n	800a8c2 <__exponent+0x22>
 800a8de:	3130      	adds	r1, #48	; 0x30
 800a8e0:	f1ae 0502 	sub.w	r5, lr, #2
 800a8e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a8e8:	1c44      	adds	r4, r0, #1
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	4561      	cmp	r1, ip
 800a8ee:	d30a      	bcc.n	800a906 <__exponent+0x66>
 800a8f0:	f10d 0209 	add.w	r2, sp, #9
 800a8f4:	eba2 020e 	sub.w	r2, r2, lr
 800a8f8:	4565      	cmp	r5, ip
 800a8fa:	bf88      	it	hi
 800a8fc:	2200      	movhi	r2, #0
 800a8fe:	4413      	add	r3, r2
 800a900:	1a18      	subs	r0, r3, r0
 800a902:	b003      	add	sp, #12
 800a904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a90a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a90e:	e7ed      	b.n	800a8ec <__exponent+0x4c>
 800a910:	2330      	movs	r3, #48	; 0x30
 800a912:	3130      	adds	r1, #48	; 0x30
 800a914:	7083      	strb	r3, [r0, #2]
 800a916:	70c1      	strb	r1, [r0, #3]
 800a918:	1d03      	adds	r3, r0, #4
 800a91a:	e7f1      	b.n	800a900 <__exponent+0x60>

0800a91c <_printf_float>:
 800a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a920:	ed2d 8b02 	vpush	{d8}
 800a924:	b08d      	sub	sp, #52	; 0x34
 800a926:	460c      	mov	r4, r1
 800a928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a92c:	4616      	mov	r6, r2
 800a92e:	461f      	mov	r7, r3
 800a930:	4605      	mov	r5, r0
 800a932:	f001 fa57 	bl	800bde4 <_localeconv_r>
 800a936:	f8d0 a000 	ldr.w	sl, [r0]
 800a93a:	4650      	mov	r0, sl
 800a93c:	f7f5 fc50 	bl	80001e0 <strlen>
 800a940:	2300      	movs	r3, #0
 800a942:	930a      	str	r3, [sp, #40]	; 0x28
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	9305      	str	r3, [sp, #20]
 800a948:	f8d8 3000 	ldr.w	r3, [r8]
 800a94c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a950:	3307      	adds	r3, #7
 800a952:	f023 0307 	bic.w	r3, r3, #7
 800a956:	f103 0208 	add.w	r2, r3, #8
 800a95a:	f8c8 2000 	str.w	r2, [r8]
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a966:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a96a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	f8cd 8018 	str.w	r8, [sp, #24]
 800a974:	ee08 0a10 	vmov	s16, r0
 800a978:	4b9f      	ldr	r3, [pc, #636]	; (800abf8 <_printf_float+0x2dc>)
 800a97a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	f7f6 f8db 	bl	8000b3c <__aeabi_dcmpun>
 800a986:	bb88      	cbnz	r0, 800a9ec <_printf_float+0xd0>
 800a988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a98c:	4b9a      	ldr	r3, [pc, #616]	; (800abf8 <_printf_float+0x2dc>)
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	f7f6 f8b5 	bl	8000b00 <__aeabi_dcmple>
 800a996:	bb48      	cbnz	r0, 800a9ec <_printf_float+0xd0>
 800a998:	2200      	movs	r2, #0
 800a99a:	2300      	movs	r3, #0
 800a99c:	4640      	mov	r0, r8
 800a99e:	4649      	mov	r1, r9
 800a9a0:	f7f6 f8a4 	bl	8000aec <__aeabi_dcmplt>
 800a9a4:	b110      	cbz	r0, 800a9ac <_printf_float+0x90>
 800a9a6:	232d      	movs	r3, #45	; 0x2d
 800a9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ac:	4b93      	ldr	r3, [pc, #588]	; (800abfc <_printf_float+0x2e0>)
 800a9ae:	4894      	ldr	r0, [pc, #592]	; (800ac00 <_printf_float+0x2e4>)
 800a9b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a9b4:	bf94      	ite	ls
 800a9b6:	4698      	movls	r8, r3
 800a9b8:	4680      	movhi	r8, r0
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	6123      	str	r3, [r4, #16]
 800a9be:	9b05      	ldr	r3, [sp, #20]
 800a9c0:	f023 0204 	bic.w	r2, r3, #4
 800a9c4:	6022      	str	r2, [r4, #0]
 800a9c6:	f04f 0900 	mov.w	r9, #0
 800a9ca:	9700      	str	r7, [sp, #0]
 800a9cc:	4633      	mov	r3, r6
 800a9ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 f9d8 	bl	800ad88 <_printf_common>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f040 8090 	bne.w	800aafe <_printf_float+0x1e2>
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	b00d      	add	sp, #52	; 0x34
 800a9e4:	ecbd 8b02 	vpop	{d8}
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	464b      	mov	r3, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f6 f8a2 	bl	8000b3c <__aeabi_dcmpun>
 800a9f8:	b140      	cbz	r0, 800aa0c <_printf_float+0xf0>
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bfbc      	itt	lt
 800aa00:	232d      	movlt	r3, #45	; 0x2d
 800aa02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa06:	487f      	ldr	r0, [pc, #508]	; (800ac04 <_printf_float+0x2e8>)
 800aa08:	4b7f      	ldr	r3, [pc, #508]	; (800ac08 <_printf_float+0x2ec>)
 800aa0a:	e7d1      	b.n	800a9b0 <_printf_float+0x94>
 800aa0c:	6863      	ldr	r3, [r4, #4]
 800aa0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa12:	9206      	str	r2, [sp, #24]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	d13f      	bne.n	800aa98 <_printf_float+0x17c>
 800aa18:	2306      	movs	r3, #6
 800aa1a:	6063      	str	r3, [r4, #4]
 800aa1c:	9b05      	ldr	r3, [sp, #20]
 800aa1e:	6861      	ldr	r1, [r4, #4]
 800aa20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa24:	2300      	movs	r3, #0
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	ab0a      	add	r3, sp, #40	; 0x28
 800aa2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa2e:	ab09      	add	r3, sp, #36	; 0x24
 800aa30:	ec49 8b10 	vmov	d0, r8, r9
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	6022      	str	r2, [r4, #0]
 800aa38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f7ff fecd 	bl	800a7dc <__cvt>
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa46:	2b47      	cmp	r3, #71	; 0x47
 800aa48:	4680      	mov	r8, r0
 800aa4a:	d108      	bne.n	800aa5e <_printf_float+0x142>
 800aa4c:	1cc8      	adds	r0, r1, #3
 800aa4e:	db02      	blt.n	800aa56 <_printf_float+0x13a>
 800aa50:	6863      	ldr	r3, [r4, #4]
 800aa52:	4299      	cmp	r1, r3
 800aa54:	dd41      	ble.n	800aada <_printf_float+0x1be>
 800aa56:	f1ab 0b02 	sub.w	fp, fp, #2
 800aa5a:	fa5f fb8b 	uxtb.w	fp, fp
 800aa5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa62:	d820      	bhi.n	800aaa6 <_printf_float+0x18a>
 800aa64:	3901      	subs	r1, #1
 800aa66:	465a      	mov	r2, fp
 800aa68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa6c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa6e:	f7ff ff17 	bl	800a8a0 <__exponent>
 800aa72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa74:	1813      	adds	r3, r2, r0
 800aa76:	2a01      	cmp	r2, #1
 800aa78:	4681      	mov	r9, r0
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	dc02      	bgt.n	800aa84 <_printf_float+0x168>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	07d2      	lsls	r2, r2, #31
 800aa82:	d501      	bpl.n	800aa88 <_printf_float+0x16c>
 800aa84:	3301      	adds	r3, #1
 800aa86:	6123      	str	r3, [r4, #16]
 800aa88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d09c      	beq.n	800a9ca <_printf_float+0xae>
 800aa90:	232d      	movs	r3, #45	; 0x2d
 800aa92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa96:	e798      	b.n	800a9ca <_printf_float+0xae>
 800aa98:	9a06      	ldr	r2, [sp, #24]
 800aa9a:	2a47      	cmp	r2, #71	; 0x47
 800aa9c:	d1be      	bne.n	800aa1c <_printf_float+0x100>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1bc      	bne.n	800aa1c <_printf_float+0x100>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e7b9      	b.n	800aa1a <_printf_float+0xfe>
 800aaa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aaaa:	d118      	bne.n	800aade <_printf_float+0x1c2>
 800aaac:	2900      	cmp	r1, #0
 800aaae:	6863      	ldr	r3, [r4, #4]
 800aab0:	dd0b      	ble.n	800aaca <_printf_float+0x1ae>
 800aab2:	6121      	str	r1, [r4, #16]
 800aab4:	b913      	cbnz	r3, 800aabc <_printf_float+0x1a0>
 800aab6:	6822      	ldr	r2, [r4, #0]
 800aab8:	07d0      	lsls	r0, r2, #31
 800aaba:	d502      	bpl.n	800aac2 <_printf_float+0x1a6>
 800aabc:	3301      	adds	r3, #1
 800aabe:	440b      	add	r3, r1
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	65a1      	str	r1, [r4, #88]	; 0x58
 800aac4:	f04f 0900 	mov.w	r9, #0
 800aac8:	e7de      	b.n	800aa88 <_printf_float+0x16c>
 800aaca:	b913      	cbnz	r3, 800aad2 <_printf_float+0x1b6>
 800aacc:	6822      	ldr	r2, [r4, #0]
 800aace:	07d2      	lsls	r2, r2, #31
 800aad0:	d501      	bpl.n	800aad6 <_printf_float+0x1ba>
 800aad2:	3302      	adds	r3, #2
 800aad4:	e7f4      	b.n	800aac0 <_printf_float+0x1a4>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e7f2      	b.n	800aac0 <_printf_float+0x1a4>
 800aada:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae0:	4299      	cmp	r1, r3
 800aae2:	db05      	blt.n	800aaf0 <_printf_float+0x1d4>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	6121      	str	r1, [r4, #16]
 800aae8:	07d8      	lsls	r0, r3, #31
 800aaea:	d5ea      	bpl.n	800aac2 <_printf_float+0x1a6>
 800aaec:	1c4b      	adds	r3, r1, #1
 800aaee:	e7e7      	b.n	800aac0 <_printf_float+0x1a4>
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	bfd4      	ite	le
 800aaf4:	f1c1 0202 	rsble	r2, r1, #2
 800aaf8:	2201      	movgt	r2, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	e7e0      	b.n	800aac0 <_printf_float+0x1a4>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	055a      	lsls	r2, r3, #21
 800ab02:	d407      	bmi.n	800ab14 <_printf_float+0x1f8>
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	4642      	mov	r2, r8
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	47b8      	blx	r7
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d12c      	bne.n	800ab6c <_printf_float+0x250>
 800ab12:	e764      	b.n	800a9de <_printf_float+0xc2>
 800ab14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab18:	f240 80e0 	bls.w	800acdc <_printf_float+0x3c0>
 800ab1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab20:	2200      	movs	r2, #0
 800ab22:	2300      	movs	r3, #0
 800ab24:	f7f5 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d034      	beq.n	800ab96 <_printf_float+0x27a>
 800ab2c:	4a37      	ldr	r2, [pc, #220]	; (800ac0c <_printf_float+0x2f0>)
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	f43f af51 	beq.w	800a9de <_printf_float+0xc2>
 800ab3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab40:	429a      	cmp	r2, r3
 800ab42:	db02      	blt.n	800ab4a <_printf_float+0x22e>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	07d8      	lsls	r0, r3, #31
 800ab48:	d510      	bpl.n	800ab6c <_printf_float+0x250>
 800ab4a:	ee18 3a10 	vmov	r3, s16
 800ab4e:	4652      	mov	r2, sl
 800ab50:	4631      	mov	r1, r6
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b8      	blx	r7
 800ab56:	3001      	adds	r0, #1
 800ab58:	f43f af41 	beq.w	800a9de <_printf_float+0xc2>
 800ab5c:	f04f 0800 	mov.w	r8, #0
 800ab60:	f104 091a 	add.w	r9, r4, #26
 800ab64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab66:	3b01      	subs	r3, #1
 800ab68:	4543      	cmp	r3, r8
 800ab6a:	dc09      	bgt.n	800ab80 <_printf_float+0x264>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	079b      	lsls	r3, r3, #30
 800ab70:	f100 8105 	bmi.w	800ad7e <_printf_float+0x462>
 800ab74:	68e0      	ldr	r0, [r4, #12]
 800ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab78:	4298      	cmp	r0, r3
 800ab7a:	bfb8      	it	lt
 800ab7c:	4618      	movlt	r0, r3
 800ab7e:	e730      	b.n	800a9e2 <_printf_float+0xc6>
 800ab80:	2301      	movs	r3, #1
 800ab82:	464a      	mov	r2, r9
 800ab84:	4631      	mov	r1, r6
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b8      	blx	r7
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	f43f af27 	beq.w	800a9de <_printf_float+0xc2>
 800ab90:	f108 0801 	add.w	r8, r8, #1
 800ab94:	e7e6      	b.n	800ab64 <_printf_float+0x248>
 800ab96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dc39      	bgt.n	800ac10 <_printf_float+0x2f4>
 800ab9c:	4a1b      	ldr	r2, [pc, #108]	; (800ac0c <_printf_float+0x2f0>)
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b8      	blx	r7
 800aba6:	3001      	adds	r0, #1
 800aba8:	f43f af19 	beq.w	800a9de <_printf_float+0xc2>
 800abac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abb0:	4313      	orrs	r3, r2
 800abb2:	d102      	bne.n	800abba <_printf_float+0x29e>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	07d9      	lsls	r1, r3, #31
 800abb8:	d5d8      	bpl.n	800ab6c <_printf_float+0x250>
 800abba:	ee18 3a10 	vmov	r3, s16
 800abbe:	4652      	mov	r2, sl
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	f43f af09 	beq.w	800a9de <_printf_float+0xc2>
 800abcc:	f04f 0900 	mov.w	r9, #0
 800abd0:	f104 0a1a 	add.w	sl, r4, #26
 800abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd6:	425b      	negs	r3, r3
 800abd8:	454b      	cmp	r3, r9
 800abda:	dc01      	bgt.n	800abe0 <_printf_float+0x2c4>
 800abdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abde:	e792      	b.n	800ab06 <_printf_float+0x1ea>
 800abe0:	2301      	movs	r3, #1
 800abe2:	4652      	mov	r2, sl
 800abe4:	4631      	mov	r1, r6
 800abe6:	4628      	mov	r0, r5
 800abe8:	47b8      	blx	r7
 800abea:	3001      	adds	r0, #1
 800abec:	f43f aef7 	beq.w	800a9de <_printf_float+0xc2>
 800abf0:	f109 0901 	add.w	r9, r9, #1
 800abf4:	e7ee      	b.n	800abd4 <_printf_float+0x2b8>
 800abf6:	bf00      	nop
 800abf8:	7fefffff 	.word	0x7fefffff
 800abfc:	08018d40 	.word	0x08018d40
 800ac00:	08018d44 	.word	0x08018d44
 800ac04:	08018d4c 	.word	0x08018d4c
 800ac08:	08018d48 	.word	0x08018d48
 800ac0c:	08018d50 	.word	0x08018d50
 800ac10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac14:	429a      	cmp	r2, r3
 800ac16:	bfa8      	it	ge
 800ac18:	461a      	movge	r2, r3
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	4691      	mov	r9, r2
 800ac1e:	dc37      	bgt.n	800ac90 <_printf_float+0x374>
 800ac20:	f04f 0b00 	mov.w	fp, #0
 800ac24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac28:	f104 021a 	add.w	r2, r4, #26
 800ac2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	eba3 0309 	sub.w	r3, r3, r9
 800ac34:	455b      	cmp	r3, fp
 800ac36:	dc33      	bgt.n	800aca0 <_printf_float+0x384>
 800ac38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	db3b      	blt.n	800acb8 <_printf_float+0x39c>
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	07da      	lsls	r2, r3, #31
 800ac44:	d438      	bmi.n	800acb8 <_printf_float+0x39c>
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	9a05      	ldr	r2, [sp, #20]
 800ac4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac4c:	1a9a      	subs	r2, r3, r2
 800ac4e:	eba3 0901 	sub.w	r9, r3, r1
 800ac52:	4591      	cmp	r9, r2
 800ac54:	bfa8      	it	ge
 800ac56:	4691      	movge	r9, r2
 800ac58:	f1b9 0f00 	cmp.w	r9, #0
 800ac5c:	dc35      	bgt.n	800acca <_printf_float+0x3ae>
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac66:	f104 0a1a 	add.w	sl, r4, #26
 800ac6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	eba3 0309 	sub.w	r3, r3, r9
 800ac74:	4543      	cmp	r3, r8
 800ac76:	f77f af79 	ble.w	800ab6c <_printf_float+0x250>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4628      	mov	r0, r5
 800ac82:	47b8      	blx	r7
 800ac84:	3001      	adds	r0, #1
 800ac86:	f43f aeaa 	beq.w	800a9de <_printf_float+0xc2>
 800ac8a:	f108 0801 	add.w	r8, r8, #1
 800ac8e:	e7ec      	b.n	800ac6a <_printf_float+0x34e>
 800ac90:	4613      	mov	r3, r2
 800ac92:	4631      	mov	r1, r6
 800ac94:	4642      	mov	r2, r8
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d1c0      	bne.n	800ac20 <_printf_float+0x304>
 800ac9e:	e69e      	b.n	800a9de <_printf_float+0xc2>
 800aca0:	2301      	movs	r3, #1
 800aca2:	4631      	mov	r1, r6
 800aca4:	4628      	mov	r0, r5
 800aca6:	9205      	str	r2, [sp, #20]
 800aca8:	47b8      	blx	r7
 800acaa:	3001      	adds	r0, #1
 800acac:	f43f ae97 	beq.w	800a9de <_printf_float+0xc2>
 800acb0:	9a05      	ldr	r2, [sp, #20]
 800acb2:	f10b 0b01 	add.w	fp, fp, #1
 800acb6:	e7b9      	b.n	800ac2c <_printf_float+0x310>
 800acb8:	ee18 3a10 	vmov	r3, s16
 800acbc:	4652      	mov	r2, sl
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b8      	blx	r7
 800acc4:	3001      	adds	r0, #1
 800acc6:	d1be      	bne.n	800ac46 <_printf_float+0x32a>
 800acc8:	e689      	b.n	800a9de <_printf_float+0xc2>
 800acca:	9a05      	ldr	r2, [sp, #20]
 800accc:	464b      	mov	r3, r9
 800acce:	4442      	add	r2, r8
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	d1c1      	bne.n	800ac5e <_printf_float+0x342>
 800acda:	e680      	b.n	800a9de <_printf_float+0xc2>
 800acdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acde:	2a01      	cmp	r2, #1
 800ace0:	dc01      	bgt.n	800ace6 <_printf_float+0x3ca>
 800ace2:	07db      	lsls	r3, r3, #31
 800ace4:	d538      	bpl.n	800ad58 <_printf_float+0x43c>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4642      	mov	r2, r8
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	f43f ae74 	beq.w	800a9de <_printf_float+0xc2>
 800acf6:	ee18 3a10 	vmov	r3, s16
 800acfa:	4652      	mov	r2, sl
 800acfc:	4631      	mov	r1, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b8      	blx	r7
 800ad02:	3001      	adds	r0, #1
 800ad04:	f43f ae6b 	beq.w	800a9de <_printf_float+0xc2>
 800ad08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f7f5 fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad14:	b9d8      	cbnz	r0, 800ad4e <_printf_float+0x432>
 800ad16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad18:	f108 0201 	add.w	r2, r8, #1
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	d10e      	bne.n	800ad46 <_printf_float+0x42a>
 800ad28:	e659      	b.n	800a9de <_printf_float+0xc2>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4652      	mov	r2, sl
 800ad2e:	4631      	mov	r1, r6
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b8      	blx	r7
 800ad34:	3001      	adds	r0, #1
 800ad36:	f43f ae52 	beq.w	800a9de <_printf_float+0xc2>
 800ad3a:	f108 0801 	add.w	r8, r8, #1
 800ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad40:	3b01      	subs	r3, #1
 800ad42:	4543      	cmp	r3, r8
 800ad44:	dcf1      	bgt.n	800ad2a <_printf_float+0x40e>
 800ad46:	464b      	mov	r3, r9
 800ad48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad4c:	e6dc      	b.n	800ab08 <_printf_float+0x1ec>
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	f104 0a1a 	add.w	sl, r4, #26
 800ad56:	e7f2      	b.n	800ad3e <_printf_float+0x422>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	4642      	mov	r2, r8
 800ad5c:	e7df      	b.n	800ad1e <_printf_float+0x402>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	464a      	mov	r2, r9
 800ad62:	4631      	mov	r1, r6
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b8      	blx	r7
 800ad68:	3001      	adds	r0, #1
 800ad6a:	f43f ae38 	beq.w	800a9de <_printf_float+0xc2>
 800ad6e:	f108 0801 	add.w	r8, r8, #1
 800ad72:	68e3      	ldr	r3, [r4, #12]
 800ad74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad76:	1a5b      	subs	r3, r3, r1
 800ad78:	4543      	cmp	r3, r8
 800ad7a:	dcf0      	bgt.n	800ad5e <_printf_float+0x442>
 800ad7c:	e6fa      	b.n	800ab74 <_printf_float+0x258>
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	f104 0919 	add.w	r9, r4, #25
 800ad86:	e7f4      	b.n	800ad72 <_printf_float+0x456>

0800ad88 <_printf_common>:
 800ad88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	4699      	mov	r9, r3
 800ad90:	688a      	ldr	r2, [r1, #8]
 800ad92:	690b      	ldr	r3, [r1, #16]
 800ad94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	bfb8      	it	lt
 800ad9c:	4613      	movlt	r3, r2
 800ad9e:	6033      	str	r3, [r6, #0]
 800ada0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ada4:	4607      	mov	r7, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	b10a      	cbz	r2, 800adae <_printf_common+0x26>
 800adaa:	3301      	adds	r3, #1
 800adac:	6033      	str	r3, [r6, #0]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	0699      	lsls	r1, r3, #26
 800adb2:	bf42      	ittt	mi
 800adb4:	6833      	ldrmi	r3, [r6, #0]
 800adb6:	3302      	addmi	r3, #2
 800adb8:	6033      	strmi	r3, [r6, #0]
 800adba:	6825      	ldr	r5, [r4, #0]
 800adbc:	f015 0506 	ands.w	r5, r5, #6
 800adc0:	d106      	bne.n	800add0 <_printf_common+0x48>
 800adc2:	f104 0a19 	add.w	sl, r4, #25
 800adc6:	68e3      	ldr	r3, [r4, #12]
 800adc8:	6832      	ldr	r2, [r6, #0]
 800adca:	1a9b      	subs	r3, r3, r2
 800adcc:	42ab      	cmp	r3, r5
 800adce:	dc26      	bgt.n	800ae1e <_printf_common+0x96>
 800add0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800add4:	1e13      	subs	r3, r2, #0
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	bf18      	it	ne
 800adda:	2301      	movne	r3, #1
 800addc:	0692      	lsls	r2, r2, #26
 800adde:	d42b      	bmi.n	800ae38 <_printf_common+0xb0>
 800ade0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ade4:	4649      	mov	r1, r9
 800ade6:	4638      	mov	r0, r7
 800ade8:	47c0      	blx	r8
 800adea:	3001      	adds	r0, #1
 800adec:	d01e      	beq.n	800ae2c <_printf_common+0xa4>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	68e5      	ldr	r5, [r4, #12]
 800adf2:	6832      	ldr	r2, [r6, #0]
 800adf4:	f003 0306 	and.w	r3, r3, #6
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	bf08      	it	eq
 800adfc:	1aad      	subeq	r5, r5, r2
 800adfe:	68a3      	ldr	r3, [r4, #8]
 800ae00:	6922      	ldr	r2, [r4, #16]
 800ae02:	bf0c      	ite	eq
 800ae04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae08:	2500      	movne	r5, #0
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	bfc4      	itt	gt
 800ae0e:	1a9b      	subgt	r3, r3, r2
 800ae10:	18ed      	addgt	r5, r5, r3
 800ae12:	2600      	movs	r6, #0
 800ae14:	341a      	adds	r4, #26
 800ae16:	42b5      	cmp	r5, r6
 800ae18:	d11a      	bne.n	800ae50 <_printf_common+0xc8>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	e008      	b.n	800ae30 <_printf_common+0xa8>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4652      	mov	r2, sl
 800ae22:	4649      	mov	r1, r9
 800ae24:	4638      	mov	r0, r7
 800ae26:	47c0      	blx	r8
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d103      	bne.n	800ae34 <_printf_common+0xac>
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae34:	3501      	adds	r5, #1
 800ae36:	e7c6      	b.n	800adc6 <_printf_common+0x3e>
 800ae38:	18e1      	adds	r1, r4, r3
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	2030      	movs	r0, #48	; 0x30
 800ae3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae42:	4422      	add	r2, r4
 800ae44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	e7c7      	b.n	800ade0 <_printf_common+0x58>
 800ae50:	2301      	movs	r3, #1
 800ae52:	4622      	mov	r2, r4
 800ae54:	4649      	mov	r1, r9
 800ae56:	4638      	mov	r0, r7
 800ae58:	47c0      	blx	r8
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d0e6      	beq.n	800ae2c <_printf_common+0xa4>
 800ae5e:	3601      	adds	r6, #1
 800ae60:	e7d9      	b.n	800ae16 <_printf_common+0x8e>
	...

0800ae64 <_printf_i>:
 800ae64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	7e0f      	ldrb	r7, [r1, #24]
 800ae6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae6c:	2f78      	cmp	r7, #120	; 0x78
 800ae6e:	4691      	mov	r9, r2
 800ae70:	4680      	mov	r8, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	469a      	mov	sl, r3
 800ae76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae7a:	d807      	bhi.n	800ae8c <_printf_i+0x28>
 800ae7c:	2f62      	cmp	r7, #98	; 0x62
 800ae7e:	d80a      	bhi.n	800ae96 <_printf_i+0x32>
 800ae80:	2f00      	cmp	r7, #0
 800ae82:	f000 80d8 	beq.w	800b036 <_printf_i+0x1d2>
 800ae86:	2f58      	cmp	r7, #88	; 0x58
 800ae88:	f000 80a3 	beq.w	800afd2 <_printf_i+0x16e>
 800ae8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae94:	e03a      	b.n	800af0c <_printf_i+0xa8>
 800ae96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae9a:	2b15      	cmp	r3, #21
 800ae9c:	d8f6      	bhi.n	800ae8c <_printf_i+0x28>
 800ae9e:	a101      	add	r1, pc, #4	; (adr r1, 800aea4 <_printf_i+0x40>)
 800aea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aea4:	0800aefd 	.word	0x0800aefd
 800aea8:	0800af11 	.word	0x0800af11
 800aeac:	0800ae8d 	.word	0x0800ae8d
 800aeb0:	0800ae8d 	.word	0x0800ae8d
 800aeb4:	0800ae8d 	.word	0x0800ae8d
 800aeb8:	0800ae8d 	.word	0x0800ae8d
 800aebc:	0800af11 	.word	0x0800af11
 800aec0:	0800ae8d 	.word	0x0800ae8d
 800aec4:	0800ae8d 	.word	0x0800ae8d
 800aec8:	0800ae8d 	.word	0x0800ae8d
 800aecc:	0800ae8d 	.word	0x0800ae8d
 800aed0:	0800b01d 	.word	0x0800b01d
 800aed4:	0800af41 	.word	0x0800af41
 800aed8:	0800afff 	.word	0x0800afff
 800aedc:	0800ae8d 	.word	0x0800ae8d
 800aee0:	0800ae8d 	.word	0x0800ae8d
 800aee4:	0800b03f 	.word	0x0800b03f
 800aee8:	0800ae8d 	.word	0x0800ae8d
 800aeec:	0800af41 	.word	0x0800af41
 800aef0:	0800ae8d 	.word	0x0800ae8d
 800aef4:	0800ae8d 	.word	0x0800ae8d
 800aef8:	0800b007 	.word	0x0800b007
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	1d1a      	adds	r2, r3, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	602a      	str	r2, [r5, #0]
 800af04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af0c:	2301      	movs	r3, #1
 800af0e:	e0a3      	b.n	800b058 <_printf_i+0x1f4>
 800af10:	6820      	ldr	r0, [r4, #0]
 800af12:	6829      	ldr	r1, [r5, #0]
 800af14:	0606      	lsls	r6, r0, #24
 800af16:	f101 0304 	add.w	r3, r1, #4
 800af1a:	d50a      	bpl.n	800af32 <_printf_i+0xce>
 800af1c:	680e      	ldr	r6, [r1, #0]
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	2e00      	cmp	r6, #0
 800af22:	da03      	bge.n	800af2c <_printf_i+0xc8>
 800af24:	232d      	movs	r3, #45	; 0x2d
 800af26:	4276      	negs	r6, r6
 800af28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2c:	485e      	ldr	r0, [pc, #376]	; (800b0a8 <_printf_i+0x244>)
 800af2e:	230a      	movs	r3, #10
 800af30:	e019      	b.n	800af66 <_printf_i+0x102>
 800af32:	680e      	ldr	r6, [r1, #0]
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af3a:	bf18      	it	ne
 800af3c:	b236      	sxthne	r6, r6
 800af3e:	e7ef      	b.n	800af20 <_printf_i+0xbc>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	6820      	ldr	r0, [r4, #0]
 800af44:	1d19      	adds	r1, r3, #4
 800af46:	6029      	str	r1, [r5, #0]
 800af48:	0601      	lsls	r1, r0, #24
 800af4a:	d501      	bpl.n	800af50 <_printf_i+0xec>
 800af4c:	681e      	ldr	r6, [r3, #0]
 800af4e:	e002      	b.n	800af56 <_printf_i+0xf2>
 800af50:	0646      	lsls	r6, r0, #25
 800af52:	d5fb      	bpl.n	800af4c <_printf_i+0xe8>
 800af54:	881e      	ldrh	r6, [r3, #0]
 800af56:	4854      	ldr	r0, [pc, #336]	; (800b0a8 <_printf_i+0x244>)
 800af58:	2f6f      	cmp	r7, #111	; 0x6f
 800af5a:	bf0c      	ite	eq
 800af5c:	2308      	moveq	r3, #8
 800af5e:	230a      	movne	r3, #10
 800af60:	2100      	movs	r1, #0
 800af62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af66:	6865      	ldr	r5, [r4, #4]
 800af68:	60a5      	str	r5, [r4, #8]
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	bfa2      	ittt	ge
 800af6e:	6821      	ldrge	r1, [r4, #0]
 800af70:	f021 0104 	bicge.w	r1, r1, #4
 800af74:	6021      	strge	r1, [r4, #0]
 800af76:	b90e      	cbnz	r6, 800af7c <_printf_i+0x118>
 800af78:	2d00      	cmp	r5, #0
 800af7a:	d04d      	beq.n	800b018 <_printf_i+0x1b4>
 800af7c:	4615      	mov	r5, r2
 800af7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800af82:	fb03 6711 	mls	r7, r3, r1, r6
 800af86:	5dc7      	ldrb	r7, [r0, r7]
 800af88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af8c:	4637      	mov	r7, r6
 800af8e:	42bb      	cmp	r3, r7
 800af90:	460e      	mov	r6, r1
 800af92:	d9f4      	bls.n	800af7e <_printf_i+0x11a>
 800af94:	2b08      	cmp	r3, #8
 800af96:	d10b      	bne.n	800afb0 <_printf_i+0x14c>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	07de      	lsls	r6, r3, #31
 800af9c:	d508      	bpl.n	800afb0 <_printf_i+0x14c>
 800af9e:	6923      	ldr	r3, [r4, #16]
 800afa0:	6861      	ldr	r1, [r4, #4]
 800afa2:	4299      	cmp	r1, r3
 800afa4:	bfde      	ittt	le
 800afa6:	2330      	movle	r3, #48	; 0x30
 800afa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afb0:	1b52      	subs	r2, r2, r5
 800afb2:	6122      	str	r2, [r4, #16]
 800afb4:	f8cd a000 	str.w	sl, [sp]
 800afb8:	464b      	mov	r3, r9
 800afba:	aa03      	add	r2, sp, #12
 800afbc:	4621      	mov	r1, r4
 800afbe:	4640      	mov	r0, r8
 800afc0:	f7ff fee2 	bl	800ad88 <_printf_common>
 800afc4:	3001      	adds	r0, #1
 800afc6:	d14c      	bne.n	800b062 <_printf_i+0x1fe>
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	b004      	add	sp, #16
 800afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd2:	4835      	ldr	r0, [pc, #212]	; (800b0a8 <_printf_i+0x244>)
 800afd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800afe0:	6029      	str	r1, [r5, #0]
 800afe2:	061d      	lsls	r5, r3, #24
 800afe4:	d514      	bpl.n	800b010 <_printf_i+0x1ac>
 800afe6:	07df      	lsls	r7, r3, #31
 800afe8:	bf44      	itt	mi
 800afea:	f043 0320 	orrmi.w	r3, r3, #32
 800afee:	6023      	strmi	r3, [r4, #0]
 800aff0:	b91e      	cbnz	r6, 800affa <_printf_i+0x196>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	f023 0320 	bic.w	r3, r3, #32
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	2310      	movs	r3, #16
 800affc:	e7b0      	b.n	800af60 <_printf_i+0xfc>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	f043 0320 	orr.w	r3, r3, #32
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	2378      	movs	r3, #120	; 0x78
 800b008:	4828      	ldr	r0, [pc, #160]	; (800b0ac <_printf_i+0x248>)
 800b00a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b00e:	e7e3      	b.n	800afd8 <_printf_i+0x174>
 800b010:	0659      	lsls	r1, r3, #25
 800b012:	bf48      	it	mi
 800b014:	b2b6      	uxthmi	r6, r6
 800b016:	e7e6      	b.n	800afe6 <_printf_i+0x182>
 800b018:	4615      	mov	r5, r2
 800b01a:	e7bb      	b.n	800af94 <_printf_i+0x130>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	6826      	ldr	r6, [r4, #0]
 800b020:	6961      	ldr	r1, [r4, #20]
 800b022:	1d18      	adds	r0, r3, #4
 800b024:	6028      	str	r0, [r5, #0]
 800b026:	0635      	lsls	r5, r6, #24
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	d501      	bpl.n	800b030 <_printf_i+0x1cc>
 800b02c:	6019      	str	r1, [r3, #0]
 800b02e:	e002      	b.n	800b036 <_printf_i+0x1d2>
 800b030:	0670      	lsls	r0, r6, #25
 800b032:	d5fb      	bpl.n	800b02c <_printf_i+0x1c8>
 800b034:	8019      	strh	r1, [r3, #0]
 800b036:	2300      	movs	r3, #0
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	4615      	mov	r5, r2
 800b03c:	e7ba      	b.n	800afb4 <_printf_i+0x150>
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	602a      	str	r2, [r5, #0]
 800b044:	681d      	ldr	r5, [r3, #0]
 800b046:	6862      	ldr	r2, [r4, #4]
 800b048:	2100      	movs	r1, #0
 800b04a:	4628      	mov	r0, r5
 800b04c:	f7f5 f8d0 	bl	80001f0 <memchr>
 800b050:	b108      	cbz	r0, 800b056 <_printf_i+0x1f2>
 800b052:	1b40      	subs	r0, r0, r5
 800b054:	6060      	str	r0, [r4, #4]
 800b056:	6863      	ldr	r3, [r4, #4]
 800b058:	6123      	str	r3, [r4, #16]
 800b05a:	2300      	movs	r3, #0
 800b05c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b060:	e7a8      	b.n	800afb4 <_printf_i+0x150>
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	462a      	mov	r2, r5
 800b066:	4649      	mov	r1, r9
 800b068:	4640      	mov	r0, r8
 800b06a:	47d0      	blx	sl
 800b06c:	3001      	adds	r0, #1
 800b06e:	d0ab      	beq.n	800afc8 <_printf_i+0x164>
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	079b      	lsls	r3, r3, #30
 800b074:	d413      	bmi.n	800b09e <_printf_i+0x23a>
 800b076:	68e0      	ldr	r0, [r4, #12]
 800b078:	9b03      	ldr	r3, [sp, #12]
 800b07a:	4298      	cmp	r0, r3
 800b07c:	bfb8      	it	lt
 800b07e:	4618      	movlt	r0, r3
 800b080:	e7a4      	b.n	800afcc <_printf_i+0x168>
 800b082:	2301      	movs	r3, #1
 800b084:	4632      	mov	r2, r6
 800b086:	4649      	mov	r1, r9
 800b088:	4640      	mov	r0, r8
 800b08a:	47d0      	blx	sl
 800b08c:	3001      	adds	r0, #1
 800b08e:	d09b      	beq.n	800afc8 <_printf_i+0x164>
 800b090:	3501      	adds	r5, #1
 800b092:	68e3      	ldr	r3, [r4, #12]
 800b094:	9903      	ldr	r1, [sp, #12]
 800b096:	1a5b      	subs	r3, r3, r1
 800b098:	42ab      	cmp	r3, r5
 800b09a:	dcf2      	bgt.n	800b082 <_printf_i+0x21e>
 800b09c:	e7eb      	b.n	800b076 <_printf_i+0x212>
 800b09e:	2500      	movs	r5, #0
 800b0a0:	f104 0619 	add.w	r6, r4, #25
 800b0a4:	e7f5      	b.n	800b092 <_printf_i+0x22e>
 800b0a6:	bf00      	nop
 800b0a8:	08018d52 	.word	0x08018d52
 800b0ac:	08018d63 	.word	0x08018d63

0800b0b0 <siprintf>:
 800b0b0:	b40e      	push	{r1, r2, r3}
 800b0b2:	b500      	push	{lr}
 800b0b4:	b09c      	sub	sp, #112	; 0x70
 800b0b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b0b8:	9002      	str	r0, [sp, #8]
 800b0ba:	9006      	str	r0, [sp, #24]
 800b0bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0c0:	4809      	ldr	r0, [pc, #36]	; (800b0e8 <siprintf+0x38>)
 800b0c2:	9107      	str	r1, [sp, #28]
 800b0c4:	9104      	str	r1, [sp, #16]
 800b0c6:	4909      	ldr	r1, [pc, #36]	; (800b0ec <siprintf+0x3c>)
 800b0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0cc:	9105      	str	r1, [sp, #20]
 800b0ce:	6800      	ldr	r0, [r0, #0]
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	a902      	add	r1, sp, #8
 800b0d4:	f001 fb76 	bl	800c7c4 <_svfiprintf_r>
 800b0d8:	9b02      	ldr	r3, [sp, #8]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	701a      	strb	r2, [r3, #0]
 800b0de:	b01c      	add	sp, #112	; 0x70
 800b0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0e4:	b003      	add	sp, #12
 800b0e6:	4770      	bx	lr
 800b0e8:	20000044 	.word	0x20000044
 800b0ec:	ffff0208 	.word	0xffff0208

0800b0f0 <quorem>:
 800b0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	6903      	ldr	r3, [r0, #16]
 800b0f6:	690c      	ldr	r4, [r1, #16]
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	f2c0 8081 	blt.w	800b202 <quorem+0x112>
 800b100:	3c01      	subs	r4, #1
 800b102:	f101 0814 	add.w	r8, r1, #20
 800b106:	f100 0514 	add.w	r5, r0, #20
 800b10a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b118:	3301      	adds	r3, #1
 800b11a:	429a      	cmp	r2, r3
 800b11c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b124:	fbb2 f6f3 	udiv	r6, r2, r3
 800b128:	d331      	bcc.n	800b18e <quorem+0x9e>
 800b12a:	f04f 0e00 	mov.w	lr, #0
 800b12e:	4640      	mov	r0, r8
 800b130:	46ac      	mov	ip, r5
 800b132:	46f2      	mov	sl, lr
 800b134:	f850 2b04 	ldr.w	r2, [r0], #4
 800b138:	b293      	uxth	r3, r2
 800b13a:	fb06 e303 	mla	r3, r6, r3, lr
 800b13e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b142:	b29b      	uxth	r3, r3
 800b144:	ebaa 0303 	sub.w	r3, sl, r3
 800b148:	f8dc a000 	ldr.w	sl, [ip]
 800b14c:	0c12      	lsrs	r2, r2, #16
 800b14e:	fa13 f38a 	uxtah	r3, r3, sl
 800b152:	fb06 e202 	mla	r2, r6, r2, lr
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b15e:	b292      	uxth	r2, r2
 800b160:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b168:	f8bd 3000 	ldrh.w	r3, [sp]
 800b16c:	4581      	cmp	r9, r0
 800b16e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b172:	f84c 3b04 	str.w	r3, [ip], #4
 800b176:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b17a:	d2db      	bcs.n	800b134 <quorem+0x44>
 800b17c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b180:	b92b      	cbnz	r3, 800b18e <quorem+0x9e>
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	3b04      	subs	r3, #4
 800b186:	429d      	cmp	r5, r3
 800b188:	461a      	mov	r2, r3
 800b18a:	d32e      	bcc.n	800b1ea <quorem+0xfa>
 800b18c:	613c      	str	r4, [r7, #16]
 800b18e:	4638      	mov	r0, r7
 800b190:	f001 f8c4 	bl	800c31c <__mcmp>
 800b194:	2800      	cmp	r0, #0
 800b196:	db24      	blt.n	800b1e2 <quorem+0xf2>
 800b198:	3601      	adds	r6, #1
 800b19a:	4628      	mov	r0, r5
 800b19c:	f04f 0c00 	mov.w	ip, #0
 800b1a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1a4:	f8d0 e000 	ldr.w	lr, [r0]
 800b1a8:	b293      	uxth	r3, r2
 800b1aa:	ebac 0303 	sub.w	r3, ip, r3
 800b1ae:	0c12      	lsrs	r2, r2, #16
 800b1b0:	fa13 f38e 	uxtah	r3, r3, lr
 800b1b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1c2:	45c1      	cmp	r9, r8
 800b1c4:	f840 3b04 	str.w	r3, [r0], #4
 800b1c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1cc:	d2e8      	bcs.n	800b1a0 <quorem+0xb0>
 800b1ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1d6:	b922      	cbnz	r2, 800b1e2 <quorem+0xf2>
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	429d      	cmp	r5, r3
 800b1dc:	461a      	mov	r2, r3
 800b1de:	d30a      	bcc.n	800b1f6 <quorem+0x106>
 800b1e0:	613c      	str	r4, [r7, #16]
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	b003      	add	sp, #12
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	6812      	ldr	r2, [r2, #0]
 800b1ec:	3b04      	subs	r3, #4
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	d1cc      	bne.n	800b18c <quorem+0x9c>
 800b1f2:	3c01      	subs	r4, #1
 800b1f4:	e7c7      	b.n	800b186 <quorem+0x96>
 800b1f6:	6812      	ldr	r2, [r2, #0]
 800b1f8:	3b04      	subs	r3, #4
 800b1fa:	2a00      	cmp	r2, #0
 800b1fc:	d1f0      	bne.n	800b1e0 <quorem+0xf0>
 800b1fe:	3c01      	subs	r4, #1
 800b200:	e7eb      	b.n	800b1da <quorem+0xea>
 800b202:	2000      	movs	r0, #0
 800b204:	e7ee      	b.n	800b1e4 <quorem+0xf4>
	...

0800b208 <_dtoa_r>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	ed2d 8b04 	vpush	{d8-d9}
 800b210:	ec57 6b10 	vmov	r6, r7, d0
 800b214:	b093      	sub	sp, #76	; 0x4c
 800b216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b218:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b21c:	9106      	str	r1, [sp, #24]
 800b21e:	ee10 aa10 	vmov	sl, s0
 800b222:	4604      	mov	r4, r0
 800b224:	9209      	str	r2, [sp, #36]	; 0x24
 800b226:	930c      	str	r3, [sp, #48]	; 0x30
 800b228:	46bb      	mov	fp, r7
 800b22a:	b975      	cbnz	r5, 800b24a <_dtoa_r+0x42>
 800b22c:	2010      	movs	r0, #16
 800b22e:	f000 fddd 	bl	800bdec <malloc>
 800b232:	4602      	mov	r2, r0
 800b234:	6260      	str	r0, [r4, #36]	; 0x24
 800b236:	b920      	cbnz	r0, 800b242 <_dtoa_r+0x3a>
 800b238:	4ba7      	ldr	r3, [pc, #668]	; (800b4d8 <_dtoa_r+0x2d0>)
 800b23a:	21ea      	movs	r1, #234	; 0xea
 800b23c:	48a7      	ldr	r0, [pc, #668]	; (800b4dc <_dtoa_r+0x2d4>)
 800b23e:	f001 fbd1 	bl	800c9e4 <__assert_func>
 800b242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b246:	6005      	str	r5, [r0, #0]
 800b248:	60c5      	str	r5, [r0, #12]
 800b24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b24c:	6819      	ldr	r1, [r3, #0]
 800b24e:	b151      	cbz	r1, 800b266 <_dtoa_r+0x5e>
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	604a      	str	r2, [r1, #4]
 800b254:	2301      	movs	r3, #1
 800b256:	4093      	lsls	r3, r2
 800b258:	608b      	str	r3, [r1, #8]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 fe1c 	bl	800be98 <_Bfree>
 800b260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	1e3b      	subs	r3, r7, #0
 800b268:	bfaa      	itet	ge
 800b26a:	2300      	movge	r3, #0
 800b26c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b270:	f8c8 3000 	strge.w	r3, [r8]
 800b274:	4b9a      	ldr	r3, [pc, #616]	; (800b4e0 <_dtoa_r+0x2d8>)
 800b276:	bfbc      	itt	lt
 800b278:	2201      	movlt	r2, #1
 800b27a:	f8c8 2000 	strlt.w	r2, [r8]
 800b27e:	ea33 030b 	bics.w	r3, r3, fp
 800b282:	d11b      	bne.n	800b2bc <_dtoa_r+0xb4>
 800b284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b286:	f242 730f 	movw	r3, #9999	; 0x270f
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b290:	4333      	orrs	r3, r6
 800b292:	f000 8592 	beq.w	800bdba <_dtoa_r+0xbb2>
 800b296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b298:	b963      	cbnz	r3, 800b2b4 <_dtoa_r+0xac>
 800b29a:	4b92      	ldr	r3, [pc, #584]	; (800b4e4 <_dtoa_r+0x2dc>)
 800b29c:	e022      	b.n	800b2e4 <_dtoa_r+0xdc>
 800b29e:	4b92      	ldr	r3, [pc, #584]	; (800b4e8 <_dtoa_r+0x2e0>)
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	9801      	ldr	r0, [sp, #4]
 800b2aa:	b013      	add	sp, #76	; 0x4c
 800b2ac:	ecbd 8b04 	vpop	{d8-d9}
 800b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b4:	4b8b      	ldr	r3, [pc, #556]	; (800b4e4 <_dtoa_r+0x2dc>)
 800b2b6:	9301      	str	r3, [sp, #4]
 800b2b8:	3303      	adds	r3, #3
 800b2ba:	e7f3      	b.n	800b2a4 <_dtoa_r+0x9c>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	f7f5 fc08 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2c8:	ec4b ab19 	vmov	d9, sl, fp
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	b158      	cbz	r0, 800b2e8 <_dtoa_r+0xe0>
 800b2d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 856b 	beq.w	800bdb4 <_dtoa_r+0xbac>
 800b2de:	4883      	ldr	r0, [pc, #524]	; (800b4ec <_dtoa_r+0x2e4>)
 800b2e0:	6018      	str	r0, [r3, #0]
 800b2e2:	1e43      	subs	r3, r0, #1
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	e7df      	b.n	800b2a8 <_dtoa_r+0xa0>
 800b2e8:	ec4b ab10 	vmov	d0, sl, fp
 800b2ec:	aa10      	add	r2, sp, #64	; 0x40
 800b2ee:	a911      	add	r1, sp, #68	; 0x44
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 f8b9 	bl	800c468 <__d2b>
 800b2f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b2fa:	ee08 0a10 	vmov	s16, r0
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	f000 8084 	beq.w	800b40c <_dtoa_r+0x204>
 800b304:	ee19 3a90 	vmov	r3, s19
 800b308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b30c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b310:	4656      	mov	r6, sl
 800b312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b31a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b31e:	4b74      	ldr	r3, [pc, #464]	; (800b4f0 <_dtoa_r+0x2e8>)
 800b320:	2200      	movs	r2, #0
 800b322:	4630      	mov	r0, r6
 800b324:	4639      	mov	r1, r7
 800b326:	f7f4 ffb7 	bl	8000298 <__aeabi_dsub>
 800b32a:	a365      	add	r3, pc, #404	; (adr r3, 800b4c0 <_dtoa_r+0x2b8>)
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f7f5 f96a 	bl	8000608 <__aeabi_dmul>
 800b334:	a364      	add	r3, pc, #400	; (adr r3, 800b4c8 <_dtoa_r+0x2c0>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f7f4 ffaf 	bl	800029c <__adddf3>
 800b33e:	4606      	mov	r6, r0
 800b340:	4628      	mov	r0, r5
 800b342:	460f      	mov	r7, r1
 800b344:	f7f5 f8f6 	bl	8000534 <__aeabi_i2d>
 800b348:	a361      	add	r3, pc, #388	; (adr r3, 800b4d0 <_dtoa_r+0x2c8>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f5 f95b 	bl	8000608 <__aeabi_dmul>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4630      	mov	r0, r6
 800b358:	4639      	mov	r1, r7
 800b35a:	f7f4 ff9f 	bl	800029c <__adddf3>
 800b35e:	4606      	mov	r6, r0
 800b360:	460f      	mov	r7, r1
 800b362:	f7f5 fc01 	bl	8000b68 <__aeabi_d2iz>
 800b366:	2200      	movs	r2, #0
 800b368:	9000      	str	r0, [sp, #0]
 800b36a:	2300      	movs	r3, #0
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f5 fbbc 	bl	8000aec <__aeabi_dcmplt>
 800b374:	b150      	cbz	r0, 800b38c <_dtoa_r+0x184>
 800b376:	9800      	ldr	r0, [sp, #0]
 800b378:	f7f5 f8dc 	bl	8000534 <__aeabi_i2d>
 800b37c:	4632      	mov	r2, r6
 800b37e:	463b      	mov	r3, r7
 800b380:	f7f5 fbaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800b384:	b910      	cbnz	r0, 800b38c <_dtoa_r+0x184>
 800b386:	9b00      	ldr	r3, [sp, #0]
 800b388:	3b01      	subs	r3, #1
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	9b00      	ldr	r3, [sp, #0]
 800b38e:	2b16      	cmp	r3, #22
 800b390:	d85a      	bhi.n	800b448 <_dtoa_r+0x240>
 800b392:	9a00      	ldr	r2, [sp, #0]
 800b394:	4b57      	ldr	r3, [pc, #348]	; (800b4f4 <_dtoa_r+0x2ec>)
 800b396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	ec51 0b19 	vmov	r0, r1, d9
 800b3a2:	f7f5 fba3 	bl	8000aec <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d050      	beq.n	800b44c <_dtoa_r+0x244>
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3b6:	1b5d      	subs	r5, r3, r5
 800b3b8:	1e6b      	subs	r3, r5, #1
 800b3ba:	9305      	str	r3, [sp, #20]
 800b3bc:	bf45      	ittet	mi
 800b3be:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3c2:	9304      	strmi	r3, [sp, #16]
 800b3c4:	2300      	movpl	r3, #0
 800b3c6:	2300      	movmi	r3, #0
 800b3c8:	bf4c      	ite	mi
 800b3ca:	9305      	strmi	r3, [sp, #20]
 800b3cc:	9304      	strpl	r3, [sp, #16]
 800b3ce:	9b00      	ldr	r3, [sp, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	db3d      	blt.n	800b450 <_dtoa_r+0x248>
 800b3d4:	9b05      	ldr	r3, [sp, #20]
 800b3d6:	9a00      	ldr	r2, [sp, #0]
 800b3d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3da:	4413      	add	r3, r2
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9307      	str	r3, [sp, #28]
 800b3e2:	9b06      	ldr	r3, [sp, #24]
 800b3e4:	2b09      	cmp	r3, #9
 800b3e6:	f200 8089 	bhi.w	800b4fc <_dtoa_r+0x2f4>
 800b3ea:	2b05      	cmp	r3, #5
 800b3ec:	bfc4      	itt	gt
 800b3ee:	3b04      	subgt	r3, #4
 800b3f0:	9306      	strgt	r3, [sp, #24]
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	f1a3 0302 	sub.w	r3, r3, #2
 800b3f8:	bfcc      	ite	gt
 800b3fa:	2500      	movgt	r5, #0
 800b3fc:	2501      	movle	r5, #1
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	f200 8087 	bhi.w	800b512 <_dtoa_r+0x30a>
 800b404:	e8df f003 	tbb	[pc, r3]
 800b408:	59383a2d 	.word	0x59383a2d
 800b40c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b410:	441d      	add	r5, r3
 800b412:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b416:	2b20      	cmp	r3, #32
 800b418:	bfc1      	itttt	gt
 800b41a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b41e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b422:	fa0b f303 	lslgt.w	r3, fp, r3
 800b426:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b42a:	bfda      	itte	le
 800b42c:	f1c3 0320 	rsble	r3, r3, #32
 800b430:	fa06 f003 	lslle.w	r0, r6, r3
 800b434:	4318      	orrgt	r0, r3
 800b436:	f7f5 f86d 	bl	8000514 <__aeabi_ui2d>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4606      	mov	r6, r0
 800b43e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b442:	3d01      	subs	r5, #1
 800b444:	930e      	str	r3, [sp, #56]	; 0x38
 800b446:	e76a      	b.n	800b31e <_dtoa_r+0x116>
 800b448:	2301      	movs	r3, #1
 800b44a:	e7b2      	b.n	800b3b2 <_dtoa_r+0x1aa>
 800b44c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b44e:	e7b1      	b.n	800b3b4 <_dtoa_r+0x1ac>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	9a00      	ldr	r2, [sp, #0]
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	4253      	negs	r3, r2
 800b45a:	9307      	str	r3, [sp, #28]
 800b45c:	2300      	movs	r3, #0
 800b45e:	930a      	str	r3, [sp, #40]	; 0x28
 800b460:	e7bf      	b.n	800b3e2 <_dtoa_r+0x1da>
 800b462:	2300      	movs	r3, #0
 800b464:	9308      	str	r3, [sp, #32]
 800b466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dc55      	bgt.n	800b518 <_dtoa_r+0x310>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b472:	461a      	mov	r2, r3
 800b474:	9209      	str	r2, [sp, #36]	; 0x24
 800b476:	e00c      	b.n	800b492 <_dtoa_r+0x28a>
 800b478:	2301      	movs	r3, #1
 800b47a:	e7f3      	b.n	800b464 <_dtoa_r+0x25c>
 800b47c:	2300      	movs	r3, #0
 800b47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b480:	9308      	str	r3, [sp, #32]
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	4413      	add	r3, r2
 800b486:	9302      	str	r3, [sp, #8]
 800b488:	3301      	adds	r3, #1
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	9303      	str	r3, [sp, #12]
 800b48e:	bfb8      	it	lt
 800b490:	2301      	movlt	r3, #1
 800b492:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b494:	2200      	movs	r2, #0
 800b496:	6042      	str	r2, [r0, #4]
 800b498:	2204      	movs	r2, #4
 800b49a:	f102 0614 	add.w	r6, r2, #20
 800b49e:	429e      	cmp	r6, r3
 800b4a0:	6841      	ldr	r1, [r0, #4]
 800b4a2:	d93d      	bls.n	800b520 <_dtoa_r+0x318>
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 fcb7 	bl	800be18 <_Balloc>
 800b4aa:	9001      	str	r0, [sp, #4]
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d13b      	bne.n	800b528 <_dtoa_r+0x320>
 800b4b0:	4b11      	ldr	r3, [pc, #68]	; (800b4f8 <_dtoa_r+0x2f0>)
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4b8:	e6c0      	b.n	800b23c <_dtoa_r+0x34>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e7df      	b.n	800b47e <_dtoa_r+0x276>
 800b4be:	bf00      	nop
 800b4c0:	636f4361 	.word	0x636f4361
 800b4c4:	3fd287a7 	.word	0x3fd287a7
 800b4c8:	8b60c8b3 	.word	0x8b60c8b3
 800b4cc:	3fc68a28 	.word	0x3fc68a28
 800b4d0:	509f79fb 	.word	0x509f79fb
 800b4d4:	3fd34413 	.word	0x3fd34413
 800b4d8:	08018d81 	.word	0x08018d81
 800b4dc:	08018d98 	.word	0x08018d98
 800b4e0:	7ff00000 	.word	0x7ff00000
 800b4e4:	08018d7d 	.word	0x08018d7d
 800b4e8:	08018d74 	.word	0x08018d74
 800b4ec:	08018d51 	.word	0x08018d51
 800b4f0:	3ff80000 	.word	0x3ff80000
 800b4f4:	08018e88 	.word	0x08018e88
 800b4f8:	08018df3 	.word	0x08018df3
 800b4fc:	2501      	movs	r5, #1
 800b4fe:	2300      	movs	r3, #0
 800b500:	9306      	str	r3, [sp, #24]
 800b502:	9508      	str	r5, [sp, #32]
 800b504:	f04f 33ff 	mov.w	r3, #4294967295
 800b508:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b50c:	2200      	movs	r2, #0
 800b50e:	2312      	movs	r3, #18
 800b510:	e7b0      	b.n	800b474 <_dtoa_r+0x26c>
 800b512:	2301      	movs	r3, #1
 800b514:	9308      	str	r3, [sp, #32]
 800b516:	e7f5      	b.n	800b504 <_dtoa_r+0x2fc>
 800b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b51e:	e7b8      	b.n	800b492 <_dtoa_r+0x28a>
 800b520:	3101      	adds	r1, #1
 800b522:	6041      	str	r1, [r0, #4]
 800b524:	0052      	lsls	r2, r2, #1
 800b526:	e7b8      	b.n	800b49a <_dtoa_r+0x292>
 800b528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b52a:	9a01      	ldr	r2, [sp, #4]
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	2b0e      	cmp	r3, #14
 800b532:	f200 809d 	bhi.w	800b670 <_dtoa_r+0x468>
 800b536:	2d00      	cmp	r5, #0
 800b538:	f000 809a 	beq.w	800b670 <_dtoa_r+0x468>
 800b53c:	9b00      	ldr	r3, [sp, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dd32      	ble.n	800b5a8 <_dtoa_r+0x3a0>
 800b542:	4ab7      	ldr	r2, [pc, #732]	; (800b820 <_dtoa_r+0x618>)
 800b544:	f003 030f 	and.w	r3, r3, #15
 800b548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b54c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b550:	9b00      	ldr	r3, [sp, #0]
 800b552:	05d8      	lsls	r0, r3, #23
 800b554:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b558:	d516      	bpl.n	800b588 <_dtoa_r+0x380>
 800b55a:	4bb2      	ldr	r3, [pc, #712]	; (800b824 <_dtoa_r+0x61c>)
 800b55c:	ec51 0b19 	vmov	r0, r1, d9
 800b560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b564:	f7f5 f97a 	bl	800085c <__aeabi_ddiv>
 800b568:	f007 070f 	and.w	r7, r7, #15
 800b56c:	4682      	mov	sl, r0
 800b56e:	468b      	mov	fp, r1
 800b570:	2503      	movs	r5, #3
 800b572:	4eac      	ldr	r6, [pc, #688]	; (800b824 <_dtoa_r+0x61c>)
 800b574:	b957      	cbnz	r7, 800b58c <_dtoa_r+0x384>
 800b576:	4642      	mov	r2, r8
 800b578:	464b      	mov	r3, r9
 800b57a:	4650      	mov	r0, sl
 800b57c:	4659      	mov	r1, fp
 800b57e:	f7f5 f96d 	bl	800085c <__aeabi_ddiv>
 800b582:	4682      	mov	sl, r0
 800b584:	468b      	mov	fp, r1
 800b586:	e028      	b.n	800b5da <_dtoa_r+0x3d2>
 800b588:	2502      	movs	r5, #2
 800b58a:	e7f2      	b.n	800b572 <_dtoa_r+0x36a>
 800b58c:	07f9      	lsls	r1, r7, #31
 800b58e:	d508      	bpl.n	800b5a2 <_dtoa_r+0x39a>
 800b590:	4640      	mov	r0, r8
 800b592:	4649      	mov	r1, r9
 800b594:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b598:	f7f5 f836 	bl	8000608 <__aeabi_dmul>
 800b59c:	3501      	adds	r5, #1
 800b59e:	4680      	mov	r8, r0
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	107f      	asrs	r7, r7, #1
 800b5a4:	3608      	adds	r6, #8
 800b5a6:	e7e5      	b.n	800b574 <_dtoa_r+0x36c>
 800b5a8:	f000 809b 	beq.w	800b6e2 <_dtoa_r+0x4da>
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	4f9d      	ldr	r7, [pc, #628]	; (800b824 <_dtoa_r+0x61c>)
 800b5b0:	425e      	negs	r6, r3
 800b5b2:	4b9b      	ldr	r3, [pc, #620]	; (800b820 <_dtoa_r+0x618>)
 800b5b4:	f006 020f 	and.w	r2, r6, #15
 800b5b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	ec51 0b19 	vmov	r0, r1, d9
 800b5c4:	f7f5 f820 	bl	8000608 <__aeabi_dmul>
 800b5c8:	1136      	asrs	r6, r6, #4
 800b5ca:	4682      	mov	sl, r0
 800b5cc:	468b      	mov	fp, r1
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2502      	movs	r5, #2
 800b5d2:	2e00      	cmp	r6, #0
 800b5d4:	d17a      	bne.n	800b6cc <_dtoa_r+0x4c4>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1d3      	bne.n	800b582 <_dtoa_r+0x37a>
 800b5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 8082 	beq.w	800b6e6 <_dtoa_r+0x4de>
 800b5e2:	4b91      	ldr	r3, [pc, #580]	; (800b828 <_dtoa_r+0x620>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	f7f5 fa7f 	bl	8000aec <__aeabi_dcmplt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d079      	beq.n	800b6e6 <_dtoa_r+0x4de>
 800b5f2:	9b03      	ldr	r3, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d076      	beq.n	800b6e6 <_dtoa_r+0x4de>
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	dd36      	ble.n	800b66c <_dtoa_r+0x464>
 800b5fe:	9b00      	ldr	r3, [sp, #0]
 800b600:	4650      	mov	r0, sl
 800b602:	4659      	mov	r1, fp
 800b604:	1e5f      	subs	r7, r3, #1
 800b606:	2200      	movs	r2, #0
 800b608:	4b88      	ldr	r3, [pc, #544]	; (800b82c <_dtoa_r+0x624>)
 800b60a:	f7f4 fffd 	bl	8000608 <__aeabi_dmul>
 800b60e:	9e02      	ldr	r6, [sp, #8]
 800b610:	4682      	mov	sl, r0
 800b612:	468b      	mov	fp, r1
 800b614:	3501      	adds	r5, #1
 800b616:	4628      	mov	r0, r5
 800b618:	f7f4 ff8c 	bl	8000534 <__aeabi_i2d>
 800b61c:	4652      	mov	r2, sl
 800b61e:	465b      	mov	r3, fp
 800b620:	f7f4 fff2 	bl	8000608 <__aeabi_dmul>
 800b624:	4b82      	ldr	r3, [pc, #520]	; (800b830 <_dtoa_r+0x628>)
 800b626:	2200      	movs	r2, #0
 800b628:	f7f4 fe38 	bl	800029c <__adddf3>
 800b62c:	46d0      	mov	r8, sl
 800b62e:	46d9      	mov	r9, fp
 800b630:	4682      	mov	sl, r0
 800b632:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b636:	2e00      	cmp	r6, #0
 800b638:	d158      	bne.n	800b6ec <_dtoa_r+0x4e4>
 800b63a:	4b7e      	ldr	r3, [pc, #504]	; (800b834 <_dtoa_r+0x62c>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	4640      	mov	r0, r8
 800b640:	4649      	mov	r1, r9
 800b642:	f7f4 fe29 	bl	8000298 <__aeabi_dsub>
 800b646:	4652      	mov	r2, sl
 800b648:	465b      	mov	r3, fp
 800b64a:	4680      	mov	r8, r0
 800b64c:	4689      	mov	r9, r1
 800b64e:	f7f5 fa6b 	bl	8000b28 <__aeabi_dcmpgt>
 800b652:	2800      	cmp	r0, #0
 800b654:	f040 8295 	bne.w	800bb82 <_dtoa_r+0x97a>
 800b658:	4652      	mov	r2, sl
 800b65a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b65e:	4640      	mov	r0, r8
 800b660:	4649      	mov	r1, r9
 800b662:	f7f5 fa43 	bl	8000aec <__aeabi_dcmplt>
 800b666:	2800      	cmp	r0, #0
 800b668:	f040 8289 	bne.w	800bb7e <_dtoa_r+0x976>
 800b66c:	ec5b ab19 	vmov	sl, fp, d9
 800b670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b672:	2b00      	cmp	r3, #0
 800b674:	f2c0 8148 	blt.w	800b908 <_dtoa_r+0x700>
 800b678:	9a00      	ldr	r2, [sp, #0]
 800b67a:	2a0e      	cmp	r2, #14
 800b67c:	f300 8144 	bgt.w	800b908 <_dtoa_r+0x700>
 800b680:	4b67      	ldr	r3, [pc, #412]	; (800b820 <_dtoa_r+0x618>)
 800b682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b686:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f280 80d5 	bge.w	800b83c <_dtoa_r+0x634>
 800b692:	9b03      	ldr	r3, [sp, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f300 80d1 	bgt.w	800b83c <_dtoa_r+0x634>
 800b69a:	f040 826f 	bne.w	800bb7c <_dtoa_r+0x974>
 800b69e:	4b65      	ldr	r3, [pc, #404]	; (800b834 <_dtoa_r+0x62c>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	f7f4 ffaf 	bl	8000608 <__aeabi_dmul>
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	f7f5 fa31 	bl	8000b14 <__aeabi_dcmpge>
 800b6b2:	9e03      	ldr	r6, [sp, #12]
 800b6b4:	4637      	mov	r7, r6
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f040 8245 	bne.w	800bb46 <_dtoa_r+0x93e>
 800b6bc:	9d01      	ldr	r5, [sp, #4]
 800b6be:	2331      	movs	r3, #49	; 0x31
 800b6c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b6c4:	9b00      	ldr	r3, [sp, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	e240      	b.n	800bb4e <_dtoa_r+0x946>
 800b6cc:	07f2      	lsls	r2, r6, #31
 800b6ce:	d505      	bpl.n	800b6dc <_dtoa_r+0x4d4>
 800b6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d4:	f7f4 ff98 	bl	8000608 <__aeabi_dmul>
 800b6d8:	3501      	adds	r5, #1
 800b6da:	2301      	movs	r3, #1
 800b6dc:	1076      	asrs	r6, r6, #1
 800b6de:	3708      	adds	r7, #8
 800b6e0:	e777      	b.n	800b5d2 <_dtoa_r+0x3ca>
 800b6e2:	2502      	movs	r5, #2
 800b6e4:	e779      	b.n	800b5da <_dtoa_r+0x3d2>
 800b6e6:	9f00      	ldr	r7, [sp, #0]
 800b6e8:	9e03      	ldr	r6, [sp, #12]
 800b6ea:	e794      	b.n	800b616 <_dtoa_r+0x40e>
 800b6ec:	9901      	ldr	r1, [sp, #4]
 800b6ee:	4b4c      	ldr	r3, [pc, #304]	; (800b820 <_dtoa_r+0x618>)
 800b6f0:	4431      	add	r1, r6
 800b6f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b6f4:	9908      	ldr	r1, [sp, #32]
 800b6f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b6fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6fe:	2900      	cmp	r1, #0
 800b700:	d043      	beq.n	800b78a <_dtoa_r+0x582>
 800b702:	494d      	ldr	r1, [pc, #308]	; (800b838 <_dtoa_r+0x630>)
 800b704:	2000      	movs	r0, #0
 800b706:	f7f5 f8a9 	bl	800085c <__aeabi_ddiv>
 800b70a:	4652      	mov	r2, sl
 800b70c:	465b      	mov	r3, fp
 800b70e:	f7f4 fdc3 	bl	8000298 <__aeabi_dsub>
 800b712:	9d01      	ldr	r5, [sp, #4]
 800b714:	4682      	mov	sl, r0
 800b716:	468b      	mov	fp, r1
 800b718:	4649      	mov	r1, r9
 800b71a:	4640      	mov	r0, r8
 800b71c:	f7f5 fa24 	bl	8000b68 <__aeabi_d2iz>
 800b720:	4606      	mov	r6, r0
 800b722:	f7f4 ff07 	bl	8000534 <__aeabi_i2d>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4640      	mov	r0, r8
 800b72c:	4649      	mov	r1, r9
 800b72e:	f7f4 fdb3 	bl	8000298 <__aeabi_dsub>
 800b732:	3630      	adds	r6, #48	; 0x30
 800b734:	f805 6b01 	strb.w	r6, [r5], #1
 800b738:	4652      	mov	r2, sl
 800b73a:	465b      	mov	r3, fp
 800b73c:	4680      	mov	r8, r0
 800b73e:	4689      	mov	r9, r1
 800b740:	f7f5 f9d4 	bl	8000aec <__aeabi_dcmplt>
 800b744:	2800      	cmp	r0, #0
 800b746:	d163      	bne.n	800b810 <_dtoa_r+0x608>
 800b748:	4642      	mov	r2, r8
 800b74a:	464b      	mov	r3, r9
 800b74c:	4936      	ldr	r1, [pc, #216]	; (800b828 <_dtoa_r+0x620>)
 800b74e:	2000      	movs	r0, #0
 800b750:	f7f4 fda2 	bl	8000298 <__aeabi_dsub>
 800b754:	4652      	mov	r2, sl
 800b756:	465b      	mov	r3, fp
 800b758:	f7f5 f9c8 	bl	8000aec <__aeabi_dcmplt>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f040 80b5 	bne.w	800b8cc <_dtoa_r+0x6c4>
 800b762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b764:	429d      	cmp	r5, r3
 800b766:	d081      	beq.n	800b66c <_dtoa_r+0x464>
 800b768:	4b30      	ldr	r3, [pc, #192]	; (800b82c <_dtoa_r+0x624>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	4650      	mov	r0, sl
 800b76e:	4659      	mov	r1, fp
 800b770:	f7f4 ff4a 	bl	8000608 <__aeabi_dmul>
 800b774:	4b2d      	ldr	r3, [pc, #180]	; (800b82c <_dtoa_r+0x624>)
 800b776:	4682      	mov	sl, r0
 800b778:	468b      	mov	fp, r1
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	2200      	movs	r2, #0
 800b780:	f7f4 ff42 	bl	8000608 <__aeabi_dmul>
 800b784:	4680      	mov	r8, r0
 800b786:	4689      	mov	r9, r1
 800b788:	e7c6      	b.n	800b718 <_dtoa_r+0x510>
 800b78a:	4650      	mov	r0, sl
 800b78c:	4659      	mov	r1, fp
 800b78e:	f7f4 ff3b 	bl	8000608 <__aeabi_dmul>
 800b792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b794:	9d01      	ldr	r5, [sp, #4]
 800b796:	930f      	str	r3, [sp, #60]	; 0x3c
 800b798:	4682      	mov	sl, r0
 800b79a:	468b      	mov	fp, r1
 800b79c:	4649      	mov	r1, r9
 800b79e:	4640      	mov	r0, r8
 800b7a0:	f7f5 f9e2 	bl	8000b68 <__aeabi_d2iz>
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	f7f4 fec5 	bl	8000534 <__aeabi_i2d>
 800b7aa:	3630      	adds	r6, #48	; 0x30
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4640      	mov	r0, r8
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	f7f4 fd70 	bl	8000298 <__aeabi_dsub>
 800b7b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b7bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	4689      	mov	r9, r1
 800b7c4:	f04f 0200 	mov.w	r2, #0
 800b7c8:	d124      	bne.n	800b814 <_dtoa_r+0x60c>
 800b7ca:	4b1b      	ldr	r3, [pc, #108]	; (800b838 <_dtoa_r+0x630>)
 800b7cc:	4650      	mov	r0, sl
 800b7ce:	4659      	mov	r1, fp
 800b7d0:	f7f4 fd64 	bl	800029c <__adddf3>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4649      	mov	r1, r9
 800b7dc:	f7f5 f9a4 	bl	8000b28 <__aeabi_dcmpgt>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d173      	bne.n	800b8cc <_dtoa_r+0x6c4>
 800b7e4:	4652      	mov	r2, sl
 800b7e6:	465b      	mov	r3, fp
 800b7e8:	4913      	ldr	r1, [pc, #76]	; (800b838 <_dtoa_r+0x630>)
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	f7f4 fd54 	bl	8000298 <__aeabi_dsub>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	f7f5 f978 	bl	8000aec <__aeabi_dcmplt>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	f43f af35 	beq.w	800b66c <_dtoa_r+0x464>
 800b802:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b804:	1e6b      	subs	r3, r5, #1
 800b806:	930f      	str	r3, [sp, #60]	; 0x3c
 800b808:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b80c:	2b30      	cmp	r3, #48	; 0x30
 800b80e:	d0f8      	beq.n	800b802 <_dtoa_r+0x5fa>
 800b810:	9700      	str	r7, [sp, #0]
 800b812:	e049      	b.n	800b8a8 <_dtoa_r+0x6a0>
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <_dtoa_r+0x624>)
 800b816:	f7f4 fef7 	bl	8000608 <__aeabi_dmul>
 800b81a:	4680      	mov	r8, r0
 800b81c:	4689      	mov	r9, r1
 800b81e:	e7bd      	b.n	800b79c <_dtoa_r+0x594>
 800b820:	08018e88 	.word	0x08018e88
 800b824:	08018e60 	.word	0x08018e60
 800b828:	3ff00000 	.word	0x3ff00000
 800b82c:	40240000 	.word	0x40240000
 800b830:	401c0000 	.word	0x401c0000
 800b834:	40140000 	.word	0x40140000
 800b838:	3fe00000 	.word	0x3fe00000
 800b83c:	9d01      	ldr	r5, [sp, #4]
 800b83e:	4656      	mov	r6, sl
 800b840:	465f      	mov	r7, fp
 800b842:	4642      	mov	r2, r8
 800b844:	464b      	mov	r3, r9
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f5 f807 	bl	800085c <__aeabi_ddiv>
 800b84e:	f7f5 f98b 	bl	8000b68 <__aeabi_d2iz>
 800b852:	4682      	mov	sl, r0
 800b854:	f7f4 fe6e 	bl	8000534 <__aeabi_i2d>
 800b858:	4642      	mov	r2, r8
 800b85a:	464b      	mov	r3, r9
 800b85c:	f7f4 fed4 	bl	8000608 <__aeabi_dmul>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b86c:	f7f4 fd14 	bl	8000298 <__aeabi_dsub>
 800b870:	f805 6b01 	strb.w	r6, [r5], #1
 800b874:	9e01      	ldr	r6, [sp, #4]
 800b876:	9f03      	ldr	r7, [sp, #12]
 800b878:	1bae      	subs	r6, r5, r6
 800b87a:	42b7      	cmp	r7, r6
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	d135      	bne.n	800b8ee <_dtoa_r+0x6e6>
 800b882:	f7f4 fd0b 	bl	800029c <__adddf3>
 800b886:	4642      	mov	r2, r8
 800b888:	464b      	mov	r3, r9
 800b88a:	4606      	mov	r6, r0
 800b88c:	460f      	mov	r7, r1
 800b88e:	f7f5 f94b 	bl	8000b28 <__aeabi_dcmpgt>
 800b892:	b9d0      	cbnz	r0, 800b8ca <_dtoa_r+0x6c2>
 800b894:	4642      	mov	r2, r8
 800b896:	464b      	mov	r3, r9
 800b898:	4630      	mov	r0, r6
 800b89a:	4639      	mov	r1, r7
 800b89c:	f7f5 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8a0:	b110      	cbz	r0, 800b8a8 <_dtoa_r+0x6a0>
 800b8a2:	f01a 0f01 	tst.w	sl, #1
 800b8a6:	d110      	bne.n	800b8ca <_dtoa_r+0x6c2>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	ee18 1a10 	vmov	r1, s16
 800b8ae:	f000 faf3 	bl	800be98 <_Bfree>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9800      	ldr	r0, [sp, #0]
 800b8b6:	702b      	strb	r3, [r5, #0]
 800b8b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	6018      	str	r0, [r3, #0]
 800b8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f43f acf1 	beq.w	800b2a8 <_dtoa_r+0xa0>
 800b8c6:	601d      	str	r5, [r3, #0]
 800b8c8:	e4ee      	b.n	800b2a8 <_dtoa_r+0xa0>
 800b8ca:	9f00      	ldr	r7, [sp, #0]
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	461d      	mov	r5, r3
 800b8d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8d4:	2a39      	cmp	r2, #57	; 0x39
 800b8d6:	d106      	bne.n	800b8e6 <_dtoa_r+0x6de>
 800b8d8:	9a01      	ldr	r2, [sp, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d1f7      	bne.n	800b8ce <_dtoa_r+0x6c6>
 800b8de:	9901      	ldr	r1, [sp, #4]
 800b8e0:	2230      	movs	r2, #48	; 0x30
 800b8e2:	3701      	adds	r7, #1
 800b8e4:	700a      	strb	r2, [r1, #0]
 800b8e6:	781a      	ldrb	r2, [r3, #0]
 800b8e8:	3201      	adds	r2, #1
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	e790      	b.n	800b810 <_dtoa_r+0x608>
 800b8ee:	4ba6      	ldr	r3, [pc, #664]	; (800bb88 <_dtoa_r+0x980>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f7f4 fe89 	bl	8000608 <__aeabi_dmul>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	f7f5 f8eb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b902:	2800      	cmp	r0, #0
 800b904:	d09d      	beq.n	800b842 <_dtoa_r+0x63a>
 800b906:	e7cf      	b.n	800b8a8 <_dtoa_r+0x6a0>
 800b908:	9a08      	ldr	r2, [sp, #32]
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	f000 80d7 	beq.w	800babe <_dtoa_r+0x8b6>
 800b910:	9a06      	ldr	r2, [sp, #24]
 800b912:	2a01      	cmp	r2, #1
 800b914:	f300 80ba 	bgt.w	800ba8c <_dtoa_r+0x884>
 800b918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	f000 80b2 	beq.w	800ba84 <_dtoa_r+0x87c>
 800b920:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b924:	9e07      	ldr	r6, [sp, #28]
 800b926:	9d04      	ldr	r5, [sp, #16]
 800b928:	9a04      	ldr	r2, [sp, #16]
 800b92a:	441a      	add	r2, r3
 800b92c:	9204      	str	r2, [sp, #16]
 800b92e:	9a05      	ldr	r2, [sp, #20]
 800b930:	2101      	movs	r1, #1
 800b932:	441a      	add	r2, r3
 800b934:	4620      	mov	r0, r4
 800b936:	9205      	str	r2, [sp, #20]
 800b938:	f000 fb66 	bl	800c008 <__i2b>
 800b93c:	4607      	mov	r7, r0
 800b93e:	2d00      	cmp	r5, #0
 800b940:	dd0c      	ble.n	800b95c <_dtoa_r+0x754>
 800b942:	9b05      	ldr	r3, [sp, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	dd09      	ble.n	800b95c <_dtoa_r+0x754>
 800b948:	42ab      	cmp	r3, r5
 800b94a:	9a04      	ldr	r2, [sp, #16]
 800b94c:	bfa8      	it	ge
 800b94e:	462b      	movge	r3, r5
 800b950:	1ad2      	subs	r2, r2, r3
 800b952:	9204      	str	r2, [sp, #16]
 800b954:	9a05      	ldr	r2, [sp, #20]
 800b956:	1aed      	subs	r5, r5, r3
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	9b07      	ldr	r3, [sp, #28]
 800b95e:	b31b      	cbz	r3, 800b9a8 <_dtoa_r+0x7a0>
 800b960:	9b08      	ldr	r3, [sp, #32]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80af 	beq.w	800bac6 <_dtoa_r+0x8be>
 800b968:	2e00      	cmp	r6, #0
 800b96a:	dd13      	ble.n	800b994 <_dtoa_r+0x78c>
 800b96c:	4639      	mov	r1, r7
 800b96e:	4632      	mov	r2, r6
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fc09 	bl	800c188 <__pow5mult>
 800b976:	ee18 2a10 	vmov	r2, s16
 800b97a:	4601      	mov	r1, r0
 800b97c:	4607      	mov	r7, r0
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 fb58 	bl	800c034 <__multiply>
 800b984:	ee18 1a10 	vmov	r1, s16
 800b988:	4680      	mov	r8, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 fa84 	bl	800be98 <_Bfree>
 800b990:	ee08 8a10 	vmov	s16, r8
 800b994:	9b07      	ldr	r3, [sp, #28]
 800b996:	1b9a      	subs	r2, r3, r6
 800b998:	d006      	beq.n	800b9a8 <_dtoa_r+0x7a0>
 800b99a:	ee18 1a10 	vmov	r1, s16
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fbf2 	bl	800c188 <__pow5mult>
 800b9a4:	ee08 0a10 	vmov	s16, r0
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 fb2c 	bl	800c008 <__i2b>
 800b9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	f340 8088 	ble.w	800baca <_dtoa_r+0x8c2>
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4601      	mov	r1, r0
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 fbe2 	bl	800c188 <__pow5mult>
 800b9c4:	9b06      	ldr	r3, [sp, #24]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	f340 8081 	ble.w	800bad0 <_dtoa_r+0x8c8>
 800b9ce:	f04f 0800 	mov.w	r8, #0
 800b9d2:	6933      	ldr	r3, [r6, #16]
 800b9d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9d8:	6918      	ldr	r0, [r3, #16]
 800b9da:	f000 fac5 	bl	800bf68 <__hi0bits>
 800b9de:	f1c0 0020 	rsb	r0, r0, #32
 800b9e2:	9b05      	ldr	r3, [sp, #20]
 800b9e4:	4418      	add	r0, r3
 800b9e6:	f010 001f 	ands.w	r0, r0, #31
 800b9ea:	f000 8092 	beq.w	800bb12 <_dtoa_r+0x90a>
 800b9ee:	f1c0 0320 	rsb	r3, r0, #32
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	f340 808a 	ble.w	800bb0c <_dtoa_r+0x904>
 800b9f8:	f1c0 001c 	rsb	r0, r0, #28
 800b9fc:	9b04      	ldr	r3, [sp, #16]
 800b9fe:	4403      	add	r3, r0
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	4403      	add	r3, r0
 800ba06:	4405      	add	r5, r0
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dd07      	ble.n	800ba20 <_dtoa_r+0x818>
 800ba10:	ee18 1a10 	vmov	r1, s16
 800ba14:	461a      	mov	r2, r3
 800ba16:	4620      	mov	r0, r4
 800ba18:	f000 fc10 	bl	800c23c <__lshift>
 800ba1c:	ee08 0a10 	vmov	s16, r0
 800ba20:	9b05      	ldr	r3, [sp, #20]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd05      	ble.n	800ba32 <_dtoa_r+0x82a>
 800ba26:	4631      	mov	r1, r6
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fc06 	bl	800c23c <__lshift>
 800ba30:	4606      	mov	r6, r0
 800ba32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d06e      	beq.n	800bb16 <_dtoa_r+0x90e>
 800ba38:	ee18 0a10 	vmov	r0, s16
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	f000 fc6d 	bl	800c31c <__mcmp>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	da67      	bge.n	800bb16 <_dtoa_r+0x90e>
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	ee18 1a10 	vmov	r1, s16
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	220a      	movs	r2, #10
 800ba52:	2300      	movs	r3, #0
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 fa41 	bl	800bedc <__multadd>
 800ba5a:	9b08      	ldr	r3, [sp, #32]
 800ba5c:	ee08 0a10 	vmov	s16, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 81b1 	beq.w	800bdc8 <_dtoa_r+0xbc0>
 800ba66:	2300      	movs	r3, #0
 800ba68:	4639      	mov	r1, r7
 800ba6a:	220a      	movs	r2, #10
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f000 fa35 	bl	800bedc <__multadd>
 800ba72:	9b02      	ldr	r3, [sp, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	4607      	mov	r7, r0
 800ba78:	f300 808e 	bgt.w	800bb98 <_dtoa_r+0x990>
 800ba7c:	9b06      	ldr	r3, [sp, #24]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	dc51      	bgt.n	800bb26 <_dtoa_r+0x91e>
 800ba82:	e089      	b.n	800bb98 <_dtoa_r+0x990>
 800ba84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba8a:	e74b      	b.n	800b924 <_dtoa_r+0x71c>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	1e5e      	subs	r6, r3, #1
 800ba90:	9b07      	ldr	r3, [sp, #28]
 800ba92:	42b3      	cmp	r3, r6
 800ba94:	bfbf      	itttt	lt
 800ba96:	9b07      	ldrlt	r3, [sp, #28]
 800ba98:	9607      	strlt	r6, [sp, #28]
 800ba9a:	1af2      	sublt	r2, r6, r3
 800ba9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba9e:	bfb6      	itet	lt
 800baa0:	189b      	addlt	r3, r3, r2
 800baa2:	1b9e      	subge	r6, r3, r6
 800baa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	bfb8      	it	lt
 800baaa:	2600      	movlt	r6, #0
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfb7      	itett	lt
 800bab0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bab4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bab8:	1a9d      	sublt	r5, r3, r2
 800baba:	2300      	movlt	r3, #0
 800babc:	e734      	b.n	800b928 <_dtoa_r+0x720>
 800babe:	9e07      	ldr	r6, [sp, #28]
 800bac0:	9d04      	ldr	r5, [sp, #16]
 800bac2:	9f08      	ldr	r7, [sp, #32]
 800bac4:	e73b      	b.n	800b93e <_dtoa_r+0x736>
 800bac6:	9a07      	ldr	r2, [sp, #28]
 800bac8:	e767      	b.n	800b99a <_dtoa_r+0x792>
 800baca:	9b06      	ldr	r3, [sp, #24]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	dc18      	bgt.n	800bb02 <_dtoa_r+0x8fa>
 800bad0:	f1ba 0f00 	cmp.w	sl, #0
 800bad4:	d115      	bne.n	800bb02 <_dtoa_r+0x8fa>
 800bad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bada:	b993      	cbnz	r3, 800bb02 <_dtoa_r+0x8fa>
 800badc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bae0:	0d1b      	lsrs	r3, r3, #20
 800bae2:	051b      	lsls	r3, r3, #20
 800bae4:	b183      	cbz	r3, 800bb08 <_dtoa_r+0x900>
 800bae6:	9b04      	ldr	r3, [sp, #16]
 800bae8:	3301      	adds	r3, #1
 800baea:	9304      	str	r3, [sp, #16]
 800baec:	9b05      	ldr	r3, [sp, #20]
 800baee:	3301      	adds	r3, #1
 800baf0:	9305      	str	r3, [sp, #20]
 800baf2:	f04f 0801 	mov.w	r8, #1
 800baf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f47f af6a 	bne.w	800b9d2 <_dtoa_r+0x7ca>
 800bafe:	2001      	movs	r0, #1
 800bb00:	e76f      	b.n	800b9e2 <_dtoa_r+0x7da>
 800bb02:	f04f 0800 	mov.w	r8, #0
 800bb06:	e7f6      	b.n	800baf6 <_dtoa_r+0x8ee>
 800bb08:	4698      	mov	r8, r3
 800bb0a:	e7f4      	b.n	800baf6 <_dtoa_r+0x8ee>
 800bb0c:	f43f af7d 	beq.w	800ba0a <_dtoa_r+0x802>
 800bb10:	4618      	mov	r0, r3
 800bb12:	301c      	adds	r0, #28
 800bb14:	e772      	b.n	800b9fc <_dtoa_r+0x7f4>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dc37      	bgt.n	800bb8c <_dtoa_r+0x984>
 800bb1c:	9b06      	ldr	r3, [sp, #24]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	dd34      	ble.n	800bb8c <_dtoa_r+0x984>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	9302      	str	r3, [sp, #8]
 800bb26:	9b02      	ldr	r3, [sp, #8]
 800bb28:	b96b      	cbnz	r3, 800bb46 <_dtoa_r+0x93e>
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	2205      	movs	r2, #5
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 f9d4 	bl	800bedc <__multadd>
 800bb34:	4601      	mov	r1, r0
 800bb36:	4606      	mov	r6, r0
 800bb38:	ee18 0a10 	vmov	r0, s16
 800bb3c:	f000 fbee 	bl	800c31c <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	f73f adbb 	bgt.w	800b6bc <_dtoa_r+0x4b4>
 800bb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb48:	9d01      	ldr	r5, [sp, #4]
 800bb4a:	43db      	mvns	r3, r3
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	f04f 0800 	mov.w	r8, #0
 800bb52:	4631      	mov	r1, r6
 800bb54:	4620      	mov	r0, r4
 800bb56:	f000 f99f 	bl	800be98 <_Bfree>
 800bb5a:	2f00      	cmp	r7, #0
 800bb5c:	f43f aea4 	beq.w	800b8a8 <_dtoa_r+0x6a0>
 800bb60:	f1b8 0f00 	cmp.w	r8, #0
 800bb64:	d005      	beq.n	800bb72 <_dtoa_r+0x96a>
 800bb66:	45b8      	cmp	r8, r7
 800bb68:	d003      	beq.n	800bb72 <_dtoa_r+0x96a>
 800bb6a:	4641      	mov	r1, r8
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 f993 	bl	800be98 <_Bfree>
 800bb72:	4639      	mov	r1, r7
 800bb74:	4620      	mov	r0, r4
 800bb76:	f000 f98f 	bl	800be98 <_Bfree>
 800bb7a:	e695      	b.n	800b8a8 <_dtoa_r+0x6a0>
 800bb7c:	2600      	movs	r6, #0
 800bb7e:	4637      	mov	r7, r6
 800bb80:	e7e1      	b.n	800bb46 <_dtoa_r+0x93e>
 800bb82:	9700      	str	r7, [sp, #0]
 800bb84:	4637      	mov	r7, r6
 800bb86:	e599      	b.n	800b6bc <_dtoa_r+0x4b4>
 800bb88:	40240000 	.word	0x40240000
 800bb8c:	9b08      	ldr	r3, [sp, #32]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 80ca 	beq.w	800bd28 <_dtoa_r+0xb20>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	9302      	str	r3, [sp, #8]
 800bb98:	2d00      	cmp	r5, #0
 800bb9a:	dd05      	ble.n	800bba8 <_dtoa_r+0x9a0>
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	462a      	mov	r2, r5
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fb4b 	bl	800c23c <__lshift>
 800bba6:	4607      	mov	r7, r0
 800bba8:	f1b8 0f00 	cmp.w	r8, #0
 800bbac:	d05b      	beq.n	800bc66 <_dtoa_r+0xa5e>
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 f931 	bl	800be18 <_Balloc>
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	b928      	cbnz	r0, 800bbc6 <_dtoa_r+0x9be>
 800bbba:	4b87      	ldr	r3, [pc, #540]	; (800bdd8 <_dtoa_r+0xbd0>)
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbc2:	f7ff bb3b 	b.w	800b23c <_dtoa_r+0x34>
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	3202      	adds	r2, #2
 800bbca:	0092      	lsls	r2, r2, #2
 800bbcc:	f107 010c 	add.w	r1, r7, #12
 800bbd0:	300c      	adds	r0, #12
 800bbd2:	f000 f913 	bl	800bdfc <memcpy>
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	4629      	mov	r1, r5
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 fb2e 	bl	800c23c <__lshift>
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	f103 0901 	add.w	r9, r3, #1
 800bbe6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bbea:	4413      	add	r3, r2
 800bbec:	9305      	str	r3, [sp, #20]
 800bbee:	f00a 0301 	and.w	r3, sl, #1
 800bbf2:	46b8      	mov	r8, r7
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	ee18 0a10 	vmov	r0, s16
 800bbfe:	f7ff fa77 	bl	800b0f0 <quorem>
 800bc02:	4641      	mov	r1, r8
 800bc04:	9002      	str	r0, [sp, #8]
 800bc06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc0a:	ee18 0a10 	vmov	r0, s16
 800bc0e:	f000 fb85 	bl	800c31c <__mcmp>
 800bc12:	463a      	mov	r2, r7
 800bc14:	9003      	str	r0, [sp, #12]
 800bc16:	4631      	mov	r1, r6
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 fb9b 	bl	800c354 <__mdiff>
 800bc1e:	68c2      	ldr	r2, [r0, #12]
 800bc20:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc24:	4605      	mov	r5, r0
 800bc26:	bb02      	cbnz	r2, 800bc6a <_dtoa_r+0xa62>
 800bc28:	4601      	mov	r1, r0
 800bc2a:	ee18 0a10 	vmov	r0, s16
 800bc2e:	f000 fb75 	bl	800c31c <__mcmp>
 800bc32:	4602      	mov	r2, r0
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	9207      	str	r2, [sp, #28]
 800bc3a:	f000 f92d 	bl	800be98 <_Bfree>
 800bc3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc42:	ea43 0102 	orr.w	r1, r3, r2
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	464d      	mov	r5, r9
 800bc4c:	d10f      	bne.n	800bc6e <_dtoa_r+0xa66>
 800bc4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc52:	d02a      	beq.n	800bcaa <_dtoa_r+0xaa2>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd02      	ble.n	800bc60 <_dtoa_r+0xa58>
 800bc5a:	9b02      	ldr	r3, [sp, #8]
 800bc5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc60:	f88b a000 	strb.w	sl, [fp]
 800bc64:	e775      	b.n	800bb52 <_dtoa_r+0x94a>
 800bc66:	4638      	mov	r0, r7
 800bc68:	e7ba      	b.n	800bbe0 <_dtoa_r+0x9d8>
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	e7e2      	b.n	800bc34 <_dtoa_r+0xa2c>
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	db04      	blt.n	800bc7e <_dtoa_r+0xa76>
 800bc74:	9906      	ldr	r1, [sp, #24]
 800bc76:	430b      	orrs	r3, r1
 800bc78:	9904      	ldr	r1, [sp, #16]
 800bc7a:	430b      	orrs	r3, r1
 800bc7c:	d122      	bne.n	800bcc4 <_dtoa_r+0xabc>
 800bc7e:	2a00      	cmp	r2, #0
 800bc80:	ddee      	ble.n	800bc60 <_dtoa_r+0xa58>
 800bc82:	ee18 1a10 	vmov	r1, s16
 800bc86:	2201      	movs	r2, #1
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 fad7 	bl	800c23c <__lshift>
 800bc8e:	4631      	mov	r1, r6
 800bc90:	ee08 0a10 	vmov	s16, r0
 800bc94:	f000 fb42 	bl	800c31c <__mcmp>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	dc03      	bgt.n	800bca4 <_dtoa_r+0xa9c>
 800bc9c:	d1e0      	bne.n	800bc60 <_dtoa_r+0xa58>
 800bc9e:	f01a 0f01 	tst.w	sl, #1
 800bca2:	d0dd      	beq.n	800bc60 <_dtoa_r+0xa58>
 800bca4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bca8:	d1d7      	bne.n	800bc5a <_dtoa_r+0xa52>
 800bcaa:	2339      	movs	r3, #57	; 0x39
 800bcac:	f88b 3000 	strb.w	r3, [fp]
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	461d      	mov	r5, r3
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcba:	2a39      	cmp	r2, #57	; 0x39
 800bcbc:	d071      	beq.n	800bda2 <_dtoa_r+0xb9a>
 800bcbe:	3201      	adds	r2, #1
 800bcc0:	701a      	strb	r2, [r3, #0]
 800bcc2:	e746      	b.n	800bb52 <_dtoa_r+0x94a>
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	dd07      	ble.n	800bcd8 <_dtoa_r+0xad0>
 800bcc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bccc:	d0ed      	beq.n	800bcaa <_dtoa_r+0xaa2>
 800bcce:	f10a 0301 	add.w	r3, sl, #1
 800bcd2:	f88b 3000 	strb.w	r3, [fp]
 800bcd6:	e73c      	b.n	800bb52 <_dtoa_r+0x94a>
 800bcd8:	9b05      	ldr	r3, [sp, #20]
 800bcda:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bcde:	4599      	cmp	r9, r3
 800bce0:	d047      	beq.n	800bd72 <_dtoa_r+0xb6a>
 800bce2:	ee18 1a10 	vmov	r1, s16
 800bce6:	2300      	movs	r3, #0
 800bce8:	220a      	movs	r2, #10
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f8f6 	bl	800bedc <__multadd>
 800bcf0:	45b8      	cmp	r8, r7
 800bcf2:	ee08 0a10 	vmov	s16, r0
 800bcf6:	f04f 0300 	mov.w	r3, #0
 800bcfa:	f04f 020a 	mov.w	r2, #10
 800bcfe:	4641      	mov	r1, r8
 800bd00:	4620      	mov	r0, r4
 800bd02:	d106      	bne.n	800bd12 <_dtoa_r+0xb0a>
 800bd04:	f000 f8ea 	bl	800bedc <__multadd>
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4607      	mov	r7, r0
 800bd0c:	f109 0901 	add.w	r9, r9, #1
 800bd10:	e772      	b.n	800bbf8 <_dtoa_r+0x9f0>
 800bd12:	f000 f8e3 	bl	800bedc <__multadd>
 800bd16:	4639      	mov	r1, r7
 800bd18:	4680      	mov	r8, r0
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	220a      	movs	r2, #10
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 f8dc 	bl	800bedc <__multadd>
 800bd24:	4607      	mov	r7, r0
 800bd26:	e7f1      	b.n	800bd0c <_dtoa_r+0xb04>
 800bd28:	9b03      	ldr	r3, [sp, #12]
 800bd2a:	9302      	str	r3, [sp, #8]
 800bd2c:	9d01      	ldr	r5, [sp, #4]
 800bd2e:	ee18 0a10 	vmov	r0, s16
 800bd32:	4631      	mov	r1, r6
 800bd34:	f7ff f9dc 	bl	800b0f0 <quorem>
 800bd38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd3c:	9b01      	ldr	r3, [sp, #4]
 800bd3e:	f805 ab01 	strb.w	sl, [r5], #1
 800bd42:	1aea      	subs	r2, r5, r3
 800bd44:	9b02      	ldr	r3, [sp, #8]
 800bd46:	4293      	cmp	r3, r2
 800bd48:	dd09      	ble.n	800bd5e <_dtoa_r+0xb56>
 800bd4a:	ee18 1a10 	vmov	r1, s16
 800bd4e:	2300      	movs	r3, #0
 800bd50:	220a      	movs	r2, #10
 800bd52:	4620      	mov	r0, r4
 800bd54:	f000 f8c2 	bl	800bedc <__multadd>
 800bd58:	ee08 0a10 	vmov	s16, r0
 800bd5c:	e7e7      	b.n	800bd2e <_dtoa_r+0xb26>
 800bd5e:	9b02      	ldr	r3, [sp, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	bfc8      	it	gt
 800bd64:	461d      	movgt	r5, r3
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	bfd8      	it	le
 800bd6a:	2501      	movle	r5, #1
 800bd6c:	441d      	add	r5, r3
 800bd6e:	f04f 0800 	mov.w	r8, #0
 800bd72:	ee18 1a10 	vmov	r1, s16
 800bd76:	2201      	movs	r2, #1
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f000 fa5f 	bl	800c23c <__lshift>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	ee08 0a10 	vmov	s16, r0
 800bd84:	f000 faca 	bl	800c31c <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dc91      	bgt.n	800bcb0 <_dtoa_r+0xaa8>
 800bd8c:	d102      	bne.n	800bd94 <_dtoa_r+0xb8c>
 800bd8e:	f01a 0f01 	tst.w	sl, #1
 800bd92:	d18d      	bne.n	800bcb0 <_dtoa_r+0xaa8>
 800bd94:	462b      	mov	r3, r5
 800bd96:	461d      	mov	r5, r3
 800bd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd9c:	2a30      	cmp	r2, #48	; 0x30
 800bd9e:	d0fa      	beq.n	800bd96 <_dtoa_r+0xb8e>
 800bda0:	e6d7      	b.n	800bb52 <_dtoa_r+0x94a>
 800bda2:	9a01      	ldr	r2, [sp, #4]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d184      	bne.n	800bcb2 <_dtoa_r+0xaaa>
 800bda8:	9b00      	ldr	r3, [sp, #0]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	2331      	movs	r3, #49	; 0x31
 800bdb0:	7013      	strb	r3, [r2, #0]
 800bdb2:	e6ce      	b.n	800bb52 <_dtoa_r+0x94a>
 800bdb4:	4b09      	ldr	r3, [pc, #36]	; (800bddc <_dtoa_r+0xbd4>)
 800bdb6:	f7ff ba95 	b.w	800b2e4 <_dtoa_r+0xdc>
 800bdba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f47f aa6e 	bne.w	800b29e <_dtoa_r+0x96>
 800bdc2:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <_dtoa_r+0xbd8>)
 800bdc4:	f7ff ba8e 	b.w	800b2e4 <_dtoa_r+0xdc>
 800bdc8:	9b02      	ldr	r3, [sp, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	dcae      	bgt.n	800bd2c <_dtoa_r+0xb24>
 800bdce:	9b06      	ldr	r3, [sp, #24]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	f73f aea8 	bgt.w	800bb26 <_dtoa_r+0x91e>
 800bdd6:	e7a9      	b.n	800bd2c <_dtoa_r+0xb24>
 800bdd8:	08018df3 	.word	0x08018df3
 800bddc:	08018d50 	.word	0x08018d50
 800bde0:	08018d74 	.word	0x08018d74

0800bde4 <_localeconv_r>:
 800bde4:	4800      	ldr	r0, [pc, #0]	; (800bde8 <_localeconv_r+0x4>)
 800bde6:	4770      	bx	lr
 800bde8:	20000198 	.word	0x20000198

0800bdec <malloc>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	; (800bdf8 <malloc+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f000 bc17 	b.w	800c624 <_malloc_r>
 800bdf6:	bf00      	nop
 800bdf8:	20000044 	.word	0x20000044

0800bdfc <memcpy>:
 800bdfc:	440a      	add	r2, r1
 800bdfe:	4291      	cmp	r1, r2
 800be00:	f100 33ff 	add.w	r3, r0, #4294967295
 800be04:	d100      	bne.n	800be08 <memcpy+0xc>
 800be06:	4770      	bx	lr
 800be08:	b510      	push	{r4, lr}
 800be0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be12:	4291      	cmp	r1, r2
 800be14:	d1f9      	bne.n	800be0a <memcpy+0xe>
 800be16:	bd10      	pop	{r4, pc}

0800be18 <_Balloc>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be1c:	4604      	mov	r4, r0
 800be1e:	460d      	mov	r5, r1
 800be20:	b976      	cbnz	r6, 800be40 <_Balloc+0x28>
 800be22:	2010      	movs	r0, #16
 800be24:	f7ff ffe2 	bl	800bdec <malloc>
 800be28:	4602      	mov	r2, r0
 800be2a:	6260      	str	r0, [r4, #36]	; 0x24
 800be2c:	b920      	cbnz	r0, 800be38 <_Balloc+0x20>
 800be2e:	4b18      	ldr	r3, [pc, #96]	; (800be90 <_Balloc+0x78>)
 800be30:	4818      	ldr	r0, [pc, #96]	; (800be94 <_Balloc+0x7c>)
 800be32:	2166      	movs	r1, #102	; 0x66
 800be34:	f000 fdd6 	bl	800c9e4 <__assert_func>
 800be38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be3c:	6006      	str	r6, [r0, #0]
 800be3e:	60c6      	str	r6, [r0, #12]
 800be40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be42:	68f3      	ldr	r3, [r6, #12]
 800be44:	b183      	cbz	r3, 800be68 <_Balloc+0x50>
 800be46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be4e:	b9b8      	cbnz	r0, 800be80 <_Balloc+0x68>
 800be50:	2101      	movs	r1, #1
 800be52:	fa01 f605 	lsl.w	r6, r1, r5
 800be56:	1d72      	adds	r2, r6, #5
 800be58:	0092      	lsls	r2, r2, #2
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 fb60 	bl	800c520 <_calloc_r>
 800be60:	b160      	cbz	r0, 800be7c <_Balloc+0x64>
 800be62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be66:	e00e      	b.n	800be86 <_Balloc+0x6e>
 800be68:	2221      	movs	r2, #33	; 0x21
 800be6a:	2104      	movs	r1, #4
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 fb57 	bl	800c520 <_calloc_r>
 800be72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be74:	60f0      	str	r0, [r6, #12]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1e4      	bne.n	800be46 <_Balloc+0x2e>
 800be7c:	2000      	movs	r0, #0
 800be7e:	bd70      	pop	{r4, r5, r6, pc}
 800be80:	6802      	ldr	r2, [r0, #0]
 800be82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be86:	2300      	movs	r3, #0
 800be88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be8c:	e7f7      	b.n	800be7e <_Balloc+0x66>
 800be8e:	bf00      	nop
 800be90:	08018d81 	.word	0x08018d81
 800be94:	08018e04 	.word	0x08018e04

0800be98 <_Bfree>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be9c:	4605      	mov	r5, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	b976      	cbnz	r6, 800bec0 <_Bfree+0x28>
 800bea2:	2010      	movs	r0, #16
 800bea4:	f7ff ffa2 	bl	800bdec <malloc>
 800bea8:	4602      	mov	r2, r0
 800beaa:	6268      	str	r0, [r5, #36]	; 0x24
 800beac:	b920      	cbnz	r0, 800beb8 <_Bfree+0x20>
 800beae:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <_Bfree+0x3c>)
 800beb0:	4809      	ldr	r0, [pc, #36]	; (800bed8 <_Bfree+0x40>)
 800beb2:	218a      	movs	r1, #138	; 0x8a
 800beb4:	f000 fd96 	bl	800c9e4 <__assert_func>
 800beb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bebc:	6006      	str	r6, [r0, #0]
 800bebe:	60c6      	str	r6, [r0, #12]
 800bec0:	b13c      	cbz	r4, 800bed2 <_Bfree+0x3a>
 800bec2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bec4:	6862      	ldr	r2, [r4, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800becc:	6021      	str	r1, [r4, #0]
 800bece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	08018d81 	.word	0x08018d81
 800bed8:	08018e04 	.word	0x08018e04

0800bedc <__multadd>:
 800bedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee0:	690d      	ldr	r5, [r1, #16]
 800bee2:	4607      	mov	r7, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	461e      	mov	r6, r3
 800bee8:	f101 0c14 	add.w	ip, r1, #20
 800beec:	2000      	movs	r0, #0
 800beee:	f8dc 3000 	ldr.w	r3, [ip]
 800bef2:	b299      	uxth	r1, r3
 800bef4:	fb02 6101 	mla	r1, r2, r1, r6
 800bef8:	0c1e      	lsrs	r6, r3, #16
 800befa:	0c0b      	lsrs	r3, r1, #16
 800befc:	fb02 3306 	mla	r3, r2, r6, r3
 800bf00:	b289      	uxth	r1, r1
 800bf02:	3001      	adds	r0, #1
 800bf04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf08:	4285      	cmp	r5, r0
 800bf0a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf12:	dcec      	bgt.n	800beee <__multadd+0x12>
 800bf14:	b30e      	cbz	r6, 800bf5a <__multadd+0x7e>
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	dc19      	bgt.n	800bf50 <__multadd+0x74>
 800bf1c:	6861      	ldr	r1, [r4, #4]
 800bf1e:	4638      	mov	r0, r7
 800bf20:	3101      	adds	r1, #1
 800bf22:	f7ff ff79 	bl	800be18 <_Balloc>
 800bf26:	4680      	mov	r8, r0
 800bf28:	b928      	cbnz	r0, 800bf36 <__multadd+0x5a>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	4b0c      	ldr	r3, [pc, #48]	; (800bf60 <__multadd+0x84>)
 800bf2e:	480d      	ldr	r0, [pc, #52]	; (800bf64 <__multadd+0x88>)
 800bf30:	21b5      	movs	r1, #181	; 0xb5
 800bf32:	f000 fd57 	bl	800c9e4 <__assert_func>
 800bf36:	6922      	ldr	r2, [r4, #16]
 800bf38:	3202      	adds	r2, #2
 800bf3a:	f104 010c 	add.w	r1, r4, #12
 800bf3e:	0092      	lsls	r2, r2, #2
 800bf40:	300c      	adds	r0, #12
 800bf42:	f7ff ff5b 	bl	800bdfc <memcpy>
 800bf46:	4621      	mov	r1, r4
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff ffa5 	bl	800be98 <_Bfree>
 800bf4e:	4644      	mov	r4, r8
 800bf50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf54:	3501      	adds	r5, #1
 800bf56:	615e      	str	r6, [r3, #20]
 800bf58:	6125      	str	r5, [r4, #16]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf60:	08018df3 	.word	0x08018df3
 800bf64:	08018e04 	.word	0x08018e04

0800bf68 <__hi0bits>:
 800bf68:	0c03      	lsrs	r3, r0, #16
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	b9d3      	cbnz	r3, 800bfa4 <__hi0bits+0x3c>
 800bf6e:	0400      	lsls	r0, r0, #16
 800bf70:	2310      	movs	r3, #16
 800bf72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf76:	bf04      	itt	eq
 800bf78:	0200      	lsleq	r0, r0, #8
 800bf7a:	3308      	addeq	r3, #8
 800bf7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf80:	bf04      	itt	eq
 800bf82:	0100      	lsleq	r0, r0, #4
 800bf84:	3304      	addeq	r3, #4
 800bf86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf8a:	bf04      	itt	eq
 800bf8c:	0080      	lsleq	r0, r0, #2
 800bf8e:	3302      	addeq	r3, #2
 800bf90:	2800      	cmp	r0, #0
 800bf92:	db05      	blt.n	800bfa0 <__hi0bits+0x38>
 800bf94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf98:	f103 0301 	add.w	r3, r3, #1
 800bf9c:	bf08      	it	eq
 800bf9e:	2320      	moveq	r3, #32
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	4770      	bx	lr
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e7e4      	b.n	800bf72 <__hi0bits+0xa>

0800bfa8 <__lo0bits>:
 800bfa8:	6803      	ldr	r3, [r0, #0]
 800bfaa:	f013 0207 	ands.w	r2, r3, #7
 800bfae:	4601      	mov	r1, r0
 800bfb0:	d00b      	beq.n	800bfca <__lo0bits+0x22>
 800bfb2:	07da      	lsls	r2, r3, #31
 800bfb4:	d423      	bmi.n	800bffe <__lo0bits+0x56>
 800bfb6:	0798      	lsls	r0, r3, #30
 800bfb8:	bf49      	itett	mi
 800bfba:	085b      	lsrmi	r3, r3, #1
 800bfbc:	089b      	lsrpl	r3, r3, #2
 800bfbe:	2001      	movmi	r0, #1
 800bfc0:	600b      	strmi	r3, [r1, #0]
 800bfc2:	bf5c      	itt	pl
 800bfc4:	600b      	strpl	r3, [r1, #0]
 800bfc6:	2002      	movpl	r0, #2
 800bfc8:	4770      	bx	lr
 800bfca:	b298      	uxth	r0, r3
 800bfcc:	b9a8      	cbnz	r0, 800bffa <__lo0bits+0x52>
 800bfce:	0c1b      	lsrs	r3, r3, #16
 800bfd0:	2010      	movs	r0, #16
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	b90a      	cbnz	r2, 800bfda <__lo0bits+0x32>
 800bfd6:	3008      	adds	r0, #8
 800bfd8:	0a1b      	lsrs	r3, r3, #8
 800bfda:	071a      	lsls	r2, r3, #28
 800bfdc:	bf04      	itt	eq
 800bfde:	091b      	lsreq	r3, r3, #4
 800bfe0:	3004      	addeq	r0, #4
 800bfe2:	079a      	lsls	r2, r3, #30
 800bfe4:	bf04      	itt	eq
 800bfe6:	089b      	lsreq	r3, r3, #2
 800bfe8:	3002      	addeq	r0, #2
 800bfea:	07da      	lsls	r2, r3, #31
 800bfec:	d403      	bmi.n	800bff6 <__lo0bits+0x4e>
 800bfee:	085b      	lsrs	r3, r3, #1
 800bff0:	f100 0001 	add.w	r0, r0, #1
 800bff4:	d005      	beq.n	800c002 <__lo0bits+0x5a>
 800bff6:	600b      	str	r3, [r1, #0]
 800bff8:	4770      	bx	lr
 800bffa:	4610      	mov	r0, r2
 800bffc:	e7e9      	b.n	800bfd2 <__lo0bits+0x2a>
 800bffe:	2000      	movs	r0, #0
 800c000:	4770      	bx	lr
 800c002:	2020      	movs	r0, #32
 800c004:	4770      	bx	lr
	...

0800c008 <__i2b>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	460c      	mov	r4, r1
 800c00c:	2101      	movs	r1, #1
 800c00e:	f7ff ff03 	bl	800be18 <_Balloc>
 800c012:	4602      	mov	r2, r0
 800c014:	b928      	cbnz	r0, 800c022 <__i2b+0x1a>
 800c016:	4b05      	ldr	r3, [pc, #20]	; (800c02c <__i2b+0x24>)
 800c018:	4805      	ldr	r0, [pc, #20]	; (800c030 <__i2b+0x28>)
 800c01a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c01e:	f000 fce1 	bl	800c9e4 <__assert_func>
 800c022:	2301      	movs	r3, #1
 800c024:	6144      	str	r4, [r0, #20]
 800c026:	6103      	str	r3, [r0, #16]
 800c028:	bd10      	pop	{r4, pc}
 800c02a:	bf00      	nop
 800c02c:	08018df3 	.word	0x08018df3
 800c030:	08018e04 	.word	0x08018e04

0800c034 <__multiply>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	4691      	mov	r9, r2
 800c03a:	690a      	ldr	r2, [r1, #16]
 800c03c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	bfb8      	it	lt
 800c044:	460b      	movlt	r3, r1
 800c046:	460c      	mov	r4, r1
 800c048:	bfbc      	itt	lt
 800c04a:	464c      	movlt	r4, r9
 800c04c:	4699      	movlt	r9, r3
 800c04e:	6927      	ldr	r7, [r4, #16]
 800c050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c054:	68a3      	ldr	r3, [r4, #8]
 800c056:	6861      	ldr	r1, [r4, #4]
 800c058:	eb07 060a 	add.w	r6, r7, sl
 800c05c:	42b3      	cmp	r3, r6
 800c05e:	b085      	sub	sp, #20
 800c060:	bfb8      	it	lt
 800c062:	3101      	addlt	r1, #1
 800c064:	f7ff fed8 	bl	800be18 <_Balloc>
 800c068:	b930      	cbnz	r0, 800c078 <__multiply+0x44>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4b44      	ldr	r3, [pc, #272]	; (800c180 <__multiply+0x14c>)
 800c06e:	4845      	ldr	r0, [pc, #276]	; (800c184 <__multiply+0x150>)
 800c070:	f240 115d 	movw	r1, #349	; 0x15d
 800c074:	f000 fcb6 	bl	800c9e4 <__assert_func>
 800c078:	f100 0514 	add.w	r5, r0, #20
 800c07c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c080:	462b      	mov	r3, r5
 800c082:	2200      	movs	r2, #0
 800c084:	4543      	cmp	r3, r8
 800c086:	d321      	bcc.n	800c0cc <__multiply+0x98>
 800c088:	f104 0314 	add.w	r3, r4, #20
 800c08c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c090:	f109 0314 	add.w	r3, r9, #20
 800c094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c098:	9202      	str	r2, [sp, #8]
 800c09a:	1b3a      	subs	r2, r7, r4
 800c09c:	3a15      	subs	r2, #21
 800c09e:	f022 0203 	bic.w	r2, r2, #3
 800c0a2:	3204      	adds	r2, #4
 800c0a4:	f104 0115 	add.w	r1, r4, #21
 800c0a8:	428f      	cmp	r7, r1
 800c0aa:	bf38      	it	cc
 800c0ac:	2204      	movcc	r2, #4
 800c0ae:	9201      	str	r2, [sp, #4]
 800c0b0:	9a02      	ldr	r2, [sp, #8]
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d80c      	bhi.n	800c0d2 <__multiply+0x9e>
 800c0b8:	2e00      	cmp	r6, #0
 800c0ba:	dd03      	ble.n	800c0c4 <__multiply+0x90>
 800c0bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d05a      	beq.n	800c17a <__multiply+0x146>
 800c0c4:	6106      	str	r6, [r0, #16]
 800c0c6:	b005      	add	sp, #20
 800c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0cc:	f843 2b04 	str.w	r2, [r3], #4
 800c0d0:	e7d8      	b.n	800c084 <__multiply+0x50>
 800c0d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0d6:	f1ba 0f00 	cmp.w	sl, #0
 800c0da:	d024      	beq.n	800c126 <__multiply+0xf2>
 800c0dc:	f104 0e14 	add.w	lr, r4, #20
 800c0e0:	46a9      	mov	r9, r5
 800c0e2:	f04f 0c00 	mov.w	ip, #0
 800c0e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0ea:	f8d9 1000 	ldr.w	r1, [r9]
 800c0ee:	fa1f fb82 	uxth.w	fp, r2
 800c0f2:	b289      	uxth	r1, r1
 800c0f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0fc:	f8d9 2000 	ldr.w	r2, [r9]
 800c100:	4461      	add	r1, ip
 800c102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c106:	fb0a c20b 	mla	r2, sl, fp, ip
 800c10a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c10e:	b289      	uxth	r1, r1
 800c110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c114:	4577      	cmp	r7, lr
 800c116:	f849 1b04 	str.w	r1, [r9], #4
 800c11a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c11e:	d8e2      	bhi.n	800c0e6 <__multiply+0xb2>
 800c120:	9a01      	ldr	r2, [sp, #4]
 800c122:	f845 c002 	str.w	ip, [r5, r2]
 800c126:	9a03      	ldr	r2, [sp, #12]
 800c128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c12c:	3304      	adds	r3, #4
 800c12e:	f1b9 0f00 	cmp.w	r9, #0
 800c132:	d020      	beq.n	800c176 <__multiply+0x142>
 800c134:	6829      	ldr	r1, [r5, #0]
 800c136:	f104 0c14 	add.w	ip, r4, #20
 800c13a:	46ae      	mov	lr, r5
 800c13c:	f04f 0a00 	mov.w	sl, #0
 800c140:	f8bc b000 	ldrh.w	fp, [ip]
 800c144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c148:	fb09 220b 	mla	r2, r9, fp, r2
 800c14c:	4492      	add	sl, r2
 800c14e:	b289      	uxth	r1, r1
 800c150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c154:	f84e 1b04 	str.w	r1, [lr], #4
 800c158:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c15c:	f8be 1000 	ldrh.w	r1, [lr]
 800c160:	0c12      	lsrs	r2, r2, #16
 800c162:	fb09 1102 	mla	r1, r9, r2, r1
 800c166:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c16a:	4567      	cmp	r7, ip
 800c16c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c170:	d8e6      	bhi.n	800c140 <__multiply+0x10c>
 800c172:	9a01      	ldr	r2, [sp, #4]
 800c174:	50a9      	str	r1, [r5, r2]
 800c176:	3504      	adds	r5, #4
 800c178:	e79a      	b.n	800c0b0 <__multiply+0x7c>
 800c17a:	3e01      	subs	r6, #1
 800c17c:	e79c      	b.n	800c0b8 <__multiply+0x84>
 800c17e:	bf00      	nop
 800c180:	08018df3 	.word	0x08018df3
 800c184:	08018e04 	.word	0x08018e04

0800c188 <__pow5mult>:
 800c188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c18c:	4615      	mov	r5, r2
 800c18e:	f012 0203 	ands.w	r2, r2, #3
 800c192:	4606      	mov	r6, r0
 800c194:	460f      	mov	r7, r1
 800c196:	d007      	beq.n	800c1a8 <__pow5mult+0x20>
 800c198:	4c25      	ldr	r4, [pc, #148]	; (800c230 <__pow5mult+0xa8>)
 800c19a:	3a01      	subs	r2, #1
 800c19c:	2300      	movs	r3, #0
 800c19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1a2:	f7ff fe9b 	bl	800bedc <__multadd>
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	10ad      	asrs	r5, r5, #2
 800c1aa:	d03d      	beq.n	800c228 <__pow5mult+0xa0>
 800c1ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1ae:	b97c      	cbnz	r4, 800c1d0 <__pow5mult+0x48>
 800c1b0:	2010      	movs	r0, #16
 800c1b2:	f7ff fe1b 	bl	800bdec <malloc>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	6270      	str	r0, [r6, #36]	; 0x24
 800c1ba:	b928      	cbnz	r0, 800c1c8 <__pow5mult+0x40>
 800c1bc:	4b1d      	ldr	r3, [pc, #116]	; (800c234 <__pow5mult+0xac>)
 800c1be:	481e      	ldr	r0, [pc, #120]	; (800c238 <__pow5mult+0xb0>)
 800c1c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1c4:	f000 fc0e 	bl	800c9e4 <__assert_func>
 800c1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1cc:	6004      	str	r4, [r0, #0]
 800c1ce:	60c4      	str	r4, [r0, #12]
 800c1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1d8:	b94c      	cbnz	r4, 800c1ee <__pow5mult+0x66>
 800c1da:	f240 2171 	movw	r1, #625	; 0x271
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f7ff ff12 	bl	800c008 <__i2b>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	f04f 0900 	mov.w	r9, #0
 800c1f2:	07eb      	lsls	r3, r5, #31
 800c1f4:	d50a      	bpl.n	800c20c <__pow5mult+0x84>
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7ff ff1a 	bl	800c034 <__multiply>
 800c200:	4639      	mov	r1, r7
 800c202:	4680      	mov	r8, r0
 800c204:	4630      	mov	r0, r6
 800c206:	f7ff fe47 	bl	800be98 <_Bfree>
 800c20a:	4647      	mov	r7, r8
 800c20c:	106d      	asrs	r5, r5, #1
 800c20e:	d00b      	beq.n	800c228 <__pow5mult+0xa0>
 800c210:	6820      	ldr	r0, [r4, #0]
 800c212:	b938      	cbnz	r0, 800c224 <__pow5mult+0x9c>
 800c214:	4622      	mov	r2, r4
 800c216:	4621      	mov	r1, r4
 800c218:	4630      	mov	r0, r6
 800c21a:	f7ff ff0b 	bl	800c034 <__multiply>
 800c21e:	6020      	str	r0, [r4, #0]
 800c220:	f8c0 9000 	str.w	r9, [r0]
 800c224:	4604      	mov	r4, r0
 800c226:	e7e4      	b.n	800c1f2 <__pow5mult+0x6a>
 800c228:	4638      	mov	r0, r7
 800c22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c22e:	bf00      	nop
 800c230:	08018f50 	.word	0x08018f50
 800c234:	08018d81 	.word	0x08018d81
 800c238:	08018e04 	.word	0x08018e04

0800c23c <__lshift>:
 800c23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c240:	460c      	mov	r4, r1
 800c242:	6849      	ldr	r1, [r1, #4]
 800c244:	6923      	ldr	r3, [r4, #16]
 800c246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c24a:	68a3      	ldr	r3, [r4, #8]
 800c24c:	4607      	mov	r7, r0
 800c24e:	4691      	mov	r9, r2
 800c250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c254:	f108 0601 	add.w	r6, r8, #1
 800c258:	42b3      	cmp	r3, r6
 800c25a:	db0b      	blt.n	800c274 <__lshift+0x38>
 800c25c:	4638      	mov	r0, r7
 800c25e:	f7ff fddb 	bl	800be18 <_Balloc>
 800c262:	4605      	mov	r5, r0
 800c264:	b948      	cbnz	r0, 800c27a <__lshift+0x3e>
 800c266:	4602      	mov	r2, r0
 800c268:	4b2a      	ldr	r3, [pc, #168]	; (800c314 <__lshift+0xd8>)
 800c26a:	482b      	ldr	r0, [pc, #172]	; (800c318 <__lshift+0xdc>)
 800c26c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c270:	f000 fbb8 	bl	800c9e4 <__assert_func>
 800c274:	3101      	adds	r1, #1
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	e7ee      	b.n	800c258 <__lshift+0x1c>
 800c27a:	2300      	movs	r3, #0
 800c27c:	f100 0114 	add.w	r1, r0, #20
 800c280:	f100 0210 	add.w	r2, r0, #16
 800c284:	4618      	mov	r0, r3
 800c286:	4553      	cmp	r3, sl
 800c288:	db37      	blt.n	800c2fa <__lshift+0xbe>
 800c28a:	6920      	ldr	r0, [r4, #16]
 800c28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c290:	f104 0314 	add.w	r3, r4, #20
 800c294:	f019 091f 	ands.w	r9, r9, #31
 800c298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c29c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2a0:	d02f      	beq.n	800c302 <__lshift+0xc6>
 800c2a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c2a6:	468a      	mov	sl, r1
 800c2a8:	f04f 0c00 	mov.w	ip, #0
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	fa02 f209 	lsl.w	r2, r2, r9
 800c2b2:	ea42 020c 	orr.w	r2, r2, ip
 800c2b6:	f84a 2b04 	str.w	r2, [sl], #4
 800c2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2be:	4298      	cmp	r0, r3
 800c2c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c2c4:	d8f2      	bhi.n	800c2ac <__lshift+0x70>
 800c2c6:	1b03      	subs	r3, r0, r4
 800c2c8:	3b15      	subs	r3, #21
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	f104 0215 	add.w	r2, r4, #21
 800c2d4:	4290      	cmp	r0, r2
 800c2d6:	bf38      	it	cc
 800c2d8:	2304      	movcc	r3, #4
 800c2da:	f841 c003 	str.w	ip, [r1, r3]
 800c2de:	f1bc 0f00 	cmp.w	ip, #0
 800c2e2:	d001      	beq.n	800c2e8 <__lshift+0xac>
 800c2e4:	f108 0602 	add.w	r6, r8, #2
 800c2e8:	3e01      	subs	r6, #1
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	612e      	str	r6, [r5, #16]
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	f7ff fdd2 	bl	800be98 <_Bfree>
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2fe:	3301      	adds	r3, #1
 800c300:	e7c1      	b.n	800c286 <__lshift+0x4a>
 800c302:	3904      	subs	r1, #4
 800c304:	f853 2b04 	ldr.w	r2, [r3], #4
 800c308:	f841 2f04 	str.w	r2, [r1, #4]!
 800c30c:	4298      	cmp	r0, r3
 800c30e:	d8f9      	bhi.n	800c304 <__lshift+0xc8>
 800c310:	e7ea      	b.n	800c2e8 <__lshift+0xac>
 800c312:	bf00      	nop
 800c314:	08018df3 	.word	0x08018df3
 800c318:	08018e04 	.word	0x08018e04

0800c31c <__mcmp>:
 800c31c:	b530      	push	{r4, r5, lr}
 800c31e:	6902      	ldr	r2, [r0, #16]
 800c320:	690c      	ldr	r4, [r1, #16]
 800c322:	1b12      	subs	r2, r2, r4
 800c324:	d10e      	bne.n	800c344 <__mcmp+0x28>
 800c326:	f100 0314 	add.w	r3, r0, #20
 800c32a:	3114      	adds	r1, #20
 800c32c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c330:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c334:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c338:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c33c:	42a5      	cmp	r5, r4
 800c33e:	d003      	beq.n	800c348 <__mcmp+0x2c>
 800c340:	d305      	bcc.n	800c34e <__mcmp+0x32>
 800c342:	2201      	movs	r2, #1
 800c344:	4610      	mov	r0, r2
 800c346:	bd30      	pop	{r4, r5, pc}
 800c348:	4283      	cmp	r3, r0
 800c34a:	d3f3      	bcc.n	800c334 <__mcmp+0x18>
 800c34c:	e7fa      	b.n	800c344 <__mcmp+0x28>
 800c34e:	f04f 32ff 	mov.w	r2, #4294967295
 800c352:	e7f7      	b.n	800c344 <__mcmp+0x28>

0800c354 <__mdiff>:
 800c354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	460c      	mov	r4, r1
 800c35a:	4606      	mov	r6, r0
 800c35c:	4611      	mov	r1, r2
 800c35e:	4620      	mov	r0, r4
 800c360:	4690      	mov	r8, r2
 800c362:	f7ff ffdb 	bl	800c31c <__mcmp>
 800c366:	1e05      	subs	r5, r0, #0
 800c368:	d110      	bne.n	800c38c <__mdiff+0x38>
 800c36a:	4629      	mov	r1, r5
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff fd53 	bl	800be18 <_Balloc>
 800c372:	b930      	cbnz	r0, 800c382 <__mdiff+0x2e>
 800c374:	4b3a      	ldr	r3, [pc, #232]	; (800c460 <__mdiff+0x10c>)
 800c376:	4602      	mov	r2, r0
 800c378:	f240 2132 	movw	r1, #562	; 0x232
 800c37c:	4839      	ldr	r0, [pc, #228]	; (800c464 <__mdiff+0x110>)
 800c37e:	f000 fb31 	bl	800c9e4 <__assert_func>
 800c382:	2301      	movs	r3, #1
 800c384:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38c:	bfa4      	itt	ge
 800c38e:	4643      	movge	r3, r8
 800c390:	46a0      	movge	r8, r4
 800c392:	4630      	mov	r0, r6
 800c394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c398:	bfa6      	itte	ge
 800c39a:	461c      	movge	r4, r3
 800c39c:	2500      	movge	r5, #0
 800c39e:	2501      	movlt	r5, #1
 800c3a0:	f7ff fd3a 	bl	800be18 <_Balloc>
 800c3a4:	b920      	cbnz	r0, 800c3b0 <__mdiff+0x5c>
 800c3a6:	4b2e      	ldr	r3, [pc, #184]	; (800c460 <__mdiff+0x10c>)
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3ae:	e7e5      	b.n	800c37c <__mdiff+0x28>
 800c3b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3b4:	6926      	ldr	r6, [r4, #16]
 800c3b6:	60c5      	str	r5, [r0, #12]
 800c3b8:	f104 0914 	add.w	r9, r4, #20
 800c3bc:	f108 0514 	add.w	r5, r8, #20
 800c3c0:	f100 0e14 	add.w	lr, r0, #20
 800c3c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3cc:	f108 0210 	add.w	r2, r8, #16
 800c3d0:	46f2      	mov	sl, lr
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3dc:	fa1f f883 	uxth.w	r8, r3
 800c3e0:	fa11 f18b 	uxtah	r1, r1, fp
 800c3e4:	0c1b      	lsrs	r3, r3, #16
 800c3e6:	eba1 0808 	sub.w	r8, r1, r8
 800c3ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3f2:	fa1f f888 	uxth.w	r8, r8
 800c3f6:	1419      	asrs	r1, r3, #16
 800c3f8:	454e      	cmp	r6, r9
 800c3fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3fe:	f84a 3b04 	str.w	r3, [sl], #4
 800c402:	d8e7      	bhi.n	800c3d4 <__mdiff+0x80>
 800c404:	1b33      	subs	r3, r6, r4
 800c406:	3b15      	subs	r3, #21
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	3304      	adds	r3, #4
 800c40e:	3415      	adds	r4, #21
 800c410:	42a6      	cmp	r6, r4
 800c412:	bf38      	it	cc
 800c414:	2304      	movcc	r3, #4
 800c416:	441d      	add	r5, r3
 800c418:	4473      	add	r3, lr
 800c41a:	469e      	mov	lr, r3
 800c41c:	462e      	mov	r6, r5
 800c41e:	4566      	cmp	r6, ip
 800c420:	d30e      	bcc.n	800c440 <__mdiff+0xec>
 800c422:	f10c 0203 	add.w	r2, ip, #3
 800c426:	1b52      	subs	r2, r2, r5
 800c428:	f022 0203 	bic.w	r2, r2, #3
 800c42c:	3d03      	subs	r5, #3
 800c42e:	45ac      	cmp	ip, r5
 800c430:	bf38      	it	cc
 800c432:	2200      	movcc	r2, #0
 800c434:	441a      	add	r2, r3
 800c436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c43a:	b17b      	cbz	r3, 800c45c <__mdiff+0x108>
 800c43c:	6107      	str	r7, [r0, #16]
 800c43e:	e7a3      	b.n	800c388 <__mdiff+0x34>
 800c440:	f856 8b04 	ldr.w	r8, [r6], #4
 800c444:	fa11 f288 	uxtah	r2, r1, r8
 800c448:	1414      	asrs	r4, r2, #16
 800c44a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c44e:	b292      	uxth	r2, r2
 800c450:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c454:	f84e 2b04 	str.w	r2, [lr], #4
 800c458:	1421      	asrs	r1, r4, #16
 800c45a:	e7e0      	b.n	800c41e <__mdiff+0xca>
 800c45c:	3f01      	subs	r7, #1
 800c45e:	e7ea      	b.n	800c436 <__mdiff+0xe2>
 800c460:	08018df3 	.word	0x08018df3
 800c464:	08018e04 	.word	0x08018e04

0800c468 <__d2b>:
 800c468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c46c:	4689      	mov	r9, r1
 800c46e:	2101      	movs	r1, #1
 800c470:	ec57 6b10 	vmov	r6, r7, d0
 800c474:	4690      	mov	r8, r2
 800c476:	f7ff fccf 	bl	800be18 <_Balloc>
 800c47a:	4604      	mov	r4, r0
 800c47c:	b930      	cbnz	r0, 800c48c <__d2b+0x24>
 800c47e:	4602      	mov	r2, r0
 800c480:	4b25      	ldr	r3, [pc, #148]	; (800c518 <__d2b+0xb0>)
 800c482:	4826      	ldr	r0, [pc, #152]	; (800c51c <__d2b+0xb4>)
 800c484:	f240 310a 	movw	r1, #778	; 0x30a
 800c488:	f000 faac 	bl	800c9e4 <__assert_func>
 800c48c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c494:	bb35      	cbnz	r5, 800c4e4 <__d2b+0x7c>
 800c496:	2e00      	cmp	r6, #0
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	d028      	beq.n	800c4ee <__d2b+0x86>
 800c49c:	4668      	mov	r0, sp
 800c49e:	9600      	str	r6, [sp, #0]
 800c4a0:	f7ff fd82 	bl	800bfa8 <__lo0bits>
 800c4a4:	9900      	ldr	r1, [sp, #0]
 800c4a6:	b300      	cbz	r0, 800c4ea <__d2b+0x82>
 800c4a8:	9a01      	ldr	r2, [sp, #4]
 800c4aa:	f1c0 0320 	rsb	r3, r0, #32
 800c4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b2:	430b      	orrs	r3, r1
 800c4b4:	40c2      	lsrs	r2, r0
 800c4b6:	6163      	str	r3, [r4, #20]
 800c4b8:	9201      	str	r2, [sp, #4]
 800c4ba:	9b01      	ldr	r3, [sp, #4]
 800c4bc:	61a3      	str	r3, [r4, #24]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	bf14      	ite	ne
 800c4c2:	2202      	movne	r2, #2
 800c4c4:	2201      	moveq	r2, #1
 800c4c6:	6122      	str	r2, [r4, #16]
 800c4c8:	b1d5      	cbz	r5, 800c500 <__d2b+0x98>
 800c4ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4ce:	4405      	add	r5, r0
 800c4d0:	f8c9 5000 	str.w	r5, [r9]
 800c4d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4d8:	f8c8 0000 	str.w	r0, [r8]
 800c4dc:	4620      	mov	r0, r4
 800c4de:	b003      	add	sp, #12
 800c4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4e8:	e7d5      	b.n	800c496 <__d2b+0x2e>
 800c4ea:	6161      	str	r1, [r4, #20]
 800c4ec:	e7e5      	b.n	800c4ba <__d2b+0x52>
 800c4ee:	a801      	add	r0, sp, #4
 800c4f0:	f7ff fd5a 	bl	800bfa8 <__lo0bits>
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	6163      	str	r3, [r4, #20]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	6122      	str	r2, [r4, #16]
 800c4fc:	3020      	adds	r0, #32
 800c4fe:	e7e3      	b.n	800c4c8 <__d2b+0x60>
 800c500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c508:	f8c9 0000 	str.w	r0, [r9]
 800c50c:	6918      	ldr	r0, [r3, #16]
 800c50e:	f7ff fd2b 	bl	800bf68 <__hi0bits>
 800c512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c516:	e7df      	b.n	800c4d8 <__d2b+0x70>
 800c518:	08018df3 	.word	0x08018df3
 800c51c:	08018e04 	.word	0x08018e04

0800c520 <_calloc_r>:
 800c520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c522:	fba1 2402 	umull	r2, r4, r1, r2
 800c526:	b94c      	cbnz	r4, 800c53c <_calloc_r+0x1c>
 800c528:	4611      	mov	r1, r2
 800c52a:	9201      	str	r2, [sp, #4]
 800c52c:	f000 f87a 	bl	800c624 <_malloc_r>
 800c530:	9a01      	ldr	r2, [sp, #4]
 800c532:	4605      	mov	r5, r0
 800c534:	b930      	cbnz	r0, 800c544 <_calloc_r+0x24>
 800c536:	4628      	mov	r0, r5
 800c538:	b003      	add	sp, #12
 800c53a:	bd30      	pop	{r4, r5, pc}
 800c53c:	220c      	movs	r2, #12
 800c53e:	6002      	str	r2, [r0, #0]
 800c540:	2500      	movs	r5, #0
 800c542:	e7f8      	b.n	800c536 <_calloc_r+0x16>
 800c544:	4621      	mov	r1, r4
 800c546:	f7fe f941 	bl	800a7cc <memset>
 800c54a:	e7f4      	b.n	800c536 <_calloc_r+0x16>

0800c54c <_free_r>:
 800c54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c54e:	2900      	cmp	r1, #0
 800c550:	d044      	beq.n	800c5dc <_free_r+0x90>
 800c552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c556:	9001      	str	r0, [sp, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f1a1 0404 	sub.w	r4, r1, #4
 800c55e:	bfb8      	it	lt
 800c560:	18e4      	addlt	r4, r4, r3
 800c562:	f000 fa9b 	bl	800ca9c <__malloc_lock>
 800c566:	4a1e      	ldr	r2, [pc, #120]	; (800c5e0 <_free_r+0x94>)
 800c568:	9801      	ldr	r0, [sp, #4]
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	b933      	cbnz	r3, 800c57c <_free_r+0x30>
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	6014      	str	r4, [r2, #0]
 800c572:	b003      	add	sp, #12
 800c574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c578:	f000 ba96 	b.w	800caa8 <__malloc_unlock>
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	d908      	bls.n	800c592 <_free_r+0x46>
 800c580:	6825      	ldr	r5, [r4, #0]
 800c582:	1961      	adds	r1, r4, r5
 800c584:	428b      	cmp	r3, r1
 800c586:	bf01      	itttt	eq
 800c588:	6819      	ldreq	r1, [r3, #0]
 800c58a:	685b      	ldreq	r3, [r3, #4]
 800c58c:	1949      	addeq	r1, r1, r5
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	e7ed      	b.n	800c56e <_free_r+0x22>
 800c592:	461a      	mov	r2, r3
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	b10b      	cbz	r3, 800c59c <_free_r+0x50>
 800c598:	42a3      	cmp	r3, r4
 800c59a:	d9fa      	bls.n	800c592 <_free_r+0x46>
 800c59c:	6811      	ldr	r1, [r2, #0]
 800c59e:	1855      	adds	r5, r2, r1
 800c5a0:	42a5      	cmp	r5, r4
 800c5a2:	d10b      	bne.n	800c5bc <_free_r+0x70>
 800c5a4:	6824      	ldr	r4, [r4, #0]
 800c5a6:	4421      	add	r1, r4
 800c5a8:	1854      	adds	r4, r2, r1
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	d1e0      	bne.n	800c572 <_free_r+0x26>
 800c5b0:	681c      	ldr	r4, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	6053      	str	r3, [r2, #4]
 800c5b6:	4421      	add	r1, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	e7da      	b.n	800c572 <_free_r+0x26>
 800c5bc:	d902      	bls.n	800c5c4 <_free_r+0x78>
 800c5be:	230c      	movs	r3, #12
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	e7d6      	b.n	800c572 <_free_r+0x26>
 800c5c4:	6825      	ldr	r5, [r4, #0]
 800c5c6:	1961      	adds	r1, r4, r5
 800c5c8:	428b      	cmp	r3, r1
 800c5ca:	bf04      	itt	eq
 800c5cc:	6819      	ldreq	r1, [r3, #0]
 800c5ce:	685b      	ldreq	r3, [r3, #4]
 800c5d0:	6063      	str	r3, [r4, #4]
 800c5d2:	bf04      	itt	eq
 800c5d4:	1949      	addeq	r1, r1, r5
 800c5d6:	6021      	streq	r1, [r4, #0]
 800c5d8:	6054      	str	r4, [r2, #4]
 800c5da:	e7ca      	b.n	800c572 <_free_r+0x26>
 800c5dc:	b003      	add	sp, #12
 800c5de:	bd30      	pop	{r4, r5, pc}
 800c5e0:	20000648 	.word	0x20000648

0800c5e4 <sbrk_aligned>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	4e0e      	ldr	r6, [pc, #56]	; (800c620 <sbrk_aligned+0x3c>)
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	6831      	ldr	r1, [r6, #0]
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	b911      	cbnz	r1, 800c5f6 <sbrk_aligned+0x12>
 800c5f0:	f000 f9e8 	bl	800c9c4 <_sbrk_r>
 800c5f4:	6030      	str	r0, [r6, #0]
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	f000 f9e3 	bl	800c9c4 <_sbrk_r>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d00a      	beq.n	800c618 <sbrk_aligned+0x34>
 800c602:	1cc4      	adds	r4, r0, #3
 800c604:	f024 0403 	bic.w	r4, r4, #3
 800c608:	42a0      	cmp	r0, r4
 800c60a:	d007      	beq.n	800c61c <sbrk_aligned+0x38>
 800c60c:	1a21      	subs	r1, r4, r0
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 f9d8 	bl	800c9c4 <_sbrk_r>
 800c614:	3001      	adds	r0, #1
 800c616:	d101      	bne.n	800c61c <sbrk_aligned+0x38>
 800c618:	f04f 34ff 	mov.w	r4, #4294967295
 800c61c:	4620      	mov	r0, r4
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	2000064c 	.word	0x2000064c

0800c624 <_malloc_r>:
 800c624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c628:	1ccd      	adds	r5, r1, #3
 800c62a:	f025 0503 	bic.w	r5, r5, #3
 800c62e:	3508      	adds	r5, #8
 800c630:	2d0c      	cmp	r5, #12
 800c632:	bf38      	it	cc
 800c634:	250c      	movcc	r5, #12
 800c636:	2d00      	cmp	r5, #0
 800c638:	4607      	mov	r7, r0
 800c63a:	db01      	blt.n	800c640 <_malloc_r+0x1c>
 800c63c:	42a9      	cmp	r1, r5
 800c63e:	d905      	bls.n	800c64c <_malloc_r+0x28>
 800c640:	230c      	movs	r3, #12
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	2600      	movs	r6, #0
 800c646:	4630      	mov	r0, r6
 800c648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64c:	4e2e      	ldr	r6, [pc, #184]	; (800c708 <_malloc_r+0xe4>)
 800c64e:	f000 fa25 	bl	800ca9c <__malloc_lock>
 800c652:	6833      	ldr	r3, [r6, #0]
 800c654:	461c      	mov	r4, r3
 800c656:	bb34      	cbnz	r4, 800c6a6 <_malloc_r+0x82>
 800c658:	4629      	mov	r1, r5
 800c65a:	4638      	mov	r0, r7
 800c65c:	f7ff ffc2 	bl	800c5e4 <sbrk_aligned>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	4604      	mov	r4, r0
 800c664:	d14d      	bne.n	800c702 <_malloc_r+0xde>
 800c666:	6834      	ldr	r4, [r6, #0]
 800c668:	4626      	mov	r6, r4
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	d140      	bne.n	800c6f0 <_malloc_r+0xcc>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	4631      	mov	r1, r6
 800c672:	4638      	mov	r0, r7
 800c674:	eb04 0803 	add.w	r8, r4, r3
 800c678:	f000 f9a4 	bl	800c9c4 <_sbrk_r>
 800c67c:	4580      	cmp	r8, r0
 800c67e:	d13a      	bne.n	800c6f6 <_malloc_r+0xd2>
 800c680:	6821      	ldr	r1, [r4, #0]
 800c682:	3503      	adds	r5, #3
 800c684:	1a6d      	subs	r5, r5, r1
 800c686:	f025 0503 	bic.w	r5, r5, #3
 800c68a:	3508      	adds	r5, #8
 800c68c:	2d0c      	cmp	r5, #12
 800c68e:	bf38      	it	cc
 800c690:	250c      	movcc	r5, #12
 800c692:	4629      	mov	r1, r5
 800c694:	4638      	mov	r0, r7
 800c696:	f7ff ffa5 	bl	800c5e4 <sbrk_aligned>
 800c69a:	3001      	adds	r0, #1
 800c69c:	d02b      	beq.n	800c6f6 <_malloc_r+0xd2>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	442b      	add	r3, r5
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	e00e      	b.n	800c6c4 <_malloc_r+0xa0>
 800c6a6:	6822      	ldr	r2, [r4, #0]
 800c6a8:	1b52      	subs	r2, r2, r5
 800c6aa:	d41e      	bmi.n	800c6ea <_malloc_r+0xc6>
 800c6ac:	2a0b      	cmp	r2, #11
 800c6ae:	d916      	bls.n	800c6de <_malloc_r+0xba>
 800c6b0:	1961      	adds	r1, r4, r5
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	6025      	str	r5, [r4, #0]
 800c6b6:	bf18      	it	ne
 800c6b8:	6059      	strne	r1, [r3, #4]
 800c6ba:	6863      	ldr	r3, [r4, #4]
 800c6bc:	bf08      	it	eq
 800c6be:	6031      	streq	r1, [r6, #0]
 800c6c0:	5162      	str	r2, [r4, r5]
 800c6c2:	604b      	str	r3, [r1, #4]
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f104 060b 	add.w	r6, r4, #11
 800c6ca:	f000 f9ed 	bl	800caa8 <__malloc_unlock>
 800c6ce:	f026 0607 	bic.w	r6, r6, #7
 800c6d2:	1d23      	adds	r3, r4, #4
 800c6d4:	1af2      	subs	r2, r6, r3
 800c6d6:	d0b6      	beq.n	800c646 <_malloc_r+0x22>
 800c6d8:	1b9b      	subs	r3, r3, r6
 800c6da:	50a3      	str	r3, [r4, r2]
 800c6dc:	e7b3      	b.n	800c646 <_malloc_r+0x22>
 800c6de:	6862      	ldr	r2, [r4, #4]
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	bf0c      	ite	eq
 800c6e4:	6032      	streq	r2, [r6, #0]
 800c6e6:	605a      	strne	r2, [r3, #4]
 800c6e8:	e7ec      	b.n	800c6c4 <_malloc_r+0xa0>
 800c6ea:	4623      	mov	r3, r4
 800c6ec:	6864      	ldr	r4, [r4, #4]
 800c6ee:	e7b2      	b.n	800c656 <_malloc_r+0x32>
 800c6f0:	4634      	mov	r4, r6
 800c6f2:	6876      	ldr	r6, [r6, #4]
 800c6f4:	e7b9      	b.n	800c66a <_malloc_r+0x46>
 800c6f6:	230c      	movs	r3, #12
 800c6f8:	603b      	str	r3, [r7, #0]
 800c6fa:	4638      	mov	r0, r7
 800c6fc:	f000 f9d4 	bl	800caa8 <__malloc_unlock>
 800c700:	e7a1      	b.n	800c646 <_malloc_r+0x22>
 800c702:	6025      	str	r5, [r4, #0]
 800c704:	e7de      	b.n	800c6c4 <_malloc_r+0xa0>
 800c706:	bf00      	nop
 800c708:	20000648 	.word	0x20000648

0800c70c <__ssputs_r>:
 800c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c710:	688e      	ldr	r6, [r1, #8]
 800c712:	429e      	cmp	r6, r3
 800c714:	4682      	mov	sl, r0
 800c716:	460c      	mov	r4, r1
 800c718:	4690      	mov	r8, r2
 800c71a:	461f      	mov	r7, r3
 800c71c:	d838      	bhi.n	800c790 <__ssputs_r+0x84>
 800c71e:	898a      	ldrh	r2, [r1, #12]
 800c720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c724:	d032      	beq.n	800c78c <__ssputs_r+0x80>
 800c726:	6825      	ldr	r5, [r4, #0]
 800c728:	6909      	ldr	r1, [r1, #16]
 800c72a:	eba5 0901 	sub.w	r9, r5, r1
 800c72e:	6965      	ldr	r5, [r4, #20]
 800c730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c738:	3301      	adds	r3, #1
 800c73a:	444b      	add	r3, r9
 800c73c:	106d      	asrs	r5, r5, #1
 800c73e:	429d      	cmp	r5, r3
 800c740:	bf38      	it	cc
 800c742:	461d      	movcc	r5, r3
 800c744:	0553      	lsls	r3, r2, #21
 800c746:	d531      	bpl.n	800c7ac <__ssputs_r+0xa0>
 800c748:	4629      	mov	r1, r5
 800c74a:	f7ff ff6b 	bl	800c624 <_malloc_r>
 800c74e:	4606      	mov	r6, r0
 800c750:	b950      	cbnz	r0, 800c768 <__ssputs_r+0x5c>
 800c752:	230c      	movs	r3, #12
 800c754:	f8ca 3000 	str.w	r3, [sl]
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c75e:	81a3      	strh	r3, [r4, #12]
 800c760:	f04f 30ff 	mov.w	r0, #4294967295
 800c764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c768:	6921      	ldr	r1, [r4, #16]
 800c76a:	464a      	mov	r2, r9
 800c76c:	f7ff fb46 	bl	800bdfc <memcpy>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	6126      	str	r6, [r4, #16]
 800c77e:	6165      	str	r5, [r4, #20]
 800c780:	444e      	add	r6, r9
 800c782:	eba5 0509 	sub.w	r5, r5, r9
 800c786:	6026      	str	r6, [r4, #0]
 800c788:	60a5      	str	r5, [r4, #8]
 800c78a:	463e      	mov	r6, r7
 800c78c:	42be      	cmp	r6, r7
 800c78e:	d900      	bls.n	800c792 <__ssputs_r+0x86>
 800c790:	463e      	mov	r6, r7
 800c792:	6820      	ldr	r0, [r4, #0]
 800c794:	4632      	mov	r2, r6
 800c796:	4641      	mov	r1, r8
 800c798:	f000 f966 	bl	800ca68 <memmove>
 800c79c:	68a3      	ldr	r3, [r4, #8]
 800c79e:	1b9b      	subs	r3, r3, r6
 800c7a0:	60a3      	str	r3, [r4, #8]
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	4433      	add	r3, r6
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	e7db      	b.n	800c764 <__ssputs_r+0x58>
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	f000 f981 	bl	800cab4 <_realloc_r>
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d1e1      	bne.n	800c77c <__ssputs_r+0x70>
 800c7b8:	6921      	ldr	r1, [r4, #16]
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	f7ff fec6 	bl	800c54c <_free_r>
 800c7c0:	e7c7      	b.n	800c752 <__ssputs_r+0x46>
	...

0800c7c4 <_svfiprintf_r>:
 800c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	4698      	mov	r8, r3
 800c7ca:	898b      	ldrh	r3, [r1, #12]
 800c7cc:	061b      	lsls	r3, r3, #24
 800c7ce:	b09d      	sub	sp, #116	; 0x74
 800c7d0:	4607      	mov	r7, r0
 800c7d2:	460d      	mov	r5, r1
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	d50e      	bpl.n	800c7f6 <_svfiprintf_r+0x32>
 800c7d8:	690b      	ldr	r3, [r1, #16]
 800c7da:	b963      	cbnz	r3, 800c7f6 <_svfiprintf_r+0x32>
 800c7dc:	2140      	movs	r1, #64	; 0x40
 800c7de:	f7ff ff21 	bl	800c624 <_malloc_r>
 800c7e2:	6028      	str	r0, [r5, #0]
 800c7e4:	6128      	str	r0, [r5, #16]
 800c7e6:	b920      	cbnz	r0, 800c7f2 <_svfiprintf_r+0x2e>
 800c7e8:	230c      	movs	r3, #12
 800c7ea:	603b      	str	r3, [r7, #0]
 800c7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f0:	e0d1      	b.n	800c996 <_svfiprintf_r+0x1d2>
 800c7f2:	2340      	movs	r3, #64	; 0x40
 800c7f4:	616b      	str	r3, [r5, #20]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fa:	2320      	movs	r3, #32
 800c7fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c800:	f8cd 800c 	str.w	r8, [sp, #12]
 800c804:	2330      	movs	r3, #48	; 0x30
 800c806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9b0 <_svfiprintf_r+0x1ec>
 800c80a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c80e:	f04f 0901 	mov.w	r9, #1
 800c812:	4623      	mov	r3, r4
 800c814:	469a      	mov	sl, r3
 800c816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c81a:	b10a      	cbz	r2, 800c820 <_svfiprintf_r+0x5c>
 800c81c:	2a25      	cmp	r2, #37	; 0x25
 800c81e:	d1f9      	bne.n	800c814 <_svfiprintf_r+0x50>
 800c820:	ebba 0b04 	subs.w	fp, sl, r4
 800c824:	d00b      	beq.n	800c83e <_svfiprintf_r+0x7a>
 800c826:	465b      	mov	r3, fp
 800c828:	4622      	mov	r2, r4
 800c82a:	4629      	mov	r1, r5
 800c82c:	4638      	mov	r0, r7
 800c82e:	f7ff ff6d 	bl	800c70c <__ssputs_r>
 800c832:	3001      	adds	r0, #1
 800c834:	f000 80aa 	beq.w	800c98c <_svfiprintf_r+0x1c8>
 800c838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c83a:	445a      	add	r2, fp
 800c83c:	9209      	str	r2, [sp, #36]	; 0x24
 800c83e:	f89a 3000 	ldrb.w	r3, [sl]
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 80a2 	beq.w	800c98c <_svfiprintf_r+0x1c8>
 800c848:	2300      	movs	r3, #0
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295
 800c84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c852:	f10a 0a01 	add.w	sl, sl, #1
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	9307      	str	r3, [sp, #28]
 800c85a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c85e:	931a      	str	r3, [sp, #104]	; 0x68
 800c860:	4654      	mov	r4, sl
 800c862:	2205      	movs	r2, #5
 800c864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c868:	4851      	ldr	r0, [pc, #324]	; (800c9b0 <_svfiprintf_r+0x1ec>)
 800c86a:	f7f3 fcc1 	bl	80001f0 <memchr>
 800c86e:	9a04      	ldr	r2, [sp, #16]
 800c870:	b9d8      	cbnz	r0, 800c8aa <_svfiprintf_r+0xe6>
 800c872:	06d0      	lsls	r0, r2, #27
 800c874:	bf44      	itt	mi
 800c876:	2320      	movmi	r3, #32
 800c878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c87c:	0711      	lsls	r1, r2, #28
 800c87e:	bf44      	itt	mi
 800c880:	232b      	movmi	r3, #43	; 0x2b
 800c882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c886:	f89a 3000 	ldrb.w	r3, [sl]
 800c88a:	2b2a      	cmp	r3, #42	; 0x2a
 800c88c:	d015      	beq.n	800c8ba <_svfiprintf_r+0xf6>
 800c88e:	9a07      	ldr	r2, [sp, #28]
 800c890:	4654      	mov	r4, sl
 800c892:	2000      	movs	r0, #0
 800c894:	f04f 0c0a 	mov.w	ip, #10
 800c898:	4621      	mov	r1, r4
 800c89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c89e:	3b30      	subs	r3, #48	; 0x30
 800c8a0:	2b09      	cmp	r3, #9
 800c8a2:	d94e      	bls.n	800c942 <_svfiprintf_r+0x17e>
 800c8a4:	b1b0      	cbz	r0, 800c8d4 <_svfiprintf_r+0x110>
 800c8a6:	9207      	str	r2, [sp, #28]
 800c8a8:	e014      	b.n	800c8d4 <_svfiprintf_r+0x110>
 800c8aa:	eba0 0308 	sub.w	r3, r0, r8
 800c8ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	9304      	str	r3, [sp, #16]
 800c8b6:	46a2      	mov	sl, r4
 800c8b8:	e7d2      	b.n	800c860 <_svfiprintf_r+0x9c>
 800c8ba:	9b03      	ldr	r3, [sp, #12]
 800c8bc:	1d19      	adds	r1, r3, #4
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	9103      	str	r1, [sp, #12]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bfbb      	ittet	lt
 800c8c6:	425b      	neglt	r3, r3
 800c8c8:	f042 0202 	orrlt.w	r2, r2, #2
 800c8cc:	9307      	strge	r3, [sp, #28]
 800c8ce:	9307      	strlt	r3, [sp, #28]
 800c8d0:	bfb8      	it	lt
 800c8d2:	9204      	strlt	r2, [sp, #16]
 800c8d4:	7823      	ldrb	r3, [r4, #0]
 800c8d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d8:	d10c      	bne.n	800c8f4 <_svfiprintf_r+0x130>
 800c8da:	7863      	ldrb	r3, [r4, #1]
 800c8dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8de:	d135      	bne.n	800c94c <_svfiprintf_r+0x188>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	1d1a      	adds	r2, r3, #4
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	9203      	str	r2, [sp, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bfb8      	it	lt
 800c8ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8f0:	3402      	adds	r4, #2
 800c8f2:	9305      	str	r3, [sp, #20]
 800c8f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9c0 <_svfiprintf_r+0x1fc>
 800c8f8:	7821      	ldrb	r1, [r4, #0]
 800c8fa:	2203      	movs	r2, #3
 800c8fc:	4650      	mov	r0, sl
 800c8fe:	f7f3 fc77 	bl	80001f0 <memchr>
 800c902:	b140      	cbz	r0, 800c916 <_svfiprintf_r+0x152>
 800c904:	2340      	movs	r3, #64	; 0x40
 800c906:	eba0 000a 	sub.w	r0, r0, sl
 800c90a:	fa03 f000 	lsl.w	r0, r3, r0
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	4303      	orrs	r3, r0
 800c912:	3401      	adds	r4, #1
 800c914:	9304      	str	r3, [sp, #16]
 800c916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c91a:	4826      	ldr	r0, [pc, #152]	; (800c9b4 <_svfiprintf_r+0x1f0>)
 800c91c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c920:	2206      	movs	r2, #6
 800c922:	f7f3 fc65 	bl	80001f0 <memchr>
 800c926:	2800      	cmp	r0, #0
 800c928:	d038      	beq.n	800c99c <_svfiprintf_r+0x1d8>
 800c92a:	4b23      	ldr	r3, [pc, #140]	; (800c9b8 <_svfiprintf_r+0x1f4>)
 800c92c:	bb1b      	cbnz	r3, 800c976 <_svfiprintf_r+0x1b2>
 800c92e:	9b03      	ldr	r3, [sp, #12]
 800c930:	3307      	adds	r3, #7
 800c932:	f023 0307 	bic.w	r3, r3, #7
 800c936:	3308      	adds	r3, #8
 800c938:	9303      	str	r3, [sp, #12]
 800c93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c93c:	4433      	add	r3, r6
 800c93e:	9309      	str	r3, [sp, #36]	; 0x24
 800c940:	e767      	b.n	800c812 <_svfiprintf_r+0x4e>
 800c942:	fb0c 3202 	mla	r2, ip, r2, r3
 800c946:	460c      	mov	r4, r1
 800c948:	2001      	movs	r0, #1
 800c94a:	e7a5      	b.n	800c898 <_svfiprintf_r+0xd4>
 800c94c:	2300      	movs	r3, #0
 800c94e:	3401      	adds	r4, #1
 800c950:	9305      	str	r3, [sp, #20]
 800c952:	4619      	mov	r1, r3
 800c954:	f04f 0c0a 	mov.w	ip, #10
 800c958:	4620      	mov	r0, r4
 800c95a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c95e:	3a30      	subs	r2, #48	; 0x30
 800c960:	2a09      	cmp	r2, #9
 800c962:	d903      	bls.n	800c96c <_svfiprintf_r+0x1a8>
 800c964:	2b00      	cmp	r3, #0
 800c966:	d0c5      	beq.n	800c8f4 <_svfiprintf_r+0x130>
 800c968:	9105      	str	r1, [sp, #20]
 800c96a:	e7c3      	b.n	800c8f4 <_svfiprintf_r+0x130>
 800c96c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c970:	4604      	mov	r4, r0
 800c972:	2301      	movs	r3, #1
 800c974:	e7f0      	b.n	800c958 <_svfiprintf_r+0x194>
 800c976:	ab03      	add	r3, sp, #12
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	462a      	mov	r2, r5
 800c97c:	4b0f      	ldr	r3, [pc, #60]	; (800c9bc <_svfiprintf_r+0x1f8>)
 800c97e:	a904      	add	r1, sp, #16
 800c980:	4638      	mov	r0, r7
 800c982:	f7fd ffcb 	bl	800a91c <_printf_float>
 800c986:	1c42      	adds	r2, r0, #1
 800c988:	4606      	mov	r6, r0
 800c98a:	d1d6      	bne.n	800c93a <_svfiprintf_r+0x176>
 800c98c:	89ab      	ldrh	r3, [r5, #12]
 800c98e:	065b      	lsls	r3, r3, #25
 800c990:	f53f af2c 	bmi.w	800c7ec <_svfiprintf_r+0x28>
 800c994:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c996:	b01d      	add	sp, #116	; 0x74
 800c998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99c:	ab03      	add	r3, sp, #12
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	462a      	mov	r2, r5
 800c9a2:	4b06      	ldr	r3, [pc, #24]	; (800c9bc <_svfiprintf_r+0x1f8>)
 800c9a4:	a904      	add	r1, sp, #16
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f7fe fa5c 	bl	800ae64 <_printf_i>
 800c9ac:	e7eb      	b.n	800c986 <_svfiprintf_r+0x1c2>
 800c9ae:	bf00      	nop
 800c9b0:	08018f5c 	.word	0x08018f5c
 800c9b4:	08018f66 	.word	0x08018f66
 800c9b8:	0800a91d 	.word	0x0800a91d
 800c9bc:	0800c70d 	.word	0x0800c70d
 800c9c0:	08018f62 	.word	0x08018f62

0800c9c4 <_sbrk_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	4d06      	ldr	r5, [pc, #24]	; (800c9e0 <_sbrk_r+0x1c>)
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	4608      	mov	r0, r1
 800c9ce:	602b      	str	r3, [r5, #0]
 800c9d0:	f7f6 fcbc 	bl	800334c <_sbrk>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_sbrk_r+0x1a>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_sbrk_r+0x1a>
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	20000650 	.word	0x20000650

0800c9e4 <__assert_func>:
 800c9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9e6:	4614      	mov	r4, r2
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <__assert_func+0x2c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	68d8      	ldr	r0, [r3, #12]
 800c9f2:	b14c      	cbz	r4, 800ca08 <__assert_func+0x24>
 800c9f4:	4b07      	ldr	r3, [pc, #28]	; (800ca14 <__assert_func+0x30>)
 800c9f6:	9100      	str	r1, [sp, #0]
 800c9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9fc:	4906      	ldr	r1, [pc, #24]	; (800ca18 <__assert_func+0x34>)
 800c9fe:	462b      	mov	r3, r5
 800ca00:	f000 f80e 	bl	800ca20 <fiprintf>
 800ca04:	f000 faac 	bl	800cf60 <abort>
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <__assert_func+0x38>)
 800ca0a:	461c      	mov	r4, r3
 800ca0c:	e7f3      	b.n	800c9f6 <__assert_func+0x12>
 800ca0e:	bf00      	nop
 800ca10:	20000044 	.word	0x20000044
 800ca14:	08018f6d 	.word	0x08018f6d
 800ca18:	08018f7a 	.word	0x08018f7a
 800ca1c:	08018fa8 	.word	0x08018fa8

0800ca20 <fiprintf>:
 800ca20:	b40e      	push	{r1, r2, r3}
 800ca22:	b503      	push	{r0, r1, lr}
 800ca24:	4601      	mov	r1, r0
 800ca26:	ab03      	add	r3, sp, #12
 800ca28:	4805      	ldr	r0, [pc, #20]	; (800ca40 <fiprintf+0x20>)
 800ca2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2e:	6800      	ldr	r0, [r0, #0]
 800ca30:	9301      	str	r3, [sp, #4]
 800ca32:	f000 f897 	bl	800cb64 <_vfiprintf_r>
 800ca36:	b002      	add	sp, #8
 800ca38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca3c:	b003      	add	sp, #12
 800ca3e:	4770      	bx	lr
 800ca40:	20000044 	.word	0x20000044

0800ca44 <__ascii_mbtowc>:
 800ca44:	b082      	sub	sp, #8
 800ca46:	b901      	cbnz	r1, 800ca4a <__ascii_mbtowc+0x6>
 800ca48:	a901      	add	r1, sp, #4
 800ca4a:	b142      	cbz	r2, 800ca5e <__ascii_mbtowc+0x1a>
 800ca4c:	b14b      	cbz	r3, 800ca62 <__ascii_mbtowc+0x1e>
 800ca4e:	7813      	ldrb	r3, [r2, #0]
 800ca50:	600b      	str	r3, [r1, #0]
 800ca52:	7812      	ldrb	r2, [r2, #0]
 800ca54:	1e10      	subs	r0, r2, #0
 800ca56:	bf18      	it	ne
 800ca58:	2001      	movne	r0, #1
 800ca5a:	b002      	add	sp, #8
 800ca5c:	4770      	bx	lr
 800ca5e:	4610      	mov	r0, r2
 800ca60:	e7fb      	b.n	800ca5a <__ascii_mbtowc+0x16>
 800ca62:	f06f 0001 	mvn.w	r0, #1
 800ca66:	e7f8      	b.n	800ca5a <__ascii_mbtowc+0x16>

0800ca68 <memmove>:
 800ca68:	4288      	cmp	r0, r1
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	eb01 0402 	add.w	r4, r1, r2
 800ca70:	d902      	bls.n	800ca78 <memmove+0x10>
 800ca72:	4284      	cmp	r4, r0
 800ca74:	4623      	mov	r3, r4
 800ca76:	d807      	bhi.n	800ca88 <memmove+0x20>
 800ca78:	1e43      	subs	r3, r0, #1
 800ca7a:	42a1      	cmp	r1, r4
 800ca7c:	d008      	beq.n	800ca90 <memmove+0x28>
 800ca7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca86:	e7f8      	b.n	800ca7a <memmove+0x12>
 800ca88:	4402      	add	r2, r0
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	428a      	cmp	r2, r1
 800ca8e:	d100      	bne.n	800ca92 <memmove+0x2a>
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca9a:	e7f7      	b.n	800ca8c <memmove+0x24>

0800ca9c <__malloc_lock>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	; (800caa4 <__malloc_lock+0x8>)
 800ca9e:	f000 bc1f 	b.w	800d2e0 <__retarget_lock_acquire_recursive>
 800caa2:	bf00      	nop
 800caa4:	20000654 	.word	0x20000654

0800caa8 <__malloc_unlock>:
 800caa8:	4801      	ldr	r0, [pc, #4]	; (800cab0 <__malloc_unlock+0x8>)
 800caaa:	f000 bc1a 	b.w	800d2e2 <__retarget_lock_release_recursive>
 800caae:	bf00      	nop
 800cab0:	20000654 	.word	0x20000654

0800cab4 <_realloc_r>:
 800cab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab8:	4680      	mov	r8, r0
 800caba:	4614      	mov	r4, r2
 800cabc:	460e      	mov	r6, r1
 800cabe:	b921      	cbnz	r1, 800caca <_realloc_r+0x16>
 800cac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cac4:	4611      	mov	r1, r2
 800cac6:	f7ff bdad 	b.w	800c624 <_malloc_r>
 800caca:	b92a      	cbnz	r2, 800cad8 <_realloc_r+0x24>
 800cacc:	f7ff fd3e 	bl	800c54c <_free_r>
 800cad0:	4625      	mov	r5, r4
 800cad2:	4628      	mov	r0, r5
 800cad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad8:	f000 fc6a 	bl	800d3b0 <_malloc_usable_size_r>
 800cadc:	4284      	cmp	r4, r0
 800cade:	4607      	mov	r7, r0
 800cae0:	d802      	bhi.n	800cae8 <_realloc_r+0x34>
 800cae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cae6:	d812      	bhi.n	800cb0e <_realloc_r+0x5a>
 800cae8:	4621      	mov	r1, r4
 800caea:	4640      	mov	r0, r8
 800caec:	f7ff fd9a 	bl	800c624 <_malloc_r>
 800caf0:	4605      	mov	r5, r0
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d0ed      	beq.n	800cad2 <_realloc_r+0x1e>
 800caf6:	42bc      	cmp	r4, r7
 800caf8:	4622      	mov	r2, r4
 800cafa:	4631      	mov	r1, r6
 800cafc:	bf28      	it	cs
 800cafe:	463a      	movcs	r2, r7
 800cb00:	f7ff f97c 	bl	800bdfc <memcpy>
 800cb04:	4631      	mov	r1, r6
 800cb06:	4640      	mov	r0, r8
 800cb08:	f7ff fd20 	bl	800c54c <_free_r>
 800cb0c:	e7e1      	b.n	800cad2 <_realloc_r+0x1e>
 800cb0e:	4635      	mov	r5, r6
 800cb10:	e7df      	b.n	800cad2 <_realloc_r+0x1e>

0800cb12 <__sfputc_r>:
 800cb12:	6893      	ldr	r3, [r2, #8]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	b410      	push	{r4}
 800cb1a:	6093      	str	r3, [r2, #8]
 800cb1c:	da08      	bge.n	800cb30 <__sfputc_r+0x1e>
 800cb1e:	6994      	ldr	r4, [r2, #24]
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	db01      	blt.n	800cb28 <__sfputc_r+0x16>
 800cb24:	290a      	cmp	r1, #10
 800cb26:	d103      	bne.n	800cb30 <__sfputc_r+0x1e>
 800cb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb2c:	f000 b94a 	b.w	800cdc4 <__swbuf_r>
 800cb30:	6813      	ldr	r3, [r2, #0]
 800cb32:	1c58      	adds	r0, r3, #1
 800cb34:	6010      	str	r0, [r2, #0]
 800cb36:	7019      	strb	r1, [r3, #0]
 800cb38:	4608      	mov	r0, r1
 800cb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <__sfputs_r>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	4606      	mov	r6, r0
 800cb44:	460f      	mov	r7, r1
 800cb46:	4614      	mov	r4, r2
 800cb48:	18d5      	adds	r5, r2, r3
 800cb4a:	42ac      	cmp	r4, r5
 800cb4c:	d101      	bne.n	800cb52 <__sfputs_r+0x12>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	e007      	b.n	800cb62 <__sfputs_r+0x22>
 800cb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb56:	463a      	mov	r2, r7
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7ff ffda 	bl	800cb12 <__sfputc_r>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	d1f3      	bne.n	800cb4a <__sfputs_r+0xa>
 800cb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb64 <_vfiprintf_r>:
 800cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	460d      	mov	r5, r1
 800cb6a:	b09d      	sub	sp, #116	; 0x74
 800cb6c:	4614      	mov	r4, r2
 800cb6e:	4698      	mov	r8, r3
 800cb70:	4606      	mov	r6, r0
 800cb72:	b118      	cbz	r0, 800cb7c <_vfiprintf_r+0x18>
 800cb74:	6983      	ldr	r3, [r0, #24]
 800cb76:	b90b      	cbnz	r3, 800cb7c <_vfiprintf_r+0x18>
 800cb78:	f000 fb14 	bl	800d1a4 <__sinit>
 800cb7c:	4b89      	ldr	r3, [pc, #548]	; (800cda4 <_vfiprintf_r+0x240>)
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	d11b      	bne.n	800cbba <_vfiprintf_r+0x56>
 800cb82:	6875      	ldr	r5, [r6, #4]
 800cb84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb86:	07d9      	lsls	r1, r3, #31
 800cb88:	d405      	bmi.n	800cb96 <_vfiprintf_r+0x32>
 800cb8a:	89ab      	ldrh	r3, [r5, #12]
 800cb8c:	059a      	lsls	r2, r3, #22
 800cb8e:	d402      	bmi.n	800cb96 <_vfiprintf_r+0x32>
 800cb90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb92:	f000 fba5 	bl	800d2e0 <__retarget_lock_acquire_recursive>
 800cb96:	89ab      	ldrh	r3, [r5, #12]
 800cb98:	071b      	lsls	r3, r3, #28
 800cb9a:	d501      	bpl.n	800cba0 <_vfiprintf_r+0x3c>
 800cb9c:	692b      	ldr	r3, [r5, #16]
 800cb9e:	b9eb      	cbnz	r3, 800cbdc <_vfiprintf_r+0x78>
 800cba0:	4629      	mov	r1, r5
 800cba2:	4630      	mov	r0, r6
 800cba4:	f000 f96e 	bl	800ce84 <__swsetup_r>
 800cba8:	b1c0      	cbz	r0, 800cbdc <_vfiprintf_r+0x78>
 800cbaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbac:	07dc      	lsls	r4, r3, #31
 800cbae:	d50e      	bpl.n	800cbce <_vfiprintf_r+0x6a>
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb4:	b01d      	add	sp, #116	; 0x74
 800cbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbba:	4b7b      	ldr	r3, [pc, #492]	; (800cda8 <_vfiprintf_r+0x244>)
 800cbbc:	429d      	cmp	r5, r3
 800cbbe:	d101      	bne.n	800cbc4 <_vfiprintf_r+0x60>
 800cbc0:	68b5      	ldr	r5, [r6, #8]
 800cbc2:	e7df      	b.n	800cb84 <_vfiprintf_r+0x20>
 800cbc4:	4b79      	ldr	r3, [pc, #484]	; (800cdac <_vfiprintf_r+0x248>)
 800cbc6:	429d      	cmp	r5, r3
 800cbc8:	bf08      	it	eq
 800cbca:	68f5      	ldreq	r5, [r6, #12]
 800cbcc:	e7da      	b.n	800cb84 <_vfiprintf_r+0x20>
 800cbce:	89ab      	ldrh	r3, [r5, #12]
 800cbd0:	0598      	lsls	r0, r3, #22
 800cbd2:	d4ed      	bmi.n	800cbb0 <_vfiprintf_r+0x4c>
 800cbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbd6:	f000 fb84 	bl	800d2e2 <__retarget_lock_release_recursive>
 800cbda:	e7e9      	b.n	800cbb0 <_vfiprintf_r+0x4c>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe0:	2320      	movs	r3, #32
 800cbe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbea:	2330      	movs	r3, #48	; 0x30
 800cbec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cdb0 <_vfiprintf_r+0x24c>
 800cbf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbf4:	f04f 0901 	mov.w	r9, #1
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	469a      	mov	sl, r3
 800cbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc00:	b10a      	cbz	r2, 800cc06 <_vfiprintf_r+0xa2>
 800cc02:	2a25      	cmp	r2, #37	; 0x25
 800cc04:	d1f9      	bne.n	800cbfa <_vfiprintf_r+0x96>
 800cc06:	ebba 0b04 	subs.w	fp, sl, r4
 800cc0a:	d00b      	beq.n	800cc24 <_vfiprintf_r+0xc0>
 800cc0c:	465b      	mov	r3, fp
 800cc0e:	4622      	mov	r2, r4
 800cc10:	4629      	mov	r1, r5
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7ff ff94 	bl	800cb40 <__sfputs_r>
 800cc18:	3001      	adds	r0, #1
 800cc1a:	f000 80aa 	beq.w	800cd72 <_vfiprintf_r+0x20e>
 800cc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc20:	445a      	add	r2, fp
 800cc22:	9209      	str	r2, [sp, #36]	; 0x24
 800cc24:	f89a 3000 	ldrb.w	r3, [sl]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 80a2 	beq.w	800cd72 <_vfiprintf_r+0x20e>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f04f 32ff 	mov.w	r2, #4294967295
 800cc34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc38:	f10a 0a01 	add.w	sl, sl, #1
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	9307      	str	r3, [sp, #28]
 800cc40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc44:	931a      	str	r3, [sp, #104]	; 0x68
 800cc46:	4654      	mov	r4, sl
 800cc48:	2205      	movs	r2, #5
 800cc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4e:	4858      	ldr	r0, [pc, #352]	; (800cdb0 <_vfiprintf_r+0x24c>)
 800cc50:	f7f3 face 	bl	80001f0 <memchr>
 800cc54:	9a04      	ldr	r2, [sp, #16]
 800cc56:	b9d8      	cbnz	r0, 800cc90 <_vfiprintf_r+0x12c>
 800cc58:	06d1      	lsls	r1, r2, #27
 800cc5a:	bf44      	itt	mi
 800cc5c:	2320      	movmi	r3, #32
 800cc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc62:	0713      	lsls	r3, r2, #28
 800cc64:	bf44      	itt	mi
 800cc66:	232b      	movmi	r3, #43	; 0x2b
 800cc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc70:	2b2a      	cmp	r3, #42	; 0x2a
 800cc72:	d015      	beq.n	800cca0 <_vfiprintf_r+0x13c>
 800cc74:	9a07      	ldr	r2, [sp, #28]
 800cc76:	4654      	mov	r4, sl
 800cc78:	2000      	movs	r0, #0
 800cc7a:	f04f 0c0a 	mov.w	ip, #10
 800cc7e:	4621      	mov	r1, r4
 800cc80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc84:	3b30      	subs	r3, #48	; 0x30
 800cc86:	2b09      	cmp	r3, #9
 800cc88:	d94e      	bls.n	800cd28 <_vfiprintf_r+0x1c4>
 800cc8a:	b1b0      	cbz	r0, 800ccba <_vfiprintf_r+0x156>
 800cc8c:	9207      	str	r2, [sp, #28]
 800cc8e:	e014      	b.n	800ccba <_vfiprintf_r+0x156>
 800cc90:	eba0 0308 	sub.w	r3, r0, r8
 800cc94:	fa09 f303 	lsl.w	r3, r9, r3
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	9304      	str	r3, [sp, #16]
 800cc9c:	46a2      	mov	sl, r4
 800cc9e:	e7d2      	b.n	800cc46 <_vfiprintf_r+0xe2>
 800cca0:	9b03      	ldr	r3, [sp, #12]
 800cca2:	1d19      	adds	r1, r3, #4
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	9103      	str	r1, [sp, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	bfbb      	ittet	lt
 800ccac:	425b      	neglt	r3, r3
 800ccae:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb2:	9307      	strge	r3, [sp, #28]
 800ccb4:	9307      	strlt	r3, [sp, #28]
 800ccb6:	bfb8      	it	lt
 800ccb8:	9204      	strlt	r2, [sp, #16]
 800ccba:	7823      	ldrb	r3, [r4, #0]
 800ccbc:	2b2e      	cmp	r3, #46	; 0x2e
 800ccbe:	d10c      	bne.n	800ccda <_vfiprintf_r+0x176>
 800ccc0:	7863      	ldrb	r3, [r4, #1]
 800ccc2:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc4:	d135      	bne.n	800cd32 <_vfiprintf_r+0x1ce>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	1d1a      	adds	r2, r3, #4
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	9203      	str	r2, [sp, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	bfb8      	it	lt
 800ccd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd6:	3402      	adds	r4, #2
 800ccd8:	9305      	str	r3, [sp, #20]
 800ccda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cdc0 <_vfiprintf_r+0x25c>
 800ccde:	7821      	ldrb	r1, [r4, #0]
 800cce0:	2203      	movs	r2, #3
 800cce2:	4650      	mov	r0, sl
 800cce4:	f7f3 fa84 	bl	80001f0 <memchr>
 800cce8:	b140      	cbz	r0, 800ccfc <_vfiprintf_r+0x198>
 800ccea:	2340      	movs	r3, #64	; 0x40
 800ccec:	eba0 000a 	sub.w	r0, r0, sl
 800ccf0:	fa03 f000 	lsl.w	r0, r3, r0
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	4303      	orrs	r3, r0
 800ccf8:	3401      	adds	r4, #1
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd00:	482c      	ldr	r0, [pc, #176]	; (800cdb4 <_vfiprintf_r+0x250>)
 800cd02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd06:	2206      	movs	r2, #6
 800cd08:	f7f3 fa72 	bl	80001f0 <memchr>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d03f      	beq.n	800cd90 <_vfiprintf_r+0x22c>
 800cd10:	4b29      	ldr	r3, [pc, #164]	; (800cdb8 <_vfiprintf_r+0x254>)
 800cd12:	bb1b      	cbnz	r3, 800cd5c <_vfiprintf_r+0x1f8>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	3307      	adds	r3, #7
 800cd18:	f023 0307 	bic.w	r3, r3, #7
 800cd1c:	3308      	adds	r3, #8
 800cd1e:	9303      	str	r3, [sp, #12]
 800cd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd22:	443b      	add	r3, r7
 800cd24:	9309      	str	r3, [sp, #36]	; 0x24
 800cd26:	e767      	b.n	800cbf8 <_vfiprintf_r+0x94>
 800cd28:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	2001      	movs	r0, #1
 800cd30:	e7a5      	b.n	800cc7e <_vfiprintf_r+0x11a>
 800cd32:	2300      	movs	r3, #0
 800cd34:	3401      	adds	r4, #1
 800cd36:	9305      	str	r3, [sp, #20]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	f04f 0c0a 	mov.w	ip, #10
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd44:	3a30      	subs	r2, #48	; 0x30
 800cd46:	2a09      	cmp	r2, #9
 800cd48:	d903      	bls.n	800cd52 <_vfiprintf_r+0x1ee>
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0c5      	beq.n	800ccda <_vfiprintf_r+0x176>
 800cd4e:	9105      	str	r1, [sp, #20]
 800cd50:	e7c3      	b.n	800ccda <_vfiprintf_r+0x176>
 800cd52:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd56:	4604      	mov	r4, r0
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e7f0      	b.n	800cd3e <_vfiprintf_r+0x1da>
 800cd5c:	ab03      	add	r3, sp, #12
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	462a      	mov	r2, r5
 800cd62:	4b16      	ldr	r3, [pc, #88]	; (800cdbc <_vfiprintf_r+0x258>)
 800cd64:	a904      	add	r1, sp, #16
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7fd fdd8 	bl	800a91c <_printf_float>
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	1c78      	adds	r0, r7, #1
 800cd70:	d1d6      	bne.n	800cd20 <_vfiprintf_r+0x1bc>
 800cd72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd74:	07d9      	lsls	r1, r3, #31
 800cd76:	d405      	bmi.n	800cd84 <_vfiprintf_r+0x220>
 800cd78:	89ab      	ldrh	r3, [r5, #12]
 800cd7a:	059a      	lsls	r2, r3, #22
 800cd7c:	d402      	bmi.n	800cd84 <_vfiprintf_r+0x220>
 800cd7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd80:	f000 faaf 	bl	800d2e2 <__retarget_lock_release_recursive>
 800cd84:	89ab      	ldrh	r3, [r5, #12]
 800cd86:	065b      	lsls	r3, r3, #25
 800cd88:	f53f af12 	bmi.w	800cbb0 <_vfiprintf_r+0x4c>
 800cd8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd8e:	e711      	b.n	800cbb4 <_vfiprintf_r+0x50>
 800cd90:	ab03      	add	r3, sp, #12
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	462a      	mov	r2, r5
 800cd96:	4b09      	ldr	r3, [pc, #36]	; (800cdbc <_vfiprintf_r+0x258>)
 800cd98:	a904      	add	r1, sp, #16
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7fe f862 	bl	800ae64 <_printf_i>
 800cda0:	e7e4      	b.n	800cd6c <_vfiprintf_r+0x208>
 800cda2:	bf00      	nop
 800cda4:	080190d4 	.word	0x080190d4
 800cda8:	080190f4 	.word	0x080190f4
 800cdac:	080190b4 	.word	0x080190b4
 800cdb0:	08018f5c 	.word	0x08018f5c
 800cdb4:	08018f66 	.word	0x08018f66
 800cdb8:	0800a91d 	.word	0x0800a91d
 800cdbc:	0800cb41 	.word	0x0800cb41
 800cdc0:	08018f62 	.word	0x08018f62

0800cdc4 <__swbuf_r>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	460e      	mov	r6, r1
 800cdc8:	4614      	mov	r4, r2
 800cdca:	4605      	mov	r5, r0
 800cdcc:	b118      	cbz	r0, 800cdd6 <__swbuf_r+0x12>
 800cdce:	6983      	ldr	r3, [r0, #24]
 800cdd0:	b90b      	cbnz	r3, 800cdd6 <__swbuf_r+0x12>
 800cdd2:	f000 f9e7 	bl	800d1a4 <__sinit>
 800cdd6:	4b21      	ldr	r3, [pc, #132]	; (800ce5c <__swbuf_r+0x98>)
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	d12b      	bne.n	800ce34 <__swbuf_r+0x70>
 800cddc:	686c      	ldr	r4, [r5, #4]
 800cdde:	69a3      	ldr	r3, [r4, #24]
 800cde0:	60a3      	str	r3, [r4, #8]
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	071a      	lsls	r2, r3, #28
 800cde6:	d52f      	bpl.n	800ce48 <__swbuf_r+0x84>
 800cde8:	6923      	ldr	r3, [r4, #16]
 800cdea:	b36b      	cbz	r3, 800ce48 <__swbuf_r+0x84>
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	6820      	ldr	r0, [r4, #0]
 800cdf0:	1ac0      	subs	r0, r0, r3
 800cdf2:	6963      	ldr	r3, [r4, #20]
 800cdf4:	b2f6      	uxtb	r6, r6
 800cdf6:	4283      	cmp	r3, r0
 800cdf8:	4637      	mov	r7, r6
 800cdfa:	dc04      	bgt.n	800ce06 <__swbuf_r+0x42>
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f000 f93c 	bl	800d07c <_fflush_r>
 800ce04:	bb30      	cbnz	r0, 800ce54 <__swbuf_r+0x90>
 800ce06:	68a3      	ldr	r3, [r4, #8]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	60a3      	str	r3, [r4, #8]
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	6022      	str	r2, [r4, #0]
 800ce12:	701e      	strb	r6, [r3, #0]
 800ce14:	6963      	ldr	r3, [r4, #20]
 800ce16:	3001      	adds	r0, #1
 800ce18:	4283      	cmp	r3, r0
 800ce1a:	d004      	beq.n	800ce26 <__swbuf_r+0x62>
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	07db      	lsls	r3, r3, #31
 800ce20:	d506      	bpl.n	800ce30 <__swbuf_r+0x6c>
 800ce22:	2e0a      	cmp	r6, #10
 800ce24:	d104      	bne.n	800ce30 <__swbuf_r+0x6c>
 800ce26:	4621      	mov	r1, r4
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f000 f927 	bl	800d07c <_fflush_r>
 800ce2e:	b988      	cbnz	r0, 800ce54 <__swbuf_r+0x90>
 800ce30:	4638      	mov	r0, r7
 800ce32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce34:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <__swbuf_r+0x9c>)
 800ce36:	429c      	cmp	r4, r3
 800ce38:	d101      	bne.n	800ce3e <__swbuf_r+0x7a>
 800ce3a:	68ac      	ldr	r4, [r5, #8]
 800ce3c:	e7cf      	b.n	800cdde <__swbuf_r+0x1a>
 800ce3e:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <__swbuf_r+0xa0>)
 800ce40:	429c      	cmp	r4, r3
 800ce42:	bf08      	it	eq
 800ce44:	68ec      	ldreq	r4, [r5, #12]
 800ce46:	e7ca      	b.n	800cdde <__swbuf_r+0x1a>
 800ce48:	4621      	mov	r1, r4
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f000 f81a 	bl	800ce84 <__swsetup_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d0cb      	beq.n	800cdec <__swbuf_r+0x28>
 800ce54:	f04f 37ff 	mov.w	r7, #4294967295
 800ce58:	e7ea      	b.n	800ce30 <__swbuf_r+0x6c>
 800ce5a:	bf00      	nop
 800ce5c:	080190d4 	.word	0x080190d4
 800ce60:	080190f4 	.word	0x080190f4
 800ce64:	080190b4 	.word	0x080190b4

0800ce68 <__ascii_wctomb>:
 800ce68:	b149      	cbz	r1, 800ce7e <__ascii_wctomb+0x16>
 800ce6a:	2aff      	cmp	r2, #255	; 0xff
 800ce6c:	bf85      	ittet	hi
 800ce6e:	238a      	movhi	r3, #138	; 0x8a
 800ce70:	6003      	strhi	r3, [r0, #0]
 800ce72:	700a      	strbls	r2, [r1, #0]
 800ce74:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce78:	bf98      	it	ls
 800ce7a:	2001      	movls	r0, #1
 800ce7c:	4770      	bx	lr
 800ce7e:	4608      	mov	r0, r1
 800ce80:	4770      	bx	lr
	...

0800ce84 <__swsetup_r>:
 800ce84:	4b32      	ldr	r3, [pc, #200]	; (800cf50 <__swsetup_r+0xcc>)
 800ce86:	b570      	push	{r4, r5, r6, lr}
 800ce88:	681d      	ldr	r5, [r3, #0]
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	b125      	cbz	r5, 800ce9a <__swsetup_r+0x16>
 800ce90:	69ab      	ldr	r3, [r5, #24]
 800ce92:	b913      	cbnz	r3, 800ce9a <__swsetup_r+0x16>
 800ce94:	4628      	mov	r0, r5
 800ce96:	f000 f985 	bl	800d1a4 <__sinit>
 800ce9a:	4b2e      	ldr	r3, [pc, #184]	; (800cf54 <__swsetup_r+0xd0>)
 800ce9c:	429c      	cmp	r4, r3
 800ce9e:	d10f      	bne.n	800cec0 <__swsetup_r+0x3c>
 800cea0:	686c      	ldr	r4, [r5, #4]
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cea8:	0719      	lsls	r1, r3, #28
 800ceaa:	d42c      	bmi.n	800cf06 <__swsetup_r+0x82>
 800ceac:	06dd      	lsls	r5, r3, #27
 800ceae:	d411      	bmi.n	800ced4 <__swsetup_r+0x50>
 800ceb0:	2309      	movs	r3, #9
 800ceb2:	6033      	str	r3, [r6, #0]
 800ceb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ceb8:	81a3      	strh	r3, [r4, #12]
 800ceba:	f04f 30ff 	mov.w	r0, #4294967295
 800cebe:	e03e      	b.n	800cf3e <__swsetup_r+0xba>
 800cec0:	4b25      	ldr	r3, [pc, #148]	; (800cf58 <__swsetup_r+0xd4>)
 800cec2:	429c      	cmp	r4, r3
 800cec4:	d101      	bne.n	800ceca <__swsetup_r+0x46>
 800cec6:	68ac      	ldr	r4, [r5, #8]
 800cec8:	e7eb      	b.n	800cea2 <__swsetup_r+0x1e>
 800ceca:	4b24      	ldr	r3, [pc, #144]	; (800cf5c <__swsetup_r+0xd8>)
 800cecc:	429c      	cmp	r4, r3
 800cece:	bf08      	it	eq
 800ced0:	68ec      	ldreq	r4, [r5, #12]
 800ced2:	e7e6      	b.n	800cea2 <__swsetup_r+0x1e>
 800ced4:	0758      	lsls	r0, r3, #29
 800ced6:	d512      	bpl.n	800cefe <__swsetup_r+0x7a>
 800ced8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceda:	b141      	cbz	r1, 800ceee <__swsetup_r+0x6a>
 800cedc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cee0:	4299      	cmp	r1, r3
 800cee2:	d002      	beq.n	800ceea <__swsetup_r+0x66>
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7ff fb31 	bl	800c54c <_free_r>
 800ceea:	2300      	movs	r3, #0
 800ceec:	6363      	str	r3, [r4, #52]	; 0x34
 800ceee:	89a3      	ldrh	r3, [r4, #12]
 800cef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cef4:	81a3      	strh	r3, [r4, #12]
 800cef6:	2300      	movs	r3, #0
 800cef8:	6063      	str	r3, [r4, #4]
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	f043 0308 	orr.w	r3, r3, #8
 800cf04:	81a3      	strh	r3, [r4, #12]
 800cf06:	6923      	ldr	r3, [r4, #16]
 800cf08:	b94b      	cbnz	r3, 800cf1e <__swsetup_r+0x9a>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf14:	d003      	beq.n	800cf1e <__swsetup_r+0x9a>
 800cf16:	4621      	mov	r1, r4
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f000 fa09 	bl	800d330 <__smakebuf_r>
 800cf1e:	89a0      	ldrh	r0, [r4, #12]
 800cf20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf24:	f010 0301 	ands.w	r3, r0, #1
 800cf28:	d00a      	beq.n	800cf40 <__swsetup_r+0xbc>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	6963      	ldr	r3, [r4, #20]
 800cf30:	425b      	negs	r3, r3
 800cf32:	61a3      	str	r3, [r4, #24]
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	b943      	cbnz	r3, 800cf4a <__swsetup_r+0xc6>
 800cf38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf3c:	d1ba      	bne.n	800ceb4 <__swsetup_r+0x30>
 800cf3e:	bd70      	pop	{r4, r5, r6, pc}
 800cf40:	0781      	lsls	r1, r0, #30
 800cf42:	bf58      	it	pl
 800cf44:	6963      	ldrpl	r3, [r4, #20]
 800cf46:	60a3      	str	r3, [r4, #8]
 800cf48:	e7f4      	b.n	800cf34 <__swsetup_r+0xb0>
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	e7f7      	b.n	800cf3e <__swsetup_r+0xba>
 800cf4e:	bf00      	nop
 800cf50:	20000044 	.word	0x20000044
 800cf54:	080190d4 	.word	0x080190d4
 800cf58:	080190f4 	.word	0x080190f4
 800cf5c:	080190b4 	.word	0x080190b4

0800cf60 <abort>:
 800cf60:	b508      	push	{r3, lr}
 800cf62:	2006      	movs	r0, #6
 800cf64:	f000 fa54 	bl	800d410 <raise>
 800cf68:	2001      	movs	r0, #1
 800cf6a:	f7f6 f977 	bl	800325c <_exit>
	...

0800cf70 <__sflush_r>:
 800cf70:	898a      	ldrh	r2, [r1, #12]
 800cf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf76:	4605      	mov	r5, r0
 800cf78:	0710      	lsls	r0, r2, #28
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	d458      	bmi.n	800d030 <__sflush_r+0xc0>
 800cf7e:	684b      	ldr	r3, [r1, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	dc05      	bgt.n	800cf90 <__sflush_r+0x20>
 800cf84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dc02      	bgt.n	800cf90 <__sflush_r+0x20>
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	d0f9      	beq.n	800cf8a <__sflush_r+0x1a>
 800cf96:	2300      	movs	r3, #0
 800cf98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf9c:	682f      	ldr	r7, [r5, #0]
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	d032      	beq.n	800d008 <__sflush_r+0x98>
 800cfa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	075a      	lsls	r2, r3, #29
 800cfa8:	d505      	bpl.n	800cfb6 <__sflush_r+0x46>
 800cfaa:	6863      	ldr	r3, [r4, #4]
 800cfac:	1ac0      	subs	r0, r0, r3
 800cfae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfb0:	b10b      	cbz	r3, 800cfb6 <__sflush_r+0x46>
 800cfb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfb4:	1ac0      	subs	r0, r0, r3
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	4602      	mov	r2, r0
 800cfba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfbc:	6a21      	ldr	r1, [r4, #32]
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b0      	blx	r6
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	d106      	bne.n	800cfd6 <__sflush_r+0x66>
 800cfc8:	6829      	ldr	r1, [r5, #0]
 800cfca:	291d      	cmp	r1, #29
 800cfcc:	d82c      	bhi.n	800d028 <__sflush_r+0xb8>
 800cfce:	4a2a      	ldr	r2, [pc, #168]	; (800d078 <__sflush_r+0x108>)
 800cfd0:	40ca      	lsrs	r2, r1
 800cfd2:	07d6      	lsls	r6, r2, #31
 800cfd4:	d528      	bpl.n	800d028 <__sflush_r+0xb8>
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	6062      	str	r2, [r4, #4]
 800cfda:	04d9      	lsls	r1, r3, #19
 800cfdc:	6922      	ldr	r2, [r4, #16]
 800cfde:	6022      	str	r2, [r4, #0]
 800cfe0:	d504      	bpl.n	800cfec <__sflush_r+0x7c>
 800cfe2:	1c42      	adds	r2, r0, #1
 800cfe4:	d101      	bne.n	800cfea <__sflush_r+0x7a>
 800cfe6:	682b      	ldr	r3, [r5, #0]
 800cfe8:	b903      	cbnz	r3, 800cfec <__sflush_r+0x7c>
 800cfea:	6560      	str	r0, [r4, #84]	; 0x54
 800cfec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfee:	602f      	str	r7, [r5, #0]
 800cff0:	2900      	cmp	r1, #0
 800cff2:	d0ca      	beq.n	800cf8a <__sflush_r+0x1a>
 800cff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cff8:	4299      	cmp	r1, r3
 800cffa:	d002      	beq.n	800d002 <__sflush_r+0x92>
 800cffc:	4628      	mov	r0, r5
 800cffe:	f7ff faa5 	bl	800c54c <_free_r>
 800d002:	2000      	movs	r0, #0
 800d004:	6360      	str	r0, [r4, #52]	; 0x34
 800d006:	e7c1      	b.n	800cf8c <__sflush_r+0x1c>
 800d008:	6a21      	ldr	r1, [r4, #32]
 800d00a:	2301      	movs	r3, #1
 800d00c:	4628      	mov	r0, r5
 800d00e:	47b0      	blx	r6
 800d010:	1c41      	adds	r1, r0, #1
 800d012:	d1c7      	bne.n	800cfa4 <__sflush_r+0x34>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d0c4      	beq.n	800cfa4 <__sflush_r+0x34>
 800d01a:	2b1d      	cmp	r3, #29
 800d01c:	d001      	beq.n	800d022 <__sflush_r+0xb2>
 800d01e:	2b16      	cmp	r3, #22
 800d020:	d101      	bne.n	800d026 <__sflush_r+0xb6>
 800d022:	602f      	str	r7, [r5, #0]
 800d024:	e7b1      	b.n	800cf8a <__sflush_r+0x1a>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d02c:	81a3      	strh	r3, [r4, #12]
 800d02e:	e7ad      	b.n	800cf8c <__sflush_r+0x1c>
 800d030:	690f      	ldr	r7, [r1, #16]
 800d032:	2f00      	cmp	r7, #0
 800d034:	d0a9      	beq.n	800cf8a <__sflush_r+0x1a>
 800d036:	0793      	lsls	r3, r2, #30
 800d038:	680e      	ldr	r6, [r1, #0]
 800d03a:	bf08      	it	eq
 800d03c:	694b      	ldreq	r3, [r1, #20]
 800d03e:	600f      	str	r7, [r1, #0]
 800d040:	bf18      	it	ne
 800d042:	2300      	movne	r3, #0
 800d044:	eba6 0807 	sub.w	r8, r6, r7
 800d048:	608b      	str	r3, [r1, #8]
 800d04a:	f1b8 0f00 	cmp.w	r8, #0
 800d04e:	dd9c      	ble.n	800cf8a <__sflush_r+0x1a>
 800d050:	6a21      	ldr	r1, [r4, #32]
 800d052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d054:	4643      	mov	r3, r8
 800d056:	463a      	mov	r2, r7
 800d058:	4628      	mov	r0, r5
 800d05a:	47b0      	blx	r6
 800d05c:	2800      	cmp	r0, #0
 800d05e:	dc06      	bgt.n	800d06e <__sflush_r+0xfe>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d066:	81a3      	strh	r3, [r4, #12]
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e78e      	b.n	800cf8c <__sflush_r+0x1c>
 800d06e:	4407      	add	r7, r0
 800d070:	eba8 0800 	sub.w	r8, r8, r0
 800d074:	e7e9      	b.n	800d04a <__sflush_r+0xda>
 800d076:	bf00      	nop
 800d078:	20400001 	.word	0x20400001

0800d07c <_fflush_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	690b      	ldr	r3, [r1, #16]
 800d080:	4605      	mov	r5, r0
 800d082:	460c      	mov	r4, r1
 800d084:	b913      	cbnz	r3, 800d08c <_fflush_r+0x10>
 800d086:	2500      	movs	r5, #0
 800d088:	4628      	mov	r0, r5
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	b118      	cbz	r0, 800d096 <_fflush_r+0x1a>
 800d08e:	6983      	ldr	r3, [r0, #24]
 800d090:	b90b      	cbnz	r3, 800d096 <_fflush_r+0x1a>
 800d092:	f000 f887 	bl	800d1a4 <__sinit>
 800d096:	4b14      	ldr	r3, [pc, #80]	; (800d0e8 <_fflush_r+0x6c>)
 800d098:	429c      	cmp	r4, r3
 800d09a:	d11b      	bne.n	800d0d4 <_fflush_r+0x58>
 800d09c:	686c      	ldr	r4, [r5, #4]
 800d09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d0ef      	beq.n	800d086 <_fflush_r+0xa>
 800d0a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d0a8:	07d0      	lsls	r0, r2, #31
 800d0aa:	d404      	bmi.n	800d0b6 <_fflush_r+0x3a>
 800d0ac:	0599      	lsls	r1, r3, #22
 800d0ae:	d402      	bmi.n	800d0b6 <_fflush_r+0x3a>
 800d0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0b2:	f000 f915 	bl	800d2e0 <__retarget_lock_acquire_recursive>
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	f7ff ff59 	bl	800cf70 <__sflush_r>
 800d0be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0c0:	07da      	lsls	r2, r3, #31
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	d4e0      	bmi.n	800d088 <_fflush_r+0xc>
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	059b      	lsls	r3, r3, #22
 800d0ca:	d4dd      	bmi.n	800d088 <_fflush_r+0xc>
 800d0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ce:	f000 f908 	bl	800d2e2 <__retarget_lock_release_recursive>
 800d0d2:	e7d9      	b.n	800d088 <_fflush_r+0xc>
 800d0d4:	4b05      	ldr	r3, [pc, #20]	; (800d0ec <_fflush_r+0x70>)
 800d0d6:	429c      	cmp	r4, r3
 800d0d8:	d101      	bne.n	800d0de <_fflush_r+0x62>
 800d0da:	68ac      	ldr	r4, [r5, #8]
 800d0dc:	e7df      	b.n	800d09e <_fflush_r+0x22>
 800d0de:	4b04      	ldr	r3, [pc, #16]	; (800d0f0 <_fflush_r+0x74>)
 800d0e0:	429c      	cmp	r4, r3
 800d0e2:	bf08      	it	eq
 800d0e4:	68ec      	ldreq	r4, [r5, #12]
 800d0e6:	e7da      	b.n	800d09e <_fflush_r+0x22>
 800d0e8:	080190d4 	.word	0x080190d4
 800d0ec:	080190f4 	.word	0x080190f4
 800d0f0:	080190b4 	.word	0x080190b4

0800d0f4 <std>:
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	b510      	push	{r4, lr}
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d0fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d102:	6083      	str	r3, [r0, #8]
 800d104:	8181      	strh	r1, [r0, #12]
 800d106:	6643      	str	r3, [r0, #100]	; 0x64
 800d108:	81c2      	strh	r2, [r0, #14]
 800d10a:	6183      	str	r3, [r0, #24]
 800d10c:	4619      	mov	r1, r3
 800d10e:	2208      	movs	r2, #8
 800d110:	305c      	adds	r0, #92	; 0x5c
 800d112:	f7fd fb5b 	bl	800a7cc <memset>
 800d116:	4b05      	ldr	r3, [pc, #20]	; (800d12c <std+0x38>)
 800d118:	6263      	str	r3, [r4, #36]	; 0x24
 800d11a:	4b05      	ldr	r3, [pc, #20]	; (800d130 <std+0x3c>)
 800d11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d11e:	4b05      	ldr	r3, [pc, #20]	; (800d134 <std+0x40>)
 800d120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d122:	4b05      	ldr	r3, [pc, #20]	; (800d138 <std+0x44>)
 800d124:	6224      	str	r4, [r4, #32]
 800d126:	6323      	str	r3, [r4, #48]	; 0x30
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	bf00      	nop
 800d12c:	0800d449 	.word	0x0800d449
 800d130:	0800d46b 	.word	0x0800d46b
 800d134:	0800d4a3 	.word	0x0800d4a3
 800d138:	0800d4c7 	.word	0x0800d4c7

0800d13c <_cleanup_r>:
 800d13c:	4901      	ldr	r1, [pc, #4]	; (800d144 <_cleanup_r+0x8>)
 800d13e:	f000 b8af 	b.w	800d2a0 <_fwalk_reent>
 800d142:	bf00      	nop
 800d144:	0800d07d 	.word	0x0800d07d

0800d148 <__sfmoreglue>:
 800d148:	b570      	push	{r4, r5, r6, lr}
 800d14a:	2268      	movs	r2, #104	; 0x68
 800d14c:	1e4d      	subs	r5, r1, #1
 800d14e:	4355      	muls	r5, r2
 800d150:	460e      	mov	r6, r1
 800d152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d156:	f7ff fa65 	bl	800c624 <_malloc_r>
 800d15a:	4604      	mov	r4, r0
 800d15c:	b140      	cbz	r0, 800d170 <__sfmoreglue+0x28>
 800d15e:	2100      	movs	r1, #0
 800d160:	e9c0 1600 	strd	r1, r6, [r0]
 800d164:	300c      	adds	r0, #12
 800d166:	60a0      	str	r0, [r4, #8]
 800d168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d16c:	f7fd fb2e 	bl	800a7cc <memset>
 800d170:	4620      	mov	r0, r4
 800d172:	bd70      	pop	{r4, r5, r6, pc}

0800d174 <__sfp_lock_acquire>:
 800d174:	4801      	ldr	r0, [pc, #4]	; (800d17c <__sfp_lock_acquire+0x8>)
 800d176:	f000 b8b3 	b.w	800d2e0 <__retarget_lock_acquire_recursive>
 800d17a:	bf00      	nop
 800d17c:	20000655 	.word	0x20000655

0800d180 <__sfp_lock_release>:
 800d180:	4801      	ldr	r0, [pc, #4]	; (800d188 <__sfp_lock_release+0x8>)
 800d182:	f000 b8ae 	b.w	800d2e2 <__retarget_lock_release_recursive>
 800d186:	bf00      	nop
 800d188:	20000655 	.word	0x20000655

0800d18c <__sinit_lock_acquire>:
 800d18c:	4801      	ldr	r0, [pc, #4]	; (800d194 <__sinit_lock_acquire+0x8>)
 800d18e:	f000 b8a7 	b.w	800d2e0 <__retarget_lock_acquire_recursive>
 800d192:	bf00      	nop
 800d194:	20000656 	.word	0x20000656

0800d198 <__sinit_lock_release>:
 800d198:	4801      	ldr	r0, [pc, #4]	; (800d1a0 <__sinit_lock_release+0x8>)
 800d19a:	f000 b8a2 	b.w	800d2e2 <__retarget_lock_release_recursive>
 800d19e:	bf00      	nop
 800d1a0:	20000656 	.word	0x20000656

0800d1a4 <__sinit>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	f7ff fff0 	bl	800d18c <__sinit_lock_acquire>
 800d1ac:	69a3      	ldr	r3, [r4, #24]
 800d1ae:	b11b      	cbz	r3, 800d1b8 <__sinit+0x14>
 800d1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b4:	f7ff bff0 	b.w	800d198 <__sinit_lock_release>
 800d1b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1bc:	6523      	str	r3, [r4, #80]	; 0x50
 800d1be:	4b13      	ldr	r3, [pc, #76]	; (800d20c <__sinit+0x68>)
 800d1c0:	4a13      	ldr	r2, [pc, #76]	; (800d210 <__sinit+0x6c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	bf04      	itt	eq
 800d1ca:	2301      	moveq	r3, #1
 800d1cc:	61a3      	streq	r3, [r4, #24]
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f000 f820 	bl	800d214 <__sfp>
 800d1d4:	6060      	str	r0, [r4, #4]
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 f81c 	bl	800d214 <__sfp>
 800d1dc:	60a0      	str	r0, [r4, #8]
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 f818 	bl	800d214 <__sfp>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	60e0      	str	r0, [r4, #12]
 800d1e8:	2104      	movs	r1, #4
 800d1ea:	6860      	ldr	r0, [r4, #4]
 800d1ec:	f7ff ff82 	bl	800d0f4 <std>
 800d1f0:	68a0      	ldr	r0, [r4, #8]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	2109      	movs	r1, #9
 800d1f6:	f7ff ff7d 	bl	800d0f4 <std>
 800d1fa:	68e0      	ldr	r0, [r4, #12]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	2112      	movs	r1, #18
 800d200:	f7ff ff78 	bl	800d0f4 <std>
 800d204:	2301      	movs	r3, #1
 800d206:	61a3      	str	r3, [r4, #24]
 800d208:	e7d2      	b.n	800d1b0 <__sinit+0xc>
 800d20a:	bf00      	nop
 800d20c:	08018d3c 	.word	0x08018d3c
 800d210:	0800d13d 	.word	0x0800d13d

0800d214 <__sfp>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	4607      	mov	r7, r0
 800d218:	f7ff ffac 	bl	800d174 <__sfp_lock_acquire>
 800d21c:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <__sfp+0x84>)
 800d21e:	681e      	ldr	r6, [r3, #0]
 800d220:	69b3      	ldr	r3, [r6, #24]
 800d222:	b913      	cbnz	r3, 800d22a <__sfp+0x16>
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff ffbd 	bl	800d1a4 <__sinit>
 800d22a:	3648      	adds	r6, #72	; 0x48
 800d22c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d230:	3b01      	subs	r3, #1
 800d232:	d503      	bpl.n	800d23c <__sfp+0x28>
 800d234:	6833      	ldr	r3, [r6, #0]
 800d236:	b30b      	cbz	r3, 800d27c <__sfp+0x68>
 800d238:	6836      	ldr	r6, [r6, #0]
 800d23a:	e7f7      	b.n	800d22c <__sfp+0x18>
 800d23c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d240:	b9d5      	cbnz	r5, 800d278 <__sfp+0x64>
 800d242:	4b16      	ldr	r3, [pc, #88]	; (800d29c <__sfp+0x88>)
 800d244:	60e3      	str	r3, [r4, #12]
 800d246:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d24a:	6665      	str	r5, [r4, #100]	; 0x64
 800d24c:	f000 f847 	bl	800d2de <__retarget_lock_init_recursive>
 800d250:	f7ff ff96 	bl	800d180 <__sfp_lock_release>
 800d254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d25c:	6025      	str	r5, [r4, #0]
 800d25e:	61a5      	str	r5, [r4, #24]
 800d260:	2208      	movs	r2, #8
 800d262:	4629      	mov	r1, r5
 800d264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d268:	f7fd fab0 	bl	800a7cc <memset>
 800d26c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d274:	4620      	mov	r0, r4
 800d276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d278:	3468      	adds	r4, #104	; 0x68
 800d27a:	e7d9      	b.n	800d230 <__sfp+0x1c>
 800d27c:	2104      	movs	r1, #4
 800d27e:	4638      	mov	r0, r7
 800d280:	f7ff ff62 	bl	800d148 <__sfmoreglue>
 800d284:	4604      	mov	r4, r0
 800d286:	6030      	str	r0, [r6, #0]
 800d288:	2800      	cmp	r0, #0
 800d28a:	d1d5      	bne.n	800d238 <__sfp+0x24>
 800d28c:	f7ff ff78 	bl	800d180 <__sfp_lock_release>
 800d290:	230c      	movs	r3, #12
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	e7ee      	b.n	800d274 <__sfp+0x60>
 800d296:	bf00      	nop
 800d298:	08018d3c 	.word	0x08018d3c
 800d29c:	ffff0001 	.word	0xffff0001

0800d2a0 <_fwalk_reent>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	4688      	mov	r8, r1
 800d2a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d2ac:	2700      	movs	r7, #0
 800d2ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2b2:	f1b9 0901 	subs.w	r9, r9, #1
 800d2b6:	d505      	bpl.n	800d2c4 <_fwalk_reent+0x24>
 800d2b8:	6824      	ldr	r4, [r4, #0]
 800d2ba:	2c00      	cmp	r4, #0
 800d2bc:	d1f7      	bne.n	800d2ae <_fwalk_reent+0xe>
 800d2be:	4638      	mov	r0, r7
 800d2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c4:	89ab      	ldrh	r3, [r5, #12]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d907      	bls.n	800d2da <_fwalk_reent+0x3a>
 800d2ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	d003      	beq.n	800d2da <_fwalk_reent+0x3a>
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	47c0      	blx	r8
 800d2d8:	4307      	orrs	r7, r0
 800d2da:	3568      	adds	r5, #104	; 0x68
 800d2dc:	e7e9      	b.n	800d2b2 <_fwalk_reent+0x12>

0800d2de <__retarget_lock_init_recursive>:
 800d2de:	4770      	bx	lr

0800d2e0 <__retarget_lock_acquire_recursive>:
 800d2e0:	4770      	bx	lr

0800d2e2 <__retarget_lock_release_recursive>:
 800d2e2:	4770      	bx	lr

0800d2e4 <__swhatbuf_r>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	460e      	mov	r6, r1
 800d2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	b096      	sub	sp, #88	; 0x58
 800d2f0:	4614      	mov	r4, r2
 800d2f2:	461d      	mov	r5, r3
 800d2f4:	da08      	bge.n	800d308 <__swhatbuf_r+0x24>
 800d2f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	602a      	str	r2, [r5, #0]
 800d2fe:	061a      	lsls	r2, r3, #24
 800d300:	d410      	bmi.n	800d324 <__swhatbuf_r+0x40>
 800d302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d306:	e00e      	b.n	800d326 <__swhatbuf_r+0x42>
 800d308:	466a      	mov	r2, sp
 800d30a:	f000 f903 	bl	800d514 <_fstat_r>
 800d30e:	2800      	cmp	r0, #0
 800d310:	dbf1      	blt.n	800d2f6 <__swhatbuf_r+0x12>
 800d312:	9a01      	ldr	r2, [sp, #4]
 800d314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d31c:	425a      	negs	r2, r3
 800d31e:	415a      	adcs	r2, r3
 800d320:	602a      	str	r2, [r5, #0]
 800d322:	e7ee      	b.n	800d302 <__swhatbuf_r+0x1e>
 800d324:	2340      	movs	r3, #64	; 0x40
 800d326:	2000      	movs	r0, #0
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	b016      	add	sp, #88	; 0x58
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d330 <__smakebuf_r>:
 800d330:	898b      	ldrh	r3, [r1, #12]
 800d332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d334:	079d      	lsls	r5, r3, #30
 800d336:	4606      	mov	r6, r0
 800d338:	460c      	mov	r4, r1
 800d33a:	d507      	bpl.n	800d34c <__smakebuf_r+0x1c>
 800d33c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	6123      	str	r3, [r4, #16]
 800d344:	2301      	movs	r3, #1
 800d346:	6163      	str	r3, [r4, #20]
 800d348:	b002      	add	sp, #8
 800d34a:	bd70      	pop	{r4, r5, r6, pc}
 800d34c:	ab01      	add	r3, sp, #4
 800d34e:	466a      	mov	r2, sp
 800d350:	f7ff ffc8 	bl	800d2e4 <__swhatbuf_r>
 800d354:	9900      	ldr	r1, [sp, #0]
 800d356:	4605      	mov	r5, r0
 800d358:	4630      	mov	r0, r6
 800d35a:	f7ff f963 	bl	800c624 <_malloc_r>
 800d35e:	b948      	cbnz	r0, 800d374 <__smakebuf_r+0x44>
 800d360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d364:	059a      	lsls	r2, r3, #22
 800d366:	d4ef      	bmi.n	800d348 <__smakebuf_r+0x18>
 800d368:	f023 0303 	bic.w	r3, r3, #3
 800d36c:	f043 0302 	orr.w	r3, r3, #2
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	e7e3      	b.n	800d33c <__smakebuf_r+0xc>
 800d374:	4b0d      	ldr	r3, [pc, #52]	; (800d3ac <__smakebuf_r+0x7c>)
 800d376:	62b3      	str	r3, [r6, #40]	; 0x28
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	6020      	str	r0, [r4, #0]
 800d37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d380:	81a3      	strh	r3, [r4, #12]
 800d382:	9b00      	ldr	r3, [sp, #0]
 800d384:	6163      	str	r3, [r4, #20]
 800d386:	9b01      	ldr	r3, [sp, #4]
 800d388:	6120      	str	r0, [r4, #16]
 800d38a:	b15b      	cbz	r3, 800d3a4 <__smakebuf_r+0x74>
 800d38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d390:	4630      	mov	r0, r6
 800d392:	f000 f8d1 	bl	800d538 <_isatty_r>
 800d396:	b128      	cbz	r0, 800d3a4 <__smakebuf_r+0x74>
 800d398:	89a3      	ldrh	r3, [r4, #12]
 800d39a:	f023 0303 	bic.w	r3, r3, #3
 800d39e:	f043 0301 	orr.w	r3, r3, #1
 800d3a2:	81a3      	strh	r3, [r4, #12]
 800d3a4:	89a0      	ldrh	r0, [r4, #12]
 800d3a6:	4305      	orrs	r5, r0
 800d3a8:	81a5      	strh	r5, [r4, #12]
 800d3aa:	e7cd      	b.n	800d348 <__smakebuf_r+0x18>
 800d3ac:	0800d13d 	.word	0x0800d13d

0800d3b0 <_malloc_usable_size_r>:
 800d3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3b4:	1f18      	subs	r0, r3, #4
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	bfbc      	itt	lt
 800d3ba:	580b      	ldrlt	r3, [r1, r0]
 800d3bc:	18c0      	addlt	r0, r0, r3
 800d3be:	4770      	bx	lr

0800d3c0 <_raise_r>:
 800d3c0:	291f      	cmp	r1, #31
 800d3c2:	b538      	push	{r3, r4, r5, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	d904      	bls.n	800d3d4 <_raise_r+0x14>
 800d3ca:	2316      	movs	r3, #22
 800d3cc:	6003      	str	r3, [r0, #0]
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3d6:	b112      	cbz	r2, 800d3de <_raise_r+0x1e>
 800d3d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3dc:	b94b      	cbnz	r3, 800d3f2 <_raise_r+0x32>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f830 	bl	800d444 <_getpid_r>
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ee:	f000 b817 	b.w	800d420 <_kill_r>
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d00a      	beq.n	800d40c <_raise_r+0x4c>
 800d3f6:	1c59      	adds	r1, r3, #1
 800d3f8:	d103      	bne.n	800d402 <_raise_r+0x42>
 800d3fa:	2316      	movs	r3, #22
 800d3fc:	6003      	str	r3, [r0, #0]
 800d3fe:	2001      	movs	r0, #1
 800d400:	e7e7      	b.n	800d3d2 <_raise_r+0x12>
 800d402:	2400      	movs	r4, #0
 800d404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d408:	4628      	mov	r0, r5
 800d40a:	4798      	blx	r3
 800d40c:	2000      	movs	r0, #0
 800d40e:	e7e0      	b.n	800d3d2 <_raise_r+0x12>

0800d410 <raise>:
 800d410:	4b02      	ldr	r3, [pc, #8]	; (800d41c <raise+0xc>)
 800d412:	4601      	mov	r1, r0
 800d414:	6818      	ldr	r0, [r3, #0]
 800d416:	f7ff bfd3 	b.w	800d3c0 <_raise_r>
 800d41a:	bf00      	nop
 800d41c:	20000044 	.word	0x20000044

0800d420 <_kill_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d07      	ldr	r5, [pc, #28]	; (800d440 <_kill_r+0x20>)
 800d424:	2300      	movs	r3, #0
 800d426:	4604      	mov	r4, r0
 800d428:	4608      	mov	r0, r1
 800d42a:	4611      	mov	r1, r2
 800d42c:	602b      	str	r3, [r5, #0]
 800d42e:	f7f5 ff05 	bl	800323c <_kill>
 800d432:	1c43      	adds	r3, r0, #1
 800d434:	d102      	bne.n	800d43c <_kill_r+0x1c>
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	b103      	cbz	r3, 800d43c <_kill_r+0x1c>
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	bd38      	pop	{r3, r4, r5, pc}
 800d43e:	bf00      	nop
 800d440:	20000650 	.word	0x20000650

0800d444 <_getpid_r>:
 800d444:	f7f5 bef2 	b.w	800322c <_getpid>

0800d448 <__sread>:
 800d448:	b510      	push	{r4, lr}
 800d44a:	460c      	mov	r4, r1
 800d44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d450:	f000 f894 	bl	800d57c <_read_r>
 800d454:	2800      	cmp	r0, #0
 800d456:	bfab      	itete	ge
 800d458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d45a:	89a3      	ldrhlt	r3, [r4, #12]
 800d45c:	181b      	addge	r3, r3, r0
 800d45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d462:	bfac      	ite	ge
 800d464:	6563      	strge	r3, [r4, #84]	; 0x54
 800d466:	81a3      	strhlt	r3, [r4, #12]
 800d468:	bd10      	pop	{r4, pc}

0800d46a <__swrite>:
 800d46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46e:	461f      	mov	r7, r3
 800d470:	898b      	ldrh	r3, [r1, #12]
 800d472:	05db      	lsls	r3, r3, #23
 800d474:	4605      	mov	r5, r0
 800d476:	460c      	mov	r4, r1
 800d478:	4616      	mov	r6, r2
 800d47a:	d505      	bpl.n	800d488 <__swrite+0x1e>
 800d47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d480:	2302      	movs	r3, #2
 800d482:	2200      	movs	r2, #0
 800d484:	f000 f868 	bl	800d558 <_lseek_r>
 800d488:	89a3      	ldrh	r3, [r4, #12]
 800d48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d492:	81a3      	strh	r3, [r4, #12]
 800d494:	4632      	mov	r2, r6
 800d496:	463b      	mov	r3, r7
 800d498:	4628      	mov	r0, r5
 800d49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d49e:	f000 b817 	b.w	800d4d0 <_write_r>

0800d4a2 <__sseek>:
 800d4a2:	b510      	push	{r4, lr}
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4aa:	f000 f855 	bl	800d558 <_lseek_r>
 800d4ae:	1c43      	adds	r3, r0, #1
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	bf15      	itete	ne
 800d4b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4be:	81a3      	strheq	r3, [r4, #12]
 800d4c0:	bf18      	it	ne
 800d4c2:	81a3      	strhne	r3, [r4, #12]
 800d4c4:	bd10      	pop	{r4, pc}

0800d4c6 <__sclose>:
 800d4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ca:	f000 b813 	b.w	800d4f4 <_close_r>
	...

0800d4d0 <_write_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4d07      	ldr	r5, [pc, #28]	; (800d4f0 <_write_r+0x20>)
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	4608      	mov	r0, r1
 800d4d8:	4611      	mov	r1, r2
 800d4da:	2200      	movs	r2, #0
 800d4dc:	602a      	str	r2, [r5, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	f7f5 fee3 	bl	80032aa <_write>
 800d4e4:	1c43      	adds	r3, r0, #1
 800d4e6:	d102      	bne.n	800d4ee <_write_r+0x1e>
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	b103      	cbz	r3, 800d4ee <_write_r+0x1e>
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	bd38      	pop	{r3, r4, r5, pc}
 800d4f0:	20000650 	.word	0x20000650

0800d4f4 <_close_r>:
 800d4f4:	b538      	push	{r3, r4, r5, lr}
 800d4f6:	4d06      	ldr	r5, [pc, #24]	; (800d510 <_close_r+0x1c>)
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	4608      	mov	r0, r1
 800d4fe:	602b      	str	r3, [r5, #0]
 800d500:	f7f5 feef 	bl	80032e2 <_close>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d102      	bne.n	800d50e <_close_r+0x1a>
 800d508:	682b      	ldr	r3, [r5, #0]
 800d50a:	b103      	cbz	r3, 800d50e <_close_r+0x1a>
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	bd38      	pop	{r3, r4, r5, pc}
 800d510:	20000650 	.word	0x20000650

0800d514 <_fstat_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	4d07      	ldr	r5, [pc, #28]	; (800d534 <_fstat_r+0x20>)
 800d518:	2300      	movs	r3, #0
 800d51a:	4604      	mov	r4, r0
 800d51c:	4608      	mov	r0, r1
 800d51e:	4611      	mov	r1, r2
 800d520:	602b      	str	r3, [r5, #0]
 800d522:	f7f5 feea 	bl	80032fa <_fstat>
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	d102      	bne.n	800d530 <_fstat_r+0x1c>
 800d52a:	682b      	ldr	r3, [r5, #0]
 800d52c:	b103      	cbz	r3, 800d530 <_fstat_r+0x1c>
 800d52e:	6023      	str	r3, [r4, #0]
 800d530:	bd38      	pop	{r3, r4, r5, pc}
 800d532:	bf00      	nop
 800d534:	20000650 	.word	0x20000650

0800d538 <_isatty_r>:
 800d538:	b538      	push	{r3, r4, r5, lr}
 800d53a:	4d06      	ldr	r5, [pc, #24]	; (800d554 <_isatty_r+0x1c>)
 800d53c:	2300      	movs	r3, #0
 800d53e:	4604      	mov	r4, r0
 800d540:	4608      	mov	r0, r1
 800d542:	602b      	str	r3, [r5, #0]
 800d544:	f7f5 fee9 	bl	800331a <_isatty>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d102      	bne.n	800d552 <_isatty_r+0x1a>
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	b103      	cbz	r3, 800d552 <_isatty_r+0x1a>
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	bd38      	pop	{r3, r4, r5, pc}
 800d554:	20000650 	.word	0x20000650

0800d558 <_lseek_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	; (800d578 <_lseek_r+0x20>)
 800d55c:	4604      	mov	r4, r0
 800d55e:	4608      	mov	r0, r1
 800d560:	4611      	mov	r1, r2
 800d562:	2200      	movs	r2, #0
 800d564:	602a      	str	r2, [r5, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	f7f5 fee2 	bl	8003330 <_lseek>
 800d56c:	1c43      	adds	r3, r0, #1
 800d56e:	d102      	bne.n	800d576 <_lseek_r+0x1e>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	b103      	cbz	r3, 800d576 <_lseek_r+0x1e>
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	bd38      	pop	{r3, r4, r5, pc}
 800d578:	20000650 	.word	0x20000650

0800d57c <_read_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4d07      	ldr	r5, [pc, #28]	; (800d59c <_read_r+0x20>)
 800d580:	4604      	mov	r4, r0
 800d582:	4608      	mov	r0, r1
 800d584:	4611      	mov	r1, r2
 800d586:	2200      	movs	r2, #0
 800d588:	602a      	str	r2, [r5, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	f7f5 fe70 	bl	8003270 <_read>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_read_r+0x1e>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_read_r+0x1e>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20000650 	.word	0x20000650

0800d5a0 <trunc>:
 800d5a0:	ec51 0b10 	vmov	r0, r1, d0
 800d5a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d5ac:	2b13      	cmp	r3, #19
 800d5ae:	b5d0      	push	{r4, r6, r7, lr}
 800d5b0:	460c      	mov	r4, r1
 800d5b2:	dc10      	bgt.n	800d5d6 <trunc+0x36>
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bfa5      	ittet	ge
 800d5b8:	4a11      	ldrge	r2, [pc, #68]	; (800d600 <trunc+0x60>)
 800d5ba:	fa42 f303 	asrge.w	r3, r2, r3
 800d5be:	2100      	movlt	r1, #0
 800d5c0:	2100      	movge	r1, #0
 800d5c2:	bfb9      	ittee	lt
 800d5c4:	2000      	movlt	r0, #0
 800d5c6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800d5ca:	2000      	movge	r0, #0
 800d5cc:	ea24 0103 	bicge.w	r1, r4, r3
 800d5d0:	ec41 0b10 	vmov	d0, r0, r1
 800d5d4:	bdd0      	pop	{r4, r6, r7, pc}
 800d5d6:	2b33      	cmp	r3, #51	; 0x33
 800d5d8:	dd08      	ble.n	800d5ec <trunc+0x4c>
 800d5da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5de:	d1f7      	bne.n	800d5d0 <trunc+0x30>
 800d5e0:	ee10 2a10 	vmov	r2, s0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	f7f2 fe59 	bl	800029c <__adddf3>
 800d5ea:	e7f1      	b.n	800d5d0 <trunc+0x30>
 800d5ec:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f4:	fa23 f202 	lsr.w	r2, r3, r2
 800d5f8:	ea20 0602 	bic.w	r6, r0, r2
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	e7e7      	b.n	800d5d0 <trunc+0x30>
 800d600:	000fffff 	.word	0x000fffff

0800d604 <ceilf>:
 800d604:	ee10 3a10 	vmov	r3, s0
 800d608:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d60c:	3a7f      	subs	r2, #127	; 0x7f
 800d60e:	2a16      	cmp	r2, #22
 800d610:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d614:	dc2a      	bgt.n	800d66c <ceilf+0x68>
 800d616:	2a00      	cmp	r2, #0
 800d618:	da11      	bge.n	800d63e <ceilf+0x3a>
 800d61a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d680 <ceilf+0x7c>
 800d61e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d622:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62a:	dd05      	ble.n	800d638 <ceilf+0x34>
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	db23      	blt.n	800d678 <ceilf+0x74>
 800d630:	2900      	cmp	r1, #0
 800d632:	bf18      	it	ne
 800d634:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800d638:	ee00 3a10 	vmov	s0, r3
 800d63c:	4770      	bx	lr
 800d63e:	4911      	ldr	r1, [pc, #68]	; (800d684 <ceilf+0x80>)
 800d640:	4111      	asrs	r1, r2
 800d642:	420b      	tst	r3, r1
 800d644:	d0fa      	beq.n	800d63c <ceilf+0x38>
 800d646:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d680 <ceilf+0x7c>
 800d64a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d64e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d656:	ddef      	ble.n	800d638 <ceilf+0x34>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	bfc2      	ittt	gt
 800d65c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800d660:	fa40 f202 	asrgt.w	r2, r0, r2
 800d664:	189b      	addgt	r3, r3, r2
 800d666:	ea23 0301 	bic.w	r3, r3, r1
 800d66a:	e7e5      	b.n	800d638 <ceilf+0x34>
 800d66c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d670:	d3e4      	bcc.n	800d63c <ceilf+0x38>
 800d672:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d676:	4770      	bx	lr
 800d678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d67c:	e7dc      	b.n	800d638 <ceilf+0x34>
 800d67e:	bf00      	nop
 800d680:	7149f2ca 	.word	0x7149f2ca
 800d684:	007fffff 	.word	0x007fffff

0800d688 <_init>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr

0800d694 <_fini>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	bf00      	nop
 800d698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69a:	bc08      	pop	{r3}
 800d69c:	469e      	mov	lr, r3
 800d69e:	4770      	bx	lr
