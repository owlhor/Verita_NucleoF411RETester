
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e660  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bbc4  0800e800  0800e800  0001e800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3c4  0801a3c4  00030424  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3c4  0801a3c4  0002a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3cc  0801a3cc  00030424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3cc  0801a3cc  0002a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3d0  0801a3d0  0002a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  0801a3d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000428  0801a7f8  00030428  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0801a7f8  00030874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aa6  00000000  00000000  00030454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003361  00000000  00000000  00048efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0004c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0004d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e81  00000000  00000000  0004ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019944  00000000  00000000  00068ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992f8  00000000  00000000  000823f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b6ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf0  00000000  00000000  0011b740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000428 	.word	0x20000428
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e7e8 	.word	0x0800e7e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000042c 	.word	0x2000042c
 80001dc:	0800e7e8 	.word	0x0800e7e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f005 fa59 	bl	80064c8 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00d fb5a 	bl	800e700 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00d fb35 	bl	800e700 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f005 f9fe 	bl	80064c8 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000448 	.word	0x20000448
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f005 fac8 	bl	80066bc <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000444 	.word	0x20000444
 800114c:	20000445 	.word	0x20000445

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f005 faa0 	bl	80066bc <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000444 	.word	0x20000444
 8001194:	20000445 	.word	0x20000445

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f005 fa7c 	bl	80066bc <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000444 	.word	0x20000444
 8001208:	20000445 	.word	0x20000445
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f005 fa40 	bl	80066bc <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	20000444 	.word	0x20000444
 800129c:	20000445 	.word	0x20000445
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f004 ff6f 	bl	80061a8 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f008 f96c 	bl	80095b6 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f004 ff60 	bl	80061a8 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 800135e:	4b74      	ldr	r3, [pc, #464]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	f040 80c5 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001370:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b52      	cmp	r3, #82	; 0x52
 800137e:	f040 80bc 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	f040 80b3 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001394:	2400      	movs	r4, #0
 8001396:	e009      	b.n	80013ac <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4423      	add	r3, r4
 800139e:	3303      	adds	r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013a8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013aa:	3401      	adds	r4, #1
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	ddf3      	ble.n	8001398 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e006      	b.n	80013c2 <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013b8:	5d1b      	ldrb	r3, [r3, r4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 80013c0:	3401      	adds	r4, #1
 80013c2:	2c04      	cmp	r4, #4
 80013c4:	ddf6      	ble.n	80013b4 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 808e 	bne.w	80014f6 <Rx_Verita_engine_callBak+0x1a6>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3309      	adds	r3, #9
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f2:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	0859      	lsrs	r1, r3, #1
 8001400:	460b      	mov	r3, r1
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800140c:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b20      	cmp	r3, #32
 800142c:	d808      	bhi.n	8001440 <Rx_Verita_engine_callBak+0xf0>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 800143c:	2391      	movs	r3, #145	; 0x91
 800143e:	e072      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b8f      	cmp	r3, #143	; 0x8f
 8001446:	d96c      	bls.n	8001522 <Rx_Verita_engine_callBak+0x1d2>
					switch(logger[0]){
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b91      	subs	r3, #145	; 0x91
 800144e:	2b13      	cmp	r3, #19
 8001450:	d82a      	bhi.n	80014a8 <Rx_Verita_engine_callBak+0x158>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <Rx_Verita_engine_callBak+0x108>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014ad 	.word	0x080014ad
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b5 	.word	0x080014b5
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014a9 	.word	0x080014a9
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014a9 	.word	0x080014a9
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014a9 	.word	0x080014a9
 800147c:	080014a9 	.word	0x080014a9
 8001480:	080014a9 	.word	0x080014a9
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014a9 	.word	0x080014a9
 800148c:	080014a9 	.word	0x080014a9
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014d3 	.word	0x080014d3
 80014a0:	080014df 	.word	0x080014df
 80014a4:	080014eb 	.word	0x080014eb
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80014a8:	2390      	movs	r3, #144	; 0x90
 80014aa:	e03c      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x91:
							return VRT_OK;
 80014ac:	2391      	movs	r3, #145	; 0x91
 80014ae:	e03a      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x92:
							return VRT_Busy;
 80014b0:	2392      	movs	r3, #146	; 0x92
 80014b2:	e038      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x93:
							return VRT_DataLoss;
 80014b4:	2393      	movs	r3, #147	; 0x93
 80014b6:	e036      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x94:
							return VRT_UnEnc;
 80014b8:	2394      	movs	r3, #148	; 0x94
 80014ba:	e034      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80014c2:	2391      	movs	r3, #145	; 0x91
 80014c4:	e02f      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_ger:
							regisk->Mark.Flag_ger = logu.U8[0];
 80014c6:	7a3a      	ldrb	r2, [r7, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80014ce:	2391      	movs	r3, #145	; 0x91
 80014d0:	e029      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Next:
							regisk->Mark.Flag_next = 0xFF; return VRC_Next;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80014da:	23a2      	movs	r3, #162	; 0xa2
 80014dc:	e023      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_aa:
							regisk->Mark.Flag_aa = logu.U8[0]; return VRC_Flag_aa;
 80014de:	7a3a      	ldrb	r2, [r7, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80014e6:	23a3      	movs	r3, #163	; 0xa3
 80014e8:	e01d      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_bb:
							regisk->Mark.Flag_bb = logu.U8[0]; return VRC_Flag_bb;
 80014ea:	7a3a      	ldrb	r2, [r7, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80014f2:	23a4      	movs	r3, #164	; 0xa4
 80014f4:	e017      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 80014f6:	2393      	movs	r3, #147	; 0x93
 80014f8:	e015      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3309      	adds	r3, #9
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001504:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 800150c:	fba3 1302 	umull	r1, r3, r3, r2
 8001510:	0859      	lsrs	r1, r3, #1
 8001512:	460b      	mov	r3, r1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <Rx_Verita_engine_callBak+0x1d4>
			if( chksum[1] == logger[5]){
 8001522:	bf00      	nop
		}


	return VRT_ERROR;
 8001524:	2390      	movs	r3, #144	; 0x90
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr
 8001530:	2000044a 	.word	0x2000044a
 8001534:	2000044c 	.word	0x2000044c
 8001538:	38e38e39 	.word	0x38e38e39

0800153c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d011      	beq.n	8001572 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f80b 	bl	800157c <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 8001572:	2391      	movs	r3, #145	; 0x91
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	460b      	mov	r3, r1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	2356      	movs	r3, #86	; 0x56
 800159a:	753b      	strb	r3, [r7, #20]
 800159c:	2352      	movs	r3, #82	; 0x52
 800159e:	757b      	strb	r3, [r7, #21]
 80015a0:	2354      	movs	r3, #84	; 0x54
 80015a2:	75bb      	strb	r3, [r7, #22]
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80015a8:	2304      	movs	r3, #4
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80015b8:	2404      	movs	r4, #4
 80015ba:	e00f      	b.n	80015dc <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80015bc:	1f23      	subs	r3, r4, #4
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015c6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80015da:	3401      	adds	r4, #1
 80015dc:	2c07      	cmp	r4, #7
 80015de:	dded      	ble.n	80015bc <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80015e0:	2403      	movs	r4, #3
 80015e2:	e00a      	b.n	80015fa <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80015e4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015e8:	443b      	add	r3, r7
 80015ea:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80015ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f2:	4413      	add	r3, r2
 80015f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80015f8:	3401      	adds	r4, #1
 80015fa:	2c07      	cmp	r4, #7
 80015fc:	ddf2      	ble.n	80015e4 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001602:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001606:	43d2      	mvns	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	f107 0114 	add.w	r1, r7, #20
 8001620:	2332      	movs	r3, #50	; 0x32
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f008 feef 	bl	800a406 <HAL_UART_Transmit>
}
 8001628:	bf00      	nop
 800162a:	372c      	adds	r7, #44	; 0x2c
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	2356      	movs	r3, #86	; 0x56
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	2352      	movs	r3, #82	; 0x52
 8001654:	737b      	strb	r3, [r7, #13]
 8001656:	2354      	movs	r3, #84	; 0x54
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	743b      	strb	r3, [r7, #16]
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	74bb      	strb	r3, [r7, #18]
 8001666:	23aa      	movs	r3, #170	; 0xaa
 8001668:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 800166e:	2403      	movs	r4, #3
 8001670:	e008      	b.n	8001684 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001672:	f104 0320 	add.w	r3, r4, #32
 8001676:	443b      	add	r3, r7
 8001678:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	4413      	add	r3, r2
 8001680:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001682:	3401      	adds	r4, #1
 8001684:	2c07      	cmp	r4, #7
 8001686:	ddf4      	ble.n	8001672 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	43db      	mvns	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	231e      	movs	r3, #30
 8001696:	2209      	movs	r2, #9
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f008 feb4 	bl	800a406 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
	...

080016a8 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <BL_UART_Start+0x58>)
 80016bc:	f004 fd74 	bl	80061a8 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <BL_UART_Start+0x5c>)
 80016c6:	f004 fd6f 	bl	80061a8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016ca:	2014      	movs	r0, #20
 80016cc:	f003 fea2 	bl	8005414 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <BL_UART_Start+0x5c>)
 80016d6:	f004 fd67 	bl	80061a8 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80016da:	2055      	movs	r0, #85	; 0x55
 80016dc:	f003 fe9a 	bl	8005414 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80016e0:	f107 010f 	add.w	r1, r7, #15
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f008 fe8c 	bl	800a406 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80016ee:	2114      	movs	r1, #20
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f999 	bl	8001a28 <BL_UART_wait_ACK>

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800

08001708 <BL_UART_Finish>:

void BL_UART_Finish(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f003 fe81 	bl	8005414 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <BL_UART_Finish+0x34>)
 800171a:	f004 fd45 	bl	80061a8 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <BL_UART_Finish+0x38>)
 8001724:	f004 fd40 	bl	80061a8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001728:	2014      	movs	r0, #20
 800172a:	f003 fe73 	bl	8005414 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <BL_UART_Finish+0x38>)
 8001734:	f004 fd38 	bl	80061a8 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	40020800 	.word	0x40020800

08001744 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0cb      	sub	sp, #300	; 0x12c
 8001748:	af00      	add	r7, sp, #0
 800174a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800174e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001758:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800175c:	6001      	str	r1, [r0, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001764:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001772:	460a      	mov	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 8001776:	f64c 6331 	movw	r3, #52785	; 0xce31
 800177a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001790:	2300      	movs	r3, #0
 8001792:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 8001796:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800179a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a f8ac 	bl	800b908 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 80017b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <BL_UART_WriteMem+0x254>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d909      	bls.n	80017d4 <BL_UART_WriteMem+0x90>
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ce:	d201      	bcs.n	80017d4 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80017d0:	23bc      	movs	r3, #188	; 0xbc
 80017d2:	e0dc      	b.n	800198e <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80017d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017dc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80017e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80017f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001804:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001820:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001824:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001828:	4053      	eors	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001830:	4053      	eors	r3, r2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001838:	4053      	eors	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001840:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800184e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001852:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001856:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800185a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001862:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001866:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001870:	2400      	movs	r4, #0
 8001872:	e01c      	b.n	80018ae <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001874:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001878:	4621      	mov	r1, r4
 800187a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4053      	eors	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001890:	4622      	mov	r2, r4
 8001892:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	441a      	add	r2, r3
 800189e:	1c63      	adds	r3, r4, #1
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018a6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018aa:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 80018ac:	3401      	adds	r4, #1
 80018ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429c      	cmp	r4, r3
 80018ba:	dddb      	ble.n	8001874 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 80018bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3302      	adds	r3, #2
 80018c8:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80018cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018d0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018d4:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80018d6:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80018da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018de:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018e2:	230a      	movs	r3, #10
 80018e4:	2202      	movs	r2, #2
 80018e6:	6800      	ldr	r0, [r0, #0]
 80018e8:	f008 fd8d 	bl	800a406 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018f4:	210a      	movs	r1, #10
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f000 f896 	bl	8001a28 <BL_UART_wait_ACK>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001906:	2b79      	cmp	r3, #121	; 0x79
 8001908:	d140      	bne.n	800198c <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800190a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800190e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001912:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001916:	230f      	movs	r3, #15
 8001918:	2205      	movs	r2, #5
 800191a:	6800      	ldr	r0, [r0, #0]
 800191c:	f008 fd73 	bl	800a406 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001920:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001928:	210a      	movs	r1, #10
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f000 f87c 	bl	8001a28 <BL_UART_wait_ACK>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800193a:	2b79      	cmp	r3, #121	; 0x79
 800193c:	d124      	bne.n	8001988 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800193e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	3303      	adds	r3, #3
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0114 	add.w	r1, r7, #20
 8001952:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001956:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	6800      	ldr	r0, [r0, #0]
 800195e:	f008 fd52 	bl	800a406 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001962:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800196a:	210a      	movs	r1, #10
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f000 f85b 	bl	8001a28 <BL_UART_wait_ACK>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 8001978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800197c:	2b79      	cmp	r3, #121	; 0x79
 800197e:	d101      	bne.n	8001984 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001980:	2379      	movs	r3, #121	; 0x79
 8001982:	e004      	b.n	800198e <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001984:	231f      	movs	r3, #31
 8001986:	e002      	b.n	800198e <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 8001988:	231f      	movs	r3, #31
 800198a:	e000      	b.n	800198e <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 800198c:	231f      	movs	r3, #31

	return UB_NACK;
}
 800198e:	4618      	mov	r0, r3
 8001990:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	1ffeffff 	.word	0x1ffeffff

0800199c <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 80019a8:	f64b 3344 	movw	r3, #47940	; 0xbb44
 80019ac:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <BL_UART_ExtendEraseMem_SP+0x88>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	823b      	strh	r3, [r7, #16]
 80019b8:	2300      	movs	r3, #0
 80019ba:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 80019c8:	7b3a      	ldrb	r2, [r7, #12]
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	4053      	eors	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	230a      	movs	r3, #10
 80019d8:	2202      	movs	r2, #2
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f008 fd13 	bl	800a406 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80019e0:	210a      	movs	r1, #10
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f820 	bl	8001a28 <BL_UART_wait_ACK>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b79      	cmp	r3, #121	; 0x79
 80019f0:	d113      	bne.n	8001a1a <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	230f      	movs	r3, #15
 80019f8:	2203      	movs	r2, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f008 fd03 	bl	800a406 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001a00:	210a      	movs	r1, #10
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f810 	bl	8001a28 <BL_UART_wait_ACK>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b79      	cmp	r3, #121	; 0x79
 8001a10:	d101      	bne.n	8001a16 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001a12:	2379      	movs	r3, #121	; 0x79
 8001a14:	e002      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 8001a16:	231f      	movs	r3, #31
 8001a18:	e000      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 8001a1a:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800e800 	.word	0x0800e800

08001a28 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a3c:	f003 fcde 	bl	80053fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a48:	e018      	b.n	8001a7c <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a4a:	f107 010f 	add.w	r1, r7, #15
 8001a4e:	2302      	movs	r3, #2
 8001a50:	2201      	movs	r2, #1
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f008 fd69 	bl	800a52a <HAL_UART_Receive>

		if(response == 0x79){
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b79      	cmp	r3, #121	; 0x79
 8001a5c:	d101      	bne.n	8001a62 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a5e:	2379      	movs	r3, #121	; 0x79
 8001a60:	e010      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b1f      	cmp	r3, #31
 8001a66:	d101      	bne.n	8001a6c <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	e00b      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001a6c:	f003 fcc6 	bl	80053fc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d801      	bhi.n	8001a7c <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001a78:	23ab      	movs	r3, #171	; 0xab
 8001a7a:	e003      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e3      	bne.n	8001a4a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001a82:	231f      	movs	r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b09a      	sub	sp, #104	; 0x68
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f003 fc4c 	bl	8005330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 fa2e 	bl	8001ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fc10 	bl	80022c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa0:	f000 fbee 	bl	8002280 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aa4:	f000 fb98 	bl	80021d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aa8:	f000 fa8e 	bl	8001fc8 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001aac:	f000 fbbe 	bl	800222c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001ab0:	f000 fab8 	bl	8002024 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001ab4:	f000 fb40 	bl	8002138 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 fb62 	bl	8002180 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001abc:	f000 fae8 	bl	8002090 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001ac0:	487a      	ldr	r0, [pc, #488]	; (8001cac <main+0x220>)
 8001ac2:	f008 f835 	bl	8009b30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	4879      	ldr	r0, [pc, #484]	; (8001cb0 <main+0x224>)
 8001aca:	f008 f968 	bl	8009d9e <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001ace:	4a79      	ldr	r2, [pc, #484]	; (8001cb4 <main+0x228>)
 8001ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad4:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001ad6:	4b77      	ldr	r3, [pc, #476]	; (8001cb4 <main+0x228>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <main+0x22c>)
 8001ade:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001ae0:	4a76      	ldr	r2, [pc, #472]	; (8001cbc <main+0x230>)
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001ae6:	4a75      	ldr	r2, [pc, #468]	; (8001cbc <main+0x230>)
 8001ae8:	23fa      	movs	r3, #250	; 0xfa
 8001aea:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001aec:	4a73      	ldr	r2, [pc, #460]	; (8001cbc <main+0x230>)
 8001aee:	2364      	movs	r3, #100	; 0x64
 8001af0:	8093      	strh	r3, [r2, #4]
  buzzr.timestamp = 0;
 8001af2:	4a72      	ldr	r2, [pc, #456]	; (8001cbc <main+0x230>)
 8001af4:	2300      	movs	r3, #0
 8001af6:	6093      	str	r3, [r2, #8]

  stboxp.flag_start = 0;
 8001af8:	4a71      	ldr	r2, [pc, #452]	; (8001cc0 <main+0x234>)
 8001afa:	2300      	movs	r3, #0
 8001afc:	7013      	strb	r3, [r2, #0]
  stboxp.choice_set = bpoxy_lobby;
 8001afe:	4a70      	ldr	r2, [pc, #448]	; (8001cc0 <main+0x234>)
 8001b00:	2301      	movs	r3, #1
 8001b02:	7053      	strb	r3, [r2, #1]
  stboxp.ch_is = 0;
 8001b04:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <main+0x234>)
 8001b06:	2300      	movs	r3, #0
 8001b08:	7093      	strb	r3, [r2, #2]

  gScr.counter_overcurrent = 0;
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <main+0x238>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	7053      	strb	r3, [r2, #1]
  gScr.fullflag = 0;
 8001b10:	4a6c      	ldr	r2, [pc, #432]	; (8001cc4 <main+0x238>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	7013      	strb	r3, [r2, #0]

  k_flag.cnt = 0; k_flag.dn = 0; k_flag.up = 0;
 8001b16:	4a6c      	ldr	r2, [pc, #432]	; (8001cc8 <main+0x23c>)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	7093      	strb	r3, [r2, #2]
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <main+0x23c>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	7053      	strb	r3, [r2, #1]
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <main+0x23c>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	7013      	strb	r3, [r2, #0]


  ili9341_Init();
 8001b28:	f002 fcbc 	bl	80044a4 <ili9341_Init>
  ili9341_DisplayOn();
 8001b2c:	f002 fc9e 	bl	800446c <ili9341_DisplayOn>
//  ili9341_FillRect(50, 20, 50, 20, cl_RED);
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	4866      	ldr	r0, [pc, #408]	; (8001ccc <main+0x240>)
 8001b34:	f7ff fa34 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001b38:	2188      	movs	r1, #136	; 0x88
 8001b3a:	4864      	ldr	r0, [pc, #400]	; (8001ccc <main+0x240>)
 8001b3c:	f7ff fa30 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001b40:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <main+0x244>)
 8001b42:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001b46:	461c      	mov	r4, r3
 8001b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb3d 	bl	80001e0 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b6e:	230a      	movs	r3, #10
 8001b70:	4858      	ldr	r0, [pc, #352]	; (8001cd4 <main+0x248>)
 8001b72:	f008 fc48 	bl	800a406 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
   HAL_UART_Receive_DMA(&huart6, RxBufferMtCl, RxbufferSize_VRT);
 8001b76:	2209      	movs	r2, #9
 8001b78:	4957      	ldr	r1, [pc, #348]	; (8001cd8 <main+0x24c>)
 8001b7a:	4858      	ldr	r0, [pc, #352]	; (8001cdc <main+0x250>)
 8001b7c:	f008 fd77 	bl	800a66e <HAL_UART_Receive_DMA>

   gpio_BL_UART_Deactivate();
 8001b80:	f002 f850 	bl	8003c24 <gpio_BL_UART_Deactivate>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001b84:	f000 fd44 	bl	8002610 <Button_machine>
	  //Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  Use callback instead
	  //Tx_Rq_Verita_engine(&huart6, &VRB_CL);
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001b88:	f003 fc38 	bl	80053fc <HAL_GetTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	469a      	mov	sl, r3
 8001b92:	4693      	mov	fp, r2
 8001b94:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <main+0x254>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	4592      	cmp	sl, r2
 8001b9c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001ba0:	f0c0 80a4 	bcc.w	8001cec <main+0x260>
		timestamp_buzbtn += 20;
 8001ba4:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <main+0x254>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f112 0114 	adds.w	r1, r2, #20
 8001bae:	6239      	str	r1, [r7, #32]
 8001bb0:	f143 0300 	adc.w	r3, r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <main+0x254>)
 8001bb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bbc:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001bc0:	f000 fd76 	bl	80026b0 <knob_rotter>
		//running_box();
		//if(stboxp.choice_set){

		switch (boxpoint_runner){
 8001bc4:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <main+0x258>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d045      	beq.n	8001c58 <main+0x1cc>

		default:
		case a_wait:

			if(k_flag.up){
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <main+0x23c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <main+0x160>

				stboxp.ch_is++;
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <main+0x234>)
 8001bd6:	789b      	ldrb	r3, [r3, #2]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <main+0x234>)
 8001bde:	7093      	strb	r3, [r2, #2]

				k_flag.up = 0;
 8001be0:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <main+0x23c>)
 8001be2:	2300      	movs	r3, #0
 8001be4:	7013      	strb	r3, [r2, #0]
				boxpoint_runner = a_change;}
 8001be6:	4a3f      	ldr	r2, [pc, #252]	; (8001ce4 <main+0x258>)
 8001be8:	2301      	movs	r3, #1
 8001bea:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <main+0x23c>)
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01d      	beq.n	8001c30 <main+0x1a4>
				//stboxp.ch_is--;
				//stboxp.ch_is = (stboxp.ch_is < 0) ? bposxy[stboxp.choice_set].n_s - 1 : stboxp.ch_is;
				//if(stboxp.ch_is  < 0){
				//	stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}

				if(stboxp.ch_is == 0){
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <main+0x234>)
 8001bf6:	789b      	ldrb	r3, [r3, #2]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <main+0x18c>
						stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <main+0x234>)
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4a39      	ldr	r2, [pc, #228]	; (8001ce8 <main+0x25c>)
 8001c04:	232a      	movs	r3, #42	; 0x2a
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <main+0x234>)
 8001c14:	7093      	strb	r3, [r2, #2]
 8001c16:	e005      	b.n	8001c24 <main+0x198>
				else{stboxp.ch_is--;}
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <main+0x234>)
 8001c1a:	789b      	ldrb	r3, [r3, #2]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <main+0x234>)
 8001c22:	7093      	strb	r3, [r2, #2]

				 k_flag.dn = 0;
 8001c24:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <main+0x23c>)
 8001c26:	2300      	movs	r3, #0
 8001c28:	7053      	strb	r3, [r2, #1]
				 boxpoint_runner = a_change;}
 8001c2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ce4 <main+0x258>)
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	7013      	strb	r3, [r2, #0]

			stboxp.ch_is %= bposxy[stboxp.choice_set].n_s; // don't be more than spec of Grandstate sub
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <main+0x234>)
 8001c32:	7898      	ldrb	r0, [r3, #2]
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <main+0x234>)
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <main+0x25c>)
 8001c3c:	232a      	movs	r3, #42	; 0x2a
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	fbb0 f3f2 	udiv	r3, r0, r2
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	1ac3      	subs	r3, r0, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <main+0x234>)
 8001c54:	7093      	strb	r3, [r2, #2]

			break;
 8001c56:	e04a      	b.n	8001cee <main+0x262>

		case a_change:

			box_pointer(bposxy[stboxp.choice_set].x[stboxp.ch_is], bposxy[stboxp.choice_set].y[stboxp.ch_is]);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <main+0x234>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <main+0x234>)
 8001c60:	789b      	ldrb	r3, [r3, #2]
 8001c62:	461c      	mov	r4, r3
 8001c64:	4920      	ldr	r1, [pc, #128]	; (8001ce8 <main+0x25c>)
 8001c66:	4602      	mov	r2, r0
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	4402      	add	r2, r0
 8001c6c:	00d3      	lsls	r3, r2, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	4423      	add	r3, r4
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	440b      	add	r3, r1
 8001c76:	885d      	ldrh	r5, [r3, #2]
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <main+0x234>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <main+0x234>)
 8001c80:	789b      	ldrb	r3, [r3, #2]
 8001c82:	461c      	mov	r4, r3
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <main+0x25c>)
 8001c86:	460a      	mov	r2, r1
 8001c88:	0052      	lsls	r2, r2, #1
 8001c8a:	440a      	add	r2, r1
 8001c8c:	00d3      	lsls	r3, r2, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	4423      	add	r3, r4
 8001c92:	3308      	adds	r3, #8
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4403      	add	r3, r0
 8001c98:	88db      	ldrh	r3, [r3, #6]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f000 fc1d 	bl	80024dc <box_pointer>
			boxpoint_runner = a_wait;
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <main+0x258>)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	7013      	strb	r3, [r2, #0]
			break;
 8001ca8:	e021      	b.n	8001cee <main+0x262>
 8001caa:	bf00      	nop
 8001cac:	2000054c 	.word	0x2000054c
 8001cb0:	20000504 	.word	0x20000504
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	20000834 	.word	0x20000834
 8001cbc:	20000820 	.word	0x20000820
 8001cc0:	2000084c 	.word	0x2000084c
 8001cc4:	2000083c 	.word	0x2000083c
 8001cc8:	20000838 	.word	0x20000838
 8001ccc:	20000458 	.word	0x20000458
 8001cd0:	0800e804 	.word	0x0800e804
 8001cd4:	200005d8 	.word	0x200005d8
 8001cd8:	2000078c 	.word	0x2000078c
 8001cdc:	2000061c 	.word	0x2000061c
 8001ce0:	20000810 	.word	0x20000810
 8001ce4:	20000849 	.word	0x20000849
 8001ce8:	20000180 	.word	0x20000180

			}
		//}

	  }// timestamp_dis
 8001cec:	bf00      	nop


	  if (HAL_GetTick() >= timestamp_one){
 8001cee:	f003 fb85 	bl	80053fc <HAL_GetTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	61fa      	str	r2, [r7, #28]
 8001cfa:	4b74      	ldr	r3, [pc, #464]	; (8001ecc <main+0x440>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d04:	4621      	mov	r1, r4
 8001d06:	4291      	cmp	r1, r2
 8001d08:	4629      	mov	r1, r5
 8001d0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d0e:	d313      	bcc.n	8001d38 <main+0x2ac>
		  timestamp_one += 500;
 8001d10:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <main+0x440>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001d1a:	6139      	str	r1, [r7, #16]
 8001d1c:	f143 0300 	adc.w	r3, r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <main+0x440>)
 8001d24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d28:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4868      	ldr	r0, [pc, #416]	; (8001ed0 <main+0x444>)
 8001d30:	f004 fa53 	bl	80061da <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001d34:	f000 fe58 	bl	80029e8 <GrandState_Verita>

		  } // timestamp_one


	  if(HAL_GetTick() >= timestamp_sensors + 250){
 8001d38:	f003 fb60 	bl	80053fc <HAL_GetTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	60fa      	str	r2, [r7, #12]
 8001d44:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <main+0x448>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f112 08fa 	adds.w	r8, r2, #250	; 0xfa
 8001d4e:	f143 0900 	adc.w	r9, r3, #0
 8001d52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d56:	460b      	mov	r3, r1
 8001d58:	4543      	cmp	r3, r8
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d60:	f4ff af10 	bcc.w	8001b84 <main+0xf8>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001d64:	f003 fb4a 	bl	80053fc <HAL_GetTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <main+0x448>)
 8001d72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d76:	e9c3 1200 	strd	r1, r2, [r3]
		   *  - INA219#1 INA219#2
		   *  - MCP3208 CH[0..7]
		   *  - Client's MCU temp rwquest
		   * */

		  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
 8001d7a:	2211      	movs	r2, #17
 8001d7c:	21a0      	movs	r1, #160	; 0xa0
 8001d7e:	4856      	ldr	r0, [pc, #344]	; (8001ed8 <main+0x44c>)
 8001d80:	f7ff fc56 	bl	8001630 <Tx_UART_Verita_Command>

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	4855      	ldr	r0, [pc, #340]	; (8001edc <main+0x450>)
 8001d88:	f7ff f9ba 	bl	8001100 <INA219Read_BusV>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a54      	ldr	r2, [pc, #336]	; (8001ee0 <main+0x454>)
 8001d90:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	4851      	ldr	r0, [pc, #324]	; (8001edc <main+0x450>)
 8001d96:	f7ff f9db 	bl	8001150 <INA219Read_Current>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <main+0x454>)
 8001da0:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	484d      	ldr	r0, [pc, #308]	; (8001edc <main+0x450>)
 8001da6:	f7ff fa33 	bl	8001210 <INA219Read_Power>
 8001daa:	eef0 7a40 	vmov.f32	s15, s0
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <main+0x454>)
 8001db0:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	4849      	ldr	r0, [pc, #292]	; (8001edc <main+0x450>)
 8001db8:	f7ff f9ee 	bl	8001198 <INA219Read_ShuntV>
 8001dbc:	eef0 7a40 	vmov.f32	s15, s0
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <main+0x454>)
 8001dc2:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001dc6:	2188      	movs	r1, #136	; 0x88
 8001dc8:	4844      	ldr	r0, [pc, #272]	; (8001edc <main+0x450>)
 8001dca:	f7ff f999 	bl	8001100 <INA219Read_BusV>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a44      	ldr	r2, [pc, #272]	; (8001ee4 <main+0x458>)
 8001dd2:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001dd4:	2188      	movs	r1, #136	; 0x88
 8001dd6:	4841      	ldr	r0, [pc, #260]	; (8001edc <main+0x450>)
 8001dd8:	f7ff f9ba 	bl	8001150 <INA219Read_Current>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <main+0x458>)
 8001de2:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001de4:	2188      	movs	r1, #136	; 0x88
 8001de6:	483d      	ldr	r0, [pc, #244]	; (8001edc <main+0x450>)
 8001de8:	f7ff fa12 	bl	8001210 <INA219Read_Power>
 8001dec:	eef0 7a40 	vmov.f32	s15, s0
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <main+0x458>)
 8001df2:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001df6:	2188      	movs	r1, #136	; 0x88
 8001df8:	4838      	ldr	r0, [pc, #224]	; (8001edc <main+0x450>)
 8001dfa:	f7ff f9cd 	bl	8001198 <INA219Read_ShuntV>
 8001dfe:	eef0 7a40 	vmov.f32	s15, s0
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <main+0x458>)
 8001e04:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001e08:	2118      	movs	r1, #24
 8001e0a:	4837      	ldr	r0, [pc, #220]	; (8001ee8 <main+0x45c>)
 8001e0c:	f7ff fa4a 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a36      	ldr	r2, [pc, #216]	; (8001eec <main+0x460>)
 8001e14:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001e16:	2119      	movs	r1, #25
 8001e18:	4833      	ldr	r0, [pc, #204]	; (8001ee8 <main+0x45c>)
 8001e1a:	f7ff fa43 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a32      	ldr	r2, [pc, #200]	; (8001eec <main+0x460>)
 8001e22:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001e24:	211a      	movs	r1, #26
 8001e26:	4830      	ldr	r0, [pc, #192]	; (8001ee8 <main+0x45c>)
 8001e28:	f7ff fa3c 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <main+0x460>)
 8001e30:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001e32:	211b      	movs	r1, #27
 8001e34:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <main+0x45c>)
 8001e36:	f7ff fa35 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <main+0x460>)
 8001e3e:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001e40:	211c      	movs	r1, #28
 8001e42:	4829      	ldr	r0, [pc, #164]	; (8001ee8 <main+0x45c>)
 8001e44:	f7ff fa2e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a28      	ldr	r2, [pc, #160]	; (8001eec <main+0x460>)
 8001e4c:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001e4e:	211d      	movs	r1, #29
 8001e50:	4825      	ldr	r0, [pc, #148]	; (8001ee8 <main+0x45c>)
 8001e52:	f7ff fa27 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a24      	ldr	r2, [pc, #144]	; (8001eec <main+0x460>)
 8001e5a:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001e5c:	211e      	movs	r1, #30
 8001e5e:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <main+0x45c>)
 8001e60:	f7ff fa20 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <main+0x460>)
 8001e68:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001e6a:	211f      	movs	r1, #31
 8001e6c:	481e      	ldr	r0, [pc, #120]	; (8001ee8 <main+0x45c>)
 8001e6e:	f7ff fa19 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <main+0x460>)
 8001e76:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i < 7;i++){
 8001e78:	2400      	movs	r4, #0
 8001e7a:	e00e      	b.n	8001e9a <main+0x40e>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <main+0x460>)
 8001e7e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fa44 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001e88:	eef0 7a40 	vmov.f32	s15, s0
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <main+0x460>)
 8001e8e:	1d23      	adds	r3, r4, #4
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i < 7;i++){
 8001e98:	3401      	adds	r4, #1
 8001e9a:	2c06      	cmp	r4, #6
 8001e9c:	ddee      	ble.n	8001e7c <main+0x3f0>
		  }

		  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <main+0x464>)
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fe17 	bl	8003ad8 <ADCTVolta>
 8001eaa:	eef0 7a40 	vmov.f32	s15, s0
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	f001 fe41 	bl	8003b38 <TempEquat>
 8001eb6:	eef0 7a40 	vmov.f32	s15, s0
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <main+0x468>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]


		  Protection_machine();
 8001ec0:	f000 fc22 	bl	8002708 <Protection_machine>
		  manual_relay();
 8001ec4:	f000 fc64 	bl	8002790 <manual_relay>
	  Button_machine();
 8001ec8:	e65c      	b.n	8001b84 <main+0xf8>
 8001eca:	bf00      	nop
 8001ecc:	20000800 	.word	0x20000800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	20000808 	.word	0x20000808
 8001ed8:	2000061c 	.word	0x2000061c
 8001edc:	20000458 	.word	0x20000458
 8001ee0:	2000079c 	.word	0x2000079c
 8001ee4:	200007b4 	.word	0x200007b4
 8001ee8:	200004ac 	.word	0x200004ac
 8001eec:	200007cc 	.word	0x200007cc
 8001ef0:	20000728 	.word	0x20000728
 8001ef4:	20000798 	.word	0x20000798

08001ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b094      	sub	sp, #80	; 0x50
 8001efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	2230      	movs	r2, #48	; 0x30
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f009 fcfe 	bl	800b908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <SystemClock_Config+0xc8>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <SystemClock_Config+0xc8>)
 8001f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <SystemClock_Config+0xc8>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <SystemClock_Config+0xcc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <SystemClock_Config+0xcc>)
 8001f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <SystemClock_Config+0xcc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f60:	2302      	movs	r3, #2
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f74:	2304      	movs	r3, #4
 8001f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f006 fdf9 	bl	8008b74 <HAL_RCC_OscConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f88:	f001 fede 	bl	8003d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f90:	2302      	movs	r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	2103      	movs	r1, #3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f007 f85b 	bl	8009064 <HAL_RCC_ClockConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fb4:	f001 fec8 	bl	8003d48 <Error_Handler>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3750      	adds	r7, #80	; 0x50
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_I2C1_Init+0x50>)
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <MX_I2C1_Init+0x54>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_I2C1_Init+0x50>)
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_I2C1_Init+0x58>)
 8001fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_I2C1_Init+0x50>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_I2C1_Init+0x50>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_I2C1_Init+0x50>)
 8001fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <MX_I2C1_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_I2C1_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_I2C1_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_I2C1_Init+0x50>)
 8002006:	f004 f91b 	bl	8006240 <HAL_I2C_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002010:	f001 fe9a 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000458 	.word	0x20000458
 800201c:	40005400 	.word	0x40005400
 8002020:	00061a80 	.word	0x00061a80

08002024 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_SPI3_Init+0x64>)
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <MX_SPI3_Init+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <MX_SPI3_Init+0x64>)
 8002030:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002034:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_SPI3_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_SPI3_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_SPI3_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_SPI3_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_SPI3_Init+0x64>)
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_SPI3_Init+0x64>)
 8002058:	2220      	movs	r2, #32
 800205a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MX_SPI3_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_SPI3_Init+0x64>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <MX_SPI3_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_SPI3_Init+0x64>)
 8002070:	220a      	movs	r2, #10
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <MX_SPI3_Init+0x64>)
 8002076:	f007 fa15 	bl	80094a4 <HAL_SPI_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002080:	f001 fe62 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200004ac 	.word	0x200004ac
 800208c:	40003c00 	.word	0x40003c00

08002090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f009 fc32 	bl	800b908 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <MX_TIM3_Init+0xa4>)
 80020b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020d2:	2303      	movs	r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020d6:	2302      	movs	r3, #2
 80020d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020da:	2301      	movs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020de:	2304      	movs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80020e2:	2308      	movs	r3, #8
 80020e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020e6:	2302      	movs	r3, #2
 80020e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ea:	2301      	movs	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80020ee:	2304      	movs	r3, #4
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80020f2:	2308      	movs	r3, #8
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_TIM3_Init+0xa0>)
 80020fe:	f007 fda8 	bl	8009c52 <HAL_TIM_Encoder_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002108:	f001 fe1e 	bl	8003d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM3_Init+0xa0>)
 800211a:	f008 f8a5 	bl	800a268 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002124:	f001 fe10 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3730      	adds	r7, #48	; 0x30
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000504 	.word	0x20000504
 8002134:	40000400 	.word	0x40000400

08002138 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_TIM10_Init+0x40>)
 800213e:	4a0f      	ldr	r2, [pc, #60]	; (800217c <MX_TIM10_Init+0x44>)
 8002140:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <MX_TIM10_Init+0x40>)
 8002144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002148:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_TIM10_Init+0x40>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_TIM10_Init+0x40>)
 8002152:	f241 3287 	movw	r2, #4999	; 0x1387
 8002156:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <MX_TIM10_Init+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_TIM10_Init+0x40>)
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <MX_TIM10_Init+0x40>)
 8002166:	f007 fc93 	bl	8009a90 <HAL_TIM_Base_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002170:	f001 fdea 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000054c 	.word	0x2000054c
 800217c:	40014400 	.word	0x40014400

08002180 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <MX_USART1_UART_Init+0x54>)
 8002188:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 800218c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002190:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 8002194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002198:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 80021a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 80021bc:	f008 f8d6 	bl	800a36c <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80021c6:	f001 fdbf 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000594 	.word	0x20000594
 80021d4:	40011000 	.word	0x40011000

080021d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_USART2_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 8002210:	f008 f8ac 	bl	800a36c <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221a:	f001 fd95 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200005d8 	.word	0x200005d8
 8002228:	40004400 	.word	0x40004400

0800222c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_USART6_UART_Init+0x50>)
 8002234:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800223c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002264:	f008 f882 	bl	800a36c <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800226e:	f001 fd6b 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000061c 	.word	0x2000061c
 800227c:	40011400 	.word	0x40011400

08002280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_DMA_Init+0x3c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <MX_DMA_Init+0x3c>)
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_DMA_Init+0x3c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2039      	movs	r0, #57	; 0x39
 80022a8:	f003 f9b3 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022ac:	2039      	movs	r0, #57	; 0x39
 80022ae:	f003 f9cc 	bl	800564a <HAL_NVIC_EnableIRQ>

}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <MX_GPIO_Init+0x208>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <MX_GPIO_Init+0x208>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <MX_GPIO_Init+0x208>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b74      	ldr	r3, [pc, #464]	; (80024c8 <MX_GPIO_Init+0x208>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a73      	ldr	r2, [pc, #460]	; (80024c8 <MX_GPIO_Init+0x208>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a6c      	ldr	r2, [pc, #432]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b6a      	ldr	r3, [pc, #424]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a65      	ldr	r2, [pc, #404]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <MX_GPIO_Init+0x208>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b5f      	ldr	r3, [pc, #380]	; (80024c8 <MX_GPIO_Init+0x208>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a5e      	ldr	r2, [pc, #376]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b5c      	ldr	r3, [pc, #368]	; (80024c8 <MX_GPIO_Init+0x208>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 8002362:	2200      	movs	r2, #0
 8002364:	f240 314b 	movw	r1, #843	; 0x34b
 8002368:	4858      	ldr	r0, [pc, #352]	; (80024cc <MX_GPIO_Init+0x20c>)
 800236a:	f003 ff1d 	bl	80061a8 <HAL_GPIO_WritePin>
                          |RelayClient_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002374:	4856      	ldr	r0, [pc, #344]	; (80024d0 <MX_GPIO_Init+0x210>)
 8002376:	f003 ff17 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	2101      	movs	r1, #1
 800237e:	4855      	ldr	r0, [pc, #340]	; (80024d4 <MX_GPIO_Init+0x214>)
 8002380:	f003 ff12 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	2104      	movs	r1, #4
 8002388:	4853      	ldr	r0, [pc, #332]	; (80024d8 <MX_GPIO_Init+0x218>)
 800238a:	f003 ff0d 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800238e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002394:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4849      	ldr	r0, [pc, #292]	; (80024cc <MX_GPIO_Init+0x20c>)
 80023a6:	f003 fd7b 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin RelayClient_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|RelayClient_Pin
 80023aa:	f240 3343 	movw	r3, #835	; 0x343
 80023ae:	617b      	str	r3, [r7, #20]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4842      	ldr	r0, [pc, #264]	; (80024cc <MX_GPIO_Init+0x20c>)
 80023c4:	f003 fd6c 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80023c8:	2304      	movs	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	483c      	ldr	r0, [pc, #240]	; (80024cc <MX_GPIO_Init+0x20c>)
 80023dc:	f003 fd60 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80023e0:	2308      	movs	r3, #8
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ec:	2302      	movs	r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4835      	ldr	r0, [pc, #212]	; (80024cc <MX_GPIO_Init+0x20c>)
 80023f8:	f003 fd52 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 80023fc:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	482e      	ldr	r0, [pc, #184]	; (80024d0 <MX_GPIO_Init+0x210>)
 8002416:	f003 fd43 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002426:	2301      	movs	r3, #1
 8002428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4828      	ldr	r0, [pc, #160]	; (80024d4 <MX_GPIO_Init+0x214>)
 8002432:	f003 fd35 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8002436:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800243a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	4822      	ldr	r0, [pc, #136]	; (80024d4 <MX_GPIO_Init+0x214>)
 800244c:	f003 fd28 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002454:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245a:	2301      	movs	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4819      	ldr	r0, [pc, #100]	; (80024cc <MX_GPIO_Init+0x20c>)
 8002466:	f003 fd1b 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800246a:	2304      	movs	r3, #4
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4815      	ldr	r0, [pc, #84]	; (80024d8 <MX_GPIO_Init+0x218>)
 8002482:	f003 fd0d 	bl	8005ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 8002486:	2340      	movs	r3, #64	; 0x40
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248e:	2301      	movs	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	480e      	ldr	r0, [pc, #56]	; (80024d4 <MX_GPIO_Init+0x214>)
 800249a:	f003 fd01 	bl	8005ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2017      	movs	r0, #23
 80024a4:	f003 f8b5 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024a8:	2017      	movs	r0, #23
 80024aa:	f003 f8ce 	bl	800564a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2028      	movs	r0, #40	; 0x28
 80024b4:	f003 f8ad 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024b8:	2028      	movs	r0, #40	; 0x28
 80024ba:	f003 f8c6 	bl	800564a <HAL_NVIC_EnableIRQ>

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020c00 	.word	0x40020c00

080024dc <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	4603      	mov	r3, r0
 80024e4:	460a      	mov	r2, r1
 80024e6:	80fb      	strh	r3, [r7, #6]
 80024e8:	4613      	mov	r3, r2
 80024ea:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <box_pointer+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <box_pointer+0x5c>)
 80024f6:	8818      	ldrh	r0, [r3, #0]
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <box_pointer+0x5c>)
 80024fa:	8859      	ldrh	r1, [r3, #2]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	230f      	movs	r3, #15
 8002502:	220f      	movs	r2, #15
 8002504:	f002 f93d 	bl	8004782 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002508:	88b9      	ldrh	r1, [r7, #4]
 800250a:	88f8      	ldrh	r0, [r7, #6]
 800250c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	230f      	movs	r3, #15
 8002514:	220f      	movs	r2, #15
 8002516:	f002 f934 	bl	8004782 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 800251a:	4a07      	ldr	r2, [pc, #28]	; (8002538 <box_pointer+0x5c>)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <box_pointer+0x5c>)
 8002522:	88bb      	ldrh	r3, [r7, #4]
 8002524:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <box_pointer+0x58>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000848 	.word	0x20000848
 8002538:	20000850 	.word	0x20000850

0800253c <simple_scr>:

void simple_scr(){
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <simple_scr+0xa8>)
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	461a      	mov	r2, r3
 8002548:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <simple_scr+0xa8>)
 800254a:	789b      	ldrb	r3, [r3, #2]
 800254c:	4619      	mov	r1, r3
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <simple_scr+0xac>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	460b      	mov	r3, r1
 8002556:	4925      	ldr	r1, [pc, #148]	; (80025ec <simple_scr+0xb0>)
 8002558:	4825      	ldr	r0, [pc, #148]	; (80025f0 <simple_scr+0xb4>)
 800255a:	f009 fe47 	bl	800c1ec <siprintf>
	  ili9341_WriteString(220, 185, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <simple_scr+0xb8>)
 8002560:	2200      	movs	r2, #0
 8002562:	9202      	str	r2, [sp, #8]
 8002564:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002568:	9201      	str	r2, [sp, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	9200      	str	r2, [sp, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <simple_scr+0xb4>)
 8002572:	21b9      	movs	r1, #185	; 0xb9
 8002574:	20dc      	movs	r0, #220	; 0xdc
 8002576:	f002 fa8b 	bl	8004a90 <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], k_flag.cnt, k_flag.up); //flag_k_up
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <simple_scr+0xbc>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <simple_scr+0xc0>)
 8002582:	789b      	ldrb	r3, [r3, #2]
 8002584:	4619      	mov	r1, r3
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <simple_scr+0xc0>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	460b      	mov	r3, r1
 800258e:	491c      	ldr	r1, [pc, #112]	; (8002600 <simple_scr+0xc4>)
 8002590:	4817      	ldr	r0, [pc, #92]	; (80025f0 <simple_scr+0xb4>)
 8002592:	f009 fe2b 	bl	800c1ec <siprintf>
	  ili9341_WriteString(220, 200, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <simple_scr+0xb8>)
 8002598:	2200      	movs	r2, #0
 800259a:	9202      	str	r2, [sp, #8]
 800259c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	9200      	str	r2, [sp, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <simple_scr+0xb4>)
 80025aa:	21c8      	movs	r1, #200	; 0xc8
 80025ac:	20dc      	movs	r0, #220	; 0xdc
 80025ae:	f002 fa6f 	bl	8004a90 <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is); //state_box_choice_is
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <simple_scr+0xc8>)
 80025b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <simple_scr+0xcc>)
 80025b8:	789b      	ldrb	r3, [r3, #2]
 80025ba:	4914      	ldr	r1, [pc, #80]	; (800260c <simple_scr+0xd0>)
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <simple_scr+0xb4>)
 80025be:	f009 fe15 	bl	800c1ec <siprintf>
	  ili9341_WriteString(250, 215, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <simple_scr+0xb8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	9202      	str	r2, [sp, #8]
 80025c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025cc:	9201      	str	r2, [sp, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	9200      	str	r2, [sp, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <simple_scr+0xb4>)
 80025d6:	21d7      	movs	r1, #215	; 0xd7
 80025d8:	20fa      	movs	r0, #250	; 0xfa
 80025da:	f002 fa59 	bl	8004a90 <ili9341_WriteString>

}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000082c 	.word	0x2000082c
 80025e8:	20000830 	.word	0x20000830
 80025ec:	0800e840 	.word	0x0800e840
 80025f0:	200006c0 	.word	0x200006c0
 80025f4:	2000022c 	.word	0x2000022c
 80025f8:	20000834 	.word	0x20000834
 80025fc:	20000838 	.word	0x20000838
 8002600:	0800e850 	.word	0x0800e850
 8002604:	40000400 	.word	0x40000400
 8002608:	2000084c 	.word	0x2000084c
 800260c:	0800e860 	.word	0x0800e860

08002610 <Button_machine>:
		 }
	}
}


void Button_machine(){
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <Button_machine+0x88>)
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <Button_machine+0x88>)
 800261a:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <Button_machine+0x8c>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	0b1b      	lsrs	r3, r3, #12
 8002622:	b2db      	uxtb	r3, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <Button_machine+0x88>)
 8002630:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <Button_machine+0x88>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d017      	beq.n	800266a <Button_machine+0x5a>
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <Button_machine+0x88>)
 800263c:	785b      	ldrb	r3, [r3, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d113      	bne.n	800266a <Button_machine+0x5a>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <Button_machine+0x88>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <Button_machine+0x90>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	4413      	add	r3, r2
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <Button_machine+0x90>)
 8002652:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <Button_machine+0x88>)
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <Button_machine+0x88>)
 800265a:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <Button_machine+0x88>)
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <Button_machine+0x88>)
 8002662:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try
			flag_manual_relay = 1;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <Button_machine+0x94>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
//		}

//		knob_rotter();

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <Button_machine+0x98>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2b10      	cmp	r3, #16
 8002670:	d905      	bls.n	800267e <Button_machine+0x6e>
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <Button_machine+0x98>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800267a:	4293      	cmp	r3, r2
 800267c:	d907      	bls.n	800268e <Button_machine+0x7e>
			TIM3->CNT = 0x8000; // back to center
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <Button_machine+0x9c>)
 8002680:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <Button_machine+0x98>)
 8002688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800268c:	801a      	strh	r2, [r3, #0]
		}


}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	2000082c 	.word	0x2000082c
 800269c:	40020400 	.word	0x40020400
 80026a0:	20000830 	.word	0x20000830
 80026a4:	2000081c 	.word	0x2000081c
 80026a8:	20000834 	.word	0x20000834
 80026ac:	40000400 	.word	0x40000400

080026b0 <knob_rotter>:

void knob_rotter(){
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <knob_rotter+0x4c>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <knob_rotter+0x50>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d908      	bls.n	80026d4 <knob_rotter+0x24>
		//flag_k_up = 1;
		k_flag.up = 1;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <knob_rotter+0x54>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <knob_rotter+0x4c>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <knob_rotter+0x50>)
 80026d0:	801a      	strh	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;

	}
	else{}

}
 80026d2:	e00e      	b.n	80026f2 <knob_rotter+0x42>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <knob_rotter+0x4c>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <knob_rotter+0x50>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d207      	bcs.n	80026f2 <knob_rotter+0x42>
		k_flag.dn = 1;
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <knob_rotter+0x54>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <knob_rotter+0x4c>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <knob_rotter+0x50>)
 80026f0:	801a      	strh	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40000400 	.word	0x40000400
 8002700:	20000834 	.word	0x20000834
 8002704:	20000838 	.word	0x20000838

08002708 <Protection_machine>:

void Protection_machine(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0

	//// overcurrent
	if (inata.CURRENT >= Current_limit_mA || inatb.CURRENT >= Current_limit_mA){
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <Protection_machine+0x70>)
 800270e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002712:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002716:	da05      	bge.n	8002724 <Protection_machine+0x1c>
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <Protection_machine+0x74>)
 800271a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800271e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002722:	db22      	blt.n	800276a <Protection_machine+0x62>
		gScr.counter_overcurrent++;
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <Protection_machine+0x78>)
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	3301      	adds	r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <Protection_machine+0x78>)
 800272e:	705a      	strb	r2, [r3, #1]

		if(gScr.counter_overcurrent >= 8){
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <Protection_machine+0x78>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b07      	cmp	r3, #7
 8002736:	d91c      	bls.n	8002772 <Protection_machine+0x6a>
			gScr.counter_overcurrent = 0;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <Protection_machine+0x78>)
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
			gScr.fullflag = 0;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <Protection_machine+0x78>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]

			////Relay_cut
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <Protection_machine+0x7c>)
 800274c:	f003 fd2c 	bl	80061a8 <HAL_GPIO_WritePin>

			//// Buzzer scream
			buzzr.flag = 1;
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <Protection_machine+0x80>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
			buzzr.priod_up = 1000;
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <Protection_machine+0x80>)
 8002758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800275c:	805a      	strh	r2, [r3, #2]
			buzzer_scream_cnt();
 800275e:	f000 f8cd 	bl	80028fc <buzzer_scream_cnt>
			//// interrupt, go to state Client error.
			GrandState = pre_danger;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <Protection_machine+0x84>)
 8002764:	220d      	movs	r2, #13
 8002766:	701a      	strb	r2, [r3, #0]
		if(gScr.counter_overcurrent >= 8){
 8002768:	e003      	b.n	8002772 <Protection_machine+0x6a>
		}
	}else{gScr.counter_overcurrent = 0;}
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <Protection_machine+0x78>)
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]

}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000079c 	.word	0x2000079c
 800277c:	200007b4 	.word	0x200007b4
 8002780:	2000083c 	.word	0x2000083c
 8002784:	40020800 	.word	0x40020800
 8002788:	20000820 	.word	0x20000820
 800278c:	20000006 	.word	0x20000006

08002790 <manual_relay>:

void manual_relay(){
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <manual_relay+0x28>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <manual_relay+0x24>

		if(GrandState == monitor){
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <manual_relay+0x2c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b0a      	cmp	r3, #10
 80027a2:	d104      	bne.n	80027ae <manual_relay+0x1e>
			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 80027a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <manual_relay+0x30>)
 80027aa:	f003 fd16 	bl	80061da <HAL_GPIO_TogglePin>
		}
		flag_manual_relay = 0;
 80027ae:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <manual_relay+0x28>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	}
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000081c 	.word	0x2000081c
 80027bc:	20000006 	.word	0x20000006
 80027c0:	40020800 	.word	0x40020800

080027c4 <Compare_pin_32>:

void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 80027e2:	2400      	movs	r4, #0
 80027e4:	e067      	b.n	80028b6 <Compare_pin_32+0xf2>
		if(Lista_GPIOx[i] >= 20){break;}
 80027e6:	4623      	mov	r3, r4
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b13      	cmp	r3, #19
 80027f2:	d863      	bhi.n	80028bc <Compare_pin_32+0xf8>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 80027f4:	8bbb      	ldrh	r3, [r7, #28]
 80027f6:	4622      	mov	r2, r4
 80027f8:	0052      	lsls	r2, r2, #1
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	440a      	add	r2, r1
 80027fe:	8812      	ldrh	r2, [r2, #0]
 8002800:	4113      	asrs	r3, r2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 800280a:	8b7b      	ldrh	r3, [r7, #26]
 800280c:	4622      	mov	r2, r4
 800280e:	0052      	lsls	r2, r2, #1
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	440a      	add	r2, r1
 8002814:	8812      	ldrh	r2, [r2, #0]
 8002816:	4113      	asrs	r3, r2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 8002820:	7e7a      	ldrb	r2, [r7, #25]
 8002822:	7e3b      	ldrb	r3, [r7, #24]
 8002824:	429a      	cmp	r2, r3
 8002826:	d145      	bne.n	80028b4 <Compare_pin_32+0xf0>

			 cntr_w++; // count if match
 8002828:	7ffb      	ldrb	r3, [r7, #31]
 800282a:	3301      	adds	r3, #1
 800282c:	77fb      	strb	r3, [r7, #31]

			 switch(gpst){
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00f      	beq.n	8002854 <Compare_pin_32+0x90>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d01b      	beq.n	8002870 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 8002838:	4623      	mov	r3, r4
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <Compare_pin_32+0x124>)
 800284c:	4618      	mov	r0, r3
 800284e:	f009 fccd 	bl	800c1ec <siprintf>
				 break;
 8002852:	e01b      	b.n	800288c <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 8002854:	4623      	mov	r3, r4
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	4921      	ldr	r1, [pc, #132]	; (80028ec <Compare_pin_32+0x128>)
 8002868:	4618      	mov	r0, r3
 800286a:	f009 fcbf 	bl	800c1ec <siprintf>
			 	 break;
 800286e:	e00d      	b.n	800288c <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8002870:	4623      	mov	r3, r4
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	4413      	add	r3, r2
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	f107 0310 	add.w	r3, r7, #16
 8002882:	491b      	ldr	r1, [pc, #108]	; (80028f0 <Compare_pin_32+0x12c>)
 8002884:	4618      	mov	r0, r3
 8002886:	f009 fcb1 	bl	800c1ec <siprintf>
			 	 break;
 800288a:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	2204      	movs	r2, #4
 8002892:	4619      	mov	r1, r3
 8002894:	6838      	ldr	r0, [r7, #0]
 8002896:	f009 fcc9 	bl	800c22c <strncat>
			 sprintf(aadd, " ");
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	4915      	ldr	r1, [pc, #84]	; (80028f4 <Compare_pin_32+0x130>)
 80028a0:	4618      	mov	r0, r3
 80028a2:	f009 fca3 	bl	800c1ec <siprintf>
			 strncat(outchar, aadd, 1);
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	2201      	movs	r2, #1
 80028ac:	4619      	mov	r1, r3
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f009 fcbc 	bl	800c22c <strncat>
	for(register int i = 0;i < 16;i++){
 80028b4:	3401      	adds	r4, #1
 80028b6:	2c0f      	cmp	r4, #15
 80028b8:	dd95      	ble.n	80027e6 <Compare_pin_32+0x22>
 80028ba:	e000      	b.n	80028be <Compare_pin_32+0xfa>
		if(Lista_GPIOx[i] >= 20){break;}
 80028bc:	bf00      	nop
		 }
	}

	if(!cntr_w){
 80028be:	7ffb      	ldrb	r3, [r7, #31]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10c      	bne.n	80028de <Compare_pin_32+0x11a>
		sprintf(aadd, "_PASS");
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	490b      	ldr	r1, [pc, #44]	; (80028f8 <Compare_pin_32+0x134>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f009 fc8e 	bl	800c1ec <siprintf>
		strncat(outchar, aadd, 7);
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	2207      	movs	r2, #7
 80028d6:	4619      	mov	r1, r3
 80028d8:	6838      	ldr	r0, [r7, #0]
 80028da:	f009 fca7 	bl	800c22c <strncat>
	}
}
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	0800e868 	.word	0x0800e868
 80028ec:	0800e870 	.word	0x0800e870
 80028f0:	0800e878 	.word	0x0800e878
 80028f4:	0800e880 	.word	0x0800e880
 80028f8:	0800e884 	.word	0x0800e884

080028fc <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 80028fc:	b598      	push	{r3, r4, r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;

		switch(bz_st){
 8002900:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <buzzer_scream_cnt+0xdc>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d039      	beq.n	800297c <buzzer_scream_cnt+0x80>
 8002908:	2b02      	cmp	r3, #2
 800290a:	d01d      	beq.n	8002948 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 800290c:	4b33      	ldr	r3, [pc, #204]	; (80029dc <buzzer_scream_cnt+0xe0>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002914:	4832      	ldr	r0, [pc, #200]	; (80029e0 <buzzer_scream_cnt+0xe4>)
 8002916:	f007 f90b 	bl	8009b30 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <buzzer_scream_cnt+0xe0>)
 800291c:	885b      	ldrh	r3, [r3, #2]
 800291e:	461c      	mov	r4, r3
 8002920:	f002 fd6c 	bl	80053fc <HAL_GetTick>
 8002924:	4603      	mov	r3, r0
 8002926:	4423      	add	r3, r4
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <buzzer_scream_cnt+0xe0>)
 800292a:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <buzzer_scream_cnt+0xdc>)
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <buzzer_scream_cnt+0xe0>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	3b01      	subs	r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <buzzer_scream_cnt+0xe0>)
 800293c:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 800293e:	e048      	b.n	80029d2 <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002940:	4827      	ldr	r0, [pc, #156]	; (80029e0 <buzzer_scream_cnt+0xe4>)
 8002942:	f007 f957 	bl	8009bf4 <HAL_TIM_Base_Stop_IT>
			break;
 8002946:	e044      	b.n	80029d2 <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002948:	2201      	movs	r2, #1
 800294a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800294e:	4825      	ldr	r0, [pc, #148]	; (80029e4 <buzzer_scream_cnt+0xe8>)
 8002950:	f003 fc2a 	bl	80061a8 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002954:	f002 fd52 	bl	80053fc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <buzzer_scream_cnt+0xe0>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d334      	bcc.n	80029cc <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <buzzer_scream_cnt+0xe0>)
 8002964:	889b      	ldrh	r3, [r3, #4]
 8002966:	461c      	mov	r4, r3
 8002968:	f002 fd48 	bl	80053fc <HAL_GetTick>
 800296c:	4603      	mov	r3, r0
 800296e:	4423      	add	r3, r4
 8002970:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <buzzer_scream_cnt+0xe0>)
 8002972:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <buzzer_scream_cnt+0xdc>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
			}
			break;
 800297a:	e027      	b.n	80029cc <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002982:	4818      	ldr	r0, [pc, #96]	; (80029e4 <buzzer_scream_cnt+0xe8>)
 8002984:	f003 fc10 	bl	80061a8 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002988:	f002 fd38 	bl	80053fc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <buzzer_scream_cnt+0xe0>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d31c      	bcc.n	80029d0 <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <buzzer_scream_cnt+0xe0>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <buzzer_scream_cnt+0xe0>)
 80029a0:	885b      	ldrh	r3, [r3, #2]
 80029a2:	461c      	mov	r4, r3
 80029a4:	f002 fd2a 	bl	80053fc <HAL_GetTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4423      	add	r3, r4
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <buzzer_scream_cnt+0xe0>)
 80029ae:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <buzzer_scream_cnt+0xe0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <buzzer_scream_cnt+0xe0>)
 80029ba:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <buzzer_scream_cnt+0xdc>)
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 80029c2:	e005      	b.n	80029d0 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <buzzer_scream_cnt+0xdc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
			break;
 80029ca:	e001      	b.n	80029d0 <buzzer_scream_cnt+0xd4>
			break;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <buzzer_scream_cnt+0xd6>
			break;
 80029d0:	bf00      	nop
		}

}
 80029d2:	bf00      	nop
 80029d4:	bd98      	pop	{r3, r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000854 	.word	0x20000854
 80029dc:	20000820 	.word	0x20000820
 80029e0:	2000054c 	.word	0x2000054c
 80029e4:	40020800 	.word	0x40020800

080029e8 <GrandState_Verita>:


void GrandState_Verita(){
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af04      	add	r7, sp, #16

	switch(GrandState){
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <GrandState_Verita+0x22c>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b0e      	cmp	r3, #14
 80029f4:	f200 80ae 	bhi.w	8002b54 <GrandState_Verita+0x16c>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <GrandState_Verita+0x18>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002bef 	.word	0x08002bef
 8002a04:	08002a3d 	.word	0x08002a3d
 8002a08:	08002b55 	.word	0x08002b55
 8002a0c:	08002c59 	.word	0x08002c59
 8002a10:	08002e2f 	.word	0x08002e2f
 8002a14:	08002b55 	.word	0x08002b55
 8002a18:	08002b55 	.word	0x08002b55
 8002a1c:	08002ec9 	.word	0x08002ec9
 8002a20:	08002f83 	.word	0x08002f83
 8002a24:	08003325 	.word	0x08003325
 8002a28:	08003625 	.word	0x08003625
 8002a2c:	080030a9 	.word	0x080030a9
 8002a30:	0800327f 	.word	0x0800327f
 8002a34:	080038a1 	.word	0x080038a1
 8002a38:	08003a69 	.word	0x08003a69

	case pre_lobby:

		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002a3c:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <GrandState_Verita+0x230>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	23f0      	movs	r3, #240	; 0xf0
 8002a48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f001 fe97 	bl	8004782 <ili9341_FillRect>

		ili9341_FillRect(0, 0, 320, 32, cl_GRAY);
 8002a54:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a60:	2100      	movs	r1, #0
 8002a62:	2000      	movs	r0, #0
 8002a64:	f001 fe8d 	bl	8004782 <ili9341_FillRect>

		ili9341_FillRect(305, 0, 15, 240, cl_ORANGE);
 8002a68:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	23f0      	movs	r3, #240	; 0xf0
 8002a70:	220f      	movs	r2, #15
 8002a72:	2100      	movs	r1, #0
 8002a74:	f240 1031 	movw	r0, #305	; 0x131
 8002a78:	f001 fe83 	bl	8004782 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Nucleo-F411RE Tester");
 8002a7c:	4967      	ldr	r1, [pc, #412]	; (8002c1c <GrandState_Verita+0x234>)
 8002a7e:	4868      	ldr	r0, [pc, #416]	; (8002c20 <GrandState_Verita+0x238>)
 8002a80:	f009 fbb4 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(10, 10, TextDispBuffer, Font20, cl_BLACK);
 8002a84:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <GrandState_Verita+0x23c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	9201      	str	r2, [sp, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a63      	ldr	r2, [pc, #396]	; (8002c20 <GrandState_Verita+0x238>)
 8002a92:	210a      	movs	r1, #10
 8002a94:	200a      	movs	r0, #10
 8002a96:	f002 f848 	bl	8004b2a <ili9341_WriteStringNoBG>
		ili9341_DrawHLine(cl_ORANGE, 0, 33, 320);
 8002a9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002a9e:	2221      	movs	r2, #33	; 0x21
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
 8002aa6:	f001 fe15 	bl	80046d4 <ili9341_DrawHLine>

		sprintf(TextDispBuffer,"Full-Script");
 8002aaa:	495f      	ldr	r1, [pc, #380]	; (8002c28 <GrandState_Verita+0x240>)
 8002aac:	485c      	ldr	r0, [pc, #368]	; (8002c20 <GrandState_Verita+0x238>)
 8002aae:	f009 fb9d 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	; (8002c2c <GrandState_Verita+0x244>)
 8002ab4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ab8:	9201      	str	r2, [sp, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a57      	ldr	r2, [pc, #348]	; (8002c20 <GrandState_Verita+0x238>)
 8002ac2:	213c      	movs	r1, #60	; 0x3c
 8002ac4:	2032      	movs	r0, #50	; 0x32
 8002ac6:	f002 f830 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR_Monitor");
 8002aca:	4959      	ldr	r1, [pc, #356]	; (8002c30 <GrandState_Verita+0x248>)
 8002acc:	4854      	ldr	r0, [pc, #336]	; (8002c20 <GrandState_Verita+0x238>)
 8002ace:	f009 fb8d 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(50, 90, TextDispBuffer, Font16, cl_CYAN);
 8002ad2:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <GrandState_Verita+0x244>)
 8002ad4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ad8:	9201      	str	r2, [sp, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	9200      	str	r2, [sp, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <GrandState_Verita+0x238>)
 8002ae2:	215a      	movs	r1, #90	; 0x5a
 8002ae4:	2032      	movs	r0, #50	; 0x32
 8002ae6:	f002 f820 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Hardware-mode");
 8002aea:	4952      	ldr	r1, [pc, #328]	; (8002c34 <GrandState_Verita+0x24c>)
 8002aec:	484c      	ldr	r0, [pc, #304]	; (8002c20 <GrandState_Verita+0x238>)
 8002aee:	f009 fb7d 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(50, 120, TextDispBuffer, Font16, cl_CYAN);
 8002af2:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <GrandState_Verita+0x244>)
 8002af4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002af8:	9201      	str	r2, [sp, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	9200      	str	r2, [sp, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a47      	ldr	r2, [pc, #284]	; (8002c20 <GrandState_Verita+0x238>)
 8002b02:	2178      	movs	r1, #120	; 0x78
 8002b04:	2032      	movs	r0, #50	; 0x32
 8002b06:	f002 f810 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware-mode");
 8002b0a:	494b      	ldr	r1, [pc, #300]	; (8002c38 <GrandState_Verita+0x250>)
 8002b0c:	4844      	ldr	r0, [pc, #272]	; (8002c20 <GrandState_Verita+0x238>)
 8002b0e:	f009 fb6d 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(50, 150, TextDispBuffer, Font16, cl_CYAN);
 8002b12:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <GrandState_Verita+0x244>)
 8002b14:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002b18:	9201      	str	r2, [sp, #4]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3f      	ldr	r2, [pc, #252]	; (8002c20 <GrandState_Verita+0x238>)
 8002b22:	2196      	movs	r1, #150	; 0x96
 8002b24:	2032      	movs	r0, #50	; 0x32
 8002b26:	f002 f800 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"About Verita");
 8002b2a:	4944      	ldr	r1, [pc, #272]	; (8002c3c <GrandState_Verita+0x254>)
 8002b2c:	483c      	ldr	r0, [pc, #240]	; (8002c20 <GrandState_Verita+0x238>)
 8002b2e:	f009 fb5d 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(50, 180, TextDispBuffer, Font16, cl_CYAN);
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <GrandState_Verita+0x244>)
 8002b34:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002b38:	9201      	str	r2, [sp, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	9200      	str	r2, [sp, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <GrandState_Verita+0x238>)
 8002b42:	21b4      	movs	r1, #180	; 0xb4
 8002b44:	2032      	movs	r0, #50	; 0x32
 8002b46:	f001 fff0 	bl	8004b2a <ili9341_WriteStringNoBG>

		GrandState = lobby;
 8002b4a:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <GrandState_Verita+0x22c>)
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
		break; // pre-lobby
 8002b50:	f000 bfa0 	b.w	8003a94 <GrandState_Verita+0x10ac>

	default:
	case lobby:
		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <GrandState_Verita+0x230>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is);
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <GrandState_Verita+0x258>)
 8002b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <GrandState_Verita+0x230>)
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	4938      	ldr	r1, [pc, #224]	; (8002c44 <GrandState_Verita+0x25c>)
 8002b64:	482e      	ldr	r0, [pc, #184]	; (8002c20 <GrandState_Verita+0x238>)
 8002b66:	f009 fb41 	bl	800c1ec <siprintf>
		ili9341_WriteString(200, 220, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <GrandState_Verita+0x260>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	9202      	str	r2, [sp, #8]
 8002b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a28      	ldr	r2, [pc, #160]	; (8002c20 <GrandState_Verita+0x238>)
 8002b7e:	21dc      	movs	r1, #220	; 0xdc
 8002b80:	20c8      	movs	r0, #200	; 0xc8
 8002b82:	f001 ff85 	bl	8004a90 <ili9341_WriteString>
		//simple_scr();

		if(k_flag.cnt){
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <GrandState_Verita+0x264>)
 8002b88:	789b      	ldrb	r3, [r3, #2]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8777 	beq.w	8003a7e <GrandState_Verita+0x1096>


			if (stboxp.ch_is == 1) {
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <GrandState_Verita+0x230>)
 8002b92:	789b      	ldrb	r3, [r3, #2]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <GrandState_Verita+0x1be>
				gScr.fullflag = ff_runfull;
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <GrandState_Verita+0x268>)
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
				GrandState = pre_hw_chk;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <GrandState_Verita+0x22c>)
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e01e      	b.n	8002be4 <GrandState_Verita+0x1fc>
			}
			else if (stboxp.ch_is == 2){GrandState = pre_monitor;}
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <GrandState_Verita+0x230>)
 8002ba8:	789b      	ldrb	r3, [r3, #2]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d103      	bne.n	8002bb6 <GrandState_Verita+0x1ce>
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <GrandState_Verita+0x22c>)
 8002bb0:	2209      	movs	r2, #9
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e016      	b.n	8002be4 <GrandState_Verita+0x1fc>
			else if (stboxp.ch_is == 3){GrandState = pre_hw_chk;}
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <GrandState_Verita+0x230>)
 8002bb8:	789b      	ldrb	r3, [r3, #2]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d103      	bne.n	8002bc6 <GrandState_Verita+0x1de>
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <GrandState_Verita+0x22c>)
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e00e      	b.n	8002be4 <GrandState_Verita+0x1fc>
			else if (stboxp.ch_is == 4){GrandState = pre_fw_lob;}
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <GrandState_Verita+0x230>)
 8002bc8:	789b      	ldrb	r3, [r3, #2]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d103      	bne.n	8002bd6 <GrandState_Verita+0x1ee>
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <GrandState_Verita+0x22c>)
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e006      	b.n	8002be4 <GrandState_Verita+0x1fc>
			else if (stboxp.ch_is == 5){GrandState = pre_about;}
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <GrandState_Verita+0x230>)
 8002bd8:	789b      	ldrb	r3, [r3, #2]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d102      	bne.n	8002be4 <GrandState_Verita+0x1fc>
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <GrandState_Verita+0x22c>)
 8002be0:	220f      	movs	r2, #15
 8002be2:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <GrandState_Verita+0x264>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	709a      	strb	r2, [r3, #2]
		}

		break; // lobby
 8002bea:	f000 bf48 	b.w	8003a7e <GrandState_Verita+0x1096>

	case init:
		stboxp.choice_set = bpoxy_def;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <GrandState_Verita+0x230>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	705a      	strb	r2, [r3, #1]
//		}
//		//// last round: send only left bit (less 255)
//		HAL_Delay(2);
//		BL_UART_WriteMem_d(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);

		BL_UART_Start(&huart1);
 8002bf4:	4817      	ldr	r0, [pc, #92]	; (8002c54 <GrandState_Verita+0x26c>)
 8002bf6:	f7fe fd57 	bl	80016a8 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002bfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bfe:	4815      	ldr	r0, [pc, #84]	; (8002c54 <GrandState_Verita+0x26c>)
 8002c00:	f7fe fecc 	bl	800199c <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 8002c04:	f7fe fd80 	bl	8001708 <BL_UART_Finish>

		GrandState = lobby;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <GrandState_Verita+0x22c>)
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
		break;
 8002c0e:	f000 bf41 	b.w	8003a94 <GrandState_Verita+0x10ac>
 8002c12:	bf00      	nop
 8002c14:	20000006 	.word	0x20000006
 8002c18:	2000084c 	.word	0x2000084c
 8002c1c:	0800e88c 	.word	0x0800e88c
 8002c20:	200006c0 	.word	0x200006c0
 8002c24:	2000023c 	.word	0x2000023c
 8002c28:	0800e8a4 	.word	0x0800e8a4
 8002c2c:	20000234 	.word	0x20000234
 8002c30:	0800e8b0 	.word	0x0800e8b0
 8002c34:	0800e8bc 	.word	0x0800e8bc
 8002c38:	0800e8cc 	.word	0x0800e8cc
 8002c3c:	0800e8dc 	.word	0x0800e8dc
 8002c40:	40000400 	.word	0x40000400
 8002c44:	0800e860 	.word	0x0800e860
 8002c48:	2000022c 	.word	0x2000022c
 8002c4c:	20000838 	.word	0x20000838
 8002c50:	2000083c 	.word	0x2000083c
 8002c54:	20000594 	.word	0x20000594

	case pre_hw_chk:
		stboxp.choice_set = bpoxy_def;
 8002c58:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <GrandState_Verita+0x494>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	23d2      	movs	r3, #210	; 0xd2
 8002c64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c68:	211e      	movs	r1, #30
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f001 fd89 	bl	8004782 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_ORANGE);
 8002c70:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	231e      	movs	r3, #30
 8002c78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f001 fd7f 	bl	8004782 <ili9341_FillRect>

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8002c84:	2201      	movs	r2, #1
 8002c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8a:	487d      	ldr	r0, [pc, #500]	; (8002e80 <GrandState_Verita+0x498>)
 8002c8c:	f003 fa8c 	bl	80061a8 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"Hardware_Chk");
 8002c90:	497c      	ldr	r1, [pc, #496]	; (8002e84 <GrandState_Verita+0x49c>)
 8002c92:	487d      	ldr	r0, [pc, #500]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002c94:	f009 faaa 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8002c98:	4b7c      	ldr	r3, [pc, #496]	; (8002e8c <GrandState_Verita+0x4a4>)
 8002c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9e:	9201      	str	r2, [sp, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	9200      	str	r2, [sp, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002ca8:	2105      	movs	r1, #5
 8002caa:	203c      	movs	r0, #60	; 0x3c
 8002cac:	f001 ff3d 	bl	8004b2a <ili9341_WriteStringNoBG>


		sprintf(TextDispBuffer,"5Vin:");
 8002cb0:	4977      	ldr	r1, [pc, #476]	; (8002e90 <GrandState_Verita+0x4a8>)
 8002cb2:	4875      	ldr	r0, [pc, #468]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002cb4:	f009 fa9a 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 8002cb8:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <GrandState_Verita+0x4ac>)
 8002cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cbe:	9201      	str	r2, [sp, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	9200      	str	r2, [sp, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a70      	ldr	r2, [pc, #448]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002cc8:	2132      	movs	r1, #50	; 0x32
 8002cca:	200f      	movs	r0, #15
 8002ccc:	f001 ff2d 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 8002cd0:	4971      	ldr	r1, [pc, #452]	; (8002e98 <GrandState_Verita+0x4b0>)
 8002cd2:	486d      	ldr	r0, [pc, #436]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002cd4:	f009 fa8a 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 8002cd8:	4b6e      	ldr	r3, [pc, #440]	; (8002e94 <GrandState_Verita+0x4ac>)
 8002cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cde:	9201      	str	r2, [sp, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a68      	ldr	r2, [pc, #416]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002ce8:	214b      	movs	r1, #75	; 0x4b
 8002cea:	200f      	movs	r0, #15
 8002cec:	f001 ff1d 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3");
 8002cf0:	496a      	ldr	r1, [pc, #424]	; (8002e9c <GrandState_Verita+0x4b4>)
 8002cf2:	4865      	ldr	r0, [pc, #404]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002cf4:	f009 fa7a 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 95, TextDispBuffer, Font16, cl_WHITE);
 8002cf8:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <GrandState_Verita+0x4ac>)
 8002cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a60      	ldr	r2, [pc, #384]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d08:	215f      	movs	r1, #95	; 0x5f
 8002d0a:	200f      	movs	r0, #15
 8002d0c:	f001 ff0d 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"STLink");
 8002d10:	4963      	ldr	r1, [pc, #396]	; (8002ea0 <GrandState_Verita+0x4b8>)
 8002d12:	485d      	ldr	r0, [pc, #372]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d14:	f009 fa6a 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 113, TextDispBuffer, Font12, cl_WHITE);
 8002d18:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <GrandState_Verita+0x4bc>)
 8002d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	9200      	str	r2, [sp, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d28:	2171      	movs	r1, #113	; 0x71
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f001 fefd 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 8002d30:	495d      	ldr	r1, [pc, #372]	; (8002ea8 <GrandState_Verita+0x4c0>)
 8002d32:	4855      	ldr	r0, [pc, #340]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d34:	f009 fa5a 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 8002d38:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <GrandState_Verita+0x4ac>)
 8002d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d3e:	9201      	str	r2, [sp, #4]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	9200      	str	r2, [sp, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d48:	217d      	movs	r1, #125	; 0x7d
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f001 feed 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 8002d50:	4956      	ldr	r1, [pc, #344]	; (8002eac <GrandState_Verita+0x4c4>)
 8002d52:	484d      	ldr	r0, [pc, #308]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d54:	f009 fa4a 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 8002d58:	4b4e      	ldr	r3, [pc, #312]	; (8002e94 <GrandState_Verita+0x4ac>)
 8002d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5e:	9201      	str	r2, [sp, #4]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	9200      	str	r2, [sp, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d68:	2196      	movs	r1, #150	; 0x96
 8002d6a:	200f      	movs	r0, #15
 8002d6c:	f001 fedd 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 54, TextDispBuffer, Font12, cl_WHITE);
 8002d70:	494f      	ldr	r1, [pc, #316]	; (8002eb0 <GrandState_Verita+0x4c8>)
 8002d72:	4845      	ldr	r0, [pc, #276]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d74:	f009 fa3a 	bl	800c1ec <siprintf>
 8002d78:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <GrandState_Verita+0x4bc>)
 8002d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7e:	9201      	str	r2, [sp, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	9200      	str	r2, [sp, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a40      	ldr	r2, [pc, #256]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d88:	2136      	movs	r1, #54	; 0x36
 8002d8a:	2096      	movs	r0, #150	; 0x96
 8002d8c:	f001 fecd 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 79, TextDispBuffer, Font12, cl_WHITE);
 8002d90:	4947      	ldr	r1, [pc, #284]	; (8002eb0 <GrandState_Verita+0x4c8>)
 8002d92:	483d      	ldr	r0, [pc, #244]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002d94:	f009 fa2a 	bl	800c1ec <siprintf>
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <GrandState_Verita+0x4bc>)
 8002d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d9e:	9201      	str	r2, [sp, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	9200      	str	r2, [sp, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a38      	ldr	r2, [pc, #224]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002da8:	214f      	movs	r1, #79	; 0x4f
 8002daa:	2096      	movs	r0, #150	; 0x96
 8002dac:	f001 febd 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 104, TextDispBuffer, Font12, cl_WHITE);
 8002db0:	493f      	ldr	r1, [pc, #252]	; (8002eb0 <GrandState_Verita+0x4c8>)
 8002db2:	4835      	ldr	r0, [pc, #212]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002db4:	f009 fa1a 	bl	800c1ec <siprintf>
 8002db8:	4b3a      	ldr	r3, [pc, #232]	; (8002ea4 <GrandState_Verita+0x4bc>)
 8002dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dbe:	9201      	str	r2, [sp, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	9200      	str	r2, [sp, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a30      	ldr	r2, [pc, #192]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002dc8:	2168      	movs	r1, #104	; 0x68
 8002dca:	2096      	movs	r0, #150	; 0x96
 8002dcc:	f001 fead 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 129, TextDispBuffer, Font12, cl_WHITE);
 8002dd0:	4938      	ldr	r1, [pc, #224]	; (8002eb4 <GrandState_Verita+0x4cc>)
 8002dd2:	482d      	ldr	r0, [pc, #180]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002dd4:	f009 fa0a 	bl	800c1ec <siprintf>
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <GrandState_Verita+0x4bc>)
 8002dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	9200      	str	r2, [sp, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002de8:	2181      	movs	r1, #129	; 0x81
 8002dea:	2096      	movs	r0, #150	; 0x96
 8002dec:	f001 fe9d 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 154, TextDispBuffer, Font12, cl_WHITE);
 8002df0:	4930      	ldr	r1, [pc, #192]	; (8002eb4 <GrandState_Verita+0x4cc>)
 8002df2:	4825      	ldr	r0, [pc, #148]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002df4:	f009 f9fa 	bl	800c1ec <siprintf>
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <GrandState_Verita+0x4bc>)
 8002dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	9200      	str	r2, [sp, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002e08:	219a      	movs	r1, #154	; 0x9a
 8002e0a:	2096      	movs	r0, #150	; 0x96
 8002e0c:	f001 fe8d 	bl	8004b2a <ili9341_WriteStringNoBG>


		gScr.timelog = HAL_GetTick() + 3500;
 8002e10:	f002 faf4 	bl	80053fc <HAL_GetTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 8002e1a:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <GrandState_Verita+0x4d0>)
 8002e1c:	6053      	str	r3, [r2, #4]

		k_flag.cnt = 0; //// prevent over state jump
 8002e1e:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <GrandState_Verita+0x4d4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	709a      	strb	r2, [r3, #2]
		GrandState = hw_chk;
 8002e24:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <GrandState_Verita+0x4d8>)
 8002e26:	2204      	movs	r2, #4
 8002e28:	701a      	strb	r2, [r3, #0]
		break; //pre_hw_chk
 8002e2a:	f000 be33 	b.w	8003a94 <GrandState_Verita+0x10ac>
	case hw_chk:
		stboxp.choice_set = bpoxy_def;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <GrandState_Verita+0x494>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	705a      	strb	r2, [r3, #1]


		sprintf(TextDispBuffer,"<-Back");
 8002e34:	4923      	ldr	r1, [pc, #140]	; (8002ec4 <GrandState_Verita+0x4dc>)
 8002e36:	4814      	ldr	r0, [pc, #80]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002e38:	f009 f9d8 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <GrandState_Verita+0x4ac>)
 8002e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e42:	9201      	str	r2, [sp, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	9200      	str	r2, [sp, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <GrandState_Verita+0x4a0>)
 8002e4c:	21dc      	movs	r1, #220	; 0xdc
 8002e4e:	201e      	movs	r0, #30
 8002e50:	f001 fe6b 	bl	8004b2a <ili9341_WriteStringNoBG>
		/*condition to jump state from HW
		 * if currentchk ok
		 * 		if pressed or 3 sec pass -> go bootloader
		 * else force back lobby & turnoff relay.
		 * */
		if(k_flag.cnt){ //|| HAL_GetTick() >= gScr.timelog
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <GrandState_Verita+0x4d4>)
 8002e56:	789b      	ldrb	r3, [r3, #2]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8612 	beq.w	8003a82 <GrandState_Verita+0x109a>

			if(gScr.fullflag == ff_runfull){
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <GrandState_Verita+0x4d0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d104      	bne.n	8002e70 <GrandState_Verita+0x488>

			GrandState = pre_bootloader;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <GrandState_Verita+0x4d8>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	701a      	strb	r2, [r3, #0]
			else{
				GrandState = pre_lobby;
			}
		}

		break; //hw_chk
 8002e6c:	f000 be09 	b.w	8003a82 <GrandState_Verita+0x109a>
				GrandState = pre_lobby;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <GrandState_Verita+0x4d8>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
		break; //hw_chk
 8002e76:	f000 be04 	b.w	8003a82 <GrandState_Verita+0x109a>
 8002e7a:	bf00      	nop
 8002e7c:	2000084c 	.word	0x2000084c
 8002e80:	40020800 	.word	0x40020800
 8002e84:	0800e8ec 	.word	0x0800e8ec
 8002e88:	200006c0 	.word	0x200006c0
 8002e8c:	2000023c 	.word	0x2000023c
 8002e90:	0800e8fc 	.word	0x0800e8fc
 8002e94:	20000234 	.word	0x20000234
 8002e98:	0800e904 	.word	0x0800e904
 8002e9c:	0800e90c 	.word	0x0800e90c
 8002ea0:	0800e910 	.word	0x0800e910
 8002ea4:	2000022c 	.word	0x2000022c
 8002ea8:	0800e918 	.word	0x0800e918
 8002eac:	0800e920 	.word	0x0800e920
 8002eb0:	0800e928 	.word	0x0800e928
 8002eb4:	0800e92c 	.word	0x0800e92c
 8002eb8:	2000083c 	.word	0x2000083c
 8002ebc:	20000838 	.word	0x20000838
 8002ec0:	20000006 	.word	0x20000006
 8002ec4:	0800e930 	.word	0x0800e930

	case pre_bootloader:
		stboxp.choice_set = bpoxy_no;
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <GrandState_Verita+0x67c>)
 8002eca:	2203      	movs	r2, #3
 8002ecc:	705a      	strb	r2, [r3, #1]

		ili9341_FillRect(0, 0, 320, 30, cl_YELLOW);
 8002ece:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	231e      	movs	r3, #30
 8002ed6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eda:	2100      	movs	r1, #0
 8002edc:	2000      	movs	r0, #0
 8002ede:	f001 fc50 	bl	8004782 <ili9341_FillRect>
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	23d2      	movs	r3, #210	; 0xd2
 8002ee8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eec:	211e      	movs	r1, #30
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f001 fc47 	bl	8004782 <ili9341_FillRect>

		sprintf(TextDispBuffer,"- BOOTLOADER -");
 8002ef4:	495c      	ldr	r1, [pc, #368]	; (8003068 <GrandState_Verita+0x680>)
 8002ef6:	485d      	ldr	r0, [pc, #372]	; (800306c <GrandState_Verita+0x684>)
 8002ef8:	f009 f978 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_BLACK);
 8002efc:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <GrandState_Verita+0x688>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	9201      	str	r2, [sp, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <GrandState_Verita+0x684>)
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	203c      	movs	r0, #60	; 0x3c
 8002f0e:	f001 fe0c 	bl	8004b2a <ili9341_WriteStringNoBG>


		sprintf(TextDispBuffer," .bin script is booting...");
 8002f12:	4958      	ldr	r1, [pc, #352]	; (8003074 <GrandState_Verita+0x68c>)
 8002f14:	4855      	ldr	r0, [pc, #340]	; (800306c <GrandState_Verita+0x684>)
 8002f16:	f009 f969 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(20, 60, TextDispBuffer, Font16, cl_WHITE);
 8002f1a:	4b57      	ldr	r3, [pc, #348]	; (8003078 <GrandState_Verita+0x690>)
 8002f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f20:	9201      	str	r2, [sp, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	9200      	str	r2, [sp, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a50      	ldr	r2, [pc, #320]	; (800306c <GrandState_Verita+0x684>)
 8002f2a:	213c      	movs	r1, #60	; 0x3c
 8002f2c:	2014      	movs	r0, #20
 8002f2e:	f001 fdfc 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Don't pluck  off");
 8002f32:	4952      	ldr	r1, [pc, #328]	; (800307c <GrandState_Verita+0x694>)
 8002f34:	484d      	ldr	r0, [pc, #308]	; (800306c <GrandState_Verita+0x684>)
 8002f36:	f009 f959 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(40, 110, TextDispBuffer, Font20, cl_WHITE);
 8002f3a:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <GrandState_Verita+0x688>)
 8002f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f40:	9201      	str	r2, [sp, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a48      	ldr	r2, [pc, #288]	; (800306c <GrandState_Verita+0x684>)
 8002f4a:	216e      	movs	r1, #110	; 0x6e
 8002f4c:	2028      	movs	r0, #40	; 0x28
 8002f4e:	f001 fdec 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"the client board");
 8002f52:	494b      	ldr	r1, [pc, #300]	; (8003080 <GrandState_Verita+0x698>)
 8002f54:	4845      	ldr	r0, [pc, #276]	; (800306c <GrandState_Verita+0x684>)
 8002f56:	f009 f949 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(40, 135, TextDispBuffer, Font20, cl_ORANGE);
 8002f5a:	4b45      	ldr	r3, [pc, #276]	; (8003070 <GrandState_Verita+0x688>)
 8002f5c:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a40      	ldr	r2, [pc, #256]	; (800306c <GrandState_Verita+0x684>)
 8002f6a:	2187      	movs	r1, #135	; 0x87
 8002f6c:	2028      	movs	r0, #40	; 0x28
 8002f6e:	f001 fddc 	bl	8004b2a <ili9341_WriteStringNoBG>

		k_flag.cnt = 0;
 8002f72:	4b44      	ldr	r3, [pc, #272]	; (8003084 <GrandState_Verita+0x69c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	709a      	strb	r2, [r3, #2]
		GrandState = s_bootloader;
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <GrandState_Verita+0x6a0>)
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	701a      	strb	r2, [r3, #0]
		break; // pre_bootloader
 8002f7e:	f000 bd89 	b.w	8003a94 <GrandState_Verita+0x10ac>

	case s_bootloader:
		stboxp.choice_set = bpoxy_def;
 8002f82:	4b38      	ldr	r3, [pc, #224]	; (8003064 <GrandState_Verita+0x67c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	705a      	strb	r2, [r3, #1]

		//// enable UART, disable after endboot, prevent misunderstanding when GPIO test
		gpio_BL_UART_activate();
 8002f88:	f000 fe10 	bl	8003bac <gpio_BL_UART_activate>

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <GrandState_Verita+0x6a4>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4a3d      	ldr	r2, [pc, #244]	; (800308c <GrandState_Verita+0x6a4>)
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2201      	movne	r2, #1
 8002fa4:	2200      	moveq	r2, #0
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4413      	add	r3, r2
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <GrandState_Verita+0x6a8>)
 8002fae:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8002fb0:	4838      	ldr	r0, [pc, #224]	; (8003094 <GrandState_Verita+0x6ac>)
 8002fb2:	f7fe fb79 	bl	80016a8 <BL_UART_Start>

		//// Flash Memory Erase ============,
		//// Erase1_Mass_CMD makes bootloader not response to ALL write CMD / dont know why
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank1_CMD);
 8002fb6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002fba:	4836      	ldr	r0, [pc, #216]	; (8003094 <GrandState_Verita+0x6ac>)
 8002fbc:	f7fe fcee 	bl	800199c <BL_UART_ExtendEraseMem_SP>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank2_CMD);
 8002fc0:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8002fc4:	4833      	ldr	r0, [pc, #204]	; (8003094 <GrandState_Verita+0x6ac>)
 8002fc6:	f7fe fce9 	bl	800199c <BL_UART_ExtendEraseMem_SP>

		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e00b      	b.n	8002fe6 <GrandState_Verita+0x5fe>
			BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8002fce:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	0223      	lsls	r3, r4, #8
 8002fd8:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <GrandState_Verita+0x6b0>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	482d      	ldr	r0, [pc, #180]	; (8003094 <GrandState_Verita+0x6ac>)
 8002fe0:	f7fe fbb0 	bl	8001744 <BL_UART_WriteMem>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002fe4:	3401      	adds	r4, #1
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <GrandState_Verita+0x6a8>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	429c      	cmp	r4, r3
 8002fee:	dbee      	blt.n	8002fce <GrandState_Verita+0x5e6>
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <GrandState_Verita+0x6a8>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8002ff8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	4618      	mov	r0, r3
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <GrandState_Verita+0x6a4>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <GrandState_Verita+0x6a8>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	3b01      	subs	r3, #1
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <GrandState_Verita+0x6b0>)
 8003010:	440b      	add	r3, r1
 8003012:	4601      	mov	r1, r0
 8003014:	481f      	ldr	r0, [pc, #124]	; (8003094 <GrandState_Verita+0x6ac>)
 8003016:	f7fe fb95 	bl	8001744 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 800301a:	f7fe fb75 	bl	8001708 <BL_UART_Finish>

			sprintf(TextDispBuffer,"Finish");
 800301e:	491f      	ldr	r1, [pc, #124]	; (800309c <GrandState_Verita+0x6b4>)
 8003020:	4812      	ldr	r0, [pc, #72]	; (800306c <GrandState_Verita+0x684>)
 8003022:	f009 f8e3 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(100, 160, TextDispBuffer, Font24, cl_GREEN);
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <GrandState_Verita+0x6b8>)
 8003028:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800302c:	9201      	str	r2, [sp, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	9200      	str	r2, [sp, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <GrandState_Verita+0x684>)
 8003036:	21a0      	movs	r1, #160	; 0xa0
 8003038:	2064      	movs	r0, #100	; 0x64
 800303a:	f001 fd76 	bl	8004b2a <ili9341_WriteStringNoBG>

		//// disable UART, disable after endboot, prevent misunderstanding when GPIO test
		gpio_BL_UART_Deactivate();
 800303e:	f000 fdf1 	bl	8003c24 <gpio_BL_UART_Deactivate>

		k_flag.cnt = 0;//// prevent over state jump
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <GrandState_Verita+0x69c>)
 8003044:	2200      	movs	r2, #0
 8003046:	709a      	strb	r2, [r3, #2]
		if(gScr.fullflag == ff_runfull){
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <GrandState_Verita+0x6bc>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d104      	bne.n	800305a <GrandState_Verita+0x672>
			GrandState = pre_gpio_chk;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <GrandState_Verita+0x6a0>)
 8003052:	220b      	movs	r2, #11
 8003054:	701a      	strb	r2, [r3, #0]
		}else{
			GrandState = pre_lobby;
		}

		break; ////s_bootloader
 8003056:	f000 bd1d 	b.w	8003a94 <GrandState_Verita+0x10ac>
			GrandState = pre_lobby;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <GrandState_Verita+0x6a0>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
		break; ////s_bootloader
 8003060:	f000 bd18 	b.w	8003a94 <GrandState_Verita+0x10ac>
 8003064:	2000084c 	.word	0x2000084c
 8003068:	0800e938 	.word	0x0800e938
 800306c:	200006c0 	.word	0x200006c0
 8003070:	2000023c 	.word	0x2000023c
 8003074:	0800e948 	.word	0x0800e948
 8003078:	20000234 	.word	0x20000234
 800307c:	0800e964 	.word	0x0800e964
 8003080:	0800e978 	.word	0x0800e978
 8003084:	20000838 	.word	0x20000838
 8003088:	20000006 	.word	0x20000006
 800308c:	20000004 	.word	0x20000004
 8003090:	20000724 	.word	0x20000724
 8003094:	20000594 	.word	0x20000594
 8003098:	0800eac0 	.word	0x0800eac0
 800309c:	0800e98c 	.word	0x0800e98c
 80030a0:	20000244 	.word	0x20000244
 80030a4:	2000083c 	.word	0x2000083c

	case pre_gpio_chk:
			stboxp.choice_set = bpoxy_def;
 80030a8:	4b82      	ldr	r3, [pc, #520]	; (80032b4 <GrandState_Verita+0x8cc>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	705a      	strb	r2, [r3, #1]
			//// Send CMD to client to run GPIO testscript
			Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 80030ae:	2202      	movs	r2, #2
 80030b0:	21a1      	movs	r1, #161	; 0xa1
 80030b2:	4881      	ldr	r0, [pc, #516]	; (80032b8 <GrandState_Verita+0x8d0>)
 80030b4:	f7fe fabc 	bl	8001630 <Tx_UART_Verita_Command>

			//// Set UI
			ili9341_FillRect(0, 0, 320, 30, cl_DARKCYAN);
 80030b8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	231e      	movs	r3, #30
 80030c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030c4:	2100      	movs	r1, #0
 80030c6:	2000      	movs	r0, #0
 80030c8:	f001 fb5b 	bl	8004782 <ili9341_FillRect>
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80030cc:	2300      	movs	r3, #0
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	23d2      	movs	r3, #210	; 0xd2
 80030d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030d6:	211e      	movs	r1, #30
 80030d8:	2000      	movs	r0, #0
 80030da:	f001 fb52 	bl	8004782 <ili9341_FillRect>

			sprintf(TextDispBuffer,"GPIO Selftest");
 80030de:	4977      	ldr	r1, [pc, #476]	; (80032bc <GrandState_Verita+0x8d4>)
 80030e0:	4877      	ldr	r0, [pc, #476]	; (80032c0 <GrandState_Verita+0x8d8>)
 80030e2:	f009 f883 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 80030e6:	4b77      	ldr	r3, [pc, #476]	; (80032c4 <GrandState_Verita+0x8dc>)
 80030e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ec:	9201      	str	r2, [sp, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	9200      	str	r2, [sp, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a72      	ldr	r2, [pc, #456]	; (80032c0 <GrandState_Verita+0x8d8>)
 80030f6:	2105      	movs	r1, #5
 80030f8:	203c      	movs	r0, #60	; 0x3c
 80030fa:	f001 fd16 	bl	8004b2a <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"PUPDR:");
 80030fe:	4972      	ldr	r1, [pc, #456]	; (80032c8 <GrandState_Verita+0x8e0>)
 8003100:	486f      	ldr	r0, [pc, #444]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003102:	f009 f873 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font20, cl_WHITE);
 8003106:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <GrandState_Verita+0x8dc>)
 8003108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800310c:	9201      	str	r2, [sp, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6a      	ldr	r2, [pc, #424]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003116:	2132      	movs	r1, #50	; 0x32
 8003118:	200f      	movs	r0, #15
 800311a:	f001 fd06 	bl	8004b2a <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"PP:");
 800311e:	496b      	ldr	r1, [pc, #428]	; (80032cc <GrandState_Verita+0x8e4>)
 8003120:	4867      	ldr	r0, [pc, #412]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003122:	f009 f863 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(15, 85, TextDispBuffer, Font20, cl_WHITE);
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <GrandState_Verita+0x8dc>)
 8003128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312c:	9201      	str	r2, [sp, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	9200      	str	r2, [sp, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a62      	ldr	r2, [pc, #392]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003136:	2155      	movs	r1, #85	; 0x55
 8003138:	200f      	movs	r0, #15
 800313a:	f001 fcf6 	bl	8004b2a <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"OD:");
 800313e:	4964      	ldr	r1, [pc, #400]	; (80032d0 <GrandState_Verita+0x8e8>)
 8003140:	485f      	ldr	r0, [pc, #380]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003142:	f009 f853 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(15, 120, TextDispBuffer, Font20, cl_WHITE);
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <GrandState_Verita+0x8dc>)
 8003148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314c:	9201      	str	r2, [sp, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	9200      	str	r2, [sp, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5a      	ldr	r2, [pc, #360]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003156:	2178      	movs	r1, #120	; 0x78
 8003158:	200f      	movs	r0, #15
 800315a:	f001 fce6 	bl	8004b2a <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"MCU Temp:");
 800315e:	495d      	ldr	r1, [pc, #372]	; (80032d4 <GrandState_Verita+0x8ec>)
 8003160:	4857      	ldr	r0, [pc, #348]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003162:	f009 f843 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(15, 160, TextDispBuffer, Font16, cl_WHITE);
 8003166:	4b5c      	ldr	r3, [pc, #368]	; (80032d8 <GrandState_Verita+0x8f0>)
 8003168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800316c:	9201      	str	r2, [sp, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	9200      	str	r2, [sp, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003176:	21a0      	movs	r1, #160	; 0xa0
 8003178:	200f      	movs	r0, #15
 800317a:	f001 fcd6 	bl	8004b2a <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"FWID:");
 800317e:	4957      	ldr	r1, [pc, #348]	; (80032dc <GrandState_Verita+0x8f4>)
 8003180:	484f      	ldr	r0, [pc, #316]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003182:	f009 f833 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(15, 185, TextDispBuffer, Font16, cl_WHITE);
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <GrandState_Verita+0x8f0>)
 8003188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318c:	9201      	str	r2, [sp, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	9200      	str	r2, [sp, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <GrandState_Verita+0x8d8>)
 8003196:	21b9      	movs	r1, #185	; 0xb9
 8003198:	200f      	movs	r0, #15
 800319a:	f001 fcc6 	bl	8004b2a <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Finish >> ");
 800319e:	4950      	ldr	r1, [pc, #320]	; (80032e0 <GrandState_Verita+0x8f8>)
 80031a0:	4847      	ldr	r0, [pc, #284]	; (80032c0 <GrandState_Verita+0x8d8>)
 80031a2:	f009 f823 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(250, 220, TextDispBuffer, Font16, cl_WHITE);
 80031a6:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <GrandState_Verita+0x8f0>)
 80031a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ac:	9201      	str	r2, [sp, #4]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	9200      	str	r2, [sp, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a42      	ldr	r2, [pc, #264]	; (80032c0 <GrandState_Verita+0x8d8>)
 80031b6:	21dc      	movs	r1, #220	; 0xdc
 80031b8:	20fa      	movs	r0, #250	; 0xfa
 80031ba:	f001 fcb6 	bl	8004b2a <ili9341_WriteStringNoBG>


			//// checkif GPIO test is finished ?
			if(VRB_CL.Mark.Flag_next){ // runalltest cplt
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <GrandState_Verita+0x8fc>)
 80031c0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 845e 	beq.w	8003a86 <GrandState_Verita+0x109e>
				Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_SendALLTestData);
 80031ca:	2204      	movs	r2, #4
 80031cc:	21a1      	movs	r1, #161	; 0xa1
 80031ce:	483a      	ldr	r0, [pc, #232]	; (80032b8 <GrandState_Verita+0x8d0>)
 80031d0:	f7fe fa2e 	bl	8001630 <Tx_UART_Verita_Command>
				HAL_Delay(100);
 80031d4:	2064      	movs	r0, #100	; 0x64
 80031d6:	f002 f91d 	bl	8005414 <HAL_Delay>

				if(VRB_CL.Mark.Flag_ger == VRF_SendALLTestData){ //// 'll send this flag back after cplt
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <GrandState_Verita+0x8fc>)
 80031dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	f040 8450 	bne.w	8003a86 <GrandState_Verita+0x109e>

					Compare_pin_32(VRB_CL.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 80031e6:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <GrandState_Verita+0x8fc>)
 80031e8:	6858      	ldr	r0, [r3, #4]
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <GrandState_Verita+0x900>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	493f      	ldr	r1, [pc, #252]	; (80032ec <GrandState_Verita+0x904>)
 80031f0:	f7ff fae8 	bl	80027c4 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 80031f4:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <GrandState_Verita+0x8fc>)
 80031f6:	6898      	ldr	r0, [r3, #8]
 80031f8:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <GrandState_Verita+0x908>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	493b      	ldr	r1, [pc, #236]	; (80032ec <GrandState_Verita+0x904>)
 80031fe:	f7ff fae1 	bl	80027c4 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <GrandState_Verita+0x8fc>)
 8003204:	68d8      	ldr	r0, [r3, #12]
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <GrandState_Verita+0x90c>)
 8003208:	2200      	movs	r2, #0
 800320a:	4938      	ldr	r1, [pc, #224]	; (80032ec <GrandState_Verita+0x904>)
 800320c:	f7ff fada 	bl	80027c4 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <GrandState_Verita+0x8fc>)
 8003212:	6918      	ldr	r0, [r3, #16]
 8003214:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <GrandState_Verita+0x910>)
 8003216:	2201      	movs	r2, #1
 8003218:	4938      	ldr	r1, [pc, #224]	; (80032fc <GrandState_Verita+0x914>)
 800321a:	f7ff fad3 	bl	80027c4 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <GrandState_Verita+0x8fc>)
 8003220:	6958      	ldr	r0, [r3, #20]
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <GrandState_Verita+0x918>)
 8003224:	2201      	movs	r2, #1
 8003226:	4935      	ldr	r1, [pc, #212]	; (80032fc <GrandState_Verita+0x914>)
 8003228:	f7ff facc 	bl	80027c4 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <GrandState_Verita+0x8fc>)
 800322e:	6998      	ldr	r0, [r3, #24]
 8003230:	4b34      	ldr	r3, [pc, #208]	; (8003304 <GrandState_Verita+0x91c>)
 8003232:	2201      	movs	r2, #1
 8003234:	4931      	ldr	r1, [pc, #196]	; (80032fc <GrandState_Verita+0x914>)
 8003236:	f7ff fac5 	bl	80027c4 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <GrandState_Verita+0x8fc>)
 800323c:	69d8      	ldr	r0, [r3, #28]
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <GrandState_Verita+0x920>)
 8003240:	2202      	movs	r2, #2
 8003242:	4932      	ldr	r1, [pc, #200]	; (800330c <GrandState_Verita+0x924>)
 8003244:	f7ff fabe 	bl	80027c4 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <GrandState_Verita+0x8fc>)
 800324a:	6a18      	ldr	r0, [r3, #32]
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <GrandState_Verita+0x928>)
 800324e:	2202      	movs	r2, #2
 8003250:	492e      	ldr	r1, [pc, #184]	; (800330c <GrandState_Verita+0x924>)
 8003252:	f7ff fab7 	bl	80027c4 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <GrandState_Verita+0x8fc>)
 8003258:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <GrandState_Verita+0x92c>)
 800325c:	2202      	movs	r2, #2
 800325e:	492b      	ldr	r1, [pc, #172]	; (800330c <GrandState_Verita+0x924>)
 8003260:	f7ff fab0 	bl	80027c4 <Compare_pin_32>

					VRB_CL.Mark.Flag_ger = 0;
 8003264:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <GrandState_Verita+0x8fc>)
 8003266:	2200      	movs	r2, #0
 8003268:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					VRB_CL.Mark.Flag_next = 0;
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <GrandState_Verita+0x8fc>)
 800326e:	2200      	movs	r2, #0
 8003270:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					GrandState = gpio_chk;
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <GrandState_Verita+0x930>)
 8003276:	220c      	movs	r2, #12
 8003278:	701a      	strb	r2, [r3, #0]
				}
			}
			break; //// pre_gpio_chk
 800327a:	f000 bc04 	b.w	8003a86 <GrandState_Verita+0x109e>

		case gpio_chk:
			stboxp.choice_set = bpoxy_def;
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <GrandState_Verita+0x8cc>)
 8003280:	2200      	movs	r2, #0
 8003282:	705a      	strb	r2, [r3, #1]



			if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <GrandState_Verita+0x934>)
 8003286:	789b      	ldrb	r3, [r3, #2]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 83fe 	beq.w	8003a8a <GrandState_Verita+0x10a2>
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <GrandState_Verita+0x8cc>)
 8003290:	789b      	ldrb	r3, [r3, #2]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 83f9 	bne.w	8003a8a <GrandState_Verita+0x10a2>
					GrandState = pre_lobby;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <GrandState_Verita+0x930>)
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
					k_flag.cnt = 0;
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <GrandState_Verita+0x934>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	709a      	strb	r2, [r3, #2]
					HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032aa:	481d      	ldr	r0, [pc, #116]	; (8003320 <GrandState_Verita+0x938>)
 80032ac:	f002 ff7c 	bl	80061a8 <HAL_GPIO_WritePin>
					}
			break; //gpio_chk
 80032b0:	e3eb      	b.n	8003a8a <GrandState_Verita+0x10a2>
 80032b2:	bf00      	nop
 80032b4:	2000084c 	.word	0x2000084c
 80032b8:	2000061c 	.word	0x2000061c
 80032bc:	0800e994 	.word	0x0800e994
 80032c0:	200006c0 	.word	0x200006c0
 80032c4:	2000023c 	.word	0x2000023c
 80032c8:	0800e9a4 	.word	0x0800e9a4
 80032cc:	0800e9ac 	.word	0x0800e9ac
 80032d0:	0800e9b0 	.word	0x0800e9b0
 80032d4:	0800e9b4 	.word	0x0800e9b4
 80032d8:	20000234 	.word	0x20000234
 80032dc:	0800e9c0 	.word	0x0800e9c0
 80032e0:	0800e9c8 	.word	0x0800e9c8
 80032e4:	20000728 	.word	0x20000728
 80032e8:	20000060 	.word	0x20000060
 80032ec:	20000008 	.word	0x20000008
 80032f0:	200000c0 	.word	0x200000c0
 80032f4:	20000120 	.word	0x20000120
 80032f8:	20000080 	.word	0x20000080
 80032fc:	20000020 	.word	0x20000020
 8003300:	200000e0 	.word	0x200000e0
 8003304:	20000140 	.word	0x20000140
 8003308:	200000a0 	.word	0x200000a0
 800330c:	20000040 	.word	0x20000040
 8003310:	20000100 	.word	0x20000100
 8003314:	20000160 	.word	0x20000160
 8003318:	20000006 	.word	0x20000006
 800331c:	20000838 	.word	0x20000838
 8003320:	40020800 	.word	0x40020800

	case pre_monitor:
		stboxp.choice_set = bpoxy_def;
 8003324:	4ba8      	ldr	r3, [pc, #672]	; (80035c8 <GrandState_Verita+0xbe0>)
 8003326:	2200      	movs	r2, #0
 8003328:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 800332a:	2300      	movs	r3, #0
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	23d2      	movs	r3, #210	; 0xd2
 8003330:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003334:	211e      	movs	r1, #30
 8003336:	2000      	movs	r0, #0
 8003338:	f001 fa23 	bl	8004782 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_BLUE);
 800333c:	231f      	movs	r3, #31
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	231e      	movs	r3, #30
 8003342:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003346:	2100      	movs	r1, #0
 8003348:	2000      	movs	r0, #0
 800334a:	f001 fa1a 	bl	8004782 <ili9341_FillRect>

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003354:	489d      	ldr	r0, [pc, #628]	; (80035cc <GrandState_Verita+0xbe4>)
 8003356:	f002 ff27 	bl	80061a8 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"PWR_Monitor");
 800335a:	499d      	ldr	r1, [pc, #628]	; (80035d0 <GrandState_Verita+0xbe8>)
 800335c:	489d      	ldr	r0, [pc, #628]	; (80035d4 <GrandState_Verita+0xbec>)
 800335e:	f008 ff45 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8003362:	4b9d      	ldr	r3, [pc, #628]	; (80035d8 <GrandState_Verita+0xbf0>)
 8003364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a98      	ldr	r2, [pc, #608]	; (80035d4 <GrandState_Verita+0xbec>)
 8003372:	2105      	movs	r1, #5
 8003374:	203c      	movs	r0, #60	; 0x3c
 8003376:	f001 fbd8 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 800337a:	4998      	ldr	r1, [pc, #608]	; (80035dc <GrandState_Verita+0xbf4>)
 800337c:	4895      	ldr	r0, [pc, #596]	; (80035d4 <GrandState_Verita+0xbec>)
 800337e:	f008 ff35 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8003382:	4b97      	ldr	r3, [pc, #604]	; (80035e0 <GrandState_Verita+0xbf8>)
 8003384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003388:	9201      	str	r2, [sp, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	9200      	str	r2, [sp, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a90      	ldr	r2, [pc, #576]	; (80035d4 <GrandState_Verita+0xbec>)
 8003392:	21dc      	movs	r1, #220	; 0xdc
 8003394:	201e      	movs	r0, #30
 8003396:	f001 fbc8 	bl	8004b2a <ili9341_WriteStringNoBG>

		//sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
		//ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);

		sprintf(TextDispBuffer,"5Vin:");
 800339a:	4992      	ldr	r1, [pc, #584]	; (80035e4 <GrandState_Verita+0xbfc>)
 800339c:	488d      	ldr	r0, [pc, #564]	; (80035d4 <GrandState_Verita+0xbec>)
 800339e:	f008 ff25 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 80033a2:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <GrandState_Verita+0xbf8>)
 80033a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a8:	9201      	str	r2, [sp, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	9200      	str	r2, [sp, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a88      	ldr	r2, [pc, #544]	; (80035d4 <GrandState_Verita+0xbec>)
 80033b2:	2132      	movs	r1, #50	; 0x32
 80033b4:	200f      	movs	r0, #15
 80033b6:	f001 fbb8 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 80033ba:	498b      	ldr	r1, [pc, #556]	; (80035e8 <GrandState_Verita+0xc00>)
 80033bc:	4885      	ldr	r0, [pc, #532]	; (80035d4 <GrandState_Verita+0xbec>)
 80033be:	f008 ff15 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 80033c2:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <GrandState_Verita+0xbf8>)
 80033c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c8:	9201      	str	r2, [sp, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a80      	ldr	r2, [pc, #512]	; (80035d4 <GrandState_Verita+0xbec>)
 80033d2:	214b      	movs	r1, #75	; 0x4b
 80033d4:	200f      	movs	r0, #15
 80033d6:	f001 fba8 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 80033da:	4984      	ldr	r1, [pc, #528]	; (80035ec <GrandState_Verita+0xc04>)
 80033dc:	487d      	ldr	r0, [pc, #500]	; (80035d4 <GrandState_Verita+0xbec>)
 80033de:	f008 ff05 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 100, TextDispBuffer, Font16, cl_WHITE);
 80033e2:	4b7f      	ldr	r3, [pc, #508]	; (80035e0 <GrandState_Verita+0xbf8>)
 80033e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e8:	9201      	str	r2, [sp, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a78      	ldr	r2, [pc, #480]	; (80035d4 <GrandState_Verita+0xbec>)
 80033f2:	2164      	movs	r1, #100	; 0x64
 80033f4:	200f      	movs	r0, #15
 80033f6:	f001 fb98 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 80033fa:	497d      	ldr	r1, [pc, #500]	; (80035f0 <GrandState_Verita+0xc08>)
 80033fc:	4875      	ldr	r0, [pc, #468]	; (80035d4 <GrandState_Verita+0xbec>)
 80033fe:	f008 fef5 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 8003402:	4b77      	ldr	r3, [pc, #476]	; (80035e0 <GrandState_Verita+0xbf8>)
 8003404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003408:	9201      	str	r2, [sp, #4]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	9200      	str	r2, [sp, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <GrandState_Verita+0xbec>)
 8003412:	217d      	movs	r1, #125	; 0x7d
 8003414:	200f      	movs	r0, #15
 8003416:	f001 fb88 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR");
 800341a:	4976      	ldr	r1, [pc, #472]	; (80035f4 <GrandState_Verita+0xc0c>)
 800341c:	486d      	ldr	r0, [pc, #436]	; (80035d4 <GrandState_Verita+0xbec>)
 800341e:	f008 fee5 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 8003422:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <GrandState_Verita+0xbf8>)
 8003424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	9200      	str	r2, [sp, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a68      	ldr	r2, [pc, #416]	; (80035d4 <GrandState_Verita+0xbec>)
 8003432:	2196      	movs	r1, #150	; 0x96
 8003434:	200f      	movs	r0, #15
 8003436:	f001 fb78 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCU");
 800343a:	496f      	ldr	r1, [pc, #444]	; (80035f8 <GrandState_Verita+0xc10>)
 800343c:	4865      	ldr	r0, [pc, #404]	; (80035d4 <GrandState_Verita+0xbec>)
 800343e:	f008 fed5 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(60, 150, TextDispBuffer, Font12, cl_WHITE);
 8003442:	4b6e      	ldr	r3, [pc, #440]	; (80035fc <GrandState_Verita+0xc14>)
 8003444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003448:	9201      	str	r2, [sp, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	9200      	str	r2, [sp, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a60      	ldr	r2, [pc, #384]	; (80035d4 <GrandState_Verita+0xbec>)
 8003452:	2196      	movs	r1, #150	; 0x96
 8003454:	203c      	movs	r0, #60	; 0x3c
 8003456:	f001 fb68 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Brd");
 800345a:	4969      	ldr	r1, [pc, #420]	; (8003600 <GrandState_Verita+0xc18>)
 800345c:	485d      	ldr	r0, [pc, #372]	; (80035d4 <GrandState_Verita+0xbec>)
 800345e:	f008 fec5 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(60, 170, TextDispBuffer, Font12, cl_WHITE);
 8003462:	4b66      	ldr	r3, [pc, #408]	; (80035fc <GrandState_Verita+0xc14>)
 8003464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003468:	9201      	str	r2, [sp, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	9200      	str	r2, [sp, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <GrandState_Verita+0xbec>)
 8003472:	21aa      	movs	r1, #170	; 0xaa
 8003474:	203c      	movs	r0, #60	; 0x3c
 8003476:	f001 fb58 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCP3208");
 800347a:	4962      	ldr	r1, [pc, #392]	; (8003604 <GrandState_Verita+0xc1c>)
 800347c:	4855      	ldr	r0, [pc, #340]	; (80035d4 <GrandState_Verita+0xbec>)
 800347e:	f008 feb5 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(220, 40, TextDispBuffer, Font16, cl_WHITE);
 8003482:	4b57      	ldr	r3, [pc, #348]	; (80035e0 <GrandState_Verita+0xbf8>)
 8003484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003488:	9201      	str	r2, [sp, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	9200      	str	r2, [sp, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a50      	ldr	r2, [pc, #320]	; (80035d4 <GrandState_Verita+0xbec>)
 8003492:	2128      	movs	r1, #40	; 0x28
 8003494:	20dc      	movs	r0, #220	; 0xdc
 8003496:	f001 fb48 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 54, TextDispBuffer, Font12, cl_WHITE);
 800349a:	495b      	ldr	r1, [pc, #364]	; (8003608 <GrandState_Verita+0xc20>)
 800349c:	484d      	ldr	r0, [pc, #308]	; (80035d4 <GrandState_Verita+0xbec>)
 800349e:	f008 fea5 	bl	800c1ec <siprintf>
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <GrandState_Verita+0xc14>)
 80034a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a8:	9201      	str	r2, [sp, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a48      	ldr	r2, [pc, #288]	; (80035d4 <GrandState_Verita+0xbec>)
 80034b2:	2136      	movs	r1, #54	; 0x36
 80034b4:	2096      	movs	r0, #150	; 0x96
 80034b6:	f001 fb38 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 79, TextDispBuffer, Font12, cl_WHITE);
 80034ba:	4953      	ldr	r1, [pc, #332]	; (8003608 <GrandState_Verita+0xc20>)
 80034bc:	4845      	ldr	r0, [pc, #276]	; (80035d4 <GrandState_Verita+0xbec>)
 80034be:	f008 fe95 	bl	800c1ec <siprintf>
 80034c2:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <GrandState_Verita+0xc14>)
 80034c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034c8:	9201      	str	r2, [sp, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a40      	ldr	r2, [pc, #256]	; (80035d4 <GrandState_Verita+0xbec>)
 80034d2:	214f      	movs	r1, #79	; 0x4f
 80034d4:	2096      	movs	r0, #150	; 0x96
 80034d6:	f001 fb28 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 104, TextDispBuffer, Font12, cl_WHITE);
 80034da:	494c      	ldr	r1, [pc, #304]	; (800360c <GrandState_Verita+0xc24>)
 80034dc:	483d      	ldr	r0, [pc, #244]	; (80035d4 <GrandState_Verita+0xbec>)
 80034de:	f008 fe85 	bl	800c1ec <siprintf>
 80034e2:	4b46      	ldr	r3, [pc, #280]	; (80035fc <GrandState_Verita+0xc14>)
 80034e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e8:	9201      	str	r2, [sp, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	9200      	str	r2, [sp, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a38      	ldr	r2, [pc, #224]	; (80035d4 <GrandState_Verita+0xbec>)
 80034f2:	2168      	movs	r1, #104	; 0x68
 80034f4:	2096      	movs	r0, #150	; 0x96
 80034f6:	f001 fb18 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 129, TextDispBuffer, Font12, cl_WHITE);
 80034fa:	4944      	ldr	r1, [pc, #272]	; (800360c <GrandState_Verita+0xc24>)
 80034fc:	4835      	ldr	r0, [pc, #212]	; (80035d4 <GrandState_Verita+0xbec>)
 80034fe:	f008 fe75 	bl	800c1ec <siprintf>
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <GrandState_Verita+0xc14>)
 8003504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003508:	9201      	str	r2, [sp, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	9200      	str	r2, [sp, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <GrandState_Verita+0xbec>)
 8003512:	2181      	movs	r1, #129	; 0x81
 8003514:	2096      	movs	r0, #150	; 0x96
 8003516:	f001 fb08 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 154, TextDispBuffer, Font12, cl_WHITE);
 800351a:	493d      	ldr	r1, [pc, #244]	; (8003610 <GrandState_Verita+0xc28>)
 800351c:	482d      	ldr	r0, [pc, #180]	; (80035d4 <GrandState_Verita+0xbec>)
 800351e:	f008 fe65 	bl	800c1ec <siprintf>
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <GrandState_Verita+0xc14>)
 8003524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003528:	9201      	str	r2, [sp, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	9200      	str	r2, [sp, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a28      	ldr	r2, [pc, #160]	; (80035d4 <GrandState_Verita+0xbec>)
 8003532:	219a      	movs	r1, #154	; 0x9a
 8003534:	20aa      	movs	r0, #170	; 0xaa
 8003536:	f001 faf8 	bl	8004b2a <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 174, TextDispBuffer, Font12, cl_WHITE);
 800353a:	4935      	ldr	r1, [pc, #212]	; (8003610 <GrandState_Verita+0xc28>)
 800353c:	4825      	ldr	r0, [pc, #148]	; (80035d4 <GrandState_Verita+0xbec>)
 800353e:	f008 fe55 	bl	800c1ec <siprintf>
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <GrandState_Verita+0xc14>)
 8003544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003548:	9201      	str	r2, [sp, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	9200      	str	r2, [sp, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <GrandState_Verita+0xbec>)
 8003552:	21ae      	movs	r1, #174	; 0xae
 8003554:	20aa      	movs	r0, #170	; 0xaa
 8003556:	f001 fae8 	bl	8004b2a <ili9341_WriteStringNoBG>

		for(register int t = 0; t < 7; t++){
 800355a:	2400      	movs	r4, #0
 800355c:	e018      	b.n	8003590 <GrandState_Verita+0xba8>
			sprintf(TextDispBuffer,"CH%d",t);
 800355e:	4622      	mov	r2, r4
 8003560:	492c      	ldr	r1, [pc, #176]	; (8003614 <GrandState_Verita+0xc2c>)
 8003562:	481c      	ldr	r0, [pc, #112]	; (80035d4 <GrandState_Verita+0xbec>)
 8003564:	f008 fe42 	bl	800c1ec <siprintf>
			ili9341_WriteStringNoBG(220, 65 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 8003568:	b2a3      	uxth	r3, r4
 800356a:	461a      	mov	r2, r3
 800356c:	0052      	lsls	r2, r2, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	b29b      	uxth	r3, r3
 8003574:	3341      	adds	r3, #65	; 0x41
 8003576:	b299      	uxth	r1, r3
 8003578:	4b20      	ldr	r3, [pc, #128]	; (80035fc <GrandState_Verita+0xc14>)
 800357a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800357e:	9201      	str	r2, [sp, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	9200      	str	r2, [sp, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <GrandState_Verita+0xbec>)
 8003588:	20dc      	movs	r0, #220	; 0xdc
 800358a:	f001 face 	bl	8004b2a <ili9341_WriteStringNoBG>
		for(register int t = 0; t < 7; t++){
 800358e:	3401      	adds	r4, #1
 8003590:	2c06      	cmp	r4, #6
 8003592:	dde4      	ble.n	800355e <GrandState_Verita+0xb76>
		}

		sprintf(TextDispBuffer,"MCU_Cl_Temp:");
 8003594:	4920      	ldr	r1, [pc, #128]	; (8003618 <GrandState_Verita+0xc30>)
 8003596:	480f      	ldr	r0, [pc, #60]	; (80035d4 <GrandState_Verita+0xbec>)
 8003598:	f008 fe28 	bl	800c1ec <siprintf>
		ili9341_WriteString(20, 190, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <GrandState_Verita+0xc14>)
 800359e:	2200      	movs	r2, #0
 80035a0:	9202      	str	r2, [sp, #8]
 80035a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a6:	9201      	str	r2, [sp, #4]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	9200      	str	r2, [sp, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <GrandState_Verita+0xbec>)
 80035b0:	21be      	movs	r1, #190	; 0xbe
 80035b2:	2014      	movs	r0, #20
 80035b4:	f001 fa6c 	bl	8004a90 <ili9341_WriteString>

		k_flag.cnt = 0; //// prevent over state jump
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <GrandState_Verita+0xc34>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	709a      	strb	r2, [r3, #2]
		GrandState = monitor;
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <GrandState_Verita+0xc38>)
 80035c0:	220a      	movs	r2, #10
 80035c2:	701a      	strb	r2, [r3, #0]
		break; //// pre monitor
 80035c4:	e266      	b.n	8003a94 <GrandState_Verita+0x10ac>
 80035c6:	bf00      	nop
 80035c8:	2000084c 	.word	0x2000084c
 80035cc:	40020800 	.word	0x40020800
 80035d0:	0800e8b0 	.word	0x0800e8b0
 80035d4:	200006c0 	.word	0x200006c0
 80035d8:	2000023c 	.word	0x2000023c
 80035dc:	0800e930 	.word	0x0800e930
 80035e0:	20000234 	.word	0x20000234
 80035e4:	0800e8fc 	.word	0x0800e8fc
 80035e8:	0800e904 	.word	0x0800e904
 80035ec:	0800e920 	.word	0x0800e920
 80035f0:	0800e918 	.word	0x0800e918
 80035f4:	0800e9d4 	.word	0x0800e9d4
 80035f8:	0800e9d8 	.word	0x0800e9d8
 80035fc:	2000022c 	.word	0x2000022c
 8003600:	0800e9dc 	.word	0x0800e9dc
 8003604:	0800e9e0 	.word	0x0800e9e0
 8003608:	0800e928 	.word	0x0800e928
 800360c:	0800e92c 	.word	0x0800e92c
 8003610:	0800e9e8 	.word	0x0800e9e8
 8003614:	0800e9ec 	.word	0x0800e9ec
 8003618:	0800e9f4 	.word	0x0800e9f4
 800361c:	20000838 	.word	0x20000838
 8003620:	20000006 	.word	0x20000006


	case monitor:
		stboxp.choice_set = bpoxy_def;
 8003624:	4b8f      	ldr	r3, [pc, #572]	; (8003864 <GrandState_Verita+0xe7c>)
 8003626:	2200      	movs	r2, #0
 8003628:	705a      	strb	r2, [r3, #1]
		simple_scr();
 800362a:	f7fe ff87 	bl	800253c <simple_scr>

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 800362e:	4b8e      	ldr	r3, [pc, #568]	; (8003868 <GrandState_Verita+0xe80>)
 8003630:	8a1b      	ldrh	r3, [r3, #16]
 8003632:	461a      	mov	r2, r3
 8003634:	498d      	ldr	r1, [pc, #564]	; (800386c <GrandState_Verita+0xe84>)
 8003636:	488e      	ldr	r0, [pc, #568]	; (8003870 <GrandState_Verita+0xe88>)
 8003638:	f008 fdd8 	bl	800c1ec <siprintf>
		if(inatb.Bus_V < 2000){
 800363c:	4b8a      	ldr	r3, [pc, #552]	; (8003868 <GrandState_Verita+0xe80>)
 800363e:	8a1b      	ldrh	r3, [r3, #16]
 8003640:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003644:	d20e      	bcs.n	8003664 <GrandState_Verita+0xc7c>
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8003646:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <GrandState_Verita+0xe8c>)
 8003648:	2200      	movs	r2, #0
 800364a:	9202      	str	r2, [sp, #8]
 800364c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003650:	9201      	str	r2, [sp, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a85      	ldr	r2, [pc, #532]	; (8003870 <GrandState_Verita+0xe88>)
 800365a:	2132      	movs	r1, #50	; 0x32
 800365c:	205a      	movs	r0, #90	; 0x5a
 800365e:	f001 fa17 	bl	8004a90 <ili9341_WriteString>
 8003662:	e00d      	b.n	8003680 <GrandState_Verita+0xc98>
		}else{
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8003664:	4b83      	ldr	r3, [pc, #524]	; (8003874 <GrandState_Verita+0xe8c>)
 8003666:	2200      	movs	r2, #0
 8003668:	9202      	str	r2, [sp, #8]
 800366a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800366e:	9201      	str	r2, [sp, #4]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	9200      	str	r2, [sp, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7e      	ldr	r2, [pc, #504]	; (8003870 <GrandState_Verita+0xe88>)
 8003678:	2132      	movs	r1, #50	; 0x32
 800367a:	205a      	movs	r0, #90	; 0x5a
 800367c:	f001 fa08 	bl	8004a90 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 8003680:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <GrandState_Verita+0xe90>)
 8003682:	8a1b      	ldrh	r3, [r3, #16]
 8003684:	461a      	mov	r2, r3
 8003686:	4979      	ldr	r1, [pc, #484]	; (800386c <GrandState_Verita+0xe84>)
 8003688:	4879      	ldr	r0, [pc, #484]	; (8003870 <GrandState_Verita+0xe88>)
 800368a:	f008 fdaf 	bl	800c1ec <siprintf>
		if(inata.Bus_V < 2000){
 800368e:	4b7a      	ldr	r3, [pc, #488]	; (8003878 <GrandState_Verita+0xe90>)
 8003690:	8a1b      	ldrh	r3, [r3, #16]
 8003692:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003696:	d20e      	bcs.n	80036b6 <GrandState_Verita+0xcce>
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <GrandState_Verita+0xe8c>)
 800369a:	2200      	movs	r2, #0
 800369c:	9202      	str	r2, [sp, #8]
 800369e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036a2:	9201      	str	r2, [sp, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	9200      	str	r2, [sp, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a71      	ldr	r2, [pc, #452]	; (8003870 <GrandState_Verita+0xe88>)
 80036ac:	214b      	movs	r1, #75	; 0x4b
 80036ae:	205a      	movs	r0, #90	; 0x5a
 80036b0:	f001 f9ee 	bl	8004a90 <ili9341_WriteString>
 80036b4:	e00d      	b.n	80036d2 <GrandState_Verita+0xcea>
		}else{
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 80036b6:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <GrandState_Verita+0xe8c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	9202      	str	r2, [sp, #8]
 80036bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036c0:	9201      	str	r2, [sp, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	9200      	str	r2, [sp, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a69      	ldr	r2, [pc, #420]	; (8003870 <GrandState_Verita+0xe88>)
 80036ca:	214b      	movs	r1, #75	; 0x4b
 80036cc:	205a      	movs	r0, #90	; 0x5a
 80036ce:	f001 f9df 	bl	8004a90 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 80036d2:	4b69      	ldr	r3, [pc, #420]	; (8003878 <GrandState_Verita+0xe90>)
 80036d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036d8:	461a      	mov	r2, r3
 80036da:	4964      	ldr	r1, [pc, #400]	; (800386c <GrandState_Verita+0xe84>)
 80036dc:	4864      	ldr	r0, [pc, #400]	; (8003870 <GrandState_Verita+0xe88>)
 80036de:	f008 fd85 	bl	800c1ec <siprintf>
		ili9341_WriteString(90, 100, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80036e2:	4b64      	ldr	r3, [pc, #400]	; (8003874 <GrandState_Verita+0xe8c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80036ec:	9201      	str	r2, [sp, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	9200      	str	r2, [sp, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a5e      	ldr	r2, [pc, #376]	; (8003870 <GrandState_Verita+0xe88>)
 80036f6:	2164      	movs	r1, #100	; 0x64
 80036f8:	205a      	movs	r0, #90	; 0x5a
 80036fa:	f001 f9c9 	bl	8004a90 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 80036fe:	4b5a      	ldr	r3, [pc, #360]	; (8003868 <GrandState_Verita+0xe80>)
 8003700:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003704:	461a      	mov	r2, r3
 8003706:	4959      	ldr	r1, [pc, #356]	; (800386c <GrandState_Verita+0xe84>)
 8003708:	4859      	ldr	r0, [pc, #356]	; (8003870 <GrandState_Verita+0xe88>)
 800370a:	f008 fd6f 	bl	800c1ec <siprintf>
		ili9341_WriteString(90, 125, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <GrandState_Verita+0xe8c>)
 8003710:	2200      	movs	r2, #0
 8003712:	9202      	str	r2, [sp, #8]
 8003714:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003718:	9201      	str	r2, [sp, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a53      	ldr	r2, [pc, #332]	; (8003870 <GrandState_Verita+0xe88>)
 8003722:	217d      	movs	r1, #125	; 0x7d
 8003724:	205a      	movs	r0, #90	; 0x5a
 8003726:	f001 f9b3 	bl	8004a90 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4.1f", inata.POWER);
 800372a:	4b53      	ldr	r3, [pc, #332]	; (8003878 <GrandState_Verita+0xe90>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc ff12 	bl	8000558 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4950      	ldr	r1, [pc, #320]	; (800387c <GrandState_Verita+0xe94>)
 800373a:	484d      	ldr	r0, [pc, #308]	; (8003870 <GrandState_Verita+0xe88>)
 800373c:	f008 fd56 	bl	800c1ec <siprintf>
		ili9341_WriteString(95, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <GrandState_Verita+0xe8c>)
 8003742:	2200      	movs	r2, #0
 8003744:	9202      	str	r2, [sp, #8]
 8003746:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 800374a:	9201      	str	r2, [sp, #4]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	9200      	str	r2, [sp, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a47      	ldr	r2, [pc, #284]	; (8003870 <GrandState_Verita+0xe88>)
 8003754:	2196      	movs	r1, #150	; 0x96
 8003756:	205f      	movs	r0, #95	; 0x5f
 8003758:	f001 f99a 	bl	8004a90 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4.1f", inatb.POWER);
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <GrandState_Verita+0xe80>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fc fef9 	bl	8000558 <__aeabi_f2d>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4944      	ldr	r1, [pc, #272]	; (800387c <GrandState_Verita+0xe94>)
 800376c:	4840      	ldr	r0, [pc, #256]	; (8003870 <GrandState_Verita+0xe88>)
 800376e:	f008 fd3d 	bl	800c1ec <siprintf>
		ili9341_WriteString(95, 170, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8003772:	4b40      	ldr	r3, [pc, #256]	; (8003874 <GrandState_Verita+0xe8c>)
 8003774:	2200      	movs	r2, #0
 8003776:	9202      	str	r2, [sp, #8]
 8003778:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 800377c:	9201      	str	r2, [sp, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	9200      	str	r2, [sp, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <GrandState_Verita+0xe88>)
 8003786:	21aa      	movs	r1, #170	; 0xaa
 8003788:	205f      	movs	r0, #95	; 0x5f
 800378a:	f001 f981 	bl	8004a90 <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		ili9341_FillRect(250, 65, 30, 84, cl_BLACK);
 800378e:	2300      	movs	r3, #0
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2354      	movs	r3, #84	; 0x54
 8003794:	221e      	movs	r2, #30
 8003796:	2141      	movs	r1, #65	; 0x41
 8003798:	20fa      	movs	r0, #250	; 0xfa
 800379a:	f000 fff2 	bl	8004782 <ili9341_FillRect>
		for(register int t = 0; t < 7; t++){
 800379e:	2400      	movs	r4, #0
 80037a0:	e01b      	b.n	80037da <GrandState_Verita+0xdf2>
			sprintf(TextDispBuffer,"%d",mcp_read.raw[t]);
 80037a2:	4b37      	ldr	r3, [pc, #220]	; (8003880 <GrandState_Verita+0xe98>)
 80037a4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80037a8:	461a      	mov	r2, r3
 80037aa:	4936      	ldr	r1, [pc, #216]	; (8003884 <GrandState_Verita+0xe9c>)
 80037ac:	4830      	ldr	r0, [pc, #192]	; (8003870 <GrandState_Verita+0xe88>)
 80037ae:	f008 fd1d 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(250, 65 + (12*t), TextDispBuffer, Font12, cl_WHITE);
 80037b2:	b2a3      	uxth	r3, r4
 80037b4:	461a      	mov	r2, r3
 80037b6:	0052      	lsls	r2, r2, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3341      	adds	r3, #65	; 0x41
 80037c0:	b299      	uxth	r1, r3
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <GrandState_Verita+0xea0>)
 80037c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c8:	9201      	str	r2, [sp, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	9200      	str	r2, [sp, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a27      	ldr	r2, [pc, #156]	; (8003870 <GrandState_Verita+0xe88>)
 80037d2:	20fa      	movs	r0, #250	; 0xfa
 80037d4:	f001 f9a9 	bl	8004b2a <ili9341_WriteStringNoBG>
		for(register int t = 0; t < 7; t++){
 80037d8:	3401      	adds	r4, #1
 80037da:	2c06      	cmp	r4, #6
 80037dc:	dde1      	ble.n	80037a2 <GrandState_Verita+0xdba>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.1f C", client_temp_mcuCC);
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <GrandState_Verita+0xea4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc feb8 	bl	8000558 <__aeabi_f2d>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4928      	ldr	r1, [pc, #160]	; (8003890 <GrandState_Verita+0xea8>)
 80037ee:	4820      	ldr	r0, [pc, #128]	; (8003870 <GrandState_Verita+0xe88>)
 80037f0:	f008 fcfc 	bl	800c1ec <siprintf>
			if(client_temp_mcuCC < 65){
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <GrandState_Verita+0xea4>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003894 <GrandState_Verita+0xeac>
 80037fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	d50e      	bpl.n	8003826 <GrandState_Verita+0xe3e>
				ili9341_WriteString(120, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <GrandState_Verita+0xe8c>)
 800380a:	2200      	movs	r2, #0
 800380c:	9202      	str	r2, [sp, #8]
 800380e:	f24c 6218 	movw	r2, #50712	; 0xc618
 8003812:	9201      	str	r2, [sp, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	9200      	str	r2, [sp, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a15      	ldr	r2, [pc, #84]	; (8003870 <GrandState_Verita+0xe88>)
 800381c:	21be      	movs	r1, #190	; 0xbe
 800381e:	2078      	movs	r0, #120	; 0x78
 8003820:	f001 f936 	bl	8004a90 <ili9341_WriteString>
 8003824:	e00d      	b.n	8003842 <GrandState_Verita+0xe5a>
			}else{
				ili9341_WriteString(120, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <GrandState_Verita+0xe8c>)
 8003828:	2200      	movs	r2, #0
 800382a:	9202      	str	r2, [sp, #8]
 800382c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003830:	9201      	str	r2, [sp, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	9200      	str	r2, [sp, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <GrandState_Verita+0xe88>)
 800383a:	21be      	movs	r1, #190	; 0xbe
 800383c:	2078      	movs	r0, #120	; 0x78
 800383e:	f001 f927 	bl	8004a90 <ili9341_WriteString>
			}


		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <GrandState_Verita+0xeb0>)
 8003844:	789b      	ldrb	r3, [r3, #2]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8121 	beq.w	8003a8e <GrandState_Verita+0x10a6>
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <GrandState_Verita+0xe7c>)
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	f040 811c 	bne.w	8003a8e <GrandState_Verita+0x10a6>
			GrandState = pre_lobby;
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <GrandState_Verita+0xeb4>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <GrandState_Verita+0xeb0>)
 800385e:	2200      	movs	r2, #0
 8003860:	709a      	strb	r2, [r3, #2]
			}
		break; // monitor
 8003862:	e114      	b.n	8003a8e <GrandState_Verita+0x10a6>
 8003864:	2000084c 	.word	0x2000084c
 8003868:	200007b4 	.word	0x200007b4
 800386c:	0800ea04 	.word	0x0800ea04
 8003870:	200006c0 	.word	0x200006c0
 8003874:	20000234 	.word	0x20000234
 8003878:	2000079c 	.word	0x2000079c
 800387c:	0800ea08 	.word	0x0800ea08
 8003880:	200007cc 	.word	0x200007cc
 8003884:	0800ea10 	.word	0x0800ea10
 8003888:	2000022c 	.word	0x2000022c
 800388c:	20000798 	.word	0x20000798
 8003890:	0800ea14 	.word	0x0800ea14
 8003894:	42820000 	.word	0x42820000
 8003898:	20000838 	.word	0x20000838
 800389c:	20000006 	.word	0x20000006


	case pre_danger:
		stboxp.choice_set = bpoxy_def;
 80038a0:	4b7e      	ldr	r3, [pc, #504]	; (8003a9c <GrandState_Verita+0x10b4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80038a6:	2300      	movs	r3, #0
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	23d2      	movs	r3, #210	; 0xd2
 80038ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038b0:	211e      	movs	r1, #30
 80038b2:	2000      	movs	r0, #0
 80038b4:	f000 ff65 	bl	8004782 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_RED);
 80038b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	231e      	movs	r3, #30
 80038c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038c4:	2100      	movs	r1, #0
 80038c6:	2000      	movs	r0, #0
 80038c8:	f000 ff5b 	bl	8004782 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Danger!!!");
 80038cc:	4974      	ldr	r1, [pc, #464]	; (8003aa0 <GrandState_Verita+0x10b8>)
 80038ce:	4875      	ldr	r0, [pc, #468]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80038d0:	f008 fc8c 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(105, 5, TextDispBuffer, Font20, cl_WHITE);
 80038d4:	4b74      	ldr	r3, [pc, #464]	; (8003aa8 <GrandState_Verita+0x10c0>)
 80038d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038da:	9201      	str	r2, [sp, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a70      	ldr	r2, [pc, #448]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80038e4:	2105      	movs	r1, #5
 80038e6:	2069      	movs	r0, #105	; 0x69
 80038e8:	f001 f91f 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back to lobby");
 80038ec:	496f      	ldr	r1, [pc, #444]	; (8003aac <GrandState_Verita+0x10c4>)
 80038ee:	486d      	ldr	r0, [pc, #436]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80038f0:	f008 fc7c 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 80038f4:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <GrandState_Verita+0x10c8>)
 80038f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038fa:	9201      	str	r2, [sp, #4]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	9200      	str	r2, [sp, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a68      	ldr	r2, [pc, #416]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003904:	21dc      	movs	r1, #220	; 0xdc
 8003906:	201e      	movs	r0, #30
 8003908:	f001 f90f 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Overcurrent Detect!");
 800390c:	4969      	ldr	r1, [pc, #420]	; (8003ab4 <GrandState_Verita+0x10cc>)
 800390e:	4865      	ldr	r0, [pc, #404]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003910:	f008 fc6c 	bl	800c1ec <siprintf>
		ili9341_WriteStringNoBG(40, 70, TextDispBuffer, Font20, cl_WHITE);
 8003914:	4b64      	ldr	r3, [pc, #400]	; (8003aa8 <GrandState_Verita+0x10c0>)
 8003916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800391a:	9201      	str	r2, [sp, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	9200      	str	r2, [sp, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a60      	ldr	r2, [pc, #384]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003924:	2146      	movs	r1, #70	; 0x46
 8003926:	2028      	movs	r0, #40	; 0x28
 8003928:	f001 f8ff 	bl	8004b2a <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 800392c:	4962      	ldr	r1, [pc, #392]	; (8003ab8 <GrandState_Verita+0x10d0>)
 800392e:	485d      	ldr	r0, [pc, #372]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003930:	f008 fc5c 	bl	800c1ec <siprintf>
		ili9341_WriteString(20, 100, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8003934:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <GrandState_Verita+0x10c8>)
 8003936:	2200      	movs	r2, #0
 8003938:	9202      	str	r2, [sp, #8]
 800393a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393e:	9201      	str	r2, [sp, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	9200      	str	r2, [sp, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a57      	ldr	r2, [pc, #348]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003948:	2164      	movs	r1, #100	; 0x64
 800394a:	2014      	movs	r0, #20
 800394c:	f001 f8a0 	bl	8004a90 <ili9341_WriteString>

		sprintf(TextDispBuffer,"I Brd:");
 8003950:	495a      	ldr	r1, [pc, #360]	; (8003abc <GrandState_Verita+0x10d4>)
 8003952:	4854      	ldr	r0, [pc, #336]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003954:	f008 fc4a 	bl	800c1ec <siprintf>
		ili9341_WriteString(20, 130, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8003958:	4b55      	ldr	r3, [pc, #340]	; (8003ab0 <GrandState_Verita+0x10c8>)
 800395a:	2200      	movs	r2, #0
 800395c:	9202      	str	r2, [sp, #8]
 800395e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003962:	9201      	str	r2, [sp, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	9200      	str	r2, [sp, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a4e      	ldr	r2, [pc, #312]	; (8003aa4 <GrandState_Verita+0x10bc>)
 800396c:	2182      	movs	r1, #130	; 0x82
 800396e:	2014      	movs	r0, #20
 8003970:	f001 f88e 	bl	8004a90 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8003974:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <GrandState_Verita+0x10d8>)
 8003976:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800397a:	461a      	mov	r2, r3
 800397c:	4951      	ldr	r1, [pc, #324]	; (8003ac4 <GrandState_Verita+0x10dc>)
 800397e:	4849      	ldr	r0, [pc, #292]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003980:	f008 fc34 	bl	800c1ec <siprintf>
		if(inata.CURRENT >= Current_limit_mA){
 8003984:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <GrandState_Verita+0x10d8>)
 8003986:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800398a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800398e:	db1e      	blt.n	80039ce <GrandState_Verita+0xfe6>
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <GrandState_Verita+0x10c0>)
 8003992:	2200      	movs	r2, #0
 8003994:	9202      	str	r2, [sp, #8]
 8003996:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800399a:	9201      	str	r2, [sp, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	9200      	str	r2, [sp, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80039a4:	2164      	movs	r1, #100	; 0x64
 80039a6:	2078      	movs	r0, #120	; 0x78
 80039a8:	f001 f872 	bl	8004a90 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteStringNoBG(220, 100, TextDispBuffer, Font20, cl_RED);
 80039ac:	4946      	ldr	r1, [pc, #280]	; (8003ac8 <GrandState_Verita+0x10e0>)
 80039ae:	483d      	ldr	r0, [pc, #244]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80039b0:	f008 fc1c 	bl	800c1ec <siprintf>
 80039b4:	4b3c      	ldr	r3, [pc, #240]	; (8003aa8 <GrandState_Verita+0x10c0>)
 80039b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80039ba:	9201      	str	r2, [sp, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	9200      	str	r2, [sp, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a38      	ldr	r2, [pc, #224]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80039c4:	2164      	movs	r1, #100	; 0x64
 80039c6:	20dc      	movs	r0, #220	; 0xdc
 80039c8:	f001 f8af 	bl	8004b2a <ili9341_WriteStringNoBG>
 80039cc:	e00d      	b.n	80039ea <GrandState_Verita+0x1002>
		}else{
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <GrandState_Verita+0x10c0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	9202      	str	r2, [sp, #8]
 80039d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d8:	9201      	str	r2, [sp, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	9200      	str	r2, [sp, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	2078      	movs	r0, #120	; 0x78
 80039e6:	f001 f853 	bl	8004a90 <ili9341_WriteString>
			}

		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <GrandState_Verita+0x10e4>)
 80039ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4934      	ldr	r1, [pc, #208]	; (8003ac4 <GrandState_Verita+0x10dc>)
 80039f4:	482b      	ldr	r0, [pc, #172]	; (8003aa4 <GrandState_Verita+0x10bc>)
 80039f6:	f008 fbf9 	bl	800c1ec <siprintf>
		if(inatb.CURRENT >= Current_limit_mA){
 80039fa:	4b34      	ldr	r3, [pc, #208]	; (8003acc <GrandState_Verita+0x10e4>)
 80039fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a00:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003a04:	db1e      	blt.n	8003a44 <GrandState_Verita+0x105c>
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <GrandState_Verita+0x10c0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	9202      	str	r2, [sp, #8]
 8003a0c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a10:	9201      	str	r2, [sp, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	9200      	str	r2, [sp, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003a1a:	2182      	movs	r1, #130	; 0x82
 8003a1c:	2078      	movs	r0, #120	; 0x78
 8003a1e:	f001 f837 	bl	8004a90 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteStringNoBG(220, 130, TextDispBuffer, Font20, cl_RED);
 8003a22:	4929      	ldr	r1, [pc, #164]	; (8003ac8 <GrandState_Verita+0x10e0>)
 8003a24:	481f      	ldr	r0, [pc, #124]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003a26:	f008 fbe1 	bl	800c1ec <siprintf>
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <GrandState_Verita+0x10c0>)
 8003a2c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a30:	9201      	str	r2, [sp, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	9200      	str	r2, [sp, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003a3a:	2182      	movs	r1, #130	; 0x82
 8003a3c:	20dc      	movs	r0, #220	; 0xdc
 8003a3e:	f001 f874 	bl	8004b2a <ili9341_WriteStringNoBG>
 8003a42:	e00d      	b.n	8003a60 <GrandState_Verita+0x1078>
		}else{
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <GrandState_Verita+0x10c0>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	9202      	str	r2, [sp, #8]
 8003a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4e:	9201      	str	r2, [sp, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	9200      	str	r2, [sp, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <GrandState_Verita+0x10bc>)
 8003a58:	2182      	movs	r1, #130	; 0x82
 8003a5a:	2078      	movs	r0, #120	; 0x78
 8003a5c:	f001 f818 	bl	8004a90 <ili9341_WriteString>
			}

		GrandState = danger;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <GrandState_Verita+0x10e8>)
 8003a62:	220e      	movs	r2, #14
 8003a64:	701a      	strb	r2, [r3, #0]
		break;
 8003a66:	e015      	b.n	8003a94 <GrandState_Verita+0x10ac>

	case danger:

		if(k_flag.cnt){ //// Back to lobby
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <GrandState_Verita+0x10ec>)
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <GrandState_Verita+0x10aa>
			GrandState = pre_lobby;
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <GrandState_Verita+0x10e8>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <GrandState_Verita+0x10ec>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	709a      	strb	r2, [r3, #2]
			}
		break;
 8003a7c:	e009      	b.n	8003a92 <GrandState_Verita+0x10aa>
		break; // lobby
 8003a7e:	bf00      	nop
 8003a80:	e008      	b.n	8003a94 <GrandState_Verita+0x10ac>
		break; //hw_chk
 8003a82:	bf00      	nop
 8003a84:	e006      	b.n	8003a94 <GrandState_Verita+0x10ac>
			break; //// pre_gpio_chk
 8003a86:	bf00      	nop
 8003a88:	e004      	b.n	8003a94 <GrandState_Verita+0x10ac>
			break; //gpio_chk
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <GrandState_Verita+0x10ac>
		break; // monitor
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <GrandState_Verita+0x10ac>
		break;
 8003a92:	bf00      	nop
	}
}
 8003a94:	bf00      	nop
 8003a96:	3704      	adds	r7, #4
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd90      	pop	{r4, r7, pc}
 8003a9c:	2000084c 	.word	0x2000084c
 8003aa0:	0800ea1c 	.word	0x0800ea1c
 8003aa4:	200006c0 	.word	0x200006c0
 8003aa8:	2000023c 	.word	0x2000023c
 8003aac:	0800ea28 	.word	0x0800ea28
 8003ab0:	20000234 	.word	0x20000234
 8003ab4:	0800ea38 	.word	0x0800ea38
 8003ab8:	0800e920 	.word	0x0800e920
 8003abc:	0800e918 	.word	0x0800e918
 8003ac0:	2000079c 	.word	0x2000079c
 8003ac4:	0800ea04 	.word	0x0800ea04
 8003ac8:	0800ea4c 	.word	0x0800ea4c
 8003acc:	200007b4 	.word	0x200007b4
 8003ad0:	20000006 	.word	0x20000006
 8003ad4:	20000838 	.word	0x20000838

08003ad8 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fd25 	bl	8000534 <__aeabi_i2d>
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <ADCTVolta+0x58>)
 8003af0:	f7fc feb4 	bl	800085c <__aeabi_ddiv>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	a30a      	add	r3, pc, #40	; (adr r3, 8003b28 <ADCTVolta+0x50>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fd81 	bl	8000608 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7fd f873 	bl	8000bf8 <__aeabi_d2f>
 8003b12:	4603      	mov	r3, r0
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	f3af 8000 	nop.w
 8003b28:	66666666 	.word	0x66666666
 8003b2c:	400a6666 	.word	0x400a6666
 8003b30:	40b00000 	.word	0x40b00000
 8003b34:	00000000 	.word	0x00000000

08003b38 <TempEquat>:
float TempEquat(float Vs){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fc fd08 	bl	8000558 <__aeabi_f2d>
 8003b48:	a314      	add	r3, pc, #80	; (adr r3, 8003b9c <TempEquat+0x64>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fba3 	bl	8000298 <__aeabi_dsub>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	a312      	add	r3, pc, #72	; (adr r3, 8003ba4 <TempEquat+0x6c>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fe7c 	bl	800085c <__aeabi_ddiv>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <TempEquat+0x60>)
 8003b72:	f7fc fb93 	bl	800029c <__adddf3>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7fd f83b 	bl	8000bf8 <__aeabi_d2f>
 8003b82:	4603      	mov	r3, r0
 8003b84:	ee07 3a90 	vmov	s15, r3
}
 8003b88:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	f3af 8000 	nop.w
 8003b98:	40390000 	.word	0x40390000
 8003b9c:	851eb852 	.word	0x851eb852
 8003ba0:	3fe851eb 	.word	0x3fe851eb
 8003ba4:	47ae147b 	.word	0x47ae147b
 8003ba8:	3f647ae1 	.word	0x3f647ae1

08003bac <gpio_BL_UART_activate>:

void gpio_BL_UART_activate(){
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
	 * PA9 PA10 is block 1, 2 in AFR[1]
	 * AF7(USART1) = 0x07 | AF0(System) = 0x0
	 *
	 * RM0383 P150 Fig 17 AFR Mux & P164 GPIOx_AFR register map
	 * */
	  UA_BL_Break = GPIOA->AFR[1];
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <gpio_BL_UART_activate+0x70>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bb8:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (1 * 4U));
 8003bba:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bc4:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (2 * 4U));
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bce:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bd0:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x7 << (1 * 4U));
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003bda:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bdc:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x7 << (2 * 4U));
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003be6:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003be8:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[1] = UA_BL_Break;
 8003bea:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <gpio_BL_UART_activate+0x70>)
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <gpio_BL_UART_activate+0x74>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6253      	str	r3, [r2, #36]	; 0x24

	  uint32_t tyyy = GPIOA->PUPDR;
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <gpio_BL_UART_activate+0x70>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	607b      	str	r3, [r7, #4]
	  tyyy &= ~( 0b11 << (9 * 2U));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003bfe:	607b      	str	r3, [r7, #4]
	  tyyy &= ~( 0b11 << (10 * 2U));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c06:	607b      	str	r3, [r7, #4]
	  tyyy |= ( GPIO_NOPULL << (9 * 2U));
	  tyyy |= ( GPIO_NOPULL << (10 * 2U));
	  GPIOA->PUPDR = tyyy;
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <gpio_BL_UART_activate+0x70>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60d3      	str	r3, [r2, #12]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	20000844 	.word	0x20000844

08003c24 <gpio_BL_UART_Deactivate>:

void gpio_BL_UART_Deactivate(){
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	/* Change AFRH (AFR[1]) for PA9 PA10 from Init UART to default GPIO, prevent UART High distrub the client
	 * PA9 PA10 is block 1, 2 in AFR[1]
	 * AF7(USART1) = 0x07 | AF0(System) = 0x0
	 * */
	  UA_BL_Break = GPIOA->AFR[1];
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <gpio_BL_UART_Deactivate+0x68>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c30:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (1 * 4U));
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c3c:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (2 * 4U));
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c48:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x0 << (1 * 4U));
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c50:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x0 << (2 * 4U));
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c58:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[1] = UA_BL_Break;
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <gpio_BL_UART_Deactivate+0x68>)
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <gpio_BL_UART_Deactivate+0x6c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6253      	str	r3, [r2, #36]	; 0x24

		 uint32_t tyyy = GPIOA->PUPDR;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <gpio_BL_UART_Deactivate+0x68>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	607b      	str	r3, [r7, #4]
		 tyyy &= ~( 0b11 << (9 * 2U));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003c6e:	607b      	str	r3, [r7, #4]
		 tyyy &= ~( 0b11 << (10 * 2U));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c76:	607b      	str	r3, [r7, #4]
		 tyyy |= ( GPIO_NOPULL << (9 * 2U));
		 tyyy |= ( GPIO_NOPULL << (10 * 2U));
		 GPIOA->PUPDR = tyyy;
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <gpio_BL_UART_Deactivate+0x68>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60d3      	str	r3, [r2, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	20000844 	.word	0x20000844

08003c94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_GPIO_EXTI_Callback+0x32>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003ca8:	2208      	movs	r2, #8
 8003caa:	701a      	strb	r2, [r3, #0]
		buzzr.priod_up = 250;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003cae:	22fa      	movs	r2, #250	; 0xfa
 8003cb0:	805a      	strh	r2, [r3, #2]
		buzzr.priod_dn = 100;
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003cb4:	2264      	movs	r2, #100	; 0x64
 8003cb6:	809a      	strh	r2, [r3, #4]
		buzzer_scream_cnt();
 8003cb8:	f7fe fe20 	bl	80028fc <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	21a1      	movs	r1, #161	; 0xa1
 8003cc0:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x50>)
 8003cc2:	f7fd fcb5 	bl	8001630 <Tx_UART_Verita_Command>
		//Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);

		}

	//// knob rotter button pressed
	if(GPIO_Pin == GPIO_PIN_7){
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	2b80      	cmp	r3, #128	; 0x80
 8003cca:	d105      	bne.n	8003cd8 <HAL_GPIO_EXTI_Callback+0x44>
		k_flag.cnt++;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_GPIO_EXTI_Callback+0x54>)
 8003cce:	789b      	ldrb	r3, [r3, #2]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <HAL_GPIO_EXTI_Callback+0x54>)
 8003cd6:	709a      	strb	r2, [r3, #2]
	}
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000820 	.word	0x20000820
 8003ce4:	2000061c 	.word	0x2000061c
 8003ce8:	20000838 	.word	0x20000838

08003cec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d106      	bne.n	8003d0a <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003d04:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 8003d06:	f7fe fdf9 	bl	80028fc <buzzer_scream_cnt>
	}
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2000054c 	.word	0x2000054c
 8003d18:	20000818 	.word	0x20000818

08003d1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VRB_CL); //// try using only 1 slot 9 Buffer
 8003d24:	4905      	ldr	r1, [pc, #20]	; (8003d3c <HAL_UART_RxCpltCallback+0x20>)
 8003d26:	4806      	ldr	r0, [pc, #24]	; (8003d40 <HAL_UART_RxCpltCallback+0x24>)
 8003d28:	f7fd fb12 	bl	8001350 <Rx_Verita_engine_callBak>
	Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_UART_RxCpltCallback+0x20>)
 8003d2e:	4805      	ldr	r0, [pc, #20]	; (8003d44 <HAL_UART_RxCpltCallback+0x28>)
 8003d30:	f7fd fc04 	bl	800153c <Tx_Rq_Verita_engine>
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000728 	.word	0x20000728
 8003d40:	2000078c 	.word	0x2000078c
 8003d44:	2000061c 	.word	0x2000061c

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4c:	b672      	cpsid	i
}
 8003d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <Error_Handler+0x8>
	...

08003d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d92:	2007      	movs	r0, #7
 8003d94:	f001 fc32 	bl	80055fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <HAL_I2C_MspInit+0xa4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d13c      	bne.n	8003e40 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_I2C_MspInit+0xa8>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <HAL_I2C_MspInit+0xa8>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_I2C_MspInit+0xa8>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003de8:	2312      	movs	r3, #18
 8003dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df0:	2303      	movs	r3, #3
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003df4:	2304      	movs	r3, #4
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4814      	ldr	r0, [pc, #80]	; (8003e50 <HAL_I2C_MspInit+0xac>)
 8003e00:	f002 f84e 	bl	8005ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_I2C_MspInit+0xa8>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_I2C_MspInit+0xa8>)
 8003e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e12:	6413      	str	r3, [r2, #64]	; 0x40
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_I2C_MspInit+0xa8>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	201f      	movs	r0, #31
 8003e26:	f001 fbf4 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e2a:	201f      	movs	r0, #31
 8003e2c:	f001 fc0d 	bl	800564a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2100      	movs	r1, #0
 8003e34:	2020      	movs	r0, #32
 8003e36:	f001 fbec 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003e3a:	2020      	movs	r0, #32
 8003e3c:	f001 fc05 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e40:	bf00      	nop
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40005400 	.word	0x40005400
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40020400 	.word	0x40020400

08003e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_SPI_MspInit+0x84>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d12c      	bne.n	8003ed0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003eae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ec0:	2306      	movs	r3, #6
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <HAL_SPI_MspInit+0x8c>)
 8003ecc:	f001 ffe8 	bl	8005ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003ed0:	bf00      	nop
 8003ed2:	3728      	adds	r7, #40	; 0x28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40003c00 	.word	0x40003c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020800 	.word	0x40020800

08003ee4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d12b      	bne.n	8003f5e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6313      	str	r3, [r2, #48]	; 0x30
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x88>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f3e:	23c0      	movs	r3, #192	; 0xc0
 8003f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	2302      	movs	r3, #2
 8003f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4619      	mov	r1, r3
 8003f58:	4805      	ldr	r0, [pc, #20]	; (8003f70 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003f5a:	f001 ffa1 	bl	8005ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f5e:	bf00      	nop
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40020000 	.word	0x40020000

08003f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <HAL_TIM_Base_MspInit+0x48>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d115      	bne.n	8003fb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	2019      	movs	r0, #25
 8003fa8:	f001 fb33 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fac:	2019      	movs	r0, #25
 8003fae:	f001 fb4c 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40023800 	.word	0x40023800

08003fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08e      	sub	sp, #56	; 0x38
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	; (80041b4 <HAL_UART_MspInit+0x1f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d135      	bne.n	8004052 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4a72      	ldr	r2, [pc, #456]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8003ff0:	f043 0310 	orr.w	r3, r3, #16
 8003ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff6:	4b70      	ldr	r3, [pc, #448]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a6b      	ldr	r2, [pc, #428]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b69      	ldr	r3, [pc, #420]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800401e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402c:	2303      	movs	r3, #3
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004030:	2307      	movs	r3, #7
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004038:	4619      	mov	r1, r3
 800403a:	4860      	ldr	r0, [pc, #384]	; (80041bc <HAL_UART_MspInit+0x1f8>)
 800403c:	f001 ff30 	bl	8005ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004040:	2200      	movs	r2, #0
 8004042:	2100      	movs	r1, #0
 8004044:	2025      	movs	r0, #37	; 0x25
 8004046:	f001 fae4 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800404a:	2025      	movs	r0, #37	; 0x25
 800404c:	f001 fafd 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004050:	e0ab      	b.n	80041aa <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5a      	ldr	r2, [pc, #360]	; (80041c0 <HAL_UART_MspInit+0x1fc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d12c      	bne.n	80040b6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406a:	6413      	str	r3, [r2, #64]	; 0x40
 800406c:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	4a4d      	ldr	r2, [pc, #308]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6313      	str	r3, [r2, #48]	; 0x30
 8004088:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004094:	230c      	movs	r3, #12
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a0:	2303      	movs	r3, #3
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040a4:	2307      	movs	r3, #7
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ac:	4619      	mov	r1, r3
 80040ae:	4843      	ldr	r0, [pc, #268]	; (80041bc <HAL_UART_MspInit+0x1f8>)
 80040b0:	f001 fef6 	bl	8005ea0 <HAL_GPIO_Init>
}
 80040b4:	e079      	b.n	80041aa <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a42      	ldr	r2, [pc, #264]	; (80041c4 <HAL_UART_MspInit+0x200>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d174      	bne.n	80041aa <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 80040ca:	f043 0320 	orr.w	r3, r3, #32
 80040ce:	6453      	str	r3, [r2, #68]	; 0x44
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a34      	ldr	r2, [pc, #208]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6313      	str	r3, [r2, #48]	; 0x30
 80040ec:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <HAL_UART_MspInit+0x1f4>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80040f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004106:	2303      	movs	r3, #3
 8004108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800410a:	2308      	movs	r3, #8
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004112:	4619      	mov	r1, r3
 8004114:	4829      	ldr	r0, [pc, #164]	; (80041bc <HAL_UART_MspInit+0x1f8>)
 8004116:	f001 fec3 	bl	8005ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800411a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004120:	2302      	movs	r3, #2
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004124:	2301      	movs	r3, #1
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004128:	2303      	movs	r3, #3
 800412a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800412c:	2308      	movs	r3, #8
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004134:	4619      	mov	r1, r3
 8004136:	4821      	ldr	r0, [pc, #132]	; (80041bc <HAL_UART_MspInit+0x1f8>)
 8004138:	f001 feb2 	bl	8005ea0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_UART_MspInit+0x204>)
 800413e:	4a23      	ldr	r2, [pc, #140]	; (80041cc <HAL_UART_MspInit+0x208>)
 8004140:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004144:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004148:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800414a:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <HAL_UART_MspInit+0x204>)
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004152:	2200      	movs	r2, #0
 8004154:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800415c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004160:	2200      	movs	r2, #0
 8004162:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004164:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004166:	2200      	movs	r2, #0
 8004168:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_UART_MspInit+0x204>)
 800416c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004170:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_UART_MspInit+0x204>)
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800417e:	4812      	ldr	r0, [pc, #72]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004180:	f001 fa7e 	bl	8005680 <HAL_DMA_Init>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800418a:	f7ff fddd 	bl	8003d48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
 8004194:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <HAL_UART_MspInit+0x204>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800419a:	2200      	movs	r2, #0
 800419c:	2100      	movs	r1, #0
 800419e:	2047      	movs	r0, #71	; 0x47
 80041a0:	f001 fa37 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80041a4:	2047      	movs	r0, #71	; 0x47
 80041a6:	f001 fa50 	bl	800564a <HAL_NVIC_EnableIRQ>
}
 80041aa:	bf00      	nop
 80041ac:	3738      	adds	r7, #56	; 0x38
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40011000 	.word	0x40011000
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40004400 	.word	0x40004400
 80041c4:	40011400 	.word	0x40011400
 80041c8:	20000660 	.word	0x20000660
 80041cc:	40026428 	.word	0x40026428

080041d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041d4:	e7fe      	b.n	80041d4 <NMI_Handler+0x4>

080041d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041da:	e7fe      	b.n	80041da <HardFault_Handler+0x4>

080041dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e0:	e7fe      	b.n	80041e0 <MemManage_Handler+0x4>

080041e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041e6:	e7fe      	b.n	80041e6 <BusFault_Handler+0x4>

080041e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041ec:	e7fe      	b.n	80041ec <UsageFault_Handler+0x4>

080041ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800420a:	b480      	push	{r7}
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800421c:	f001 f8da 	bl	80053d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}

08004224 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004228:	2080      	movs	r0, #128	; 0x80
 800422a:	f001 fff1 	bl	8006210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800423a:	f005 fe3e 	bl	8009eba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	2000054c 	.word	0x2000054c

08004248 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <I2C1_EV_IRQHandler+0x10>)
 800424e:	f002 fc5b 	bl	8006b08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000458 	.word	0x20000458

0800425c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <I2C1_ER_IRQHandler+0x10>)
 8004262:	f002 fdc2 	bl	8006dea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000458 	.word	0x20000458

08004270 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <USART1_IRQHandler+0x10>)
 8004276:	f006 fa2b 	bl	800a6d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000594 	.word	0x20000594

08004284 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004288:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800428c:	f001 ffc0 	bl	8006210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}

08004294 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <DMA2_Stream1_IRQHandler+0x10>)
 800429a:	f001 fb89 	bl	80059b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000660 	.word	0x20000660

080042a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80042ac:	4802      	ldr	r0, [pc, #8]	; (80042b8 <USART6_IRQHandler+0x10>)
 80042ae:	f006 fa0f 	bl	800a6d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000061c 	.word	0x2000061c

080042bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
	return 1;
 80042c0:	2301      	movs	r3, #1
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_kill>:

int _kill(int pid, int sig)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042d6:	f007 faed 	bl	800b8b4 <__errno>
 80042da:	4603      	mov	r3, r0
 80042dc:	2216      	movs	r2, #22
 80042de:	601a      	str	r2, [r3, #0]
	return -1;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_exit>:

void _exit (int status)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042f4:	f04f 31ff 	mov.w	r1, #4294967295
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ffe7 	bl	80042cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80042fe:	e7fe      	b.n	80042fe <_exit+0x12>

08004300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e00a      	b.n	8004328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004312:	f3af 8000 	nop.w
 8004316:	4601      	mov	r1, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	60ba      	str	r2, [r7, #8]
 800431e:	b2ca      	uxtb	r2, r1
 8004320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3301      	adds	r3, #1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	dbf0      	blt.n	8004312 <_read+0x12>
	}

return len;
 8004330:	687b      	ldr	r3, [r7, #4]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e009      	b.n	8004360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	60ba      	str	r2, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	dbf1      	blt.n	800434c <_write+0x12>
	}
	return len;
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <_close>:

int _close(int file)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
	return -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439a:	605a      	str	r2, [r3, #4]
	return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <_isatty>:

int _isatty(int file)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	return 1;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
	return 0;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <_sbrk+0x5c>)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <_sbrk+0x60>)
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_sbrk+0x64>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_sbrk+0x64>)
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <_sbrk+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_sbrk+0x64>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800440c:	f007 fa52 	bl	800b8b4 <__errno>
 8004410:	4603      	mov	r3, r0
 8004412:	220c      	movs	r2, #12
 8004414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e009      	b.n	8004430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <_sbrk+0x64>)
 800442c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20020000 	.word	0x20020000
 800443c:	00000400 	.word	0x00000400
 8004440:	20000858 	.word	0x20000858
 8004444:	20000878 	.word	0x20000878

08004448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <SystemInit+0x20>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <SystemInit+0x20>)
 8004454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8004470:	2001      	movs	r0, #1
 8004472:	f000 fe1c 	bl	80050ae <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8004476:	2011      	movs	r0, #17
 8004478:	f000 fea0 	bl	80051bc <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}

08004480 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8004484:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8004496:	23f0      	movs	r3, #240	; 0xf0
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80044aa:	4b52      	ldr	r3, [pc, #328]	; (80045f4 <ili9341_Init+0x150>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d115      	bne.n	80044e2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80044b6:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <ili9341_Init+0x150>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	4b4c      	ldr	r3, [pc, #304]	; (80045f4 <ili9341_Init+0x150>)
 80044c2:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <ili9341_Init+0x150>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80044d0:	f000 fdf8 	bl	80050c4 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80044d4:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <ili9341_Init+0x150>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4b45      	ldr	r3, [pc, #276]	; (80045f4 <ili9341_Init+0x150>)
 80044e0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80044e2:	200a      	movs	r0, #10
 80044e4:	f000 fdd8 	bl	8005098 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80044e8:	2001      	movs	r0, #1
 80044ea:	f000 fe67 	bl	80051bc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80044ee:	200a      	movs	r0, #10
 80044f0:	f000 fdd2 	bl	8005098 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80044f4:	2203      	movs	r2, #3
 80044f6:	4940      	ldr	r1, [pc, #256]	; (80045f8 <ili9341_Init+0x154>)
 80044f8:	20ef      	movs	r0, #239	; 0xef
 80044fa:	f000 fecd 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80044fe:	2203      	movs	r2, #3
 8004500:	493e      	ldr	r1, [pc, #248]	; (80045fc <ili9341_Init+0x158>)
 8004502:	20cf      	movs	r0, #207	; 0xcf
 8004504:	f000 fec8 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8004508:	2204      	movs	r2, #4
 800450a:	493d      	ldr	r1, [pc, #244]	; (8004600 <ili9341_Init+0x15c>)
 800450c:	20ed      	movs	r0, #237	; 0xed
 800450e:	f000 fec3 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8004512:	2203      	movs	r2, #3
 8004514:	493b      	ldr	r1, [pc, #236]	; (8004604 <ili9341_Init+0x160>)
 8004516:	20e8      	movs	r0, #232	; 0xe8
 8004518:	f000 febe 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800451c:	2205      	movs	r2, #5
 800451e:	493a      	ldr	r1, [pc, #232]	; (8004608 <ili9341_Init+0x164>)
 8004520:	20cb      	movs	r0, #203	; 0xcb
 8004522:	f000 feb9 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8004526:	2201      	movs	r2, #1
 8004528:	4938      	ldr	r1, [pc, #224]	; (800460c <ili9341_Init+0x168>)
 800452a:	20f7      	movs	r0, #247	; 0xf7
 800452c:	f000 feb4 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8004530:	2202      	movs	r2, #2
 8004532:	4937      	ldr	r1, [pc, #220]	; (8004610 <ili9341_Init+0x16c>)
 8004534:	20ea      	movs	r0, #234	; 0xea
 8004536:	f000 feaf 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800453a:	2201      	movs	r2, #1
 800453c:	4935      	ldr	r1, [pc, #212]	; (8004614 <ili9341_Init+0x170>)
 800453e:	20c0      	movs	r0, #192	; 0xc0
 8004540:	f000 feaa 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8004544:	2201      	movs	r2, #1
 8004546:	4934      	ldr	r1, [pc, #208]	; (8004618 <ili9341_Init+0x174>)
 8004548:	20c1      	movs	r0, #193	; 0xc1
 800454a:	f000 fea5 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800454e:	2202      	movs	r2, #2
 8004550:	4932      	ldr	r1, [pc, #200]	; (800461c <ili9341_Init+0x178>)
 8004552:	20c5      	movs	r0, #197	; 0xc5
 8004554:	f000 fea0 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8004558:	2201      	movs	r2, #1
 800455a:	4931      	ldr	r1, [pc, #196]	; (8004620 <ili9341_Init+0x17c>)
 800455c:	20c7      	movs	r0, #199	; 0xc7
 800455e:	f000 fe9b 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8004562:	2201      	movs	r2, #1
 8004564:	492f      	ldr	r1, [pc, #188]	; (8004624 <ili9341_Init+0x180>)
 8004566:	2037      	movs	r0, #55	; 0x37
 8004568:	f000 fe96 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800456c:	2201      	movs	r2, #1
 800456e:	492e      	ldr	r1, [pc, #184]	; (8004628 <ili9341_Init+0x184>)
 8004570:	203a      	movs	r0, #58	; 0x3a
 8004572:	f000 fe91 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8004576:	2202      	movs	r2, #2
 8004578:	492c      	ldr	r1, [pc, #176]	; (800462c <ili9341_Init+0x188>)
 800457a:	20b1      	movs	r0, #177	; 0xb1
 800457c:	f000 fe8c 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8004580:	2203      	movs	r2, #3
 8004582:	492b      	ldr	r1, [pc, #172]	; (8004630 <ili9341_Init+0x18c>)
 8004584:	20b6      	movs	r0, #182	; 0xb6
 8004586:	f000 fe87 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800458a:	2201      	movs	r2, #1
 800458c:	4925      	ldr	r1, [pc, #148]	; (8004624 <ili9341_Init+0x180>)
 800458e:	20f2      	movs	r0, #242	; 0xf2
 8004590:	f000 fe82 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8004594:	2201      	movs	r2, #1
 8004596:	4927      	ldr	r1, [pc, #156]	; (8004634 <ili9341_Init+0x190>)
 8004598:	2026      	movs	r0, #38	; 0x26
 800459a:	f000 fe7d 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800459e:	220f      	movs	r2, #15
 80045a0:	4925      	ldr	r1, [pc, #148]	; (8004638 <ili9341_Init+0x194>)
 80045a2:	20e0      	movs	r0, #224	; 0xe0
 80045a4:	f000 fe78 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80045a8:	220f      	movs	r2, #15
 80045aa:	4924      	ldr	r1, [pc, #144]	; (800463c <ili9341_Init+0x198>)
 80045ac:	20e1      	movs	r0, #225	; 0xe1
 80045ae:	f000 fe73 	bl	8005298 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80045b2:	2036      	movs	r0, #54	; 0x36
 80045b4:	f000 fe02 	bl	80051bc <LCD_IO_WriteCmd8>
 80045b8:	20e8      	movs	r0, #232	; 0xe8
 80045ba:	f000 fe1d 	bl	80051f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80045be:	2011      	movs	r0, #17
 80045c0:	f000 fdfc 	bl	80051bc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80045c4:	200a      	movs	r0, #10
 80045c6:	f000 fd67 	bl	8005098 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80045ca:	2300      	movs	r3, #0
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	23f0      	movs	r3, #240	; 0xf0
 80045d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045d4:	2100      	movs	r1, #0
 80045d6:	2000      	movs	r0, #0
 80045d8:	f000 f8d3 	bl	8004782 <ili9341_FillRect>
  LCD_Delay(10);
 80045dc:	200a      	movs	r0, #10
 80045de:	f000 fd5b 	bl	8005098 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80045e2:	2029      	movs	r0, #41	; 0x29
 80045e4:	f000 fdea 	bl	80051bc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80045e8:	200a      	movs	r0, #10
 80045ea:	f000 fd55 	bl	8005098 <LCD_Delay>
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	2000085c 	.word	0x2000085c
 80045f8:	0800ea54 	.word	0x0800ea54
 80045fc:	0800ea58 	.word	0x0800ea58
 8004600:	0800ea5c 	.word	0x0800ea5c
 8004604:	0800ea64 	.word	0x0800ea64
 8004608:	0800ea68 	.word	0x0800ea68
 800460c:	0800ea70 	.word	0x0800ea70
 8004610:	0800ea74 	.word	0x0800ea74
 8004614:	0800ea78 	.word	0x0800ea78
 8004618:	0800ea7c 	.word	0x0800ea7c
 800461c:	0800ea80 	.word	0x0800ea80
 8004620:	0800ea84 	.word	0x0800ea84
 8004624:	0800ea88 	.word	0x0800ea88
 8004628:	0800ea8c 	.word	0x0800ea8c
 800462c:	0800ea90 	.word	0x0800ea90
 8004630:	0800ea94 	.word	0x0800ea94
 8004634:	0800ea98 	.word	0x0800ea98
 8004638:	0800ea9c 	.word	0x0800ea9c
 800463c:	0800eaac 	.word	0x0800eaac

08004640 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
 800464a:	460b      	mov	r3, r1
 800464c:	80bb      	strh	r3, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8004652:	202a      	movs	r0, #42	; 0x2a
 8004654:	f000 fdb2 	bl	80051bc <LCD_IO_WriteCmd8>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	b29b      	uxth	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fdc9 	bl	80051f8 <LCD_IO_WriteData8>
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fdc4 	bl	80051f8 <LCD_IO_WriteData8>
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fdbd 	bl	80051f8 <LCD_IO_WriteData8>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fdb8 	bl	80051f8 <LCD_IO_WriteData8>
 8004688:	202b      	movs	r0, #43	; 0x2b
 800468a:	f000 fd97 	bl	80051bc <LCD_IO_WriteCmd8>
 800468e:	88bb      	ldrh	r3, [r7, #4]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	b29b      	uxth	r3, r3
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fdae 	bl	80051f8 <LCD_IO_WriteData8>
 800469c:	88bb      	ldrh	r3, [r7, #4]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fda9 	bl	80051f8 <LCD_IO_WriteData8>
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fda2 	bl	80051f8 <LCD_IO_WriteData8>
 80046b4:	88bb      	ldrh	r3, [r7, #4]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd9d 	bl	80051f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80046be:	202c      	movs	r0, #44	; 0x2c
 80046c0:	f000 fd7c 	bl	80051bc <LCD_IO_WriteCmd8>
 80046c4:	887b      	ldrh	r3, [r7, #2]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fdac 	bl	8005224 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	80fb      	strh	r3, [r7, #6]
 80046e6:	4603      	mov	r3, r0
 80046e8:	80bb      	strh	r3, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	807b      	strh	r3, [r7, #2]
 80046ee:	4613      	mov	r3, r2
 80046f0:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 80046f2:	202a      	movs	r0, #42	; 0x2a
 80046f4:	f000 fd62 	bl	80051bc <LCD_IO_WriteCmd8>
 80046f8:	88bb      	ldrh	r3, [r7, #4]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fd79 	bl	80051f8 <LCD_IO_WriteData8>
 8004706:	88bb      	ldrh	r3, [r7, #4]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fd74 	bl	80051f8 <LCD_IO_WriteData8>
 8004710:	88ba      	ldrh	r2, [r7, #4]
 8004712:	883b      	ldrh	r3, [r7, #0]
 8004714:	4413      	add	r3, r2
 8004716:	3b01      	subs	r3, #1
 8004718:	121b      	asrs	r3, r3, #8
 800471a:	b2db      	uxtb	r3, r3
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fd6b 	bl	80051f8 <LCD_IO_WriteData8>
 8004722:	88bb      	ldrh	r3, [r7, #4]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	883b      	ldrh	r3, [r7, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	4413      	add	r3, r2
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fd60 	bl	80051f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8004738:	202b      	movs	r0, #43	; 0x2b
 800473a:	f000 fd3f 	bl	80051bc <LCD_IO_WriteCmd8>
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	b29b      	uxth	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fd56 	bl	80051f8 <LCD_IO_WriteData8>
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fd51 	bl	80051f8 <LCD_IO_WriteData8>
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	b29b      	uxth	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd4a 	bl	80051f8 <LCD_IO_WriteData8>
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fd45 	bl	80051f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 800476e:	883a      	ldrh	r2, [r7, #0]
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	4619      	mov	r1, r3
 8004774:	202c      	movs	r0, #44	; 0x2c
 8004776:	f000 fd6b 	bl	8005250 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bd90      	pop	{r4, r7, pc}

08004782 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8004782:	b590      	push	{r4, r7, lr}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	461a      	mov	r2, r3
 8004790:	4623      	mov	r3, r4
 8004792:	80fb      	strh	r3, [r7, #6]
 8004794:	4603      	mov	r3, r0
 8004796:	80bb      	strh	r3, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
 800479c:	4613      	mov	r3, r2
 800479e:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80047a0:	202a      	movs	r0, #42	; 0x2a
 80047a2:	f000 fd0b 	bl	80051bc <LCD_IO_WriteCmd8>
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fd22 	bl	80051f8 <LCD_IO_WriteData8>
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fd1d 	bl	80051f8 <LCD_IO_WriteData8>
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	4413      	add	r3, r2
 80047c4:	3b01      	subs	r3, #1
 80047c6:	121b      	asrs	r3, r3, #8
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fd14 	bl	80051f8 <LCD_IO_WriteData8>
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4413      	add	r3, r2
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fd09 	bl	80051f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80047e6:	202b      	movs	r0, #43	; 0x2b
 80047e8:	f000 fce8 	bl	80051bc <LCD_IO_WriteCmd8>
 80047ec:	88bb      	ldrh	r3, [r7, #4]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fcff 	bl	80051f8 <LCD_IO_WriteData8>
 80047fa:	88bb      	ldrh	r3, [r7, #4]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fcfa 	bl	80051f8 <LCD_IO_WriteData8>
 8004804:	88ba      	ldrh	r2, [r7, #4]
 8004806:	883b      	ldrh	r3, [r7, #0]
 8004808:	4413      	add	r3, r2
 800480a:	3b01      	subs	r3, #1
 800480c:	121b      	asrs	r3, r3, #8
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fcf1 	bl	80051f8 <LCD_IO_WriteData8>
 8004816:	88bb      	ldrh	r3, [r7, #4]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	883b      	ldrh	r3, [r7, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	b2db      	uxtb	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fce6 	bl	80051f8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	883a      	ldrh	r2, [r7, #0]
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	461a      	mov	r2, r3
 8004836:	8b3b      	ldrh	r3, [r7, #24]
 8004838:	4619      	mov	r1, r3
 800483a:	202c      	movs	r0, #44	; 0x2c
 800483c:	f000 fd08 	bl	8005250 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}

08004848 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8004848:	b082      	sub	sp, #8
 800484a:	b580      	push	{r7, lr}
 800484c:	b08a      	sub	sp, #40	; 0x28
 800484e:	af00      	add	r7, sp, #0
 8004850:	603a      	str	r2, [r7, #0]
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
 8004854:	4603      	mov	r3, r0
 8004856:	80fb      	strh	r3, [r7, #6]
 8004858:	460b      	mov	r3, r1
 800485a:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8004864:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004872:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004876:	eeb0 0a47 	vmov.f32	s0, s14
 800487a:	f009 ff73 	bl	800e764 <ceilf>
 800487e:	eef0 7a40 	vmov.f32	s15, s0
 8004882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004886:	ee17 3a90 	vmov	r3, s15
 800488a:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3b01      	subs	r3, #1
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	e060      	b.n	8004962 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e024      	b.n	80048f4 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	3a20      	subs	r2, #32
 80048b2:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80048b4:	fb01 f202 	mul.w	r2, r1, r2
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	fb02 f101 	mul.w	r1, r2, r1
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	6978      	ldr	r0, [r7, #20]
 80048c2:	fb00 f202 	mul.w	r2, r0, r2
 80048c6:	4411      	add	r1, r2
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	4413      	add	r3, r2
 80048ce:	7819      	ldrb	r1, [r3, #0]
 80048d0:	f107 020c 	add.w	r2, r7, #12
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	460a      	mov	r2, r1
 80048da:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	f107 010c 	add.w	r1, r7, #12
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	440a      	add	r2, r1
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	dbd6      	blt.n	80048aa <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e027      	b.n	8004952 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8004902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	409a      	lsls	r2, r3
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	b29a      	uxth	r2, r3
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	4413      	add	r3, r2
 8004918:	b298      	uxth	r0, r3
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	b29a      	uxth	r2, r3
 800491e:	88bb      	ldrh	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004926:	4619      	mov	r1, r3
 8004928:	f7ff fe8a 	bl	8004640 <ili9341_WritePixel>
 800492c:	e00e      	b.n	800494c <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	b29a      	uxth	r2, r3
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4413      	add	r3, r2
 8004936:	b298      	uxth	r0, r3
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	b29a      	uxth	r2, r3
 800493c:	88bb      	ldrh	r3, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004946:	4619      	mov	r1, r3
 8004948:	f7ff fe7a 	bl	8004640 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	3301      	adds	r3, #1
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004954:	461a      	mov	r2, r3
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4293      	cmp	r3, r2
 800495a:	dbd2      	blt.n	8004902 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	3301      	adds	r3, #1
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004964:	461a      	mov	r2, r3
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	4293      	cmp	r3, r2
 800496a:	db99      	blt.n	80048a0 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3728      	adds	r7, #40	; 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004978:	b002      	add	sp, #8
 800497a:	4770      	bx	lr

0800497c <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 800497c:	b082      	sub	sp, #8
 800497e:	b580      	push	{r7, lr}
 8004980:	b08a      	sub	sp, #40	; 0x28
 8004982:	af00      	add	r7, sp, #0
 8004984:	603a      	str	r2, [r7, #0]
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
 8004988:	4603      	mov	r3, r0
 800498a:	80fb      	strh	r3, [r7, #6]
 800498c:	460b      	mov	r3, r1
 800498e:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8004998:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80049a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049aa:	eeb0 0a47 	vmov.f32	s0, s14
 80049ae:	f009 fed9 	bl	800e764 <ceilf>
 80049b2:	eef0 7a40 	vmov.f32	s15, s0
 80049b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ba:	ee17 3a90 	vmov	r3, s15
 80049be:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 80049ce:	2300      	movs	r3, #0
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	e050      	b.n	8004a76 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e024      	b.n	8004a28 <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	3a20      	subs	r2, #32
 80049e6:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80049e8:	fb01 f202 	mul.w	r2, r1, r2
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	fb02 f101 	mul.w	r1, r2, r1
 80049f2:	6a3a      	ldr	r2, [r7, #32]
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	fb00 f202 	mul.w	r2, r0, r2
 80049fa:	4411      	add	r1, r2
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	4413      	add	r3, r2
 8004a02:	7819      	ldrb	r1, [r3, #0]
 8004a04:	f107 020c 	add.w	r2, r7, #12
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	f107 010c 	add.w	r1, r7, #12
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	7812      	ldrb	r2, [r2, #0]
 8004a1e:	4413      	add	r3, r2
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	dbd6      	blt.n	80049de <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e017      	b.n	8004a66 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b298      	uxth	r0, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	88bb      	ldrh	r3, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7ff fdf0 	bl	8004640 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a68:	461a      	mov	r2, r3
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	dbe2      	blt.n	8004a36 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	3301      	adds	r3, #1
 8004a74:	623b      	str	r3, [r7, #32]
 8004a76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	dba9      	blt.n	80049d4 <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a8c:	b002      	add	sp, #8
 8004a8e:	4770      	bx	lr

08004a90 <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8004a90:	b082      	sub	sp, #8
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b088      	sub	sp, #32
 8004a96:	af04      	add	r7, sp, #16
 8004a98:	603a      	str	r2, [r7, #0]
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	80fb      	strh	r3, [r7, #6]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8004aa4:	f7ff fcf5 	bl	8004492 <ili9341_GetLcdPixelHeight>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8004aac:	f7ff fce8 	bl	8004480 <ili9341_GetLcdPixelWidth>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8004ab4:	e02c      	b.n	8004b10 <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	8c3a      	ldrh	r2, [r7, #32]
 8004aba:	441a      	add	r2, r3
 8004abc:	89bb      	ldrh	r3, [r7, #12]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	db13      	blt.n	8004aea <ili9341_WriteString+0x5a>
			Xpo = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8004ac6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ac8:	88bb      	ldrh	r3, [r7, #4]
 8004aca:	4413      	add	r3, r2
 8004acc:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8004ace:	88bb      	ldrh	r3, [r7, #4]
 8004ad0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ad2:	441a      	add	r2, r3
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	da1f      	bge.n	8004b1a <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d103      	bne.n	8004aea <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	603b      	str	r3, [r7, #0]
				continue;
 8004ae8:	e012      	b.n	8004b10 <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8004aea:	88b9      	ldrh	r1, [r7, #4]
 8004aec:	88f8      	ldrh	r0, [r7, #6]
 8004aee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	f7ff fea3 	bl	8004848 <ili9341_WriteChar>
		Xpo += fonto.Width;
 8004b02:	8c3a      	ldrh	r2, [r7, #32]
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	4413      	add	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
		strr++;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	603b      	str	r3, [r7, #0]
	while(*strr){
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ce      	bne.n	8004ab6 <ili9341_WriteString+0x26>
	}
}
 8004b18:	e000      	b.n	8004b1c <ili9341_WriteString+0x8c>
				break;
 8004b1a:	bf00      	nop
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b26:	b002      	add	sp, #8
 8004b28:	4770      	bx	lr

08004b2a <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	603a      	str	r2, [r7, #0]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	4603      	mov	r3, r0
 8004b38:	80fb      	strh	r3, [r7, #6]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8004b3e:	f7ff fca8 	bl	8004492 <ili9341_GetLcdPixelHeight>
 8004b42:	4603      	mov	r3, r0
 8004b44:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8004b46:	f7ff fc9b 	bl	8004480 <ili9341_GetLcdPixelWidth>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8004b4e:	e02a      	b.n	8004ba6 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	8c3a      	ldrh	r2, [r7, #32]
 8004b54:	441a      	add	r2, r3
 8004b56:	89bb      	ldrh	r3, [r7, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	db13      	blt.n	8004b84 <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8004b60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b62:	88bb      	ldrh	r3, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8004b68:	88bb      	ldrh	r3, [r7, #4]
 8004b6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b6c:	441a      	add	r2, r3
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	da1d      	bge.n	8004bb0 <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d103      	bne.n	8004b84 <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	603b      	str	r3, [r7, #0]
				continue;
 8004b82:	e010      	b.n	8004ba6 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8004b84:	88b9      	ldrh	r1, [r7, #4]
 8004b86:	88f8      	ldrh	r0, [r7, #6]
 8004b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	f7ff fef2 	bl	800497c <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8004b98:	8c3a      	ldrh	r2, [r7, #32]
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
		strr++;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	603b      	str	r3, [r7, #0]
	while(*strr){
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1d0      	bne.n	8004b50 <ili9341_WriteStringNoBG+0x26>
	}
}
 8004bae:	e000      	b.n	8004bb2 <ili9341_WriteStringNoBG+0x88>
				break;
 8004bb0:	bf00      	nop
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbc:	b002      	add	sp, #8
 8004bbe:	4770      	bx	lr

08004bc0 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8004bca:	1dfb      	adds	r3, r7, #7
 8004bcc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004bd0:	1dfb      	adds	r3, r7, #7
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004bd8:	f023 031f 	bic.w	r3, r3, #31
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004be2:	331c      	adds	r3, #28
 8004be4:	4a53      	ldr	r2, [pc, #332]	; (8004d34 <LcdWrite8+0x174>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004bea:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <LcdWrite8+0x178>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b51      	ldr	r3, [pc, #324]	; (8004d38 <LcdWrite8+0x178>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8004bf6:	1dfb      	adds	r3, r7, #7
 8004bf8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004bfc:	1dfb      	adds	r3, r7, #7
 8004bfe:	015b      	lsls	r3, r3, #5
 8004c00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004c04:	f023 031f 	bic.w	r3, r3, #31
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	3318      	adds	r3, #24
 8004c10:	4a48      	ldr	r2, [pc, #288]	; (8004d34 <LcdWrite8+0x174>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004c16:	4b48      	ldr	r3, [pc, #288]	; (8004d38 <LcdWrite8+0x178>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <LcdWrite8+0x178>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8004c22:	1dfb      	adds	r3, r7, #7
 8004c24:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	015b      	lsls	r3, r3, #5
 8004c2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004c30:	f023 031f 	bic.w	r3, r3, #31
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	4a3d      	ldr	r2, [pc, #244]	; (8004d34 <LcdWrite8+0x174>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004c42:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <LcdWrite8+0x178>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <LcdWrite8+0x178>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8004c4e:	1dfb      	adds	r3, r7, #7
 8004c50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004c54:	1dfb      	adds	r3, r7, #7
 8004c56:	015b      	lsls	r3, r3, #5
 8004c58:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004c5c:	f023 031f 	bic.w	r3, r3, #31
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004c66:	3310      	adds	r3, #16
 8004c68:	4a32      	ldr	r2, [pc, #200]	; (8004d34 <LcdWrite8+0x174>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <LcdWrite8+0x178>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <LcdWrite8+0x178>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8004c7a:	1dfb      	adds	r3, r7, #7
 8004c7c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004c88:	f023 031f 	bic.w	r3, r3, #31
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004c92:	330c      	adds	r3, #12
 8004c94:	4a27      	ldr	r2, [pc, #156]	; (8004d34 <LcdWrite8+0x174>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <LcdWrite8+0x178>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <LcdWrite8+0x178>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8004ca6:	1dfb      	adds	r3, r7, #7
 8004ca8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004cac:	1dfb      	adds	r3, r7, #7
 8004cae:	015b      	lsls	r3, r3, #5
 8004cb0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004cb4:	f023 031f 	bic.w	r3, r3, #31
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <LcdWrite8+0x174>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <LcdWrite8+0x178>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <LcdWrite8+0x178>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004cd8:	1dfb      	adds	r3, r7, #7
 8004cda:	015b      	lsls	r3, r3, #5
 8004cdc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004ce0:	f023 031f 	bic.w	r3, r3, #31
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004cea:	3304      	adds	r3, #4
 8004cec:	4a11      	ldr	r2, [pc, #68]	; (8004d34 <LcdWrite8+0x174>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004cf2:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <LcdWrite8+0x178>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <LcdWrite8+0x178>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004d04:	1dfb      	adds	r3, r7, #7
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004d0c:	f023 031f 	bic.w	r3, r3, #31
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004d16:	4a07      	ldr	r2, [pc, #28]	; (8004d34 <LcdWrite8+0x174>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <LcdWrite8+0x178>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <LcdWrite8+0x178>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	4241028c 	.word	0x4241028c
 8004d38:	42408280 	.word	0x42408280

08004d3c <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8004d46:	1dbb      	adds	r3, r7, #6
 8004d48:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004d4c:	1dbb      	adds	r3, r7, #6
 8004d4e:	015b      	lsls	r3, r3, #5
 8004d50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004d54:	f023 031f 	bic.w	r3, r3, #31
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	333c      	adds	r3, #60	; 0x3c
 8004d60:	4aab      	ldr	r2, [pc, #684]	; (8005010 <LcdWrite16+0x2d4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004d66:	4bab      	ldr	r3, [pc, #684]	; (8005014 <LcdWrite16+0x2d8>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4ba9      	ldr	r3, [pc, #676]	; (8005014 <LcdWrite16+0x2d8>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8004d72:	1dbb      	adds	r3, r7, #6
 8004d74:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004d78:	1dbb      	adds	r3, r7, #6
 8004d7a:	015b      	lsls	r3, r3, #5
 8004d7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004d80:	f023 031f 	bic.w	r3, r3, #31
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	3338      	adds	r3, #56	; 0x38
 8004d8c:	4aa0      	ldr	r2, [pc, #640]	; (8005010 <LcdWrite16+0x2d4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004d92:	4ba0      	ldr	r3, [pc, #640]	; (8005014 <LcdWrite16+0x2d8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	4b9e      	ldr	r3, [pc, #632]	; (8005014 <LcdWrite16+0x2d8>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8004d9e:	1dbb      	adds	r3, r7, #6
 8004da0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004da4:	1dbb      	adds	r3, r7, #6
 8004da6:	015b      	lsls	r3, r3, #5
 8004da8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004dac:	f023 031f 	bic.w	r3, r3, #31
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004db6:	3334      	adds	r3, #52	; 0x34
 8004db8:	4a95      	ldr	r2, [pc, #596]	; (8005010 <LcdWrite16+0x2d4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004dbe:	4b95      	ldr	r3, [pc, #596]	; (8005014 <LcdWrite16+0x2d8>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	4b93      	ldr	r3, [pc, #588]	; (8005014 <LcdWrite16+0x2d8>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8004dca:	1dbb      	adds	r3, r7, #6
 8004dcc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004dd0:	1dbb      	adds	r3, r7, #6
 8004dd2:	015b      	lsls	r3, r3, #5
 8004dd4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004dd8:	f023 031f 	bic.w	r3, r3, #31
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004de2:	3330      	adds	r3, #48	; 0x30
 8004de4:	4a8a      	ldr	r2, [pc, #552]	; (8005010 <LcdWrite16+0x2d4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004dea:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <LcdWrite16+0x2d8>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	4b88      	ldr	r3, [pc, #544]	; (8005014 <LcdWrite16+0x2d8>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8004df6:	1dbb      	adds	r3, r7, #6
 8004df8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004dfc:	1dbb      	adds	r3, r7, #6
 8004dfe:	015b      	lsls	r3, r3, #5
 8004e00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004e04:	f023 031f 	bic.w	r3, r3, #31
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	332c      	adds	r3, #44	; 0x2c
 8004e10:	4a7f      	ldr	r2, [pc, #508]	; (8005010 <LcdWrite16+0x2d4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004e16:	4b7f      	ldr	r3, [pc, #508]	; (8005014 <LcdWrite16+0x2d8>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	4b7d      	ldr	r3, [pc, #500]	; (8005014 <LcdWrite16+0x2d8>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8004e22:	1dbb      	adds	r3, r7, #6
 8004e24:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004e28:	1dbb      	adds	r3, r7, #6
 8004e2a:	015b      	lsls	r3, r3, #5
 8004e2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004e30:	f023 031f 	bic.w	r3, r3, #31
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	3328      	adds	r3, #40	; 0x28
 8004e3c:	4a74      	ldr	r2, [pc, #464]	; (8005010 <LcdWrite16+0x2d4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004e42:	4b74      	ldr	r3, [pc, #464]	; (8005014 <LcdWrite16+0x2d8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	4b72      	ldr	r3, [pc, #456]	; (8005014 <LcdWrite16+0x2d8>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8004e4e:	1dbb      	adds	r3, r7, #6
 8004e50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004e54:	1dbb      	adds	r3, r7, #6
 8004e56:	015b      	lsls	r3, r3, #5
 8004e58:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004e5c:	f023 031f 	bic.w	r3, r3, #31
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004e66:	3324      	adds	r3, #36	; 0x24
 8004e68:	4a69      	ldr	r2, [pc, #420]	; (8005010 <LcdWrite16+0x2d4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004e6e:	4b69      	ldr	r3, [pc, #420]	; (8005014 <LcdWrite16+0x2d8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	4b67      	ldr	r3, [pc, #412]	; (8005014 <LcdWrite16+0x2d8>)
 8004e76:	2201      	movs	r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8004e7a:	1dbb      	adds	r3, r7, #6
 8004e7c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004e80:	1dbb      	adds	r3, r7, #6
 8004e82:	015b      	lsls	r3, r3, #5
 8004e84:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004e88:	f023 031f 	bic.w	r3, r3, #31
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004e92:	3320      	adds	r3, #32
 8004e94:	4a5e      	ldr	r2, [pc, #376]	; (8005010 <LcdWrite16+0x2d4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004e9a:	4b5e      	ldr	r3, [pc, #376]	; (8005014 <LcdWrite16+0x2d8>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <LcdWrite16+0x2d8>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004eac:	1dbb      	adds	r3, r7, #6
 8004eae:	015b      	lsls	r3, r3, #5
 8004eb0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004eb4:	f023 031f 	bic.w	r3, r3, #31
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	331c      	adds	r3, #28
 8004ec0:	4a53      	ldr	r2, [pc, #332]	; (8005010 <LcdWrite16+0x2d4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004ec6:	4b53      	ldr	r3, [pc, #332]	; (8005014 <LcdWrite16+0x2d8>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	4b51      	ldr	r3, [pc, #324]	; (8005014 <LcdWrite16+0x2d8>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8004ed2:	1dbb      	adds	r3, r7, #6
 8004ed4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004ed8:	1dbb      	adds	r3, r7, #6
 8004eda:	015b      	lsls	r3, r3, #5
 8004edc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004ee0:	f023 031f 	bic.w	r3, r3, #31
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004eea:	3318      	adds	r3, #24
 8004eec:	4a48      	ldr	r2, [pc, #288]	; (8005010 <LcdWrite16+0x2d4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004ef2:	4b48      	ldr	r3, [pc, #288]	; (8005014 <LcdWrite16+0x2d8>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	4b46      	ldr	r3, [pc, #280]	; (8005014 <LcdWrite16+0x2d8>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8004efe:	1dbb      	adds	r3, r7, #6
 8004f00:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004f04:	1dbb      	adds	r3, r7, #6
 8004f06:	015b      	lsls	r3, r3, #5
 8004f08:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004f0c:	f023 031f 	bic.w	r3, r3, #31
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004f16:	3314      	adds	r3, #20
 8004f18:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <LcdWrite16+0x2d4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <LcdWrite16+0x2d8>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <LcdWrite16+0x2d8>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8004f2a:	1dbb      	adds	r3, r7, #6
 8004f2c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004f30:	1dbb      	adds	r3, r7, #6
 8004f32:	015b      	lsls	r3, r3, #5
 8004f34:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004f38:	f023 031f 	bic.w	r3, r3, #31
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004f42:	3310      	adds	r3, #16
 8004f44:	4a32      	ldr	r2, [pc, #200]	; (8005010 <LcdWrite16+0x2d4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004f4a:	4b32      	ldr	r3, [pc, #200]	; (8005014 <LcdWrite16+0x2d8>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	4b30      	ldr	r3, [pc, #192]	; (8005014 <LcdWrite16+0x2d8>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8004f56:	1dbb      	adds	r3, r7, #6
 8004f58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004f5c:	1dbb      	adds	r3, r7, #6
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004f64:	f023 031f 	bic.w	r3, r3, #31
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	330c      	adds	r3, #12
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <LcdWrite16+0x2d4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <LcdWrite16+0x2d8>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <LcdWrite16+0x2d8>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8004f82:	1dbb      	adds	r3, r7, #6
 8004f84:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004f88:	1dbb      	adds	r3, r7, #6
 8004f8a:	015b      	lsls	r3, r3, #5
 8004f8c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004f90:	f023 031f 	bic.w	r3, r3, #31
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <LcdWrite16+0x2d4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <LcdWrite16+0x2d8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <LcdWrite16+0x2d8>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8004fae:	1dbb      	adds	r3, r7, #6
 8004fb0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004fb4:	1dbb      	adds	r3, r7, #6
 8004fb6:	015b      	lsls	r3, r3, #5
 8004fb8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004fbc:	f023 031f 	bic.w	r3, r3, #31
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <LcdWrite16+0x2d4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <LcdWrite16+0x2d8>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <LcdWrite16+0x2d8>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004fe0:	1dbb      	adds	r3, r7, #6
 8004fe2:	015b      	lsls	r3, r3, #5
 8004fe4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004fe8:	f023 031f 	bic.w	r3, r3, #31
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <LcdWrite16+0x2d4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <LcdWrite16+0x2d8>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <LcdWrite16+0x2d8>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	4241028c 	.word	0x4241028c
 8005014:	42408280 	.word	0x42408280

08005018 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  while(Size--)
 8005024:	e00a      	b.n	800503c <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fdc8 	bl	8004bc0 <LcdWrite8>
    if(dinc)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	60ba      	str	r2, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1ef      	bne.n	8005026 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <LCD_IO_WriteMultiData8+0x3c>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	42410284 	.word	0x42410284

08005058 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  while(Size--)
 8005064:	e00a      	b.n	800507c <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fe66 	bl	8004d3c <LcdWrite16>
    if(dinc)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3302      	adds	r3, #2
 800507a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	60ba      	str	r2, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ef      	bne.n	8005066 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <LCD_IO_WriteMultiData16+0x3c>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	42410284 	.word	0x42410284

08005098 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f9b7 	bl	8005414 <HAL_Delay>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4603      	mov	r3, r0
 80050b6:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80050c8:	4b34      	ldr	r3, [pc, #208]	; (800519c <LCD_IO_Init+0xd8>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4a33      	ldr	r2, [pc, #204]	; (800519c <LCD_IO_Init+0xd8>)
 80050ce:	f043 0307 	orr.w	r3, r3, #7
 80050d2:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <LCD_IO_Init+0xdc>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050dc:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <LCD_IO_Init+0xdc>)
 80050de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e2:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80050e4:	4b2e      	ldr	r3, [pc, #184]	; (80051a0 <LCD_IO_Init+0xdc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <LCD_IO_Init+0xdc>)
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80050f0:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <LCD_IO_Init+0xe0>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80050f6:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <LCD_IO_Init+0xe4>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <LCD_IO_Init+0xe8>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <LCD_IO_Init+0xec>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <LCD_IO_Init+0xec>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <LCD_IO_Init+0xec>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 030c 	bic.w	r3, r3, #12
 800511a:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <LCD_IO_Init+0xec>)
 800511c:	f043 0304 	orr.w	r3, r3, #4
 8005120:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <LCD_IO_Init+0xec>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <LCD_IO_Init+0xec>)
 8005128:	f043 0303 	orr.w	r3, r3, #3
 800512c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <LCD_IO_Init+0xec>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <LCD_IO_Init+0xec>)
 8005134:	f043 030c 	orr.w	r3, r3, #12
 8005138:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <LCD_IO_Init+0xf0>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <LCD_IO_Init+0xf0>)
 8005140:	f043 0303 	orr.w	r3, r3, #3
 8005144:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <LCD_IO_Init+0xec>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <LCD_IO_Init+0xec>)
 800514c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005150:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <LCD_IO_Init+0xf4>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <LCD_IO_Init+0xf0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 0303 	bic.w	r3, r3, #3
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <LCD_IO_Init+0xf0>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <LCD_IO_Init+0xec>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <LCD_IO_Init+0xec>)
 8005172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005176:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8005178:	200a      	movs	r0, #10
 800517a:	f7ff ff8d 	bl	8005098 <LCD_Delay>
  LCD_RST_ON;
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <LCD_IO_Init+0xe0>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8005184:	200a      	movs	r0, #10
 8005186:	f7ff ff87 	bl	8005098 <LCD_Delay>
  LCD_RST_OFF;
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <LCD_IO_Init+0xe0>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8005190:	200a      	movs	r0, #10
 8005192:	f7ff ff81 	bl	8005098 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8005196:	bf00      	nop
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	40020000 	.word	0x40020000
 80051a4:	42400290 	.word	0x42400290
 80051a8:	42410280 	.word	0x42410280
 80051ac:	42410284 	.word	0x42410284
 80051b0:	40020800 	.word	0x40020800
 80051b4:	40020400 	.word	0x40020400
 80051b8:	42408280 	.word	0x42408280

080051bc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <LCD_IO_WriteCmd8+0x34>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <LCD_IO_WriteCmd8+0x38>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fcf3 	bl	8004bc0 <LcdWrite8>
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <LCD_IO_WriteCmd8+0x38>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <LCD_IO_WriteCmd8+0x34>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	42410284 	.word	0x42410284
 80051f4:	42410280 	.word	0x42410280

080051f8 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <LCD_IO_WriteData8+0x28>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fcd8 	bl	8004bc0 <LcdWrite8>
  LCD_CS_OFF;
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <LCD_IO_WriteData8+0x28>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	42410284 	.word	0x42410284

08005224 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 800522e:	4b07      	ldr	r3, [pc, #28]	; (800524c <LCD_IO_WriteData16+0x28>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fd80 	bl	8004d3c <LcdWrite16>
  LCD_CS_OFF;
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <LCD_IO_WriteData16+0x28>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	42410284 	.word	0x42410284

08005250 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	603a      	str	r2, [r7, #0]
 800525a:	71fb      	strb	r3, [r7, #7]
 800525c:	460b      	mov	r3, r1
 800525e:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fca6 	bl	8004bc0 <LcdWrite8>
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	2200      	movs	r2, #0
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fee9 	bl	8005058 <LCD_IO_WriteMultiData16>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	42410284 	.word	0x42410284
 8005294:	42410280 	.word	0x42410280

08005298 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fc83 	bl	8004bc0 <LcdWrite8>
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80052c0:	2201      	movs	r2, #1
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	68b8      	ldr	r0, [r7, #8]
 80052c6:	f7ff fea7 	bl	8005018 <LCD_IO_WriteMultiData8>
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	42410284 	.word	0x42410284
 80052d8:	42410280 	.word	0x42410280

080052dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80052dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052e0:	480d      	ldr	r0, [pc, #52]	; (8005318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052e2:	490e      	ldr	r1, [pc, #56]	; (800531c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052e4:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052e8:	e002      	b.n	80052f0 <LoopCopyDataInit>

080052ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ee:	3304      	adds	r3, #4

080052f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052f4:	d3f9      	bcc.n	80052ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052f6:	4a0b      	ldr	r2, [pc, #44]	; (8005324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052f8:	4c0b      	ldr	r4, [pc, #44]	; (8005328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052fc:	e001      	b.n	8005302 <LoopFillZerobss>

080052fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005300:	3204      	adds	r2, #4

08005302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005304:	d3fb      	bcc.n	80052fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005306:	f7ff f89f 	bl	8004448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800530a:	f006 fad9 	bl	800b8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800530e:	f7fc fbbd 	bl	8001a8c <main>
  bx  lr    
 8005312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800531c:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8005320:	0801a3d4 	.word	0x0801a3d4
  ldr r2, =_sbss
 8005324:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8005328:	20000874 	.word	0x20000874

0800532c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800532c:	e7fe      	b.n	800532c <ADC_IRQHandler>
	...

08005330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <HAL_Init+0x40>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0d      	ldr	r2, [pc, #52]	; (8005370 <HAL_Init+0x40>)
 800533a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_Init+0x40>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <HAL_Init+0x40>)
 8005346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800534a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <HAL_Init+0x40>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a07      	ldr	r2, [pc, #28]	; (8005370 <HAL_Init+0x40>)
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005358:	2003      	movs	r0, #3
 800535a:	f000 f94f 	bl	80055fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800535e:	2000      	movs	r0, #0
 8005360:	f000 f808 	bl	8005374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005364:	f7fe fcf6 	bl	8003d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40023c00 	.word	0x40023c00

08005374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800537c:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <HAL_InitTick+0x54>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_InitTick+0x58>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800538a:	fbb3 f3f1 	udiv	r3, r3, r1
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f967 	bl	8005666 <HAL_SYSTICK_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e00e      	b.n	80053c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b0f      	cmp	r3, #15
 80053a6:	d80a      	bhi.n	80053be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a8:	2200      	movs	r2, #0
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	f000 f92f 	bl	8005612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053b4:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <HAL_InitTick+0x5c>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e000      	b.n	80053c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000228 	.word	0x20000228
 80053cc:	20000250 	.word	0x20000250
 80053d0:	2000024c 	.word	0x2000024c

080053d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_IncTick+0x20>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_IncTick+0x24>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	4a04      	ldr	r2, [pc, #16]	; (80053f8 <HAL_IncTick+0x24>)
 80053e6:	6013      	str	r3, [r2, #0]
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000250 	.word	0x20000250
 80053f8:	20000860 	.word	0x20000860

080053fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_GetTick+0x14>)
 8005402:	681b      	ldr	r3, [r3, #0]
}
 8005404:	4618      	mov	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000860 	.word	0x20000860

08005414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800541c:	f7ff ffee 	bl	80053fc <HAL_GetTick>
 8005420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d005      	beq.n	800543a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_Delay+0x44>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800543a:	bf00      	nop
 800543c:	f7ff ffde 	bl	80053fc <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	429a      	cmp	r2, r3
 800544a:	d8f7      	bhi.n	800543c <HAL_Delay+0x28>
  {
  }
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000250 	.word	0x20000250

0800545c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005478:	4013      	ands	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548e:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	60d3      	str	r3, [r2, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <__NVIC_GetPriorityGrouping+0x18>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 0307 	and.w	r3, r3, #7
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00

080054c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	db0b      	blt.n	80054ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	f003 021f 	and.w	r2, r3, #31
 80054d8:	4907      	ldr	r1, [pc, #28]	; (80054f8 <__NVIC_EnableIRQ+0x38>)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2001      	movs	r0, #1
 80054e2:	fa00 f202 	lsl.w	r2, r0, r2
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	e000e100 	.word	0xe000e100

080054fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db0a      	blt.n	8005526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	490c      	ldr	r1, [pc, #48]	; (8005548 <__NVIC_SetPriority+0x4c>)
 8005516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551a:	0112      	lsls	r2, r2, #4
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	440b      	add	r3, r1
 8005520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005524:	e00a      	b.n	800553c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4908      	ldr	r1, [pc, #32]	; (800554c <__NVIC_SetPriority+0x50>)
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	3b04      	subs	r3, #4
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	440b      	add	r3, r1
 800553a:	761a      	strb	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000e100 	.word	0xe000e100
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f1c3 0307 	rsb	r3, r3, #7
 800556a:	2b04      	cmp	r3, #4
 800556c:	bf28      	it	cs
 800556e:	2304      	movcs	r3, #4
 8005570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3304      	adds	r3, #4
 8005576:	2b06      	cmp	r3, #6
 8005578:	d902      	bls.n	8005580 <NVIC_EncodePriority+0x30>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3b03      	subs	r3, #3
 800557e:	e000      	b.n	8005582 <NVIC_EncodePriority+0x32>
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	401a      	ands	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005598:	f04f 31ff 	mov.w	r1, #4294967295
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	43d9      	mvns	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a8:	4313      	orrs	r3, r2
         );
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3724      	adds	r7, #36	; 0x24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c8:	d301      	bcc.n	80055ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ca:	2301      	movs	r3, #1
 80055cc:	e00f      	b.n	80055ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <SysTick_Config+0x40>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055d6:	210f      	movs	r1, #15
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	f7ff ff8e 	bl	80054fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <SysTick_Config+0x40>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <SysTick_Config+0x40>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	e000e010 	.word	0xe000e010

080055fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff29 	bl	800545c <__NVIC_SetPriorityGrouping>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	4603      	mov	r3, r0
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005624:	f7ff ff3e 	bl	80054a4 <__NVIC_GetPriorityGrouping>
 8005628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	6978      	ldr	r0, [r7, #20]
 8005630:	f7ff ff8e 	bl	8005550 <NVIC_EncodePriority>
 8005634:	4602      	mov	r2, r0
 8005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff5d 	bl	80054fc <__NVIC_SetPriority>
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	4603      	mov	r3, r0
 8005652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff31 	bl	80054c0 <__NVIC_EnableIRQ>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ffa2 	bl	80055b8 <SysTick_Config>
 8005674:	4603      	mov	r3, r0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800568c:	f7ff feb6 	bl	80053fc <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e099      	b.n	80057d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056bc:	e00f      	b.n	80056de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056be:	f7ff fe9d 	bl	80053fc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d908      	bls.n	80056de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2203      	movs	r2, #3
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e078      	b.n	80057d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e8      	bne.n	80056be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <HAL_DMA_Init+0x158>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800570a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b04      	cmp	r3, #4
 8005736:	d107      	bne.n	8005748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4313      	orrs	r3, r2
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b04      	cmp	r3, #4
 8005770:	d117      	bne.n	80057a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00e      	beq.n	80057a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb0f 	bl	8005da8 <DMA_CheckFifoParam>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800579e:	2301      	movs	r3, #1
 80057a0:	e016      	b.n	80057d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fac6 	bl	8005d3c <DMA_CalcBaseAndBitshift>
 80057b0:	4603      	mov	r3, r0
 80057b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	223f      	movs	r2, #63	; 0x3f
 80057ba:	409a      	lsls	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	f010803f 	.word	0xf010803f

080057dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_DMA_Start_IT+0x26>
 80057fe:	2302      	movs	r3, #2
 8005800:	e040      	b.n	8005884 <HAL_DMA_Start_IT+0xa8>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d12f      	bne.n	8005876 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa58 	bl	8005ce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005834:	223f      	movs	r2, #63	; 0x3f
 8005836:	409a      	lsls	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0216 	orr.w	r2, r2, #22
 800584a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0208 	orr.w	r2, r2, #8
 8005862:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e005      	b.n	8005882 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800587e:	2302      	movs	r3, #2
 8005880:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800589a:	f7ff fdaf 	bl	80053fc <HAL_GetTick>
 800589e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d008      	beq.n	80058be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e052      	b.n	8005964 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0216 	bic.w	r2, r2, #22
 80058cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <HAL_DMA_Abort+0x62>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0208 	bic.w	r2, r2, #8
 80058fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0201 	bic.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800590e:	e013      	b.n	8005938 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005910:	f7ff fd74 	bl	80053fc <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b05      	cmp	r3, #5
 800591c:	d90c      	bls.n	8005938 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e015      	b.n	8005964 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e4      	bne.n	8005910 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	223f      	movs	r2, #63	; 0x3f
 800594c:	409a      	lsls	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d004      	beq.n	800598a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e00c      	b.n	80059a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2205      	movs	r2, #5
 800598e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059bc:	4b8e      	ldr	r3, [pc, #568]	; (8005bf8 <HAL_DMA_IRQHandler+0x248>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a8e      	ldr	r2, [pc, #568]	; (8005bfc <HAL_DMA_IRQHandler+0x24c>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	0a9b      	lsrs	r3, r3, #10
 80059c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	2208      	movs	r2, #8
 80059dc:	409a      	lsls	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01a      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d013      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0204 	bic.w	r2, r2, #4
 8005a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	2208      	movs	r2, #8
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a14:	f043 0201 	orr.w	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3e:	2201      	movs	r2, #1
 8005a40:	409a      	lsls	r2, r3
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f043 0202 	orr.w	r2, r3, #2
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	2204      	movs	r2, #4
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d012      	beq.n	8005a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a74:	2204      	movs	r2, #4
 8005a76:	409a      	lsls	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	f043 0204 	orr.w	r2, r3, #4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8c:	2210      	movs	r2, #16
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d043      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d03c      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aaa:	2210      	movs	r2, #16
 8005aac:	409a      	lsls	r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d018      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d108      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d024      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
 8005ade:	e01f      	b.n	8005b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
 8005af0:	e016      	b.n	8005b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d107      	bne.n	8005b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0208 	bic.w	r2, r2, #8
 8005b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b24:	2220      	movs	r2, #32
 8005b26:	409a      	lsls	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 808f 	beq.w	8005c50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8087 	beq.w	8005c50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	2220      	movs	r2, #32
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d136      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0216 	bic.w	r2, r2, #22
 8005b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <HAL_DMA_IRQHandler+0x1da>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0208 	bic.w	r2, r2, #8
 8005b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9e:	223f      	movs	r2, #63	; 0x3f
 8005ba0:	409a      	lsls	r2, r3
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d07e      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
        }
        return;
 8005bc6:	e079      	b.n	8005cbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01d      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10d      	bne.n	8005c00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d031      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
 8005bf4:	e02c      	b.n	8005c50 <HAL_DMA_IRQHandler+0x2a0>
 8005bf6:	bf00      	nop
 8005bf8:	20000228 	.word	0x20000228
 8005bfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d023      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
 8005c10:	e01e      	b.n	8005c50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10f      	bne.n	8005c40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0210 	bic.w	r2, r2, #16
 8005c2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d032      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d022      	beq.n	8005caa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2205      	movs	r2, #5
 8005c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d307      	bcc.n	8005c98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f2      	bne.n	8005c7c <HAL_DMA_IRQHandler+0x2cc>
 8005c96:	e000      	b.n	8005c9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
 8005cba:	e000      	b.n	8005cbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8005cbc:	bf00      	nop
    }
  }
}
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd2:	b2db      	uxtb	r3, r3
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d108      	bne.n	8005d20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d1e:	e007      	b.n	8005d30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	3b10      	subs	r3, #16
 8005d4c:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <DMA_CalcBaseAndBitshift+0x64>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d56:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <DMA_CalcBaseAndBitshift+0x68>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d909      	bls.n	8005d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	1d1a      	adds	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d7c:	e007      	b.n	8005d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	aaaaaaab 	.word	0xaaaaaaab
 8005da4:	08019fe0 	.word	0x08019fe0

08005da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11f      	bne.n	8005e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d856      	bhi.n	8005e76 <DMA_CheckFifoParam+0xce>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <DMA_CheckFifoParam+0x28>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005df3 	.word	0x08005df3
 8005dd8:	08005de1 	.word	0x08005de1
 8005ddc:	08005e77 	.word	0x08005e77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d046      	beq.n	8005e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df0:	e043      	b.n	8005e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dfa:	d140      	bne.n	8005e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e00:	e03d      	b.n	8005e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	d121      	bne.n	8005e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d837      	bhi.n	8005e82 <DMA_CheckFifoParam+0xda>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <DMA_CheckFifoParam+0x70>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005e2f 	.word	0x08005e2f
 8005e20:	08005e29 	.word	0x08005e29
 8005e24:	08005e41 	.word	0x08005e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2c:	e030      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d025      	beq.n	8005e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e3e:	e022      	b.n	8005e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e48:	d11f      	bne.n	8005e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e4e:	e01c      	b.n	8005e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d903      	bls.n	8005e5e <DMA_CheckFifoParam+0xb6>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d003      	beq.n	8005e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e5c:	e018      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	73fb      	strb	r3, [r7, #15]
      break;
 8005e62:	e015      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00e      	beq.n	8005e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
      break;
 8005e74:	e00b      	b.n	8005e8e <DMA_CheckFifoParam+0xe6>
      break;
 8005e76:	bf00      	nop
 8005e78:	e00a      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e008      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e006      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      break;
 8005e82:	bf00      	nop
 8005e84:	e004      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      break;
 8005e86:	bf00      	nop
 8005e88:	e002      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <DMA_CheckFifoParam+0xe8>
      break;
 8005e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e159      	b.n	8006170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	f040 8148 	bne.w	800616a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d005      	beq.n	8005ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d130      	bne.n	8005f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	2203      	movs	r2, #3
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f28:	2201      	movs	r2, #1
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 0201 	and.w	r2, r3, #1
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d017      	beq.n	8005f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4013      	ands	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d123      	bne.n	8005fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	08da      	lsrs	r2, r3, #3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3208      	adds	r2, #8
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	08da      	lsrs	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3208      	adds	r2, #8
 8005fde:	69b9      	ldr	r1, [r7, #24]
 8005fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2203      	movs	r2, #3
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 0203 	and.w	r2, r3, #3
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80a2 	beq.w	800616a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	4b57      	ldr	r3, [pc, #348]	; (8006188 <HAL_GPIO_Init+0x2e8>)
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	4a56      	ldr	r2, [pc, #344]	; (8006188 <HAL_GPIO_Init+0x2e8>)
 8006030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006034:	6453      	str	r3, [r2, #68]	; 0x44
 8006036:	4b54      	ldr	r3, [pc, #336]	; (8006188 <HAL_GPIO_Init+0x2e8>)
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006042:	4a52      	ldr	r2, [pc, #328]	; (800618c <HAL_GPIO_Init+0x2ec>)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	089b      	lsrs	r3, r3, #2
 8006048:	3302      	adds	r3, #2
 800604a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	220f      	movs	r2, #15
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4013      	ands	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a49      	ldr	r2, [pc, #292]	; (8006190 <HAL_GPIO_Init+0x2f0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d019      	beq.n	80060a2 <HAL_GPIO_Init+0x202>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a48      	ldr	r2, [pc, #288]	; (8006194 <HAL_GPIO_Init+0x2f4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_GPIO_Init+0x1fe>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a47      	ldr	r2, [pc, #284]	; (8006198 <HAL_GPIO_Init+0x2f8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00d      	beq.n	800609a <HAL_GPIO_Init+0x1fa>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a46      	ldr	r2, [pc, #280]	; (800619c <HAL_GPIO_Init+0x2fc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <HAL_GPIO_Init+0x1f6>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a45      	ldr	r2, [pc, #276]	; (80061a0 <HAL_GPIO_Init+0x300>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d101      	bne.n	8006092 <HAL_GPIO_Init+0x1f2>
 800608e:	2304      	movs	r3, #4
 8006090:	e008      	b.n	80060a4 <HAL_GPIO_Init+0x204>
 8006092:	2307      	movs	r3, #7
 8006094:	e006      	b.n	80060a4 <HAL_GPIO_Init+0x204>
 8006096:	2303      	movs	r3, #3
 8006098:	e004      	b.n	80060a4 <HAL_GPIO_Init+0x204>
 800609a:	2302      	movs	r3, #2
 800609c:	e002      	b.n	80060a4 <HAL_GPIO_Init+0x204>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <HAL_GPIO_Init+0x204>
 80060a2:	2300      	movs	r3, #0
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	f002 0203 	and.w	r2, r2, #3
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	4093      	lsls	r3, r2
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060b4:	4935      	ldr	r1, [pc, #212]	; (800618c <HAL_GPIO_Init+0x2ec>)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	089b      	lsrs	r3, r3, #2
 80060ba:	3302      	adds	r3, #2
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060c2:	4b38      	ldr	r3, [pc, #224]	; (80061a4 <HAL_GPIO_Init+0x304>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	43db      	mvns	r3, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4013      	ands	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060e6:	4a2f      	ldr	r2, [pc, #188]	; (80061a4 <HAL_GPIO_Init+0x304>)
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060ec:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <HAL_GPIO_Init+0x304>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	43db      	mvns	r3, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006110:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <HAL_GPIO_Init+0x304>)
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006116:	4b23      	ldr	r3, [pc, #140]	; (80061a4 <HAL_GPIO_Init+0x304>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	43db      	mvns	r3, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4013      	ands	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800613a:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <HAL_GPIO_Init+0x304>)
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006140:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <HAL_GPIO_Init+0x304>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006164:	4a0f      	ldr	r2, [pc, #60]	; (80061a4 <HAL_GPIO_Init+0x304>)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	f67f aea2 	bls.w	8005ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	3724      	adds	r7, #36	; 0x24
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40023800 	.word	0x40023800
 800618c:	40013800 	.word	0x40013800
 8006190:	40020000 	.word	0x40020000
 8006194:	40020400 	.word	0x40020400
 8006198:	40020800 	.word	0x40020800
 800619c:	40020c00 	.word	0x40020c00
 80061a0:	40021000 	.word	0x40021000
 80061a4:	40013c00 	.word	0x40013c00

080061a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
 80061b4:	4613      	mov	r3, r2
 80061b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061b8:	787b      	ldrb	r3, [r7, #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061c4:	e003      	b.n	80061ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061c6:	887b      	ldrh	r3, [r7, #2]
 80061c8:	041a      	lsls	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	619a      	str	r2, [r3, #24]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061ec:	887a      	ldrh	r2, [r7, #2]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4013      	ands	r3, r2
 80061f2:	041a      	lsls	r2, r3, #16
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	43d9      	mvns	r1, r3
 80061f8:	887b      	ldrh	r3, [r7, #2]
 80061fa:	400b      	ands	r3, r1
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	619a      	str	r2, [r3, #24]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800621a:	4b08      	ldr	r3, [pc, #32]	; (800623c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006226:	4a05      	ldr	r2, [pc, #20]	; (800623c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fd fd30 	bl	8003c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40013c00 	.word	0x40013c00

08006240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e12b      	b.n	80064aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fd fd9c 	bl	8003da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0201 	bic.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062a4:	f003 f8d6 	bl	8009454 <HAL_RCC_GetPCLK1Freq>
 80062a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4a81      	ldr	r2, [pc, #516]	; (80064b4 <HAL_I2C_Init+0x274>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d807      	bhi.n	80062c4 <HAL_I2C_Init+0x84>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a80      	ldr	r2, [pc, #512]	; (80064b8 <HAL_I2C_Init+0x278>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	bf94      	ite	ls
 80062bc:	2301      	movls	r3, #1
 80062be:	2300      	movhi	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	e006      	b.n	80062d2 <HAL_I2C_Init+0x92>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a7d      	ldr	r2, [pc, #500]	; (80064bc <HAL_I2C_Init+0x27c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	bf94      	ite	ls
 80062cc:	2301      	movls	r3, #1
 80062ce:	2300      	movhi	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e0e7      	b.n	80064aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a78      	ldr	r2, [pc, #480]	; (80064c0 <HAL_I2C_Init+0x280>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	0c9b      	lsrs	r3, r3, #18
 80062e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4a6a      	ldr	r2, [pc, #424]	; (80064b4 <HAL_I2C_Init+0x274>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d802      	bhi.n	8006314 <HAL_I2C_Init+0xd4>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3301      	adds	r3, #1
 8006312:	e009      	b.n	8006328 <HAL_I2C_Init+0xe8>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800631a:	fb02 f303 	mul.w	r3, r2, r3
 800631e:	4a69      	ldr	r2, [pc, #420]	; (80064c4 <HAL_I2C_Init+0x284>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	099b      	lsrs	r3, r3, #6
 8006326:	3301      	adds	r3, #1
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	430b      	orrs	r3, r1
 800632e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800633a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	495c      	ldr	r1, [pc, #368]	; (80064b4 <HAL_I2C_Init+0x274>)
 8006344:	428b      	cmp	r3, r1
 8006346:	d819      	bhi.n	800637c <HAL_I2C_Init+0x13c>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1e59      	subs	r1, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	fbb1 f3f3 	udiv	r3, r1, r3
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800635c:	400b      	ands	r3, r1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_I2C_Init+0x138>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1e59      	subs	r1, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006370:	3301      	adds	r3, #1
 8006372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006376:	e051      	b.n	800641c <HAL_I2C_Init+0x1dc>
 8006378:	2304      	movs	r3, #4
 800637a:	e04f      	b.n	800641c <HAL_I2C_Init+0x1dc>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d111      	bne.n	80063a8 <HAL_I2C_Init+0x168>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1e58      	subs	r0, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6859      	ldr	r1, [r3, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	440b      	add	r3, r1
 8006392:	fbb0 f3f3 	udiv	r3, r0, r3
 8006396:	3301      	adds	r3, #1
 8006398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf0c      	ite	eq
 80063a0:	2301      	moveq	r3, #1
 80063a2:	2300      	movne	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	e012      	b.n	80063ce <HAL_I2C_Init+0x18e>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1e58      	subs	r0, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6859      	ldr	r1, [r3, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	0099      	lsls	r1, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80063be:	3301      	adds	r3, #1
 80063c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Init+0x196>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e022      	b.n	800641c <HAL_I2C_Init+0x1dc>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10e      	bne.n	80063fc <HAL_I2C_Init+0x1bc>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1e58      	subs	r0, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	440b      	add	r3, r1
 80063ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fa:	e00f      	b.n	800641c <HAL_I2C_Init+0x1dc>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1e58      	subs	r0, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6859      	ldr	r1, [r3, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	0099      	lsls	r1, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006412:	3301      	adds	r3, #1
 8006414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	6809      	ldr	r1, [r1, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800644a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6911      	ldr	r1, [r2, #16]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68d2      	ldr	r2, [r2, #12]
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	430b      	orrs	r3, r1
 800645e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	000186a0 	.word	0x000186a0
 80064b8:	001e847f 	.word	0x001e847f
 80064bc:	003d08ff 	.word	0x003d08ff
 80064c0:	431bde83 	.word	0x431bde83
 80064c4:	10624dd3 	.word	0x10624dd3

080064c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064e2:	f7fe ff8b 	bl	80053fc <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	f040 80d9 	bne.w	80066a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2319      	movs	r3, #25
 80064fc:	2201      	movs	r2, #1
 80064fe:	496d      	ldr	r1, [pc, #436]	; (80066b4 <HAL_I2C_Mem_Write+0x1ec>)
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f002 f90d 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
 800650e:	e0cc      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_I2C_Mem_Write+0x56>
 800651a:	2302      	movs	r3, #2
 800651c:	e0c5      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d007      	beq.n	8006544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2221      	movs	r2, #33	; 0x21
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2240      	movs	r2, #64	; 0x40
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a4d      	ldr	r2, [pc, #308]	; (80066b8 <HAL_I2C_Mem_Write+0x1f0>)
 8006584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006586:	88f8      	ldrh	r0, [r7, #6]
 8006588:	893a      	ldrh	r2, [r7, #8]
 800658a:	8979      	ldrh	r1, [r7, #10]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	4603      	mov	r3, r0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 fe9c 	bl	80082d4 <I2C_RequestMemoryWrite>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d052      	beq.n	8006648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e081      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f002 f98e 	bl	80088cc <I2C_WaitOnTXEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d107      	bne.n	80065ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e06b      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b04      	cmp	r3, #4
 800660e:	d11b      	bne.n	8006648 <HAL_I2C_Mem_Write+0x180>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006614:	2b00      	cmp	r3, #0
 8006616:	d017      	beq.n	8006648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1aa      	bne.n	80065a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f002 f97a 	bl	800894e <I2C_WaitOnBTFFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b04      	cmp	r3, #4
 8006666:	d107      	bne.n	8006678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e016      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e000      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	00100002 	.word	0x00100002
 80066b8:	ffff0000 	.word	0xffff0000

080066bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08c      	sub	sp, #48	; 0x30
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	817b      	strh	r3, [r7, #10]
 80066ce:	460b      	mov	r3, r1
 80066d0:	813b      	strh	r3, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066d6:	f7fe fe91 	bl	80053fc <HAL_GetTick>
 80066da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	f040 8208 	bne.w	8006afa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2319      	movs	r3, #25
 80066f0:	2201      	movs	r2, #1
 80066f2:	497b      	ldr	r1, [pc, #492]	; (80068e0 <HAL_I2C_Mem_Read+0x224>)
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f002 f813 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
 8006702:	e1fb      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_I2C_Mem_Read+0x56>
 800670e:	2302      	movs	r3, #2
 8006710:	e1f4      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b01      	cmp	r3, #1
 8006726:	d007      	beq.n	8006738 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2222      	movs	r2, #34	; 0x22
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2240      	movs	r2, #64	; 0x40
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a5b      	ldr	r2, [pc, #364]	; (80068e4 <HAL_I2C_Mem_Read+0x228>)
 8006778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800677a:	88f8      	ldrh	r0, [r7, #6]
 800677c:	893a      	ldrh	r2, [r7, #8]
 800677e:	8979      	ldrh	r1, [r7, #10]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	4603      	mov	r3, r0
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f001 fe38 	bl	8008400 <I2C_RequestMemoryRead>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e1b0      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d113      	bne.n	80067ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a2:	2300      	movs	r3, #0
 80067a4:	623b      	str	r3, [r7, #32]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	623b      	str	r3, [r7, #32]
 80067b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e184      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d11b      	bne.n	800680a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	e164      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680e:	2b02      	cmp	r3, #2
 8006810:	d11b      	bne.n	800684a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006820:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	e144      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006860:	e138      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006866:	2b03      	cmp	r3, #3
 8006868:	f200 80f1 	bhi.w	8006a4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	2b01      	cmp	r3, #1
 8006872:	d123      	bne.n	80068bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f002 f8db 	bl	8008a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e139      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068ba:	e10b      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d14e      	bne.n	8006962 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	2200      	movs	r2, #0
 80068cc:	4906      	ldr	r1, [pc, #24]	; (80068e8 <HAL_I2C_Mem_Read+0x22c>)
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 ff26 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e10e      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
 80068de:	bf00      	nop
 80068e0:	00100002 	.word	0x00100002
 80068e4:	ffff0000 	.word	0xffff0000
 80068e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006960:	e0b8      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2200      	movs	r2, #0
 800696a:	4966      	ldr	r1, [pc, #408]	; (8006b04 <HAL_I2C_Mem_Read+0x448>)
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f001 fed7 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0bf      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	2200      	movs	r2, #0
 80069c6:	494f      	ldr	r1, [pc, #316]	; (8006b04 <HAL_I2C_Mem_Read+0x448>)
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 fea9 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e091      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a4c:	e042      	b.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f001 ffee 	bl	8008a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e04c      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d118      	bne.n	8006ad4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f47f aec2 	bne.w	8006862 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e000      	b.n	8006afc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
  }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3728      	adds	r7, #40	; 0x28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	00010004 	.word	0x00010004

08006b08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b10      	cmp	r3, #16
 8006b36:	d003      	beq.n	8006b40 <HAL_I2C_EV_IRQHandler+0x38>
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	f040 80c1 	bne.w	8006cc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10d      	bne.n	8006b76 <HAL_I2C_EV_IRQHandler+0x6e>
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b60:	d003      	beq.n	8006b6a <HAL_I2C_EV_IRQHandler+0x62>
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b68:	d101      	bne.n	8006b6e <HAL_I2C_EV_IRQHandler+0x66>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x68>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	f000 8132 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00c      	beq.n	8006b9a <HAL_I2C_EV_IRQHandler+0x92>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	0a5b      	lsrs	r3, r3, #9
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 ffd6 	bl	8008b3e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fd83 	bl	800769e <I2C_Master_SB>
 8006b98:	e092      	b.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	08db      	lsrs	r3, r3, #3
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_I2C_EV_IRQHandler+0xb2>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fdf9 	bl	80077aa <I2C_Master_ADD10>
 8006bb8:	e082      	b.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <HAL_I2C_EV_IRQHandler+0xd2>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fe13 	bl	80077fe <I2C_Master_ADDR>
 8006bd8:	e072      	b.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	089b      	lsrs	r3, r3, #2
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d03b      	beq.n	8006c5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf4:	f000 80f3 	beq.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	09db      	lsrs	r3, r3, #7
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	0a9b      	lsrs	r3, r3, #10
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f9f3 	bl	8007008 <I2C_MasterTransmit_TXE>
 8006c22:	e04d      	b.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80d6 	beq.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	0a5b      	lsrs	r3, r3, #9
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80cf 	beq.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b21      	cmp	r3, #33	; 0x21
 8006c44:	d103      	bne.n	8006c4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa7a 	bl	8007140 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c4c:	e0c7      	b.n	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	f040 80c4 	bne.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fae8 	bl	800722c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c5c:	e0bf      	b.n	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6c:	f000 80b7 	beq.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	099b      	lsrs	r3, r3, #6
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <HAL_I2C_EV_IRQHandler+0x194>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	0a9b      	lsrs	r3, r3, #10
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <HAL_I2C_EV_IRQHandler+0x194>
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	089b      	lsrs	r3, r3, #2
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb5d 	bl	8007354 <I2C_MasterReceive_RXNE>
 8006c9a:	e011      	b.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	089b      	lsrs	r3, r3, #2
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 809a 	beq.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	0a5b      	lsrs	r3, r3, #9
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8093 	beq.w	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fc06 	bl	80074ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cbe:	e08e      	b.n	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8006cc0:	e08d      	b.n	8006dde <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	e007      	b.n	8006ce4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d012      	beq.n	8006d16 <HAL_I2C_EV_IRQHandler+0x20e>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00c      	beq.n	8006d16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ffc4 	bl	8007c9c <I2C_Slave_ADDR>
 8006d14:	e066      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <HAL_I2C_EV_IRQHandler+0x22e>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	0a5b      	lsrs	r3, r3, #9
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fffe 	bl	8007d30 <I2C_Slave_STOPF>
 8006d34:	e056      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b21      	cmp	r3, #33	; 0x21
 8006d3a:	d002      	beq.n	8006d42 <HAL_I2C_EV_IRQHandler+0x23a>
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b29      	cmp	r3, #41	; 0x29
 8006d40:	d125      	bne.n	8006d8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00f      	beq.n	8006d6e <HAL_I2C_EV_IRQHandler+0x266>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	0a9b      	lsrs	r3, r3, #10
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <HAL_I2C_EV_IRQHandler+0x266>
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	089b      	lsrs	r3, r3, #2
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 feda 	bl	8007b20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d6c:	e039      	b.n	8006de2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d033      	beq.n	8006de2 <HAL_I2C_EV_IRQHandler+0x2da>
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	0a5b      	lsrs	r3, r3, #9
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d02d      	beq.n	8006de2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 ff07 	bl	8007b9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d8c:	e029      	b.n	8006de2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	099b      	lsrs	r3, r3, #6
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00f      	beq.n	8006dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	0a9b      	lsrs	r3, r3, #10
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	089b      	lsrs	r3, r3, #2
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 ff12 	bl	8007bdc <I2C_SlaveReceive_RXNE>
 8006db8:	e014      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	089b      	lsrs	r3, r3, #2
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	0a5b      	lsrs	r3, r3, #9
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 ff40 	bl	8007c58 <I2C_SlaveReceive_BTF>
 8006dd8:	e004      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006de2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08a      	sub	sp, #40	; 0x28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <HAL_I2C_ER_IRQHandler+0x4e>
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	f043 0301 	orr.w	r3, r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	0a5b      	lsrs	r3, r3, #9
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <HAL_I2C_ER_IRQHandler+0x78>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f043 0302 	orr.w	r3, r3, #2
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006e60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	0a9b      	lsrs	r3, r3, #10
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d03f      	beq.n	8006eee <HAL_I2C_ER_IRQHandler+0x104>
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d039      	beq.n	8006eee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006e7a:	7efb      	ldrb	r3, [r7, #27]
 8006e7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006e94:	7ebb      	ldrb	r3, [r7, #26]
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d112      	bne.n	8006ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10f      	bne.n	8006ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006ea0:	7cfb      	ldrb	r3, [r7, #19]
 8006ea2:	2b21      	cmp	r3, #33	; 0x21
 8006ea4:	d008      	beq.n	8006eb8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006ea6:	7cfb      	ldrb	r3, [r7, #19]
 8006ea8:	2b29      	cmp	r3, #41	; 0x29
 8006eaa:	d005      	beq.n	8006eb8 <HAL_I2C_ER_IRQHandler+0xce>
 8006eac:	7cfb      	ldrb	r3, [r7, #19]
 8006eae:	2b28      	cmp	r3, #40	; 0x28
 8006eb0:	d106      	bne.n	8006ec0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b21      	cmp	r3, #33	; 0x21
 8006eb6:	d103      	bne.n	8006ec0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 f869 	bl	8007f90 <I2C_Slave_AF>
 8006ebe:	e016      	b.n	8006eee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ec8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	f043 0304 	orr.w	r3, r3, #4
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006ed2:	7efb      	ldrb	r3, [r7, #27]
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d002      	beq.n	8006ede <HAL_I2C_ER_IRQHandler+0xf4>
 8006ed8:	7efb      	ldrb	r3, [r7, #27]
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d107      	bne.n	8006eee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	0adb      	lsrs	r3, r3, #11
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <HAL_I2C_ER_IRQHandler+0x12e>
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	f043 0308 	orr.w	r3, r3, #8
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006f16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f8a0 	bl	8008070 <I2C_ITError>
  }
}
 8006f30:	bf00      	nop
 8006f32:	3728      	adds	r7, #40	; 0x28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
 8006f94:	4613      	mov	r3, r2
 8006f96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800701e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702a:	2b00      	cmp	r3, #0
 800702c:	d150      	bne.n	80070d0 <I2C_MasterTransmit_TXE+0xc8>
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	2b21      	cmp	r3, #33	; 0x21
 8007032:	d14d      	bne.n	80070d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b08      	cmp	r3, #8
 8007038:	d01d      	beq.n	8007076 <I2C_MasterTransmit_TXE+0x6e>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b20      	cmp	r3, #32
 800703e:	d01a      	beq.n	8007076 <I2C_MasterTransmit_TXE+0x6e>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007046:	d016      	beq.n	8007076 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007056:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2211      	movs	r2, #17
 800705c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff ff62 	bl	8006f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007074:	e060      	b.n	8007138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007084:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007094:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d107      	bne.n	80070c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ff7d 	bl	8006fb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070be:	e03b      	b.n	8007138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff35 	bl	8006f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070ce:	e033      	b.n	8007138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b21      	cmp	r3, #33	; 0x21
 80070d4:	d005      	beq.n	80070e2 <I2C_MasterTransmit_TXE+0xda>
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d12d      	bne.n	8007138 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	2b22      	cmp	r3, #34	; 0x22
 80070e0:	d12a      	bne.n	8007138 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80070fc:	e01c      	b.n	8007138 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b40      	cmp	r3, #64	; 0x40
 8007108:	d103      	bne.n	8007112 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f88e 	bl	800722c <I2C_MemoryTransmit_TXE_BTF>
}
 8007110:	e012      	b.n	8007138 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007136:	e7ff      	b.n	8007138 <I2C_MasterTransmit_TXE+0x130>
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b21      	cmp	r3, #33	; 0x21
 8007158:	d164      	bne.n	8007224 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d012      	beq.n	800718a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007188:	e04c      	b.n	8007224 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d01d      	beq.n	80071cc <I2C_MasterTransmit_BTF+0x8c>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b20      	cmp	r3, #32
 8007194:	d01a      	beq.n	80071cc <I2C_MasterTransmit_BTF+0x8c>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800719c:	d016      	beq.n	80071cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2211      	movs	r2, #17
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff feb7 	bl	8006f38 <HAL_I2C_MasterTxCpltCallback>
}
 80071ca:	e02b      	b.n	8007224 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d107      	bne.n	8007216 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fed2 	bl	8006fb8 <HAL_I2C_MemTxCpltCallback>
}
 8007214:	e006      	b.n	8007224 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fe8a 	bl	8006f38 <HAL_I2C_MasterTxCpltCallback>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11d      	bne.n	8007280 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10b      	bne.n	8007264 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007250:	b2da      	uxtb	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	1c9a      	adds	r2, r3, #2
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007262:	e073      	b.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007268:	b29b      	uxth	r3, r3
 800726a:	121b      	asrs	r3, r3, #8
 800726c:	b2da      	uxtb	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800727e:	e065      	b.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	2b01      	cmp	r3, #1
 8007286:	d10b      	bne.n	80072a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728c:	b2da      	uxtb	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800729e:	e055      	b.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d151      	bne.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b22      	cmp	r3, #34	; 0x22
 80072ac:	d10d      	bne.n	80072ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072c8:	e040      	b.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d015      	beq.n	8007300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	2b21      	cmp	r3, #33	; 0x21
 80072d8:	d112      	bne.n	8007300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072fe:	e025      	b.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d120      	bne.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b21      	cmp	r3, #33	; 0x21
 800730e:	d11d      	bne.n	800734c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800731e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff fe36 	bl	8006fb8 <HAL_I2C_MemTxCpltCallback>
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b22      	cmp	r3, #34	; 0x22
 8007366:	f040 80ac 	bne.w	80074c2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d921      	bls.n	80073bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	f040 808c 	bne.w	80074c2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80073ba:	e082      	b.n	80074c2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d075      	beq.n	80074b0 <I2C_MasterReceive_RXNE+0x15c>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d002      	beq.n	80073d0 <I2C_MasterReceive_RXNE+0x7c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d16f      	bne.n	80074b0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fafd 	bl	80089d0 <I2C_WaitOnSTOPRequestThroughIT>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d142      	bne.n	8007462 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d10a      	bne.n	800744c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fdc1 	bl	8006fcc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800744a:	e03a      	b.n	80074c2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2212      	movs	r2, #18
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fd76 	bl	8006f4c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007460:	e02f      	b.n	80074c2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007470:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fd99 	bl	8006fe0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074ae:	e008      	b.n	80074c2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074be:	605a      	str	r2, [r3, #4]
}
 80074c0:	e7ff      	b.n	80074c2 <I2C_MasterReceive_RXNE+0x16e>
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d11b      	bne.n	800751a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691a      	ldr	r2, [r3, #16]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007518:	e0bd      	b.n	8007696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b03      	cmp	r3, #3
 8007522:	d129      	bne.n	8007578 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007532:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b04      	cmp	r3, #4
 8007538:	d00a      	beq.n	8007550 <I2C_MasterReceive_BTF+0x86>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d007      	beq.n	8007550 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007576:	e08e      	b.n	8007696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d176      	bne.n	8007670 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d002      	beq.n	800758e <I2C_MasterReceive_BTF+0xc4>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b10      	cmp	r3, #16
 800758c:	d108      	bne.n	80075a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e019      	b.n	80075d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d002      	beq.n	80075ac <I2C_MasterReceive_BTF+0xe2>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d108      	bne.n	80075be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e00a      	b.n	80075d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d007      	beq.n	80075d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800762e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d10a      	bne.n	800765a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fcba 	bl	8006fcc <HAL_I2C_MemRxCpltCallback>
}
 8007658:	e01d      	b.n	8007696 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2212      	movs	r2, #18
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fc6f 	bl	8006f4c <HAL_I2C_MasterRxCpltCallback>
}
 800766e:	e012      	b.n	8007696 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d117      	bne.n	80076e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80076cc:	e067      	b.n	800779e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	611a      	str	r2, [r3, #16]
}
 80076e0:	e05d      	b.n	800779e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ea:	d133      	bne.n	8007754 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b21      	cmp	r3, #33	; 0x21
 80076f6:	d109      	bne.n	800770c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007708:	611a      	str	r2, [r3, #16]
 800770a:	e008      	b.n	800771e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <I2C_Master_SB+0x92>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d032      	beq.n	800779e <I2C_Master_SB+0x100>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d02d      	beq.n	800779e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007750:	605a      	str	r2, [r3, #4]
}
 8007752:	e024      	b.n	800779e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10e      	bne.n	800777a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007760:	b29b      	uxth	r3, r3
 8007762:	11db      	asrs	r3, r3, #7
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 0306 	and.w	r3, r3, #6
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f063 030f 	orn	r3, r3, #15
 8007770:	b2da      	uxtb	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	611a      	str	r2, [r3, #16]
}
 8007778:	e011      	b.n	800779e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777e:	2b01      	cmp	r3, #1
 8007780:	d10d      	bne.n	800779e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007786:	b29b      	uxth	r3, r3
 8007788:	11db      	asrs	r3, r3, #7
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 0306 	and.w	r3, r3, #6
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f063 030e 	orn	r3, r3, #14
 8007796:	b2da      	uxtb	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	611a      	str	r2, [r3, #16]
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <I2C_Master_ADD10+0x26>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d108      	bne.n	80077e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00c      	beq.n	80077f2 <I2C_Master_ADD10+0x48>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077f0:	605a      	str	r2, [r3, #4]
  }
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80077fe:	b480      	push	{r7}
 8007800:	b091      	sub	sp, #68	; 0x44
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800780c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b22      	cmp	r3, #34	; 0x22
 8007826:	f040 8169 	bne.w	8007afc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10f      	bne.n	8007852 <I2C_Master_ADDR+0x54>
 8007832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d10b      	bne.n	8007852 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800783a:	2300      	movs	r3, #0
 800783c:	633b      	str	r3, [r7, #48]	; 0x30
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	633b      	str	r3, [r7, #48]	; 0x30
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	e160      	b.n	8007b14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007856:	2b00      	cmp	r3, #0
 8007858:	d11d      	bne.n	8007896 <I2C_Master_ADDR+0x98>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007862:	d118      	bne.n	8007896 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007864:	2300      	movs	r3, #0
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007888:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	651a      	str	r2, [r3, #80]	; 0x50
 8007894:	e13e      	b.n	8007b14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d113      	bne.n	80078c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a0:	2300      	movs	r3, #0
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e115      	b.n	8007af4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	f040 808a 	bne.w	80079e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078da:	d137      	bne.n	800794c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078fa:	d113      	bne.n	8007924 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800790a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800790c:	2300      	movs	r3, #0
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	e0e7      	b.n	8007af4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007924:	2300      	movs	r3, #0
 8007926:	623b      	str	r3, [r7, #32]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	623b      	str	r3, [r7, #32]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	623b      	str	r3, [r7, #32]
 8007938:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	e0d3      	b.n	8007af4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	2b08      	cmp	r3, #8
 8007950:	d02e      	beq.n	80079b0 <I2C_Master_ADDR+0x1b2>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	2b20      	cmp	r3, #32
 8007956:	d02b      	beq.n	80079b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	2b12      	cmp	r3, #18
 800795c:	d102      	bne.n	8007964 <I2C_Master_ADDR+0x166>
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	2b01      	cmp	r3, #1
 8007962:	d125      	bne.n	80079b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b04      	cmp	r3, #4
 8007968:	d00e      	beq.n	8007988 <I2C_Master_ADDR+0x18a>
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2b02      	cmp	r3, #2
 800796e:	d00b      	beq.n	8007988 <I2C_Master_ADDR+0x18a>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	2b10      	cmp	r3, #16
 8007974:	d008      	beq.n	8007988 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e007      	b.n	8007998 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007996:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007998:	2300      	movs	r3, #0
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	61fb      	str	r3, [r7, #28]
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	e0a1      	b.n	8007af4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e085      	b.n	8007af4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d14d      	bne.n	8007a8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d016      	beq.n	8007a26 <I2C_Master_ADDR+0x228>
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d013      	beq.n	8007a26 <I2C_Master_ADDR+0x228>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d010      	beq.n	8007a26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e007      	b.n	8007a36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a44:	d117      	bne.n	8007a76 <I2C_Master_ADDR+0x278>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a4c:	d00b      	beq.n	8007a66 <I2C_Master_ADDR+0x268>
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d008      	beq.n	8007a66 <I2C_Master_ADDR+0x268>
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d005      	beq.n	8007a66 <I2C_Master_ADDR+0x268>
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	2b10      	cmp	r3, #16
 8007a5e:	d002      	beq.n	8007a66 <I2C_Master_ADDR+0x268>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d107      	bne.n	8007a76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	e032      	b.n	8007af4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aac:	d117      	bne.n	8007ade <I2C_Master_ADDR+0x2e0>
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ab4:	d00b      	beq.n	8007ace <I2C_Master_ADDR+0x2d0>
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d008      	beq.n	8007ace <I2C_Master_ADDR+0x2d0>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d005      	beq.n	8007ace <I2C_Master_ADDR+0x2d0>
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	2b10      	cmp	r3, #16
 8007ac6:	d002      	beq.n	8007ace <I2C_Master_ADDR+0x2d0>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d107      	bne.n	8007ade <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007adc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007afa:	e00b      	b.n	8007b14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
}
 8007b12:	e7ff      	b.n	8007b14 <I2C_Master_ADDR+0x316>
 8007b14:	bf00      	nop
 8007b16:	3744      	adds	r7, #68	; 0x44
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02b      	beq.n	8007b92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d114      	bne.n	8007b92 <I2C_SlaveTransmit_TXE+0x72>
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b29      	cmp	r3, #41	; 0x29
 8007b6c:	d111      	bne.n	8007b92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2221      	movs	r2, #33	; 0x21
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2228      	movs	r2, #40	; 0x28
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff f9e7 	bl	8006f60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d011      	beq.n	8007bd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02c      	beq.n	8007c50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d114      	bne.n	8007c50 <I2C_SlaveReceive_RXNE+0x74>
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2a:	d111      	bne.n	8007c50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2222      	movs	r2, #34	; 0x22
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2228      	movs	r2, #40	; 0x28
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7ff f992 	bl	8006f74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d012      	beq.n	8007c90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cb6:	2b28      	cmp	r3, #40	; 0x28
 8007cb8:	d127      	bne.n	8007d0a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	089b      	lsrs	r3, r3, #2
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	09db      	lsrs	r3, r3, #7
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d103      	bne.n	8007cee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	81bb      	strh	r3, [r7, #12]
 8007cec:	e002      	b.n	8007cf4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007cfc:	89ba      	ldrh	r2, [r7, #12]
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff f940 	bl	8006f88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d08:	e00e      	b.n	8007d28 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007d50:	2300      	movs	r3, #0
 8007d52:	60bb      	str	r3, [r7, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	60bb      	str	r3, [r7, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8c:	d172      	bne.n	8007e74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b22      	cmp	r3, #34	; 0x22
 8007d92:	d002      	beq.n	8007d9a <I2C_Slave_STOPF+0x6a>
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	2b2a      	cmp	r3, #42	; 0x2a
 8007d98:	d135      	bne.n	8007e06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f043 0204 	orr.w	r2, r3, #4
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fd ff76 	bl	8005cc4 <HAL_DMA_GetState>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d049      	beq.n	8007e72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	4a69      	ldr	r2, [pc, #420]	; (8007f88 <I2C_Slave_STOPF+0x258>)
 8007de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fd fdbe 	bl	800596c <HAL_DMA_Abort_IT>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d03d      	beq.n	8007e72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e04:	e035      	b.n	8007e72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f043 0204 	orr.w	r2, r3, #4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fd ff40 	bl	8005cc4 <HAL_DMA_GetState>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d014      	beq.n	8007e74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	4a4e      	ldr	r2, [pc, #312]	; (8007f88 <I2C_Slave_STOPF+0x258>)
 8007e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fd fd88 	bl	800596c <HAL_DMA_Abort_IT>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	e000      	b.n	8007e74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d03e      	beq.n	8007efc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d112      	bne.n	8007eb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d112      	bne.n	8007ee6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	f043 0204 	orr.w	r2, r3, #4
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8b3 	bl	8008070 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007f0a:	e039      	b.n	8007f80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f10:	d109      	bne.n	8007f26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2228      	movs	r2, #40	; 0x28
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff f827 	bl	8006f74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b28      	cmp	r3, #40	; 0x28
 8007f30:	d111      	bne.n	8007f56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a15      	ldr	r2, [pc, #84]	; (8007f8c <I2C_Slave_STOPF+0x25c>)
 8007f36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f828 	bl	8006fa4 <HAL_I2C_ListenCpltCallback>
}
 8007f54:	e014      	b.n	8007f80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	d002      	beq.n	8007f64 <I2C_Slave_STOPF+0x234>
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b22      	cmp	r3, #34	; 0x22
 8007f62:	d10d      	bne.n	8007f80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe fffa 	bl	8006f74 <HAL_I2C_SlaveRxCpltCallback>
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	080085d1 	.word	0x080085d1
 8007f8c:	ffff0000 	.word	0xffff0000

08007f90 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d002      	beq.n	8007fb2 <I2C_Slave_AF+0x22>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d129      	bne.n	8008006 <I2C_Slave_AF+0x76>
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b28      	cmp	r3, #40	; 0x28
 8007fb6:	d126      	bne.n	8008006 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a2c      	ldr	r2, [pc, #176]	; (800806c <I2C_Slave_AF+0xdc>)
 8007fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fcc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fd6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fe ffd0 	bl	8006fa4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008004:	e02e      	b.n	8008064 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b21      	cmp	r3, #33	; 0x21
 800800a:	d126      	bne.n	800805a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a17      	ldr	r2, [pc, #92]	; (800806c <I2C_Slave_AF+0xdc>)
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2221      	movs	r2, #33	; 0x21
 8008016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008036:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008040:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008050:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fe ff84 	bl	8006f60 <HAL_I2C_SlaveTxCpltCallback>
}
 8008058:	e004      	b.n	8008064 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008062:	615a      	str	r2, [r3, #20]
}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	ffff0000 	.word	0xffff0000

08008070 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2b10      	cmp	r3, #16
 800808c:	d002      	beq.n	8008094 <I2C_ITError+0x24>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d10a      	bne.n	80080aa <I2C_ITError+0x3a>
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	2b22      	cmp	r3, #34	; 0x22
 8008098:	d107      	bne.n	80080aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080b0:	2b28      	cmp	r3, #40	; 0x28
 80080b2:	d107      	bne.n	80080c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2228      	movs	r2, #40	; 0x28
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080c2:	e015      	b.n	80080f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d2:	d00a      	beq.n	80080ea <I2C_ITError+0x7a>
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b60      	cmp	r3, #96	; 0x60
 80080d8:	d007      	beq.n	80080ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fe:	d162      	bne.n	80081c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800810e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b01      	cmp	r3, #1
 800811c:	d020      	beq.n	8008160 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	4a6a      	ldr	r2, [pc, #424]	; (80082cc <I2C_ITError+0x25c>)
 8008124:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812a:	4618      	mov	r0, r3
 800812c:	f7fd fc1e 	bl	800596c <HAL_DMA_Abort_IT>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8089 	beq.w	800824a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800815a:	4610      	mov	r0, r2
 800815c:	4798      	blx	r3
 800815e:	e074      	b.n	800824a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	4a59      	ldr	r2, [pc, #356]	; (80082cc <I2C_ITError+0x25c>)
 8008166:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	4618      	mov	r0, r3
 800816e:	f7fd fbfd 	bl	800596c <HAL_DMA_Abort_IT>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d068      	beq.n	800824a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d10b      	bne.n	800819e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	e041      	b.n	800824a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b60      	cmp	r3, #96	; 0x60
 80081d0:	d125      	bne.n	800821e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d10b      	bne.n	8008206 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe feec 	bl	8006ff4 <HAL_I2C_AbortCpltCallback>
 800821c:	e015      	b.n	800824a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008228:	2b40      	cmp	r3, #64	; 0x40
 800822a:	d10b      	bne.n	8008244 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7fe fecb 	bl	8006fe0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10e      	bne.n	8008278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008286:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b04      	cmp	r3, #4
 800829a:	d113      	bne.n	80082c4 <I2C_ITError+0x254>
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	2b28      	cmp	r3, #40	; 0x28
 80082a0:	d110      	bne.n	80082c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a0a      	ldr	r2, [pc, #40]	; (80082d0 <I2C_ITError+0x260>)
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fe fe70 	bl	8006fa4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082c4:	bf00      	nop
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	080085d1 	.word	0x080085d1
 80082d0:	ffff0000 	.word	0xffff0000

080082d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	4608      	mov	r0, r1
 80082de:	4611      	mov	r1, r2
 80082e0:	461a      	mov	r2, r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	817b      	strh	r3, [r7, #10]
 80082e6:	460b      	mov	r3, r1
 80082e8:	813b      	strh	r3, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2200      	movs	r2, #0
 8008306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fa08 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008324:	d103      	bne.n	800832e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e05f      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008332:	897b      	ldrh	r3, [r7, #10]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	6a3a      	ldr	r2, [r7, #32]
 8008346:	492d      	ldr	r1, [pc, #180]	; (80083fc <I2C_RequestMemoryWrite+0x128>)
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fa40 	bl	80087ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e04c      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	6a39      	ldr	r1, [r7, #32]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 faaa 	bl	80088cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00d      	beq.n	800839a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	2b04      	cmp	r3, #4
 8008384:	d107      	bne.n	8008396 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e02b      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d105      	bne.n	80083ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	611a      	str	r2, [r3, #16]
 80083aa:	e021      	b.n	80083f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083ac:	893b      	ldrh	r3, [r7, #8]
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	6a39      	ldr	r1, [r7, #32]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa84 	bl	80088cc <I2C_WaitOnTXEFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00d      	beq.n	80083e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d107      	bne.n	80083e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e005      	b.n	80083f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083e6:	893b      	ldrh	r3, [r7, #8]
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	00010002 	.word	0x00010002

08008400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af02      	add	r7, sp, #8
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	4608      	mov	r0, r1
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	4603      	mov	r3, r0
 8008410:	817b      	strh	r3, [r7, #10]
 8008412:	460b      	mov	r3, r1
 8008414:	813b      	strh	r3, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	2200      	movs	r2, #0
 8008442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f96a 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00d      	beq.n	800846e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008460:	d103      	bne.n	800846a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008468:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e0aa      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800846e:	897b      	ldrh	r3, [r7, #10]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800847c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	6a3a      	ldr	r2, [r7, #32]
 8008482:	4952      	ldr	r1, [pc, #328]	; (80085cc <I2C_RequestMemoryRead+0x1cc>)
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f9a2 	bl	80087ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e097      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ac:	6a39      	ldr	r1, [r7, #32]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fa0c 	bl	80088cc <I2C_WaitOnTXEFlagUntilTimeout>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00d      	beq.n	80084d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d107      	bne.n	80084d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e076      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d105      	bne.n	80084e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084dc:	893b      	ldrh	r3, [r7, #8]
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	611a      	str	r2, [r3, #16]
 80084e6:	e021      	b.n	800852c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084e8:	893b      	ldrh	r3, [r7, #8]
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	6a39      	ldr	r1, [r7, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f9e6 	bl	80088cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	2b04      	cmp	r3, #4
 800850c:	d107      	bne.n	800851e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800851c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e050      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008522:	893b      	ldrh	r3, [r7, #8]
 8008524:	b2da      	uxtb	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800852c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852e:	6a39      	ldr	r1, [r7, #32]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f9cb 	bl	80088cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	2b04      	cmp	r3, #4
 8008542:	d107      	bne.n	8008554 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008552:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e035      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008566:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	2200      	movs	r2, #0
 8008570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f8d3 	bl	8008720 <I2C_WaitOnFlagUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00d      	beq.n	800859c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858e:	d103      	bne.n	8008598 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e013      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800859c:	897b      	ldrh	r3, [r7, #10]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	4906      	ldr	r1, [pc, #24]	; (80085cc <I2C_RequestMemoryRead+0x1cc>)
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f90b 	bl	80087ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	00010002 	.word	0x00010002

080085d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085ea:	4b4b      	ldr	r3, [pc, #300]	; (8008718 <I2C_DMAAbort+0x148>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	4a4a      	ldr	r2, [pc, #296]	; (800871c <I2C_DMAAbort+0x14c>)
 80085f2:	fba2 2303 	umull	r2, r3, r2, r3
 80085f6:	0a1a      	lsrs	r2, r3, #8
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	00da      	lsls	r2, r3, #3
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008616:	e00a      	b.n	800862e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3b01      	subs	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800862c:	d0ea      	beq.n	8008604 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863a:	2200      	movs	r2, #0
 800863c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	2200      	movs	r2, #0
 800864c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800865c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2200      	movs	r2, #0
 8008662:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	2200      	movs	r2, #0
 8008672:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	2200      	movs	r2, #0
 8008682:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0201 	bic.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b60      	cmp	r3, #96	; 0x60
 800869e:	d10e      	bne.n	80086be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2200      	movs	r2, #0
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086b6:	6978      	ldr	r0, [r7, #20]
 80086b8:	f7fe fc9c 	bl	8006ff4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086bc:	e027      	b.n	800870e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086be:	7cfb      	ldrb	r3, [r7, #19]
 80086c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086c4:	2b28      	cmp	r3, #40	; 0x28
 80086c6:	d117      	bne.n	80086f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0201 	orr.w	r2, r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2228      	movs	r2, #40	; 0x28
 80086f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086f6:	e007      	b.n	8008708 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008708:	6978      	ldr	r0, [r7, #20]
 800870a:	f7fe fc69 	bl	8006fe0 <HAL_I2C_ErrorCallback>
}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000228 	.word	0x20000228
 800871c:	14f8b589 	.word	0x14f8b589

08008720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008730:	e025      	b.n	800877e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008738:	d021      	beq.n	800877e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873a:	f7fc fe5f 	bl	80053fc <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d302      	bcc.n	8008750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d116      	bne.n	800877e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e023      	b.n	80087c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	0c1b      	lsrs	r3, r3, #16
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10d      	bne.n	80087a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	43da      	mvns	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4013      	ands	r3, r2
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf0c      	ite	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	2300      	movne	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	e00c      	b.n	80087be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	43da      	mvns	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4013      	ands	r3, r2
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bf0c      	ite	eq
 80087b6:	2301      	moveq	r3, #1
 80087b8:	2300      	movne	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d0b6      	beq.n	8008732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087dc:	e051      	b.n	8008882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ec:	d123      	bne.n	8008836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008806:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2220      	movs	r2, #32
 8008812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	f043 0204 	orr.w	r2, r3, #4
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e046      	b.n	80088c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d021      	beq.n	8008882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883e:	f7fc fddd 	bl	80053fc <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d302      	bcc.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d116      	bne.n	8008882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f043 0220 	orr.w	r2, r3, #32
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e020      	b.n	80088c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d10c      	bne.n	80088a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	43da      	mvns	r2, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4013      	ands	r3, r2
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e00b      	b.n	80088be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	43da      	mvns	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	4013      	ands	r3, r2
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	bf14      	ite	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	2300      	moveq	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d18d      	bne.n	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088d8:	e02d      	b.n	8008936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 f900 	bl	8008ae0 <I2C_IsAcknowledgeFailed>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e02d      	b.n	8008946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d021      	beq.n	8008936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f2:	f7fc fd83 	bl	80053fc <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d116      	bne.n	8008936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e007      	b.n	8008946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008940:	2b80      	cmp	r3, #128	; 0x80
 8008942:	d1ca      	bne.n	80088da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800895a:	e02d      	b.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 f8bf 	bl	8008ae0 <I2C_IsAcknowledgeFailed>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e02d      	b.n	80089c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008972:	d021      	beq.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008974:	f7fc fd42 	bl	80053fc <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d116      	bne.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	f043 0220 	orr.w	r2, r3, #32
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e007      	b.n	80089c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d1ca      	bne.n	800895c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80089dc:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	4a13      	ldr	r2, [pc, #76]	; (8008a30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80089e4:	fba2 2303 	umull	r2, r3, r2, r3
 80089e8:	0a1a      	lsrs	r2, r3, #8
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d107      	bne.n	8008a0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e008      	b.n	8008a20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a1c:	d0e9      	beq.n	80089f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20000228 	.word	0x20000228
 8008a30:	14f8b589 	.word	0x14f8b589

08008a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a40:	e042      	b.n	8008ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d119      	bne.n	8008a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0210 	mvn.w	r2, #16
 8008a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e029      	b.n	8008ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a84:	f7fc fcba 	bl	80053fc <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d302      	bcc.n	8008a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d116      	bne.n	8008ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	f043 0220 	orr.w	r2, r3, #32
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e007      	b.n	8008ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d1b5      	bne.n	8008a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008af6:	d11b      	bne.n	8008b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	f043 0204 	orr.w	r2, r3, #4
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b4e:	d103      	bne.n	8008b58 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b56:	e007      	b.n	8008b68 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b60:	d102      	bne.n	8008b68 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2208      	movs	r2, #8
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e267      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d075      	beq.n	8008c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b92:	4b88      	ldr	r3, [pc, #544]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 030c 	and.w	r3, r3, #12
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d00c      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b9e:	4b85      	ldr	r3, [pc, #532]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d112      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008baa:	4b82      	ldr	r3, [pc, #520]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bb6:	d10b      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb8:	4b7e      	ldr	r3, [pc, #504]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d05b      	beq.n	8008c7c <HAL_RCC_OscConfig+0x108>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d157      	bne.n	8008c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e242      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bd8:	d106      	bne.n	8008be8 <HAL_RCC_OscConfig+0x74>
 8008bda:	4b76      	ldr	r3, [pc, #472]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a75      	ldr	r2, [pc, #468]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	e01d      	b.n	8008c24 <HAL_RCC_OscConfig+0xb0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bf0:	d10c      	bne.n	8008c0c <HAL_RCC_OscConfig+0x98>
 8008bf2:	4b70      	ldr	r3, [pc, #448]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a6f      	ldr	r2, [pc, #444]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	4b6d      	ldr	r3, [pc, #436]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a6c      	ldr	r2, [pc, #432]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e00b      	b.n	8008c24 <HAL_RCC_OscConfig+0xb0>
 8008c0c:	4b69      	ldr	r3, [pc, #420]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a68      	ldr	r2, [pc, #416]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	4b66      	ldr	r3, [pc, #408]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a65      	ldr	r2, [pc, #404]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d013      	beq.n	8008c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c2c:	f7fc fbe6 	bl	80053fc <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c34:	f7fc fbe2 	bl	80053fc <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b64      	cmp	r3, #100	; 0x64
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e207      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c46:	4b5b      	ldr	r3, [pc, #364]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0f0      	beq.n	8008c34 <HAL_RCC_OscConfig+0xc0>
 8008c52:	e014      	b.n	8008c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c54:	f7fc fbd2 	bl	80053fc <HAL_GetTick>
 8008c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c5c:	f7fc fbce 	bl	80053fc <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b64      	cmp	r3, #100	; 0x64
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e1f3      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c6e:	4b51      	ldr	r3, [pc, #324]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1f0      	bne.n	8008c5c <HAL_RCC_OscConfig+0xe8>
 8008c7a:	e000      	b.n	8008c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d063      	beq.n	8008d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c8a:	4b4a      	ldr	r3, [pc, #296]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 030c 	and.w	r3, r3, #12
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c96:	4b47      	ldr	r3, [pc, #284]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d11c      	bne.n	8008cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ca2:	4b44      	ldr	r3, [pc, #272]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d116      	bne.n	8008cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cae:	4b41      	ldr	r3, [pc, #260]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x152>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d001      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e1c7      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc6:	4b3b      	ldr	r3, [pc, #236]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4937      	ldr	r1, [pc, #220]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cda:	e03a      	b.n	8008d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d020      	beq.n	8008d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ce4:	4b34      	ldr	r3, [pc, #208]	; (8008db8 <HAL_RCC_OscConfig+0x244>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cea:	f7fc fb87 	bl	80053fc <HAL_GetTick>
 8008cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cf2:	f7fc fb83 	bl	80053fc <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e1a8      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d04:	4b2b      	ldr	r3, [pc, #172]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d10:	4b28      	ldr	r3, [pc, #160]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	4925      	ldr	r1, [pc, #148]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	600b      	str	r3, [r1, #0]
 8008d24:	e015      	b.n	8008d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d26:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <HAL_RCC_OscConfig+0x244>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2c:	f7fc fb66 	bl	80053fc <HAL_GetTick>
 8008d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d32:	e008      	b.n	8008d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d34:	f7fc fb62 	bl	80053fc <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e187      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d46:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f0      	bne.n	8008d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0308 	and.w	r3, r3, #8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d036      	beq.n	8008dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d016      	beq.n	8008d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d66:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <HAL_RCC_OscConfig+0x248>)
 8008d68:	2201      	movs	r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d6c:	f7fc fb46 	bl	80053fc <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d74:	f7fc fb42 	bl	80053fc <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e167      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <HAL_RCC_OscConfig+0x240>)
 8008d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0f0      	beq.n	8008d74 <HAL_RCC_OscConfig+0x200>
 8008d92:	e01b      	b.n	8008dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <HAL_RCC_OscConfig+0x248>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d9a:	f7fc fb2f 	bl	80053fc <HAL_GetTick>
 8008d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008da0:	e00e      	b.n	8008dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008da2:	f7fc fb2b 	bl	80053fc <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d907      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e150      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
 8008db4:	40023800 	.word	0x40023800
 8008db8:	42470000 	.word	0x42470000
 8008dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dc0:	4b88      	ldr	r3, [pc, #544]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1ea      	bne.n	8008da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 8097 	beq.w	8008f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dde:	4b81      	ldr	r3, [pc, #516]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10f      	bne.n	8008e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dea:	2300      	movs	r3, #0
 8008dec:	60bb      	str	r3, [r7, #8]
 8008dee:	4b7d      	ldr	r3, [pc, #500]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	4a7c      	ldr	r2, [pc, #496]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df8:	6413      	str	r3, [r2, #64]	; 0x40
 8008dfa:	4b7a      	ldr	r3, [pc, #488]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e02:	60bb      	str	r3, [r7, #8]
 8008e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e06:	2301      	movs	r3, #1
 8008e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e0a:	4b77      	ldr	r3, [pc, #476]	; (8008fe8 <HAL_RCC_OscConfig+0x474>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d118      	bne.n	8008e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e16:	4b74      	ldr	r3, [pc, #464]	; (8008fe8 <HAL_RCC_OscConfig+0x474>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a73      	ldr	r2, [pc, #460]	; (8008fe8 <HAL_RCC_OscConfig+0x474>)
 8008e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e22:	f7fc faeb 	bl	80053fc <HAL_GetTick>
 8008e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e28:	e008      	b.n	8008e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e2a:	f7fc fae7 	bl	80053fc <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d901      	bls.n	8008e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e10c      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e3c:	4b6a      	ldr	r3, [pc, #424]	; (8008fe8 <HAL_RCC_OscConfig+0x474>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0f0      	beq.n	8008e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d106      	bne.n	8008e5e <HAL_RCC_OscConfig+0x2ea>
 8008e50:	4b64      	ldr	r3, [pc, #400]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e54:	4a63      	ldr	r2, [pc, #396]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e5c:	e01c      	b.n	8008e98 <HAL_RCC_OscConfig+0x324>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	d10c      	bne.n	8008e80 <HAL_RCC_OscConfig+0x30c>
 8008e66:	4b5f      	ldr	r3, [pc, #380]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6a:	4a5e      	ldr	r2, [pc, #376]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	f043 0304 	orr.w	r3, r3, #4
 8008e70:	6713      	str	r3, [r2, #112]	; 0x70
 8008e72:	4b5c      	ldr	r3, [pc, #368]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e76:	4a5b      	ldr	r2, [pc, #364]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e78:	f043 0301 	orr.w	r3, r3, #1
 8008e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e7e:	e00b      	b.n	8008e98 <HAL_RCC_OscConfig+0x324>
 8008e80:	4b58      	ldr	r3, [pc, #352]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e84:	4a57      	ldr	r2, [pc, #348]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e86:	f023 0301 	bic.w	r3, r3, #1
 8008e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e8c:	4b55      	ldr	r3, [pc, #340]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e90:	4a54      	ldr	r2, [pc, #336]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008e92:	f023 0304 	bic.w	r3, r3, #4
 8008e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d015      	beq.n	8008ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea0:	f7fc faac 	bl	80053fc <HAL_GetTick>
 8008ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea6:	e00a      	b.n	8008ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ea8:	f7fc faa8 	bl	80053fc <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e0cb      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ebe:	4b49      	ldr	r3, [pc, #292]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0ee      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x334>
 8008eca:	e014      	b.n	8008ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ecc:	f7fc fa96 	bl	80053fc <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ed2:	e00a      	b.n	8008eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed4:	f7fc fa92 	bl	80053fc <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e0b5      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eea:	4b3e      	ldr	r3, [pc, #248]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1ee      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d105      	bne.n	8008f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008efc:	4b39      	ldr	r3, [pc, #228]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	4a38      	ldr	r2, [pc, #224]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80a1 	beq.w	8009054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f12:	4b34      	ldr	r3, [pc, #208]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 030c 	and.w	r3, r3, #12
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d05c      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d141      	bne.n	8008faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f26:	4b31      	ldr	r3, [pc, #196]	; (8008fec <HAL_RCC_OscConfig+0x478>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f2c:	f7fc fa66 	bl	80053fc <HAL_GetTick>
 8008f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f34:	f7fc fa62 	bl	80053fc <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e087      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f46:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f0      	bne.n	8008f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69da      	ldr	r2, [r3, #28]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	019b      	lsls	r3, r3, #6
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	085b      	lsrs	r3, r3, #1
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	061b      	lsls	r3, r3, #24
 8008f76:	491b      	ldr	r1, [pc, #108]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <HAL_RCC_OscConfig+0x478>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f82:	f7fc fa3b 	bl	80053fc <HAL_GetTick>
 8008f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f88:	e008      	b.n	8008f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f8a:	f7fc fa37 	bl	80053fc <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e05c      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0f0      	beq.n	8008f8a <HAL_RCC_OscConfig+0x416>
 8008fa8:	e054      	b.n	8009054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008faa:	4b10      	ldr	r3, [pc, #64]	; (8008fec <HAL_RCC_OscConfig+0x478>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb0:	f7fc fa24 	bl	80053fc <HAL_GetTick>
 8008fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fb8:	f7fc fa20 	bl	80053fc <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e045      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fca:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <HAL_RCC_OscConfig+0x470>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f0      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x444>
 8008fd6:	e03d      	b.n	8009054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d107      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e038      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
 8008fe4:	40023800 	.word	0x40023800
 8008fe8:	40007000 	.word	0x40007000
 8008fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <HAL_RCC_OscConfig+0x4ec>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d028      	beq.n	8009050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d121      	bne.n	8009050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009016:	429a      	cmp	r2, r3
 8009018:	d11a      	bne.n	8009050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009020:	4013      	ands	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009028:	4293      	cmp	r3, r2
 800902a:	d111      	bne.n	8009050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	3b01      	subs	r3, #1
 800903a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800903c:	429a      	cmp	r2, r3
 800903e:	d107      	bne.n	8009050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800904c:	429a      	cmp	r2, r3
 800904e:	d001      	beq.n	8009054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	40023800 	.word	0x40023800

08009064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0cc      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009078:	4b68      	ldr	r3, [pc, #416]	; (800921c <HAL_RCC_ClockConfig+0x1b8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d90c      	bls.n	80090a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009086:	4b65      	ldr	r3, [pc, #404]	; (800921c <HAL_RCC_ClockConfig+0x1b8>)
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800908e:	4b63      	ldr	r3, [pc, #396]	; (800921c <HAL_RCC_ClockConfig+0x1b8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d001      	beq.n	80090a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e0b8      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d020      	beq.n	80090ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090b8:	4b59      	ldr	r3, [pc, #356]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	4a58      	ldr	r2, [pc, #352]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80090be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090d0:	4b53      	ldr	r3, [pc, #332]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a52      	ldr	r2, [pc, #328]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090dc:	4b50      	ldr	r3, [pc, #320]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	494d      	ldr	r1, [pc, #308]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d044      	beq.n	8009184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d107      	bne.n	8009112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009102:	4b47      	ldr	r3, [pc, #284]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d119      	bne.n	8009142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e07f      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d003      	beq.n	8009122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800911e:	2b03      	cmp	r3, #3
 8009120:	d107      	bne.n	8009132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009122:	4b3f      	ldr	r3, [pc, #252]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e06f      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009132:	4b3b      	ldr	r3, [pc, #236]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e067      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009142:	4b37      	ldr	r3, [pc, #220]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f023 0203 	bic.w	r2, r3, #3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4934      	ldr	r1, [pc, #208]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 8009150:	4313      	orrs	r3, r2
 8009152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009154:	f7fc f952 	bl	80053fc <HAL_GetTick>
 8009158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915a:	e00a      	b.n	8009172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800915c:	f7fc f94e 	bl	80053fc <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	f241 3288 	movw	r2, #5000	; 0x1388
 800916a:	4293      	cmp	r3, r2
 800916c:	d901      	bls.n	8009172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e04f      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009172:	4b2b      	ldr	r3, [pc, #172]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 020c 	and.w	r2, r3, #12
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	429a      	cmp	r2, r3
 8009182:	d1eb      	bne.n	800915c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009184:	4b25      	ldr	r3, [pc, #148]	; (800921c <HAL_RCC_ClockConfig+0x1b8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d20c      	bcs.n	80091ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009192:	4b22      	ldr	r3, [pc, #136]	; (800921c <HAL_RCC_ClockConfig+0x1b8>)
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800919a:	4b20      	ldr	r3, [pc, #128]	; (800921c <HAL_RCC_ClockConfig+0x1b8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d001      	beq.n	80091ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e032      	b.n	8009212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d008      	beq.n	80091ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091b8:	4b19      	ldr	r3, [pc, #100]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	4916      	ldr	r1, [pc, #88]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091d6:	4b12      	ldr	r3, [pc, #72]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	490e      	ldr	r1, [pc, #56]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091ea:	f000 f821 	bl	8009230 <HAL_RCC_GetSysClockFreq>
 80091ee:	4602      	mov	r2, r0
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <HAL_RCC_ClockConfig+0x1bc>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	091b      	lsrs	r3, r3, #4
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	490a      	ldr	r1, [pc, #40]	; (8009224 <HAL_RCC_ClockConfig+0x1c0>)
 80091fc:	5ccb      	ldrb	r3, [r1, r3]
 80091fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009202:	4a09      	ldr	r2, [pc, #36]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 8009204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009206:	4b09      	ldr	r3, [pc, #36]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f7fc f8b2 	bl	8005374 <HAL_InitTick>

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	40023c00 	.word	0x40023c00
 8009220:	40023800 	.word	0x40023800
 8009224:	0801659c 	.word	0x0801659c
 8009228:	20000228 	.word	0x20000228
 800922c:	2000024c 	.word	0x2000024c

08009230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009234:	b094      	sub	sp, #80	; 0x50
 8009236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	647b      	str	r3, [r7, #68]	; 0x44
 800923c:	2300      	movs	r3, #0
 800923e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009240:	2300      	movs	r3, #0
 8009242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009248:	4b79      	ldr	r3, [pc, #484]	; (8009430 <HAL_RCC_GetSysClockFreq+0x200>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f003 030c 	and.w	r3, r3, #12
 8009250:	2b08      	cmp	r3, #8
 8009252:	d00d      	beq.n	8009270 <HAL_RCC_GetSysClockFreq+0x40>
 8009254:	2b08      	cmp	r3, #8
 8009256:	f200 80e1 	bhi.w	800941c <HAL_RCC_GetSysClockFreq+0x1ec>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_RCC_GetSysClockFreq+0x34>
 800925e:	2b04      	cmp	r3, #4
 8009260:	d003      	beq.n	800926a <HAL_RCC_GetSysClockFreq+0x3a>
 8009262:	e0db      	b.n	800941c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009264:	4b73      	ldr	r3, [pc, #460]	; (8009434 <HAL_RCC_GetSysClockFreq+0x204>)
 8009266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009268:	e0db      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800926a:	4b73      	ldr	r3, [pc, #460]	; (8009438 <HAL_RCC_GetSysClockFreq+0x208>)
 800926c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800926e:	e0d8      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009270:	4b6f      	ldr	r3, [pc, #444]	; (8009430 <HAL_RCC_GetSysClockFreq+0x200>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800927a:	4b6d      	ldr	r3, [pc, #436]	; (8009430 <HAL_RCC_GetSysClockFreq+0x200>)
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d063      	beq.n	800934e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009286:	4b6a      	ldr	r3, [pc, #424]	; (8009430 <HAL_RCC_GetSysClockFreq+0x200>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	099b      	lsrs	r3, r3, #6
 800928c:	2200      	movs	r2, #0
 800928e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009298:	633b      	str	r3, [r7, #48]	; 0x30
 800929a:	2300      	movs	r3, #0
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
 800929e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80092a2:	4622      	mov	r2, r4
 80092a4:	462b      	mov	r3, r5
 80092a6:	f04f 0000 	mov.w	r0, #0
 80092aa:	f04f 0100 	mov.w	r1, #0
 80092ae:	0159      	lsls	r1, r3, #5
 80092b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092b4:	0150      	lsls	r0, r2, #5
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4621      	mov	r1, r4
 80092bc:	1a51      	subs	r1, r2, r1
 80092be:	6139      	str	r1, [r7, #16]
 80092c0:	4629      	mov	r1, r5
 80092c2:	eb63 0301 	sbc.w	r3, r3, r1
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092d4:	4659      	mov	r1, fp
 80092d6:	018b      	lsls	r3, r1, #6
 80092d8:	4651      	mov	r1, sl
 80092da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092de:	4651      	mov	r1, sl
 80092e0:	018a      	lsls	r2, r1, #6
 80092e2:	4651      	mov	r1, sl
 80092e4:	ebb2 0801 	subs.w	r8, r2, r1
 80092e8:	4659      	mov	r1, fp
 80092ea:	eb63 0901 	sbc.w	r9, r3, r1
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	f04f 0300 	mov.w	r3, #0
 80092f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009302:	4690      	mov	r8, r2
 8009304:	4699      	mov	r9, r3
 8009306:	4623      	mov	r3, r4
 8009308:	eb18 0303 	adds.w	r3, r8, r3
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	462b      	mov	r3, r5
 8009310:	eb49 0303 	adc.w	r3, r9, r3
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009322:	4629      	mov	r1, r5
 8009324:	024b      	lsls	r3, r1, #9
 8009326:	4621      	mov	r1, r4
 8009328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800932c:	4621      	mov	r1, r4
 800932e:	024a      	lsls	r2, r1, #9
 8009330:	4610      	mov	r0, r2
 8009332:	4619      	mov	r1, r3
 8009334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009336:	2200      	movs	r2, #0
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28
 800933a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800933c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009340:	f7f7 fcaa 	bl	8000c98 <__aeabi_uldivmod>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4613      	mov	r3, r2
 800934a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800934c:	e058      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800934e:	4b38      	ldr	r3, [pc, #224]	; (8009430 <HAL_RCC_GetSysClockFreq+0x200>)
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	099b      	lsrs	r3, r3, #6
 8009354:	2200      	movs	r2, #0
 8009356:	4618      	mov	r0, r3
 8009358:	4611      	mov	r1, r2
 800935a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800935e:	623b      	str	r3, [r7, #32]
 8009360:	2300      	movs	r3, #0
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
 8009364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009368:	4642      	mov	r2, r8
 800936a:	464b      	mov	r3, r9
 800936c:	f04f 0000 	mov.w	r0, #0
 8009370:	f04f 0100 	mov.w	r1, #0
 8009374:	0159      	lsls	r1, r3, #5
 8009376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800937a:	0150      	lsls	r0, r2, #5
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4641      	mov	r1, r8
 8009382:	ebb2 0a01 	subs.w	sl, r2, r1
 8009386:	4649      	mov	r1, r9
 8009388:	eb63 0b01 	sbc.w	fp, r3, r1
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800939c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80093a0:	ebb2 040a 	subs.w	r4, r2, sl
 80093a4:	eb63 050b 	sbc.w	r5, r3, fp
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	00eb      	lsls	r3, r5, #3
 80093b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093b6:	00e2      	lsls	r2, r4, #3
 80093b8:	4614      	mov	r4, r2
 80093ba:	461d      	mov	r5, r3
 80093bc:	4643      	mov	r3, r8
 80093be:	18e3      	adds	r3, r4, r3
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	464b      	mov	r3, r9
 80093c4:	eb45 0303 	adc.w	r3, r5, r3
 80093c8:	607b      	str	r3, [r7, #4]
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093d6:	4629      	mov	r1, r5
 80093d8:	028b      	lsls	r3, r1, #10
 80093da:	4621      	mov	r1, r4
 80093dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093e0:	4621      	mov	r1, r4
 80093e2:	028a      	lsls	r2, r1, #10
 80093e4:	4610      	mov	r0, r2
 80093e6:	4619      	mov	r1, r3
 80093e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ea:	2200      	movs	r2, #0
 80093ec:	61bb      	str	r3, [r7, #24]
 80093ee:	61fa      	str	r2, [r7, #28]
 80093f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093f4:	f7f7 fc50 	bl	8000c98 <__aeabi_uldivmod>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4613      	mov	r3, r2
 80093fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <HAL_RCC_GetSysClockFreq+0x200>)
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	0c1b      	lsrs	r3, r3, #16
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	3301      	adds	r3, #1
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009414:	fbb2 f3f3 	udiv	r3, r2, r3
 8009418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800941a:	e002      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <HAL_RCC_GetSysClockFreq+0x204>)
 800941e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009424:	4618      	mov	r0, r3
 8009426:	3750      	adds	r7, #80	; 0x50
 8009428:	46bd      	mov	sp, r7
 800942a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942e:	bf00      	nop
 8009430:	40023800 	.word	0x40023800
 8009434:	00f42400 	.word	0x00f42400
 8009438:	007a1200 	.word	0x007a1200

0800943c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009440:	4b03      	ldr	r3, [pc, #12]	; (8009450 <HAL_RCC_GetHCLKFreq+0x14>)
 8009442:	681b      	ldr	r3, [r3, #0]
}
 8009444:	4618      	mov	r0, r3
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	20000228 	.word	0x20000228

08009454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009458:	f7ff fff0 	bl	800943c <HAL_RCC_GetHCLKFreq>
 800945c:	4602      	mov	r2, r0
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	0a9b      	lsrs	r3, r3, #10
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	4903      	ldr	r1, [pc, #12]	; (8009478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800946a:	5ccb      	ldrb	r3, [r1, r3]
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009470:	4618      	mov	r0, r3
 8009472:	bd80      	pop	{r7, pc}
 8009474:	40023800 	.word	0x40023800
 8009478:	080165ac 	.word	0x080165ac

0800947c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009480:	f7ff ffdc 	bl	800943c <HAL_RCC_GetHCLKFreq>
 8009484:	4602      	mov	r2, r0
 8009486:	4b05      	ldr	r3, [pc, #20]	; (800949c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	0b5b      	lsrs	r3, r3, #13
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	4903      	ldr	r1, [pc, #12]	; (80094a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009492:	5ccb      	ldrb	r3, [r1, r3]
 8009494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009498:	4618      	mov	r0, r3
 800949a:	bd80      	pop	{r7, pc}
 800949c:	40023800 	.word	0x40023800
 80094a0:	080165ac 	.word	0x080165ac

080094a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e07b      	b.n	80095ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d108      	bne.n	80094d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094c6:	d009      	beq.n	80094dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	61da      	str	r2, [r3, #28]
 80094ce:	e005      	b.n	80094dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fa fcac 	bl	8003e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009560:	ea42 0103 	orr.w	r1, r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	0c1b      	lsrs	r3, r3, #16
 800957a:	f003 0104 	and.w	r1, r3, #4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	f003 0210 	and.w	r2, r3, #16
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800959c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b08c      	sub	sp, #48	; 0x30
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095c4:	2301      	movs	r3, #1
 80095c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_SPI_TransmitReceive+0x26>
 80095d8:	2302      	movs	r3, #2
 80095da:	e18a      	b.n	80098f2 <HAL_SPI_TransmitReceive+0x33c>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095e4:	f7fb ff0a 	bl	80053fc <HAL_GetTick>
 80095e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095fa:	887b      	ldrh	r3, [r7, #2]
 80095fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009602:	2b01      	cmp	r3, #1
 8009604:	d00f      	beq.n	8009626 <HAL_SPI_TransmitReceive+0x70>
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800960c:	d107      	bne.n	800961e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <HAL_SPI_TransmitReceive+0x68>
 8009616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800961a:	2b04      	cmp	r3, #4
 800961c:	d003      	beq.n	8009626 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800961e:	2302      	movs	r3, #2
 8009620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009624:	e15b      	b.n	80098de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_SPI_TransmitReceive+0x82>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <HAL_SPI_TransmitReceive+0x82>
 8009632:	887b      	ldrh	r3, [r7, #2]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800963e:	e14e      	b.n	80098de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b04      	cmp	r3, #4
 800964a:	d003      	beq.n	8009654 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2205      	movs	r2, #5
 8009650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	887a      	ldrh	r2, [r7, #2]
 8009664:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	887a      	ldrh	r2, [r7, #2]
 800966a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	887a      	ldrh	r2, [r7, #2]
 8009676:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	887a      	ldrh	r2, [r7, #2]
 800967c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009694:	2b40      	cmp	r3, #64	; 0x40
 8009696:	d007      	beq.n	80096a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b0:	d178      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <HAL_SPI_TransmitReceive+0x10a>
 80096ba:	8b7b      	ldrh	r3, [r7, #26]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d166      	bne.n	800978e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	881a      	ldrh	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	1c9a      	adds	r2, r3, #2
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096e4:	e053      	b.n	800978e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d11b      	bne.n	800972c <HAL_SPI_TransmitReceive+0x176>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d016      	beq.n	800972c <HAL_SPI_TransmitReceive+0x176>
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	2b01      	cmp	r3, #1
 8009702:	d113      	bne.n	800972c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009708:	881a      	ldrh	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	1c9a      	adds	r2, r3, #2
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b01      	cmp	r3, #1
 8009738:	d119      	bne.n	800976e <HAL_SPI_TransmitReceive+0x1b8>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d014      	beq.n	800976e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	b292      	uxth	r2, r2
 8009750:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	1c9a      	adds	r2, r3, #2
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800976a:	2301      	movs	r3, #1
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800976e:	f7fb fe45 	bl	80053fc <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800977a:	429a      	cmp	r2, r3
 800977c:	d807      	bhi.n	800978e <HAL_SPI_TransmitReceive+0x1d8>
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d003      	beq.n	800978e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800978c:	e0a7      	b.n	80098de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1a6      	bne.n	80096e6 <HAL_SPI_TransmitReceive+0x130>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800979c:	b29b      	uxth	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1a1      	bne.n	80096e6 <HAL_SPI_TransmitReceive+0x130>
 80097a2:	e07c      	b.n	800989e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <HAL_SPI_TransmitReceive+0x1fc>
 80097ac:	8b7b      	ldrh	r3, [r7, #26]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d16b      	bne.n	800988a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	7812      	ldrb	r2, [r2, #0]
 80097be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d8:	e057      	b.n	800988a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 0302 	and.w	r3, r3, #2
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d11c      	bne.n	8009822 <HAL_SPI_TransmitReceive+0x26c>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d017      	beq.n	8009822 <HAL_SPI_TransmitReceive+0x26c>
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d114      	bne.n	8009822 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	330c      	adds	r3, #12
 8009802:	7812      	ldrb	r2, [r2, #0]
 8009804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009814:	b29b      	uxth	r3, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	b29a      	uxth	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b01      	cmp	r3, #1
 800982e:	d119      	bne.n	8009864 <HAL_SPI_TransmitReceive+0x2ae>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d014      	beq.n	8009864 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009856:	b29b      	uxth	r3, r3
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009860:	2301      	movs	r3, #1
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009864:	f7fb fdca 	bl	80053fc <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009870:	429a      	cmp	r2, r3
 8009872:	d803      	bhi.n	800987c <HAL_SPI_TransmitReceive+0x2c6>
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d102      	bne.n	8009882 <HAL_SPI_TransmitReceive+0x2cc>
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	2b00      	cmp	r3, #0
 8009880:	d103      	bne.n	800988a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009888:	e029      	b.n	80098de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1a2      	bne.n	80097da <HAL_SPI_TransmitReceive+0x224>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009898:	b29b      	uxth	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d19d      	bne.n	80097da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f8b2 	bl	8009a0c <SPI_EndRxTxTransaction>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d006      	beq.n	80098bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2220      	movs	r2, #32
 80098b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098ba:	e010      	b.n	80098de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10b      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098c4:	2300      	movs	r3, #0
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	e000      	b.n	80098de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80098dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3730      	adds	r7, #48	; 0x30
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4613      	mov	r3, r2
 800990a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800990c:	f7fb fd76 	bl	80053fc <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	4413      	add	r3, r2
 800991a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800991c:	f7fb fd6e 	bl	80053fc <HAL_GetTick>
 8009920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009922:	4b39      	ldr	r3, [pc, #228]	; (8009a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	015b      	lsls	r3, r3, #5
 8009928:	0d1b      	lsrs	r3, r3, #20
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	fb02 f303 	mul.w	r3, r2, r3
 8009930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009932:	e054      	b.n	80099de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d050      	beq.n	80099de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800993c:	f7fb fd5e 	bl	80053fc <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	429a      	cmp	r2, r3
 800994a:	d902      	bls.n	8009952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d13d      	bne.n	80099ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800996a:	d111      	bne.n	8009990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009974:	d004      	beq.n	8009980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800997e:	d107      	bne.n	8009990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800998e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009998:	d10f      	bne.n	80099ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e017      	b.n	80099fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	3b01      	subs	r3, #1
 80099dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4013      	ands	r3, r2
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	bf0c      	ite	eq
 80099ee:	2301      	moveq	r3, #1
 80099f0:	2300      	movne	r3, #0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d19b      	bne.n	8009934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000228 	.word	0x20000228

08009a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af02      	add	r7, sp, #8
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a18:	4b1b      	ldr	r3, [pc, #108]	; (8009a88 <SPI_EndRxTxTransaction+0x7c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a1b      	ldr	r2, [pc, #108]	; (8009a8c <SPI_EndRxTxTransaction+0x80>)
 8009a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a22:	0d5b      	lsrs	r3, r3, #21
 8009a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a28:	fb02 f303 	mul.w	r3, r2, r3
 8009a2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a36:	d112      	bne.n	8009a5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2180      	movs	r1, #128	; 0x80
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff ff5a 	bl	80098fc <SPI_WaitFlagStateUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d016      	beq.n	8009a7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a52:	f043 0220 	orr.w	r2, r3, #32
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e00f      	b.n	8009a7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a74:	2b80      	cmp	r3, #128	; 0x80
 8009a76:	d0f2      	beq.n	8009a5e <SPI_EndRxTxTransaction+0x52>
 8009a78:	e000      	b.n	8009a7c <SPI_EndRxTxTransaction+0x70>
        break;
 8009a7a:	bf00      	nop
  }

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000228 	.word	0x20000228
 8009a8c:	165e9f81 	.word	0x165e9f81

08009a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e041      	b.n	8009b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7fa fa5c 	bl	8003f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f000 fb24 	bl	800a11c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d001      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e044      	b.n	8009bd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 0201 	orr.w	r2, r2, #1
 8009b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a1e      	ldr	r2, [pc, #120]	; (8009be0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d018      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x6c>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b72:	d013      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x6c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a1a      	ldr	r2, [pc, #104]	; (8009be4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00e      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x6c>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a19      	ldr	r2, [pc, #100]	; (8009be8 <HAL_TIM_Base_Start_IT+0xb8>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d009      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x6c>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a17      	ldr	r2, [pc, #92]	; (8009bec <HAL_TIM_Base_Start_IT+0xbc>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d004      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x6c>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a16      	ldr	r2, [pc, #88]	; (8009bf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d111      	bne.n	8009bc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b06      	cmp	r3, #6
 8009bac:	d010      	beq.n	8009bd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0201 	orr.w	r2, r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbe:	e007      	b.n	8009bd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 0201 	orr.w	r2, r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40014000 	.word	0x40014000

08009bf4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0201 	bic.w	r2, r2, #1
 8009c0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a1a      	ldr	r2, [r3, #32]
 8009c12:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c16:	4013      	ands	r3, r2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10f      	bne.n	8009c3c <HAL_TIM_Base_Stop_IT+0x48>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a1a      	ldr	r2, [r3, #32]
 8009c22:	f240 4344 	movw	r3, #1092	; 0x444
 8009c26:	4013      	ands	r3, r2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d107      	bne.n	8009c3c <HAL_TIM_Base_Stop_IT+0x48>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0201 	bic.w	r2, r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b086      	sub	sp, #24
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e097      	b.n	8009d96 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fa f932 	bl	8003ee4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6812      	ldr	r2, [r2, #0]
 8009c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c96:	f023 0307 	bic.w	r3, r3, #7
 8009c9a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f000 fa38 	bl	800a11c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cd4:	f023 0303 	bic.w	r3, r3, #3
 8009cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	021b      	lsls	r3, r3, #8
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009cf2:	f023 030c 	bic.w	r3, r3, #12
 8009cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	011a      	lsls	r2, r3, #4
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	031b      	lsls	r3, r3, #12
 8009d22:	4313      	orrs	r3, r2
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009d30:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009d38:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	4313      	orrs	r3, r2
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009db6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009dbe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009dc6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d110      	bne.n	8009df0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d102      	bne.n	8009dda <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dd4:	7b7b      	ldrb	r3, [r7, #13]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d001      	beq.n	8009dde <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e069      	b.n	8009eb2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dee:	e031      	b.n	8009e54 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d110      	bne.n	8009e18 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d102      	bne.n	8009e02 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dfc:	7b3b      	ldrb	r3, [r7, #12]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d001      	beq.n	8009e06 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e055      	b.n	8009eb2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2202      	movs	r2, #2
 8009e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e16:	e01d      	b.n	8009e54 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d108      	bne.n	8009e30 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d105      	bne.n	8009e30 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e24:	7b7b      	ldrb	r3, [r7, #13]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d102      	bne.n	8009e30 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e2a:	7b3b      	ldrb	r3, [r7, #12]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d001      	beq.n	8009e34 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e03e      	b.n	8009eb2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <HAL_TIM_Encoder_Start+0xc4>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d008      	beq.n	8009e72 <HAL_TIM_Encoder_Start+0xd4>
 8009e60:	e00f      	b.n	8009e82 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2201      	movs	r2, #1
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f9d6 	bl	800a21c <TIM_CCxChannelCmd>
      break;
 8009e70:	e016      	b.n	8009ea0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2201      	movs	r2, #1
 8009e78:	2104      	movs	r1, #4
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f9ce 	bl	800a21c <TIM_CCxChannelCmd>
      break;
 8009e80:	e00e      	b.n	8009ea0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2201      	movs	r2, #1
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 f9c6 	bl	800a21c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2201      	movs	r2, #1
 8009e96:	2104      	movs	r1, #4
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f9bf 	bl	800a21c <TIM_CCxChannelCmd>
      break;
 8009e9e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d122      	bne.n	8009f16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d11b      	bne.n	8009f16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f06f 0202 	mvn.w	r2, #2
 8009ee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f8ee 	bl	800a0de <HAL_TIM_IC_CaptureCallback>
 8009f02:	e005      	b.n	8009f10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f8e0 	bl	800a0ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8f1 	bl	800a0f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d122      	bne.n	8009f6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f003 0304 	and.w	r3, r3, #4
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d11b      	bne.n	8009f6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f06f 0204 	mvn.w	r2, #4
 8009f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f8c4 	bl	800a0de <HAL_TIM_IC_CaptureCallback>
 8009f56:	e005      	b.n	8009f64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f8b6 	bl	800a0ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8c7 	bl	800a0f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	f003 0308 	and.w	r3, r3, #8
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d122      	bne.n	8009fbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f003 0308 	and.w	r3, r3, #8
 8009f82:	2b08      	cmp	r3, #8
 8009f84:	d11b      	bne.n	8009fbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f06f 0208 	mvn.w	r2, #8
 8009f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2204      	movs	r2, #4
 8009f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	f003 0303 	and.w	r3, r3, #3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f89a 	bl	800a0de <HAL_TIM_IC_CaptureCallback>
 8009faa:	e005      	b.n	8009fb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f88c 	bl	800a0ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f89d 	bl	800a0f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f003 0310 	and.w	r3, r3, #16
 8009fc8:	2b10      	cmp	r3, #16
 8009fca:	d122      	bne.n	800a012 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d11b      	bne.n	800a012 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f06f 0210 	mvn.w	r2, #16
 8009fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f870 	bl	800a0de <HAL_TIM_IC_CaptureCallback>
 8009ffe:	e005      	b.n	800a00c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f862 	bl	800a0ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f873 	bl	800a0f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d10e      	bne.n	800a03e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d107      	bne.n	800a03e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f06f 0201 	mvn.w	r2, #1
 800a036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7f9 fe57 	bl	8003cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a048:	2b80      	cmp	r3, #128	; 0x80
 800a04a:	d10e      	bne.n	800a06a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a056:	2b80      	cmp	r3, #128	; 0x80
 800a058:	d107      	bne.n	800a06a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f977 	bl	800a358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d10e      	bne.n	800a096 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a082:	2b40      	cmp	r3, #64	; 0x40
 800a084:	d107      	bne.n	800a096 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f838 	bl	800a106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d10e      	bne.n	800a0c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	d107      	bne.n	800a0c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f06f 0220 	mvn.w	r2, #32
 800a0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f941 	bl	800a344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0fa:	bf00      	nop
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
	...

0800a11c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a34      	ldr	r2, [pc, #208]	; (800a200 <TIM_Base_SetConfig+0xe4>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00f      	beq.n	800a154 <TIM_Base_SetConfig+0x38>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13a:	d00b      	beq.n	800a154 <TIM_Base_SetConfig+0x38>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a31      	ldr	r2, [pc, #196]	; (800a204 <TIM_Base_SetConfig+0xe8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d007      	beq.n	800a154 <TIM_Base_SetConfig+0x38>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a30      	ldr	r2, [pc, #192]	; (800a208 <TIM_Base_SetConfig+0xec>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d003      	beq.n	800a154 <TIM_Base_SetConfig+0x38>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a2f      	ldr	r2, [pc, #188]	; (800a20c <TIM_Base_SetConfig+0xf0>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d108      	bne.n	800a166 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a25      	ldr	r2, [pc, #148]	; (800a200 <TIM_Base_SetConfig+0xe4>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d01b      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a174:	d017      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a22      	ldr	r2, [pc, #136]	; (800a204 <TIM_Base_SetConfig+0xe8>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d013      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a21      	ldr	r2, [pc, #132]	; (800a208 <TIM_Base_SetConfig+0xec>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00f      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a20      	ldr	r2, [pc, #128]	; (800a20c <TIM_Base_SetConfig+0xf0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d00b      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a1f      	ldr	r2, [pc, #124]	; (800a210 <TIM_Base_SetConfig+0xf4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d007      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a1e      	ldr	r2, [pc, #120]	; (800a214 <TIM_Base_SetConfig+0xf8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d003      	beq.n	800a1a6 <TIM_Base_SetConfig+0x8a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a1d      	ldr	r2, [pc, #116]	; (800a218 <TIM_Base_SetConfig+0xfc>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d108      	bne.n	800a1b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a08      	ldr	r2, [pc, #32]	; (800a200 <TIM_Base_SetConfig+0xe4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d103      	bne.n	800a1ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	615a      	str	r2, [r3, #20]
}
 800a1f2:	bf00      	nop
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40010000 	.word	0x40010000
 800a204:	40000400 	.word	0x40000400
 800a208:	40000800 	.word	0x40000800
 800a20c:	40000c00 	.word	0x40000c00
 800a210:	40014000 	.word	0x40014000
 800a214:	40014400 	.word	0x40014400
 800a218:	40014800 	.word	0x40014800

0800a21c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f003 031f 	and.w	r3, r3, #31
 800a22e:	2201      	movs	r2, #1
 800a230:	fa02 f303 	lsl.w	r3, r2, r3
 800a234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a1a      	ldr	r2, [r3, #32]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	43db      	mvns	r3, r3
 800a23e:	401a      	ands	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a1a      	ldr	r2, [r3, #32]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f003 031f 	and.w	r3, r3, #31
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	fa01 f303 	lsl.w	r3, r1, r3
 800a254:	431a      	orrs	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	621a      	str	r2, [r3, #32]
}
 800a25a:	bf00      	nop
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
	...

0800a268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d101      	bne.n	800a280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a27c:	2302      	movs	r3, #2
 800a27e:	e050      	b.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a1c      	ldr	r2, [pc, #112]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d018      	beq.n	800a2f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2cc:	d013      	beq.n	800a2f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d00e      	beq.n	800a2f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a16      	ldr	r2, [pc, #88]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d009      	beq.n	800a2f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a15      	ldr	r2, [pc, #84]	; (800a33c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d004      	beq.n	800a2f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a13      	ldr	r2, [pc, #76]	; (800a340 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d10c      	bne.n	800a310 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	4313      	orrs	r3, r2
 800a306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40010000 	.word	0x40010000
 800a334:	40000400 	.word	0x40000400
 800a338:	40000800 	.word	0x40000800
 800a33c:	40000c00 	.word	0x40000c00
 800a340:	40014000 	.word	0x40014000

0800a344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e03f      	b.n	800a3fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7f9 fe16 	bl	8003fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2224      	movs	r2, #36	; 0x24
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f001 f80b 	bl	800b3cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	691a      	ldr	r2, [r3, #16]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	695a      	ldr	r2, [r3, #20]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b08a      	sub	sp, #40	; 0x28
 800a40a:	af02      	add	r7, sp, #8
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	603b      	str	r3, [r7, #0]
 800a412:	4613      	mov	r3, r2
 800a414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b20      	cmp	r3, #32
 800a424:	d17c      	bne.n	800a520 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <HAL_UART_Transmit+0x2c>
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e075      	b.n	800a522 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d101      	bne.n	800a444 <HAL_UART_Transmit+0x3e>
 800a440:	2302      	movs	r3, #2
 800a442:	e06e      	b.n	800a522 <HAL_UART_Transmit+0x11c>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2221      	movs	r2, #33	; 0x21
 800a456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a45a:	f7fa ffcf 	bl	80053fc <HAL_GetTick>
 800a45e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	88fa      	ldrh	r2, [r7, #6]
 800a464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	88fa      	ldrh	r2, [r7, #6]
 800a46a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a474:	d108      	bne.n	800a488 <HAL_UART_Transmit+0x82>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d104      	bne.n	800a488 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	e003      	b.n	800a490 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a498:	e02a      	b.n	800a4f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2180      	movs	r1, #128	; 0x80
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 fcc3 	bl	800ae30 <UART_WaitOnFlagUntilTimeout>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e036      	b.n	800a522 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	61bb      	str	r3, [r7, #24]
 800a4d0:	e007      	b.n	800a4e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	781a      	ldrb	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1cf      	bne.n	800a49a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2200      	movs	r2, #0
 800a502:	2140      	movs	r1, #64	; 0x40
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 fc93 	bl	800ae30 <UART_WaitOnFlagUntilTimeout>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e006      	b.n	800a522 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2220      	movs	r2, #32
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	e000      	b.n	800a522 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a520:	2302      	movs	r3, #2
  }
}
 800a522:	4618      	mov	r0, r3
 800a524:	3720      	adds	r7, #32
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b08a      	sub	sp, #40	; 0x28
 800a52e:	af02      	add	r7, sp, #8
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	603b      	str	r3, [r7, #0]
 800a536:	4613      	mov	r3, r2
 800a538:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b20      	cmp	r3, #32
 800a548:	f040 808c 	bne.w	800a664 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <HAL_UART_Receive+0x2e>
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e084      	b.n	800a666 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_UART_Receive+0x40>
 800a566:	2302      	movs	r3, #2
 800a568:	e07d      	b.n	800a666 <HAL_UART_Receive+0x13c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2222      	movs	r2, #34	; 0x22
 800a57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a586:	f7fa ff39 	bl	80053fc <HAL_GetTick>
 800a58a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	88fa      	ldrh	r2, [r7, #6]
 800a590:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	88fa      	ldrh	r2, [r7, #6]
 800a596:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a0:	d108      	bne.n	800a5b4 <HAL_UART_Receive+0x8a>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d104      	bne.n	800a5b4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	e003      	b.n	800a5bc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a5c4:	e043      	b.n	800a64e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2120      	movs	r1, #32
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fc2d 	bl	800ae30 <UART_WaitOnFlagUntilTimeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e042      	b.n	800a666 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10c      	bne.n	800a600 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	3302      	adds	r3, #2
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	e01f      	b.n	800a640 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a608:	d007      	beq.n	800a61a <HAL_UART_Receive+0xf0>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <HAL_UART_Receive+0xfe>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d106      	bne.n	800a628 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	b2da      	uxtb	r2, r3
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e008      	b.n	800a63a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a634:	b2da      	uxtb	r2, r3
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	3301      	adds	r3, #1
 800a63e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a644:	b29b      	uxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1b6      	bne.n	800a5c6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	e000      	b.n	800a666 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a664:	2302      	movs	r3, #2
  }
}
 800a666:	4618      	mov	r0, r3
 800a668:	3720      	adds	r7, #32
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	4613      	mov	r3, r2
 800a67a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b20      	cmp	r3, #32
 800a686:	d11d      	bne.n	800a6c4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <HAL_UART_Receive_DMA+0x26>
 800a68e:	88fb      	ldrh	r3, [r7, #6]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e016      	b.n	800a6c6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_UART_Receive_DMA+0x38>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e00f      	b.n	800a6c6 <HAL_UART_Receive_DMA+0x58>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a6b4:	88fb      	ldrh	r3, [r7, #6]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	68b9      	ldr	r1, [r7, #8]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 fc26 	bl	800af0c <UART_Start_Receive_DMA>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	e000      	b.n	800a6c6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a6c4:	2302      	movs	r3, #2
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b0ba      	sub	sp, #232	; 0xe8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a706:	f003 030f 	and.w	r3, r3, #15
 800a70a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a70e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10f      	bne.n	800a736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d009      	beq.n	800a736 <HAL_UART_IRQHandler+0x66>
 800a722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a726:	f003 0320 	and.w	r3, r3, #32
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fd91 	bl	800b256 <UART_Receive_IT>
      return;
 800a734:	e256      	b.n	800abe4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 80de 	beq.w	800a8fc <HAL_UART_IRQHandler+0x22c>
 800a740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d106      	bne.n	800a75a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a750:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80d1 	beq.w	800a8fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00b      	beq.n	800a77e <HAL_UART_IRQHandler+0xae>
 800a766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d005      	beq.n	800a77e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	f043 0201 	orr.w	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a782:	f003 0304 	and.w	r3, r3, #4
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <HAL_UART_IRQHandler+0xd2>
 800a78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d005      	beq.n	800a7a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79a:	f043 0202 	orr.w	r2, r3, #2
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <HAL_UART_IRQHandler+0xf6>
 800a7ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	f043 0204 	orr.w	r2, r3, #4
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ca:	f003 0308 	and.w	r3, r3, #8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d011      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x126>
 800a7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d105      	bne.n	800a7ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	f043 0208 	orr.w	r2, r3, #8
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 81ed 	beq.w	800abda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a804:	f003 0320 	and.w	r3, r3, #32
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d008      	beq.n	800a81e <HAL_UART_IRQHandler+0x14e>
 800a80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fd1c 	bl	800b256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a828:	2b40      	cmp	r3, #64	; 0x40
 800a82a:	bf0c      	ite	eq
 800a82c:	2301      	moveq	r3, #1
 800a82e:	2300      	movne	r3, #0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	f003 0308 	and.w	r3, r3, #8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <HAL_UART_IRQHandler+0x17a>
 800a842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a846:	2b00      	cmp	r3, #0
 800a848:	d04f      	beq.n	800a8ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fc24 	bl	800b098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85a:	2b40      	cmp	r3, #64	; 0x40
 800a85c:	d141      	bne.n	800a8e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3314      	adds	r3, #20
 800a864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a87c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3314      	adds	r3, #20
 800a886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a88a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a88e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a8a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1d9      	bne.n	800a85e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b6:	4a7d      	ldr	r2, [pc, #500]	; (800aaac <HAL_UART_IRQHandler+0x3dc>)
 800a8b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fb f854 	bl	800596c <HAL_DMA_Abort_IT>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d016      	beq.n	800a8f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d8:	e00e      	b.n	800a8f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f99a 	bl	800ac14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e0:	e00a      	b.n	800a8f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f996 	bl	800ac14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e8:	e006      	b.n	800a8f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f992 	bl	800ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a8f6:	e170      	b.n	800abda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f8:	bf00      	nop
    return;
 800a8fa:	e16e      	b.n	800abda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a900:	2b01      	cmp	r3, #1
 800a902:	f040 814a 	bne.w	800ab9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90a:	f003 0310 	and.w	r3, r3, #16
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 8143 	beq.w	800ab9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 813c 	beq.w	800ab9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60bb      	str	r3, [r7, #8]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	60bb      	str	r3, [r7, #8]
 800a936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	f040 80b4 	bne.w	800aab0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 8140 	beq.w	800abde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a966:	429a      	cmp	r2, r3
 800a968:	f080 8139 	bcs.w	800abde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a972:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97e:	f000 8088 	beq.w	800aa92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	330c      	adds	r3, #12
 800a988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a9ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a9b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a9c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1d9      	bne.n	800a982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3314      	adds	r3, #20
 800a9d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a9de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3314      	adds	r3, #20
 800a9ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e1      	bne.n	800a9ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3314      	adds	r3, #20
 800aa10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3314      	adds	r3, #20
 800aa2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e3      	bne.n	800aa0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	330c      	adds	r3, #12
 800aa56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa5a:	e853 3f00 	ldrex	r3, [r3]
 800aa5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa62:	f023 0310 	bic.w	r3, r3, #16
 800aa66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	330c      	adds	r3, #12
 800aa70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa74:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e3      	bne.n	800aa50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fa fefd 	bl	800588c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8c0 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aaa8:	e099      	b.n	800abde <HAL_UART_IRQHandler+0x50e>
 800aaaa:	bf00      	nop
 800aaac:	0800b15f 	.word	0x0800b15f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 808b 	beq.w	800abe2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aacc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 8086 	beq.w	800abe2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	330c      	adds	r3, #12
 800aadc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	330c      	adds	r3, #12
 800aaf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aafa:	647a      	str	r2, [r7, #68]	; 0x44
 800aafc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e3      	bne.n	800aad6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3314      	adds	r3, #20
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	f023 0301 	bic.w	r3, r3, #1
 800ab24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3314      	adds	r3, #20
 800ab2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab32:	633a      	str	r2, [r7, #48]	; 0x30
 800ab34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3a:	e841 2300 	strex	r3, r2, [r1]
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1e3      	bne.n	800ab0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	330c      	adds	r3, #12
 800ab5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0310 	bic.w	r3, r3, #16
 800ab6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	330c      	adds	r3, #12
 800ab74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab78:	61fa      	str	r2, [r7, #28]
 800ab7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	69b9      	ldr	r1, [r7, #24]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	e841 2300 	strex	r3, r2, [r1]
 800ab84:	617b      	str	r3, [r7, #20]
   return(result);
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e3      	bne.n	800ab54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f848 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab98:	e023      	b.n	800abe2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d009      	beq.n	800abba <HAL_UART_IRQHandler+0x4ea>
 800aba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fae7 	bl	800b186 <UART_Transmit_IT>
    return;
 800abb8:	e014      	b.n	800abe4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800abba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00e      	beq.n	800abe4 <HAL_UART_IRQHandler+0x514>
 800abc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d008      	beq.n	800abe4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fb27 	bl	800b226 <UART_EndTransmit_IT>
    return;
 800abd8:	e004      	b.n	800abe4 <HAL_UART_IRQHandler+0x514>
    return;
 800abda:	bf00      	nop
 800abdc:	e002      	b.n	800abe4 <HAL_UART_IRQHandler+0x514>
      return;
 800abde:	bf00      	nop
 800abe0:	e000      	b.n	800abe4 <HAL_UART_IRQHandler+0x514>
      return;
 800abe2:	bf00      	nop
  }
}
 800abe4:	37e8      	adds	r7, #232	; 0xe8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop

0800abec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b09c      	sub	sp, #112	; 0x70
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d172      	bne.n	800ad42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ac5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5e:	2200      	movs	r2, #0
 800ac60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	330c      	adds	r3, #12
 800ac68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac6c:	e853 3f00 	ldrex	r3, [r3]
 800ac70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac78:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	330c      	adds	r3, #12
 800ac80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac82:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac8a:	e841 2300 	strex	r3, r2, [r1]
 800ac8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e5      	bne.n	800ac62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3314      	adds	r3, #20
 800ac9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	e853 3f00 	ldrex	r3, [r3]
 800aca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca8:	f023 0301 	bic.w	r3, r3, #1
 800acac:	667b      	str	r3, [r7, #100]	; 0x64
 800acae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3314      	adds	r3, #20
 800acb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acb6:	647a      	str	r2, [r7, #68]	; 0x44
 800acb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acbe:	e841 2300 	strex	r3, r2, [r1]
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1e5      	bne.n	800ac96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3314      	adds	r3, #20
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	623b      	str	r3, [r7, #32]
   return(result);
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace0:	663b      	str	r3, [r7, #96]	; 0x60
 800ace2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3314      	adds	r3, #20
 800ace8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acea:	633a      	str	r2, [r7, #48]	; 0x30
 800acec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf2:	e841 2300 	strex	r3, r2, [r1]
 800acf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e5      	bne.n	800acca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800acfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad00:	2220      	movs	r2, #32
 800ad02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d119      	bne.n	800ad42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	330c      	adds	r3, #12
 800ad14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f023 0310 	bic.w	r3, r3, #16
 800ad24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	330c      	adds	r3, #12
 800ad2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad2e:	61fa      	str	r2, [r7, #28]
 800ad30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e5      	bne.n	800ad0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d106      	bne.n	800ad58 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad52:	f7ff ff69 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad56:	e002      	b.n	800ad5e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ad58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad5a:	f7f8 ffdf 	bl	8003d1c <HAL_UART_RxCpltCallback>
}
 800ad5e:	bf00      	nop
 800ad60:	3770      	adds	r7, #112	; 0x70
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d108      	bne.n	800ad8e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad80:	085b      	lsrs	r3, r3, #1
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	4619      	mov	r1, r3
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff ff4e 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad8c:	e002      	b.n	800ad94 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7ff ff36 	bl	800ac00 <HAL_UART_RxHalfCpltCallback>
}
 800ad94:	bf00      	nop
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	bf0c      	ite	eq
 800adbc:	2301      	moveq	r3, #1
 800adbe:	2300      	movne	r3, #0
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b21      	cmp	r3, #33	; 0x21
 800adce:	d108      	bne.n	800ade2 <UART_DMAError+0x46>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d005      	beq.n	800ade2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800addc:	68b8      	ldr	r0, [r7, #8]
 800adde:	f000 f933 	bl	800b048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adec:	2b40      	cmp	r3, #64	; 0x40
 800adee:	bf0c      	ite	eq
 800adf0:	2301      	moveq	r3, #1
 800adf2:	2300      	movne	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b22      	cmp	r3, #34	; 0x22
 800ae02:	d108      	bne.n	800ae16 <UART_DMAError+0x7a>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae10:	68b8      	ldr	r0, [r7, #8]
 800ae12:	f000 f941 	bl	800b098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	f043 0210 	orr.w	r2, r3, #16
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae22:	68b8      	ldr	r0, [r7, #8]
 800ae24:	f7ff fef6 	bl	800ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae28:	bf00      	nop
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b090      	sub	sp, #64	; 0x40
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	603b      	str	r3, [r7, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae40:	e050      	b.n	800aee4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d04c      	beq.n	800aee4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d007      	beq.n	800ae60 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae50:	f7fa fad4 	bl	80053fc <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d241      	bcs.n	800aee4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	330c      	adds	r3, #12
 800ae66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae80:	637a      	str	r2, [r7, #52]	; 0x34
 800ae82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e5      	bne.n	800ae60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3314      	adds	r3, #20
 800ae9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	613b      	str	r3, [r7, #16]
   return(result);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeb4:	623a      	str	r2, [r7, #32]
 800aeb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	69f9      	ldr	r1, [r7, #28]
 800aeba:	6a3a      	ldr	r2, [r7, #32]
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e5      	bne.n	800ae94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e00f      	b.n	800af04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	4013      	ands	r3, r2
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	bf0c      	ite	eq
 800aef4:	2301      	moveq	r3, #1
 800aef6:	2300      	movne	r3, #0
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	461a      	mov	r2, r3
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d09f      	beq.n	800ae42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3740      	adds	r7, #64	; 0x40
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b098      	sub	sp, #96	; 0x60
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	88fa      	ldrh	r2, [r7, #6]
 800af24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2222      	movs	r2, #34	; 0x22
 800af30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	4a40      	ldr	r2, [pc, #256]	; (800b03c <UART_Start_Receive_DMA+0x130>)
 800af3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af40:	4a3f      	ldr	r2, [pc, #252]	; (800b040 <UART_Start_Receive_DMA+0x134>)
 800af42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	4a3e      	ldr	r2, [pc, #248]	; (800b044 <UART_Start_Receive_DMA+0x138>)
 800af4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af50:	2200      	movs	r2, #0
 800af52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800af54:	f107 0308 	add.w	r3, r7, #8
 800af58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3304      	adds	r3, #4
 800af64:	4619      	mov	r1, r3
 800af66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	88fb      	ldrh	r3, [r7, #6]
 800af6c:	f7fa fc36 	bl	80057dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d019      	beq.n	800afca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	330c      	adds	r3, #12
 800af9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afac:	65bb      	str	r3, [r7, #88]	; 0x58
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	330c      	adds	r3, #12
 800afb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800afb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800afbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800afc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e5      	bne.n	800af96 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3314      	adds	r3, #20
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	f043 0301 	orr.w	r3, r3, #1
 800afe0:	657b      	str	r3, [r7, #84]	; 0x54
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3314      	adds	r3, #20
 800afe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afea:	63ba      	str	r2, [r7, #56]	; 0x38
 800afec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3314      	adds	r3, #20
 800b004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	617b      	str	r3, [r7, #20]
   return(result);
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	653b      	str	r3, [r7, #80]	; 0x50
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3314      	adds	r3, #20
 800b01c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b01e:	627a      	str	r2, [r7, #36]	; 0x24
 800b020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	6a39      	ldr	r1, [r7, #32]
 800b024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e5      	bne.n	800affe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3760      	adds	r7, #96	; 0x60
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	0800ac41 	.word	0x0800ac41
 800b040:	0800ad67 	.word	0x0800ad67
 800b044:	0800ad9d 	.word	0x0800ad9d

0800b048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b048:	b480      	push	{r7}
 800b04a:	b089      	sub	sp, #36	; 0x24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	330c      	adds	r3, #12
 800b056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b066:	61fb      	str	r3, [r7, #28]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	330c      	adds	r3, #12
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	61ba      	str	r2, [r7, #24]
 800b072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	6979      	ldr	r1, [r7, #20]
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	613b      	str	r3, [r7, #16]
   return(result);
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e5      	bne.n	800b050 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2220      	movs	r2, #32
 800b088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b08c:	bf00      	nop
 800b08e:	3724      	adds	r7, #36	; 0x24
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b098:	b480      	push	{r7}
 800b09a:	b095      	sub	sp, #84	; 0x54
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	330c      	adds	r3, #12
 800b0a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	330c      	adds	r3, #12
 800b0be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0c0:	643a      	str	r2, [r7, #64]	; 0x40
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e5      	bne.n	800b0a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3314      	adds	r3, #20
 800b0da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	f023 0301 	bic.w	r3, r3, #1
 800b0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3314      	adds	r3, #20
 800b0f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0fc:	e841 2300 	strex	r3, r2, [r1]
 800b100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1e5      	bne.n	800b0d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d119      	bne.n	800b144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	330c      	adds	r3, #12
 800b116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	e853 3f00 	ldrex	r3, [r3]
 800b11e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	f023 0310 	bic.w	r3, r3, #16
 800b126:	647b      	str	r3, [r7, #68]	; 0x44
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	330c      	adds	r3, #12
 800b12e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b130:	61ba      	str	r2, [r7, #24]
 800b132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b134:	6979      	ldr	r1, [r7, #20]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	e841 2300 	strex	r3, r2, [r1]
 800b13c:	613b      	str	r3, [r7, #16]
   return(result);
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1e5      	bne.n	800b110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2220      	movs	r2, #32
 800b148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b152:	bf00      	nop
 800b154:	3754      	adds	r7, #84	; 0x54
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff fd4b 	bl	800ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b17e:	bf00      	nop
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b186:	b480      	push	{r7}
 800b188:	b085      	sub	sp, #20
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b21      	cmp	r3, #33	; 0x21
 800b198:	d13e      	bne.n	800b218 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a2:	d114      	bne.n	800b1ce <UART_Transmit_IT+0x48>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d110      	bne.n	800b1ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	1c9a      	adds	r2, r3, #2
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	621a      	str	r2, [r3, #32]
 800b1cc:	e008      	b.n	800b1e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	1c59      	adds	r1, r3, #1
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6211      	str	r1, [r2, #32]
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10f      	bne.n	800b214 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b202:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b212:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	e000      	b.n	800b21a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b218:	2302      	movs	r3, #2
  }
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68da      	ldr	r2, [r3, #12]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b23c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2220      	movs	r2, #32
 800b242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff fcd0 	bl	800abec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b08c      	sub	sp, #48	; 0x30
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b22      	cmp	r3, #34	; 0x22
 800b268:	f040 80ab 	bne.w	800b3c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b274:	d117      	bne.n	800b2a6 <UART_Receive_IT+0x50>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d113      	bne.n	800b2a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b286:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b294:	b29a      	uxth	r2, r3
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29e:	1c9a      	adds	r2, r3, #2
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	629a      	str	r2, [r3, #40]	; 0x28
 800b2a4:	e026      	b.n	800b2f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b8:	d007      	beq.n	800b2ca <UART_Receive_IT+0x74>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <UART_Receive_IT+0x82>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d4:	701a      	strb	r2, [r3, #0]
 800b2d6:	e008      	b.n	800b2ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	4619      	mov	r1, r3
 800b302:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b304:	2b00      	cmp	r3, #0
 800b306:	d15a      	bne.n	800b3be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0220 	bic.w	r2, r2, #32
 800b316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	695a      	ldr	r2, [r3, #20]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 0201 	bic.w	r2, r2, #1
 800b336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2220      	movs	r2, #32
 800b33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b344:	2b01      	cmp	r3, #1
 800b346:	d135      	bne.n	800b3b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	330c      	adds	r3, #12
 800b354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	613b      	str	r3, [r7, #16]
   return(result);
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f023 0310 	bic.w	r3, r3, #16
 800b364:	627b      	str	r3, [r7, #36]	; 0x24
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	330c      	adds	r3, #12
 800b36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b36e:	623a      	str	r2, [r7, #32]
 800b370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	69f9      	ldr	r1, [r7, #28]
 800b374:	6a3a      	ldr	r2, [r7, #32]
 800b376:	e841 2300 	strex	r3, r2, [r1]
 800b37a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1e5      	bne.n	800b34e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0310 	and.w	r3, r3, #16
 800b38c:	2b10      	cmp	r3, #16
 800b38e:	d10a      	bne.n	800b3a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7ff fc3b 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
 800b3b2:	e002      	b.n	800b3ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7f8 fcb1 	bl	8003d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e002      	b.n	800b3c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e000      	b.n	800b3c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
  }
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3730      	adds	r7, #48	; 0x30
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d0:	b0c0      	sub	sp, #256	; 0x100
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e8:	68d9      	ldr	r1, [r3, #12]
 800b3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	ea40 0301 	orr.w	r3, r0, r1
 800b3f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b3f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	431a      	orrs	r2, r3
 800b404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	4313      	orrs	r3, r2
 800b414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b424:	f021 010c 	bic.w	r1, r1, #12
 800b428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b432:	430b      	orrs	r3, r1
 800b434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b446:	6999      	ldr	r1, [r3, #24]
 800b448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	ea40 0301 	orr.w	r3, r0, r1
 800b452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4b8f      	ldr	r3, [pc, #572]	; (800b698 <UART_SetConfig+0x2cc>)
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d005      	beq.n	800b46c <UART_SetConfig+0xa0>
 800b460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	4b8d      	ldr	r3, [pc, #564]	; (800b69c <UART_SetConfig+0x2d0>)
 800b468:	429a      	cmp	r2, r3
 800b46a:	d104      	bne.n	800b476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b46c:	f7fe f806 	bl	800947c <HAL_RCC_GetPCLK2Freq>
 800b470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b474:	e003      	b.n	800b47e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b476:	f7fd ffed 	bl	8009454 <HAL_RCC_GetPCLK1Freq>
 800b47a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b482:	69db      	ldr	r3, [r3, #28]
 800b484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b488:	f040 810c 	bne.w	800b6a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b48c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b490:	2200      	movs	r2, #0
 800b492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b49a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b49e:	4622      	mov	r2, r4
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	1891      	adds	r1, r2, r2
 800b4a4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b4a6:	415b      	adcs	r3, r3
 800b4a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	eb12 0801 	adds.w	r8, r2, r1
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	eb43 0901 	adc.w	r9, r3, r1
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4ce:	4690      	mov	r8, r2
 800b4d0:	4699      	mov	r9, r3
 800b4d2:	4623      	mov	r3, r4
 800b4d4:	eb18 0303 	adds.w	r3, r8, r3
 800b4d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4dc:	462b      	mov	r3, r5
 800b4de:	eb49 0303 	adc.w	r3, r9, r3
 800b4e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b4f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	18db      	adds	r3, r3, r3
 800b4fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b500:	4613      	mov	r3, r2
 800b502:	eb42 0303 	adc.w	r3, r2, r3
 800b506:	657b      	str	r3, [r7, #84]	; 0x54
 800b508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b50c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b510:	f7f5 fbc2 	bl	8000c98 <__aeabi_uldivmod>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4b61      	ldr	r3, [pc, #388]	; (800b6a0 <UART_SetConfig+0x2d4>)
 800b51a:	fba3 2302 	umull	r2, r3, r3, r2
 800b51e:	095b      	lsrs	r3, r3, #5
 800b520:	011c      	lsls	r4, r3, #4
 800b522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b526:	2200      	movs	r2, #0
 800b528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b52c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b534:	4642      	mov	r2, r8
 800b536:	464b      	mov	r3, r9
 800b538:	1891      	adds	r1, r2, r2
 800b53a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b53c:	415b      	adcs	r3, r3
 800b53e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b544:	4641      	mov	r1, r8
 800b546:	eb12 0a01 	adds.w	sl, r2, r1
 800b54a:	4649      	mov	r1, r9
 800b54c:	eb43 0b01 	adc.w	fp, r3, r1
 800b550:	f04f 0200 	mov.w	r2, #0
 800b554:	f04f 0300 	mov.w	r3, #0
 800b558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b55c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b564:	4692      	mov	sl, r2
 800b566:	469b      	mov	fp, r3
 800b568:	4643      	mov	r3, r8
 800b56a:	eb1a 0303 	adds.w	r3, sl, r3
 800b56e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b572:	464b      	mov	r3, r9
 800b574:	eb4b 0303 	adc.w	r3, fp, r3
 800b578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b58c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b590:	460b      	mov	r3, r1
 800b592:	18db      	adds	r3, r3, r3
 800b594:	643b      	str	r3, [r7, #64]	; 0x40
 800b596:	4613      	mov	r3, r2
 800b598:	eb42 0303 	adc.w	r3, r2, r3
 800b59c:	647b      	str	r3, [r7, #68]	; 0x44
 800b59e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b5a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b5a6:	f7f5 fb77 	bl	8000c98 <__aeabi_uldivmod>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	4b3b      	ldr	r3, [pc, #236]	; (800b6a0 <UART_SetConfig+0x2d4>)
 800b5b2:	fba3 2301 	umull	r2, r3, r3, r1
 800b5b6:	095b      	lsrs	r3, r3, #5
 800b5b8:	2264      	movs	r2, #100	; 0x64
 800b5ba:	fb02 f303 	mul.w	r3, r2, r3
 800b5be:	1acb      	subs	r3, r1, r3
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b5c6:	4b36      	ldr	r3, [pc, #216]	; (800b6a0 <UART_SetConfig+0x2d4>)
 800b5c8:	fba3 2302 	umull	r2, r3, r3, r2
 800b5cc:	095b      	lsrs	r3, r3, #5
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5d4:	441c      	add	r4, r3
 800b5d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b5e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b5e8:	4642      	mov	r2, r8
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	1891      	adds	r1, r2, r2
 800b5ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5f0:	415b      	adcs	r3, r3
 800b5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5f8:	4641      	mov	r1, r8
 800b5fa:	1851      	adds	r1, r2, r1
 800b5fc:	6339      	str	r1, [r7, #48]	; 0x30
 800b5fe:	4649      	mov	r1, r9
 800b600:	414b      	adcs	r3, r1
 800b602:	637b      	str	r3, [r7, #52]	; 0x34
 800b604:	f04f 0200 	mov.w	r2, #0
 800b608:	f04f 0300 	mov.w	r3, #0
 800b60c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b610:	4659      	mov	r1, fp
 800b612:	00cb      	lsls	r3, r1, #3
 800b614:	4651      	mov	r1, sl
 800b616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b61a:	4651      	mov	r1, sl
 800b61c:	00ca      	lsls	r2, r1, #3
 800b61e:	4610      	mov	r0, r2
 800b620:	4619      	mov	r1, r3
 800b622:	4603      	mov	r3, r0
 800b624:	4642      	mov	r2, r8
 800b626:	189b      	adds	r3, r3, r2
 800b628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b62c:	464b      	mov	r3, r9
 800b62e:	460a      	mov	r2, r1
 800b630:	eb42 0303 	adc.w	r3, r2, r3
 800b634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b64c:	460b      	mov	r3, r1
 800b64e:	18db      	adds	r3, r3, r3
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
 800b652:	4613      	mov	r3, r2
 800b654:	eb42 0303 	adc.w	r3, r2, r3
 800b658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b65a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b65e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b662:	f7f5 fb19 	bl	8000c98 <__aeabi_uldivmod>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <UART_SetConfig+0x2d4>)
 800b66c:	fba3 1302 	umull	r1, r3, r3, r2
 800b670:	095b      	lsrs	r3, r3, #5
 800b672:	2164      	movs	r1, #100	; 0x64
 800b674:	fb01 f303 	mul.w	r3, r1, r3
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	3332      	adds	r3, #50	; 0x32
 800b67e:	4a08      	ldr	r2, [pc, #32]	; (800b6a0 <UART_SetConfig+0x2d4>)
 800b680:	fba2 2303 	umull	r2, r3, r2, r3
 800b684:	095b      	lsrs	r3, r3, #5
 800b686:	f003 0207 	and.w	r2, r3, #7
 800b68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4422      	add	r2, r4
 800b692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b694:	e105      	b.n	800b8a2 <UART_SetConfig+0x4d6>
 800b696:	bf00      	nop
 800b698:	40011000 	.word	0x40011000
 800b69c:	40011400 	.word	0x40011400
 800b6a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b6b6:	4642      	mov	r2, r8
 800b6b8:	464b      	mov	r3, r9
 800b6ba:	1891      	adds	r1, r2, r2
 800b6bc:	6239      	str	r1, [r7, #32]
 800b6be:	415b      	adcs	r3, r3
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	1854      	adds	r4, r2, r1
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	eb43 0501 	adc.w	r5, r3, r1
 800b6d0:	f04f 0200 	mov.w	r2, #0
 800b6d4:	f04f 0300 	mov.w	r3, #0
 800b6d8:	00eb      	lsls	r3, r5, #3
 800b6da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6de:	00e2      	lsls	r2, r4, #3
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	461d      	mov	r5, r3
 800b6e4:	4643      	mov	r3, r8
 800b6e6:	18e3      	adds	r3, r4, r3
 800b6e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6ec:	464b      	mov	r3, r9
 800b6ee:	eb45 0303 	adc.w	r3, r5, r3
 800b6f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b712:	4629      	mov	r1, r5
 800b714:	008b      	lsls	r3, r1, #2
 800b716:	4621      	mov	r1, r4
 800b718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b71c:	4621      	mov	r1, r4
 800b71e:	008a      	lsls	r2, r1, #2
 800b720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b724:	f7f5 fab8 	bl	8000c98 <__aeabi_uldivmod>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4b60      	ldr	r3, [pc, #384]	; (800b8b0 <UART_SetConfig+0x4e4>)
 800b72e:	fba3 2302 	umull	r2, r3, r3, r2
 800b732:	095b      	lsrs	r3, r3, #5
 800b734:	011c      	lsls	r4, r3, #4
 800b736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b748:	4642      	mov	r2, r8
 800b74a:	464b      	mov	r3, r9
 800b74c:	1891      	adds	r1, r2, r2
 800b74e:	61b9      	str	r1, [r7, #24]
 800b750:	415b      	adcs	r3, r3
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b758:	4641      	mov	r1, r8
 800b75a:	1851      	adds	r1, r2, r1
 800b75c:	6139      	str	r1, [r7, #16]
 800b75e:	4649      	mov	r1, r9
 800b760:	414b      	adcs	r3, r1
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	f04f 0200 	mov.w	r2, #0
 800b768:	f04f 0300 	mov.w	r3, #0
 800b76c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b770:	4659      	mov	r1, fp
 800b772:	00cb      	lsls	r3, r1, #3
 800b774:	4651      	mov	r1, sl
 800b776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b77a:	4651      	mov	r1, sl
 800b77c:	00ca      	lsls	r2, r1, #3
 800b77e:	4610      	mov	r0, r2
 800b780:	4619      	mov	r1, r3
 800b782:	4603      	mov	r3, r0
 800b784:	4642      	mov	r2, r8
 800b786:	189b      	adds	r3, r3, r2
 800b788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b78c:	464b      	mov	r3, r9
 800b78e:	460a      	mov	r2, r1
 800b790:	eb42 0303 	adc.w	r3, r2, r3
 800b794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b7a4:	f04f 0200 	mov.w	r2, #0
 800b7a8:	f04f 0300 	mov.w	r3, #0
 800b7ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	008b      	lsls	r3, r1, #2
 800b7b4:	4641      	mov	r1, r8
 800b7b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7ba:	4641      	mov	r1, r8
 800b7bc:	008a      	lsls	r2, r1, #2
 800b7be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b7c2:	f7f5 fa69 	bl	8000c98 <__aeabi_uldivmod>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	4b39      	ldr	r3, [pc, #228]	; (800b8b0 <UART_SetConfig+0x4e4>)
 800b7cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b7d0:	095b      	lsrs	r3, r3, #5
 800b7d2:	2164      	movs	r1, #100	; 0x64
 800b7d4:	fb01 f303 	mul.w	r3, r1, r3
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	3332      	adds	r3, #50	; 0x32
 800b7de:	4a34      	ldr	r2, [pc, #208]	; (800b8b0 <UART_SetConfig+0x4e4>)
 800b7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e4:	095b      	lsrs	r3, r3, #5
 800b7e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ea:	441c      	add	r4, r3
 800b7ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	673b      	str	r3, [r7, #112]	; 0x70
 800b7f4:	677a      	str	r2, [r7, #116]	; 0x74
 800b7f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b7fa:	4642      	mov	r2, r8
 800b7fc:	464b      	mov	r3, r9
 800b7fe:	1891      	adds	r1, r2, r2
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	415b      	adcs	r3, r3
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b80a:	4641      	mov	r1, r8
 800b80c:	1851      	adds	r1, r2, r1
 800b80e:	6039      	str	r1, [r7, #0]
 800b810:	4649      	mov	r1, r9
 800b812:	414b      	adcs	r3, r1
 800b814:	607b      	str	r3, [r7, #4]
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b822:	4659      	mov	r1, fp
 800b824:	00cb      	lsls	r3, r1, #3
 800b826:	4651      	mov	r1, sl
 800b828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b82c:	4651      	mov	r1, sl
 800b82e:	00ca      	lsls	r2, r1, #3
 800b830:	4610      	mov	r0, r2
 800b832:	4619      	mov	r1, r3
 800b834:	4603      	mov	r3, r0
 800b836:	4642      	mov	r2, r8
 800b838:	189b      	adds	r3, r3, r2
 800b83a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b83c:	464b      	mov	r3, r9
 800b83e:	460a      	mov	r2, r1
 800b840:	eb42 0303 	adc.w	r3, r2, r3
 800b844:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	663b      	str	r3, [r7, #96]	; 0x60
 800b850:	667a      	str	r2, [r7, #100]	; 0x64
 800b852:	f04f 0200 	mov.w	r2, #0
 800b856:	f04f 0300 	mov.w	r3, #0
 800b85a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b85e:	4649      	mov	r1, r9
 800b860:	008b      	lsls	r3, r1, #2
 800b862:	4641      	mov	r1, r8
 800b864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b868:	4641      	mov	r1, r8
 800b86a:	008a      	lsls	r2, r1, #2
 800b86c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b870:	f7f5 fa12 	bl	8000c98 <__aeabi_uldivmod>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <UART_SetConfig+0x4e4>)
 800b87a:	fba3 1302 	umull	r1, r3, r3, r2
 800b87e:	095b      	lsrs	r3, r3, #5
 800b880:	2164      	movs	r1, #100	; 0x64
 800b882:	fb01 f303 	mul.w	r3, r1, r3
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	3332      	adds	r3, #50	; 0x32
 800b88c:	4a08      	ldr	r2, [pc, #32]	; (800b8b0 <UART_SetConfig+0x4e4>)
 800b88e:	fba2 2303 	umull	r2, r3, r2, r3
 800b892:	095b      	lsrs	r3, r3, #5
 800b894:	f003 020f 	and.w	r2, r3, #15
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4422      	add	r2, r4
 800b8a0:	609a      	str	r2, [r3, #8]
}
 800b8a2:	bf00      	nop
 800b8a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8ae:	bf00      	nop
 800b8b0:	51eb851f 	.word	0x51eb851f

0800b8b4 <__errno>:
 800b8b4:	4b01      	ldr	r3, [pc, #4]	; (800b8bc <__errno+0x8>)
 800b8b6:	6818      	ldr	r0, [r3, #0]
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	20000254 	.word	0x20000254

0800b8c0 <__libc_init_array>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	4d0d      	ldr	r5, [pc, #52]	; (800b8f8 <__libc_init_array+0x38>)
 800b8c4:	4c0d      	ldr	r4, [pc, #52]	; (800b8fc <__libc_init_array+0x3c>)
 800b8c6:	1b64      	subs	r4, r4, r5
 800b8c8:	10a4      	asrs	r4, r4, #2
 800b8ca:	2600      	movs	r6, #0
 800b8cc:	42a6      	cmp	r6, r4
 800b8ce:	d109      	bne.n	800b8e4 <__libc_init_array+0x24>
 800b8d0:	4d0b      	ldr	r5, [pc, #44]	; (800b900 <__libc_init_array+0x40>)
 800b8d2:	4c0c      	ldr	r4, [pc, #48]	; (800b904 <__libc_init_array+0x44>)
 800b8d4:	f002 ff88 	bl	800e7e8 <_init>
 800b8d8:	1b64      	subs	r4, r4, r5
 800b8da:	10a4      	asrs	r4, r4, #2
 800b8dc:	2600      	movs	r6, #0
 800b8de:	42a6      	cmp	r6, r4
 800b8e0:	d105      	bne.n	800b8ee <__libc_init_array+0x2e>
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}
 800b8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8e8:	4798      	blx	r3
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	e7ee      	b.n	800b8cc <__libc_init_array+0xc>
 800b8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f2:	4798      	blx	r3
 800b8f4:	3601      	adds	r6, #1
 800b8f6:	e7f2      	b.n	800b8de <__libc_init_array+0x1e>
 800b8f8:	0801a3cc 	.word	0x0801a3cc
 800b8fc:	0801a3cc 	.word	0x0801a3cc
 800b900:	0801a3cc 	.word	0x0801a3cc
 800b904:	0801a3d0 	.word	0x0801a3d0

0800b908 <memset>:
 800b908:	4402      	add	r2, r0
 800b90a:	4603      	mov	r3, r0
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d100      	bne.n	800b912 <memset+0xa>
 800b910:	4770      	bx	lr
 800b912:	f803 1b01 	strb.w	r1, [r3], #1
 800b916:	e7f9      	b.n	800b90c <memset+0x4>

0800b918 <__cvt>:
 800b918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b91c:	ec55 4b10 	vmov	r4, r5, d0
 800b920:	2d00      	cmp	r5, #0
 800b922:	460e      	mov	r6, r1
 800b924:	4619      	mov	r1, r3
 800b926:	462b      	mov	r3, r5
 800b928:	bfbb      	ittet	lt
 800b92a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b92e:	461d      	movlt	r5, r3
 800b930:	2300      	movge	r3, #0
 800b932:	232d      	movlt	r3, #45	; 0x2d
 800b934:	700b      	strb	r3, [r1, #0]
 800b936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b93c:	4691      	mov	r9, r2
 800b93e:	f023 0820 	bic.w	r8, r3, #32
 800b942:	bfbc      	itt	lt
 800b944:	4622      	movlt	r2, r4
 800b946:	4614      	movlt	r4, r2
 800b948:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b94c:	d005      	beq.n	800b95a <__cvt+0x42>
 800b94e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b952:	d100      	bne.n	800b956 <__cvt+0x3e>
 800b954:	3601      	adds	r6, #1
 800b956:	2102      	movs	r1, #2
 800b958:	e000      	b.n	800b95c <__cvt+0x44>
 800b95a:	2103      	movs	r1, #3
 800b95c:	ab03      	add	r3, sp, #12
 800b95e:	9301      	str	r3, [sp, #4]
 800b960:	ab02      	add	r3, sp, #8
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	ec45 4b10 	vmov	d0, r4, r5
 800b968:	4653      	mov	r3, sl
 800b96a:	4632      	mov	r2, r6
 800b96c:	f000 fcfc 	bl	800c368 <_dtoa_r>
 800b970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b974:	4607      	mov	r7, r0
 800b976:	d102      	bne.n	800b97e <__cvt+0x66>
 800b978:	f019 0f01 	tst.w	r9, #1
 800b97c:	d022      	beq.n	800b9c4 <__cvt+0xac>
 800b97e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b982:	eb07 0906 	add.w	r9, r7, r6
 800b986:	d110      	bne.n	800b9aa <__cvt+0x92>
 800b988:	783b      	ldrb	r3, [r7, #0]
 800b98a:	2b30      	cmp	r3, #48	; 0x30
 800b98c:	d10a      	bne.n	800b9a4 <__cvt+0x8c>
 800b98e:	2200      	movs	r2, #0
 800b990:	2300      	movs	r3, #0
 800b992:	4620      	mov	r0, r4
 800b994:	4629      	mov	r1, r5
 800b996:	f7f5 f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b99a:	b918      	cbnz	r0, 800b9a4 <__cvt+0x8c>
 800b99c:	f1c6 0601 	rsb	r6, r6, #1
 800b9a0:	f8ca 6000 	str.w	r6, [sl]
 800b9a4:	f8da 3000 	ldr.w	r3, [sl]
 800b9a8:	4499      	add	r9, r3
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f5 f891 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9b6:	b108      	cbz	r0, 800b9bc <__cvt+0xa4>
 800b9b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9bc:	2230      	movs	r2, #48	; 0x30
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	454b      	cmp	r3, r9
 800b9c2:	d307      	bcc.n	800b9d4 <__cvt+0xbc>
 800b9c4:	9b03      	ldr	r3, [sp, #12]
 800b9c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9c8:	1bdb      	subs	r3, r3, r7
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	b004      	add	sp, #16
 800b9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d4:	1c59      	adds	r1, r3, #1
 800b9d6:	9103      	str	r1, [sp, #12]
 800b9d8:	701a      	strb	r2, [r3, #0]
 800b9da:	e7f0      	b.n	800b9be <__cvt+0xa6>

0800b9dc <__exponent>:
 800b9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	bfb8      	it	lt
 800b9e4:	4249      	neglt	r1, r1
 800b9e6:	f803 2b02 	strb.w	r2, [r3], #2
 800b9ea:	bfb4      	ite	lt
 800b9ec:	222d      	movlt	r2, #45	; 0x2d
 800b9ee:	222b      	movge	r2, #43	; 0x2b
 800b9f0:	2909      	cmp	r1, #9
 800b9f2:	7042      	strb	r2, [r0, #1]
 800b9f4:	dd2a      	ble.n	800ba4c <__exponent+0x70>
 800b9f6:	f10d 0407 	add.w	r4, sp, #7
 800b9fa:	46a4      	mov	ip, r4
 800b9fc:	270a      	movs	r7, #10
 800b9fe:	46a6      	mov	lr, r4
 800ba00:	460a      	mov	r2, r1
 800ba02:	fb91 f6f7 	sdiv	r6, r1, r7
 800ba06:	fb07 1516 	mls	r5, r7, r6, r1
 800ba0a:	3530      	adds	r5, #48	; 0x30
 800ba0c:	2a63      	cmp	r2, #99	; 0x63
 800ba0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ba12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ba16:	4631      	mov	r1, r6
 800ba18:	dcf1      	bgt.n	800b9fe <__exponent+0x22>
 800ba1a:	3130      	adds	r1, #48	; 0x30
 800ba1c:	f1ae 0502 	sub.w	r5, lr, #2
 800ba20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ba24:	1c44      	adds	r4, r0, #1
 800ba26:	4629      	mov	r1, r5
 800ba28:	4561      	cmp	r1, ip
 800ba2a:	d30a      	bcc.n	800ba42 <__exponent+0x66>
 800ba2c:	f10d 0209 	add.w	r2, sp, #9
 800ba30:	eba2 020e 	sub.w	r2, r2, lr
 800ba34:	4565      	cmp	r5, ip
 800ba36:	bf88      	it	hi
 800ba38:	2200      	movhi	r2, #0
 800ba3a:	4413      	add	r3, r2
 800ba3c:	1a18      	subs	r0, r3, r0
 800ba3e:	b003      	add	sp, #12
 800ba40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba4a:	e7ed      	b.n	800ba28 <__exponent+0x4c>
 800ba4c:	2330      	movs	r3, #48	; 0x30
 800ba4e:	3130      	adds	r1, #48	; 0x30
 800ba50:	7083      	strb	r3, [r0, #2]
 800ba52:	70c1      	strb	r1, [r0, #3]
 800ba54:	1d03      	adds	r3, r0, #4
 800ba56:	e7f1      	b.n	800ba3c <__exponent+0x60>

0800ba58 <_printf_float>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	ed2d 8b02 	vpush	{d8}
 800ba60:	b08d      	sub	sp, #52	; 0x34
 800ba62:	460c      	mov	r4, r1
 800ba64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba68:	4616      	mov	r6, r2
 800ba6a:	461f      	mov	r7, r3
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	f001 fa69 	bl	800cf44 <_localeconv_r>
 800ba72:	f8d0 a000 	ldr.w	sl, [r0]
 800ba76:	4650      	mov	r0, sl
 800ba78:	f7f4 fbb2 	bl	80001e0 <strlen>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	9305      	str	r3, [sp, #20]
 800ba84:	f8d8 3000 	ldr.w	r3, [r8]
 800ba88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba8c:	3307      	adds	r3, #7
 800ba8e:	f023 0307 	bic.w	r3, r3, #7
 800ba92:	f103 0208 	add.w	r2, r3, #8
 800ba96:	f8c8 2000 	str.w	r2, [r8]
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800baa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800baa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800baaa:	9307      	str	r3, [sp, #28]
 800baac:	f8cd 8018 	str.w	r8, [sp, #24]
 800bab0:	ee08 0a10 	vmov	s16, r0
 800bab4:	4b9f      	ldr	r3, [pc, #636]	; (800bd34 <_printf_float+0x2dc>)
 800bab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	f7f5 f83d 	bl	8000b3c <__aeabi_dcmpun>
 800bac2:	bb88      	cbnz	r0, 800bb28 <_printf_float+0xd0>
 800bac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bac8:	4b9a      	ldr	r3, [pc, #616]	; (800bd34 <_printf_float+0x2dc>)
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	f7f5 f817 	bl	8000b00 <__aeabi_dcmple>
 800bad2:	bb48      	cbnz	r0, 800bb28 <_printf_float+0xd0>
 800bad4:	2200      	movs	r2, #0
 800bad6:	2300      	movs	r3, #0
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	f7f5 f806 	bl	8000aec <__aeabi_dcmplt>
 800bae0:	b110      	cbz	r0, 800bae8 <_printf_float+0x90>
 800bae2:	232d      	movs	r3, #45	; 0x2d
 800bae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bae8:	4b93      	ldr	r3, [pc, #588]	; (800bd38 <_printf_float+0x2e0>)
 800baea:	4894      	ldr	r0, [pc, #592]	; (800bd3c <_printf_float+0x2e4>)
 800baec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800baf0:	bf94      	ite	ls
 800baf2:	4698      	movls	r8, r3
 800baf4:	4680      	movhi	r8, r0
 800baf6:	2303      	movs	r3, #3
 800baf8:	6123      	str	r3, [r4, #16]
 800bafa:	9b05      	ldr	r3, [sp, #20]
 800bafc:	f023 0204 	bic.w	r2, r3, #4
 800bb00:	6022      	str	r2, [r4, #0]
 800bb02:	f04f 0900 	mov.w	r9, #0
 800bb06:	9700      	str	r7, [sp, #0]
 800bb08:	4633      	mov	r3, r6
 800bb0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 f9d8 	bl	800bec4 <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	f040 8090 	bne.w	800bc3a <_printf_float+0x1e2>
 800bb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1e:	b00d      	add	sp, #52	; 0x34
 800bb20:	ecbd 8b02 	vpop	{d8}
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f5 f804 	bl	8000b3c <__aeabi_dcmpun>
 800bb34:	b140      	cbz	r0, 800bb48 <_printf_float+0xf0>
 800bb36:	464b      	mov	r3, r9
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bfbc      	itt	lt
 800bb3c:	232d      	movlt	r3, #45	; 0x2d
 800bb3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb42:	487f      	ldr	r0, [pc, #508]	; (800bd40 <_printf_float+0x2e8>)
 800bb44:	4b7f      	ldr	r3, [pc, #508]	; (800bd44 <_printf_float+0x2ec>)
 800bb46:	e7d1      	b.n	800baec <_printf_float+0x94>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb4e:	9206      	str	r2, [sp, #24]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	d13f      	bne.n	800bbd4 <_printf_float+0x17c>
 800bb54:	2306      	movs	r3, #6
 800bb56:	6063      	str	r3, [r4, #4]
 800bb58:	9b05      	ldr	r3, [sp, #20]
 800bb5a:	6861      	ldr	r1, [r4, #4]
 800bb5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb60:	2300      	movs	r3, #0
 800bb62:	9303      	str	r3, [sp, #12]
 800bb64:	ab0a      	add	r3, sp, #40	; 0x28
 800bb66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb6a:	ab09      	add	r3, sp, #36	; 0x24
 800bb6c:	ec49 8b10 	vmov	d0, r8, r9
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7ff fecd 	bl	800b918 <__cvt>
 800bb7e:	9b06      	ldr	r3, [sp, #24]
 800bb80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb82:	2b47      	cmp	r3, #71	; 0x47
 800bb84:	4680      	mov	r8, r0
 800bb86:	d108      	bne.n	800bb9a <_printf_float+0x142>
 800bb88:	1cc8      	adds	r0, r1, #3
 800bb8a:	db02      	blt.n	800bb92 <_printf_float+0x13a>
 800bb8c:	6863      	ldr	r3, [r4, #4]
 800bb8e:	4299      	cmp	r1, r3
 800bb90:	dd41      	ble.n	800bc16 <_printf_float+0x1be>
 800bb92:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb96:	fa5f fb8b 	uxtb.w	fp, fp
 800bb9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb9e:	d820      	bhi.n	800bbe2 <_printf_float+0x18a>
 800bba0:	3901      	subs	r1, #1
 800bba2:	465a      	mov	r2, fp
 800bba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bba8:	9109      	str	r1, [sp, #36]	; 0x24
 800bbaa:	f7ff ff17 	bl	800b9dc <__exponent>
 800bbae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbb0:	1813      	adds	r3, r2, r0
 800bbb2:	2a01      	cmp	r2, #1
 800bbb4:	4681      	mov	r9, r0
 800bbb6:	6123      	str	r3, [r4, #16]
 800bbb8:	dc02      	bgt.n	800bbc0 <_printf_float+0x168>
 800bbba:	6822      	ldr	r2, [r4, #0]
 800bbbc:	07d2      	lsls	r2, r2, #31
 800bbbe:	d501      	bpl.n	800bbc4 <_printf_float+0x16c>
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	6123      	str	r3, [r4, #16]
 800bbc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d09c      	beq.n	800bb06 <_printf_float+0xae>
 800bbcc:	232d      	movs	r3, #45	; 0x2d
 800bbce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd2:	e798      	b.n	800bb06 <_printf_float+0xae>
 800bbd4:	9a06      	ldr	r2, [sp, #24]
 800bbd6:	2a47      	cmp	r2, #71	; 0x47
 800bbd8:	d1be      	bne.n	800bb58 <_printf_float+0x100>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1bc      	bne.n	800bb58 <_printf_float+0x100>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e7b9      	b.n	800bb56 <_printf_float+0xfe>
 800bbe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bbe6:	d118      	bne.n	800bc1a <_printf_float+0x1c2>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	dd0b      	ble.n	800bc06 <_printf_float+0x1ae>
 800bbee:	6121      	str	r1, [r4, #16]
 800bbf0:	b913      	cbnz	r3, 800bbf8 <_printf_float+0x1a0>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	07d0      	lsls	r0, r2, #31
 800bbf6:	d502      	bpl.n	800bbfe <_printf_float+0x1a6>
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	440b      	add	r3, r1
 800bbfc:	6123      	str	r3, [r4, #16]
 800bbfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc00:	f04f 0900 	mov.w	r9, #0
 800bc04:	e7de      	b.n	800bbc4 <_printf_float+0x16c>
 800bc06:	b913      	cbnz	r3, 800bc0e <_printf_float+0x1b6>
 800bc08:	6822      	ldr	r2, [r4, #0]
 800bc0a:	07d2      	lsls	r2, r2, #31
 800bc0c:	d501      	bpl.n	800bc12 <_printf_float+0x1ba>
 800bc0e:	3302      	adds	r3, #2
 800bc10:	e7f4      	b.n	800bbfc <_printf_float+0x1a4>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e7f2      	b.n	800bbfc <_printf_float+0x1a4>
 800bc16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bc1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc1c:	4299      	cmp	r1, r3
 800bc1e:	db05      	blt.n	800bc2c <_printf_float+0x1d4>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	6121      	str	r1, [r4, #16]
 800bc24:	07d8      	lsls	r0, r3, #31
 800bc26:	d5ea      	bpl.n	800bbfe <_printf_float+0x1a6>
 800bc28:	1c4b      	adds	r3, r1, #1
 800bc2a:	e7e7      	b.n	800bbfc <_printf_float+0x1a4>
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	bfd4      	ite	le
 800bc30:	f1c1 0202 	rsble	r2, r1, #2
 800bc34:	2201      	movgt	r2, #1
 800bc36:	4413      	add	r3, r2
 800bc38:	e7e0      	b.n	800bbfc <_printf_float+0x1a4>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	055a      	lsls	r2, r3, #21
 800bc3e:	d407      	bmi.n	800bc50 <_printf_float+0x1f8>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	4642      	mov	r2, r8
 800bc44:	4631      	mov	r1, r6
 800bc46:	4628      	mov	r0, r5
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	d12c      	bne.n	800bca8 <_printf_float+0x250>
 800bc4e:	e764      	b.n	800bb1a <_printf_float+0xc2>
 800bc50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc54:	f240 80e0 	bls.w	800be18 <_printf_float+0x3c0>
 800bc58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 ff3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d034      	beq.n	800bcd2 <_printf_float+0x27a>
 800bc68:	4a37      	ldr	r2, [pc, #220]	; (800bd48 <_printf_float+0x2f0>)
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f af51 	beq.w	800bb1a <_printf_float+0xc2>
 800bc78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	db02      	blt.n	800bc86 <_printf_float+0x22e>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	07d8      	lsls	r0, r3, #31
 800bc84:	d510      	bpl.n	800bca8 <_printf_float+0x250>
 800bc86:	ee18 3a10 	vmov	r3, s16
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	4628      	mov	r0, r5
 800bc90:	47b8      	blx	r7
 800bc92:	3001      	adds	r0, #1
 800bc94:	f43f af41 	beq.w	800bb1a <_printf_float+0xc2>
 800bc98:	f04f 0800 	mov.w	r8, #0
 800bc9c:	f104 091a 	add.w	r9, r4, #26
 800bca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca2:	3b01      	subs	r3, #1
 800bca4:	4543      	cmp	r3, r8
 800bca6:	dc09      	bgt.n	800bcbc <_printf_float+0x264>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	079b      	lsls	r3, r3, #30
 800bcac:	f100 8105 	bmi.w	800beba <_printf_float+0x462>
 800bcb0:	68e0      	ldr	r0, [r4, #12]
 800bcb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb4:	4298      	cmp	r0, r3
 800bcb6:	bfb8      	it	lt
 800bcb8:	4618      	movlt	r0, r3
 800bcba:	e730      	b.n	800bb1e <_printf_float+0xc6>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	464a      	mov	r2, r9
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b8      	blx	r7
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f43f af27 	beq.w	800bb1a <_printf_float+0xc2>
 800bccc:	f108 0801 	add.w	r8, r8, #1
 800bcd0:	e7e6      	b.n	800bca0 <_printf_float+0x248>
 800bcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dc39      	bgt.n	800bd4c <_printf_float+0x2f4>
 800bcd8:	4a1b      	ldr	r2, [pc, #108]	; (800bd48 <_printf_float+0x2f0>)
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4628      	mov	r0, r5
 800bce0:	47b8      	blx	r7
 800bce2:	3001      	adds	r0, #1
 800bce4:	f43f af19 	beq.w	800bb1a <_printf_float+0xc2>
 800bce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcec:	4313      	orrs	r3, r2
 800bcee:	d102      	bne.n	800bcf6 <_printf_float+0x29e>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	07d9      	lsls	r1, r3, #31
 800bcf4:	d5d8      	bpl.n	800bca8 <_printf_float+0x250>
 800bcf6:	ee18 3a10 	vmov	r3, s16
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	47b8      	blx	r7
 800bd02:	3001      	adds	r0, #1
 800bd04:	f43f af09 	beq.w	800bb1a <_printf_float+0xc2>
 800bd08:	f04f 0900 	mov.w	r9, #0
 800bd0c:	f104 0a1a 	add.w	sl, r4, #26
 800bd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd12:	425b      	negs	r3, r3
 800bd14:	454b      	cmp	r3, r9
 800bd16:	dc01      	bgt.n	800bd1c <_printf_float+0x2c4>
 800bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1a:	e792      	b.n	800bc42 <_printf_float+0x1ea>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	4652      	mov	r2, sl
 800bd20:	4631      	mov	r1, r6
 800bd22:	4628      	mov	r0, r5
 800bd24:	47b8      	blx	r7
 800bd26:	3001      	adds	r0, #1
 800bd28:	f43f aef7 	beq.w	800bb1a <_printf_float+0xc2>
 800bd2c:	f109 0901 	add.w	r9, r9, #1
 800bd30:	e7ee      	b.n	800bd10 <_printf_float+0x2b8>
 800bd32:	bf00      	nop
 800bd34:	7fefffff 	.word	0x7fefffff
 800bd38:	08019fec 	.word	0x08019fec
 800bd3c:	08019ff0 	.word	0x08019ff0
 800bd40:	08019ff8 	.word	0x08019ff8
 800bd44:	08019ff4 	.word	0x08019ff4
 800bd48:	08019ffc 	.word	0x08019ffc
 800bd4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd50:	429a      	cmp	r2, r3
 800bd52:	bfa8      	it	ge
 800bd54:	461a      	movge	r2, r3
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	4691      	mov	r9, r2
 800bd5a:	dc37      	bgt.n	800bdcc <_printf_float+0x374>
 800bd5c:	f04f 0b00 	mov.w	fp, #0
 800bd60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd64:	f104 021a 	add.w	r2, r4, #26
 800bd68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd6a:	9305      	str	r3, [sp, #20]
 800bd6c:	eba3 0309 	sub.w	r3, r3, r9
 800bd70:	455b      	cmp	r3, fp
 800bd72:	dc33      	bgt.n	800bddc <_printf_float+0x384>
 800bd74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	db3b      	blt.n	800bdf4 <_printf_float+0x39c>
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	07da      	lsls	r2, r3, #31
 800bd80:	d438      	bmi.n	800bdf4 <_printf_float+0x39c>
 800bd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd84:	9a05      	ldr	r2, [sp, #20]
 800bd86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd88:	1a9a      	subs	r2, r3, r2
 800bd8a:	eba3 0901 	sub.w	r9, r3, r1
 800bd8e:	4591      	cmp	r9, r2
 800bd90:	bfa8      	it	ge
 800bd92:	4691      	movge	r9, r2
 800bd94:	f1b9 0f00 	cmp.w	r9, #0
 800bd98:	dc35      	bgt.n	800be06 <_printf_float+0x3ae>
 800bd9a:	f04f 0800 	mov.w	r8, #0
 800bd9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bda2:	f104 0a1a 	add.w	sl, r4, #26
 800bda6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	eba3 0309 	sub.w	r3, r3, r9
 800bdb0:	4543      	cmp	r3, r8
 800bdb2:	f77f af79 	ble.w	800bca8 <_printf_float+0x250>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4652      	mov	r2, sl
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	f43f aeaa 	beq.w	800bb1a <_printf_float+0xc2>
 800bdc6:	f108 0801 	add.w	r8, r8, #1
 800bdca:	e7ec      	b.n	800bda6 <_printf_float+0x34e>
 800bdcc:	4613      	mov	r3, r2
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b8      	blx	r7
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d1c0      	bne.n	800bd5c <_printf_float+0x304>
 800bdda:	e69e      	b.n	800bb1a <_printf_float+0xc2>
 800bddc:	2301      	movs	r3, #1
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	9205      	str	r2, [sp, #20]
 800bde4:	47b8      	blx	r7
 800bde6:	3001      	adds	r0, #1
 800bde8:	f43f ae97 	beq.w	800bb1a <_printf_float+0xc2>
 800bdec:	9a05      	ldr	r2, [sp, #20]
 800bdee:	f10b 0b01 	add.w	fp, fp, #1
 800bdf2:	e7b9      	b.n	800bd68 <_printf_float+0x310>
 800bdf4:	ee18 3a10 	vmov	r3, s16
 800bdf8:	4652      	mov	r2, sl
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	47b8      	blx	r7
 800be00:	3001      	adds	r0, #1
 800be02:	d1be      	bne.n	800bd82 <_printf_float+0x32a>
 800be04:	e689      	b.n	800bb1a <_printf_float+0xc2>
 800be06:	9a05      	ldr	r2, [sp, #20]
 800be08:	464b      	mov	r3, r9
 800be0a:	4442      	add	r2, r8
 800be0c:	4631      	mov	r1, r6
 800be0e:	4628      	mov	r0, r5
 800be10:	47b8      	blx	r7
 800be12:	3001      	adds	r0, #1
 800be14:	d1c1      	bne.n	800bd9a <_printf_float+0x342>
 800be16:	e680      	b.n	800bb1a <_printf_float+0xc2>
 800be18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be1a:	2a01      	cmp	r2, #1
 800be1c:	dc01      	bgt.n	800be22 <_printf_float+0x3ca>
 800be1e:	07db      	lsls	r3, r3, #31
 800be20:	d538      	bpl.n	800be94 <_printf_float+0x43c>
 800be22:	2301      	movs	r3, #1
 800be24:	4642      	mov	r2, r8
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae74 	beq.w	800bb1a <_printf_float+0xc2>
 800be32:	ee18 3a10 	vmov	r3, s16
 800be36:	4652      	mov	r2, sl
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b8      	blx	r7
 800be3e:	3001      	adds	r0, #1
 800be40:	f43f ae6b 	beq.w	800bb1a <_printf_float+0xc2>
 800be44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be48:	2200      	movs	r2, #0
 800be4a:	2300      	movs	r3, #0
 800be4c:	f7f4 fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 800be50:	b9d8      	cbnz	r0, 800be8a <_printf_float+0x432>
 800be52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be54:	f108 0201 	add.w	r2, r8, #1
 800be58:	3b01      	subs	r3, #1
 800be5a:	4631      	mov	r1, r6
 800be5c:	4628      	mov	r0, r5
 800be5e:	47b8      	blx	r7
 800be60:	3001      	adds	r0, #1
 800be62:	d10e      	bne.n	800be82 <_printf_float+0x42a>
 800be64:	e659      	b.n	800bb1a <_printf_float+0xc2>
 800be66:	2301      	movs	r3, #1
 800be68:	4652      	mov	r2, sl
 800be6a:	4631      	mov	r1, r6
 800be6c:	4628      	mov	r0, r5
 800be6e:	47b8      	blx	r7
 800be70:	3001      	adds	r0, #1
 800be72:	f43f ae52 	beq.w	800bb1a <_printf_float+0xc2>
 800be76:	f108 0801 	add.w	r8, r8, #1
 800be7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7c:	3b01      	subs	r3, #1
 800be7e:	4543      	cmp	r3, r8
 800be80:	dcf1      	bgt.n	800be66 <_printf_float+0x40e>
 800be82:	464b      	mov	r3, r9
 800be84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be88:	e6dc      	b.n	800bc44 <_printf_float+0x1ec>
 800be8a:	f04f 0800 	mov.w	r8, #0
 800be8e:	f104 0a1a 	add.w	sl, r4, #26
 800be92:	e7f2      	b.n	800be7a <_printf_float+0x422>
 800be94:	2301      	movs	r3, #1
 800be96:	4642      	mov	r2, r8
 800be98:	e7df      	b.n	800be5a <_printf_float+0x402>
 800be9a:	2301      	movs	r3, #1
 800be9c:	464a      	mov	r2, r9
 800be9e:	4631      	mov	r1, r6
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b8      	blx	r7
 800bea4:	3001      	adds	r0, #1
 800bea6:	f43f ae38 	beq.w	800bb1a <_printf_float+0xc2>
 800beaa:	f108 0801 	add.w	r8, r8, #1
 800beae:	68e3      	ldr	r3, [r4, #12]
 800beb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800beb2:	1a5b      	subs	r3, r3, r1
 800beb4:	4543      	cmp	r3, r8
 800beb6:	dcf0      	bgt.n	800be9a <_printf_float+0x442>
 800beb8:	e6fa      	b.n	800bcb0 <_printf_float+0x258>
 800beba:	f04f 0800 	mov.w	r8, #0
 800bebe:	f104 0919 	add.w	r9, r4, #25
 800bec2:	e7f4      	b.n	800beae <_printf_float+0x456>

0800bec4 <_printf_common>:
 800bec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	4616      	mov	r6, r2
 800beca:	4699      	mov	r9, r3
 800becc:	688a      	ldr	r2, [r1, #8]
 800bece:	690b      	ldr	r3, [r1, #16]
 800bed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bed4:	4293      	cmp	r3, r2
 800bed6:	bfb8      	it	lt
 800bed8:	4613      	movlt	r3, r2
 800beda:	6033      	str	r3, [r6, #0]
 800bedc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bee0:	4607      	mov	r7, r0
 800bee2:	460c      	mov	r4, r1
 800bee4:	b10a      	cbz	r2, 800beea <_printf_common+0x26>
 800bee6:	3301      	adds	r3, #1
 800bee8:	6033      	str	r3, [r6, #0]
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	0699      	lsls	r1, r3, #26
 800beee:	bf42      	ittt	mi
 800bef0:	6833      	ldrmi	r3, [r6, #0]
 800bef2:	3302      	addmi	r3, #2
 800bef4:	6033      	strmi	r3, [r6, #0]
 800bef6:	6825      	ldr	r5, [r4, #0]
 800bef8:	f015 0506 	ands.w	r5, r5, #6
 800befc:	d106      	bne.n	800bf0c <_printf_common+0x48>
 800befe:	f104 0a19 	add.w	sl, r4, #25
 800bf02:	68e3      	ldr	r3, [r4, #12]
 800bf04:	6832      	ldr	r2, [r6, #0]
 800bf06:	1a9b      	subs	r3, r3, r2
 800bf08:	42ab      	cmp	r3, r5
 800bf0a:	dc26      	bgt.n	800bf5a <_printf_common+0x96>
 800bf0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf10:	1e13      	subs	r3, r2, #0
 800bf12:	6822      	ldr	r2, [r4, #0]
 800bf14:	bf18      	it	ne
 800bf16:	2301      	movne	r3, #1
 800bf18:	0692      	lsls	r2, r2, #26
 800bf1a:	d42b      	bmi.n	800bf74 <_printf_common+0xb0>
 800bf1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf20:	4649      	mov	r1, r9
 800bf22:	4638      	mov	r0, r7
 800bf24:	47c0      	blx	r8
 800bf26:	3001      	adds	r0, #1
 800bf28:	d01e      	beq.n	800bf68 <_printf_common+0xa4>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	68e5      	ldr	r5, [r4, #12]
 800bf2e:	6832      	ldr	r2, [r6, #0]
 800bf30:	f003 0306 	and.w	r3, r3, #6
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	bf08      	it	eq
 800bf38:	1aad      	subeq	r5, r5, r2
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	bf0c      	ite	eq
 800bf40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf44:	2500      	movne	r5, #0
 800bf46:	4293      	cmp	r3, r2
 800bf48:	bfc4      	itt	gt
 800bf4a:	1a9b      	subgt	r3, r3, r2
 800bf4c:	18ed      	addgt	r5, r5, r3
 800bf4e:	2600      	movs	r6, #0
 800bf50:	341a      	adds	r4, #26
 800bf52:	42b5      	cmp	r5, r6
 800bf54:	d11a      	bne.n	800bf8c <_printf_common+0xc8>
 800bf56:	2000      	movs	r0, #0
 800bf58:	e008      	b.n	800bf6c <_printf_common+0xa8>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	4652      	mov	r2, sl
 800bf5e:	4649      	mov	r1, r9
 800bf60:	4638      	mov	r0, r7
 800bf62:	47c0      	blx	r8
 800bf64:	3001      	adds	r0, #1
 800bf66:	d103      	bne.n	800bf70 <_printf_common+0xac>
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf70:	3501      	adds	r5, #1
 800bf72:	e7c6      	b.n	800bf02 <_printf_common+0x3e>
 800bf74:	18e1      	adds	r1, r4, r3
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	2030      	movs	r0, #48	; 0x30
 800bf7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf7e:	4422      	add	r2, r4
 800bf80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf88:	3302      	adds	r3, #2
 800bf8a:	e7c7      	b.n	800bf1c <_printf_common+0x58>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	4622      	mov	r2, r4
 800bf90:	4649      	mov	r1, r9
 800bf92:	4638      	mov	r0, r7
 800bf94:	47c0      	blx	r8
 800bf96:	3001      	adds	r0, #1
 800bf98:	d0e6      	beq.n	800bf68 <_printf_common+0xa4>
 800bf9a:	3601      	adds	r6, #1
 800bf9c:	e7d9      	b.n	800bf52 <_printf_common+0x8e>
	...

0800bfa0 <_printf_i>:
 800bfa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa4:	7e0f      	ldrb	r7, [r1, #24]
 800bfa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfa8:	2f78      	cmp	r7, #120	; 0x78
 800bfaa:	4691      	mov	r9, r2
 800bfac:	4680      	mov	r8, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	469a      	mov	sl, r3
 800bfb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfb6:	d807      	bhi.n	800bfc8 <_printf_i+0x28>
 800bfb8:	2f62      	cmp	r7, #98	; 0x62
 800bfba:	d80a      	bhi.n	800bfd2 <_printf_i+0x32>
 800bfbc:	2f00      	cmp	r7, #0
 800bfbe:	f000 80d8 	beq.w	800c172 <_printf_i+0x1d2>
 800bfc2:	2f58      	cmp	r7, #88	; 0x58
 800bfc4:	f000 80a3 	beq.w	800c10e <_printf_i+0x16e>
 800bfc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfd0:	e03a      	b.n	800c048 <_printf_i+0xa8>
 800bfd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfd6:	2b15      	cmp	r3, #21
 800bfd8:	d8f6      	bhi.n	800bfc8 <_printf_i+0x28>
 800bfda:	a101      	add	r1, pc, #4	; (adr r1, 800bfe0 <_printf_i+0x40>)
 800bfdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfe0:	0800c039 	.word	0x0800c039
 800bfe4:	0800c04d 	.word	0x0800c04d
 800bfe8:	0800bfc9 	.word	0x0800bfc9
 800bfec:	0800bfc9 	.word	0x0800bfc9
 800bff0:	0800bfc9 	.word	0x0800bfc9
 800bff4:	0800bfc9 	.word	0x0800bfc9
 800bff8:	0800c04d 	.word	0x0800c04d
 800bffc:	0800bfc9 	.word	0x0800bfc9
 800c000:	0800bfc9 	.word	0x0800bfc9
 800c004:	0800bfc9 	.word	0x0800bfc9
 800c008:	0800bfc9 	.word	0x0800bfc9
 800c00c:	0800c159 	.word	0x0800c159
 800c010:	0800c07d 	.word	0x0800c07d
 800c014:	0800c13b 	.word	0x0800c13b
 800c018:	0800bfc9 	.word	0x0800bfc9
 800c01c:	0800bfc9 	.word	0x0800bfc9
 800c020:	0800c17b 	.word	0x0800c17b
 800c024:	0800bfc9 	.word	0x0800bfc9
 800c028:	0800c07d 	.word	0x0800c07d
 800c02c:	0800bfc9 	.word	0x0800bfc9
 800c030:	0800bfc9 	.word	0x0800bfc9
 800c034:	0800c143 	.word	0x0800c143
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	1d1a      	adds	r2, r3, #4
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	602a      	str	r2, [r5, #0]
 800c040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c048:	2301      	movs	r3, #1
 800c04a:	e0a3      	b.n	800c194 <_printf_i+0x1f4>
 800c04c:	6820      	ldr	r0, [r4, #0]
 800c04e:	6829      	ldr	r1, [r5, #0]
 800c050:	0606      	lsls	r6, r0, #24
 800c052:	f101 0304 	add.w	r3, r1, #4
 800c056:	d50a      	bpl.n	800c06e <_printf_i+0xce>
 800c058:	680e      	ldr	r6, [r1, #0]
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	da03      	bge.n	800c068 <_printf_i+0xc8>
 800c060:	232d      	movs	r3, #45	; 0x2d
 800c062:	4276      	negs	r6, r6
 800c064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c068:	485e      	ldr	r0, [pc, #376]	; (800c1e4 <_printf_i+0x244>)
 800c06a:	230a      	movs	r3, #10
 800c06c:	e019      	b.n	800c0a2 <_printf_i+0x102>
 800c06e:	680e      	ldr	r6, [r1, #0]
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c076:	bf18      	it	ne
 800c078:	b236      	sxthne	r6, r6
 800c07a:	e7ef      	b.n	800c05c <_printf_i+0xbc>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	6820      	ldr	r0, [r4, #0]
 800c080:	1d19      	adds	r1, r3, #4
 800c082:	6029      	str	r1, [r5, #0]
 800c084:	0601      	lsls	r1, r0, #24
 800c086:	d501      	bpl.n	800c08c <_printf_i+0xec>
 800c088:	681e      	ldr	r6, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0xf2>
 800c08c:	0646      	lsls	r6, r0, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0xe8>
 800c090:	881e      	ldrh	r6, [r3, #0]
 800c092:	4854      	ldr	r0, [pc, #336]	; (800c1e4 <_printf_i+0x244>)
 800c094:	2f6f      	cmp	r7, #111	; 0x6f
 800c096:	bf0c      	ite	eq
 800c098:	2308      	moveq	r3, #8
 800c09a:	230a      	movne	r3, #10
 800c09c:	2100      	movs	r1, #0
 800c09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0a2:	6865      	ldr	r5, [r4, #4]
 800c0a4:	60a5      	str	r5, [r4, #8]
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	bfa2      	ittt	ge
 800c0aa:	6821      	ldrge	r1, [r4, #0]
 800c0ac:	f021 0104 	bicge.w	r1, r1, #4
 800c0b0:	6021      	strge	r1, [r4, #0]
 800c0b2:	b90e      	cbnz	r6, 800c0b8 <_printf_i+0x118>
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	d04d      	beq.n	800c154 <_printf_i+0x1b4>
 800c0b8:	4615      	mov	r5, r2
 800c0ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0be:	fb03 6711 	mls	r7, r3, r1, r6
 800c0c2:	5dc7      	ldrb	r7, [r0, r7]
 800c0c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0c8:	4637      	mov	r7, r6
 800c0ca:	42bb      	cmp	r3, r7
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	d9f4      	bls.n	800c0ba <_printf_i+0x11a>
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d10b      	bne.n	800c0ec <_printf_i+0x14c>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	07de      	lsls	r6, r3, #31
 800c0d8:	d508      	bpl.n	800c0ec <_printf_i+0x14c>
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	4299      	cmp	r1, r3
 800c0e0:	bfde      	ittt	le
 800c0e2:	2330      	movle	r3, #48	; 0x30
 800c0e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0ec:	1b52      	subs	r2, r2, r5
 800c0ee:	6122      	str	r2, [r4, #16]
 800c0f0:	f8cd a000 	str.w	sl, [sp]
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	aa03      	add	r2, sp, #12
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	f7ff fee2 	bl	800bec4 <_printf_common>
 800c100:	3001      	adds	r0, #1
 800c102:	d14c      	bne.n	800c19e <_printf_i+0x1fe>
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	b004      	add	sp, #16
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	4835      	ldr	r0, [pc, #212]	; (800c1e4 <_printf_i+0x244>)
 800c110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c114:	6829      	ldr	r1, [r5, #0]
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	f851 6b04 	ldr.w	r6, [r1], #4
 800c11c:	6029      	str	r1, [r5, #0]
 800c11e:	061d      	lsls	r5, r3, #24
 800c120:	d514      	bpl.n	800c14c <_printf_i+0x1ac>
 800c122:	07df      	lsls	r7, r3, #31
 800c124:	bf44      	itt	mi
 800c126:	f043 0320 	orrmi.w	r3, r3, #32
 800c12a:	6023      	strmi	r3, [r4, #0]
 800c12c:	b91e      	cbnz	r6, 800c136 <_printf_i+0x196>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	f023 0320 	bic.w	r3, r3, #32
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	2310      	movs	r3, #16
 800c138:	e7b0      	b.n	800c09c <_printf_i+0xfc>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	f043 0320 	orr.w	r3, r3, #32
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	2378      	movs	r3, #120	; 0x78
 800c144:	4828      	ldr	r0, [pc, #160]	; (800c1e8 <_printf_i+0x248>)
 800c146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c14a:	e7e3      	b.n	800c114 <_printf_i+0x174>
 800c14c:	0659      	lsls	r1, r3, #25
 800c14e:	bf48      	it	mi
 800c150:	b2b6      	uxthmi	r6, r6
 800c152:	e7e6      	b.n	800c122 <_printf_i+0x182>
 800c154:	4615      	mov	r5, r2
 800c156:	e7bb      	b.n	800c0d0 <_printf_i+0x130>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	6826      	ldr	r6, [r4, #0]
 800c15c:	6961      	ldr	r1, [r4, #20]
 800c15e:	1d18      	adds	r0, r3, #4
 800c160:	6028      	str	r0, [r5, #0]
 800c162:	0635      	lsls	r5, r6, #24
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	d501      	bpl.n	800c16c <_printf_i+0x1cc>
 800c168:	6019      	str	r1, [r3, #0]
 800c16a:	e002      	b.n	800c172 <_printf_i+0x1d2>
 800c16c:	0670      	lsls	r0, r6, #25
 800c16e:	d5fb      	bpl.n	800c168 <_printf_i+0x1c8>
 800c170:	8019      	strh	r1, [r3, #0]
 800c172:	2300      	movs	r3, #0
 800c174:	6123      	str	r3, [r4, #16]
 800c176:	4615      	mov	r5, r2
 800c178:	e7ba      	b.n	800c0f0 <_printf_i+0x150>
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	1d1a      	adds	r2, r3, #4
 800c17e:	602a      	str	r2, [r5, #0]
 800c180:	681d      	ldr	r5, [r3, #0]
 800c182:	6862      	ldr	r2, [r4, #4]
 800c184:	2100      	movs	r1, #0
 800c186:	4628      	mov	r0, r5
 800c188:	f7f4 f832 	bl	80001f0 <memchr>
 800c18c:	b108      	cbz	r0, 800c192 <_printf_i+0x1f2>
 800c18e:	1b40      	subs	r0, r0, r5
 800c190:	6060      	str	r0, [r4, #4]
 800c192:	6863      	ldr	r3, [r4, #4]
 800c194:	6123      	str	r3, [r4, #16]
 800c196:	2300      	movs	r3, #0
 800c198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c19c:	e7a8      	b.n	800c0f0 <_printf_i+0x150>
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	462a      	mov	r2, r5
 800c1a2:	4649      	mov	r1, r9
 800c1a4:	4640      	mov	r0, r8
 800c1a6:	47d0      	blx	sl
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d0ab      	beq.n	800c104 <_printf_i+0x164>
 800c1ac:	6823      	ldr	r3, [r4, #0]
 800c1ae:	079b      	lsls	r3, r3, #30
 800c1b0:	d413      	bmi.n	800c1da <_printf_i+0x23a>
 800c1b2:	68e0      	ldr	r0, [r4, #12]
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	4298      	cmp	r0, r3
 800c1b8:	bfb8      	it	lt
 800c1ba:	4618      	movlt	r0, r3
 800c1bc:	e7a4      	b.n	800c108 <_printf_i+0x168>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	4649      	mov	r1, r9
 800c1c4:	4640      	mov	r0, r8
 800c1c6:	47d0      	blx	sl
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	d09b      	beq.n	800c104 <_printf_i+0x164>
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	68e3      	ldr	r3, [r4, #12]
 800c1d0:	9903      	ldr	r1, [sp, #12]
 800c1d2:	1a5b      	subs	r3, r3, r1
 800c1d4:	42ab      	cmp	r3, r5
 800c1d6:	dcf2      	bgt.n	800c1be <_printf_i+0x21e>
 800c1d8:	e7eb      	b.n	800c1b2 <_printf_i+0x212>
 800c1da:	2500      	movs	r5, #0
 800c1dc:	f104 0619 	add.w	r6, r4, #25
 800c1e0:	e7f5      	b.n	800c1ce <_printf_i+0x22e>
 800c1e2:	bf00      	nop
 800c1e4:	08019ffe 	.word	0x08019ffe
 800c1e8:	0801a00f 	.word	0x0801a00f

0800c1ec <siprintf>:
 800c1ec:	b40e      	push	{r1, r2, r3}
 800c1ee:	b500      	push	{lr}
 800c1f0:	b09c      	sub	sp, #112	; 0x70
 800c1f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c1f4:	9002      	str	r0, [sp, #8]
 800c1f6:	9006      	str	r0, [sp, #24]
 800c1f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1fc:	4809      	ldr	r0, [pc, #36]	; (800c224 <siprintf+0x38>)
 800c1fe:	9107      	str	r1, [sp, #28]
 800c200:	9104      	str	r1, [sp, #16]
 800c202:	4909      	ldr	r1, [pc, #36]	; (800c228 <siprintf+0x3c>)
 800c204:	f853 2b04 	ldr.w	r2, [r3], #4
 800c208:	9105      	str	r1, [sp, #20]
 800c20a:	6800      	ldr	r0, [r0, #0]
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	a902      	add	r1, sp, #8
 800c210:	f001 fb88 	bl	800d924 <_svfiprintf_r>
 800c214:	9b02      	ldr	r3, [sp, #8]
 800c216:	2200      	movs	r2, #0
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	b01c      	add	sp, #112	; 0x70
 800c21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c220:	b003      	add	sp, #12
 800c222:	4770      	bx	lr
 800c224:	20000254 	.word	0x20000254
 800c228:	ffff0208 	.word	0xffff0208

0800c22c <strncat>:
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	4604      	mov	r4, r0
 800c230:	7825      	ldrb	r5, [r4, #0]
 800c232:	4623      	mov	r3, r4
 800c234:	3401      	adds	r4, #1
 800c236:	2d00      	cmp	r5, #0
 800c238:	d1fa      	bne.n	800c230 <strncat+0x4>
 800c23a:	3a01      	subs	r2, #1
 800c23c:	d304      	bcc.n	800c248 <strncat+0x1c>
 800c23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c242:	f803 4b01 	strb.w	r4, [r3], #1
 800c246:	b904      	cbnz	r4, 800c24a <strncat+0x1e>
 800c248:	bd30      	pop	{r4, r5, pc}
 800c24a:	2a00      	cmp	r2, #0
 800c24c:	d1f5      	bne.n	800c23a <strncat+0xe>
 800c24e:	701a      	strb	r2, [r3, #0]
 800c250:	e7f3      	b.n	800c23a <strncat+0xe>

0800c252 <quorem>:
 800c252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c256:	6903      	ldr	r3, [r0, #16]
 800c258:	690c      	ldr	r4, [r1, #16]
 800c25a:	42a3      	cmp	r3, r4
 800c25c:	4607      	mov	r7, r0
 800c25e:	f2c0 8081 	blt.w	800c364 <quorem+0x112>
 800c262:	3c01      	subs	r4, #1
 800c264:	f101 0814 	add.w	r8, r1, #20
 800c268:	f100 0514 	add.w	r5, r0, #20
 800c26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c270:	9301      	str	r3, [sp, #4]
 800c272:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c27a:	3301      	adds	r3, #1
 800c27c:	429a      	cmp	r2, r3
 800c27e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c282:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c286:	fbb2 f6f3 	udiv	r6, r2, r3
 800c28a:	d331      	bcc.n	800c2f0 <quorem+0x9e>
 800c28c:	f04f 0e00 	mov.w	lr, #0
 800c290:	4640      	mov	r0, r8
 800c292:	46ac      	mov	ip, r5
 800c294:	46f2      	mov	sl, lr
 800c296:	f850 2b04 	ldr.w	r2, [r0], #4
 800c29a:	b293      	uxth	r3, r2
 800c29c:	fb06 e303 	mla	r3, r6, r3, lr
 800c2a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	ebaa 0303 	sub.w	r3, sl, r3
 800c2aa:	f8dc a000 	ldr.w	sl, [ip]
 800c2ae:	0c12      	lsrs	r2, r2, #16
 800c2b0:	fa13 f38a 	uxtah	r3, r3, sl
 800c2b4:	fb06 e202 	mla	r2, r6, r2, lr
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	9b00      	ldr	r3, [sp, #0]
 800c2bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2c0:	b292      	uxth	r2, r2
 800c2c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2ca:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2ce:	4581      	cmp	r9, r0
 800c2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2d4:	f84c 3b04 	str.w	r3, [ip], #4
 800c2d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2dc:	d2db      	bcs.n	800c296 <quorem+0x44>
 800c2de:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2e2:	b92b      	cbnz	r3, 800c2f0 <quorem+0x9e>
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	3b04      	subs	r3, #4
 800c2e8:	429d      	cmp	r5, r3
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	d32e      	bcc.n	800c34c <quorem+0xfa>
 800c2ee:	613c      	str	r4, [r7, #16]
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	f001 f8c3 	bl	800d47c <__mcmp>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	db24      	blt.n	800c344 <quorem+0xf2>
 800c2fa:	3601      	adds	r6, #1
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f04f 0c00 	mov.w	ip, #0
 800c302:	f858 2b04 	ldr.w	r2, [r8], #4
 800c306:	f8d0 e000 	ldr.w	lr, [r0]
 800c30a:	b293      	uxth	r3, r2
 800c30c:	ebac 0303 	sub.w	r3, ip, r3
 800c310:	0c12      	lsrs	r2, r2, #16
 800c312:	fa13 f38e 	uxtah	r3, r3, lr
 800c316:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c31a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c31e:	b29b      	uxth	r3, r3
 800c320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c324:	45c1      	cmp	r9, r8
 800c326:	f840 3b04 	str.w	r3, [r0], #4
 800c32a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c32e:	d2e8      	bcs.n	800c302 <quorem+0xb0>
 800c330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c338:	b922      	cbnz	r2, 800c344 <quorem+0xf2>
 800c33a:	3b04      	subs	r3, #4
 800c33c:	429d      	cmp	r5, r3
 800c33e:	461a      	mov	r2, r3
 800c340:	d30a      	bcc.n	800c358 <quorem+0x106>
 800c342:	613c      	str	r4, [r7, #16]
 800c344:	4630      	mov	r0, r6
 800c346:	b003      	add	sp, #12
 800c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34c:	6812      	ldr	r2, [r2, #0]
 800c34e:	3b04      	subs	r3, #4
 800c350:	2a00      	cmp	r2, #0
 800c352:	d1cc      	bne.n	800c2ee <quorem+0x9c>
 800c354:	3c01      	subs	r4, #1
 800c356:	e7c7      	b.n	800c2e8 <quorem+0x96>
 800c358:	6812      	ldr	r2, [r2, #0]
 800c35a:	3b04      	subs	r3, #4
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	d1f0      	bne.n	800c342 <quorem+0xf0>
 800c360:	3c01      	subs	r4, #1
 800c362:	e7eb      	b.n	800c33c <quorem+0xea>
 800c364:	2000      	movs	r0, #0
 800c366:	e7ee      	b.n	800c346 <quorem+0xf4>

0800c368 <_dtoa_r>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	ed2d 8b04 	vpush	{d8-d9}
 800c370:	ec57 6b10 	vmov	r6, r7, d0
 800c374:	b093      	sub	sp, #76	; 0x4c
 800c376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c37c:	9106      	str	r1, [sp, #24]
 800c37e:	ee10 aa10 	vmov	sl, s0
 800c382:	4604      	mov	r4, r0
 800c384:	9209      	str	r2, [sp, #36]	; 0x24
 800c386:	930c      	str	r3, [sp, #48]	; 0x30
 800c388:	46bb      	mov	fp, r7
 800c38a:	b975      	cbnz	r5, 800c3aa <_dtoa_r+0x42>
 800c38c:	2010      	movs	r0, #16
 800c38e:	f000 fddd 	bl	800cf4c <malloc>
 800c392:	4602      	mov	r2, r0
 800c394:	6260      	str	r0, [r4, #36]	; 0x24
 800c396:	b920      	cbnz	r0, 800c3a2 <_dtoa_r+0x3a>
 800c398:	4ba7      	ldr	r3, [pc, #668]	; (800c638 <_dtoa_r+0x2d0>)
 800c39a:	21ea      	movs	r1, #234	; 0xea
 800c39c:	48a7      	ldr	r0, [pc, #668]	; (800c63c <_dtoa_r+0x2d4>)
 800c39e:	f001 fbd1 	bl	800db44 <__assert_func>
 800c3a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3a6:	6005      	str	r5, [r0, #0]
 800c3a8:	60c5      	str	r5, [r0, #12]
 800c3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ac:	6819      	ldr	r1, [r3, #0]
 800c3ae:	b151      	cbz	r1, 800c3c6 <_dtoa_r+0x5e>
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	604a      	str	r2, [r1, #4]
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	4093      	lsls	r3, r2
 800c3b8:	608b      	str	r3, [r1, #8]
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fe1c 	bl	800cff8 <_Bfree>
 800c3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	1e3b      	subs	r3, r7, #0
 800c3c8:	bfaa      	itet	ge
 800c3ca:	2300      	movge	r3, #0
 800c3cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3d0:	f8c8 3000 	strge.w	r3, [r8]
 800c3d4:	4b9a      	ldr	r3, [pc, #616]	; (800c640 <_dtoa_r+0x2d8>)
 800c3d6:	bfbc      	itt	lt
 800c3d8:	2201      	movlt	r2, #1
 800c3da:	f8c8 2000 	strlt.w	r2, [r8]
 800c3de:	ea33 030b 	bics.w	r3, r3, fp
 800c3e2:	d11b      	bne.n	800c41c <_dtoa_r+0xb4>
 800c3e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3f0:	4333      	orrs	r3, r6
 800c3f2:	f000 8592 	beq.w	800cf1a <_dtoa_r+0xbb2>
 800c3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3f8:	b963      	cbnz	r3, 800c414 <_dtoa_r+0xac>
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <_dtoa_r+0x2dc>)
 800c3fc:	e022      	b.n	800c444 <_dtoa_r+0xdc>
 800c3fe:	4b92      	ldr	r3, [pc, #584]	; (800c648 <_dtoa_r+0x2e0>)
 800c400:	9301      	str	r3, [sp, #4]
 800c402:	3308      	adds	r3, #8
 800c404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	9801      	ldr	r0, [sp, #4]
 800c40a:	b013      	add	sp, #76	; 0x4c
 800c40c:	ecbd 8b04 	vpop	{d8-d9}
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c414:	4b8b      	ldr	r3, [pc, #556]	; (800c644 <_dtoa_r+0x2dc>)
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	3303      	adds	r3, #3
 800c41a:	e7f3      	b.n	800c404 <_dtoa_r+0x9c>
 800c41c:	2200      	movs	r2, #0
 800c41e:	2300      	movs	r3, #0
 800c420:	4650      	mov	r0, sl
 800c422:	4659      	mov	r1, fp
 800c424:	f7f4 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 800c428:	ec4b ab19 	vmov	d9, sl, fp
 800c42c:	4680      	mov	r8, r0
 800c42e:	b158      	cbz	r0, 800c448 <_dtoa_r+0xe0>
 800c430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c432:	2301      	movs	r3, #1
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 856b 	beq.w	800cf14 <_dtoa_r+0xbac>
 800c43e:	4883      	ldr	r0, [pc, #524]	; (800c64c <_dtoa_r+0x2e4>)
 800c440:	6018      	str	r0, [r3, #0]
 800c442:	1e43      	subs	r3, r0, #1
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	e7df      	b.n	800c408 <_dtoa_r+0xa0>
 800c448:	ec4b ab10 	vmov	d0, sl, fp
 800c44c:	aa10      	add	r2, sp, #64	; 0x40
 800c44e:	a911      	add	r1, sp, #68	; 0x44
 800c450:	4620      	mov	r0, r4
 800c452:	f001 f8b9 	bl	800d5c8 <__d2b>
 800c456:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c45a:	ee08 0a10 	vmov	s16, r0
 800c45e:	2d00      	cmp	r5, #0
 800c460:	f000 8084 	beq.w	800c56c <_dtoa_r+0x204>
 800c464:	ee19 3a90 	vmov	r3, s19
 800c468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c46c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c470:	4656      	mov	r6, sl
 800c472:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c47a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c47e:	4b74      	ldr	r3, [pc, #464]	; (800c650 <_dtoa_r+0x2e8>)
 800c480:	2200      	movs	r2, #0
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f3 ff07 	bl	8000298 <__aeabi_dsub>
 800c48a:	a365      	add	r3, pc, #404	; (adr r3, 800c620 <_dtoa_r+0x2b8>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f4 f8ba 	bl	8000608 <__aeabi_dmul>
 800c494:	a364      	add	r3, pc, #400	; (adr r3, 800c628 <_dtoa_r+0x2c0>)
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	f7f3 feff 	bl	800029c <__adddf3>
 800c49e:	4606      	mov	r6, r0
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	460f      	mov	r7, r1
 800c4a4:	f7f4 f846 	bl	8000534 <__aeabi_i2d>
 800c4a8:	a361      	add	r3, pc, #388	; (adr r3, 800c630 <_dtoa_r+0x2c8>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	f7f4 f8ab 	bl	8000608 <__aeabi_dmul>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	f7f3 feef 	bl	800029c <__adddf3>
 800c4be:	4606      	mov	r6, r0
 800c4c0:	460f      	mov	r7, r1
 800c4c2:	f7f4 fb51 	bl	8000b68 <__aeabi_d2iz>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	9000      	str	r0, [sp, #0]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	f7f4 fb0c 	bl	8000aec <__aeabi_dcmplt>
 800c4d4:	b150      	cbz	r0, 800c4ec <_dtoa_r+0x184>
 800c4d6:	9800      	ldr	r0, [sp, #0]
 800c4d8:	f7f4 f82c 	bl	8000534 <__aeabi_i2d>
 800c4dc:	4632      	mov	r2, r6
 800c4de:	463b      	mov	r3, r7
 800c4e0:	f7f4 fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4e4:	b910      	cbnz	r0, 800c4ec <_dtoa_r+0x184>
 800c4e6:	9b00      	ldr	r3, [sp, #0]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	9b00      	ldr	r3, [sp, #0]
 800c4ee:	2b16      	cmp	r3, #22
 800c4f0:	d85a      	bhi.n	800c5a8 <_dtoa_r+0x240>
 800c4f2:	9a00      	ldr	r2, [sp, #0]
 800c4f4:	4b57      	ldr	r3, [pc, #348]	; (800c654 <_dtoa_r+0x2ec>)
 800c4f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	ec51 0b19 	vmov	r0, r1, d9
 800c502:	f7f4 faf3 	bl	8000aec <__aeabi_dcmplt>
 800c506:	2800      	cmp	r0, #0
 800c508:	d050      	beq.n	800c5ac <_dtoa_r+0x244>
 800c50a:	9b00      	ldr	r3, [sp, #0]
 800c50c:	3b01      	subs	r3, #1
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	2300      	movs	r3, #0
 800c512:	930b      	str	r3, [sp, #44]	; 0x2c
 800c514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c516:	1b5d      	subs	r5, r3, r5
 800c518:	1e6b      	subs	r3, r5, #1
 800c51a:	9305      	str	r3, [sp, #20]
 800c51c:	bf45      	ittet	mi
 800c51e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c522:	9304      	strmi	r3, [sp, #16]
 800c524:	2300      	movpl	r3, #0
 800c526:	2300      	movmi	r3, #0
 800c528:	bf4c      	ite	mi
 800c52a:	9305      	strmi	r3, [sp, #20]
 800c52c:	9304      	strpl	r3, [sp, #16]
 800c52e:	9b00      	ldr	r3, [sp, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	db3d      	blt.n	800c5b0 <_dtoa_r+0x248>
 800c534:	9b05      	ldr	r3, [sp, #20]
 800c536:	9a00      	ldr	r2, [sp, #0]
 800c538:	920a      	str	r2, [sp, #40]	; 0x28
 800c53a:	4413      	add	r3, r2
 800c53c:	9305      	str	r3, [sp, #20]
 800c53e:	2300      	movs	r3, #0
 800c540:	9307      	str	r3, [sp, #28]
 800c542:	9b06      	ldr	r3, [sp, #24]
 800c544:	2b09      	cmp	r3, #9
 800c546:	f200 8089 	bhi.w	800c65c <_dtoa_r+0x2f4>
 800c54a:	2b05      	cmp	r3, #5
 800c54c:	bfc4      	itt	gt
 800c54e:	3b04      	subgt	r3, #4
 800c550:	9306      	strgt	r3, [sp, #24]
 800c552:	9b06      	ldr	r3, [sp, #24]
 800c554:	f1a3 0302 	sub.w	r3, r3, #2
 800c558:	bfcc      	ite	gt
 800c55a:	2500      	movgt	r5, #0
 800c55c:	2501      	movle	r5, #1
 800c55e:	2b03      	cmp	r3, #3
 800c560:	f200 8087 	bhi.w	800c672 <_dtoa_r+0x30a>
 800c564:	e8df f003 	tbb	[pc, r3]
 800c568:	59383a2d 	.word	0x59383a2d
 800c56c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c570:	441d      	add	r5, r3
 800c572:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c576:	2b20      	cmp	r3, #32
 800c578:	bfc1      	itttt	gt
 800c57a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c57e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c582:	fa0b f303 	lslgt.w	r3, fp, r3
 800c586:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c58a:	bfda      	itte	le
 800c58c:	f1c3 0320 	rsble	r3, r3, #32
 800c590:	fa06 f003 	lslle.w	r0, r6, r3
 800c594:	4318      	orrgt	r0, r3
 800c596:	f7f3 ffbd 	bl	8000514 <__aeabi_ui2d>
 800c59a:	2301      	movs	r3, #1
 800c59c:	4606      	mov	r6, r0
 800c59e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c5a2:	3d01      	subs	r5, #1
 800c5a4:	930e      	str	r3, [sp, #56]	; 0x38
 800c5a6:	e76a      	b.n	800c47e <_dtoa_r+0x116>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e7b2      	b.n	800c512 <_dtoa_r+0x1aa>
 800c5ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5ae:	e7b1      	b.n	800c514 <_dtoa_r+0x1ac>
 800c5b0:	9b04      	ldr	r3, [sp, #16]
 800c5b2:	9a00      	ldr	r2, [sp, #0]
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	9304      	str	r3, [sp, #16]
 800c5b8:	4253      	negs	r3, r2
 800c5ba:	9307      	str	r3, [sp, #28]
 800c5bc:	2300      	movs	r3, #0
 800c5be:	930a      	str	r3, [sp, #40]	; 0x28
 800c5c0:	e7bf      	b.n	800c542 <_dtoa_r+0x1da>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	9308      	str	r3, [sp, #32]
 800c5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dc55      	bgt.n	800c678 <_dtoa_r+0x310>
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5d6:	e00c      	b.n	800c5f2 <_dtoa_r+0x28a>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e7f3      	b.n	800c5c4 <_dtoa_r+0x25c>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5e0:	9308      	str	r3, [sp, #32]
 800c5e2:	9b00      	ldr	r3, [sp, #0]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	9302      	str	r3, [sp, #8]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	9303      	str	r3, [sp, #12]
 800c5ee:	bfb8      	it	lt
 800c5f0:	2301      	movlt	r3, #1
 800c5f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	6042      	str	r2, [r0, #4]
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	f102 0614 	add.w	r6, r2, #20
 800c5fe:	429e      	cmp	r6, r3
 800c600:	6841      	ldr	r1, [r0, #4]
 800c602:	d93d      	bls.n	800c680 <_dtoa_r+0x318>
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fcb7 	bl	800cf78 <_Balloc>
 800c60a:	9001      	str	r0, [sp, #4]
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d13b      	bne.n	800c688 <_dtoa_r+0x320>
 800c610:	4b11      	ldr	r3, [pc, #68]	; (800c658 <_dtoa_r+0x2f0>)
 800c612:	4602      	mov	r2, r0
 800c614:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c618:	e6c0      	b.n	800c39c <_dtoa_r+0x34>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e7df      	b.n	800c5de <_dtoa_r+0x276>
 800c61e:	bf00      	nop
 800c620:	636f4361 	.word	0x636f4361
 800c624:	3fd287a7 	.word	0x3fd287a7
 800c628:	8b60c8b3 	.word	0x8b60c8b3
 800c62c:	3fc68a28 	.word	0x3fc68a28
 800c630:	509f79fb 	.word	0x509f79fb
 800c634:	3fd34413 	.word	0x3fd34413
 800c638:	0801a02d 	.word	0x0801a02d
 800c63c:	0801a044 	.word	0x0801a044
 800c640:	7ff00000 	.word	0x7ff00000
 800c644:	0801a029 	.word	0x0801a029
 800c648:	0801a020 	.word	0x0801a020
 800c64c:	08019ffd 	.word	0x08019ffd
 800c650:	3ff80000 	.word	0x3ff80000
 800c654:	0801a138 	.word	0x0801a138
 800c658:	0801a09f 	.word	0x0801a09f
 800c65c:	2501      	movs	r5, #1
 800c65e:	2300      	movs	r3, #0
 800c660:	9306      	str	r3, [sp, #24]
 800c662:	9508      	str	r5, [sp, #32]
 800c664:	f04f 33ff 	mov.w	r3, #4294967295
 800c668:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c66c:	2200      	movs	r2, #0
 800c66e:	2312      	movs	r3, #18
 800c670:	e7b0      	b.n	800c5d4 <_dtoa_r+0x26c>
 800c672:	2301      	movs	r3, #1
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	e7f5      	b.n	800c664 <_dtoa_r+0x2fc>
 800c678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c67e:	e7b8      	b.n	800c5f2 <_dtoa_r+0x28a>
 800c680:	3101      	adds	r1, #1
 800c682:	6041      	str	r1, [r0, #4]
 800c684:	0052      	lsls	r2, r2, #1
 800c686:	e7b8      	b.n	800c5fa <_dtoa_r+0x292>
 800c688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c68a:	9a01      	ldr	r2, [sp, #4]
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	9b03      	ldr	r3, [sp, #12]
 800c690:	2b0e      	cmp	r3, #14
 800c692:	f200 809d 	bhi.w	800c7d0 <_dtoa_r+0x468>
 800c696:	2d00      	cmp	r5, #0
 800c698:	f000 809a 	beq.w	800c7d0 <_dtoa_r+0x468>
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	dd32      	ble.n	800c708 <_dtoa_r+0x3a0>
 800c6a2:	4ab7      	ldr	r2, [pc, #732]	; (800c980 <_dtoa_r+0x618>)
 800c6a4:	f003 030f 	and.w	r3, r3, #15
 800c6a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	05d8      	lsls	r0, r3, #23
 800c6b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6b8:	d516      	bpl.n	800c6e8 <_dtoa_r+0x380>
 800c6ba:	4bb2      	ldr	r3, [pc, #712]	; (800c984 <_dtoa_r+0x61c>)
 800c6bc:	ec51 0b19 	vmov	r0, r1, d9
 800c6c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6c4:	f7f4 f8ca 	bl	800085c <__aeabi_ddiv>
 800c6c8:	f007 070f 	and.w	r7, r7, #15
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	468b      	mov	fp, r1
 800c6d0:	2503      	movs	r5, #3
 800c6d2:	4eac      	ldr	r6, [pc, #688]	; (800c984 <_dtoa_r+0x61c>)
 800c6d4:	b957      	cbnz	r7, 800c6ec <_dtoa_r+0x384>
 800c6d6:	4642      	mov	r2, r8
 800c6d8:	464b      	mov	r3, r9
 800c6da:	4650      	mov	r0, sl
 800c6dc:	4659      	mov	r1, fp
 800c6de:	f7f4 f8bd 	bl	800085c <__aeabi_ddiv>
 800c6e2:	4682      	mov	sl, r0
 800c6e4:	468b      	mov	fp, r1
 800c6e6:	e028      	b.n	800c73a <_dtoa_r+0x3d2>
 800c6e8:	2502      	movs	r5, #2
 800c6ea:	e7f2      	b.n	800c6d2 <_dtoa_r+0x36a>
 800c6ec:	07f9      	lsls	r1, r7, #31
 800c6ee:	d508      	bpl.n	800c702 <_dtoa_r+0x39a>
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	4649      	mov	r1, r9
 800c6f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6f8:	f7f3 ff86 	bl	8000608 <__aeabi_dmul>
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	4680      	mov	r8, r0
 800c700:	4689      	mov	r9, r1
 800c702:	107f      	asrs	r7, r7, #1
 800c704:	3608      	adds	r6, #8
 800c706:	e7e5      	b.n	800c6d4 <_dtoa_r+0x36c>
 800c708:	f000 809b 	beq.w	800c842 <_dtoa_r+0x4da>
 800c70c:	9b00      	ldr	r3, [sp, #0]
 800c70e:	4f9d      	ldr	r7, [pc, #628]	; (800c984 <_dtoa_r+0x61c>)
 800c710:	425e      	negs	r6, r3
 800c712:	4b9b      	ldr	r3, [pc, #620]	; (800c980 <_dtoa_r+0x618>)
 800c714:	f006 020f 	and.w	r2, r6, #15
 800c718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	ec51 0b19 	vmov	r0, r1, d9
 800c724:	f7f3 ff70 	bl	8000608 <__aeabi_dmul>
 800c728:	1136      	asrs	r6, r6, #4
 800c72a:	4682      	mov	sl, r0
 800c72c:	468b      	mov	fp, r1
 800c72e:	2300      	movs	r3, #0
 800c730:	2502      	movs	r5, #2
 800c732:	2e00      	cmp	r6, #0
 800c734:	d17a      	bne.n	800c82c <_dtoa_r+0x4c4>
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1d3      	bne.n	800c6e2 <_dtoa_r+0x37a>
 800c73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8082 	beq.w	800c846 <_dtoa_r+0x4de>
 800c742:	4b91      	ldr	r3, [pc, #580]	; (800c988 <_dtoa_r+0x620>)
 800c744:	2200      	movs	r2, #0
 800c746:	4650      	mov	r0, sl
 800c748:	4659      	mov	r1, fp
 800c74a:	f7f4 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d079      	beq.n	800c846 <_dtoa_r+0x4de>
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d076      	beq.n	800c846 <_dtoa_r+0x4de>
 800c758:	9b02      	ldr	r3, [sp, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	dd36      	ble.n	800c7cc <_dtoa_r+0x464>
 800c75e:	9b00      	ldr	r3, [sp, #0]
 800c760:	4650      	mov	r0, sl
 800c762:	4659      	mov	r1, fp
 800c764:	1e5f      	subs	r7, r3, #1
 800c766:	2200      	movs	r2, #0
 800c768:	4b88      	ldr	r3, [pc, #544]	; (800c98c <_dtoa_r+0x624>)
 800c76a:	f7f3 ff4d 	bl	8000608 <__aeabi_dmul>
 800c76e:	9e02      	ldr	r6, [sp, #8]
 800c770:	4682      	mov	sl, r0
 800c772:	468b      	mov	fp, r1
 800c774:	3501      	adds	r5, #1
 800c776:	4628      	mov	r0, r5
 800c778:	f7f3 fedc 	bl	8000534 <__aeabi_i2d>
 800c77c:	4652      	mov	r2, sl
 800c77e:	465b      	mov	r3, fp
 800c780:	f7f3 ff42 	bl	8000608 <__aeabi_dmul>
 800c784:	4b82      	ldr	r3, [pc, #520]	; (800c990 <_dtoa_r+0x628>)
 800c786:	2200      	movs	r2, #0
 800c788:	f7f3 fd88 	bl	800029c <__adddf3>
 800c78c:	46d0      	mov	r8, sl
 800c78e:	46d9      	mov	r9, fp
 800c790:	4682      	mov	sl, r0
 800c792:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c796:	2e00      	cmp	r6, #0
 800c798:	d158      	bne.n	800c84c <_dtoa_r+0x4e4>
 800c79a:	4b7e      	ldr	r3, [pc, #504]	; (800c994 <_dtoa_r+0x62c>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	4640      	mov	r0, r8
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	f7f3 fd79 	bl	8000298 <__aeabi_dsub>
 800c7a6:	4652      	mov	r2, sl
 800c7a8:	465b      	mov	r3, fp
 800c7aa:	4680      	mov	r8, r0
 800c7ac:	4689      	mov	r9, r1
 800c7ae:	f7f4 f9bb 	bl	8000b28 <__aeabi_dcmpgt>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	f040 8295 	bne.w	800cce2 <_dtoa_r+0x97a>
 800c7b8:	4652      	mov	r2, sl
 800c7ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7be:	4640      	mov	r0, r8
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f7f4 f993 	bl	8000aec <__aeabi_dcmplt>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	f040 8289 	bne.w	800ccde <_dtoa_r+0x976>
 800c7cc:	ec5b ab19 	vmov	sl, fp, d9
 800c7d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f2c0 8148 	blt.w	800ca68 <_dtoa_r+0x700>
 800c7d8:	9a00      	ldr	r2, [sp, #0]
 800c7da:	2a0e      	cmp	r2, #14
 800c7dc:	f300 8144 	bgt.w	800ca68 <_dtoa_r+0x700>
 800c7e0:	4b67      	ldr	r3, [pc, #412]	; (800c980 <_dtoa_r+0x618>)
 800c7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f280 80d5 	bge.w	800c99c <_dtoa_r+0x634>
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f300 80d1 	bgt.w	800c99c <_dtoa_r+0x634>
 800c7fa:	f040 826f 	bne.w	800ccdc <_dtoa_r+0x974>
 800c7fe:	4b65      	ldr	r3, [pc, #404]	; (800c994 <_dtoa_r+0x62c>)
 800c800:	2200      	movs	r2, #0
 800c802:	4640      	mov	r0, r8
 800c804:	4649      	mov	r1, r9
 800c806:	f7f3 feff 	bl	8000608 <__aeabi_dmul>
 800c80a:	4652      	mov	r2, sl
 800c80c:	465b      	mov	r3, fp
 800c80e:	f7f4 f981 	bl	8000b14 <__aeabi_dcmpge>
 800c812:	9e03      	ldr	r6, [sp, #12]
 800c814:	4637      	mov	r7, r6
 800c816:	2800      	cmp	r0, #0
 800c818:	f040 8245 	bne.w	800cca6 <_dtoa_r+0x93e>
 800c81c:	9d01      	ldr	r5, [sp, #4]
 800c81e:	2331      	movs	r3, #49	; 0x31
 800c820:	f805 3b01 	strb.w	r3, [r5], #1
 800c824:	9b00      	ldr	r3, [sp, #0]
 800c826:	3301      	adds	r3, #1
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	e240      	b.n	800ccae <_dtoa_r+0x946>
 800c82c:	07f2      	lsls	r2, r6, #31
 800c82e:	d505      	bpl.n	800c83c <_dtoa_r+0x4d4>
 800c830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c834:	f7f3 fee8 	bl	8000608 <__aeabi_dmul>
 800c838:	3501      	adds	r5, #1
 800c83a:	2301      	movs	r3, #1
 800c83c:	1076      	asrs	r6, r6, #1
 800c83e:	3708      	adds	r7, #8
 800c840:	e777      	b.n	800c732 <_dtoa_r+0x3ca>
 800c842:	2502      	movs	r5, #2
 800c844:	e779      	b.n	800c73a <_dtoa_r+0x3d2>
 800c846:	9f00      	ldr	r7, [sp, #0]
 800c848:	9e03      	ldr	r6, [sp, #12]
 800c84a:	e794      	b.n	800c776 <_dtoa_r+0x40e>
 800c84c:	9901      	ldr	r1, [sp, #4]
 800c84e:	4b4c      	ldr	r3, [pc, #304]	; (800c980 <_dtoa_r+0x618>)
 800c850:	4431      	add	r1, r6
 800c852:	910d      	str	r1, [sp, #52]	; 0x34
 800c854:	9908      	ldr	r1, [sp, #32]
 800c856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c85a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c85e:	2900      	cmp	r1, #0
 800c860:	d043      	beq.n	800c8ea <_dtoa_r+0x582>
 800c862:	494d      	ldr	r1, [pc, #308]	; (800c998 <_dtoa_r+0x630>)
 800c864:	2000      	movs	r0, #0
 800c866:	f7f3 fff9 	bl	800085c <__aeabi_ddiv>
 800c86a:	4652      	mov	r2, sl
 800c86c:	465b      	mov	r3, fp
 800c86e:	f7f3 fd13 	bl	8000298 <__aeabi_dsub>
 800c872:	9d01      	ldr	r5, [sp, #4]
 800c874:	4682      	mov	sl, r0
 800c876:	468b      	mov	fp, r1
 800c878:	4649      	mov	r1, r9
 800c87a:	4640      	mov	r0, r8
 800c87c:	f7f4 f974 	bl	8000b68 <__aeabi_d2iz>
 800c880:	4606      	mov	r6, r0
 800c882:	f7f3 fe57 	bl	8000534 <__aeabi_i2d>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fd03 	bl	8000298 <__aeabi_dsub>
 800c892:	3630      	adds	r6, #48	; 0x30
 800c894:	f805 6b01 	strb.w	r6, [r5], #1
 800c898:	4652      	mov	r2, sl
 800c89a:	465b      	mov	r3, fp
 800c89c:	4680      	mov	r8, r0
 800c89e:	4689      	mov	r9, r1
 800c8a0:	f7f4 f924 	bl	8000aec <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d163      	bne.n	800c970 <_dtoa_r+0x608>
 800c8a8:	4642      	mov	r2, r8
 800c8aa:	464b      	mov	r3, r9
 800c8ac:	4936      	ldr	r1, [pc, #216]	; (800c988 <_dtoa_r+0x620>)
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	f7f3 fcf2 	bl	8000298 <__aeabi_dsub>
 800c8b4:	4652      	mov	r2, sl
 800c8b6:	465b      	mov	r3, fp
 800c8b8:	f7f4 f918 	bl	8000aec <__aeabi_dcmplt>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	f040 80b5 	bne.w	800ca2c <_dtoa_r+0x6c4>
 800c8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8c4:	429d      	cmp	r5, r3
 800c8c6:	d081      	beq.n	800c7cc <_dtoa_r+0x464>
 800c8c8:	4b30      	ldr	r3, [pc, #192]	; (800c98c <_dtoa_r+0x624>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	4650      	mov	r0, sl
 800c8ce:	4659      	mov	r1, fp
 800c8d0:	f7f3 fe9a 	bl	8000608 <__aeabi_dmul>
 800c8d4:	4b2d      	ldr	r3, [pc, #180]	; (800c98c <_dtoa_r+0x624>)
 800c8d6:	4682      	mov	sl, r0
 800c8d8:	468b      	mov	fp, r1
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f7f3 fe92 	bl	8000608 <__aeabi_dmul>
 800c8e4:	4680      	mov	r8, r0
 800c8e6:	4689      	mov	r9, r1
 800c8e8:	e7c6      	b.n	800c878 <_dtoa_r+0x510>
 800c8ea:	4650      	mov	r0, sl
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	f7f3 fe8b 	bl	8000608 <__aeabi_dmul>
 800c8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f4:	9d01      	ldr	r5, [sp, #4]
 800c8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	468b      	mov	fp, r1
 800c8fc:	4649      	mov	r1, r9
 800c8fe:	4640      	mov	r0, r8
 800c900:	f7f4 f932 	bl	8000b68 <__aeabi_d2iz>
 800c904:	4606      	mov	r6, r0
 800c906:	f7f3 fe15 	bl	8000534 <__aeabi_i2d>
 800c90a:	3630      	adds	r6, #48	; 0x30
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4640      	mov	r0, r8
 800c912:	4649      	mov	r1, r9
 800c914:	f7f3 fcc0 	bl	8000298 <__aeabi_dsub>
 800c918:	f805 6b01 	strb.w	r6, [r5], #1
 800c91c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c91e:	429d      	cmp	r5, r3
 800c920:	4680      	mov	r8, r0
 800c922:	4689      	mov	r9, r1
 800c924:	f04f 0200 	mov.w	r2, #0
 800c928:	d124      	bne.n	800c974 <_dtoa_r+0x60c>
 800c92a:	4b1b      	ldr	r3, [pc, #108]	; (800c998 <_dtoa_r+0x630>)
 800c92c:	4650      	mov	r0, sl
 800c92e:	4659      	mov	r1, fp
 800c930:	f7f3 fcb4 	bl	800029c <__adddf3>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4640      	mov	r0, r8
 800c93a:	4649      	mov	r1, r9
 800c93c:	f7f4 f8f4 	bl	8000b28 <__aeabi_dcmpgt>
 800c940:	2800      	cmp	r0, #0
 800c942:	d173      	bne.n	800ca2c <_dtoa_r+0x6c4>
 800c944:	4652      	mov	r2, sl
 800c946:	465b      	mov	r3, fp
 800c948:	4913      	ldr	r1, [pc, #76]	; (800c998 <_dtoa_r+0x630>)
 800c94a:	2000      	movs	r0, #0
 800c94c:	f7f3 fca4 	bl	8000298 <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4640      	mov	r0, r8
 800c956:	4649      	mov	r1, r9
 800c958:	f7f4 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	f43f af35 	beq.w	800c7cc <_dtoa_r+0x464>
 800c962:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c964:	1e6b      	subs	r3, r5, #1
 800c966:	930f      	str	r3, [sp, #60]	; 0x3c
 800c968:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c96c:	2b30      	cmp	r3, #48	; 0x30
 800c96e:	d0f8      	beq.n	800c962 <_dtoa_r+0x5fa>
 800c970:	9700      	str	r7, [sp, #0]
 800c972:	e049      	b.n	800ca08 <_dtoa_r+0x6a0>
 800c974:	4b05      	ldr	r3, [pc, #20]	; (800c98c <_dtoa_r+0x624>)
 800c976:	f7f3 fe47 	bl	8000608 <__aeabi_dmul>
 800c97a:	4680      	mov	r8, r0
 800c97c:	4689      	mov	r9, r1
 800c97e:	e7bd      	b.n	800c8fc <_dtoa_r+0x594>
 800c980:	0801a138 	.word	0x0801a138
 800c984:	0801a110 	.word	0x0801a110
 800c988:	3ff00000 	.word	0x3ff00000
 800c98c:	40240000 	.word	0x40240000
 800c990:	401c0000 	.word	0x401c0000
 800c994:	40140000 	.word	0x40140000
 800c998:	3fe00000 	.word	0x3fe00000
 800c99c:	9d01      	ldr	r5, [sp, #4]
 800c99e:	4656      	mov	r6, sl
 800c9a0:	465f      	mov	r7, fp
 800c9a2:	4642      	mov	r2, r8
 800c9a4:	464b      	mov	r3, r9
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	f7f3 ff57 	bl	800085c <__aeabi_ddiv>
 800c9ae:	f7f4 f8db 	bl	8000b68 <__aeabi_d2iz>
 800c9b2:	4682      	mov	sl, r0
 800c9b4:	f7f3 fdbe 	bl	8000534 <__aeabi_i2d>
 800c9b8:	4642      	mov	r2, r8
 800c9ba:	464b      	mov	r3, r9
 800c9bc:	f7f3 fe24 	bl	8000608 <__aeabi_dmul>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9cc:	f7f3 fc64 	bl	8000298 <__aeabi_dsub>
 800c9d0:	f805 6b01 	strb.w	r6, [r5], #1
 800c9d4:	9e01      	ldr	r6, [sp, #4]
 800c9d6:	9f03      	ldr	r7, [sp, #12]
 800c9d8:	1bae      	subs	r6, r5, r6
 800c9da:	42b7      	cmp	r7, r6
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	d135      	bne.n	800ca4e <_dtoa_r+0x6e6>
 800c9e2:	f7f3 fc5b 	bl	800029c <__adddf3>
 800c9e6:	4642      	mov	r2, r8
 800c9e8:	464b      	mov	r3, r9
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	460f      	mov	r7, r1
 800c9ee:	f7f4 f89b 	bl	8000b28 <__aeabi_dcmpgt>
 800c9f2:	b9d0      	cbnz	r0, 800ca2a <_dtoa_r+0x6c2>
 800c9f4:	4642      	mov	r2, r8
 800c9f6:	464b      	mov	r3, r9
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	f7f4 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca00:	b110      	cbz	r0, 800ca08 <_dtoa_r+0x6a0>
 800ca02:	f01a 0f01 	tst.w	sl, #1
 800ca06:	d110      	bne.n	800ca2a <_dtoa_r+0x6c2>
 800ca08:	4620      	mov	r0, r4
 800ca0a:	ee18 1a10 	vmov	r1, s16
 800ca0e:	f000 faf3 	bl	800cff8 <_Bfree>
 800ca12:	2300      	movs	r3, #0
 800ca14:	9800      	ldr	r0, [sp, #0]
 800ca16:	702b      	strb	r3, [r5, #0]
 800ca18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	6018      	str	r0, [r3, #0]
 800ca1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f43f acf1 	beq.w	800c408 <_dtoa_r+0xa0>
 800ca26:	601d      	str	r5, [r3, #0]
 800ca28:	e4ee      	b.n	800c408 <_dtoa_r+0xa0>
 800ca2a:	9f00      	ldr	r7, [sp, #0]
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	461d      	mov	r5, r3
 800ca30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca34:	2a39      	cmp	r2, #57	; 0x39
 800ca36:	d106      	bne.n	800ca46 <_dtoa_r+0x6de>
 800ca38:	9a01      	ldr	r2, [sp, #4]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d1f7      	bne.n	800ca2e <_dtoa_r+0x6c6>
 800ca3e:	9901      	ldr	r1, [sp, #4]
 800ca40:	2230      	movs	r2, #48	; 0x30
 800ca42:	3701      	adds	r7, #1
 800ca44:	700a      	strb	r2, [r1, #0]
 800ca46:	781a      	ldrb	r2, [r3, #0]
 800ca48:	3201      	adds	r2, #1
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	e790      	b.n	800c970 <_dtoa_r+0x608>
 800ca4e:	4ba6      	ldr	r3, [pc, #664]	; (800cce8 <_dtoa_r+0x980>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	f7f3 fdd9 	bl	8000608 <__aeabi_dmul>
 800ca56:	2200      	movs	r2, #0
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	460f      	mov	r7, r1
 800ca5e:	f7f4 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d09d      	beq.n	800c9a2 <_dtoa_r+0x63a>
 800ca66:	e7cf      	b.n	800ca08 <_dtoa_r+0x6a0>
 800ca68:	9a08      	ldr	r2, [sp, #32]
 800ca6a:	2a00      	cmp	r2, #0
 800ca6c:	f000 80d7 	beq.w	800cc1e <_dtoa_r+0x8b6>
 800ca70:	9a06      	ldr	r2, [sp, #24]
 800ca72:	2a01      	cmp	r2, #1
 800ca74:	f300 80ba 	bgt.w	800cbec <_dtoa_r+0x884>
 800ca78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	f000 80b2 	beq.w	800cbe4 <_dtoa_r+0x87c>
 800ca80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca84:	9e07      	ldr	r6, [sp, #28]
 800ca86:	9d04      	ldr	r5, [sp, #16]
 800ca88:	9a04      	ldr	r2, [sp, #16]
 800ca8a:	441a      	add	r2, r3
 800ca8c:	9204      	str	r2, [sp, #16]
 800ca8e:	9a05      	ldr	r2, [sp, #20]
 800ca90:	2101      	movs	r1, #1
 800ca92:	441a      	add	r2, r3
 800ca94:	4620      	mov	r0, r4
 800ca96:	9205      	str	r2, [sp, #20]
 800ca98:	f000 fb66 	bl	800d168 <__i2b>
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	2d00      	cmp	r5, #0
 800caa0:	dd0c      	ble.n	800cabc <_dtoa_r+0x754>
 800caa2:	9b05      	ldr	r3, [sp, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	dd09      	ble.n	800cabc <_dtoa_r+0x754>
 800caa8:	42ab      	cmp	r3, r5
 800caaa:	9a04      	ldr	r2, [sp, #16]
 800caac:	bfa8      	it	ge
 800caae:	462b      	movge	r3, r5
 800cab0:	1ad2      	subs	r2, r2, r3
 800cab2:	9204      	str	r2, [sp, #16]
 800cab4:	9a05      	ldr	r2, [sp, #20]
 800cab6:	1aed      	subs	r5, r5, r3
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	9305      	str	r3, [sp, #20]
 800cabc:	9b07      	ldr	r3, [sp, #28]
 800cabe:	b31b      	cbz	r3, 800cb08 <_dtoa_r+0x7a0>
 800cac0:	9b08      	ldr	r3, [sp, #32]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 80af 	beq.w	800cc26 <_dtoa_r+0x8be>
 800cac8:	2e00      	cmp	r6, #0
 800caca:	dd13      	ble.n	800caf4 <_dtoa_r+0x78c>
 800cacc:	4639      	mov	r1, r7
 800cace:	4632      	mov	r2, r6
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fc09 	bl	800d2e8 <__pow5mult>
 800cad6:	ee18 2a10 	vmov	r2, s16
 800cada:	4601      	mov	r1, r0
 800cadc:	4607      	mov	r7, r0
 800cade:	4620      	mov	r0, r4
 800cae0:	f000 fb58 	bl	800d194 <__multiply>
 800cae4:	ee18 1a10 	vmov	r1, s16
 800cae8:	4680      	mov	r8, r0
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fa84 	bl	800cff8 <_Bfree>
 800caf0:	ee08 8a10 	vmov	s16, r8
 800caf4:	9b07      	ldr	r3, [sp, #28]
 800caf6:	1b9a      	subs	r2, r3, r6
 800caf8:	d006      	beq.n	800cb08 <_dtoa_r+0x7a0>
 800cafa:	ee18 1a10 	vmov	r1, s16
 800cafe:	4620      	mov	r0, r4
 800cb00:	f000 fbf2 	bl	800d2e8 <__pow5mult>
 800cb04:	ee08 0a10 	vmov	s16, r0
 800cb08:	2101      	movs	r1, #1
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fb2c 	bl	800d168 <__i2b>
 800cb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	4606      	mov	r6, r0
 800cb16:	f340 8088 	ble.w	800cc2a <_dtoa_r+0x8c2>
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f000 fbe2 	bl	800d2e8 <__pow5mult>
 800cb24:	9b06      	ldr	r3, [sp, #24]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	4606      	mov	r6, r0
 800cb2a:	f340 8081 	ble.w	800cc30 <_dtoa_r+0x8c8>
 800cb2e:	f04f 0800 	mov.w	r8, #0
 800cb32:	6933      	ldr	r3, [r6, #16]
 800cb34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb38:	6918      	ldr	r0, [r3, #16]
 800cb3a:	f000 fac5 	bl	800d0c8 <__hi0bits>
 800cb3e:	f1c0 0020 	rsb	r0, r0, #32
 800cb42:	9b05      	ldr	r3, [sp, #20]
 800cb44:	4418      	add	r0, r3
 800cb46:	f010 001f 	ands.w	r0, r0, #31
 800cb4a:	f000 8092 	beq.w	800cc72 <_dtoa_r+0x90a>
 800cb4e:	f1c0 0320 	rsb	r3, r0, #32
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	f340 808a 	ble.w	800cc6c <_dtoa_r+0x904>
 800cb58:	f1c0 001c 	rsb	r0, r0, #28
 800cb5c:	9b04      	ldr	r3, [sp, #16]
 800cb5e:	4403      	add	r3, r0
 800cb60:	9304      	str	r3, [sp, #16]
 800cb62:	9b05      	ldr	r3, [sp, #20]
 800cb64:	4403      	add	r3, r0
 800cb66:	4405      	add	r5, r0
 800cb68:	9305      	str	r3, [sp, #20]
 800cb6a:	9b04      	ldr	r3, [sp, #16]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	dd07      	ble.n	800cb80 <_dtoa_r+0x818>
 800cb70:	ee18 1a10 	vmov	r1, s16
 800cb74:	461a      	mov	r2, r3
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 fc10 	bl	800d39c <__lshift>
 800cb7c:	ee08 0a10 	vmov	s16, r0
 800cb80:	9b05      	ldr	r3, [sp, #20]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	dd05      	ble.n	800cb92 <_dtoa_r+0x82a>
 800cb86:	4631      	mov	r1, r6
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 fc06 	bl	800d39c <__lshift>
 800cb90:	4606      	mov	r6, r0
 800cb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d06e      	beq.n	800cc76 <_dtoa_r+0x90e>
 800cb98:	ee18 0a10 	vmov	r0, s16
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	f000 fc6d 	bl	800d47c <__mcmp>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	da67      	bge.n	800cc76 <_dtoa_r+0x90e>
 800cba6:	9b00      	ldr	r3, [sp, #0]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	ee18 1a10 	vmov	r1, s16
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	220a      	movs	r2, #10
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fa41 	bl	800d03c <__multadd>
 800cbba:	9b08      	ldr	r3, [sp, #32]
 800cbbc:	ee08 0a10 	vmov	s16, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 81b1 	beq.w	800cf28 <_dtoa_r+0xbc0>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	4639      	mov	r1, r7
 800cbca:	220a      	movs	r2, #10
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 fa35 	bl	800d03c <__multadd>
 800cbd2:	9b02      	ldr	r3, [sp, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	4607      	mov	r7, r0
 800cbd8:	f300 808e 	bgt.w	800ccf8 <_dtoa_r+0x990>
 800cbdc:	9b06      	ldr	r3, [sp, #24]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	dc51      	bgt.n	800cc86 <_dtoa_r+0x91e>
 800cbe2:	e089      	b.n	800ccf8 <_dtoa_r+0x990>
 800cbe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbea:	e74b      	b.n	800ca84 <_dtoa_r+0x71c>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	1e5e      	subs	r6, r3, #1
 800cbf0:	9b07      	ldr	r3, [sp, #28]
 800cbf2:	42b3      	cmp	r3, r6
 800cbf4:	bfbf      	itttt	lt
 800cbf6:	9b07      	ldrlt	r3, [sp, #28]
 800cbf8:	9607      	strlt	r6, [sp, #28]
 800cbfa:	1af2      	sublt	r2, r6, r3
 800cbfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cbfe:	bfb6      	itet	lt
 800cc00:	189b      	addlt	r3, r3, r2
 800cc02:	1b9e      	subge	r6, r3, r6
 800cc04:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	bfb8      	it	lt
 800cc0a:	2600      	movlt	r6, #0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bfb7      	itett	lt
 800cc10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cc14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc18:	1a9d      	sublt	r5, r3, r2
 800cc1a:	2300      	movlt	r3, #0
 800cc1c:	e734      	b.n	800ca88 <_dtoa_r+0x720>
 800cc1e:	9e07      	ldr	r6, [sp, #28]
 800cc20:	9d04      	ldr	r5, [sp, #16]
 800cc22:	9f08      	ldr	r7, [sp, #32]
 800cc24:	e73b      	b.n	800ca9e <_dtoa_r+0x736>
 800cc26:	9a07      	ldr	r2, [sp, #28]
 800cc28:	e767      	b.n	800cafa <_dtoa_r+0x792>
 800cc2a:	9b06      	ldr	r3, [sp, #24]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	dc18      	bgt.n	800cc62 <_dtoa_r+0x8fa>
 800cc30:	f1ba 0f00 	cmp.w	sl, #0
 800cc34:	d115      	bne.n	800cc62 <_dtoa_r+0x8fa>
 800cc36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc3a:	b993      	cbnz	r3, 800cc62 <_dtoa_r+0x8fa>
 800cc3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc40:	0d1b      	lsrs	r3, r3, #20
 800cc42:	051b      	lsls	r3, r3, #20
 800cc44:	b183      	cbz	r3, 800cc68 <_dtoa_r+0x900>
 800cc46:	9b04      	ldr	r3, [sp, #16]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	9304      	str	r3, [sp, #16]
 800cc4c:	9b05      	ldr	r3, [sp, #20]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	9305      	str	r3, [sp, #20]
 800cc52:	f04f 0801 	mov.w	r8, #1
 800cc56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f47f af6a 	bne.w	800cb32 <_dtoa_r+0x7ca>
 800cc5e:	2001      	movs	r0, #1
 800cc60:	e76f      	b.n	800cb42 <_dtoa_r+0x7da>
 800cc62:	f04f 0800 	mov.w	r8, #0
 800cc66:	e7f6      	b.n	800cc56 <_dtoa_r+0x8ee>
 800cc68:	4698      	mov	r8, r3
 800cc6a:	e7f4      	b.n	800cc56 <_dtoa_r+0x8ee>
 800cc6c:	f43f af7d 	beq.w	800cb6a <_dtoa_r+0x802>
 800cc70:	4618      	mov	r0, r3
 800cc72:	301c      	adds	r0, #28
 800cc74:	e772      	b.n	800cb5c <_dtoa_r+0x7f4>
 800cc76:	9b03      	ldr	r3, [sp, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	dc37      	bgt.n	800ccec <_dtoa_r+0x984>
 800cc7c:	9b06      	ldr	r3, [sp, #24]
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	dd34      	ble.n	800ccec <_dtoa_r+0x984>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	9302      	str	r3, [sp, #8]
 800cc86:	9b02      	ldr	r3, [sp, #8]
 800cc88:	b96b      	cbnz	r3, 800cca6 <_dtoa_r+0x93e>
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	2205      	movs	r2, #5
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f000 f9d4 	bl	800d03c <__multadd>
 800cc94:	4601      	mov	r1, r0
 800cc96:	4606      	mov	r6, r0
 800cc98:	ee18 0a10 	vmov	r0, s16
 800cc9c:	f000 fbee 	bl	800d47c <__mcmp>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	f73f adbb 	bgt.w	800c81c <_dtoa_r+0x4b4>
 800cca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cca8:	9d01      	ldr	r5, [sp, #4]
 800ccaa:	43db      	mvns	r3, r3
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	f04f 0800 	mov.w	r8, #0
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 f99f 	bl	800cff8 <_Bfree>
 800ccba:	2f00      	cmp	r7, #0
 800ccbc:	f43f aea4 	beq.w	800ca08 <_dtoa_r+0x6a0>
 800ccc0:	f1b8 0f00 	cmp.w	r8, #0
 800ccc4:	d005      	beq.n	800ccd2 <_dtoa_r+0x96a>
 800ccc6:	45b8      	cmp	r8, r7
 800ccc8:	d003      	beq.n	800ccd2 <_dtoa_r+0x96a>
 800ccca:	4641      	mov	r1, r8
 800cccc:	4620      	mov	r0, r4
 800ccce:	f000 f993 	bl	800cff8 <_Bfree>
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 f98f 	bl	800cff8 <_Bfree>
 800ccda:	e695      	b.n	800ca08 <_dtoa_r+0x6a0>
 800ccdc:	2600      	movs	r6, #0
 800ccde:	4637      	mov	r7, r6
 800cce0:	e7e1      	b.n	800cca6 <_dtoa_r+0x93e>
 800cce2:	9700      	str	r7, [sp, #0]
 800cce4:	4637      	mov	r7, r6
 800cce6:	e599      	b.n	800c81c <_dtoa_r+0x4b4>
 800cce8:	40240000 	.word	0x40240000
 800ccec:	9b08      	ldr	r3, [sp, #32]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 80ca 	beq.w	800ce88 <_dtoa_r+0xb20>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	9302      	str	r3, [sp, #8]
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	dd05      	ble.n	800cd08 <_dtoa_r+0x9a0>
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	462a      	mov	r2, r5
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 fb4b 	bl	800d39c <__lshift>
 800cd06:	4607      	mov	r7, r0
 800cd08:	f1b8 0f00 	cmp.w	r8, #0
 800cd0c:	d05b      	beq.n	800cdc6 <_dtoa_r+0xa5e>
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 f931 	bl	800cf78 <_Balloc>
 800cd16:	4605      	mov	r5, r0
 800cd18:	b928      	cbnz	r0, 800cd26 <_dtoa_r+0x9be>
 800cd1a:	4b87      	ldr	r3, [pc, #540]	; (800cf38 <_dtoa_r+0xbd0>)
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd22:	f7ff bb3b 	b.w	800c39c <_dtoa_r+0x34>
 800cd26:	693a      	ldr	r2, [r7, #16]
 800cd28:	3202      	adds	r2, #2
 800cd2a:	0092      	lsls	r2, r2, #2
 800cd2c:	f107 010c 	add.w	r1, r7, #12
 800cd30:	300c      	adds	r0, #12
 800cd32:	f000 f913 	bl	800cf5c <memcpy>
 800cd36:	2201      	movs	r2, #1
 800cd38:	4629      	mov	r1, r5
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 fb2e 	bl	800d39c <__lshift>
 800cd40:	9b01      	ldr	r3, [sp, #4]
 800cd42:	f103 0901 	add.w	r9, r3, #1
 800cd46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	9305      	str	r3, [sp, #20]
 800cd4e:	f00a 0301 	and.w	r3, sl, #1
 800cd52:	46b8      	mov	r8, r7
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	4607      	mov	r7, r0
 800cd58:	4631      	mov	r1, r6
 800cd5a:	ee18 0a10 	vmov	r0, s16
 800cd5e:	f7ff fa78 	bl	800c252 <quorem>
 800cd62:	4641      	mov	r1, r8
 800cd64:	9002      	str	r0, [sp, #8]
 800cd66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd6a:	ee18 0a10 	vmov	r0, s16
 800cd6e:	f000 fb85 	bl	800d47c <__mcmp>
 800cd72:	463a      	mov	r2, r7
 800cd74:	9003      	str	r0, [sp, #12]
 800cd76:	4631      	mov	r1, r6
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f000 fb9b 	bl	800d4b4 <__mdiff>
 800cd7e:	68c2      	ldr	r2, [r0, #12]
 800cd80:	f109 3bff 	add.w	fp, r9, #4294967295
 800cd84:	4605      	mov	r5, r0
 800cd86:	bb02      	cbnz	r2, 800cdca <_dtoa_r+0xa62>
 800cd88:	4601      	mov	r1, r0
 800cd8a:	ee18 0a10 	vmov	r0, s16
 800cd8e:	f000 fb75 	bl	800d47c <__mcmp>
 800cd92:	4602      	mov	r2, r0
 800cd94:	4629      	mov	r1, r5
 800cd96:	4620      	mov	r0, r4
 800cd98:	9207      	str	r2, [sp, #28]
 800cd9a:	f000 f92d 	bl	800cff8 <_Bfree>
 800cd9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cda2:	ea43 0102 	orr.w	r1, r3, r2
 800cda6:	9b04      	ldr	r3, [sp, #16]
 800cda8:	430b      	orrs	r3, r1
 800cdaa:	464d      	mov	r5, r9
 800cdac:	d10f      	bne.n	800cdce <_dtoa_r+0xa66>
 800cdae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdb2:	d02a      	beq.n	800ce0a <_dtoa_r+0xaa2>
 800cdb4:	9b03      	ldr	r3, [sp, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	dd02      	ble.n	800cdc0 <_dtoa_r+0xa58>
 800cdba:	9b02      	ldr	r3, [sp, #8]
 800cdbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cdc0:	f88b a000 	strb.w	sl, [fp]
 800cdc4:	e775      	b.n	800ccb2 <_dtoa_r+0x94a>
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	e7ba      	b.n	800cd40 <_dtoa_r+0x9d8>
 800cdca:	2201      	movs	r2, #1
 800cdcc:	e7e2      	b.n	800cd94 <_dtoa_r+0xa2c>
 800cdce:	9b03      	ldr	r3, [sp, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	db04      	blt.n	800cdde <_dtoa_r+0xa76>
 800cdd4:	9906      	ldr	r1, [sp, #24]
 800cdd6:	430b      	orrs	r3, r1
 800cdd8:	9904      	ldr	r1, [sp, #16]
 800cdda:	430b      	orrs	r3, r1
 800cddc:	d122      	bne.n	800ce24 <_dtoa_r+0xabc>
 800cdde:	2a00      	cmp	r2, #0
 800cde0:	ddee      	ble.n	800cdc0 <_dtoa_r+0xa58>
 800cde2:	ee18 1a10 	vmov	r1, s16
 800cde6:	2201      	movs	r2, #1
 800cde8:	4620      	mov	r0, r4
 800cdea:	f000 fad7 	bl	800d39c <__lshift>
 800cdee:	4631      	mov	r1, r6
 800cdf0:	ee08 0a10 	vmov	s16, r0
 800cdf4:	f000 fb42 	bl	800d47c <__mcmp>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	dc03      	bgt.n	800ce04 <_dtoa_r+0xa9c>
 800cdfc:	d1e0      	bne.n	800cdc0 <_dtoa_r+0xa58>
 800cdfe:	f01a 0f01 	tst.w	sl, #1
 800ce02:	d0dd      	beq.n	800cdc0 <_dtoa_r+0xa58>
 800ce04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce08:	d1d7      	bne.n	800cdba <_dtoa_r+0xa52>
 800ce0a:	2339      	movs	r3, #57	; 0x39
 800ce0c:	f88b 3000 	strb.w	r3, [fp]
 800ce10:	462b      	mov	r3, r5
 800ce12:	461d      	mov	r5, r3
 800ce14:	3b01      	subs	r3, #1
 800ce16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce1a:	2a39      	cmp	r2, #57	; 0x39
 800ce1c:	d071      	beq.n	800cf02 <_dtoa_r+0xb9a>
 800ce1e:	3201      	adds	r2, #1
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	e746      	b.n	800ccb2 <_dtoa_r+0x94a>
 800ce24:	2a00      	cmp	r2, #0
 800ce26:	dd07      	ble.n	800ce38 <_dtoa_r+0xad0>
 800ce28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce2c:	d0ed      	beq.n	800ce0a <_dtoa_r+0xaa2>
 800ce2e:	f10a 0301 	add.w	r3, sl, #1
 800ce32:	f88b 3000 	strb.w	r3, [fp]
 800ce36:	e73c      	b.n	800ccb2 <_dtoa_r+0x94a>
 800ce38:	9b05      	ldr	r3, [sp, #20]
 800ce3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce3e:	4599      	cmp	r9, r3
 800ce40:	d047      	beq.n	800ced2 <_dtoa_r+0xb6a>
 800ce42:	ee18 1a10 	vmov	r1, s16
 800ce46:	2300      	movs	r3, #0
 800ce48:	220a      	movs	r2, #10
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 f8f6 	bl	800d03c <__multadd>
 800ce50:	45b8      	cmp	r8, r7
 800ce52:	ee08 0a10 	vmov	s16, r0
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	f04f 020a 	mov.w	r2, #10
 800ce5e:	4641      	mov	r1, r8
 800ce60:	4620      	mov	r0, r4
 800ce62:	d106      	bne.n	800ce72 <_dtoa_r+0xb0a>
 800ce64:	f000 f8ea 	bl	800d03c <__multadd>
 800ce68:	4680      	mov	r8, r0
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	f109 0901 	add.w	r9, r9, #1
 800ce70:	e772      	b.n	800cd58 <_dtoa_r+0x9f0>
 800ce72:	f000 f8e3 	bl	800d03c <__multadd>
 800ce76:	4639      	mov	r1, r7
 800ce78:	4680      	mov	r8, r0
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	220a      	movs	r2, #10
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 f8dc 	bl	800d03c <__multadd>
 800ce84:	4607      	mov	r7, r0
 800ce86:	e7f1      	b.n	800ce6c <_dtoa_r+0xb04>
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	9302      	str	r3, [sp, #8]
 800ce8c:	9d01      	ldr	r5, [sp, #4]
 800ce8e:	ee18 0a10 	vmov	r0, s16
 800ce92:	4631      	mov	r1, r6
 800ce94:	f7ff f9dd 	bl	800c252 <quorem>
 800ce98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce9c:	9b01      	ldr	r3, [sp, #4]
 800ce9e:	f805 ab01 	strb.w	sl, [r5], #1
 800cea2:	1aea      	subs	r2, r5, r3
 800cea4:	9b02      	ldr	r3, [sp, #8]
 800cea6:	4293      	cmp	r3, r2
 800cea8:	dd09      	ble.n	800cebe <_dtoa_r+0xb56>
 800ceaa:	ee18 1a10 	vmov	r1, s16
 800ceae:	2300      	movs	r3, #0
 800ceb0:	220a      	movs	r2, #10
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 f8c2 	bl	800d03c <__multadd>
 800ceb8:	ee08 0a10 	vmov	s16, r0
 800cebc:	e7e7      	b.n	800ce8e <_dtoa_r+0xb26>
 800cebe:	9b02      	ldr	r3, [sp, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bfc8      	it	gt
 800cec4:	461d      	movgt	r5, r3
 800cec6:	9b01      	ldr	r3, [sp, #4]
 800cec8:	bfd8      	it	le
 800ceca:	2501      	movle	r5, #1
 800cecc:	441d      	add	r5, r3
 800cece:	f04f 0800 	mov.w	r8, #0
 800ced2:	ee18 1a10 	vmov	r1, s16
 800ced6:	2201      	movs	r2, #1
 800ced8:	4620      	mov	r0, r4
 800ceda:	f000 fa5f 	bl	800d39c <__lshift>
 800cede:	4631      	mov	r1, r6
 800cee0:	ee08 0a10 	vmov	s16, r0
 800cee4:	f000 faca 	bl	800d47c <__mcmp>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	dc91      	bgt.n	800ce10 <_dtoa_r+0xaa8>
 800ceec:	d102      	bne.n	800cef4 <_dtoa_r+0xb8c>
 800ceee:	f01a 0f01 	tst.w	sl, #1
 800cef2:	d18d      	bne.n	800ce10 <_dtoa_r+0xaa8>
 800cef4:	462b      	mov	r3, r5
 800cef6:	461d      	mov	r5, r3
 800cef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cefc:	2a30      	cmp	r2, #48	; 0x30
 800cefe:	d0fa      	beq.n	800cef6 <_dtoa_r+0xb8e>
 800cf00:	e6d7      	b.n	800ccb2 <_dtoa_r+0x94a>
 800cf02:	9a01      	ldr	r2, [sp, #4]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d184      	bne.n	800ce12 <_dtoa_r+0xaaa>
 800cf08:	9b00      	ldr	r3, [sp, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	2331      	movs	r3, #49	; 0x31
 800cf10:	7013      	strb	r3, [r2, #0]
 800cf12:	e6ce      	b.n	800ccb2 <_dtoa_r+0x94a>
 800cf14:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <_dtoa_r+0xbd4>)
 800cf16:	f7ff ba95 	b.w	800c444 <_dtoa_r+0xdc>
 800cf1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f47f aa6e 	bne.w	800c3fe <_dtoa_r+0x96>
 800cf22:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <_dtoa_r+0xbd8>)
 800cf24:	f7ff ba8e 	b.w	800c444 <_dtoa_r+0xdc>
 800cf28:	9b02      	ldr	r3, [sp, #8]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	dcae      	bgt.n	800ce8c <_dtoa_r+0xb24>
 800cf2e:	9b06      	ldr	r3, [sp, #24]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	f73f aea8 	bgt.w	800cc86 <_dtoa_r+0x91e>
 800cf36:	e7a9      	b.n	800ce8c <_dtoa_r+0xb24>
 800cf38:	0801a09f 	.word	0x0801a09f
 800cf3c:	08019ffc 	.word	0x08019ffc
 800cf40:	0801a020 	.word	0x0801a020

0800cf44 <_localeconv_r>:
 800cf44:	4800      	ldr	r0, [pc, #0]	; (800cf48 <_localeconv_r+0x4>)
 800cf46:	4770      	bx	lr
 800cf48:	200003a8 	.word	0x200003a8

0800cf4c <malloc>:
 800cf4c:	4b02      	ldr	r3, [pc, #8]	; (800cf58 <malloc+0xc>)
 800cf4e:	4601      	mov	r1, r0
 800cf50:	6818      	ldr	r0, [r3, #0]
 800cf52:	f000 bc17 	b.w	800d784 <_malloc_r>
 800cf56:	bf00      	nop
 800cf58:	20000254 	.word	0x20000254

0800cf5c <memcpy>:
 800cf5c:	440a      	add	r2, r1
 800cf5e:	4291      	cmp	r1, r2
 800cf60:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf64:	d100      	bne.n	800cf68 <memcpy+0xc>
 800cf66:	4770      	bx	lr
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf72:	4291      	cmp	r1, r2
 800cf74:	d1f9      	bne.n	800cf6a <memcpy+0xe>
 800cf76:	bd10      	pop	{r4, pc}

0800cf78 <_Balloc>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	460d      	mov	r5, r1
 800cf80:	b976      	cbnz	r6, 800cfa0 <_Balloc+0x28>
 800cf82:	2010      	movs	r0, #16
 800cf84:	f7ff ffe2 	bl	800cf4c <malloc>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf8c:	b920      	cbnz	r0, 800cf98 <_Balloc+0x20>
 800cf8e:	4b18      	ldr	r3, [pc, #96]	; (800cff0 <_Balloc+0x78>)
 800cf90:	4818      	ldr	r0, [pc, #96]	; (800cff4 <_Balloc+0x7c>)
 800cf92:	2166      	movs	r1, #102	; 0x66
 800cf94:	f000 fdd6 	bl	800db44 <__assert_func>
 800cf98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf9c:	6006      	str	r6, [r0, #0]
 800cf9e:	60c6      	str	r6, [r0, #12]
 800cfa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfa2:	68f3      	ldr	r3, [r6, #12]
 800cfa4:	b183      	cbz	r3, 800cfc8 <_Balloc+0x50>
 800cfa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfae:	b9b8      	cbnz	r0, 800cfe0 <_Balloc+0x68>
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	fa01 f605 	lsl.w	r6, r1, r5
 800cfb6:	1d72      	adds	r2, r6, #5
 800cfb8:	0092      	lsls	r2, r2, #2
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 fb60 	bl	800d680 <_calloc_r>
 800cfc0:	b160      	cbz	r0, 800cfdc <_Balloc+0x64>
 800cfc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfc6:	e00e      	b.n	800cfe6 <_Balloc+0x6e>
 800cfc8:	2221      	movs	r2, #33	; 0x21
 800cfca:	2104      	movs	r1, #4
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 fb57 	bl	800d680 <_calloc_r>
 800cfd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfd4:	60f0      	str	r0, [r6, #12]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1e4      	bne.n	800cfa6 <_Balloc+0x2e>
 800cfdc:	2000      	movs	r0, #0
 800cfde:	bd70      	pop	{r4, r5, r6, pc}
 800cfe0:	6802      	ldr	r2, [r0, #0]
 800cfe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfec:	e7f7      	b.n	800cfde <_Balloc+0x66>
 800cfee:	bf00      	nop
 800cff0:	0801a02d 	.word	0x0801a02d
 800cff4:	0801a0b0 	.word	0x0801a0b0

0800cff8 <_Bfree>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cffc:	4605      	mov	r5, r0
 800cffe:	460c      	mov	r4, r1
 800d000:	b976      	cbnz	r6, 800d020 <_Bfree+0x28>
 800d002:	2010      	movs	r0, #16
 800d004:	f7ff ffa2 	bl	800cf4c <malloc>
 800d008:	4602      	mov	r2, r0
 800d00a:	6268      	str	r0, [r5, #36]	; 0x24
 800d00c:	b920      	cbnz	r0, 800d018 <_Bfree+0x20>
 800d00e:	4b09      	ldr	r3, [pc, #36]	; (800d034 <_Bfree+0x3c>)
 800d010:	4809      	ldr	r0, [pc, #36]	; (800d038 <_Bfree+0x40>)
 800d012:	218a      	movs	r1, #138	; 0x8a
 800d014:	f000 fd96 	bl	800db44 <__assert_func>
 800d018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d01c:	6006      	str	r6, [r0, #0]
 800d01e:	60c6      	str	r6, [r0, #12]
 800d020:	b13c      	cbz	r4, 800d032 <_Bfree+0x3a>
 800d022:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d024:	6862      	ldr	r2, [r4, #4]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d02c:	6021      	str	r1, [r4, #0]
 800d02e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d032:	bd70      	pop	{r4, r5, r6, pc}
 800d034:	0801a02d 	.word	0x0801a02d
 800d038:	0801a0b0 	.word	0x0801a0b0

0800d03c <__multadd>:
 800d03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d040:	690d      	ldr	r5, [r1, #16]
 800d042:	4607      	mov	r7, r0
 800d044:	460c      	mov	r4, r1
 800d046:	461e      	mov	r6, r3
 800d048:	f101 0c14 	add.w	ip, r1, #20
 800d04c:	2000      	movs	r0, #0
 800d04e:	f8dc 3000 	ldr.w	r3, [ip]
 800d052:	b299      	uxth	r1, r3
 800d054:	fb02 6101 	mla	r1, r2, r1, r6
 800d058:	0c1e      	lsrs	r6, r3, #16
 800d05a:	0c0b      	lsrs	r3, r1, #16
 800d05c:	fb02 3306 	mla	r3, r2, r6, r3
 800d060:	b289      	uxth	r1, r1
 800d062:	3001      	adds	r0, #1
 800d064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d068:	4285      	cmp	r5, r0
 800d06a:	f84c 1b04 	str.w	r1, [ip], #4
 800d06e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d072:	dcec      	bgt.n	800d04e <__multadd+0x12>
 800d074:	b30e      	cbz	r6, 800d0ba <__multadd+0x7e>
 800d076:	68a3      	ldr	r3, [r4, #8]
 800d078:	42ab      	cmp	r3, r5
 800d07a:	dc19      	bgt.n	800d0b0 <__multadd+0x74>
 800d07c:	6861      	ldr	r1, [r4, #4]
 800d07e:	4638      	mov	r0, r7
 800d080:	3101      	adds	r1, #1
 800d082:	f7ff ff79 	bl	800cf78 <_Balloc>
 800d086:	4680      	mov	r8, r0
 800d088:	b928      	cbnz	r0, 800d096 <__multadd+0x5a>
 800d08a:	4602      	mov	r2, r0
 800d08c:	4b0c      	ldr	r3, [pc, #48]	; (800d0c0 <__multadd+0x84>)
 800d08e:	480d      	ldr	r0, [pc, #52]	; (800d0c4 <__multadd+0x88>)
 800d090:	21b5      	movs	r1, #181	; 0xb5
 800d092:	f000 fd57 	bl	800db44 <__assert_func>
 800d096:	6922      	ldr	r2, [r4, #16]
 800d098:	3202      	adds	r2, #2
 800d09a:	f104 010c 	add.w	r1, r4, #12
 800d09e:	0092      	lsls	r2, r2, #2
 800d0a0:	300c      	adds	r0, #12
 800d0a2:	f7ff ff5b 	bl	800cf5c <memcpy>
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7ff ffa5 	bl	800cff8 <_Bfree>
 800d0ae:	4644      	mov	r4, r8
 800d0b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	615e      	str	r6, [r3, #20]
 800d0b8:	6125      	str	r5, [r4, #16]
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c0:	0801a09f 	.word	0x0801a09f
 800d0c4:	0801a0b0 	.word	0x0801a0b0

0800d0c8 <__hi0bits>:
 800d0c8:	0c03      	lsrs	r3, r0, #16
 800d0ca:	041b      	lsls	r3, r3, #16
 800d0cc:	b9d3      	cbnz	r3, 800d104 <__hi0bits+0x3c>
 800d0ce:	0400      	lsls	r0, r0, #16
 800d0d0:	2310      	movs	r3, #16
 800d0d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d0d6:	bf04      	itt	eq
 800d0d8:	0200      	lsleq	r0, r0, #8
 800d0da:	3308      	addeq	r3, #8
 800d0dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d0e0:	bf04      	itt	eq
 800d0e2:	0100      	lsleq	r0, r0, #4
 800d0e4:	3304      	addeq	r3, #4
 800d0e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0ea:	bf04      	itt	eq
 800d0ec:	0080      	lsleq	r0, r0, #2
 800d0ee:	3302      	addeq	r3, #2
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	db05      	blt.n	800d100 <__hi0bits+0x38>
 800d0f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0f8:	f103 0301 	add.w	r3, r3, #1
 800d0fc:	bf08      	it	eq
 800d0fe:	2320      	moveq	r3, #32
 800d100:	4618      	mov	r0, r3
 800d102:	4770      	bx	lr
 800d104:	2300      	movs	r3, #0
 800d106:	e7e4      	b.n	800d0d2 <__hi0bits+0xa>

0800d108 <__lo0bits>:
 800d108:	6803      	ldr	r3, [r0, #0]
 800d10a:	f013 0207 	ands.w	r2, r3, #7
 800d10e:	4601      	mov	r1, r0
 800d110:	d00b      	beq.n	800d12a <__lo0bits+0x22>
 800d112:	07da      	lsls	r2, r3, #31
 800d114:	d423      	bmi.n	800d15e <__lo0bits+0x56>
 800d116:	0798      	lsls	r0, r3, #30
 800d118:	bf49      	itett	mi
 800d11a:	085b      	lsrmi	r3, r3, #1
 800d11c:	089b      	lsrpl	r3, r3, #2
 800d11e:	2001      	movmi	r0, #1
 800d120:	600b      	strmi	r3, [r1, #0]
 800d122:	bf5c      	itt	pl
 800d124:	600b      	strpl	r3, [r1, #0]
 800d126:	2002      	movpl	r0, #2
 800d128:	4770      	bx	lr
 800d12a:	b298      	uxth	r0, r3
 800d12c:	b9a8      	cbnz	r0, 800d15a <__lo0bits+0x52>
 800d12e:	0c1b      	lsrs	r3, r3, #16
 800d130:	2010      	movs	r0, #16
 800d132:	b2da      	uxtb	r2, r3
 800d134:	b90a      	cbnz	r2, 800d13a <__lo0bits+0x32>
 800d136:	3008      	adds	r0, #8
 800d138:	0a1b      	lsrs	r3, r3, #8
 800d13a:	071a      	lsls	r2, r3, #28
 800d13c:	bf04      	itt	eq
 800d13e:	091b      	lsreq	r3, r3, #4
 800d140:	3004      	addeq	r0, #4
 800d142:	079a      	lsls	r2, r3, #30
 800d144:	bf04      	itt	eq
 800d146:	089b      	lsreq	r3, r3, #2
 800d148:	3002      	addeq	r0, #2
 800d14a:	07da      	lsls	r2, r3, #31
 800d14c:	d403      	bmi.n	800d156 <__lo0bits+0x4e>
 800d14e:	085b      	lsrs	r3, r3, #1
 800d150:	f100 0001 	add.w	r0, r0, #1
 800d154:	d005      	beq.n	800d162 <__lo0bits+0x5a>
 800d156:	600b      	str	r3, [r1, #0]
 800d158:	4770      	bx	lr
 800d15a:	4610      	mov	r0, r2
 800d15c:	e7e9      	b.n	800d132 <__lo0bits+0x2a>
 800d15e:	2000      	movs	r0, #0
 800d160:	4770      	bx	lr
 800d162:	2020      	movs	r0, #32
 800d164:	4770      	bx	lr
	...

0800d168 <__i2b>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	460c      	mov	r4, r1
 800d16c:	2101      	movs	r1, #1
 800d16e:	f7ff ff03 	bl	800cf78 <_Balloc>
 800d172:	4602      	mov	r2, r0
 800d174:	b928      	cbnz	r0, 800d182 <__i2b+0x1a>
 800d176:	4b05      	ldr	r3, [pc, #20]	; (800d18c <__i2b+0x24>)
 800d178:	4805      	ldr	r0, [pc, #20]	; (800d190 <__i2b+0x28>)
 800d17a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d17e:	f000 fce1 	bl	800db44 <__assert_func>
 800d182:	2301      	movs	r3, #1
 800d184:	6144      	str	r4, [r0, #20]
 800d186:	6103      	str	r3, [r0, #16]
 800d188:	bd10      	pop	{r4, pc}
 800d18a:	bf00      	nop
 800d18c:	0801a09f 	.word	0x0801a09f
 800d190:	0801a0b0 	.word	0x0801a0b0

0800d194 <__multiply>:
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4691      	mov	r9, r2
 800d19a:	690a      	ldr	r2, [r1, #16]
 800d19c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	bfb8      	it	lt
 800d1a4:	460b      	movlt	r3, r1
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	bfbc      	itt	lt
 800d1aa:	464c      	movlt	r4, r9
 800d1ac:	4699      	movlt	r9, r3
 800d1ae:	6927      	ldr	r7, [r4, #16]
 800d1b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1b4:	68a3      	ldr	r3, [r4, #8]
 800d1b6:	6861      	ldr	r1, [r4, #4]
 800d1b8:	eb07 060a 	add.w	r6, r7, sl
 800d1bc:	42b3      	cmp	r3, r6
 800d1be:	b085      	sub	sp, #20
 800d1c0:	bfb8      	it	lt
 800d1c2:	3101      	addlt	r1, #1
 800d1c4:	f7ff fed8 	bl	800cf78 <_Balloc>
 800d1c8:	b930      	cbnz	r0, 800d1d8 <__multiply+0x44>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	4b44      	ldr	r3, [pc, #272]	; (800d2e0 <__multiply+0x14c>)
 800d1ce:	4845      	ldr	r0, [pc, #276]	; (800d2e4 <__multiply+0x150>)
 800d1d0:	f240 115d 	movw	r1, #349	; 0x15d
 800d1d4:	f000 fcb6 	bl	800db44 <__assert_func>
 800d1d8:	f100 0514 	add.w	r5, r0, #20
 800d1dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1e0:	462b      	mov	r3, r5
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	4543      	cmp	r3, r8
 800d1e6:	d321      	bcc.n	800d22c <__multiply+0x98>
 800d1e8:	f104 0314 	add.w	r3, r4, #20
 800d1ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1f0:	f109 0314 	add.w	r3, r9, #20
 800d1f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1f8:	9202      	str	r2, [sp, #8]
 800d1fa:	1b3a      	subs	r2, r7, r4
 800d1fc:	3a15      	subs	r2, #21
 800d1fe:	f022 0203 	bic.w	r2, r2, #3
 800d202:	3204      	adds	r2, #4
 800d204:	f104 0115 	add.w	r1, r4, #21
 800d208:	428f      	cmp	r7, r1
 800d20a:	bf38      	it	cc
 800d20c:	2204      	movcc	r2, #4
 800d20e:	9201      	str	r2, [sp, #4]
 800d210:	9a02      	ldr	r2, [sp, #8]
 800d212:	9303      	str	r3, [sp, #12]
 800d214:	429a      	cmp	r2, r3
 800d216:	d80c      	bhi.n	800d232 <__multiply+0x9e>
 800d218:	2e00      	cmp	r6, #0
 800d21a:	dd03      	ble.n	800d224 <__multiply+0x90>
 800d21c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d220:	2b00      	cmp	r3, #0
 800d222:	d05a      	beq.n	800d2da <__multiply+0x146>
 800d224:	6106      	str	r6, [r0, #16]
 800d226:	b005      	add	sp, #20
 800d228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22c:	f843 2b04 	str.w	r2, [r3], #4
 800d230:	e7d8      	b.n	800d1e4 <__multiply+0x50>
 800d232:	f8b3 a000 	ldrh.w	sl, [r3]
 800d236:	f1ba 0f00 	cmp.w	sl, #0
 800d23a:	d024      	beq.n	800d286 <__multiply+0xf2>
 800d23c:	f104 0e14 	add.w	lr, r4, #20
 800d240:	46a9      	mov	r9, r5
 800d242:	f04f 0c00 	mov.w	ip, #0
 800d246:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d24a:	f8d9 1000 	ldr.w	r1, [r9]
 800d24e:	fa1f fb82 	uxth.w	fp, r2
 800d252:	b289      	uxth	r1, r1
 800d254:	fb0a 110b 	mla	r1, sl, fp, r1
 800d258:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d25c:	f8d9 2000 	ldr.w	r2, [r9]
 800d260:	4461      	add	r1, ip
 800d262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d266:	fb0a c20b 	mla	r2, sl, fp, ip
 800d26a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d26e:	b289      	uxth	r1, r1
 800d270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d274:	4577      	cmp	r7, lr
 800d276:	f849 1b04 	str.w	r1, [r9], #4
 800d27a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d27e:	d8e2      	bhi.n	800d246 <__multiply+0xb2>
 800d280:	9a01      	ldr	r2, [sp, #4]
 800d282:	f845 c002 	str.w	ip, [r5, r2]
 800d286:	9a03      	ldr	r2, [sp, #12]
 800d288:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d28c:	3304      	adds	r3, #4
 800d28e:	f1b9 0f00 	cmp.w	r9, #0
 800d292:	d020      	beq.n	800d2d6 <__multiply+0x142>
 800d294:	6829      	ldr	r1, [r5, #0]
 800d296:	f104 0c14 	add.w	ip, r4, #20
 800d29a:	46ae      	mov	lr, r5
 800d29c:	f04f 0a00 	mov.w	sl, #0
 800d2a0:	f8bc b000 	ldrh.w	fp, [ip]
 800d2a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d2a8:	fb09 220b 	mla	r2, r9, fp, r2
 800d2ac:	4492      	add	sl, r2
 800d2ae:	b289      	uxth	r1, r1
 800d2b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d2b4:	f84e 1b04 	str.w	r1, [lr], #4
 800d2b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d2bc:	f8be 1000 	ldrh.w	r1, [lr]
 800d2c0:	0c12      	lsrs	r2, r2, #16
 800d2c2:	fb09 1102 	mla	r1, r9, r2, r1
 800d2c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d2ca:	4567      	cmp	r7, ip
 800d2cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d2d0:	d8e6      	bhi.n	800d2a0 <__multiply+0x10c>
 800d2d2:	9a01      	ldr	r2, [sp, #4]
 800d2d4:	50a9      	str	r1, [r5, r2]
 800d2d6:	3504      	adds	r5, #4
 800d2d8:	e79a      	b.n	800d210 <__multiply+0x7c>
 800d2da:	3e01      	subs	r6, #1
 800d2dc:	e79c      	b.n	800d218 <__multiply+0x84>
 800d2de:	bf00      	nop
 800d2e0:	0801a09f 	.word	0x0801a09f
 800d2e4:	0801a0b0 	.word	0x0801a0b0

0800d2e8 <__pow5mult>:
 800d2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ec:	4615      	mov	r5, r2
 800d2ee:	f012 0203 	ands.w	r2, r2, #3
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	460f      	mov	r7, r1
 800d2f6:	d007      	beq.n	800d308 <__pow5mult+0x20>
 800d2f8:	4c25      	ldr	r4, [pc, #148]	; (800d390 <__pow5mult+0xa8>)
 800d2fa:	3a01      	subs	r2, #1
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d302:	f7ff fe9b 	bl	800d03c <__multadd>
 800d306:	4607      	mov	r7, r0
 800d308:	10ad      	asrs	r5, r5, #2
 800d30a:	d03d      	beq.n	800d388 <__pow5mult+0xa0>
 800d30c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d30e:	b97c      	cbnz	r4, 800d330 <__pow5mult+0x48>
 800d310:	2010      	movs	r0, #16
 800d312:	f7ff fe1b 	bl	800cf4c <malloc>
 800d316:	4602      	mov	r2, r0
 800d318:	6270      	str	r0, [r6, #36]	; 0x24
 800d31a:	b928      	cbnz	r0, 800d328 <__pow5mult+0x40>
 800d31c:	4b1d      	ldr	r3, [pc, #116]	; (800d394 <__pow5mult+0xac>)
 800d31e:	481e      	ldr	r0, [pc, #120]	; (800d398 <__pow5mult+0xb0>)
 800d320:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d324:	f000 fc0e 	bl	800db44 <__assert_func>
 800d328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d32c:	6004      	str	r4, [r0, #0]
 800d32e:	60c4      	str	r4, [r0, #12]
 800d330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d338:	b94c      	cbnz	r4, 800d34e <__pow5mult+0x66>
 800d33a:	f240 2171 	movw	r1, #625	; 0x271
 800d33e:	4630      	mov	r0, r6
 800d340:	f7ff ff12 	bl	800d168 <__i2b>
 800d344:	2300      	movs	r3, #0
 800d346:	f8c8 0008 	str.w	r0, [r8, #8]
 800d34a:	4604      	mov	r4, r0
 800d34c:	6003      	str	r3, [r0, #0]
 800d34e:	f04f 0900 	mov.w	r9, #0
 800d352:	07eb      	lsls	r3, r5, #31
 800d354:	d50a      	bpl.n	800d36c <__pow5mult+0x84>
 800d356:	4639      	mov	r1, r7
 800d358:	4622      	mov	r2, r4
 800d35a:	4630      	mov	r0, r6
 800d35c:	f7ff ff1a 	bl	800d194 <__multiply>
 800d360:	4639      	mov	r1, r7
 800d362:	4680      	mov	r8, r0
 800d364:	4630      	mov	r0, r6
 800d366:	f7ff fe47 	bl	800cff8 <_Bfree>
 800d36a:	4647      	mov	r7, r8
 800d36c:	106d      	asrs	r5, r5, #1
 800d36e:	d00b      	beq.n	800d388 <__pow5mult+0xa0>
 800d370:	6820      	ldr	r0, [r4, #0]
 800d372:	b938      	cbnz	r0, 800d384 <__pow5mult+0x9c>
 800d374:	4622      	mov	r2, r4
 800d376:	4621      	mov	r1, r4
 800d378:	4630      	mov	r0, r6
 800d37a:	f7ff ff0b 	bl	800d194 <__multiply>
 800d37e:	6020      	str	r0, [r4, #0]
 800d380:	f8c0 9000 	str.w	r9, [r0]
 800d384:	4604      	mov	r4, r0
 800d386:	e7e4      	b.n	800d352 <__pow5mult+0x6a>
 800d388:	4638      	mov	r0, r7
 800d38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38e:	bf00      	nop
 800d390:	0801a200 	.word	0x0801a200
 800d394:	0801a02d 	.word	0x0801a02d
 800d398:	0801a0b0 	.word	0x0801a0b0

0800d39c <__lshift>:
 800d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	6849      	ldr	r1, [r1, #4]
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3aa:	68a3      	ldr	r3, [r4, #8]
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	4691      	mov	r9, r2
 800d3b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3b4:	f108 0601 	add.w	r6, r8, #1
 800d3b8:	42b3      	cmp	r3, r6
 800d3ba:	db0b      	blt.n	800d3d4 <__lshift+0x38>
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff fddb 	bl	800cf78 <_Balloc>
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	b948      	cbnz	r0, 800d3da <__lshift+0x3e>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	4b2a      	ldr	r3, [pc, #168]	; (800d474 <__lshift+0xd8>)
 800d3ca:	482b      	ldr	r0, [pc, #172]	; (800d478 <__lshift+0xdc>)
 800d3cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d3d0:	f000 fbb8 	bl	800db44 <__assert_func>
 800d3d4:	3101      	adds	r1, #1
 800d3d6:	005b      	lsls	r3, r3, #1
 800d3d8:	e7ee      	b.n	800d3b8 <__lshift+0x1c>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f100 0114 	add.w	r1, r0, #20
 800d3e0:	f100 0210 	add.w	r2, r0, #16
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	4553      	cmp	r3, sl
 800d3e8:	db37      	blt.n	800d45a <__lshift+0xbe>
 800d3ea:	6920      	ldr	r0, [r4, #16]
 800d3ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3f0:	f104 0314 	add.w	r3, r4, #20
 800d3f4:	f019 091f 	ands.w	r9, r9, #31
 800d3f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d400:	d02f      	beq.n	800d462 <__lshift+0xc6>
 800d402:	f1c9 0e20 	rsb	lr, r9, #32
 800d406:	468a      	mov	sl, r1
 800d408:	f04f 0c00 	mov.w	ip, #0
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	fa02 f209 	lsl.w	r2, r2, r9
 800d412:	ea42 020c 	orr.w	r2, r2, ip
 800d416:	f84a 2b04 	str.w	r2, [sl], #4
 800d41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d41e:	4298      	cmp	r0, r3
 800d420:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d424:	d8f2      	bhi.n	800d40c <__lshift+0x70>
 800d426:	1b03      	subs	r3, r0, r4
 800d428:	3b15      	subs	r3, #21
 800d42a:	f023 0303 	bic.w	r3, r3, #3
 800d42e:	3304      	adds	r3, #4
 800d430:	f104 0215 	add.w	r2, r4, #21
 800d434:	4290      	cmp	r0, r2
 800d436:	bf38      	it	cc
 800d438:	2304      	movcc	r3, #4
 800d43a:	f841 c003 	str.w	ip, [r1, r3]
 800d43e:	f1bc 0f00 	cmp.w	ip, #0
 800d442:	d001      	beq.n	800d448 <__lshift+0xac>
 800d444:	f108 0602 	add.w	r6, r8, #2
 800d448:	3e01      	subs	r6, #1
 800d44a:	4638      	mov	r0, r7
 800d44c:	612e      	str	r6, [r5, #16]
 800d44e:	4621      	mov	r1, r4
 800d450:	f7ff fdd2 	bl	800cff8 <_Bfree>
 800d454:	4628      	mov	r0, r5
 800d456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d45e:	3301      	adds	r3, #1
 800d460:	e7c1      	b.n	800d3e6 <__lshift+0x4a>
 800d462:	3904      	subs	r1, #4
 800d464:	f853 2b04 	ldr.w	r2, [r3], #4
 800d468:	f841 2f04 	str.w	r2, [r1, #4]!
 800d46c:	4298      	cmp	r0, r3
 800d46e:	d8f9      	bhi.n	800d464 <__lshift+0xc8>
 800d470:	e7ea      	b.n	800d448 <__lshift+0xac>
 800d472:	bf00      	nop
 800d474:	0801a09f 	.word	0x0801a09f
 800d478:	0801a0b0 	.word	0x0801a0b0

0800d47c <__mcmp>:
 800d47c:	b530      	push	{r4, r5, lr}
 800d47e:	6902      	ldr	r2, [r0, #16]
 800d480:	690c      	ldr	r4, [r1, #16]
 800d482:	1b12      	subs	r2, r2, r4
 800d484:	d10e      	bne.n	800d4a4 <__mcmp+0x28>
 800d486:	f100 0314 	add.w	r3, r0, #20
 800d48a:	3114      	adds	r1, #20
 800d48c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d494:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d498:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d49c:	42a5      	cmp	r5, r4
 800d49e:	d003      	beq.n	800d4a8 <__mcmp+0x2c>
 800d4a0:	d305      	bcc.n	800d4ae <__mcmp+0x32>
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	bd30      	pop	{r4, r5, pc}
 800d4a8:	4283      	cmp	r3, r0
 800d4aa:	d3f3      	bcc.n	800d494 <__mcmp+0x18>
 800d4ac:	e7fa      	b.n	800d4a4 <__mcmp+0x28>
 800d4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b2:	e7f7      	b.n	800d4a4 <__mcmp+0x28>

0800d4b4 <__mdiff>:
 800d4b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	4606      	mov	r6, r0
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4620      	mov	r0, r4
 800d4c0:	4690      	mov	r8, r2
 800d4c2:	f7ff ffdb 	bl	800d47c <__mcmp>
 800d4c6:	1e05      	subs	r5, r0, #0
 800d4c8:	d110      	bne.n	800d4ec <__mdiff+0x38>
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7ff fd53 	bl	800cf78 <_Balloc>
 800d4d2:	b930      	cbnz	r0, 800d4e2 <__mdiff+0x2e>
 800d4d4:	4b3a      	ldr	r3, [pc, #232]	; (800d5c0 <__mdiff+0x10c>)
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	f240 2132 	movw	r1, #562	; 0x232
 800d4dc:	4839      	ldr	r0, [pc, #228]	; (800d5c4 <__mdiff+0x110>)
 800d4de:	f000 fb31 	bl	800db44 <__assert_func>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	bfa4      	itt	ge
 800d4ee:	4643      	movge	r3, r8
 800d4f0:	46a0      	movge	r8, r4
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4f8:	bfa6      	itte	ge
 800d4fa:	461c      	movge	r4, r3
 800d4fc:	2500      	movge	r5, #0
 800d4fe:	2501      	movlt	r5, #1
 800d500:	f7ff fd3a 	bl	800cf78 <_Balloc>
 800d504:	b920      	cbnz	r0, 800d510 <__mdiff+0x5c>
 800d506:	4b2e      	ldr	r3, [pc, #184]	; (800d5c0 <__mdiff+0x10c>)
 800d508:	4602      	mov	r2, r0
 800d50a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d50e:	e7e5      	b.n	800d4dc <__mdiff+0x28>
 800d510:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d514:	6926      	ldr	r6, [r4, #16]
 800d516:	60c5      	str	r5, [r0, #12]
 800d518:	f104 0914 	add.w	r9, r4, #20
 800d51c:	f108 0514 	add.w	r5, r8, #20
 800d520:	f100 0e14 	add.w	lr, r0, #20
 800d524:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d528:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d52c:	f108 0210 	add.w	r2, r8, #16
 800d530:	46f2      	mov	sl, lr
 800d532:	2100      	movs	r1, #0
 800d534:	f859 3b04 	ldr.w	r3, [r9], #4
 800d538:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d53c:	fa1f f883 	uxth.w	r8, r3
 800d540:	fa11 f18b 	uxtah	r1, r1, fp
 800d544:	0c1b      	lsrs	r3, r3, #16
 800d546:	eba1 0808 	sub.w	r8, r1, r8
 800d54a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d54e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d552:	fa1f f888 	uxth.w	r8, r8
 800d556:	1419      	asrs	r1, r3, #16
 800d558:	454e      	cmp	r6, r9
 800d55a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d55e:	f84a 3b04 	str.w	r3, [sl], #4
 800d562:	d8e7      	bhi.n	800d534 <__mdiff+0x80>
 800d564:	1b33      	subs	r3, r6, r4
 800d566:	3b15      	subs	r3, #21
 800d568:	f023 0303 	bic.w	r3, r3, #3
 800d56c:	3304      	adds	r3, #4
 800d56e:	3415      	adds	r4, #21
 800d570:	42a6      	cmp	r6, r4
 800d572:	bf38      	it	cc
 800d574:	2304      	movcc	r3, #4
 800d576:	441d      	add	r5, r3
 800d578:	4473      	add	r3, lr
 800d57a:	469e      	mov	lr, r3
 800d57c:	462e      	mov	r6, r5
 800d57e:	4566      	cmp	r6, ip
 800d580:	d30e      	bcc.n	800d5a0 <__mdiff+0xec>
 800d582:	f10c 0203 	add.w	r2, ip, #3
 800d586:	1b52      	subs	r2, r2, r5
 800d588:	f022 0203 	bic.w	r2, r2, #3
 800d58c:	3d03      	subs	r5, #3
 800d58e:	45ac      	cmp	ip, r5
 800d590:	bf38      	it	cc
 800d592:	2200      	movcc	r2, #0
 800d594:	441a      	add	r2, r3
 800d596:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d59a:	b17b      	cbz	r3, 800d5bc <__mdiff+0x108>
 800d59c:	6107      	str	r7, [r0, #16]
 800d59e:	e7a3      	b.n	800d4e8 <__mdiff+0x34>
 800d5a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d5a4:	fa11 f288 	uxtah	r2, r1, r8
 800d5a8:	1414      	asrs	r4, r2, #16
 800d5aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d5ae:	b292      	uxth	r2, r2
 800d5b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d5b4:	f84e 2b04 	str.w	r2, [lr], #4
 800d5b8:	1421      	asrs	r1, r4, #16
 800d5ba:	e7e0      	b.n	800d57e <__mdiff+0xca>
 800d5bc:	3f01      	subs	r7, #1
 800d5be:	e7ea      	b.n	800d596 <__mdiff+0xe2>
 800d5c0:	0801a09f 	.word	0x0801a09f
 800d5c4:	0801a0b0 	.word	0x0801a0b0

0800d5c8 <__d2b>:
 800d5c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5cc:	4689      	mov	r9, r1
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	ec57 6b10 	vmov	r6, r7, d0
 800d5d4:	4690      	mov	r8, r2
 800d5d6:	f7ff fccf 	bl	800cf78 <_Balloc>
 800d5da:	4604      	mov	r4, r0
 800d5dc:	b930      	cbnz	r0, 800d5ec <__d2b+0x24>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	4b25      	ldr	r3, [pc, #148]	; (800d678 <__d2b+0xb0>)
 800d5e2:	4826      	ldr	r0, [pc, #152]	; (800d67c <__d2b+0xb4>)
 800d5e4:	f240 310a 	movw	r1, #778	; 0x30a
 800d5e8:	f000 faac 	bl	800db44 <__assert_func>
 800d5ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d5f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5f4:	bb35      	cbnz	r5, 800d644 <__d2b+0x7c>
 800d5f6:	2e00      	cmp	r6, #0
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	d028      	beq.n	800d64e <__d2b+0x86>
 800d5fc:	4668      	mov	r0, sp
 800d5fe:	9600      	str	r6, [sp, #0]
 800d600:	f7ff fd82 	bl	800d108 <__lo0bits>
 800d604:	9900      	ldr	r1, [sp, #0]
 800d606:	b300      	cbz	r0, 800d64a <__d2b+0x82>
 800d608:	9a01      	ldr	r2, [sp, #4]
 800d60a:	f1c0 0320 	rsb	r3, r0, #32
 800d60e:	fa02 f303 	lsl.w	r3, r2, r3
 800d612:	430b      	orrs	r3, r1
 800d614:	40c2      	lsrs	r2, r0
 800d616:	6163      	str	r3, [r4, #20]
 800d618:	9201      	str	r2, [sp, #4]
 800d61a:	9b01      	ldr	r3, [sp, #4]
 800d61c:	61a3      	str	r3, [r4, #24]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bf14      	ite	ne
 800d622:	2202      	movne	r2, #2
 800d624:	2201      	moveq	r2, #1
 800d626:	6122      	str	r2, [r4, #16]
 800d628:	b1d5      	cbz	r5, 800d660 <__d2b+0x98>
 800d62a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d62e:	4405      	add	r5, r0
 800d630:	f8c9 5000 	str.w	r5, [r9]
 800d634:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d638:	f8c8 0000 	str.w	r0, [r8]
 800d63c:	4620      	mov	r0, r4
 800d63e:	b003      	add	sp, #12
 800d640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d648:	e7d5      	b.n	800d5f6 <__d2b+0x2e>
 800d64a:	6161      	str	r1, [r4, #20]
 800d64c:	e7e5      	b.n	800d61a <__d2b+0x52>
 800d64e:	a801      	add	r0, sp, #4
 800d650:	f7ff fd5a 	bl	800d108 <__lo0bits>
 800d654:	9b01      	ldr	r3, [sp, #4]
 800d656:	6163      	str	r3, [r4, #20]
 800d658:	2201      	movs	r2, #1
 800d65a:	6122      	str	r2, [r4, #16]
 800d65c:	3020      	adds	r0, #32
 800d65e:	e7e3      	b.n	800d628 <__d2b+0x60>
 800d660:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d664:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d668:	f8c9 0000 	str.w	r0, [r9]
 800d66c:	6918      	ldr	r0, [r3, #16]
 800d66e:	f7ff fd2b 	bl	800d0c8 <__hi0bits>
 800d672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d676:	e7df      	b.n	800d638 <__d2b+0x70>
 800d678:	0801a09f 	.word	0x0801a09f
 800d67c:	0801a0b0 	.word	0x0801a0b0

0800d680 <_calloc_r>:
 800d680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d682:	fba1 2402 	umull	r2, r4, r1, r2
 800d686:	b94c      	cbnz	r4, 800d69c <_calloc_r+0x1c>
 800d688:	4611      	mov	r1, r2
 800d68a:	9201      	str	r2, [sp, #4]
 800d68c:	f000 f87a 	bl	800d784 <_malloc_r>
 800d690:	9a01      	ldr	r2, [sp, #4]
 800d692:	4605      	mov	r5, r0
 800d694:	b930      	cbnz	r0, 800d6a4 <_calloc_r+0x24>
 800d696:	4628      	mov	r0, r5
 800d698:	b003      	add	sp, #12
 800d69a:	bd30      	pop	{r4, r5, pc}
 800d69c:	220c      	movs	r2, #12
 800d69e:	6002      	str	r2, [r0, #0]
 800d6a0:	2500      	movs	r5, #0
 800d6a2:	e7f8      	b.n	800d696 <_calloc_r+0x16>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	f7fe f92f 	bl	800b908 <memset>
 800d6aa:	e7f4      	b.n	800d696 <_calloc_r+0x16>

0800d6ac <_free_r>:
 800d6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	d044      	beq.n	800d73c <_free_r+0x90>
 800d6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b6:	9001      	str	r0, [sp, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d6be:	bfb8      	it	lt
 800d6c0:	18e4      	addlt	r4, r4, r3
 800d6c2:	f000 fa9b 	bl	800dbfc <__malloc_lock>
 800d6c6:	4a1e      	ldr	r2, [pc, #120]	; (800d740 <_free_r+0x94>)
 800d6c8:	9801      	ldr	r0, [sp, #4]
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	b933      	cbnz	r3, 800d6dc <_free_r+0x30>
 800d6ce:	6063      	str	r3, [r4, #4]
 800d6d0:	6014      	str	r4, [r2, #0]
 800d6d2:	b003      	add	sp, #12
 800d6d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6d8:	f000 ba96 	b.w	800dc08 <__malloc_unlock>
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	d908      	bls.n	800d6f2 <_free_r+0x46>
 800d6e0:	6825      	ldr	r5, [r4, #0]
 800d6e2:	1961      	adds	r1, r4, r5
 800d6e4:	428b      	cmp	r3, r1
 800d6e6:	bf01      	itttt	eq
 800d6e8:	6819      	ldreq	r1, [r3, #0]
 800d6ea:	685b      	ldreq	r3, [r3, #4]
 800d6ec:	1949      	addeq	r1, r1, r5
 800d6ee:	6021      	streq	r1, [r4, #0]
 800d6f0:	e7ed      	b.n	800d6ce <_free_r+0x22>
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	b10b      	cbz	r3, 800d6fc <_free_r+0x50>
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	d9fa      	bls.n	800d6f2 <_free_r+0x46>
 800d6fc:	6811      	ldr	r1, [r2, #0]
 800d6fe:	1855      	adds	r5, r2, r1
 800d700:	42a5      	cmp	r5, r4
 800d702:	d10b      	bne.n	800d71c <_free_r+0x70>
 800d704:	6824      	ldr	r4, [r4, #0]
 800d706:	4421      	add	r1, r4
 800d708:	1854      	adds	r4, r2, r1
 800d70a:	42a3      	cmp	r3, r4
 800d70c:	6011      	str	r1, [r2, #0]
 800d70e:	d1e0      	bne.n	800d6d2 <_free_r+0x26>
 800d710:	681c      	ldr	r4, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	6053      	str	r3, [r2, #4]
 800d716:	4421      	add	r1, r4
 800d718:	6011      	str	r1, [r2, #0]
 800d71a:	e7da      	b.n	800d6d2 <_free_r+0x26>
 800d71c:	d902      	bls.n	800d724 <_free_r+0x78>
 800d71e:	230c      	movs	r3, #12
 800d720:	6003      	str	r3, [r0, #0]
 800d722:	e7d6      	b.n	800d6d2 <_free_r+0x26>
 800d724:	6825      	ldr	r5, [r4, #0]
 800d726:	1961      	adds	r1, r4, r5
 800d728:	428b      	cmp	r3, r1
 800d72a:	bf04      	itt	eq
 800d72c:	6819      	ldreq	r1, [r3, #0]
 800d72e:	685b      	ldreq	r3, [r3, #4]
 800d730:	6063      	str	r3, [r4, #4]
 800d732:	bf04      	itt	eq
 800d734:	1949      	addeq	r1, r1, r5
 800d736:	6021      	streq	r1, [r4, #0]
 800d738:	6054      	str	r4, [r2, #4]
 800d73a:	e7ca      	b.n	800d6d2 <_free_r+0x26>
 800d73c:	b003      	add	sp, #12
 800d73e:	bd30      	pop	{r4, r5, pc}
 800d740:	20000864 	.word	0x20000864

0800d744 <sbrk_aligned>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	4e0e      	ldr	r6, [pc, #56]	; (800d780 <sbrk_aligned+0x3c>)
 800d748:	460c      	mov	r4, r1
 800d74a:	6831      	ldr	r1, [r6, #0]
 800d74c:	4605      	mov	r5, r0
 800d74e:	b911      	cbnz	r1, 800d756 <sbrk_aligned+0x12>
 800d750:	f000 f9e8 	bl	800db24 <_sbrk_r>
 800d754:	6030      	str	r0, [r6, #0]
 800d756:	4621      	mov	r1, r4
 800d758:	4628      	mov	r0, r5
 800d75a:	f000 f9e3 	bl	800db24 <_sbrk_r>
 800d75e:	1c43      	adds	r3, r0, #1
 800d760:	d00a      	beq.n	800d778 <sbrk_aligned+0x34>
 800d762:	1cc4      	adds	r4, r0, #3
 800d764:	f024 0403 	bic.w	r4, r4, #3
 800d768:	42a0      	cmp	r0, r4
 800d76a:	d007      	beq.n	800d77c <sbrk_aligned+0x38>
 800d76c:	1a21      	subs	r1, r4, r0
 800d76e:	4628      	mov	r0, r5
 800d770:	f000 f9d8 	bl	800db24 <_sbrk_r>
 800d774:	3001      	adds	r0, #1
 800d776:	d101      	bne.n	800d77c <sbrk_aligned+0x38>
 800d778:	f04f 34ff 	mov.w	r4, #4294967295
 800d77c:	4620      	mov	r0, r4
 800d77e:	bd70      	pop	{r4, r5, r6, pc}
 800d780:	20000868 	.word	0x20000868

0800d784 <_malloc_r>:
 800d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d788:	1ccd      	adds	r5, r1, #3
 800d78a:	f025 0503 	bic.w	r5, r5, #3
 800d78e:	3508      	adds	r5, #8
 800d790:	2d0c      	cmp	r5, #12
 800d792:	bf38      	it	cc
 800d794:	250c      	movcc	r5, #12
 800d796:	2d00      	cmp	r5, #0
 800d798:	4607      	mov	r7, r0
 800d79a:	db01      	blt.n	800d7a0 <_malloc_r+0x1c>
 800d79c:	42a9      	cmp	r1, r5
 800d79e:	d905      	bls.n	800d7ac <_malloc_r+0x28>
 800d7a0:	230c      	movs	r3, #12
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	2600      	movs	r6, #0
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ac:	4e2e      	ldr	r6, [pc, #184]	; (800d868 <_malloc_r+0xe4>)
 800d7ae:	f000 fa25 	bl	800dbfc <__malloc_lock>
 800d7b2:	6833      	ldr	r3, [r6, #0]
 800d7b4:	461c      	mov	r4, r3
 800d7b6:	bb34      	cbnz	r4, 800d806 <_malloc_r+0x82>
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	f7ff ffc2 	bl	800d744 <sbrk_aligned>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	d14d      	bne.n	800d862 <_malloc_r+0xde>
 800d7c6:	6834      	ldr	r4, [r6, #0]
 800d7c8:	4626      	mov	r6, r4
 800d7ca:	2e00      	cmp	r6, #0
 800d7cc:	d140      	bne.n	800d850 <_malloc_r+0xcc>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	eb04 0803 	add.w	r8, r4, r3
 800d7d8:	f000 f9a4 	bl	800db24 <_sbrk_r>
 800d7dc:	4580      	cmp	r8, r0
 800d7de:	d13a      	bne.n	800d856 <_malloc_r+0xd2>
 800d7e0:	6821      	ldr	r1, [r4, #0]
 800d7e2:	3503      	adds	r5, #3
 800d7e4:	1a6d      	subs	r5, r5, r1
 800d7e6:	f025 0503 	bic.w	r5, r5, #3
 800d7ea:	3508      	adds	r5, #8
 800d7ec:	2d0c      	cmp	r5, #12
 800d7ee:	bf38      	it	cc
 800d7f0:	250c      	movcc	r5, #12
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f7ff ffa5 	bl	800d744 <sbrk_aligned>
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d02b      	beq.n	800d856 <_malloc_r+0xd2>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	442b      	add	r3, r5
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	e00e      	b.n	800d824 <_malloc_r+0xa0>
 800d806:	6822      	ldr	r2, [r4, #0]
 800d808:	1b52      	subs	r2, r2, r5
 800d80a:	d41e      	bmi.n	800d84a <_malloc_r+0xc6>
 800d80c:	2a0b      	cmp	r2, #11
 800d80e:	d916      	bls.n	800d83e <_malloc_r+0xba>
 800d810:	1961      	adds	r1, r4, r5
 800d812:	42a3      	cmp	r3, r4
 800d814:	6025      	str	r5, [r4, #0]
 800d816:	bf18      	it	ne
 800d818:	6059      	strne	r1, [r3, #4]
 800d81a:	6863      	ldr	r3, [r4, #4]
 800d81c:	bf08      	it	eq
 800d81e:	6031      	streq	r1, [r6, #0]
 800d820:	5162      	str	r2, [r4, r5]
 800d822:	604b      	str	r3, [r1, #4]
 800d824:	4638      	mov	r0, r7
 800d826:	f104 060b 	add.w	r6, r4, #11
 800d82a:	f000 f9ed 	bl	800dc08 <__malloc_unlock>
 800d82e:	f026 0607 	bic.w	r6, r6, #7
 800d832:	1d23      	adds	r3, r4, #4
 800d834:	1af2      	subs	r2, r6, r3
 800d836:	d0b6      	beq.n	800d7a6 <_malloc_r+0x22>
 800d838:	1b9b      	subs	r3, r3, r6
 800d83a:	50a3      	str	r3, [r4, r2]
 800d83c:	e7b3      	b.n	800d7a6 <_malloc_r+0x22>
 800d83e:	6862      	ldr	r2, [r4, #4]
 800d840:	42a3      	cmp	r3, r4
 800d842:	bf0c      	ite	eq
 800d844:	6032      	streq	r2, [r6, #0]
 800d846:	605a      	strne	r2, [r3, #4]
 800d848:	e7ec      	b.n	800d824 <_malloc_r+0xa0>
 800d84a:	4623      	mov	r3, r4
 800d84c:	6864      	ldr	r4, [r4, #4]
 800d84e:	e7b2      	b.n	800d7b6 <_malloc_r+0x32>
 800d850:	4634      	mov	r4, r6
 800d852:	6876      	ldr	r6, [r6, #4]
 800d854:	e7b9      	b.n	800d7ca <_malloc_r+0x46>
 800d856:	230c      	movs	r3, #12
 800d858:	603b      	str	r3, [r7, #0]
 800d85a:	4638      	mov	r0, r7
 800d85c:	f000 f9d4 	bl	800dc08 <__malloc_unlock>
 800d860:	e7a1      	b.n	800d7a6 <_malloc_r+0x22>
 800d862:	6025      	str	r5, [r4, #0]
 800d864:	e7de      	b.n	800d824 <_malloc_r+0xa0>
 800d866:	bf00      	nop
 800d868:	20000864 	.word	0x20000864

0800d86c <__ssputs_r>:
 800d86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d870:	688e      	ldr	r6, [r1, #8]
 800d872:	429e      	cmp	r6, r3
 800d874:	4682      	mov	sl, r0
 800d876:	460c      	mov	r4, r1
 800d878:	4690      	mov	r8, r2
 800d87a:	461f      	mov	r7, r3
 800d87c:	d838      	bhi.n	800d8f0 <__ssputs_r+0x84>
 800d87e:	898a      	ldrh	r2, [r1, #12]
 800d880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d884:	d032      	beq.n	800d8ec <__ssputs_r+0x80>
 800d886:	6825      	ldr	r5, [r4, #0]
 800d888:	6909      	ldr	r1, [r1, #16]
 800d88a:	eba5 0901 	sub.w	r9, r5, r1
 800d88e:	6965      	ldr	r5, [r4, #20]
 800d890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d898:	3301      	adds	r3, #1
 800d89a:	444b      	add	r3, r9
 800d89c:	106d      	asrs	r5, r5, #1
 800d89e:	429d      	cmp	r5, r3
 800d8a0:	bf38      	it	cc
 800d8a2:	461d      	movcc	r5, r3
 800d8a4:	0553      	lsls	r3, r2, #21
 800d8a6:	d531      	bpl.n	800d90c <__ssputs_r+0xa0>
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7ff ff6b 	bl	800d784 <_malloc_r>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	b950      	cbnz	r0, 800d8c8 <__ssputs_r+0x5c>
 800d8b2:	230c      	movs	r3, #12
 800d8b4:	f8ca 3000 	str.w	r3, [sl]
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c8:	6921      	ldr	r1, [r4, #16]
 800d8ca:	464a      	mov	r2, r9
 800d8cc:	f7ff fb46 	bl	800cf5c <memcpy>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	6126      	str	r6, [r4, #16]
 800d8de:	6165      	str	r5, [r4, #20]
 800d8e0:	444e      	add	r6, r9
 800d8e2:	eba5 0509 	sub.w	r5, r5, r9
 800d8e6:	6026      	str	r6, [r4, #0]
 800d8e8:	60a5      	str	r5, [r4, #8]
 800d8ea:	463e      	mov	r6, r7
 800d8ec:	42be      	cmp	r6, r7
 800d8ee:	d900      	bls.n	800d8f2 <__ssputs_r+0x86>
 800d8f0:	463e      	mov	r6, r7
 800d8f2:	6820      	ldr	r0, [r4, #0]
 800d8f4:	4632      	mov	r2, r6
 800d8f6:	4641      	mov	r1, r8
 800d8f8:	f000 f966 	bl	800dbc8 <memmove>
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	1b9b      	subs	r3, r3, r6
 800d900:	60a3      	str	r3, [r4, #8]
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	4433      	add	r3, r6
 800d906:	6023      	str	r3, [r4, #0]
 800d908:	2000      	movs	r0, #0
 800d90a:	e7db      	b.n	800d8c4 <__ssputs_r+0x58>
 800d90c:	462a      	mov	r2, r5
 800d90e:	f000 f981 	bl	800dc14 <_realloc_r>
 800d912:	4606      	mov	r6, r0
 800d914:	2800      	cmp	r0, #0
 800d916:	d1e1      	bne.n	800d8dc <__ssputs_r+0x70>
 800d918:	6921      	ldr	r1, [r4, #16]
 800d91a:	4650      	mov	r0, sl
 800d91c:	f7ff fec6 	bl	800d6ac <_free_r>
 800d920:	e7c7      	b.n	800d8b2 <__ssputs_r+0x46>
	...

0800d924 <_svfiprintf_r>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	4698      	mov	r8, r3
 800d92a:	898b      	ldrh	r3, [r1, #12]
 800d92c:	061b      	lsls	r3, r3, #24
 800d92e:	b09d      	sub	sp, #116	; 0x74
 800d930:	4607      	mov	r7, r0
 800d932:	460d      	mov	r5, r1
 800d934:	4614      	mov	r4, r2
 800d936:	d50e      	bpl.n	800d956 <_svfiprintf_r+0x32>
 800d938:	690b      	ldr	r3, [r1, #16]
 800d93a:	b963      	cbnz	r3, 800d956 <_svfiprintf_r+0x32>
 800d93c:	2140      	movs	r1, #64	; 0x40
 800d93e:	f7ff ff21 	bl	800d784 <_malloc_r>
 800d942:	6028      	str	r0, [r5, #0]
 800d944:	6128      	str	r0, [r5, #16]
 800d946:	b920      	cbnz	r0, 800d952 <_svfiprintf_r+0x2e>
 800d948:	230c      	movs	r3, #12
 800d94a:	603b      	str	r3, [r7, #0]
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	e0d1      	b.n	800daf6 <_svfiprintf_r+0x1d2>
 800d952:	2340      	movs	r3, #64	; 0x40
 800d954:	616b      	str	r3, [r5, #20]
 800d956:	2300      	movs	r3, #0
 800d958:	9309      	str	r3, [sp, #36]	; 0x24
 800d95a:	2320      	movs	r3, #32
 800d95c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d960:	f8cd 800c 	str.w	r8, [sp, #12]
 800d964:	2330      	movs	r3, #48	; 0x30
 800d966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db10 <_svfiprintf_r+0x1ec>
 800d96a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d96e:	f04f 0901 	mov.w	r9, #1
 800d972:	4623      	mov	r3, r4
 800d974:	469a      	mov	sl, r3
 800d976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97a:	b10a      	cbz	r2, 800d980 <_svfiprintf_r+0x5c>
 800d97c:	2a25      	cmp	r2, #37	; 0x25
 800d97e:	d1f9      	bne.n	800d974 <_svfiprintf_r+0x50>
 800d980:	ebba 0b04 	subs.w	fp, sl, r4
 800d984:	d00b      	beq.n	800d99e <_svfiprintf_r+0x7a>
 800d986:	465b      	mov	r3, fp
 800d988:	4622      	mov	r2, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ff6d 	bl	800d86c <__ssputs_r>
 800d992:	3001      	adds	r0, #1
 800d994:	f000 80aa 	beq.w	800daec <_svfiprintf_r+0x1c8>
 800d998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d99a:	445a      	add	r2, fp
 800d99c:	9209      	str	r2, [sp, #36]	; 0x24
 800d99e:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 80a2 	beq.w	800daec <_svfiprintf_r+0x1c8>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9b2:	f10a 0a01 	add.w	sl, sl, #1
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	9307      	str	r3, [sp, #28]
 800d9ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9be:	931a      	str	r3, [sp, #104]	; 0x68
 800d9c0:	4654      	mov	r4, sl
 800d9c2:	2205      	movs	r2, #5
 800d9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c8:	4851      	ldr	r0, [pc, #324]	; (800db10 <_svfiprintf_r+0x1ec>)
 800d9ca:	f7f2 fc11 	bl	80001f0 <memchr>
 800d9ce:	9a04      	ldr	r2, [sp, #16]
 800d9d0:	b9d8      	cbnz	r0, 800da0a <_svfiprintf_r+0xe6>
 800d9d2:	06d0      	lsls	r0, r2, #27
 800d9d4:	bf44      	itt	mi
 800d9d6:	2320      	movmi	r3, #32
 800d9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9dc:	0711      	lsls	r1, r2, #28
 800d9de:	bf44      	itt	mi
 800d9e0:	232b      	movmi	r3, #43	; 0x2b
 800d9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ec:	d015      	beq.n	800da1a <_svfiprintf_r+0xf6>
 800d9ee:	9a07      	ldr	r2, [sp, #28]
 800d9f0:	4654      	mov	r4, sl
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f04f 0c0a 	mov.w	ip, #10
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9fe:	3b30      	subs	r3, #48	; 0x30
 800da00:	2b09      	cmp	r3, #9
 800da02:	d94e      	bls.n	800daa2 <_svfiprintf_r+0x17e>
 800da04:	b1b0      	cbz	r0, 800da34 <_svfiprintf_r+0x110>
 800da06:	9207      	str	r2, [sp, #28]
 800da08:	e014      	b.n	800da34 <_svfiprintf_r+0x110>
 800da0a:	eba0 0308 	sub.w	r3, r0, r8
 800da0e:	fa09 f303 	lsl.w	r3, r9, r3
 800da12:	4313      	orrs	r3, r2
 800da14:	9304      	str	r3, [sp, #16]
 800da16:	46a2      	mov	sl, r4
 800da18:	e7d2      	b.n	800d9c0 <_svfiprintf_r+0x9c>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	1d19      	adds	r1, r3, #4
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	9103      	str	r1, [sp, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfbb      	ittet	lt
 800da26:	425b      	neglt	r3, r3
 800da28:	f042 0202 	orrlt.w	r2, r2, #2
 800da2c:	9307      	strge	r3, [sp, #28]
 800da2e:	9307      	strlt	r3, [sp, #28]
 800da30:	bfb8      	it	lt
 800da32:	9204      	strlt	r2, [sp, #16]
 800da34:	7823      	ldrb	r3, [r4, #0]
 800da36:	2b2e      	cmp	r3, #46	; 0x2e
 800da38:	d10c      	bne.n	800da54 <_svfiprintf_r+0x130>
 800da3a:	7863      	ldrb	r3, [r4, #1]
 800da3c:	2b2a      	cmp	r3, #42	; 0x2a
 800da3e:	d135      	bne.n	800daac <_svfiprintf_r+0x188>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	9203      	str	r2, [sp, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	bfb8      	it	lt
 800da4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800da50:	3402      	adds	r4, #2
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db20 <_svfiprintf_r+0x1fc>
 800da58:	7821      	ldrb	r1, [r4, #0]
 800da5a:	2203      	movs	r2, #3
 800da5c:	4650      	mov	r0, sl
 800da5e:	f7f2 fbc7 	bl	80001f0 <memchr>
 800da62:	b140      	cbz	r0, 800da76 <_svfiprintf_r+0x152>
 800da64:	2340      	movs	r3, #64	; 0x40
 800da66:	eba0 000a 	sub.w	r0, r0, sl
 800da6a:	fa03 f000 	lsl.w	r0, r3, r0
 800da6e:	9b04      	ldr	r3, [sp, #16]
 800da70:	4303      	orrs	r3, r0
 800da72:	3401      	adds	r4, #1
 800da74:	9304      	str	r3, [sp, #16]
 800da76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7a:	4826      	ldr	r0, [pc, #152]	; (800db14 <_svfiprintf_r+0x1f0>)
 800da7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da80:	2206      	movs	r2, #6
 800da82:	f7f2 fbb5 	bl	80001f0 <memchr>
 800da86:	2800      	cmp	r0, #0
 800da88:	d038      	beq.n	800dafc <_svfiprintf_r+0x1d8>
 800da8a:	4b23      	ldr	r3, [pc, #140]	; (800db18 <_svfiprintf_r+0x1f4>)
 800da8c:	bb1b      	cbnz	r3, 800dad6 <_svfiprintf_r+0x1b2>
 800da8e:	9b03      	ldr	r3, [sp, #12]
 800da90:	3307      	adds	r3, #7
 800da92:	f023 0307 	bic.w	r3, r3, #7
 800da96:	3308      	adds	r3, #8
 800da98:	9303      	str	r3, [sp, #12]
 800da9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9c:	4433      	add	r3, r6
 800da9e:	9309      	str	r3, [sp, #36]	; 0x24
 800daa0:	e767      	b.n	800d972 <_svfiprintf_r+0x4e>
 800daa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800daa6:	460c      	mov	r4, r1
 800daa8:	2001      	movs	r0, #1
 800daaa:	e7a5      	b.n	800d9f8 <_svfiprintf_r+0xd4>
 800daac:	2300      	movs	r3, #0
 800daae:	3401      	adds	r4, #1
 800dab0:	9305      	str	r3, [sp, #20]
 800dab2:	4619      	mov	r1, r3
 800dab4:	f04f 0c0a 	mov.w	ip, #10
 800dab8:	4620      	mov	r0, r4
 800daba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dabe:	3a30      	subs	r2, #48	; 0x30
 800dac0:	2a09      	cmp	r2, #9
 800dac2:	d903      	bls.n	800dacc <_svfiprintf_r+0x1a8>
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0c5      	beq.n	800da54 <_svfiprintf_r+0x130>
 800dac8:	9105      	str	r1, [sp, #20]
 800daca:	e7c3      	b.n	800da54 <_svfiprintf_r+0x130>
 800dacc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dad0:	4604      	mov	r4, r0
 800dad2:	2301      	movs	r3, #1
 800dad4:	e7f0      	b.n	800dab8 <_svfiprintf_r+0x194>
 800dad6:	ab03      	add	r3, sp, #12
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	462a      	mov	r2, r5
 800dadc:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <_svfiprintf_r+0x1f8>)
 800dade:	a904      	add	r1, sp, #16
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7fd ffb9 	bl	800ba58 <_printf_float>
 800dae6:	1c42      	adds	r2, r0, #1
 800dae8:	4606      	mov	r6, r0
 800daea:	d1d6      	bne.n	800da9a <_svfiprintf_r+0x176>
 800daec:	89ab      	ldrh	r3, [r5, #12]
 800daee:	065b      	lsls	r3, r3, #25
 800daf0:	f53f af2c 	bmi.w	800d94c <_svfiprintf_r+0x28>
 800daf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daf6:	b01d      	add	sp, #116	; 0x74
 800daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafc:	ab03      	add	r3, sp, #12
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	462a      	mov	r2, r5
 800db02:	4b06      	ldr	r3, [pc, #24]	; (800db1c <_svfiprintf_r+0x1f8>)
 800db04:	a904      	add	r1, sp, #16
 800db06:	4638      	mov	r0, r7
 800db08:	f7fe fa4a 	bl	800bfa0 <_printf_i>
 800db0c:	e7eb      	b.n	800dae6 <_svfiprintf_r+0x1c2>
 800db0e:	bf00      	nop
 800db10:	0801a20c 	.word	0x0801a20c
 800db14:	0801a216 	.word	0x0801a216
 800db18:	0800ba59 	.word	0x0800ba59
 800db1c:	0800d86d 	.word	0x0800d86d
 800db20:	0801a212 	.word	0x0801a212

0800db24 <_sbrk_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d06      	ldr	r5, [pc, #24]	; (800db40 <_sbrk_r+0x1c>)
 800db28:	2300      	movs	r3, #0
 800db2a:	4604      	mov	r4, r0
 800db2c:	4608      	mov	r0, r1
 800db2e:	602b      	str	r3, [r5, #0]
 800db30:	f7f6 fc54 	bl	80043dc <_sbrk>
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	d102      	bne.n	800db3e <_sbrk_r+0x1a>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	b103      	cbz	r3, 800db3e <_sbrk_r+0x1a>
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	bd38      	pop	{r3, r4, r5, pc}
 800db40:	2000086c 	.word	0x2000086c

0800db44 <__assert_func>:
 800db44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db46:	4614      	mov	r4, r2
 800db48:	461a      	mov	r2, r3
 800db4a:	4b09      	ldr	r3, [pc, #36]	; (800db70 <__assert_func+0x2c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4605      	mov	r5, r0
 800db50:	68d8      	ldr	r0, [r3, #12]
 800db52:	b14c      	cbz	r4, 800db68 <__assert_func+0x24>
 800db54:	4b07      	ldr	r3, [pc, #28]	; (800db74 <__assert_func+0x30>)
 800db56:	9100      	str	r1, [sp, #0]
 800db58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db5c:	4906      	ldr	r1, [pc, #24]	; (800db78 <__assert_func+0x34>)
 800db5e:	462b      	mov	r3, r5
 800db60:	f000 f80e 	bl	800db80 <fiprintf>
 800db64:	f000 faac 	bl	800e0c0 <abort>
 800db68:	4b04      	ldr	r3, [pc, #16]	; (800db7c <__assert_func+0x38>)
 800db6a:	461c      	mov	r4, r3
 800db6c:	e7f3      	b.n	800db56 <__assert_func+0x12>
 800db6e:	bf00      	nop
 800db70:	20000254 	.word	0x20000254
 800db74:	0801a21d 	.word	0x0801a21d
 800db78:	0801a22a 	.word	0x0801a22a
 800db7c:	0801a258 	.word	0x0801a258

0800db80 <fiprintf>:
 800db80:	b40e      	push	{r1, r2, r3}
 800db82:	b503      	push	{r0, r1, lr}
 800db84:	4601      	mov	r1, r0
 800db86:	ab03      	add	r3, sp, #12
 800db88:	4805      	ldr	r0, [pc, #20]	; (800dba0 <fiprintf+0x20>)
 800db8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db8e:	6800      	ldr	r0, [r0, #0]
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	f000 f897 	bl	800dcc4 <_vfiprintf_r>
 800db96:	b002      	add	sp, #8
 800db98:	f85d eb04 	ldr.w	lr, [sp], #4
 800db9c:	b003      	add	sp, #12
 800db9e:	4770      	bx	lr
 800dba0:	20000254 	.word	0x20000254

0800dba4 <__ascii_mbtowc>:
 800dba4:	b082      	sub	sp, #8
 800dba6:	b901      	cbnz	r1, 800dbaa <__ascii_mbtowc+0x6>
 800dba8:	a901      	add	r1, sp, #4
 800dbaa:	b142      	cbz	r2, 800dbbe <__ascii_mbtowc+0x1a>
 800dbac:	b14b      	cbz	r3, 800dbc2 <__ascii_mbtowc+0x1e>
 800dbae:	7813      	ldrb	r3, [r2, #0]
 800dbb0:	600b      	str	r3, [r1, #0]
 800dbb2:	7812      	ldrb	r2, [r2, #0]
 800dbb4:	1e10      	subs	r0, r2, #0
 800dbb6:	bf18      	it	ne
 800dbb8:	2001      	movne	r0, #1
 800dbba:	b002      	add	sp, #8
 800dbbc:	4770      	bx	lr
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	e7fb      	b.n	800dbba <__ascii_mbtowc+0x16>
 800dbc2:	f06f 0001 	mvn.w	r0, #1
 800dbc6:	e7f8      	b.n	800dbba <__ascii_mbtowc+0x16>

0800dbc8 <memmove>:
 800dbc8:	4288      	cmp	r0, r1
 800dbca:	b510      	push	{r4, lr}
 800dbcc:	eb01 0402 	add.w	r4, r1, r2
 800dbd0:	d902      	bls.n	800dbd8 <memmove+0x10>
 800dbd2:	4284      	cmp	r4, r0
 800dbd4:	4623      	mov	r3, r4
 800dbd6:	d807      	bhi.n	800dbe8 <memmove+0x20>
 800dbd8:	1e43      	subs	r3, r0, #1
 800dbda:	42a1      	cmp	r1, r4
 800dbdc:	d008      	beq.n	800dbf0 <memmove+0x28>
 800dbde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbe6:	e7f8      	b.n	800dbda <memmove+0x12>
 800dbe8:	4402      	add	r2, r0
 800dbea:	4601      	mov	r1, r0
 800dbec:	428a      	cmp	r2, r1
 800dbee:	d100      	bne.n	800dbf2 <memmove+0x2a>
 800dbf0:	bd10      	pop	{r4, pc}
 800dbf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbfa:	e7f7      	b.n	800dbec <memmove+0x24>

0800dbfc <__malloc_lock>:
 800dbfc:	4801      	ldr	r0, [pc, #4]	; (800dc04 <__malloc_lock+0x8>)
 800dbfe:	f000 bc1f 	b.w	800e440 <__retarget_lock_acquire_recursive>
 800dc02:	bf00      	nop
 800dc04:	20000870 	.word	0x20000870

0800dc08 <__malloc_unlock>:
 800dc08:	4801      	ldr	r0, [pc, #4]	; (800dc10 <__malloc_unlock+0x8>)
 800dc0a:	f000 bc1a 	b.w	800e442 <__retarget_lock_release_recursive>
 800dc0e:	bf00      	nop
 800dc10:	20000870 	.word	0x20000870

0800dc14 <_realloc_r>:
 800dc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc18:	4680      	mov	r8, r0
 800dc1a:	4614      	mov	r4, r2
 800dc1c:	460e      	mov	r6, r1
 800dc1e:	b921      	cbnz	r1, 800dc2a <_realloc_r+0x16>
 800dc20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	4611      	mov	r1, r2
 800dc26:	f7ff bdad 	b.w	800d784 <_malloc_r>
 800dc2a:	b92a      	cbnz	r2, 800dc38 <_realloc_r+0x24>
 800dc2c:	f7ff fd3e 	bl	800d6ac <_free_r>
 800dc30:	4625      	mov	r5, r4
 800dc32:	4628      	mov	r0, r5
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	f000 fc6a 	bl	800e510 <_malloc_usable_size_r>
 800dc3c:	4284      	cmp	r4, r0
 800dc3e:	4607      	mov	r7, r0
 800dc40:	d802      	bhi.n	800dc48 <_realloc_r+0x34>
 800dc42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc46:	d812      	bhi.n	800dc6e <_realloc_r+0x5a>
 800dc48:	4621      	mov	r1, r4
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	f7ff fd9a 	bl	800d784 <_malloc_r>
 800dc50:	4605      	mov	r5, r0
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d0ed      	beq.n	800dc32 <_realloc_r+0x1e>
 800dc56:	42bc      	cmp	r4, r7
 800dc58:	4622      	mov	r2, r4
 800dc5a:	4631      	mov	r1, r6
 800dc5c:	bf28      	it	cs
 800dc5e:	463a      	movcs	r2, r7
 800dc60:	f7ff f97c 	bl	800cf5c <memcpy>
 800dc64:	4631      	mov	r1, r6
 800dc66:	4640      	mov	r0, r8
 800dc68:	f7ff fd20 	bl	800d6ac <_free_r>
 800dc6c:	e7e1      	b.n	800dc32 <_realloc_r+0x1e>
 800dc6e:	4635      	mov	r5, r6
 800dc70:	e7df      	b.n	800dc32 <_realloc_r+0x1e>

0800dc72 <__sfputc_r>:
 800dc72:	6893      	ldr	r3, [r2, #8]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	b410      	push	{r4}
 800dc7a:	6093      	str	r3, [r2, #8]
 800dc7c:	da08      	bge.n	800dc90 <__sfputc_r+0x1e>
 800dc7e:	6994      	ldr	r4, [r2, #24]
 800dc80:	42a3      	cmp	r3, r4
 800dc82:	db01      	blt.n	800dc88 <__sfputc_r+0x16>
 800dc84:	290a      	cmp	r1, #10
 800dc86:	d103      	bne.n	800dc90 <__sfputc_r+0x1e>
 800dc88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc8c:	f000 b94a 	b.w	800df24 <__swbuf_r>
 800dc90:	6813      	ldr	r3, [r2, #0]
 800dc92:	1c58      	adds	r0, r3, #1
 800dc94:	6010      	str	r0, [r2, #0]
 800dc96:	7019      	strb	r1, [r3, #0]
 800dc98:	4608      	mov	r0, r1
 800dc9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <__sfputs_r>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	4614      	mov	r4, r2
 800dca8:	18d5      	adds	r5, r2, r3
 800dcaa:	42ac      	cmp	r4, r5
 800dcac:	d101      	bne.n	800dcb2 <__sfputs_r+0x12>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e007      	b.n	800dcc2 <__sfputs_r+0x22>
 800dcb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7ff ffda 	bl	800dc72 <__sfputc_r>
 800dcbe:	1c43      	adds	r3, r0, #1
 800dcc0:	d1f3      	bne.n	800dcaa <__sfputs_r+0xa>
 800dcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcc4 <_vfiprintf_r>:
 800dcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc8:	460d      	mov	r5, r1
 800dcca:	b09d      	sub	sp, #116	; 0x74
 800dccc:	4614      	mov	r4, r2
 800dcce:	4698      	mov	r8, r3
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	b118      	cbz	r0, 800dcdc <_vfiprintf_r+0x18>
 800dcd4:	6983      	ldr	r3, [r0, #24]
 800dcd6:	b90b      	cbnz	r3, 800dcdc <_vfiprintf_r+0x18>
 800dcd8:	f000 fb14 	bl	800e304 <__sinit>
 800dcdc:	4b89      	ldr	r3, [pc, #548]	; (800df04 <_vfiprintf_r+0x240>)
 800dcde:	429d      	cmp	r5, r3
 800dce0:	d11b      	bne.n	800dd1a <_vfiprintf_r+0x56>
 800dce2:	6875      	ldr	r5, [r6, #4]
 800dce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dce6:	07d9      	lsls	r1, r3, #31
 800dce8:	d405      	bmi.n	800dcf6 <_vfiprintf_r+0x32>
 800dcea:	89ab      	ldrh	r3, [r5, #12]
 800dcec:	059a      	lsls	r2, r3, #22
 800dcee:	d402      	bmi.n	800dcf6 <_vfiprintf_r+0x32>
 800dcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf2:	f000 fba5 	bl	800e440 <__retarget_lock_acquire_recursive>
 800dcf6:	89ab      	ldrh	r3, [r5, #12]
 800dcf8:	071b      	lsls	r3, r3, #28
 800dcfa:	d501      	bpl.n	800dd00 <_vfiprintf_r+0x3c>
 800dcfc:	692b      	ldr	r3, [r5, #16]
 800dcfe:	b9eb      	cbnz	r3, 800dd3c <_vfiprintf_r+0x78>
 800dd00:	4629      	mov	r1, r5
 800dd02:	4630      	mov	r0, r6
 800dd04:	f000 f96e 	bl	800dfe4 <__swsetup_r>
 800dd08:	b1c0      	cbz	r0, 800dd3c <_vfiprintf_r+0x78>
 800dd0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd0c:	07dc      	lsls	r4, r3, #31
 800dd0e:	d50e      	bpl.n	800dd2e <_vfiprintf_r+0x6a>
 800dd10:	f04f 30ff 	mov.w	r0, #4294967295
 800dd14:	b01d      	add	sp, #116	; 0x74
 800dd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd1a:	4b7b      	ldr	r3, [pc, #492]	; (800df08 <_vfiprintf_r+0x244>)
 800dd1c:	429d      	cmp	r5, r3
 800dd1e:	d101      	bne.n	800dd24 <_vfiprintf_r+0x60>
 800dd20:	68b5      	ldr	r5, [r6, #8]
 800dd22:	e7df      	b.n	800dce4 <_vfiprintf_r+0x20>
 800dd24:	4b79      	ldr	r3, [pc, #484]	; (800df0c <_vfiprintf_r+0x248>)
 800dd26:	429d      	cmp	r5, r3
 800dd28:	bf08      	it	eq
 800dd2a:	68f5      	ldreq	r5, [r6, #12]
 800dd2c:	e7da      	b.n	800dce4 <_vfiprintf_r+0x20>
 800dd2e:	89ab      	ldrh	r3, [r5, #12]
 800dd30:	0598      	lsls	r0, r3, #22
 800dd32:	d4ed      	bmi.n	800dd10 <_vfiprintf_r+0x4c>
 800dd34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd36:	f000 fb84 	bl	800e442 <__retarget_lock_release_recursive>
 800dd3a:	e7e9      	b.n	800dd10 <_vfiprintf_r+0x4c>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd40:	2320      	movs	r3, #32
 800dd42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd46:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd4a:	2330      	movs	r3, #48	; 0x30
 800dd4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df10 <_vfiprintf_r+0x24c>
 800dd50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd54:	f04f 0901 	mov.w	r9, #1
 800dd58:	4623      	mov	r3, r4
 800dd5a:	469a      	mov	sl, r3
 800dd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd60:	b10a      	cbz	r2, 800dd66 <_vfiprintf_r+0xa2>
 800dd62:	2a25      	cmp	r2, #37	; 0x25
 800dd64:	d1f9      	bne.n	800dd5a <_vfiprintf_r+0x96>
 800dd66:	ebba 0b04 	subs.w	fp, sl, r4
 800dd6a:	d00b      	beq.n	800dd84 <_vfiprintf_r+0xc0>
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	4622      	mov	r2, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	4630      	mov	r0, r6
 800dd74:	f7ff ff94 	bl	800dca0 <__sfputs_r>
 800dd78:	3001      	adds	r0, #1
 800dd7a:	f000 80aa 	beq.w	800ded2 <_vfiprintf_r+0x20e>
 800dd7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd80:	445a      	add	r2, fp
 800dd82:	9209      	str	r2, [sp, #36]	; 0x24
 800dd84:	f89a 3000 	ldrb.w	r3, [sl]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 80a2 	beq.w	800ded2 <_vfiprintf_r+0x20e>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f04f 32ff 	mov.w	r2, #4294967295
 800dd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd98:	f10a 0a01 	add.w	sl, sl, #1
 800dd9c:	9304      	str	r3, [sp, #16]
 800dd9e:	9307      	str	r3, [sp, #28]
 800dda0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dda4:	931a      	str	r3, [sp, #104]	; 0x68
 800dda6:	4654      	mov	r4, sl
 800dda8:	2205      	movs	r2, #5
 800ddaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddae:	4858      	ldr	r0, [pc, #352]	; (800df10 <_vfiprintf_r+0x24c>)
 800ddb0:	f7f2 fa1e 	bl	80001f0 <memchr>
 800ddb4:	9a04      	ldr	r2, [sp, #16]
 800ddb6:	b9d8      	cbnz	r0, 800ddf0 <_vfiprintf_r+0x12c>
 800ddb8:	06d1      	lsls	r1, r2, #27
 800ddba:	bf44      	itt	mi
 800ddbc:	2320      	movmi	r3, #32
 800ddbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddc2:	0713      	lsls	r3, r2, #28
 800ddc4:	bf44      	itt	mi
 800ddc6:	232b      	movmi	r3, #43	; 0x2b
 800ddc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddcc:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd2:	d015      	beq.n	800de00 <_vfiprintf_r+0x13c>
 800ddd4:	9a07      	ldr	r2, [sp, #28]
 800ddd6:	4654      	mov	r4, sl
 800ddd8:	2000      	movs	r0, #0
 800ddda:	f04f 0c0a 	mov.w	ip, #10
 800ddde:	4621      	mov	r1, r4
 800dde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dde4:	3b30      	subs	r3, #48	; 0x30
 800dde6:	2b09      	cmp	r3, #9
 800dde8:	d94e      	bls.n	800de88 <_vfiprintf_r+0x1c4>
 800ddea:	b1b0      	cbz	r0, 800de1a <_vfiprintf_r+0x156>
 800ddec:	9207      	str	r2, [sp, #28]
 800ddee:	e014      	b.n	800de1a <_vfiprintf_r+0x156>
 800ddf0:	eba0 0308 	sub.w	r3, r0, r8
 800ddf4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	9304      	str	r3, [sp, #16]
 800ddfc:	46a2      	mov	sl, r4
 800ddfe:	e7d2      	b.n	800dda6 <_vfiprintf_r+0xe2>
 800de00:	9b03      	ldr	r3, [sp, #12]
 800de02:	1d19      	adds	r1, r3, #4
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	9103      	str	r1, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	bfbb      	ittet	lt
 800de0c:	425b      	neglt	r3, r3
 800de0e:	f042 0202 	orrlt.w	r2, r2, #2
 800de12:	9307      	strge	r3, [sp, #28]
 800de14:	9307      	strlt	r3, [sp, #28]
 800de16:	bfb8      	it	lt
 800de18:	9204      	strlt	r2, [sp, #16]
 800de1a:	7823      	ldrb	r3, [r4, #0]
 800de1c:	2b2e      	cmp	r3, #46	; 0x2e
 800de1e:	d10c      	bne.n	800de3a <_vfiprintf_r+0x176>
 800de20:	7863      	ldrb	r3, [r4, #1]
 800de22:	2b2a      	cmp	r3, #42	; 0x2a
 800de24:	d135      	bne.n	800de92 <_vfiprintf_r+0x1ce>
 800de26:	9b03      	ldr	r3, [sp, #12]
 800de28:	1d1a      	adds	r2, r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	9203      	str	r2, [sp, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfb8      	it	lt
 800de32:	f04f 33ff 	movlt.w	r3, #4294967295
 800de36:	3402      	adds	r4, #2
 800de38:	9305      	str	r3, [sp, #20]
 800de3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df20 <_vfiprintf_r+0x25c>
 800de3e:	7821      	ldrb	r1, [r4, #0]
 800de40:	2203      	movs	r2, #3
 800de42:	4650      	mov	r0, sl
 800de44:	f7f2 f9d4 	bl	80001f0 <memchr>
 800de48:	b140      	cbz	r0, 800de5c <_vfiprintf_r+0x198>
 800de4a:	2340      	movs	r3, #64	; 0x40
 800de4c:	eba0 000a 	sub.w	r0, r0, sl
 800de50:	fa03 f000 	lsl.w	r0, r3, r0
 800de54:	9b04      	ldr	r3, [sp, #16]
 800de56:	4303      	orrs	r3, r0
 800de58:	3401      	adds	r4, #1
 800de5a:	9304      	str	r3, [sp, #16]
 800de5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de60:	482c      	ldr	r0, [pc, #176]	; (800df14 <_vfiprintf_r+0x250>)
 800de62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de66:	2206      	movs	r2, #6
 800de68:	f7f2 f9c2 	bl	80001f0 <memchr>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d03f      	beq.n	800def0 <_vfiprintf_r+0x22c>
 800de70:	4b29      	ldr	r3, [pc, #164]	; (800df18 <_vfiprintf_r+0x254>)
 800de72:	bb1b      	cbnz	r3, 800debc <_vfiprintf_r+0x1f8>
 800de74:	9b03      	ldr	r3, [sp, #12]
 800de76:	3307      	adds	r3, #7
 800de78:	f023 0307 	bic.w	r3, r3, #7
 800de7c:	3308      	adds	r3, #8
 800de7e:	9303      	str	r3, [sp, #12]
 800de80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de82:	443b      	add	r3, r7
 800de84:	9309      	str	r3, [sp, #36]	; 0x24
 800de86:	e767      	b.n	800dd58 <_vfiprintf_r+0x94>
 800de88:	fb0c 3202 	mla	r2, ip, r2, r3
 800de8c:	460c      	mov	r4, r1
 800de8e:	2001      	movs	r0, #1
 800de90:	e7a5      	b.n	800ddde <_vfiprintf_r+0x11a>
 800de92:	2300      	movs	r3, #0
 800de94:	3401      	adds	r4, #1
 800de96:	9305      	str	r3, [sp, #20]
 800de98:	4619      	mov	r1, r3
 800de9a:	f04f 0c0a 	mov.w	ip, #10
 800de9e:	4620      	mov	r0, r4
 800dea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dea4:	3a30      	subs	r2, #48	; 0x30
 800dea6:	2a09      	cmp	r2, #9
 800dea8:	d903      	bls.n	800deb2 <_vfiprintf_r+0x1ee>
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d0c5      	beq.n	800de3a <_vfiprintf_r+0x176>
 800deae:	9105      	str	r1, [sp, #20]
 800deb0:	e7c3      	b.n	800de3a <_vfiprintf_r+0x176>
 800deb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800deb6:	4604      	mov	r4, r0
 800deb8:	2301      	movs	r3, #1
 800deba:	e7f0      	b.n	800de9e <_vfiprintf_r+0x1da>
 800debc:	ab03      	add	r3, sp, #12
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	462a      	mov	r2, r5
 800dec2:	4b16      	ldr	r3, [pc, #88]	; (800df1c <_vfiprintf_r+0x258>)
 800dec4:	a904      	add	r1, sp, #16
 800dec6:	4630      	mov	r0, r6
 800dec8:	f7fd fdc6 	bl	800ba58 <_printf_float>
 800decc:	4607      	mov	r7, r0
 800dece:	1c78      	adds	r0, r7, #1
 800ded0:	d1d6      	bne.n	800de80 <_vfiprintf_r+0x1bc>
 800ded2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ded4:	07d9      	lsls	r1, r3, #31
 800ded6:	d405      	bmi.n	800dee4 <_vfiprintf_r+0x220>
 800ded8:	89ab      	ldrh	r3, [r5, #12]
 800deda:	059a      	lsls	r2, r3, #22
 800dedc:	d402      	bmi.n	800dee4 <_vfiprintf_r+0x220>
 800dede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dee0:	f000 faaf 	bl	800e442 <__retarget_lock_release_recursive>
 800dee4:	89ab      	ldrh	r3, [r5, #12]
 800dee6:	065b      	lsls	r3, r3, #25
 800dee8:	f53f af12 	bmi.w	800dd10 <_vfiprintf_r+0x4c>
 800deec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deee:	e711      	b.n	800dd14 <_vfiprintf_r+0x50>
 800def0:	ab03      	add	r3, sp, #12
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	462a      	mov	r2, r5
 800def6:	4b09      	ldr	r3, [pc, #36]	; (800df1c <_vfiprintf_r+0x258>)
 800def8:	a904      	add	r1, sp, #16
 800defa:	4630      	mov	r0, r6
 800defc:	f7fe f850 	bl	800bfa0 <_printf_i>
 800df00:	e7e4      	b.n	800decc <_vfiprintf_r+0x208>
 800df02:	bf00      	nop
 800df04:	0801a384 	.word	0x0801a384
 800df08:	0801a3a4 	.word	0x0801a3a4
 800df0c:	0801a364 	.word	0x0801a364
 800df10:	0801a20c 	.word	0x0801a20c
 800df14:	0801a216 	.word	0x0801a216
 800df18:	0800ba59 	.word	0x0800ba59
 800df1c:	0800dca1 	.word	0x0800dca1
 800df20:	0801a212 	.word	0x0801a212

0800df24 <__swbuf_r>:
 800df24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df26:	460e      	mov	r6, r1
 800df28:	4614      	mov	r4, r2
 800df2a:	4605      	mov	r5, r0
 800df2c:	b118      	cbz	r0, 800df36 <__swbuf_r+0x12>
 800df2e:	6983      	ldr	r3, [r0, #24]
 800df30:	b90b      	cbnz	r3, 800df36 <__swbuf_r+0x12>
 800df32:	f000 f9e7 	bl	800e304 <__sinit>
 800df36:	4b21      	ldr	r3, [pc, #132]	; (800dfbc <__swbuf_r+0x98>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	d12b      	bne.n	800df94 <__swbuf_r+0x70>
 800df3c:	686c      	ldr	r4, [r5, #4]
 800df3e:	69a3      	ldr	r3, [r4, #24]
 800df40:	60a3      	str	r3, [r4, #8]
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	071a      	lsls	r2, r3, #28
 800df46:	d52f      	bpl.n	800dfa8 <__swbuf_r+0x84>
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	b36b      	cbz	r3, 800dfa8 <__swbuf_r+0x84>
 800df4c:	6923      	ldr	r3, [r4, #16]
 800df4e:	6820      	ldr	r0, [r4, #0]
 800df50:	1ac0      	subs	r0, r0, r3
 800df52:	6963      	ldr	r3, [r4, #20]
 800df54:	b2f6      	uxtb	r6, r6
 800df56:	4283      	cmp	r3, r0
 800df58:	4637      	mov	r7, r6
 800df5a:	dc04      	bgt.n	800df66 <__swbuf_r+0x42>
 800df5c:	4621      	mov	r1, r4
 800df5e:	4628      	mov	r0, r5
 800df60:	f000 f93c 	bl	800e1dc <_fflush_r>
 800df64:	bb30      	cbnz	r0, 800dfb4 <__swbuf_r+0x90>
 800df66:	68a3      	ldr	r3, [r4, #8]
 800df68:	3b01      	subs	r3, #1
 800df6a:	60a3      	str	r3, [r4, #8]
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	1c5a      	adds	r2, r3, #1
 800df70:	6022      	str	r2, [r4, #0]
 800df72:	701e      	strb	r6, [r3, #0]
 800df74:	6963      	ldr	r3, [r4, #20]
 800df76:	3001      	adds	r0, #1
 800df78:	4283      	cmp	r3, r0
 800df7a:	d004      	beq.n	800df86 <__swbuf_r+0x62>
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	07db      	lsls	r3, r3, #31
 800df80:	d506      	bpl.n	800df90 <__swbuf_r+0x6c>
 800df82:	2e0a      	cmp	r6, #10
 800df84:	d104      	bne.n	800df90 <__swbuf_r+0x6c>
 800df86:	4621      	mov	r1, r4
 800df88:	4628      	mov	r0, r5
 800df8a:	f000 f927 	bl	800e1dc <_fflush_r>
 800df8e:	b988      	cbnz	r0, 800dfb4 <__swbuf_r+0x90>
 800df90:	4638      	mov	r0, r7
 800df92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df94:	4b0a      	ldr	r3, [pc, #40]	; (800dfc0 <__swbuf_r+0x9c>)
 800df96:	429c      	cmp	r4, r3
 800df98:	d101      	bne.n	800df9e <__swbuf_r+0x7a>
 800df9a:	68ac      	ldr	r4, [r5, #8]
 800df9c:	e7cf      	b.n	800df3e <__swbuf_r+0x1a>
 800df9e:	4b09      	ldr	r3, [pc, #36]	; (800dfc4 <__swbuf_r+0xa0>)
 800dfa0:	429c      	cmp	r4, r3
 800dfa2:	bf08      	it	eq
 800dfa4:	68ec      	ldreq	r4, [r5, #12]
 800dfa6:	e7ca      	b.n	800df3e <__swbuf_r+0x1a>
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f000 f81a 	bl	800dfe4 <__swsetup_r>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d0cb      	beq.n	800df4c <__swbuf_r+0x28>
 800dfb4:	f04f 37ff 	mov.w	r7, #4294967295
 800dfb8:	e7ea      	b.n	800df90 <__swbuf_r+0x6c>
 800dfba:	bf00      	nop
 800dfbc:	0801a384 	.word	0x0801a384
 800dfc0:	0801a3a4 	.word	0x0801a3a4
 800dfc4:	0801a364 	.word	0x0801a364

0800dfc8 <__ascii_wctomb>:
 800dfc8:	b149      	cbz	r1, 800dfde <__ascii_wctomb+0x16>
 800dfca:	2aff      	cmp	r2, #255	; 0xff
 800dfcc:	bf85      	ittet	hi
 800dfce:	238a      	movhi	r3, #138	; 0x8a
 800dfd0:	6003      	strhi	r3, [r0, #0]
 800dfd2:	700a      	strbls	r2, [r1, #0]
 800dfd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800dfd8:	bf98      	it	ls
 800dfda:	2001      	movls	r0, #1
 800dfdc:	4770      	bx	lr
 800dfde:	4608      	mov	r0, r1
 800dfe0:	4770      	bx	lr
	...

0800dfe4 <__swsetup_r>:
 800dfe4:	4b32      	ldr	r3, [pc, #200]	; (800e0b0 <__swsetup_r+0xcc>)
 800dfe6:	b570      	push	{r4, r5, r6, lr}
 800dfe8:	681d      	ldr	r5, [r3, #0]
 800dfea:	4606      	mov	r6, r0
 800dfec:	460c      	mov	r4, r1
 800dfee:	b125      	cbz	r5, 800dffa <__swsetup_r+0x16>
 800dff0:	69ab      	ldr	r3, [r5, #24]
 800dff2:	b913      	cbnz	r3, 800dffa <__swsetup_r+0x16>
 800dff4:	4628      	mov	r0, r5
 800dff6:	f000 f985 	bl	800e304 <__sinit>
 800dffa:	4b2e      	ldr	r3, [pc, #184]	; (800e0b4 <__swsetup_r+0xd0>)
 800dffc:	429c      	cmp	r4, r3
 800dffe:	d10f      	bne.n	800e020 <__swsetup_r+0x3c>
 800e000:	686c      	ldr	r4, [r5, #4]
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e008:	0719      	lsls	r1, r3, #28
 800e00a:	d42c      	bmi.n	800e066 <__swsetup_r+0x82>
 800e00c:	06dd      	lsls	r5, r3, #27
 800e00e:	d411      	bmi.n	800e034 <__swsetup_r+0x50>
 800e010:	2309      	movs	r3, #9
 800e012:	6033      	str	r3, [r6, #0]
 800e014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e018:	81a3      	strh	r3, [r4, #12]
 800e01a:	f04f 30ff 	mov.w	r0, #4294967295
 800e01e:	e03e      	b.n	800e09e <__swsetup_r+0xba>
 800e020:	4b25      	ldr	r3, [pc, #148]	; (800e0b8 <__swsetup_r+0xd4>)
 800e022:	429c      	cmp	r4, r3
 800e024:	d101      	bne.n	800e02a <__swsetup_r+0x46>
 800e026:	68ac      	ldr	r4, [r5, #8]
 800e028:	e7eb      	b.n	800e002 <__swsetup_r+0x1e>
 800e02a:	4b24      	ldr	r3, [pc, #144]	; (800e0bc <__swsetup_r+0xd8>)
 800e02c:	429c      	cmp	r4, r3
 800e02e:	bf08      	it	eq
 800e030:	68ec      	ldreq	r4, [r5, #12]
 800e032:	e7e6      	b.n	800e002 <__swsetup_r+0x1e>
 800e034:	0758      	lsls	r0, r3, #29
 800e036:	d512      	bpl.n	800e05e <__swsetup_r+0x7a>
 800e038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e03a:	b141      	cbz	r1, 800e04e <__swsetup_r+0x6a>
 800e03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e040:	4299      	cmp	r1, r3
 800e042:	d002      	beq.n	800e04a <__swsetup_r+0x66>
 800e044:	4630      	mov	r0, r6
 800e046:	f7ff fb31 	bl	800d6ac <_free_r>
 800e04a:	2300      	movs	r3, #0
 800e04c:	6363      	str	r3, [r4, #52]	; 0x34
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e054:	81a3      	strh	r3, [r4, #12]
 800e056:	2300      	movs	r3, #0
 800e058:	6063      	str	r3, [r4, #4]
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	89a3      	ldrh	r3, [r4, #12]
 800e060:	f043 0308 	orr.w	r3, r3, #8
 800e064:	81a3      	strh	r3, [r4, #12]
 800e066:	6923      	ldr	r3, [r4, #16]
 800e068:	b94b      	cbnz	r3, 800e07e <__swsetup_r+0x9a>
 800e06a:	89a3      	ldrh	r3, [r4, #12]
 800e06c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e074:	d003      	beq.n	800e07e <__swsetup_r+0x9a>
 800e076:	4621      	mov	r1, r4
 800e078:	4630      	mov	r0, r6
 800e07a:	f000 fa09 	bl	800e490 <__smakebuf_r>
 800e07e:	89a0      	ldrh	r0, [r4, #12]
 800e080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e084:	f010 0301 	ands.w	r3, r0, #1
 800e088:	d00a      	beq.n	800e0a0 <__swsetup_r+0xbc>
 800e08a:	2300      	movs	r3, #0
 800e08c:	60a3      	str	r3, [r4, #8]
 800e08e:	6963      	ldr	r3, [r4, #20]
 800e090:	425b      	negs	r3, r3
 800e092:	61a3      	str	r3, [r4, #24]
 800e094:	6923      	ldr	r3, [r4, #16]
 800e096:	b943      	cbnz	r3, 800e0aa <__swsetup_r+0xc6>
 800e098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e09c:	d1ba      	bne.n	800e014 <__swsetup_r+0x30>
 800e09e:	bd70      	pop	{r4, r5, r6, pc}
 800e0a0:	0781      	lsls	r1, r0, #30
 800e0a2:	bf58      	it	pl
 800e0a4:	6963      	ldrpl	r3, [r4, #20]
 800e0a6:	60a3      	str	r3, [r4, #8]
 800e0a8:	e7f4      	b.n	800e094 <__swsetup_r+0xb0>
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	e7f7      	b.n	800e09e <__swsetup_r+0xba>
 800e0ae:	bf00      	nop
 800e0b0:	20000254 	.word	0x20000254
 800e0b4:	0801a384 	.word	0x0801a384
 800e0b8:	0801a3a4 	.word	0x0801a3a4
 800e0bc:	0801a364 	.word	0x0801a364

0800e0c0 <abort>:
 800e0c0:	b508      	push	{r3, lr}
 800e0c2:	2006      	movs	r0, #6
 800e0c4:	f000 fa54 	bl	800e570 <raise>
 800e0c8:	2001      	movs	r0, #1
 800e0ca:	f7f6 f90f 	bl	80042ec <_exit>
	...

0800e0d0 <__sflush_r>:
 800e0d0:	898a      	ldrh	r2, [r1, #12]
 800e0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	0710      	lsls	r0, r2, #28
 800e0da:	460c      	mov	r4, r1
 800e0dc:	d458      	bmi.n	800e190 <__sflush_r+0xc0>
 800e0de:	684b      	ldr	r3, [r1, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dc05      	bgt.n	800e0f0 <__sflush_r+0x20>
 800e0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	dc02      	bgt.n	800e0f0 <__sflush_r+0x20>
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	d0f9      	beq.n	800e0ea <__sflush_r+0x1a>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0fc:	682f      	ldr	r7, [r5, #0]
 800e0fe:	602b      	str	r3, [r5, #0]
 800e100:	d032      	beq.n	800e168 <__sflush_r+0x98>
 800e102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	075a      	lsls	r2, r3, #29
 800e108:	d505      	bpl.n	800e116 <__sflush_r+0x46>
 800e10a:	6863      	ldr	r3, [r4, #4]
 800e10c:	1ac0      	subs	r0, r0, r3
 800e10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e110:	b10b      	cbz	r3, 800e116 <__sflush_r+0x46>
 800e112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e114:	1ac0      	subs	r0, r0, r3
 800e116:	2300      	movs	r3, #0
 800e118:	4602      	mov	r2, r0
 800e11a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e11c:	6a21      	ldr	r1, [r4, #32]
 800e11e:	4628      	mov	r0, r5
 800e120:	47b0      	blx	r6
 800e122:	1c43      	adds	r3, r0, #1
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	d106      	bne.n	800e136 <__sflush_r+0x66>
 800e128:	6829      	ldr	r1, [r5, #0]
 800e12a:	291d      	cmp	r1, #29
 800e12c:	d82c      	bhi.n	800e188 <__sflush_r+0xb8>
 800e12e:	4a2a      	ldr	r2, [pc, #168]	; (800e1d8 <__sflush_r+0x108>)
 800e130:	40ca      	lsrs	r2, r1
 800e132:	07d6      	lsls	r6, r2, #31
 800e134:	d528      	bpl.n	800e188 <__sflush_r+0xb8>
 800e136:	2200      	movs	r2, #0
 800e138:	6062      	str	r2, [r4, #4]
 800e13a:	04d9      	lsls	r1, r3, #19
 800e13c:	6922      	ldr	r2, [r4, #16]
 800e13e:	6022      	str	r2, [r4, #0]
 800e140:	d504      	bpl.n	800e14c <__sflush_r+0x7c>
 800e142:	1c42      	adds	r2, r0, #1
 800e144:	d101      	bne.n	800e14a <__sflush_r+0x7a>
 800e146:	682b      	ldr	r3, [r5, #0]
 800e148:	b903      	cbnz	r3, 800e14c <__sflush_r+0x7c>
 800e14a:	6560      	str	r0, [r4, #84]	; 0x54
 800e14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e14e:	602f      	str	r7, [r5, #0]
 800e150:	2900      	cmp	r1, #0
 800e152:	d0ca      	beq.n	800e0ea <__sflush_r+0x1a>
 800e154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e158:	4299      	cmp	r1, r3
 800e15a:	d002      	beq.n	800e162 <__sflush_r+0x92>
 800e15c:	4628      	mov	r0, r5
 800e15e:	f7ff faa5 	bl	800d6ac <_free_r>
 800e162:	2000      	movs	r0, #0
 800e164:	6360      	str	r0, [r4, #52]	; 0x34
 800e166:	e7c1      	b.n	800e0ec <__sflush_r+0x1c>
 800e168:	6a21      	ldr	r1, [r4, #32]
 800e16a:	2301      	movs	r3, #1
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b0      	blx	r6
 800e170:	1c41      	adds	r1, r0, #1
 800e172:	d1c7      	bne.n	800e104 <__sflush_r+0x34>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0c4      	beq.n	800e104 <__sflush_r+0x34>
 800e17a:	2b1d      	cmp	r3, #29
 800e17c:	d001      	beq.n	800e182 <__sflush_r+0xb2>
 800e17e:	2b16      	cmp	r3, #22
 800e180:	d101      	bne.n	800e186 <__sflush_r+0xb6>
 800e182:	602f      	str	r7, [r5, #0]
 800e184:	e7b1      	b.n	800e0ea <__sflush_r+0x1a>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e18c:	81a3      	strh	r3, [r4, #12]
 800e18e:	e7ad      	b.n	800e0ec <__sflush_r+0x1c>
 800e190:	690f      	ldr	r7, [r1, #16]
 800e192:	2f00      	cmp	r7, #0
 800e194:	d0a9      	beq.n	800e0ea <__sflush_r+0x1a>
 800e196:	0793      	lsls	r3, r2, #30
 800e198:	680e      	ldr	r6, [r1, #0]
 800e19a:	bf08      	it	eq
 800e19c:	694b      	ldreq	r3, [r1, #20]
 800e19e:	600f      	str	r7, [r1, #0]
 800e1a0:	bf18      	it	ne
 800e1a2:	2300      	movne	r3, #0
 800e1a4:	eba6 0807 	sub.w	r8, r6, r7
 800e1a8:	608b      	str	r3, [r1, #8]
 800e1aa:	f1b8 0f00 	cmp.w	r8, #0
 800e1ae:	dd9c      	ble.n	800e0ea <__sflush_r+0x1a>
 800e1b0:	6a21      	ldr	r1, [r4, #32]
 800e1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1b4:	4643      	mov	r3, r8
 800e1b6:	463a      	mov	r2, r7
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	47b0      	blx	r6
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	dc06      	bgt.n	800e1ce <__sflush_r+0xfe>
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1c6:	81a3      	strh	r3, [r4, #12]
 800e1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1cc:	e78e      	b.n	800e0ec <__sflush_r+0x1c>
 800e1ce:	4407      	add	r7, r0
 800e1d0:	eba8 0800 	sub.w	r8, r8, r0
 800e1d4:	e7e9      	b.n	800e1aa <__sflush_r+0xda>
 800e1d6:	bf00      	nop
 800e1d8:	20400001 	.word	0x20400001

0800e1dc <_fflush_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	690b      	ldr	r3, [r1, #16]
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	b913      	cbnz	r3, 800e1ec <_fflush_r+0x10>
 800e1e6:	2500      	movs	r5, #0
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	b118      	cbz	r0, 800e1f6 <_fflush_r+0x1a>
 800e1ee:	6983      	ldr	r3, [r0, #24]
 800e1f0:	b90b      	cbnz	r3, 800e1f6 <_fflush_r+0x1a>
 800e1f2:	f000 f887 	bl	800e304 <__sinit>
 800e1f6:	4b14      	ldr	r3, [pc, #80]	; (800e248 <_fflush_r+0x6c>)
 800e1f8:	429c      	cmp	r4, r3
 800e1fa:	d11b      	bne.n	800e234 <_fflush_r+0x58>
 800e1fc:	686c      	ldr	r4, [r5, #4]
 800e1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0ef      	beq.n	800e1e6 <_fflush_r+0xa>
 800e206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e208:	07d0      	lsls	r0, r2, #31
 800e20a:	d404      	bmi.n	800e216 <_fflush_r+0x3a>
 800e20c:	0599      	lsls	r1, r3, #22
 800e20e:	d402      	bmi.n	800e216 <_fflush_r+0x3a>
 800e210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e212:	f000 f915 	bl	800e440 <__retarget_lock_acquire_recursive>
 800e216:	4628      	mov	r0, r5
 800e218:	4621      	mov	r1, r4
 800e21a:	f7ff ff59 	bl	800e0d0 <__sflush_r>
 800e21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e220:	07da      	lsls	r2, r3, #31
 800e222:	4605      	mov	r5, r0
 800e224:	d4e0      	bmi.n	800e1e8 <_fflush_r+0xc>
 800e226:	89a3      	ldrh	r3, [r4, #12]
 800e228:	059b      	lsls	r3, r3, #22
 800e22a:	d4dd      	bmi.n	800e1e8 <_fflush_r+0xc>
 800e22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e22e:	f000 f908 	bl	800e442 <__retarget_lock_release_recursive>
 800e232:	e7d9      	b.n	800e1e8 <_fflush_r+0xc>
 800e234:	4b05      	ldr	r3, [pc, #20]	; (800e24c <_fflush_r+0x70>)
 800e236:	429c      	cmp	r4, r3
 800e238:	d101      	bne.n	800e23e <_fflush_r+0x62>
 800e23a:	68ac      	ldr	r4, [r5, #8]
 800e23c:	e7df      	b.n	800e1fe <_fflush_r+0x22>
 800e23e:	4b04      	ldr	r3, [pc, #16]	; (800e250 <_fflush_r+0x74>)
 800e240:	429c      	cmp	r4, r3
 800e242:	bf08      	it	eq
 800e244:	68ec      	ldreq	r4, [r5, #12]
 800e246:	e7da      	b.n	800e1fe <_fflush_r+0x22>
 800e248:	0801a384 	.word	0x0801a384
 800e24c:	0801a3a4 	.word	0x0801a3a4
 800e250:	0801a364 	.word	0x0801a364

0800e254 <std>:
 800e254:	2300      	movs	r3, #0
 800e256:	b510      	push	{r4, lr}
 800e258:	4604      	mov	r4, r0
 800e25a:	e9c0 3300 	strd	r3, r3, [r0]
 800e25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e262:	6083      	str	r3, [r0, #8]
 800e264:	8181      	strh	r1, [r0, #12]
 800e266:	6643      	str	r3, [r0, #100]	; 0x64
 800e268:	81c2      	strh	r2, [r0, #14]
 800e26a:	6183      	str	r3, [r0, #24]
 800e26c:	4619      	mov	r1, r3
 800e26e:	2208      	movs	r2, #8
 800e270:	305c      	adds	r0, #92	; 0x5c
 800e272:	f7fd fb49 	bl	800b908 <memset>
 800e276:	4b05      	ldr	r3, [pc, #20]	; (800e28c <std+0x38>)
 800e278:	6263      	str	r3, [r4, #36]	; 0x24
 800e27a:	4b05      	ldr	r3, [pc, #20]	; (800e290 <std+0x3c>)
 800e27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e27e:	4b05      	ldr	r3, [pc, #20]	; (800e294 <std+0x40>)
 800e280:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e282:	4b05      	ldr	r3, [pc, #20]	; (800e298 <std+0x44>)
 800e284:	6224      	str	r4, [r4, #32]
 800e286:	6323      	str	r3, [r4, #48]	; 0x30
 800e288:	bd10      	pop	{r4, pc}
 800e28a:	bf00      	nop
 800e28c:	0800e5a9 	.word	0x0800e5a9
 800e290:	0800e5cb 	.word	0x0800e5cb
 800e294:	0800e603 	.word	0x0800e603
 800e298:	0800e627 	.word	0x0800e627

0800e29c <_cleanup_r>:
 800e29c:	4901      	ldr	r1, [pc, #4]	; (800e2a4 <_cleanup_r+0x8>)
 800e29e:	f000 b8af 	b.w	800e400 <_fwalk_reent>
 800e2a2:	bf00      	nop
 800e2a4:	0800e1dd 	.word	0x0800e1dd

0800e2a8 <__sfmoreglue>:
 800e2a8:	b570      	push	{r4, r5, r6, lr}
 800e2aa:	2268      	movs	r2, #104	; 0x68
 800e2ac:	1e4d      	subs	r5, r1, #1
 800e2ae:	4355      	muls	r5, r2
 800e2b0:	460e      	mov	r6, r1
 800e2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2b6:	f7ff fa65 	bl	800d784 <_malloc_r>
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	b140      	cbz	r0, 800e2d0 <__sfmoreglue+0x28>
 800e2be:	2100      	movs	r1, #0
 800e2c0:	e9c0 1600 	strd	r1, r6, [r0]
 800e2c4:	300c      	adds	r0, #12
 800e2c6:	60a0      	str	r0, [r4, #8]
 800e2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2cc:	f7fd fb1c 	bl	800b908 <memset>
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	bd70      	pop	{r4, r5, r6, pc}

0800e2d4 <__sfp_lock_acquire>:
 800e2d4:	4801      	ldr	r0, [pc, #4]	; (800e2dc <__sfp_lock_acquire+0x8>)
 800e2d6:	f000 b8b3 	b.w	800e440 <__retarget_lock_acquire_recursive>
 800e2da:	bf00      	nop
 800e2dc:	20000871 	.word	0x20000871

0800e2e0 <__sfp_lock_release>:
 800e2e0:	4801      	ldr	r0, [pc, #4]	; (800e2e8 <__sfp_lock_release+0x8>)
 800e2e2:	f000 b8ae 	b.w	800e442 <__retarget_lock_release_recursive>
 800e2e6:	bf00      	nop
 800e2e8:	20000871 	.word	0x20000871

0800e2ec <__sinit_lock_acquire>:
 800e2ec:	4801      	ldr	r0, [pc, #4]	; (800e2f4 <__sinit_lock_acquire+0x8>)
 800e2ee:	f000 b8a7 	b.w	800e440 <__retarget_lock_acquire_recursive>
 800e2f2:	bf00      	nop
 800e2f4:	20000872 	.word	0x20000872

0800e2f8 <__sinit_lock_release>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	; (800e300 <__sinit_lock_release+0x8>)
 800e2fa:	f000 b8a2 	b.w	800e442 <__retarget_lock_release_recursive>
 800e2fe:	bf00      	nop
 800e300:	20000872 	.word	0x20000872

0800e304 <__sinit>:
 800e304:	b510      	push	{r4, lr}
 800e306:	4604      	mov	r4, r0
 800e308:	f7ff fff0 	bl	800e2ec <__sinit_lock_acquire>
 800e30c:	69a3      	ldr	r3, [r4, #24]
 800e30e:	b11b      	cbz	r3, 800e318 <__sinit+0x14>
 800e310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e314:	f7ff bff0 	b.w	800e2f8 <__sinit_lock_release>
 800e318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e31c:	6523      	str	r3, [r4, #80]	; 0x50
 800e31e:	4b13      	ldr	r3, [pc, #76]	; (800e36c <__sinit+0x68>)
 800e320:	4a13      	ldr	r2, [pc, #76]	; (800e370 <__sinit+0x6c>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	62a2      	str	r2, [r4, #40]	; 0x28
 800e326:	42a3      	cmp	r3, r4
 800e328:	bf04      	itt	eq
 800e32a:	2301      	moveq	r3, #1
 800e32c:	61a3      	streq	r3, [r4, #24]
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 f820 	bl	800e374 <__sfp>
 800e334:	6060      	str	r0, [r4, #4]
 800e336:	4620      	mov	r0, r4
 800e338:	f000 f81c 	bl	800e374 <__sfp>
 800e33c:	60a0      	str	r0, [r4, #8]
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 f818 	bl	800e374 <__sfp>
 800e344:	2200      	movs	r2, #0
 800e346:	60e0      	str	r0, [r4, #12]
 800e348:	2104      	movs	r1, #4
 800e34a:	6860      	ldr	r0, [r4, #4]
 800e34c:	f7ff ff82 	bl	800e254 <std>
 800e350:	68a0      	ldr	r0, [r4, #8]
 800e352:	2201      	movs	r2, #1
 800e354:	2109      	movs	r1, #9
 800e356:	f7ff ff7d 	bl	800e254 <std>
 800e35a:	68e0      	ldr	r0, [r4, #12]
 800e35c:	2202      	movs	r2, #2
 800e35e:	2112      	movs	r1, #18
 800e360:	f7ff ff78 	bl	800e254 <std>
 800e364:	2301      	movs	r3, #1
 800e366:	61a3      	str	r3, [r4, #24]
 800e368:	e7d2      	b.n	800e310 <__sinit+0xc>
 800e36a:	bf00      	nop
 800e36c:	08019fe8 	.word	0x08019fe8
 800e370:	0800e29d 	.word	0x0800e29d

0800e374 <__sfp>:
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	4607      	mov	r7, r0
 800e378:	f7ff ffac 	bl	800e2d4 <__sfp_lock_acquire>
 800e37c:	4b1e      	ldr	r3, [pc, #120]	; (800e3f8 <__sfp+0x84>)
 800e37e:	681e      	ldr	r6, [r3, #0]
 800e380:	69b3      	ldr	r3, [r6, #24]
 800e382:	b913      	cbnz	r3, 800e38a <__sfp+0x16>
 800e384:	4630      	mov	r0, r6
 800e386:	f7ff ffbd 	bl	800e304 <__sinit>
 800e38a:	3648      	adds	r6, #72	; 0x48
 800e38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e390:	3b01      	subs	r3, #1
 800e392:	d503      	bpl.n	800e39c <__sfp+0x28>
 800e394:	6833      	ldr	r3, [r6, #0]
 800e396:	b30b      	cbz	r3, 800e3dc <__sfp+0x68>
 800e398:	6836      	ldr	r6, [r6, #0]
 800e39a:	e7f7      	b.n	800e38c <__sfp+0x18>
 800e39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3a0:	b9d5      	cbnz	r5, 800e3d8 <__sfp+0x64>
 800e3a2:	4b16      	ldr	r3, [pc, #88]	; (800e3fc <__sfp+0x88>)
 800e3a4:	60e3      	str	r3, [r4, #12]
 800e3a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3aa:	6665      	str	r5, [r4, #100]	; 0x64
 800e3ac:	f000 f847 	bl	800e43e <__retarget_lock_init_recursive>
 800e3b0:	f7ff ff96 	bl	800e2e0 <__sfp_lock_release>
 800e3b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3bc:	6025      	str	r5, [r4, #0]
 800e3be:	61a5      	str	r5, [r4, #24]
 800e3c0:	2208      	movs	r2, #8
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3c8:	f7fd fa9e 	bl	800b908 <memset>
 800e3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3d8:	3468      	adds	r4, #104	; 0x68
 800e3da:	e7d9      	b.n	800e390 <__sfp+0x1c>
 800e3dc:	2104      	movs	r1, #4
 800e3de:	4638      	mov	r0, r7
 800e3e0:	f7ff ff62 	bl	800e2a8 <__sfmoreglue>
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	6030      	str	r0, [r6, #0]
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d1d5      	bne.n	800e398 <__sfp+0x24>
 800e3ec:	f7ff ff78 	bl	800e2e0 <__sfp_lock_release>
 800e3f0:	230c      	movs	r3, #12
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	e7ee      	b.n	800e3d4 <__sfp+0x60>
 800e3f6:	bf00      	nop
 800e3f8:	08019fe8 	.word	0x08019fe8
 800e3fc:	ffff0001 	.word	0xffff0001

0800e400 <_fwalk_reent>:
 800e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e404:	4606      	mov	r6, r0
 800e406:	4688      	mov	r8, r1
 800e408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e40c:	2700      	movs	r7, #0
 800e40e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e412:	f1b9 0901 	subs.w	r9, r9, #1
 800e416:	d505      	bpl.n	800e424 <_fwalk_reent+0x24>
 800e418:	6824      	ldr	r4, [r4, #0]
 800e41a:	2c00      	cmp	r4, #0
 800e41c:	d1f7      	bne.n	800e40e <_fwalk_reent+0xe>
 800e41e:	4638      	mov	r0, r7
 800e420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e424:	89ab      	ldrh	r3, [r5, #12]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d907      	bls.n	800e43a <_fwalk_reent+0x3a>
 800e42a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e42e:	3301      	adds	r3, #1
 800e430:	d003      	beq.n	800e43a <_fwalk_reent+0x3a>
 800e432:	4629      	mov	r1, r5
 800e434:	4630      	mov	r0, r6
 800e436:	47c0      	blx	r8
 800e438:	4307      	orrs	r7, r0
 800e43a:	3568      	adds	r5, #104	; 0x68
 800e43c:	e7e9      	b.n	800e412 <_fwalk_reent+0x12>

0800e43e <__retarget_lock_init_recursive>:
 800e43e:	4770      	bx	lr

0800e440 <__retarget_lock_acquire_recursive>:
 800e440:	4770      	bx	lr

0800e442 <__retarget_lock_release_recursive>:
 800e442:	4770      	bx	lr

0800e444 <__swhatbuf_r>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	460e      	mov	r6, r1
 800e448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e44c:	2900      	cmp	r1, #0
 800e44e:	b096      	sub	sp, #88	; 0x58
 800e450:	4614      	mov	r4, r2
 800e452:	461d      	mov	r5, r3
 800e454:	da08      	bge.n	800e468 <__swhatbuf_r+0x24>
 800e456:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	602a      	str	r2, [r5, #0]
 800e45e:	061a      	lsls	r2, r3, #24
 800e460:	d410      	bmi.n	800e484 <__swhatbuf_r+0x40>
 800e462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e466:	e00e      	b.n	800e486 <__swhatbuf_r+0x42>
 800e468:	466a      	mov	r2, sp
 800e46a:	f000 f903 	bl	800e674 <_fstat_r>
 800e46e:	2800      	cmp	r0, #0
 800e470:	dbf1      	blt.n	800e456 <__swhatbuf_r+0x12>
 800e472:	9a01      	ldr	r2, [sp, #4]
 800e474:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e478:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e47c:	425a      	negs	r2, r3
 800e47e:	415a      	adcs	r2, r3
 800e480:	602a      	str	r2, [r5, #0]
 800e482:	e7ee      	b.n	800e462 <__swhatbuf_r+0x1e>
 800e484:	2340      	movs	r3, #64	; 0x40
 800e486:	2000      	movs	r0, #0
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	b016      	add	sp, #88	; 0x58
 800e48c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e490 <__smakebuf_r>:
 800e490:	898b      	ldrh	r3, [r1, #12]
 800e492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e494:	079d      	lsls	r5, r3, #30
 800e496:	4606      	mov	r6, r0
 800e498:	460c      	mov	r4, r1
 800e49a:	d507      	bpl.n	800e4ac <__smakebuf_r+0x1c>
 800e49c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	6123      	str	r3, [r4, #16]
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	6163      	str	r3, [r4, #20]
 800e4a8:	b002      	add	sp, #8
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	ab01      	add	r3, sp, #4
 800e4ae:	466a      	mov	r2, sp
 800e4b0:	f7ff ffc8 	bl	800e444 <__swhatbuf_r>
 800e4b4:	9900      	ldr	r1, [sp, #0]
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff f963 	bl	800d784 <_malloc_r>
 800e4be:	b948      	cbnz	r0, 800e4d4 <__smakebuf_r+0x44>
 800e4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4c4:	059a      	lsls	r2, r3, #22
 800e4c6:	d4ef      	bmi.n	800e4a8 <__smakebuf_r+0x18>
 800e4c8:	f023 0303 	bic.w	r3, r3, #3
 800e4cc:	f043 0302 	orr.w	r3, r3, #2
 800e4d0:	81a3      	strh	r3, [r4, #12]
 800e4d2:	e7e3      	b.n	800e49c <__smakebuf_r+0xc>
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	; (800e50c <__smakebuf_r+0x7c>)
 800e4d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4d8:	89a3      	ldrh	r3, [r4, #12]
 800e4da:	6020      	str	r0, [r4, #0]
 800e4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e0:	81a3      	strh	r3, [r4, #12]
 800e4e2:	9b00      	ldr	r3, [sp, #0]
 800e4e4:	6163      	str	r3, [r4, #20]
 800e4e6:	9b01      	ldr	r3, [sp, #4]
 800e4e8:	6120      	str	r0, [r4, #16]
 800e4ea:	b15b      	cbz	r3, 800e504 <__smakebuf_r+0x74>
 800e4ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f000 f8d1 	bl	800e698 <_isatty_r>
 800e4f6:	b128      	cbz	r0, 800e504 <__smakebuf_r+0x74>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	f023 0303 	bic.w	r3, r3, #3
 800e4fe:	f043 0301 	orr.w	r3, r3, #1
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	89a0      	ldrh	r0, [r4, #12]
 800e506:	4305      	orrs	r5, r0
 800e508:	81a5      	strh	r5, [r4, #12]
 800e50a:	e7cd      	b.n	800e4a8 <__smakebuf_r+0x18>
 800e50c:	0800e29d 	.word	0x0800e29d

0800e510 <_malloc_usable_size_r>:
 800e510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e514:	1f18      	subs	r0, r3, #4
 800e516:	2b00      	cmp	r3, #0
 800e518:	bfbc      	itt	lt
 800e51a:	580b      	ldrlt	r3, [r1, r0]
 800e51c:	18c0      	addlt	r0, r0, r3
 800e51e:	4770      	bx	lr

0800e520 <_raise_r>:
 800e520:	291f      	cmp	r1, #31
 800e522:	b538      	push	{r3, r4, r5, lr}
 800e524:	4604      	mov	r4, r0
 800e526:	460d      	mov	r5, r1
 800e528:	d904      	bls.n	800e534 <_raise_r+0x14>
 800e52a:	2316      	movs	r3, #22
 800e52c:	6003      	str	r3, [r0, #0]
 800e52e:	f04f 30ff 	mov.w	r0, #4294967295
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e536:	b112      	cbz	r2, 800e53e <_raise_r+0x1e>
 800e538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e53c:	b94b      	cbnz	r3, 800e552 <_raise_r+0x32>
 800e53e:	4620      	mov	r0, r4
 800e540:	f000 f830 	bl	800e5a4 <_getpid_r>
 800e544:	462a      	mov	r2, r5
 800e546:	4601      	mov	r1, r0
 800e548:	4620      	mov	r0, r4
 800e54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e54e:	f000 b817 	b.w	800e580 <_kill_r>
 800e552:	2b01      	cmp	r3, #1
 800e554:	d00a      	beq.n	800e56c <_raise_r+0x4c>
 800e556:	1c59      	adds	r1, r3, #1
 800e558:	d103      	bne.n	800e562 <_raise_r+0x42>
 800e55a:	2316      	movs	r3, #22
 800e55c:	6003      	str	r3, [r0, #0]
 800e55e:	2001      	movs	r0, #1
 800e560:	e7e7      	b.n	800e532 <_raise_r+0x12>
 800e562:	2400      	movs	r4, #0
 800e564:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e568:	4628      	mov	r0, r5
 800e56a:	4798      	blx	r3
 800e56c:	2000      	movs	r0, #0
 800e56e:	e7e0      	b.n	800e532 <_raise_r+0x12>

0800e570 <raise>:
 800e570:	4b02      	ldr	r3, [pc, #8]	; (800e57c <raise+0xc>)
 800e572:	4601      	mov	r1, r0
 800e574:	6818      	ldr	r0, [r3, #0]
 800e576:	f7ff bfd3 	b.w	800e520 <_raise_r>
 800e57a:	bf00      	nop
 800e57c:	20000254 	.word	0x20000254

0800e580 <_kill_r>:
 800e580:	b538      	push	{r3, r4, r5, lr}
 800e582:	4d07      	ldr	r5, [pc, #28]	; (800e5a0 <_kill_r+0x20>)
 800e584:	2300      	movs	r3, #0
 800e586:	4604      	mov	r4, r0
 800e588:	4608      	mov	r0, r1
 800e58a:	4611      	mov	r1, r2
 800e58c:	602b      	str	r3, [r5, #0]
 800e58e:	f7f5 fe9d 	bl	80042cc <_kill>
 800e592:	1c43      	adds	r3, r0, #1
 800e594:	d102      	bne.n	800e59c <_kill_r+0x1c>
 800e596:	682b      	ldr	r3, [r5, #0]
 800e598:	b103      	cbz	r3, 800e59c <_kill_r+0x1c>
 800e59a:	6023      	str	r3, [r4, #0]
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	bf00      	nop
 800e5a0:	2000086c 	.word	0x2000086c

0800e5a4 <_getpid_r>:
 800e5a4:	f7f5 be8a 	b.w	80042bc <_getpid>

0800e5a8 <__sread>:
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b0:	f000 f894 	bl	800e6dc <_read_r>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	bfab      	itete	ge
 800e5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e5bc:	181b      	addge	r3, r3, r0
 800e5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5c2:	bfac      	ite	ge
 800e5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5c6:	81a3      	strhlt	r3, [r4, #12]
 800e5c8:	bd10      	pop	{r4, pc}

0800e5ca <__swrite>:
 800e5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ce:	461f      	mov	r7, r3
 800e5d0:	898b      	ldrh	r3, [r1, #12]
 800e5d2:	05db      	lsls	r3, r3, #23
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	4616      	mov	r6, r2
 800e5da:	d505      	bpl.n	800e5e8 <__swrite+0x1e>
 800e5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f000 f868 	bl	800e6b8 <_lseek_r>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5f2:	81a3      	strh	r3, [r4, #12]
 800e5f4:	4632      	mov	r2, r6
 800e5f6:	463b      	mov	r3, r7
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fe:	f000 b817 	b.w	800e630 <_write_r>

0800e602 <__sseek>:
 800e602:	b510      	push	{r4, lr}
 800e604:	460c      	mov	r4, r1
 800e606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e60a:	f000 f855 	bl	800e6b8 <_lseek_r>
 800e60e:	1c43      	adds	r3, r0, #1
 800e610:	89a3      	ldrh	r3, [r4, #12]
 800e612:	bf15      	itete	ne
 800e614:	6560      	strne	r0, [r4, #84]	; 0x54
 800e616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e61e:	81a3      	strheq	r3, [r4, #12]
 800e620:	bf18      	it	ne
 800e622:	81a3      	strhne	r3, [r4, #12]
 800e624:	bd10      	pop	{r4, pc}

0800e626 <__sclose>:
 800e626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e62a:	f000 b813 	b.w	800e654 <_close_r>
	...

0800e630 <_write_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4d07      	ldr	r5, [pc, #28]	; (800e650 <_write_r+0x20>)
 800e634:	4604      	mov	r4, r0
 800e636:	4608      	mov	r0, r1
 800e638:	4611      	mov	r1, r2
 800e63a:	2200      	movs	r2, #0
 800e63c:	602a      	str	r2, [r5, #0]
 800e63e:	461a      	mov	r2, r3
 800e640:	f7f5 fe7b 	bl	800433a <_write>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_write_r+0x1e>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_write_r+0x1e>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	2000086c 	.word	0x2000086c

0800e654 <_close_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	4d06      	ldr	r5, [pc, #24]	; (800e670 <_close_r+0x1c>)
 800e658:	2300      	movs	r3, #0
 800e65a:	4604      	mov	r4, r0
 800e65c:	4608      	mov	r0, r1
 800e65e:	602b      	str	r3, [r5, #0]
 800e660:	f7f5 fe87 	bl	8004372 <_close>
 800e664:	1c43      	adds	r3, r0, #1
 800e666:	d102      	bne.n	800e66e <_close_r+0x1a>
 800e668:	682b      	ldr	r3, [r5, #0]
 800e66a:	b103      	cbz	r3, 800e66e <_close_r+0x1a>
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	bd38      	pop	{r3, r4, r5, pc}
 800e670:	2000086c 	.word	0x2000086c

0800e674 <_fstat_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4d07      	ldr	r5, [pc, #28]	; (800e694 <_fstat_r+0x20>)
 800e678:	2300      	movs	r3, #0
 800e67a:	4604      	mov	r4, r0
 800e67c:	4608      	mov	r0, r1
 800e67e:	4611      	mov	r1, r2
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	f7f5 fe82 	bl	800438a <_fstat>
 800e686:	1c43      	adds	r3, r0, #1
 800e688:	d102      	bne.n	800e690 <_fstat_r+0x1c>
 800e68a:	682b      	ldr	r3, [r5, #0]
 800e68c:	b103      	cbz	r3, 800e690 <_fstat_r+0x1c>
 800e68e:	6023      	str	r3, [r4, #0]
 800e690:	bd38      	pop	{r3, r4, r5, pc}
 800e692:	bf00      	nop
 800e694:	2000086c 	.word	0x2000086c

0800e698 <_isatty_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4d06      	ldr	r5, [pc, #24]	; (800e6b4 <_isatty_r+0x1c>)
 800e69c:	2300      	movs	r3, #0
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4608      	mov	r0, r1
 800e6a2:	602b      	str	r3, [r5, #0]
 800e6a4:	f7f5 fe81 	bl	80043aa <_isatty>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_isatty_r+0x1a>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_isatty_r+0x1a>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	2000086c 	.word	0x2000086c

0800e6b8 <_lseek_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4d07      	ldr	r5, [pc, #28]	; (800e6d8 <_lseek_r+0x20>)
 800e6bc:	4604      	mov	r4, r0
 800e6be:	4608      	mov	r0, r1
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	602a      	str	r2, [r5, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f7f5 fe7a 	bl	80043c0 <_lseek>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d102      	bne.n	800e6d6 <_lseek_r+0x1e>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	b103      	cbz	r3, 800e6d6 <_lseek_r+0x1e>
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	2000086c 	.word	0x2000086c

0800e6dc <_read_r>:
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	4d07      	ldr	r5, [pc, #28]	; (800e6fc <_read_r+0x20>)
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	4608      	mov	r0, r1
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	602a      	str	r2, [r5, #0]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	f7f5 fe08 	bl	8004300 <_read>
 800e6f0:	1c43      	adds	r3, r0, #1
 800e6f2:	d102      	bne.n	800e6fa <_read_r+0x1e>
 800e6f4:	682b      	ldr	r3, [r5, #0]
 800e6f6:	b103      	cbz	r3, 800e6fa <_read_r+0x1e>
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	bd38      	pop	{r3, r4, r5, pc}
 800e6fc:	2000086c 	.word	0x2000086c

0800e700 <trunc>:
 800e700:	ec51 0b10 	vmov	r0, r1, d0
 800e704:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e708:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e70c:	2b13      	cmp	r3, #19
 800e70e:	b5d0      	push	{r4, r6, r7, lr}
 800e710:	460c      	mov	r4, r1
 800e712:	dc10      	bgt.n	800e736 <trunc+0x36>
 800e714:	2b00      	cmp	r3, #0
 800e716:	bfa5      	ittet	ge
 800e718:	4a11      	ldrge	r2, [pc, #68]	; (800e760 <trunc+0x60>)
 800e71a:	fa42 f303 	asrge.w	r3, r2, r3
 800e71e:	2100      	movlt	r1, #0
 800e720:	2100      	movge	r1, #0
 800e722:	bfb9      	ittee	lt
 800e724:	2000      	movlt	r0, #0
 800e726:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800e72a:	2000      	movge	r0, #0
 800e72c:	ea24 0103 	bicge.w	r1, r4, r3
 800e730:	ec41 0b10 	vmov	d0, r0, r1
 800e734:	bdd0      	pop	{r4, r6, r7, pc}
 800e736:	2b33      	cmp	r3, #51	; 0x33
 800e738:	dd08      	ble.n	800e74c <trunc+0x4c>
 800e73a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e73e:	d1f7      	bne.n	800e730 <trunc+0x30>
 800e740:	ee10 2a10 	vmov	r2, s0
 800e744:	460b      	mov	r3, r1
 800e746:	f7f1 fda9 	bl	800029c <__adddf3>
 800e74a:	e7f1      	b.n	800e730 <trunc+0x30>
 800e74c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e750:	f04f 33ff 	mov.w	r3, #4294967295
 800e754:	fa23 f202 	lsr.w	r2, r3, r2
 800e758:	ea20 0602 	bic.w	r6, r0, r2
 800e75c:	4630      	mov	r0, r6
 800e75e:	e7e7      	b.n	800e730 <trunc+0x30>
 800e760:	000fffff 	.word	0x000fffff

0800e764 <ceilf>:
 800e764:	ee10 3a10 	vmov	r3, s0
 800e768:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e76c:	3a7f      	subs	r2, #127	; 0x7f
 800e76e:	2a16      	cmp	r2, #22
 800e770:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e774:	dc2a      	bgt.n	800e7cc <ceilf+0x68>
 800e776:	2a00      	cmp	r2, #0
 800e778:	da11      	bge.n	800e79e <ceilf+0x3a>
 800e77a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e7e0 <ceilf+0x7c>
 800e77e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e782:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78a:	dd05      	ble.n	800e798 <ceilf+0x34>
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	db23      	blt.n	800e7d8 <ceilf+0x74>
 800e790:	2900      	cmp	r1, #0
 800e792:	bf18      	it	ne
 800e794:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800e798:	ee00 3a10 	vmov	s0, r3
 800e79c:	4770      	bx	lr
 800e79e:	4911      	ldr	r1, [pc, #68]	; (800e7e4 <ceilf+0x80>)
 800e7a0:	4111      	asrs	r1, r2
 800e7a2:	420b      	tst	r3, r1
 800e7a4:	d0fa      	beq.n	800e79c <ceilf+0x38>
 800e7a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e7e0 <ceilf+0x7c>
 800e7aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e7ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b6:	ddef      	ble.n	800e798 <ceilf+0x34>
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	bfc2      	ittt	gt
 800e7bc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800e7c0:	fa40 f202 	asrgt.w	r2, r0, r2
 800e7c4:	189b      	addgt	r3, r3, r2
 800e7c6:	ea23 0301 	bic.w	r3, r3, r1
 800e7ca:	e7e5      	b.n	800e798 <ceilf+0x34>
 800e7cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e7d0:	d3e4      	bcc.n	800e79c <ceilf+0x38>
 800e7d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e7d6:	4770      	bx	lr
 800e7d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7dc:	e7dc      	b.n	800e798 <ceilf+0x34>
 800e7de:	bf00      	nop
 800e7e0:	7149f2ca 	.word	0x7149f2ca
 800e7e4:	007fffff 	.word	0x007fffff

0800e7e8 <_init>:
 800e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ea:	bf00      	nop
 800e7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ee:	bc08      	pop	{r3}
 800e7f0:	469e      	mov	lr, r3
 800e7f2:	4770      	bx	lr

0800e7f4 <_fini>:
 800e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f6:	bf00      	nop
 800e7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7fa:	bc08      	pop	{r3}
 800e7fc:	469e      	mov	lr, r3
 800e7fe:	4770      	bx	lr
