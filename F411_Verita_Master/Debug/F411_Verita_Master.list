
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d8bc  0800fe90  0800fe90  0001fe90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d74c  0803d74c  00050420  2**0
                  CONTENTS
  4 .ARM          00000008  0803d74c  0803d74c  0004d74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d754  0803d754  00050420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d754  0803d754  0004d754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d758  0803d758  0004d758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0803d75c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000420  0803db7c  00050420  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0803db7c  00050900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c87  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000336f  00000000  00000000  000690d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0006c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0006da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a318  00000000  00000000  0006ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b05f  00000000  00000000  00089150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4ae  00000000  00000000  000a41af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e65d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d1c  00000000  00000000  0013e6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000420 	.word	0x20000420
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe78 	.word	0x0800fe78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000424 	.word	0x20000424
 80001dc:	0800fe78 	.word	0x0800fe78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f006 fd9f 	bl	8007b54 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00e fea2 	bl	800fd90 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00e fe7d 	bl	800fd90 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f006 fd44 	bl	8007b54 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000440 	.word	0x20000440
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f006 fe0e 	bl	8007d48 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000043c 	.word	0x2000043c
 800114c:	2000043d 	.word	0x2000043d

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 fde6 	bl	8007d48 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000043c 	.word	0x2000043c
 8001194:	2000043d 	.word	0x2000043d

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f006 fdc2 	bl	8007d48 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000043c 	.word	0x2000043c
 8001208:	2000043d 	.word	0x2000043d
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f006 fd86 	bl	8007d48 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	2000043c 	.word	0x2000043c
 800129c:	2000043d 	.word	0x2000043d
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f006 fab5 	bl	8007834 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f009 fcb2 	bl	800ac42 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f006 faa6 	bl	8007834 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
	//return adcbit * 0.001215; // 4.98/4096
	//return adcbit * 0.001225; // 5.02/4096
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 800135e:	4b74      	ldr	r3, [pc, #464]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	f040 80c5 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001370:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b52      	cmp	r3, #82	; 0x52
 800137e:	f040 80bc 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	f040 80b3 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001394:	2400      	movs	r4, #0
 8001396:	e009      	b.n	80013ac <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4423      	add	r3, r4
 800139e:	3303      	adds	r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013a8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013aa:	3401      	adds	r4, #1
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	ddf3      	ble.n	8001398 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e006      	b.n	80013c2 <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013b8:	5d1b      	ldrb	r3, [r3, r4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 80013c0:	3401      	adds	r4, #1
 80013c2:	2c04      	cmp	r4, #4
 80013c4:	ddf6      	ble.n	80013b4 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 808e 	bne.w	80014f6 <Rx_Verita_engine_callBak+0x1a6>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3309      	adds	r3, #9
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f2:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	0859      	lsrs	r1, r3, #1
 8001400:	460b      	mov	r3, r1
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800140c:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b20      	cmp	r3, #32
 800142c:	d808      	bhi.n	8001440 <Rx_Verita_engine_callBak+0xf0>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 800143c:	2391      	movs	r3, #145	; 0x91
 800143e:	e072      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b8f      	cmp	r3, #143	; 0x8f
 8001446:	d96c      	bls.n	8001522 <Rx_Verita_engine_callBak+0x1d2>
					switch(logger[0]){
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b91      	subs	r3, #145	; 0x91
 800144e:	2b13      	cmp	r3, #19
 8001450:	d82a      	bhi.n	80014a8 <Rx_Verita_engine_callBak+0x158>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <Rx_Verita_engine_callBak+0x108>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014ad 	.word	0x080014ad
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b5 	.word	0x080014b5
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014a9 	.word	0x080014a9
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014a9 	.word	0x080014a9
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014a9 	.word	0x080014a9
 800147c:	080014a9 	.word	0x080014a9
 8001480:	080014a9 	.word	0x080014a9
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014a9 	.word	0x080014a9
 800148c:	080014a9 	.word	0x080014a9
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014d3 	.word	0x080014d3
 80014a0:	080014df 	.word	0x080014df
 80014a4:	080014eb 	.word	0x080014eb
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80014a8:	2390      	movs	r3, #144	; 0x90
 80014aa:	e03c      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x91:
							return VRT_OK;
 80014ac:	2391      	movs	r3, #145	; 0x91
 80014ae:	e03a      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x92:
							return VRT_Busy;
 80014b0:	2392      	movs	r3, #146	; 0x92
 80014b2:	e038      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x93:
							return VRT_DataLoss;
 80014b4:	2393      	movs	r3, #147	; 0x93
 80014b6:	e036      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x94:
							return VRT_UnEnc;
 80014b8:	2394      	movs	r3, #148	; 0x94
 80014ba:	e034      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80014c2:	2391      	movs	r3, #145	; 0x91
 80014c4:	e02f      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_ger:
							regisk->Mark.Flag_ger = logu.U8[0];
 80014c6:	7a3a      	ldrb	r2, [r7, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80014ce:	2391      	movs	r3, #145	; 0x91
 80014d0:	e029      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Next:
							regisk->Mark.Flag_next = 0xFF; return VRC_Next;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80014da:	23a2      	movs	r3, #162	; 0xa2
 80014dc:	e023      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_aa:
							regisk->Mark.Flag_aa = logu.U8[0]; return VRC_Flag_aa;
 80014de:	7a3a      	ldrb	r2, [r7, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80014e6:	23a3      	movs	r3, #163	; 0xa3
 80014e8:	e01d      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_bb:
							regisk->Mark.Flag_bb = logu.U8[0]; return VRC_Flag_bb;
 80014ea:	7a3a      	ldrb	r2, [r7, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80014f2:	23a4      	movs	r3, #164	; 0xa4
 80014f4:	e017      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 80014f6:	2393      	movs	r3, #147	; 0x93
 80014f8:	e015      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3309      	adds	r3, #9
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001504:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 800150c:	fba3 1302 	umull	r1, r3, r3, r2
 8001510:	0859      	lsrs	r1, r3, #1
 8001512:	460b      	mov	r3, r1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <Rx_Verita_engine_callBak+0x1d4>
			if( chksum[1] == logger[5]){
 8001522:	bf00      	nop
		}


	return VRT_ERROR;
 8001524:	2390      	movs	r3, #144	; 0x90
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr
 8001530:	20000442 	.word	0x20000442
 8001534:	20000444 	.word	0x20000444
 8001538:	38e38e39 	.word	0x38e38e39

0800153c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d011      	beq.n	8001572 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f80b 	bl	800157c <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 8001572:	2391      	movs	r3, #145	; 0x91
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	460b      	mov	r3, r1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	2356      	movs	r3, #86	; 0x56
 800159a:	753b      	strb	r3, [r7, #20]
 800159c:	2352      	movs	r3, #82	; 0x52
 800159e:	757b      	strb	r3, [r7, #21]
 80015a0:	2354      	movs	r3, #84	; 0x54
 80015a2:	75bb      	strb	r3, [r7, #22]
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80015a8:	2304      	movs	r3, #4
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80015b8:	2404      	movs	r4, #4
 80015ba:	e00f      	b.n	80015dc <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80015bc:	1f23      	subs	r3, r4, #4
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015c6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80015da:	3401      	adds	r4, #1
 80015dc:	2c07      	cmp	r4, #7
 80015de:	dded      	ble.n	80015bc <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80015e0:	2403      	movs	r4, #3
 80015e2:	e00a      	b.n	80015fa <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80015e4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015e8:	443b      	add	r3, r7
 80015ea:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80015ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f2:	4413      	add	r3, r2
 80015f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80015f8:	3401      	adds	r4, #1
 80015fa:	2c07      	cmp	r4, #7
 80015fc:	ddf2      	ble.n	80015e4 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001602:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001606:	43d2      	mvns	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	f107 0114 	add.w	r1, r7, #20
 8001620:	2332      	movs	r3, #50	; 0x32
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f00a fa35 	bl	800ba92 <HAL_UART_Transmit>
}
 8001628:	bf00      	nop
 800162a:	372c      	adds	r7, #44	; 0x2c
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	2356      	movs	r3, #86	; 0x56
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	2352      	movs	r3, #82	; 0x52
 8001654:	737b      	strb	r3, [r7, #13]
 8001656:	2354      	movs	r3, #84	; 0x54
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	743b      	strb	r3, [r7, #16]
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	74bb      	strb	r3, [r7, #18]
 8001666:	23aa      	movs	r3, #170	; 0xaa
 8001668:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 800166e:	2403      	movs	r4, #3
 8001670:	e008      	b.n	8001684 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001672:	f104 0320 	add.w	r3, r4, #32
 8001676:	443b      	add	r3, r7
 8001678:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	4413      	add	r3, r2
 8001680:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001682:	3401      	adds	r4, #1
 8001684:	2c07      	cmp	r4, #7
 8001686:	ddf4      	ble.n	8001672 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	43db      	mvns	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	231e      	movs	r3, #30
 8001696:	2209      	movs	r2, #9
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f00a f9fa 	bl	800ba92 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
	...

080016a8 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <BL_UART_Start+0x58>)
 80016bc:	f006 f8ba 	bl	8007834 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <BL_UART_Start+0x5c>)
 80016c6:	f006 f8b5 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016ca:	2014      	movs	r0, #20
 80016cc:	f005 f9d0 	bl	8006a70 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <BL_UART_Start+0x5c>)
 80016d6:	f006 f8ad 	bl	8007834 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80016da:	2055      	movs	r0, #85	; 0x55
 80016dc:	f005 f9c8 	bl	8006a70 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80016e0:	f107 010f 	add.w	r1, r7, #15
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f00a f9d2 	bl	800ba92 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80016ee:	2114      	movs	r1, #20
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f999 	bl	8001a28 <BL_UART_wait_ACK>

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800

08001708 <BL_UART_Finish>:

void BL_UART_Finish(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f005 f9af 	bl	8006a70 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <BL_UART_Finish+0x34>)
 800171a:	f006 f88b 	bl	8007834 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <BL_UART_Finish+0x38>)
 8001724:	f006 f886 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001728:	2014      	movs	r0, #20
 800172a:	f005 f9a1 	bl	8006a70 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <BL_UART_Finish+0x38>)
 8001734:	f006 f87e 	bl	8007834 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	40020800 	.word	0x40020800

08001744 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0cb      	sub	sp, #300	; 0x12c
 8001748:	af00      	add	r7, sp, #0
 800174a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800174e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001758:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800175c:	6001      	str	r1, [r0, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001764:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001772:	460a      	mov	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 8001776:	f64c 6331 	movw	r3, #52785	; 0xce31
 800177a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001790:	2300      	movs	r3, #0
 8001792:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 8001796:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800179a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b fbf2 	bl	800cf94 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 80017b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <BL_UART_WriteMem+0x254>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d909      	bls.n	80017d4 <BL_UART_WriteMem+0x90>
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ce:	d201      	bcs.n	80017d4 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80017d0:	23bc      	movs	r3, #188	; 0xbc
 80017d2:	e0dc      	b.n	800198e <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80017d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017dc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80017e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80017f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001804:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001820:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001824:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001828:	4053      	eors	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001830:	4053      	eors	r3, r2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001838:	4053      	eors	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001840:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800184e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001852:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001856:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800185a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001862:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001866:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001870:	2400      	movs	r4, #0
 8001872:	e01c      	b.n	80018ae <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001874:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001878:	4621      	mov	r1, r4
 800187a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4053      	eors	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001890:	4622      	mov	r2, r4
 8001892:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	441a      	add	r2, r3
 800189e:	1c63      	adds	r3, r4, #1
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018a6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018aa:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 80018ac:	3401      	adds	r4, #1
 80018ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429c      	cmp	r4, r3
 80018ba:	dddb      	ble.n	8001874 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 80018bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3302      	adds	r3, #2
 80018c8:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80018cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018d0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018d4:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80018d6:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80018da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018de:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018e2:	230a      	movs	r3, #10
 80018e4:	2202      	movs	r2, #2
 80018e6:	6800      	ldr	r0, [r0, #0]
 80018e8:	f00a f8d3 	bl	800ba92 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018f4:	210a      	movs	r1, #10
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f000 f896 	bl	8001a28 <BL_UART_wait_ACK>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001906:	2b79      	cmp	r3, #121	; 0x79
 8001908:	d140      	bne.n	800198c <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800190a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800190e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001912:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001916:	230f      	movs	r3, #15
 8001918:	2205      	movs	r2, #5
 800191a:	6800      	ldr	r0, [r0, #0]
 800191c:	f00a f8b9 	bl	800ba92 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001920:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001928:	210a      	movs	r1, #10
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f000 f87c 	bl	8001a28 <BL_UART_wait_ACK>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800193a:	2b79      	cmp	r3, #121	; 0x79
 800193c:	d124      	bne.n	8001988 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800193e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	3303      	adds	r3, #3
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0114 	add.w	r1, r7, #20
 8001952:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001956:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	6800      	ldr	r0, [r0, #0]
 800195e:	f00a f898 	bl	800ba92 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001962:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800196a:	210a      	movs	r1, #10
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f000 f85b 	bl	8001a28 <BL_UART_wait_ACK>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 8001978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800197c:	2b79      	cmp	r3, #121	; 0x79
 800197e:	d101      	bne.n	8001984 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001980:	2379      	movs	r3, #121	; 0x79
 8001982:	e004      	b.n	800198e <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001984:	231f      	movs	r3, #31
 8001986:	e002      	b.n	800198e <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 8001988:	231f      	movs	r3, #31
 800198a:	e000      	b.n	800198e <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 800198c:	231f      	movs	r3, #31

	return UB_NACK;
}
 800198e:	4618      	mov	r0, r3
 8001990:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	1ffeffff 	.word	0x1ffeffff

0800199c <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 80019a8:	f64b 3344 	movw	r3, #47940	; 0xbb44
 80019ac:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <BL_UART_ExtendEraseMem_SP+0x88>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	823b      	strh	r3, [r7, #16]
 80019b8:	2300      	movs	r3, #0
 80019ba:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 80019c8:	7b3a      	ldrb	r2, [r7, #12]
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	4053      	eors	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	230a      	movs	r3, #10
 80019d8:	2202      	movs	r2, #2
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f00a f859 	bl	800ba92 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80019e0:	210a      	movs	r1, #10
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f820 	bl	8001a28 <BL_UART_wait_ACK>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b79      	cmp	r3, #121	; 0x79
 80019f0:	d113      	bne.n	8001a1a <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	230f      	movs	r3, #15
 80019f8:	2203      	movs	r2, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f00a f849 	bl	800ba92 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 20);
 8001a00:	2114      	movs	r1, #20
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f810 	bl	8001a28 <BL_UART_wait_ACK>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b79      	cmp	r3, #121	; 0x79
 8001a10:	d101      	bne.n	8001a16 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001a12:	2379      	movs	r3, #121	; 0x79
 8001a14:	e002      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 8001a16:	231f      	movs	r3, #31
 8001a18:	e000      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 8001a1a:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800fe90 	.word	0x0800fe90

08001a28 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a3c:	f005 f80c 	bl	8006a58 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a48:	e018      	b.n	8001a7c <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a4a:	f107 010f 	add.w	r1, r7, #15
 8001a4e:	2302      	movs	r3, #2
 8001a50:	2201      	movs	r2, #1
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f00a f8af 	bl	800bbb6 <HAL_UART_Receive>

		if(response == 0x79){
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b79      	cmp	r3, #121	; 0x79
 8001a5c:	d101      	bne.n	8001a62 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a5e:	2379      	movs	r3, #121	; 0x79
 8001a60:	e010      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b1f      	cmp	r3, #31
 8001a66:	d101      	bne.n	8001a6c <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	e00b      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001a6c:	f004 fff4 	bl	8006a58 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d801      	bhi.n	8001a7c <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001a78:	23ab      	movs	r3, #171	; 0xab
 8001a7a:	e003      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e3      	bne.n	8001a4a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001a82:	231f      	movs	r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b0a0      	sub	sp, #128	; 0x80
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f004 ff7a 	bl	800698c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 fad2 	bl	8002040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fcb4 	bl	8002408 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa0:	f000 fc92 	bl	80023c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aa4:	f000 fc3c 	bl	8002320 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aa8:	f000 fb32 	bl	8002110 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001aac:	f000 fc62 	bl	8002374 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001ab0:	f000 fb5c 	bl	800216c <MX_SPI3_Init>
  MX_TIM10_Init();
 8001ab4:	f000 fbe4 	bl	8002280 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 fc06 	bl	80022c8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001abc:	f000 fb8c 	bl	80021d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001ac0:	4896      	ldr	r0, [pc, #600]	; (8001d1c <main+0x290>)
 8001ac2:	f009 fb7b 	bl	800b1bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	4895      	ldr	r0, [pc, #596]	; (8001d20 <main+0x294>)
 8001aca:	f009 fcae 	bl	800b42a <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001ace:	4a95      	ldr	r2, [pc, #596]	; (8001d24 <main+0x298>)
 8001ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad4:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001ad6:	4b93      	ldr	r3, [pc, #588]	; (8001d24 <main+0x298>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4a92      	ldr	r2, [pc, #584]	; (8001d28 <main+0x29c>)
 8001ade:	8013      	strh	r3, [r2, #0]

  //// Hardware Check parameter assign
  hw_par.cur_all_lim_mA = 600; // 250 60
 8001ae0:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <main+0x2a0>)
 8001ae2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001ae6:	8013      	strh	r3, [r2, #0]
  hw_par.cur_mcu_tsh_mA = 150;
 8001ae8:	4a90      	ldr	r2, [pc, #576]	; (8001d2c <main+0x2a0>)
 8001aea:	2396      	movs	r3, #150	; 0x96
 8001aec:	80d3      	strh	r3, [r2, #6]
  hw_par.cur_brd_tsh_mA = 280;
 8001aee:	4a8f      	ldr	r2, [pc, #572]	; (8001d2c <main+0x2a0>)
 8001af0:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001af4:	8093      	strh	r3, [r2, #4]
  hw_par.cur_all_min_mA = 1;
 8001af6:	4a8d      	ldr	r2, [pc, #564]	; (8001d2c <main+0x2a0>)
 8001af8:	2301      	movs	r3, #1
 8001afa:	8053      	strh	r3, [r2, #2]
  hw_par.mct_tsh_c  	= 60;
 8001afc:	4a8b      	ldr	r2, [pc, #556]	; (8001d2c <main+0x2a0>)
 8001afe:	233c      	movs	r3, #60	; 0x3c
 8001b00:	8113      	strh	r3, [r2, #8]
  hw_par.vol_5V_tsh_V   = 4.3;
 8001b02:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <main+0x2a0>)
 8001b04:	4b8a      	ldr	r3, [pc, #552]	; (8001d30 <main+0x2a4>)
 8001b06:	6113      	str	r3, [r2, #16]
  hw_par.vol_3VSTlnk_tsh_V = 2.8;
 8001b08:	4a88      	ldr	r2, [pc, #544]	; (8001d2c <main+0x2a0>)
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <main+0x2a8>)
 8001b0c:	60d3      	str	r3, [r2, #12]
  hw_par.vol_3V3_tsh_mV = 2900;
 8001b0e:	4a87      	ldr	r2, [pc, #540]	; (8001d2c <main+0x2a0>)
 8001b10:	f640 3354 	movw	r3, #2900	; 0xb54
 8001b14:	8293      	strh	r3, [r2, #20]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001b16:	4a88      	ldr	r2, [pc, #544]	; (8001d38 <main+0x2ac>)
 8001b18:	2301      	movs	r3, #1
 8001b1a:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001b1c:	4a86      	ldr	r2, [pc, #536]	; (8001d38 <main+0x2ac>)
 8001b1e:	23fa      	movs	r3, #250	; 0xfa
 8001b20:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001b22:	4a85      	ldr	r2, [pc, #532]	; (8001d38 <main+0x2ac>)
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	8093      	strh	r3, [r2, #4]
  buzzr.timestamp = 0;
 8001b28:	4a83      	ldr	r2, [pc, #524]	; (8001d38 <main+0x2ac>)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	6093      	str	r3, [r2, #8]

  stboxp.flag_start = 0;
 8001b2e:	4a83      	ldr	r2, [pc, #524]	; (8001d3c <main+0x2b0>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	7013      	strb	r3, [r2, #0]
  stboxp.choice_set = bpoxy_lobby;
 8001b34:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <main+0x2b0>)
 8001b36:	2301      	movs	r3, #1
 8001b38:	7053      	strb	r3, [r2, #1]
  stboxp.ch_is = 0;
 8001b3a:	4a80      	ldr	r2, [pc, #512]	; (8001d3c <main+0x2b0>)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	7093      	strb	r3, [r2, #2]

  gScr.counter_overcurrent = 0;
 8001b40:	4a7f      	ldr	r2, [pc, #508]	; (8001d40 <main+0x2b4>)
 8001b42:	2300      	movs	r3, #0
 8001b44:	7053      	strb	r3, [r2, #1]
  gScr.fullflag = 0;
 8001b46:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <main+0x2b4>)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	7013      	strb	r3, [r2, #0]

  k_flag.cnt = 0; k_flag.dn = 0; k_flag.up = 0;
 8001b4c:	4a7d      	ldr	r2, [pc, #500]	; (8001d44 <main+0x2b8>)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	7093      	strb	r3, [r2, #2]
 8001b52:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <main+0x2b8>)
 8001b54:	2300      	movs	r3, #0
 8001b56:	7053      	strb	r3, [r2, #1]
 8001b58:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <main+0x2b8>)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	7013      	strb	r3, [r2, #0]

  timestamp.bzbtn = 0;
 8001b5e:	497a      	ldr	r1, [pc, #488]	; (8001d48 <main+0x2bc>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9c1 2304 	strd	r2, r3, [r1, #16]
  timestamp.one = 0;
 8001b6c:	4976      	ldr	r1, [pc, #472]	; (8001d48 <main+0x2bc>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
  timestamp.prt_mch = 0;
 8001b7a:	4973      	ldr	r1, [pc, #460]	; (8001d48 <main+0x2bc>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9c1 2306 	strd	r2, r3, [r1, #24]
  timestamp.sensors = 0;
 8001b88:	496f      	ldr	r1, [pc, #444]	; (8001d48 <main+0x2bc>)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9c1 2302 	strd	r2, r3, [r1, #8]

  //// make sure
  HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	486c      	ldr	r0, [pc, #432]	; (8001d4c <main+0x2c0>)
 8001b9c:	f005 fe4a 	bl	8007834 <HAL_GPIO_WritePin>


  ili9341_Init();
 8001ba0:	f003 feaa 	bl	80058f8 <ili9341_Init>
  ili9341_DisplayOn();
 8001ba4:	f003 fe8c 	bl	80058c0 <ili9341_DisplayOn>
//  ili9341_FillRect(50, 20, 50, 20, cl_RED);
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	4869      	ldr	r0, [pc, #420]	; (8001d50 <main+0x2c4>)
 8001bac:	f7ff f9f8 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001bb0:	2188      	movs	r1, #136	; 0x88
 8001bb2:	4867      	ldr	r0, [pc, #412]	; (8001d50 <main+0x2c4>)
 8001bb4:	f7ff f9f4 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <main+0x2c8>)
 8001bba:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001bd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb01 	bl	80001e0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001be6:	230a      	movs	r3, #10
 8001be8:	485b      	ldr	r0, [pc, #364]	; (8001d58 <main+0x2cc>)
 8001bea:	f009 ff52 	bl	800ba92 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
   HAL_UART_Receive_DMA(&huart6, RxBufferMtCl, RxbufferSize_VRT);
 8001bee:	2209      	movs	r2, #9
 8001bf0:	495a      	ldr	r1, [pc, #360]	; (8001d5c <main+0x2d0>)
 8001bf2:	485b      	ldr	r0, [pc, #364]	; (8001d60 <main+0x2d4>)
 8001bf4:	f00a f881 	bl	800bcfa <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001bf8:	f000 fdb4 	bl	8002764 <Button_machine>
	  //Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  Use callback instead
	  //Tx_Rq_Verita_engine(&huart6, &VRB_CL);
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp.bzbtn){
 8001bfc:	f004 ff2c 	bl	8006a58 <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2200      	movs	r2, #0
 8001c04:	4698      	mov	r8, r3
 8001c06:	4691      	mov	r9, r2
 8001c08:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <main+0x2bc>)
 8001c0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c0e:	4590      	cmp	r8, r2
 8001c10:	eb79 0303 	sbcs.w	r3, r9, r3
 8001c14:	f0c0 80aa 	bcc.w	8001d6c <main+0x2e0>
		timestamp.bzbtn = HAL_GetTick() + 20;
 8001c18:	f004 ff1e 	bl	8006a58 <HAL_GetTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	3314      	adds	r3, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c26:	4b48      	ldr	r3, [pc, #288]	; (8001d48 <main+0x2bc>)
 8001c28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001c2c:	e9c3 1204 	strd	r1, r2, [r3, #16]

		knob_rotter();
 8001c30:	f000 fe0e 	bl	8002850 <knob_rotter>
		//running_box();
		//if(stboxp.choice_set){

		switch (boxpoint_runner){
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <main+0x2d8>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d045      	beq.n	8001cc8 <main+0x23c>

		default:
		case a_wait:

			if(k_flag.up){
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <main+0x2b8>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00b      	beq.n	8001c5c <main+0x1d0>

				stboxp.ch_is++;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <main+0x2b0>)
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4a3b      	ldr	r2, [pc, #236]	; (8001d3c <main+0x2b0>)
 8001c4e:	7093      	strb	r3, [r2, #2]

				k_flag.up = 0;
 8001c50:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <main+0x2b8>)
 8001c52:	2300      	movs	r3, #0
 8001c54:	7013      	strb	r3, [r2, #0]
				boxpoint_runner = a_change;}
 8001c56:	4a43      	ldr	r2, [pc, #268]	; (8001d64 <main+0x2d8>)
 8001c58:	2301      	movs	r3, #1
 8001c5a:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <main+0x2b8>)
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01d      	beq.n	8001ca0 <main+0x214>
				//stboxp.ch_is--;
				//stboxp.ch_is = (stboxp.ch_is < 0) ? bposxy[stboxp.choice_set].n_s - 1 : stboxp.ch_is;
				//if(stboxp.ch_is  < 0){
				//	stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}

				if(stboxp.ch_is == 0){
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <main+0x2b0>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <main+0x1fc>
						stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <main+0x2b0>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <main+0x2dc>)
 8001c74:	232a      	movs	r3, #42	; 0x2a
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <main+0x2b0>)
 8001c84:	7093      	strb	r3, [r2, #2]
 8001c86:	e005      	b.n	8001c94 <main+0x208>
				else{stboxp.ch_is--;}
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <main+0x2b0>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4a2a      	ldr	r2, [pc, #168]	; (8001d3c <main+0x2b0>)
 8001c92:	7093      	strb	r3, [r2, #2]

				 k_flag.dn = 0;
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <main+0x2b8>)
 8001c96:	2300      	movs	r3, #0
 8001c98:	7053      	strb	r3, [r2, #1]
				 boxpoint_runner = a_change;}
 8001c9a:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <main+0x2d8>)
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	7013      	strb	r3, [r2, #0]

			stboxp.ch_is %= bposxy[stboxp.choice_set].n_s; // don't be more than spec of Grandstate sub
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <main+0x2b0>)
 8001ca2:	7898      	ldrb	r0, [r3, #2]
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <main+0x2b0>)
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <main+0x2dc>)
 8001cac:	232a      	movs	r3, #42	; 0x2a
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	fbb0 f3f2 	udiv	r3, r0, r2
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	1ac3      	subs	r3, r0, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <main+0x2b0>)
 8001cc4:	7093      	strb	r3, [r2, #2]

			break;
 8001cc6:	e052      	b.n	8001d6e <main+0x2e2>

		case a_change:

			box_pointer(bposxy[stboxp.choice_set].x[stboxp.ch_is], bposxy[stboxp.choice_set].y[stboxp.ch_is]);
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <main+0x2b0>)
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <main+0x2b0>)
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4924      	ldr	r1, [pc, #144]	; (8001d68 <main+0x2dc>)
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	0052      	lsls	r2, r2, #1
 8001cda:	4402      	add	r2, r0
 8001cdc:	00d3      	lsls	r3, r2, #3
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	4423      	add	r3, r4
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	440b      	add	r3, r1
 8001ce6:	885d      	ldrh	r5, [r3, #2]
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <main+0x2b0>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <main+0x2b0>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <main+0x2dc>)
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	0052      	lsls	r2, r2, #1
 8001cfa:	440a      	add	r2, r1
 8001cfc:	00d3      	lsls	r3, r2, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	4423      	add	r3, r4
 8001d02:	3308      	adds	r3, #8
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4403      	add	r3, r0
 8001d08:	88db      	ldrh	r3, [r3, #6]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f000 fc89 	bl	8002624 <box_pointer>
			boxpoint_runner = a_wait;
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <main+0x2d8>)
 8001d14:	2300      	movs	r3, #0
 8001d16:	7013      	strb	r3, [r2, #0]
			break;
 8001d18:	e029      	b.n	8001d6e <main+0x2e2>
 8001d1a:	bf00      	nop
 8001d1c:	20000544 	.word	0x20000544
 8001d20:	200004fc 	.word	0x200004fc
 8001d24:	40000400 	.word	0x40000400
 8001d28:	200008b4 	.word	0x200008b4
 8001d2c:	20000828 	.word	0x20000828
 8001d30:	4089999a 	.word	0x4089999a
 8001d34:	40333333 	.word	0x40333333
 8001d38:	200008a0 	.word	0x200008a0
 8001d3c:	200008d4 	.word	0x200008d4
 8001d40:	200008bc 	.word	0x200008bc
 8001d44:	200008b8 	.word	0x200008b8
 8001d48:	20000870 	.word	0x20000870
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	20000450 	.word	0x20000450
 8001d54:	0800fe94 	.word	0x0800fe94
 8001d58:	200005d0 	.word	0x200005d0
 8001d5c:	200007e8 	.word	0x200007e8
 8001d60:	20000614 	.word	0x20000614
 8001d64:	200008d0 	.word	0x200008d0
 8001d68:	2000017c 	.word	0x2000017c

			}
		//}


	  }// timestamp_dis
 8001d6c:	bf00      	nop


	  if (HAL_GetTick() >= timestamp.one){
 8001d6e:	f004 fe73 	bl	8006a58 <HAL_GetTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2200      	movs	r2, #0
 8001d76:	469a      	mov	sl, r3
 8001d78:	4693      	mov	fp, r2
 8001d7a:	4ba6      	ldr	r3, [pc, #664]	; (8002014 <main+0x588>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	4592      	cmp	sl, r2
 8001d82:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001d86:	d313      	bcc.n	8001db0 <main+0x324>
		  timestamp.one += 500;
 8001d88:	4ba2      	ldr	r3, [pc, #648]	; (8002014 <main+0x588>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001d92:	6339      	str	r1, [r7, #48]	; 0x30
 8001d94:	f143 0300 	adc.w	r3, r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9a:	4b9e      	ldr	r3, [pc, #632]	; (8002014 <main+0x588>)
 8001d9c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001da0:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001da4:	2120      	movs	r1, #32
 8001da6:	489c      	ldr	r0, [pc, #624]	; (8002018 <main+0x58c>)
 8001da8:	f005 fd5d 	bl	8007866 <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001dac:	f000 ffba 	bl	8002d24 <GrandState_Verita>

		  } // timestamp_one


	  if(GrandState == hw_chk || GrandState == monitor || GrandState == gpio_chk){
 8001db0:	4b9a      	ldr	r3, [pc, #616]	; (800201c <main+0x590>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d008      	beq.n	8001dca <main+0x33e>
 8001db8:	4b98      	ldr	r3, [pc, #608]	; (800201c <main+0x590>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d004      	beq.n	8001dca <main+0x33e>
 8001dc0:	4b96      	ldr	r3, [pc, #600]	; (800201c <main+0x590>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b0e      	cmp	r3, #14
 8001dc6:	f040 80c0 	bne.w	8001f4a <main+0x4be>
		  if(HAL_GetTick() >= timestamp.sensors){
 8001dca:	f004 fe45 	bl	8006a58 <HAL_GetTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dd6:	4b8f      	ldr	r3, [pc, #572]	; (8002014 <main+0x588>)
 8001dd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ddc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001de0:	4621      	mov	r1, r4
 8001de2:	4291      	cmp	r1, r2
 8001de4:	4629      	mov	r1, r5
 8001de6:	eb71 0303 	sbcs.w	r3, r1, r3
 8001dea:	f0c0 80ae 	bcc.w	8001f4a <main+0x4be>
			  timestamp.sensors = HAL_GetTick() + 150; // in case this func is temporary terminate, can continue
 8001dee:	f004 fe33 	bl	8006a58 <HAL_GetTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	3396      	adds	r3, #150	; 0x96
 8001df6:	2200      	movs	r2, #0
 8001df8:	623b      	str	r3, [r7, #32]
 8001dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8001dfc:	4b85      	ldr	r3, [pc, #532]	; (8002014 <main+0x588>)
 8001dfe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e02:	e9c3 1202 	strd	r1, r2, [r3, #8]
			  //// separate the request
//			  if(GrandState == monitor || GrandState == gpio_chk){
//				  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
//			  }

			  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	4885      	ldr	r0, [pc, #532]	; (8002020 <main+0x594>)
 8001e0a:	f7ff f979 	bl	8001100 <INA219Read_BusV>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a84      	ldr	r2, [pc, #528]	; (8002024 <main+0x598>)
 8001e12:	8213      	strh	r3, [r2, #16]
			  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	4882      	ldr	r0, [pc, #520]	; (8002020 <main+0x594>)
 8001e18:	f7ff f99a 	bl	8001150 <INA219Read_Current>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4a80      	ldr	r2, [pc, #512]	; (8002024 <main+0x598>)
 8001e22:	8113      	strh	r3, [r2, #8]
			  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	487e      	ldr	r0, [pc, #504]	; (8002020 <main+0x594>)
 8001e28:	f7ff f9f2 	bl	8001210 <INA219Read_Power>
 8001e2c:	eef0 7a40 	vmov.f32	s15, s0
 8001e30:	4b7c      	ldr	r3, [pc, #496]	; (8002024 <main+0x598>)
 8001e32:	edc3 7a03 	vstr	s15, [r3, #12]
			  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	4879      	ldr	r0, [pc, #484]	; (8002020 <main+0x594>)
 8001e3a:	f7ff f9ad 	bl	8001198 <INA219Read_ShuntV>
 8001e3e:	eef0 7a40 	vmov.f32	s15, s0
 8001e42:	4b78      	ldr	r3, [pc, #480]	; (8002024 <main+0x598>)
 8001e44:	edc3 7a01 	vstr	s15, [r3, #4]

			  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001e48:	2188      	movs	r1, #136	; 0x88
 8001e4a:	4875      	ldr	r0, [pc, #468]	; (8002020 <main+0x594>)
 8001e4c:	f7ff f958 	bl	8001100 <INA219Read_BusV>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a75      	ldr	r2, [pc, #468]	; (8002028 <main+0x59c>)
 8001e54:	8213      	strh	r3, [r2, #16]
			  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001e56:	2188      	movs	r1, #136	; 0x88
 8001e58:	4871      	ldr	r0, [pc, #452]	; (8002020 <main+0x594>)
 8001e5a:	f7ff f979 	bl	8001150 <INA219Read_Current>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <main+0x59c>)
 8001e64:	8113      	strh	r3, [r2, #8]
			  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001e66:	2188      	movs	r1, #136	; 0x88
 8001e68:	486d      	ldr	r0, [pc, #436]	; (8002020 <main+0x594>)
 8001e6a:	f7ff f9d1 	bl	8001210 <INA219Read_Power>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <main+0x59c>)
 8001e74:	edc3 7a03 	vstr	s15, [r3, #12]
			  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001e78:	2188      	movs	r1, #136	; 0x88
 8001e7a:	4869      	ldr	r0, [pc, #420]	; (8002020 <main+0x594>)
 8001e7c:	f7ff f98c 	bl	8001198 <INA219Read_ShuntV>
 8001e80:	eef0 7a40 	vmov.f32	s15, s0
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <main+0x59c>)
 8001e86:	edc3 7a01 	vstr	s15, [r3, #4]

			  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001e8a:	2118      	movs	r1, #24
 8001e8c:	4867      	ldr	r0, [pc, #412]	; (800202c <main+0x5a0>)
 8001e8e:	f7ff fa09 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a66      	ldr	r2, [pc, #408]	; (8002030 <main+0x5a4>)
 8001e96:	8013      	strh	r3, [r2, #0]
			  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001e98:	2119      	movs	r1, #25
 8001e9a:	4864      	ldr	r0, [pc, #400]	; (800202c <main+0x5a0>)
 8001e9c:	f7ff fa02 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a63      	ldr	r2, [pc, #396]	; (8002030 <main+0x5a4>)
 8001ea4:	8053      	strh	r3, [r2, #2]
			  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001ea6:	211a      	movs	r1, #26
 8001ea8:	4860      	ldr	r0, [pc, #384]	; (800202c <main+0x5a0>)
 8001eaa:	f7ff f9fb 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a5f      	ldr	r2, [pc, #380]	; (8002030 <main+0x5a4>)
 8001eb2:	8093      	strh	r3, [r2, #4]
			  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001eb4:	211b      	movs	r1, #27
 8001eb6:	485d      	ldr	r0, [pc, #372]	; (800202c <main+0x5a0>)
 8001eb8:	f7ff f9f4 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <main+0x5a4>)
 8001ec0:	80d3      	strh	r3, [r2, #6]
			  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001ec2:	211c      	movs	r1, #28
 8001ec4:	4859      	ldr	r0, [pc, #356]	; (800202c <main+0x5a0>)
 8001ec6:	f7ff f9ed 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <main+0x5a4>)
 8001ece:	8113      	strh	r3, [r2, #8]
			  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001ed0:	211d      	movs	r1, #29
 8001ed2:	4856      	ldr	r0, [pc, #344]	; (800202c <main+0x5a0>)
 8001ed4:	f7ff f9e6 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a55      	ldr	r2, [pc, #340]	; (8002030 <main+0x5a4>)
 8001edc:	8153      	strh	r3, [r2, #10]
			  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001ede:	211e      	movs	r1, #30
 8001ee0:	4852      	ldr	r0, [pc, #328]	; (800202c <main+0x5a0>)
 8001ee2:	f7ff f9df 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <main+0x5a4>)
 8001eea:	8193      	strh	r3, [r2, #12]
			  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001eec:	211f      	movs	r1, #31
 8001eee:	484f      	ldr	r0, [pc, #316]	; (800202c <main+0x5a0>)
 8001ef0:	f7ff f9d8 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <main+0x5a4>)
 8001ef8:	81d3      	strh	r3, [r2, #14]

			  for(register int i = 0;i <= 7;i++){
 8001efa:	2400      	movs	r4, #0
 8001efc:	e00e      	b.n	8001f1c <main+0x490>
				  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001efe:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <main+0x5a4>)
 8001f00:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fa03 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001f0a:	eef0 7a40 	vmov.f32	s15, s0
 8001f0e:	4a48      	ldr	r2, [pc, #288]	; (8002030 <main+0x5a4>)
 8001f10:	1d23      	adds	r3, r4, #4
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	edc3 7a00 	vstr	s15, [r3]
			  for(register int i = 0;i <= 7;i++){
 8001f1a:	3401      	adds	r4, #1
 8001f1c:	2c07      	cmp	r4, #7
 8001f1e:	ddee      	ble.n	8001efe <main+0x472>
			  }

			  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001f20:	4b44      	ldr	r3, [pc, #272]	; (8002034 <main+0x5a8>)
 8001f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 f80e 	bl	8004f48 <ADCTVolta>
 8001f2c:	eef0 7a40 	vmov.f32	s15, s0
 8001f30:	eeb0 0a67 	vmov.f32	s0, s15
 8001f34:	f003 f838 	bl	8004fa8 <TempEquat>
 8001f38:	eef0 7a40 	vmov.f32	s15, s0
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <main+0x5ac>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]

			  Protection_machine();
 8001f42:	f000 fcd7 	bl	80028f4 <Protection_machine>
			  manual_relay();
 8001f46:	f000 fd27 	bl	8002998 <manual_relay>
		  } //// sensor
	  } //// sensor state cover

	  //// Protection machine speeder
	  if(GrandState == hw_chk || GrandState == monitor){
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <main+0x590>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d003      	beq.n	8001f5a <main+0x4ce>
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <main+0x590>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d12e      	bne.n	8001fb8 <main+0x52c>
		  if(HAL_GetTick() >= timestamp.prt_mch){
 8001f5a:	f004 fd7d 	bl	8006a58 <HAL_GetTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2200      	movs	r2, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	61fa      	str	r2, [r7, #28]
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <main+0x588>)
 8001f68:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f6c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f70:	4621      	mov	r1, r4
 8001f72:	4291      	cmp	r1, r2
 8001f74:	4629      	mov	r1, r5
 8001f76:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f7a:	d31d      	bcc.n	8001fb8 <main+0x52c>
		  	 timestamp.prt_mch = HAL_GetTick() + 50;
 8001f7c:	f004 fd6c 	bl	8006a58 <HAL_GetTick>
 8001f80:	4603      	mov	r3, r0
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	2200      	movs	r2, #0
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	617a      	str	r2, [r7, #20]
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <main+0x588>)
 8001f8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f90:	e9c3 1206 	strd	r1, r2, [r3, #24]

			 inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	4822      	ldr	r0, [pc, #136]	; (8002020 <main+0x594>)
 8001f98:	f7ff f8da 	bl	8001150 <INA219Read_Current>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	4a20      	ldr	r2, [pc, #128]	; (8002024 <main+0x598>)
 8001fa2:	8113      	strh	r3, [r2, #8]
			 inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001fa4:	2188      	movs	r1, #136	; 0x88
 8001fa6:	481e      	ldr	r0, [pc, #120]	; (8002020 <main+0x594>)
 8001fa8:	f7ff f8d2 	bl	8001150 <INA219Read_Current>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <main+0x59c>)
 8001fb2:	8113      	strh	r3, [r2, #8]

		  	 Protection_machine();
 8001fb4:	f000 fc9e 	bl	80028f4 <Protection_machine>
		  }
	  } // ptc mach

	  /// MCU request
	  if(GrandState == gpio_chk || GrandState == monitor){
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <main+0x590>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b0e      	cmp	r3, #14
 8001fbe:	d004      	beq.n	8001fca <main+0x53e>
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <main+0x590>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	f47f ae17 	bne.w	8001bf8 <main+0x16c>
	  		 if(HAL_GetTick() >= timestamp.mcu_rq){
 8001fca:	f004 fd45 	bl	8006a58 <HAL_GetTick>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	60fa      	str	r2, [r7, #12]
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <main+0x588>)
 8001fd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001fdc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	4291      	cmp	r1, r2
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	eb71 0303 	sbcs.w	r3, r1, r3
 8001fea:	f4ff ae05 	bcc.w	8001bf8 <main+0x16c>
	  		  	timestamp.mcu_rq = HAL_GetTick() + 150;
 8001fee:	f004 fd33 	bl	8006a58 <HAL_GetTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	3396      	adds	r3, #150	; 0x96
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <main+0x588>)
 8001ffe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002002:	e9c3 1208 	strd	r1, r2, [r3, #32]
	  		  	// request first > pending > convert
	  		  	Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);
 8002006:	2211      	movs	r2, #17
 8002008:	21a0      	movs	r1, #160	; 0xa0
 800200a:	480c      	ldr	r0, [pc, #48]	; (800203c <main+0x5b0>)
 800200c:	f7ff fb10 	bl	8001630 <Tx_UART_Verita_Command>
	  Button_machine();
 8002010:	e5f2      	b.n	8001bf8 <main+0x16c>
 8002012:	bf00      	nop
 8002014:	20000870 	.word	0x20000870
 8002018:	40020000 	.word	0x40020000
 800201c:	20000006 	.word	0x20000006
 8002020:	20000450 	.word	0x20000450
 8002024:	200007f8 	.word	0x200007f8
 8002028:	20000810 	.word	0x20000810
 800202c:	200004a4 	.word	0x200004a4
 8002030:	20000840 	.word	0x20000840
 8002034:	20000784 	.word	0x20000784
 8002038:	200007f4 	.word	0x200007f4
 800203c:	20000614 	.word	0x20000614

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b094      	sub	sp, #80	; 0x50
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	2230      	movs	r2, #48	; 0x30
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f00a ffa0 	bl	800cf94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <SystemClock_Config+0xc8>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <SystemClock_Config+0xc8>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002072:	6413      	str	r3, [r2, #64]	; 0x40
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <SystemClock_Config+0xc8>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <SystemClock_Config+0xcc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <SystemClock_Config+0xcc>)
 800208a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <SystemClock_Config+0xcc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800209c:	2302      	movs	r3, #2
 800209e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a0:	2301      	movs	r3, #1
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020a4:	2310      	movs	r3, #16
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a8:	2302      	movs	r3, #2
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020b0:	2308      	movs	r3, #8
 80020b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80020b4:	2364      	movs	r3, #100	; 0x64
 80020b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020b8:	2302      	movs	r3, #2
 80020ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020bc:	2304      	movs	r3, #4
 80020be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	4618      	mov	r0, r3
 80020c6:	f008 f89b 	bl	800a200 <HAL_RCC_OscConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020d0:	f003 f864 	bl	800519c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d4:	230f      	movs	r3, #15
 80020d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d8:	2302      	movs	r3, #2
 80020da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2103      	movs	r1, #3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f008 fafd 	bl	800a6f0 <HAL_RCC_ClockConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020fc:	f003 f84e 	bl	800519c <Error_Handler>
  }
}
 8002100:	bf00      	nop
 8002102:	3750      	adds	r7, #80	; 0x50
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000

08002110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <MX_I2C1_Init+0x50>)
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <MX_I2C1_Init+0x54>)
 8002118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_I2C1_Init+0x50>)
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_I2C1_Init+0x58>)
 800211e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_I2C1_Init+0x50>)
 800212e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <MX_I2C1_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_I2C1_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <MX_I2C1_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_I2C1_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800214c:	4804      	ldr	r0, [pc, #16]	; (8002160 <MX_I2C1_Init+0x50>)
 800214e:	f005 fbbd 	bl	80078cc <HAL_I2C_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002158:	f003 f820 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000450 	.word	0x20000450
 8002164:	40005400 	.word	0x40005400
 8002168:	00061a80 	.word	0x00061a80

0800216c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_SPI3_Init+0x64>)
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <MX_SPI3_Init+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_SPI3_Init+0x64>)
 8002178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800217c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_SPI3_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_SPI3_Init+0x64>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_SPI3_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_SPI3_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_SPI3_Init+0x64>)
 8002198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_SPI3_Init+0x64>)
 80021a0:	2220      	movs	r2, #32
 80021a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <MX_SPI3_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_SPI3_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <MX_SPI3_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_SPI3_Init+0x64>)
 80021b8:	220a      	movs	r2, #10
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_SPI3_Init+0x64>)
 80021be:	f008 fcb7 	bl	800ab30 <HAL_SPI_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80021c8:	f002 ffe8 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200004a4 	.word	0x200004a4
 80021d4:	40003c00 	.word	0x40003c00

080021d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00a fed4 	bl	800cf94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <MX_TIM3_Init+0xa0>)
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <MX_TIM3_Init+0xa4>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <MX_TIM3_Init+0xa0>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <MX_TIM3_Init+0xa0>)
 8002202:	2210      	movs	r2, #16
 8002204:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <MX_TIM3_Init+0xa0>)
 8002208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_TIM3_Init+0xa0>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <MX_TIM3_Init+0xa0>)
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800221a:	2303      	movs	r3, #3
 800221c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800221e:	2302      	movs	r3, #2
 8002220:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002222:	2301      	movs	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8002226:	2304      	movs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 800222a:	2308      	movs	r3, #8
 800222c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800222e:	2302      	movs	r3, #2
 8002230:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002232:	2301      	movs	r3, #1
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8002236:	2304      	movs	r3, #4
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800223a:	2308      	movs	r3, #8
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <MX_TIM3_Init+0xa0>)
 8002246:	f009 f84a 	bl	800b2de <HAL_TIM_Encoder_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002250:	f002 ffa4 	bl	800519c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_TIM3_Init+0xa0>)
 8002262:	f009 fb47 	bl	800b8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800226c:	f002 ff96 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	3730      	adds	r7, #48	; 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200004fc 	.word	0x200004fc
 800227c:	40000400 	.word	0x40000400

08002280 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_TIM10_Init+0x40>)
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <MX_TIM10_Init+0x44>)
 8002288:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MX_TIM10_Init+0x40>)
 800228c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002290:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <MX_TIM10_Init+0x40>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_TIM10_Init+0x40>)
 800229a:	f241 3287 	movw	r2, #4999	; 0x1387
 800229e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <MX_TIM10_Init+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_TIM10_Init+0x40>)
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_TIM10_Init+0x40>)
 80022ae:	f008 ff35 	bl	800b11c <HAL_TIM_Base_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80022b8:	f002 ff70 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000544 	.word	0x20000544
 80022c4:	40014400 	.word	0x40014400

080022c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <MX_USART1_UART_Init+0x54>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_USART1_UART_Init+0x50>)
 8002304:	f009 fb78 	bl	800b9f8 <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800230e:	f002 ff45 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000058c 	.word	0x2000058c
 800231c:	40011000 	.word	0x40011000

08002320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_USART2_UART_Init+0x50>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002358:	f009 fb4e 	bl	800b9f8 <HAL_UART_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002362:	f002 ff1b 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200005d0 	.word	0x200005d0
 8002370:	40004400 	.word	0x40004400

08002374 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <MX_USART6_UART_Init+0x50>)
 800237c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 8002380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002384:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_USART6_UART_Init+0x4c>)
 80023ac:	f009 fb24 	bl	800b9f8 <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023b6:	f002 fef1 	bl	800519c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000614 	.word	0x20000614
 80023c4:	40011400 	.word	0x40011400

080023c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_DMA_Init+0x3c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <MX_DMA_Init+0x3c>)
 80023d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_DMA_Init+0x3c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2039      	movs	r0, #57	; 0x39
 80023f0:	f004 fc3d 	bl	8006c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80023f4:	2039      	movs	r0, #57	; 0x39
 80023f6:	f004 fc56 	bl	8006ca6 <HAL_NVIC_EnableIRQ>

}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <MX_GPIO_Init+0x208>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <MX_GPIO_Init+0x208>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b78      	ldr	r3, [pc, #480]	; (8002610 <MX_GPIO_Init+0x208>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b74      	ldr	r3, [pc, #464]	; (8002610 <MX_GPIO_Init+0x208>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a73      	ldr	r2, [pc, #460]	; (8002610 <MX_GPIO_Init+0x208>)
 8002444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b71      	ldr	r3, [pc, #452]	; (8002610 <MX_GPIO_Init+0x208>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <MX_GPIO_Init+0x208>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <MX_GPIO_Init+0x208>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <MX_GPIO_Init+0x208>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b66      	ldr	r3, [pc, #408]	; (8002610 <MX_GPIO_Init+0x208>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a65      	ldr	r2, [pc, #404]	; (8002610 <MX_GPIO_Init+0x208>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <MX_GPIO_Init+0x208>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <MX_GPIO_Init+0x208>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a5e      	ldr	r2, [pc, #376]	; (8002610 <MX_GPIO_Init+0x208>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <MX_GPIO_Init+0x208>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 80024aa:	2200      	movs	r2, #0
 80024ac:	f240 314b 	movw	r1, #843	; 0x34b
 80024b0:	4858      	ldr	r0, [pc, #352]	; (8002614 <MX_GPIO_Init+0x20c>)
 80024b2:	f005 f9bf 	bl	8007834 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|RelayClient_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 7198 	mov.w	r1, #304	; 0x130
 80024bc:	4856      	ldr	r0, [pc, #344]	; (8002618 <MX_GPIO_Init+0x210>)
 80024be:	f005 f9b9 	bl	8007834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2101      	movs	r1, #1
 80024c6:	4855      	ldr	r0, [pc, #340]	; (800261c <MX_GPIO_Init+0x214>)
 80024c8:	f005 f9b4 	bl	8007834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2104      	movs	r1, #4
 80024d0:	4853      	ldr	r0, [pc, #332]	; (8002620 <MX_GPIO_Init+0x218>)
 80024d2:	f005 f9af 	bl	8007834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4849      	ldr	r0, [pc, #292]	; (8002614 <MX_GPIO_Init+0x20c>)
 80024ee:	f005 f805 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin
                           RelayClient_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin
 80024f2:	f240 3343 	movw	r3, #835	; 0x343
 80024f6:	617b      	str	r3, [r7, #20]
                          |RelayClient_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	4842      	ldr	r0, [pc, #264]	; (8002614 <MX_GPIO_Init+0x20c>)
 800250c:	f004 fff6 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8002510:	2304      	movs	r3, #4
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	483c      	ldr	r0, [pc, #240]	; (8002614 <MX_GPIO_Init+0x20c>)
 8002524:	f004 ffea 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8002528:	2308      	movs	r3, #8
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002534:	2302      	movs	r3, #2
 8002536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4835      	ldr	r0, [pc, #212]	; (8002614 <MX_GPIO_Init+0x20c>)
 8002540:	f004 ffdc 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8002544:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	482e      	ldr	r0, [pc, #184]	; (8002618 <MX_GPIO_Init+0x210>)
 800255e:	f004 ffcd 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8002562:	2301      	movs	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	2301      	movs	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800256e:	2301      	movs	r3, #1
 8002570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4828      	ldr	r0, [pc, #160]	; (800261c <MX_GPIO_Init+0x214>)
 800257a:	f004 ffbf 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 800257e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4822      	ldr	r0, [pc, #136]	; (800261c <MX_GPIO_Init+0x214>)
 8002594:	f004 ffb2 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800259c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4819      	ldr	r0, [pc, #100]	; (8002614 <MX_GPIO_Init+0x20c>)
 80025ae:	f004 ffa5 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80025b2:	2304      	movs	r3, #4
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4815      	ldr	r0, [pc, #84]	; (8002620 <MX_GPIO_Init+0x218>)
 80025ca:	f004 ff97 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	480e      	ldr	r0, [pc, #56]	; (800261c <MX_GPIO_Init+0x214>)
 80025e2:	f004 ff8b 	bl	80074fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2017      	movs	r0, #23
 80025ec:	f004 fb3f 	bl	8006c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025f0:	2017      	movs	r0, #23
 80025f2:	f004 fb58 	bl	8006ca6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2028      	movs	r0, #40	; 0x28
 80025fc:	f004 fb37 	bl	8006c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002600:	2028      	movs	r0, #40	; 0x28
 8002602:	f004 fb50 	bl	8006ca6 <HAL_NVIC_EnableIRQ>

}
 8002606:	bf00      	nop
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40020800 	.word	0x40020800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020c00 	.word	0x40020c00

08002624 <box_pointer>:
}
/**
  * @brief box_pointer
	write new box at the new position posx posy and erase the previous box
  */
void box_pointer(uint16_t posx, uint16_t posy){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af02      	add	r7, sp, #8
 800262a:	4603      	mov	r3, r0
 800262c:	460a      	mov	r2, r1
 800262e:	80fb      	strh	r3, [r7, #6]
 8002630:	4613      	mov	r3, r2
 8002632:	80bb      	strh	r3, [r7, #4]
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <box_pointer+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <box_pointer+0x5c>)
 800263e:	8818      	ldrh	r0, [r3, #0]
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <box_pointer+0x5c>)
 8002642:	8859      	ldrh	r1, [r3, #2]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	230f      	movs	r3, #15
 800264a:	220f      	movs	r2, #15
 800264c:	f003 fb82 	bl	8005d54 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002650:	88b9      	ldrh	r1, [r7, #4]
 8002652:	88f8      	ldrh	r0, [r7, #6]
 8002654:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	230f      	movs	r3, #15
 800265c:	220f      	movs	r2, #15
 800265e:	f003 fb79 	bl	8005d54 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <box_pointer+0x5c>)
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <box_pointer+0x5c>)
 800266a:	88bb      	ldrh	r3, [r7, #4]
 800266c:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <box_pointer+0x58>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200008cf 	.word	0x200008cf
 8002680:	200008d8 	.word	0x200008d8

08002684 <simple_scr>:
/**
  * @brief Simple_Scr
	4x Button manager, read button status and command to dtake action. 
	read IN directly from registers.
  */
void simple_scr(){
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %X %d",btn_read[1], btn_read[2], btn_read[3], btn_cnt);
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <simple_scr+0xb4>)
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	4619      	mov	r1, r3
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <simple_scr+0xb4>)
 8002692:	789b      	ldrb	r3, [r3, #2]
 8002694:	4618      	mov	r0, r3
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <simple_scr+0xb4>)
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	461a      	mov	r2, r3
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <simple_scr+0xb8>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	9200      	str	r2, [sp, #0]
 80026a4:	4603      	mov	r3, r0
 80026a6:	460a      	mov	r2, r1
 80026a8:	4925      	ldr	r1, [pc, #148]	; (8002740 <simple_scr+0xbc>)
 80026aa:	4826      	ldr	r0, [pc, #152]	; (8002744 <simple_scr+0xc0>)
 80026ac:	f00b f8e4 	bl	800d878 <siprintf>
	  ili9341_WriteString(220, 185, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <simple_scr+0xc4>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	9202      	str	r2, [sp, #8]
 80026b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	9200      	str	r2, [sp, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a20      	ldr	r2, [pc, #128]	; (8002744 <simple_scr+0xc0>)
 80026c4:	21b9      	movs	r1, #185	; 0xb9
 80026c6:	20dc      	movs	r0, #220	; 0xdc
 80026c8:	f003 fced 	bl	80060a6 <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], k_flag.cnt, k_flag.up); //flag_k_up
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <simple_scr+0xc8>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <simple_scr+0xcc>)
 80026d4:	789b      	ldrb	r3, [r3, #2]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <simple_scr+0xcc>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	460b      	mov	r3, r1
 80026e0:	491c      	ldr	r1, [pc, #112]	; (8002754 <simple_scr+0xd0>)
 80026e2:	4818      	ldr	r0, [pc, #96]	; (8002744 <simple_scr+0xc0>)
 80026e4:	f00b f8c8 	bl	800d878 <siprintf>
	  ili9341_WriteString(220, 200, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <simple_scr+0xc4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	9202      	str	r2, [sp, #8]
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	9201      	str	r2, [sp, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	9200      	str	r2, [sp, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <simple_scr+0xc0>)
 80026fc:	21c8      	movs	r1, #200	; 0xc8
 80026fe:	20dc      	movs	r0, #220	; 0xdc
 8002700:	f003 fcd1 	bl	80060a6 <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is); //state_box_choice_is
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <simple_scr+0xd4>)
 8002706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <simple_scr+0xd8>)
 800270a:	789b      	ldrb	r3, [r3, #2]
 800270c:	4914      	ldr	r1, [pc, #80]	; (8002760 <simple_scr+0xdc>)
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <simple_scr+0xc0>)
 8002710:	f00b f8b2 	bl	800d878 <siprintf>
	  ili9341_WriteString(250, 215, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <simple_scr+0xc4>)
 8002716:	2200      	movs	r2, #0
 8002718:	9202      	str	r2, [sp, #8]
 800271a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271e:	9201      	str	r2, [sp, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	9200      	str	r2, [sp, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <simple_scr+0xc0>)
 8002728:	21d7      	movs	r1, #215	; 0xd7
 800272a:	20fa      	movs	r0, #250	; 0xfa
 800272c:	f003 fcbb 	bl	80060a6 <ili9341_WriteString>

}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200008ac 	.word	0x200008ac
 800273c:	200008b0 	.word	0x200008b0
 8002740:	0800fed0 	.word	0x0800fed0
 8002744:	200006b8 	.word	0x200006b8
 8002748:	20000228 	.word	0x20000228
 800274c:	200008b4 	.word	0x200008b4
 8002750:	200008b8 	.word	0x200008b8
 8002754:	0800fee0 	.word	0x0800fee0
 8002758:	40000400 	.word	0x40000400
 800275c:	200008d4 	.word	0x200008d4
 8002760:	0800fef0 	.word	0x0800fef0

08002764 <Button_machine>:
/**
  * @brief Button_machine
	4x Button manager, read button status and command to dtake action. 
	read IN directly from registers.
  */
void Button_machine(){
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <Button_machine+0xc8>)
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	4b2f      	ldr	r3, [pc, #188]	; (800282c <Button_machine+0xc8>)
 800276e:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <Button_machine+0xcc>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	0b1b      	lsrs	r3, r3, #12
 8002776:	b2db      	uxtb	r3, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <Button_machine+0xc8>)
 8002784:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <Button_machine+0xc8>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d039      	beq.n	8002802 <Button_machine+0x9e>
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <Button_machine+0xc8>)
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d135      	bne.n	8002802 <Button_machine+0x9e>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <Button_machine+0xc8>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <Button_machine+0xd0>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <Button_machine+0xd0>)
 80027a6:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <Button_machine+0xc8>)
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <Button_machine+0xc8>)
 80027ae:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <Button_machine+0xc8>)
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <Button_machine+0xc8>)
 80027b6:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try


			if(btn_read[2] == 0b0001){ // SW1
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <Button_machine+0xc8>)
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d102      	bne.n	80027c6 <Button_machine+0x62>
				flag_manual_relay = 1;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <Button_machine+0xd4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
			}
			if(btn_read[2] == 0b1000){ // SW2
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <Button_machine+0xc8>)
 80027c8:	789b      	ldrb	r3, [r3, #2]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d106      	bne.n	80027dc <Button_machine+0x78>
				if(GrandState != s_bootloader){
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <Button_machine+0xd8>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b0a      	cmp	r3, #10
 80027d4:	d002      	beq.n	80027dc <Button_machine+0x78>
					GrandState = pre_lobby;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <Button_machine+0xd8>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
				}

			}
			if(btn_read[2] == 0b0100){ // SW3
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <Button_machine+0xc8>)
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d105      	bne.n	80027f0 <Button_machine+0x8c>
				k_flag.cnt++;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <Button_machine+0xdc>)
 80027e6:	789b      	ldrb	r3, [r3, #2]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <Button_machine+0xdc>)
 80027ee:	709a      	strb	r2, [r3, #2]
			}

			if(btn_read[2] == 0b0010){ // SW4
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <Button_machine+0xc8>)
 80027f2:	789b      	ldrb	r3, [r3, #2]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d104      	bne.n	8002802 <Button_machine+0x9e>
				//// buzzer dummy
				buzzr.flag = 1;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <Button_machine+0xe0>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
				buzzer_scream_cnt();
 80027fe:	f000 fa1b 	bl	8002c38 <buzzer_scream_cnt>
			}

		}

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <Button_machine+0xe4>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d905      	bls.n	8002816 <Button_machine+0xb2>
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <Button_machine+0xe4>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8002812:	4293      	cmp	r3, r2
 8002814:	d907      	bls.n	8002826 <Button_machine+0xc2>
			TIM3->CNT = 0x8000; // back to center
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <Button_machine+0xe8>)
 8002818:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <Button_machine+0xe4>)
 8002820:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002824:	801a      	strh	r2, [r3, #0]
		//			btn_k_cnt++;
		//		}

		//		knob_rotter();

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200008ac 	.word	0x200008ac
 8002830:	40020400 	.word	0x40020400
 8002834:	200008b0 	.word	0x200008b0
 8002838:	2000089c 	.word	0x2000089c
 800283c:	20000006 	.word	0x20000006
 8002840:	200008b8 	.word	0x200008b8
 8002844:	200008a0 	.word	0x200008a0
 8002848:	200008b4 	.word	0x200008b4
 800284c:	40000400 	.word	0x40000400

08002850 <knob_rotter>:

void knob_rotter(){
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <knob_rotter+0x8c>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b29a      	uxth	r2, r3
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <knob_rotter+0x90>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d919      	bls.n	8002896 <knob_rotter+0x46>
		//flag_k_up = 1;
		k_flag.up = 1;
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <knob_rotter+0x94>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <knob_rotter+0x8c>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <knob_rotter+0x90>)
 8002870:	801a      	strh	r2, [r3, #0]
		//// debug
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <knob_rotter+0x90>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	491b      	ldr	r1, [pc, #108]	; (80028e8 <knob_rotter+0x98>)
 800287a:	481c      	ldr	r0, [pc, #112]	; (80028ec <knob_rotter+0x9c>)
 800287c:	f00a fffc 	bl	800d878 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002880:	481a      	ldr	r0, [pc, #104]	; (80028ec <knob_rotter+0x9c>)
 8002882:	f7fd fcad 	bl	80001e0 <strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	b29a      	uxth	r2, r3
 800288a:	230a      	movs	r3, #10
 800288c:	4917      	ldr	r1, [pc, #92]	; (80028ec <knob_rotter+0x9c>)
 800288e:	4818      	ldr	r0, [pc, #96]	; (80028f0 <knob_rotter+0xa0>)
 8002890:	f009 f8ff 	bl	800ba92 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);

	}
	else{}

}
 8002894:	e01f      	b.n	80028d6 <knob_rotter+0x86>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <knob_rotter+0x8c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <knob_rotter+0x90>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d218      	bcs.n	80028d6 <knob_rotter+0x86>
		k_flag.dn = 1;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <knob_rotter+0x94>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <knob_rotter+0x8c>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <knob_rotter+0x90>)
 80028b2:	801a      	strh	r2, [r3, #0]
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <knob_rotter+0x90>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	490b      	ldr	r1, [pc, #44]	; (80028e8 <knob_rotter+0x98>)
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <knob_rotter+0x9c>)
 80028be:	f00a ffdb 	bl	800d878 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <knob_rotter+0x9c>)
 80028c4:	f7fd fc8c 	bl	80001e0 <strlen>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	230a      	movs	r3, #10
 80028ce:	4907      	ldr	r1, [pc, #28]	; (80028ec <knob_rotter+0x9c>)
 80028d0:	4807      	ldr	r0, [pc, #28]	; (80028f0 <knob_rotter+0xa0>)
 80028d2:	f009 f8de 	bl	800ba92 <HAL_UART_Transmit>
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40000400 	.word	0x40000400
 80028e0:	200008b4 	.word	0x200008b4
 80028e4:	200008b8 	.word	0x200008b8
 80028e8:	0800fef8 	.word	0x0800fef8
 80028ec:	2000071c 	.word	0x2000071c
 80028f0:	200005d0 	.word	0x200005d0

080028f4 <Protection_machine>:

/**
  * @brief Protection_machine
	Force Jump to state Danger IF found overcurrent consume from client board
  */
void Protection_machine(){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	//// overcurrent
	if (inata.CURRENT >= hw_par.cur_all_lim_mA || inatb.CURRENT >= hw_par.cur_all_lim_mA){
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <Protection_machine+0x88>)
 80028fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <Protection_machine+0x8c>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	da07      	bge.n	8002918 <Protection_machine+0x24>
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <Protection_machine+0x90>)
 800290a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800290e:	461a      	mov	r2, r3
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <Protection_machine+0x8c>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	db2a      	blt.n	800296e <Protection_machine+0x7a>
		gScr.counter_overcurrent++;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <Protection_machine+0x94>)
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	3301      	adds	r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <Protection_machine+0x94>)
 8002922:	705a      	strb	r2, [r3, #1]

		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <Protection_machine+0x94>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d924      	bls.n	8002976 <Protection_machine+0x82>
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <Protection_machine+0x98>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d020      	beq.n	8002976 <Protection_machine+0x82>
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <Protection_machine+0x98>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b10      	cmp	r3, #16
 800293a:	d01c      	beq.n	8002976 <Protection_machine+0x82>
			gScr.counter_overcurrent = 0;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <Protection_machine+0x94>)
 800293e:	2200      	movs	r2, #0
 8002940:	705a      	strb	r2, [r3, #1]
			gScr.fullflag = 0;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <Protection_machine+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]

			////Relay_cut
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800294e:	4810      	ldr	r0, [pc, #64]	; (8002990 <Protection_machine+0x9c>)
 8002950:	f004 ff70 	bl	8007834 <HAL_GPIO_WritePin>

			//// Buzzer scream
			buzzr.flag = 3;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <Protection_machine+0xa0>)
 8002956:	2203      	movs	r2, #3
 8002958:	701a      	strb	r2, [r3, #0]
			buzzr.priod_up = 1000;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <Protection_machine+0xa0>)
 800295c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002960:	805a      	strh	r2, [r3, #2]
			buzzer_scream_cnt();
 8002962:	f000 f969 	bl	8002c38 <buzzer_scream_cnt>
			//// interrupt, go to state Client error.
			GrandState = pre_danger;
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <Protection_machine+0x98>)
 8002968:	220f      	movs	r2, #15
 800296a:	701a      	strb	r2, [r3, #0]
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 800296c:	e003      	b.n	8002976 <Protection_machine+0x82>
		}
	}else{gScr.counter_overcurrent = 0;}
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <Protection_machine+0x94>)
 8002970:	2200      	movs	r2, #0
 8002972:	705a      	strb	r2, [r3, #1]

}
 8002974:	e000      	b.n	8002978 <Protection_machine+0x84>
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002976:	bf00      	nop
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200007f8 	.word	0x200007f8
 8002980:	20000828 	.word	0x20000828
 8002984:	20000810 	.word	0x20000810
 8002988:	200008bc 	.word	0x200008bc
 800298c:	20000006 	.word	0x20000006
 8002990:	40020800 	.word	0x40020800
 8002994:	200008a0 	.word	0x200008a0

08002998 <manual_relay>:

/**
  * @brief manual_relay
	toggle relay using button // state monitor only
  */
void manual_relay(){
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <manual_relay+0x28>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <manual_relay+0x24>

		if(GrandState == monitor){
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <manual_relay+0x2c>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d104      	bne.n	80029b6 <manual_relay+0x1e>
			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 80029ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <manual_relay+0x30>)
 80029b2:	f004 ff58 	bl	8007866 <HAL_GPIO_TogglePin>
		}
		flag_manual_relay = 0;
 80029b6:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <manual_relay+0x28>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
	}
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000089c 	.word	0x2000089c
 80029c4:	20000006 	.word	0x20000006
 80029c8:	40020800 	.word	0x40020800

080029cc <Compare_pin_32>:

void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 80029ea:	2400      	movs	r4, #0
 80029ec:	e081      	b.n	8002af2 <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 80029ee:	4623      	mov	r3, r4
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	2b13      	cmp	r3, #19
 80029fa:	d87e      	bhi.n	8002afa <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 80029fc:	8bbb      	ldrh	r3, [r7, #28]
 80029fe:	4622      	mov	r2, r4
 8002a00:	0052      	lsls	r2, r2, #1
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	440a      	add	r2, r1
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	4113      	asrs	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 8002a12:	8b7b      	ldrh	r3, [r7, #26]
 8002a14:	4622      	mov	r2, r4
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	8812      	ldrh	r2, [r2, #0]
 8002a1e:	4113      	asrs	r3, r2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 8002a28:	7e7a      	ldrb	r2, [r7, #25]
 8002a2a:	7e3b      	ldrb	r3, [r7, #24]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d15f      	bne.n	8002af0 <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	3301      	adds	r3, #1
 8002a34:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d00f      	beq.n	8002a5c <Compare_pin_32+0x90>
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d01b      	beq.n	8002a78 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 8002a40:	4623      	mov	r3, r4
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	4413      	add	r3, r2
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	4934      	ldr	r1, [pc, #208]	; (8002b24 <Compare_pin_32+0x158>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00a ff0f 	bl	800d878 <siprintf>
				 break;
 8002a5a:	e01b      	b.n	8002a94 <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	492e      	ldr	r1, [pc, #184]	; (8002b28 <Compare_pin_32+0x15c>)
 8002a70:	4618      	mov	r0, r3
 8002a72:	f00a ff01 	bl	800d878 <siprintf>
			 	 break;
 8002a76:	e00d      	b.n	8002a94 <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8002a78:	4623      	mov	r3, r4
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	4413      	add	r3, r2
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	4928      	ldr	r1, [pc, #160]	; (8002b2c <Compare_pin_32+0x160>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00a fef3 	bl	800d878 <siprintf>
			 	 break;
 8002a92:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6838      	ldr	r0, [r7, #0]
 8002a9e:	f00a ff0b 	bl	800d8b8 <strncat>

			 //// add High, Low
			 if(iaa == 1){
 8002aa2:	7e7b      	ldrb	r3, [r7, #25]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d106      	bne.n	8002ab6 <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4920      	ldr	r1, [pc, #128]	; (8002b30 <Compare_pin_32+0x164>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00a fee2 	bl	800d878 <siprintf>
 8002ab4:	e008      	b.n	8002ac8 <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 8002ab6:	7e7b      	ldrb	r3, [r7, #25]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	491c      	ldr	r1, [pc, #112]	; (8002b34 <Compare_pin_32+0x168>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f00a fed8 	bl	800d878 <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 8002ac8:	f107 0310 	add.w	r3, r7, #16
 8002acc:	2202      	movs	r2, #2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6838      	ldr	r0, [r7, #0]
 8002ad2:	f00a fef1 	bl	800d8b8 <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	4917      	ldr	r1, [pc, #92]	; (8002b38 <Compare_pin_32+0x16c>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00a fecb 	bl	800d878 <siprintf>
			 strncat(outchar, aadd, 1);
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	f00a fee4 	bl	800d8b8 <strncat>
	for(register int i = 0;i < 16;i++){
 8002af0:	3401      	adds	r4, #1
 8002af2:	2c0f      	cmp	r4, #15
 8002af4:	f77f af7b 	ble.w	80029ee <Compare_pin_32+0x22>
 8002af8:	e000      	b.n	8002afc <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 8002afa:	bf00      	nop
		 }
	}

	if(!cntr_w){
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	490d      	ldr	r1, [pc, #52]	; (8002b3c <Compare_pin_32+0x170>)
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00a feb5 	bl	800d878 <siprintf>
		strncat(outchar, aadd, 7);
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	2207      	movs	r2, #7
 8002b14:	4619      	mov	r1, r3
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f00a fece 	bl	800d8b8 <strncat>
	}
}
 8002b1c:	bf00      	nop
 8002b1e:	3724      	adds	r7, #36	; 0x24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}
 8002b24:	0800ff04 	.word	0x0800ff04
 8002b28:	0800ff0c 	.word	0x0800ff0c
 8002b2c:	0800ff14 	.word	0x0800ff14
 8002b30:	0800ff1c 	.word	0x0800ff1c
 8002b34:	0800ff20 	.word	0x0800ff20
 8002b38:	0800ff24 	.word	0x0800ff24
 8002b3c:	0800ff28 	.word	0x0800ff28

08002b40 <CheckAllPass>:

/**
  * @brief CheckAllPass
	Check and count up score for GPIO checking
  */
void CheckAllPass(){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	cnt_allpass = 0; // init reset
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <CheckAllPass+0xd0>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]

	//// lazy Cat cat chekallpass
	////  \r,\n count as 1
	if(WR_A_PUPDR[7] == 95){cnt_allpass++;} //// 95 = "_"
 8002b4a:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <CheckAllPass+0xd4>)
 8002b4c:	79db      	ldrb	r3, [r3, #7]
 8002b4e:	2b5f      	cmp	r3, #95	; 0x5f
 8002b50:	d105      	bne.n	8002b5e <CheckAllPass+0x1e>
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <CheckAllPass+0xd0>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <CheckAllPass+0xd0>)
 8002b5c:	701a      	strb	r2, [r3, #0]
	if(WR_B_PUPDR[7] == 95){cnt_allpass++;}
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <CheckAllPass+0xd8>)
 8002b60:	79db      	ldrb	r3, [r3, #7]
 8002b62:	2b5f      	cmp	r3, #95	; 0x5f
 8002b64:	d105      	bne.n	8002b72 <CheckAllPass+0x32>
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <CheckAllPass+0xd0>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <CheckAllPass+0xd0>)
 8002b70:	701a      	strb	r2, [r3, #0]
	if(strlen(WR_C_PUPDR) <= 15 && WR_C_PUPDR[8] == 67){cnt_allpass++;}// PC_13
 8002b72:	482a      	ldr	r0, [pc, #168]	; (8002c1c <CheckAllPass+0xdc>)
 8002b74:	f7fd fb34 	bl	80001e0 <strlen>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d809      	bhi.n	8002b92 <CheckAllPass+0x52>
 8002b7e:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <CheckAllPass+0xdc>)
 8002b80:	7a1b      	ldrb	r3, [r3, #8]
 8002b82:	2b43      	cmp	r3, #67	; 0x43
 8002b84:	d105      	bne.n	8002b92 <CheckAllPass+0x52>
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <CheckAllPass+0xd0>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <CheckAllPass+0xd0>)
 8002b90:	701a      	strb	r2, [r3, #0]

	if(WR_A_OPP[7] == 95){cnt_allpass++;}
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <CheckAllPass+0xe0>)
 8002b94:	79db      	ldrb	r3, [r3, #7]
 8002b96:	2b5f      	cmp	r3, #95	; 0x5f
 8002b98:	d105      	bne.n	8002ba6 <CheckAllPass+0x66>
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <CheckAllPass+0xd0>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <CheckAllPass+0xd0>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	if(WR_B_OPP[7] == 95){cnt_allpass++;}
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <CheckAllPass+0xe4>)
 8002ba8:	79db      	ldrb	r3, [r3, #7]
 8002baa:	2b5f      	cmp	r3, #95	; 0x5f
 8002bac:	d105      	bne.n	8002bba <CheckAllPass+0x7a>
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <CheckAllPass+0xd0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <CheckAllPass+0xd0>)
 8002bb8:	701a      	strb	r2, [r3, #0]
	if(WR_C_OPP[7] == 95){cnt_allpass++;}
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <CheckAllPass+0xe8>)
 8002bbc:	79db      	ldrb	r3, [r3, #7]
 8002bbe:	2b5f      	cmp	r3, #95	; 0x5f
 8002bc0:	d105      	bne.n	8002bce <CheckAllPass+0x8e>
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <CheckAllPass+0xd0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <CheckAllPass+0xd0>)
 8002bcc:	701a      	strb	r2, [r3, #0]

	if(WR_A_OOD[7] == 95){cnt_allpass++;}
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <CheckAllPass+0xec>)
 8002bd0:	79db      	ldrb	r3, [r3, #7]
 8002bd2:	2b5f      	cmp	r3, #95	; 0x5f
 8002bd4:	d105      	bne.n	8002be2 <CheckAllPass+0xa2>
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <CheckAllPass+0xd0>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <CheckAllPass+0xd0>)
 8002be0:	701a      	strb	r2, [r3, #0]
	if(WR_B_OOD[7] == 95){cnt_allpass++;}
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <CheckAllPass+0xf0>)
 8002be4:	79db      	ldrb	r3, [r3, #7]
 8002be6:	2b5f      	cmp	r3, #95	; 0x5f
 8002be8:	d105      	bne.n	8002bf6 <CheckAllPass+0xb6>
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <CheckAllPass+0xd0>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <CheckAllPass+0xd0>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	if(WR_C_OOD[7] == 95){cnt_allpass++;}
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <CheckAllPass+0xf4>)
 8002bf8:	79db      	ldrb	r3, [r3, #7]
 8002bfa:	2b5f      	cmp	r3, #95	; 0x5f
 8002bfc:	d105      	bne.n	8002c0a <CheckAllPass+0xca>
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <CheckAllPass+0xd0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <CheckAllPass+0xd0>)
 8002c08:	701a      	strb	r2, [r3, #0]

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200008ce 	.word	0x200008ce
 8002c14:	2000005c 	.word	0x2000005c
 8002c18:	2000007c 	.word	0x2000007c
 8002c1c:	2000009c 	.word	0x2000009c
 8002c20:	200000bc 	.word	0x200000bc
 8002c24:	200000dc 	.word	0x200000dc
 8002c28:	200000fc 	.word	0x200000fc
 8002c2c:	2000011c 	.word	0x2000011c
 8002c30:	2000013c 	.word	0x2000013c
 8002c34:	2000015c 	.word	0x2000015c

08002c38 <buzzer_scream_cnt>:
/**
  * @brief Buzzer Machine
	flag // flag counter for buzzer, n times buzzer will scream
	priod_up  priod_dn -> time in ms to scream and sleep buzzer in 1 period
  */
void buzzer_scream_cnt(){
 8002c38:	b598      	push	{r3, r4, r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;

		switch(bz_st){
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <buzzer_scream_cnt+0xdc>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d039      	beq.n	8002cb8 <buzzer_scream_cnt+0x80>
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d01d      	beq.n	8002c84 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 8002c48:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002c50:	4832      	ldr	r0, [pc, #200]	; (8002d1c <buzzer_scream_cnt+0xe4>)
 8002c52:	f008 fab3 	bl	800b1bc <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002c58:	885b      	ldrh	r3, [r3, #2]
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	f003 fefc 	bl	8006a58 <HAL_GetTick>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4423      	add	r3, r4
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002c66:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <buzzer_scream_cnt+0xdc>)
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002c78:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002c7a:	e048      	b.n	8002d0e <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002c7c:	4827      	ldr	r0, [pc, #156]	; (8002d1c <buzzer_scream_cnt+0xe4>)
 8002c7e:	f008 faff 	bl	800b280 <HAL_TIM_Base_Stop_IT>
			break;
 8002c82:	e044      	b.n	8002d0e <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002c84:	2201      	movs	r2, #1
 8002c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8a:	4825      	ldr	r0, [pc, #148]	; (8002d20 <buzzer_scream_cnt+0xe8>)
 8002c8c:	f004 fdd2 	bl	8007834 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002c90:	f003 fee2 	bl	8006a58 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d334      	bcc.n	8002d08 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002ca0:	889b      	ldrh	r3, [r3, #4]
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	f003 fed8 	bl	8006a58 <HAL_GetTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4423      	add	r3, r4
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002cae:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <buzzer_scream_cnt+0xdc>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002cb6:	e027      	b.n	8002d08 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cbe:	4818      	ldr	r0, [pc, #96]	; (8002d20 <buzzer_scream_cnt+0xe8>)
 8002cc0:	f004 fdb8 	bl	8007834 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002cc4:	f003 fec8 	bl	8006a58 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d31c      	bcc.n	8002d0c <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002cdc:	885b      	ldrh	r3, [r3, #2]
 8002cde:	461c      	mov	r4, r3
 8002ce0:	f003 feba 	bl	8006a58 <HAL_GetTick>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4423      	add	r3, r4
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002cea:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <buzzer_scream_cnt+0xe0>)
 8002cf6:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <buzzer_scream_cnt+0xdc>)
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8002cfe:	e005      	b.n	8002d0c <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <buzzer_scream_cnt+0xdc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
			break;
 8002d06:	e001      	b.n	8002d0c <buzzer_scream_cnt+0xd4>
			break;
 8002d08:	bf00      	nop
 8002d0a:	e000      	b.n	8002d0e <buzzer_scream_cnt+0xd6>
			break;
 8002d0c:	bf00      	nop
		}

}
 8002d0e:	bf00      	nop
 8002d10:	bd98      	pop	{r3, r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200008dc 	.word	0x200008dc
 8002d18:	200008a0 	.word	0x200008a0
 8002d1c:	20000544 	.word	0x20000544
 8002d20:	40020800 	.word	0x40020800

08002d24 <GrandState_Verita>:
/**
  * @brief GrandState_Verita Handle ALL MAIN state of Verita Machine
  * @param None
  * @retval None
  */
void GrandState_Verita(){
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002d2a:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <GrandState_Verita+0x240>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b16      	cmp	r3, #22
 8002d30:	f200 80b9 	bhi.w	8002ea6 <GrandState_Verita+0x182>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <GrandState_Verita+0x18>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002f41 	.word	0x08002f41
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002ea7 	.word	0x08002ea7
 8002d48:	08003329 	.word	0x08003329
 8002d4c:	080034c5 	.word	0x080034c5
 8002d50:	08002fad 	.word	0x08002fad
 8002d54:	080030a7 	.word	0x080030a7
 8002d58:	0800310f 	.word	0x0800310f
 8002d5c:	08003b4d 	.word	0x08003b4d
 8002d60:	08003c37 	.word	0x08003c37
 8002d64:	08003c5d 	.word	0x08003c5d
 8002d68:	080043f9 	.word	0x080043f9
 8002d6c:	08004635 	.word	0x08004635
 8002d70:	08003ead 	.word	0x08003ead
 8002d74:	080042b9 	.word	0x080042b9
 8002d78:	0800495d 	.word	0x0800495d
 8002d7c:	08004af5 	.word	0x08004af5
 8002d80:	08004b4d 	.word	0x08004b4d
 8002d84:	08004c67 	.word	0x08004c67
 8002d88:	08004c91 	.word	0x08004c91
 8002d8c:	08004d43 	.word	0x08004d43
 8002d90:	08004dbd 	.word	0x08004dbd
 8002d94:	08004eb7 	.word	0x08004eb7

	case pre_lobby:

		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002d98:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <GrandState_Verita+0x244>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	23f0      	movs	r3, #240	; 0xf0
 8002da4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002da8:	2100      	movs	r1, #0
 8002daa:	2000      	movs	r0, #0
 8002dac:	f002 ffd2 	bl	8005d54 <ili9341_FillRect>

		ili9341_FillRect(0, 0, 320, 32, cl_GRAY);
 8002db0:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2320      	movs	r3, #32
 8002db8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f002 ffc8 	bl	8005d54 <ili9341_FillRect>


		ili9341_WriteStringNoBG(25, 10, "Nucleo-F411RE Tester", Font20, cl_BLACK);
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <GrandState_Verita+0x248>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	9201      	str	r2, [sp, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	9200      	str	r2, [sp, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <GrandState_Verita+0x24c>)
 8002dd2:	210a      	movs	r1, #10
 8002dd4:	2019      	movs	r0, #25
 8002dd6:	f003 f9b3 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_DrawHLine(cl_ORANGE, 0, 33, 320);
 8002dda:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dde:	2221      	movs	r2, #33	; 0x21
 8002de0:	2100      	movs	r1, #0
 8002de2:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
 8002de6:	f002 ff07 	bl	8005bf8 <ili9341_DrawHLine>

		ili9341_WriteString(185, 36, "OWL's OFFICE", Font16, cl_WHITE, cl_BLUE);
 8002dea:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <GrandState_Verita+0x250>)
 8002dec:	221f      	movs	r2, #31
 8002dee:	9202      	str	r2, [sp, #8]
 8002df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df4:	9201      	str	r2, [sp, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	9200      	str	r2, [sp, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5e      	ldr	r2, [pc, #376]	; (8002f78 <GrandState_Verita+0x254>)
 8002dfe:	2124      	movs	r1, #36	; 0x24
 8002e00:	20b9      	movs	r0, #185	; 0xb9
 8002e02:	f003 f950 	bl	80060a6 <ili9341_WriteString>

		//ili9341_FillRect(305, 0, 15, 240, cl_ORANGE);
		ili9341_FillRect(0, 0, 15, 240, cl_ORANGE);
 8002e06:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	23f0      	movs	r3, #240	; 0xf0
 8002e0e:	220f      	movs	r2, #15
 8002e10:	2100      	movs	r1, #0
 8002e12:	2000      	movs	r0, #0
 8002e14:	f002 ff9e 	bl	8005d54 <ili9341_FillRect>
		ili9341_DrawVLine(cl_BLACK, 14, 0, 240);
 8002e18:	23f0      	movs	r3, #240	; 0xf0
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	210e      	movs	r1, #14
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f002 ff41 	bl	8005ca6 <ili9341_DrawVLine>

		ili9341_WriteStringNoBG(60, 60, "Full-Script", Font16, cl_CYAN);
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <GrandState_Verita+0x250>)
 8002e26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e2a:	9201      	str	r2, [sp, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <GrandState_Verita+0x258>)
 8002e34:	213c      	movs	r1, #60	; 0x3c
 8002e36:	203c      	movs	r0, #60	; 0x3c
 8002e38:	f003 f982 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 90, "Monitor-mode", Font16, cl_CYAN);
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <GrandState_Verita+0x250>)
 8002e3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e42:	9201      	str	r2, [sp, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	9200      	str	r2, [sp, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a4d      	ldr	r2, [pc, #308]	; (8002f80 <GrandState_Verita+0x25c>)
 8002e4c:	215a      	movs	r1, #90	; 0x5a
 8002e4e:	203c      	movs	r0, #60	; 0x3c
 8002e50:	f003 f976 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 120, "Hardware-mode", Font16, cl_CYAN);
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <GrandState_Verita+0x250>)
 8002e56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e5a:	9201      	str	r2, [sp, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	9200      	str	r2, [sp, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <GrandState_Verita+0x260>)
 8002e64:	2178      	movs	r1, #120	; 0x78
 8002e66:	203c      	movs	r0, #60	; 0x3c
 8002e68:	f003 f96a 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 150, "Firmware-mode", Font16, cl_CYAN);
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <GrandState_Verita+0x250>)
 8002e6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	9200      	str	r2, [sp, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <GrandState_Verita+0x264>)
 8002e7c:	2196      	movs	r1, #150	; 0x96
 8002e7e:	203c      	movs	r0, #60	; 0x3c
 8002e80:	f003 f95e 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 180, "About Verita", Font16, cl_CYAN);
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <GrandState_Verita+0x250>)
 8002e86:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e8a:	9201      	str	r2, [sp, #4]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	9200      	str	r2, [sp, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3e      	ldr	r2, [pc, #248]	; (8002f8c <GrandState_Verita+0x268>)
 8002e94:	21b4      	movs	r1, #180	; 0xb4
 8002e96:	203c      	movs	r0, #60	; 0x3c
 8002e98:	f003 f952 	bl	8006140 <ili9341_WriteStringNoBG>



		GrandState = lobby;
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <GrandState_Verita+0x240>)
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
		break; // pre-lobby
 8002ea2:	f002 b82c 	b.w	8004efe <GrandState_Verita+0x21da>

	default:
	case lobby:
		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <GrandState_Verita+0x244>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	705a      	strb	r2, [r3, #1]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is);
 8002eac:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <GrandState_Verita+0x26c>)
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <GrandState_Verita+0x244>)
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	4937      	ldr	r1, [pc, #220]	; (8002f94 <GrandState_Verita+0x270>)
 8002eb6:	4838      	ldr	r0, [pc, #224]	; (8002f98 <GrandState_Verita+0x274>)
 8002eb8:	f00a fcde 	bl	800d878 <siprintf>
		ili9341_WriteString(240, 220, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002ebc:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <GrandState_Verita+0x278>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	9202      	str	r2, [sp, #8]
 8002ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec6:	9201      	str	r2, [sp, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	9200      	str	r2, [sp, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <GrandState_Verita+0x274>)
 8002ed0:	21dc      	movs	r1, #220	; 0xdc
 8002ed2:	20f0      	movs	r0, #240	; 0xf0
 8002ed4:	f003 f8e7 	bl	80060a6 <ili9341_WriteString>
		//simple_scr();

		if(k_flag.cnt){
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <GrandState_Verita+0x27c>)
 8002eda:	789b      	ldrb	r3, [r3, #2]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f001 87fb 	beq.w	8004ed8 <GrandState_Verita+0x21b4>


			if (stboxp.ch_is == 1) {
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <GrandState_Verita+0x244>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <GrandState_Verita+0x1d4>
				gScr.fullflag = ff_runfull;
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <GrandState_Verita+0x280>)
 8002eec:	2203      	movs	r2, #3
 8002eee:	701a      	strb	r2, [r3, #0]
				GrandState = pre_hw_chk;
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <GrandState_Verita+0x240>)
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e01e      	b.n	8002f36 <GrandState_Verita+0x212>
			}
			else if (stboxp.ch_is == 2){GrandState = pre_monitor;}
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <GrandState_Verita+0x244>)
 8002efa:	789b      	ldrb	r3, [r3, #2]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d103      	bne.n	8002f08 <GrandState_Verita+0x1e4>
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <GrandState_Verita+0x240>)
 8002f02:	220b      	movs	r2, #11
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e016      	b.n	8002f36 <GrandState_Verita+0x212>
			else if (stboxp.ch_is == 3){GrandState = pre_hw_chk;}
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <GrandState_Verita+0x244>)
 8002f0a:	789b      	ldrb	r3, [r3, #2]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d103      	bne.n	8002f18 <GrandState_Verita+0x1f4>
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <GrandState_Verita+0x240>)
 8002f12:	2203      	movs	r2, #3
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e00e      	b.n	8002f36 <GrandState_Verita+0x212>
			else if (stboxp.ch_is == 4){GrandState = pre_fw_lob;}
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <GrandState_Verita+0x244>)
 8002f1a:	789b      	ldrb	r3, [r3, #2]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d103      	bne.n	8002f28 <GrandState_Verita+0x204>
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <GrandState_Verita+0x240>)
 8002f22:	2205      	movs	r2, #5
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e006      	b.n	8002f36 <GrandState_Verita+0x212>
			else if (stboxp.ch_is == 5){GrandState = pre_about;}
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <GrandState_Verita+0x244>)
 8002f2a:	789b      	ldrb	r3, [r3, #2]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d102      	bne.n	8002f36 <GrandState_Verita+0x212>
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <GrandState_Verita+0x240>)
 8002f32:	2211      	movs	r2, #17
 8002f34:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002f36:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <GrandState_Verita+0x27c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	709a      	strb	r2, [r3, #2]
		}

		break; // lobby
 8002f3c:	f001 bfcc 	b.w	8004ed8 <GrandState_Verita+0x21b4>

	case init:
		stboxp.choice_set = bpoxy_def;
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <GrandState_Verita+0x244>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	705a      	strb	r2, [r3, #1]

		BL_UART_Start(&huart1);
 8002f46:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <GrandState_Verita+0x284>)
 8002f48:	f7fe fbae 	bl	80016a8 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002f4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f50:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <GrandState_Verita+0x284>)
 8002f52:	f7fe fd23 	bl	800199c <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 8002f56:	f7fe fbd7 	bl	8001708 <BL_UART_Finish>

		GrandState = lobby;
 8002f5a:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <GrandState_Verita+0x240>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	701a      	strb	r2, [r3, #0]
		break;
 8002f60:	f001 bfcd 	b.w	8004efe <GrandState_Verita+0x21da>
 8002f64:	20000006 	.word	0x20000006
 8002f68:	200008d4 	.word	0x200008d4
 8002f6c:	20000238 	.word	0x20000238
 8002f70:	0800ff30 	.word	0x0800ff30
 8002f74:	20000230 	.word	0x20000230
 8002f78:	0800ff48 	.word	0x0800ff48
 8002f7c:	0800ff58 	.word	0x0800ff58
 8002f80:	0800ff64 	.word	0x0800ff64
 8002f84:	0800ff74 	.word	0x0800ff74
 8002f88:	0800ff84 	.word	0x0800ff84
 8002f8c:	0800ff94 	.word	0x0800ff94
 8002f90:	40000400 	.word	0x40000400
 8002f94:	0800fef0 	.word	0x0800fef0
 8002f98:	200006b8 	.word	0x200006b8
 8002f9c:	20000228 	.word	0x20000228
 8002fa0:	200008b8 	.word	0x200008b8
 8002fa4:	200008bc 	.word	0x200008bc
 8002fa8:	2000058c 	.word	0x2000058c

	case pre_fw_lob:
		stboxp.choice_set = bpoxy_lobfw;
 8002fac:	4ba3      	ldr	r3, [pc, #652]	; (800323c <GrandState_Verita+0x518>)
 8002fae:	2202      	movs	r2, #2
 8002fb0:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	23d2      	movs	r3, #210	; 0xd2
 8002fb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fbc:	211e      	movs	r1, #30
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f002 fec8 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002fc4:	f647 030f 	movw	r3, #30735	; 0x780f
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	231e      	movs	r3, #30
 8002fcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f002 febe 	bl	8005d54 <ili9341_FillRect>

		//// -------- client closed make sure --------
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fde:	4898      	ldr	r0, [pc, #608]	; (8003240 <GrandState_Verita+0x51c>)
 8002fe0:	f004 fc28 	bl	8007834 <HAL_GPIO_WritePin>

		ili9341_WriteStringNoBG(60, 5, "Firmware Mode", Font20, cl_WHITE);
 8002fe4:	4b97      	ldr	r3, [pc, #604]	; (8003244 <GrandState_Verita+0x520>)
 8002fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fea:	9201      	str	r2, [sp, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	9200      	str	r2, [sp, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a95      	ldr	r2, [pc, #596]	; (8003248 <GrandState_Verita+0x524>)
 8002ff4:	2105      	movs	r1, #5
 8002ff6:	203c      	movs	r0, #60	; 0x3c
 8002ff8:	f003 f8a2 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(50, 60, "Firmware Upload", Font16, cl_CYAN);
 8002ffc:	4b93      	ldr	r3, [pc, #588]	; (800324c <GrandState_Verita+0x528>)
 8002ffe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003002:	9201      	str	r2, [sp, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	9200      	str	r2, [sp, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a91      	ldr	r2, [pc, #580]	; (8003250 <GrandState_Verita+0x52c>)
 800300c:	213c      	movs	r1, #60	; 0x3c
 800300e:	2032      	movs	r0, #50	; 0x32
 8003010:	f003 f896 	bl	8006140 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"FW ver: %08X", client_bin_Ver);
 8003014:	4a8f      	ldr	r2, [pc, #572]	; (8003254 <GrandState_Verita+0x530>)
 8003016:	4990      	ldr	r1, [pc, #576]	; (8003258 <GrandState_Verita+0x534>)
 8003018:	4890      	ldr	r0, [pc, #576]	; (800325c <GrandState_Verita+0x538>)
 800301a:	f00a fc2d 	bl	800d878 <siprintf>
		ili9341_WriteStringNoBG(65, 80, TextDispBuffer, Font12, cl_WHITE);
 800301e:	4b90      	ldr	r3, [pc, #576]	; (8003260 <GrandState_Verita+0x53c>)
 8003020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003024:	9201      	str	r2, [sp, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8b      	ldr	r2, [pc, #556]	; (800325c <GrandState_Verita+0x538>)
 800302e:	2150      	movs	r1, #80	; 0x50
 8003030:	2041      	movs	r0, #65	; 0x41
 8003032:	f003 f885 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(50, 100, "Erase Flash", Font16, cl_CYAN);
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <GrandState_Verita+0x528>)
 8003038:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800303c:	9201      	str	r2, [sp, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a87      	ldr	r2, [pc, #540]	; (8003264 <GrandState_Verita+0x540>)
 8003046:	2164      	movs	r1, #100	; 0x64
 8003048:	2032      	movs	r0, #50	; 0x32
 800304a:	f003 f879 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(50, 140, "GPIO-check", Font16, cl_CYAN);
 800304e:	4b7f      	ldr	r3, [pc, #508]	; (800324c <GrandState_Verita+0x528>)
 8003050:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003054:	9201      	str	r2, [sp, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a82      	ldr	r2, [pc, #520]	; (8003268 <GrandState_Verita+0x544>)
 800305e:	218c      	movs	r1, #140	; 0x8c
 8003060:	2032      	movs	r0, #50	; 0x32
 8003062:	f003 f86d 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(65, 160, "(Client firmware uploaded first)", Font12, cl_WHITE);
 8003066:	4b7e      	ldr	r3, [pc, #504]	; (8003260 <GrandState_Verita+0x53c>)
 8003068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	9200      	str	r2, [sp, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a7d      	ldr	r2, [pc, #500]	; (800326c <GrandState_Verita+0x548>)
 8003076:	21a0      	movs	r1, #160	; 0xa0
 8003078:	2041      	movs	r0, #65	; 0x41
 800307a:	f003 f861 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <GrandState_Verita+0x528>)
 8003080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003084:	9201      	str	r2, [sp, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a78      	ldr	r2, [pc, #480]	; (8003270 <GrandState_Verita+0x54c>)
 800308e:	21dc      	movs	r1, #220	; 0xdc
 8003090:	201e      	movs	r0, #30
 8003092:	f003 f855 	bl	8006140 <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8003096:	4b77      	ldr	r3, [pc, #476]	; (8003274 <GrandState_Verita+0x550>)
 8003098:	2200      	movs	r2, #0
 800309a:	709a      	strb	r2, [r3, #2]
		GrandState = fw_lob;
 800309c:	4b76      	ldr	r3, [pc, #472]	; (8003278 <GrandState_Verita+0x554>)
 800309e:	2206      	movs	r2, #6
 80030a0:	701a      	strb	r2, [r3, #0]
		break;
 80030a2:	f001 bf2c 	b.w	8004efe <GrandState_Verita+0x21da>

	case fw_lob:

		if(k_flag.cnt){
 80030a6:	4b73      	ldr	r3, [pc, #460]	; (8003274 <GrandState_Verita+0x550>)
 80030a8:	789b      	ldrb	r3, [r3, #2]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f001 8716 	beq.w	8004edc <GrandState_Verita+0x21b8>

			if(stboxp.ch_is == 1){GrandState = pre_bootloader;}
 80030b0:	4b62      	ldr	r3, [pc, #392]	; (800323c <GrandState_Verita+0x518>)
 80030b2:	789b      	ldrb	r3, [r3, #2]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d102      	bne.n	80030be <GrandState_Verita+0x39a>
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <GrandState_Verita+0x554>)
 80030ba:	2208      	movs	r2, #8
 80030bc:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 2){GrandState = pre_fw_erase;}
 80030be:	4b5f      	ldr	r3, [pc, #380]	; (800323c <GrandState_Verita+0x518>)
 80030c0:	789b      	ldrb	r3, [r3, #2]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d102      	bne.n	80030cc <GrandState_Verita+0x3a8>
 80030c6:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <GrandState_Verita+0x554>)
 80030c8:	2207      	movs	r2, #7
 80030ca:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 3){
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <GrandState_Verita+0x518>)
 80030ce:	789b      	ldrb	r3, [r3, #2]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d110      	bne.n	80030f6 <GrandState_Verita+0x3d2>
				GrandState = pre_gpio_chk;
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <GrandState_Verita+0x554>)
 80030d6:	220d      	movs	r2, #13
 80030d8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 80030da:	2201      	movs	r2, #1
 80030dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e0:	4857      	ldr	r0, [pc, #348]	; (8003240 <GrandState_Verita+0x51c>)
 80030e2:	f004 fba7 	bl	8007834 <HAL_GPIO_WritePin>
				gScr.timelog = HAL_GetTick() + 6500;
 80030e6:	f003 fcb7 	bl	8006a58 <HAL_GetTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 80030f0:	3304      	adds	r3, #4
 80030f2:	4a62      	ldr	r2, [pc, #392]	; (800327c <GrandState_Verita+0x558>)
 80030f4:	6053      	str	r3, [r2, #4]
			}
			if(stboxp.ch_is == 4){GrandState = pre_lobby;}
 80030f6:	4b51      	ldr	r3, [pc, #324]	; (800323c <GrandState_Verita+0x518>)
 80030f8:	789b      	ldrb	r3, [r3, #2]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d102      	bne.n	8003104 <GrandState_Verita+0x3e0>
 80030fe:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <GrandState_Verita+0x554>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8003104:	4b5b      	ldr	r3, [pc, #364]	; (8003274 <GrandState_Verita+0x550>)
 8003106:	2200      	movs	r2, #0
 8003108:	709a      	strb	r2, [r3, #2]
		}

		break;
 800310a:	f001 bee7 	b.w	8004edc <GrandState_Verita+0x21b8>

	case pre_fw_erase:
			stboxp.choice_set = bpoxy_no;
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <GrandState_Verita+0x518>)
 8003110:	2203      	movs	r2, #3
 8003112:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	23d2      	movs	r3, #210	; 0xd2
 800311a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800311e:	211e      	movs	r1, #30
 8003120:	2000      	movs	r0, #0
 8003122:	f002 fe17 	bl	8005d54 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8003126:	f647 030f 	movw	r3, #30735	; 0x780f
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	231e      	movs	r3, #30
 800312e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003132:	2100      	movs	r1, #0
 8003134:	2000      	movs	r0, #0
 8003136:	f002 fe0d 	bl	8005d54 <ili9341_FillRect>

			ili9341_WriteStringNoBG(60, 5, "Firmware Mode", Font20, cl_WHITE);
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <GrandState_Verita+0x520>)
 800313c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003140:	9201      	str	r2, [sp, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	9200      	str	r2, [sp, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3f      	ldr	r2, [pc, #252]	; (8003248 <GrandState_Verita+0x524>)
 800314a:	2105      	movs	r1, #5
 800314c:	203c      	movs	r0, #60	; 0x3c
 800314e:	f002 fff7 	bl	8006140 <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8003152:	4b4a      	ldr	r3, [pc, #296]	; (800327c <GrandState_Verita+0x558>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d112      	bne.n	8003180 <GrandState_Verita+0x45c>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 800315a:	4949      	ldr	r1, [pc, #292]	; (8003280 <GrandState_Verita+0x55c>)
 800315c:	483f      	ldr	r0, [pc, #252]	; (800325c <GrandState_Verita+0x538>)
 800315e:	f00a fb8b 	bl	800d878 <siprintf>
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <GrandState_Verita+0x520>)
 8003164:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003168:	9202      	str	r2, [sp, #8]
 800316a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800316e:	9201      	str	r2, [sp, #4]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	9200      	str	r2, [sp, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a39      	ldr	r2, [pc, #228]	; (800325c <GrandState_Verita+0x538>)
 8003178:	2105      	movs	r1, #5
 800317a:	20fa      	movs	r0, #250	; 0xfa
 800317c:	f002 ff93 	bl	80060a6 <ili9341_WriteString>
			}
			ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <GrandState_Verita+0x528>)
 8003182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003186:	9201      	str	r2, [sp, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	9200      	str	r2, [sp, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a38      	ldr	r2, [pc, #224]	; (8003270 <GrandState_Verita+0x54c>)
 8003190:	21dc      	movs	r1, #220	; 0xdc
 8003192:	201e      	movs	r0, #30
 8003194:	f002 ffd4 	bl	8006140 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(70, 50, "Erase Flash ...", Font20, cl_CYAN);
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <GrandState_Verita+0x520>)
 800319a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800319e:	9201      	str	r2, [sp, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	9200      	str	r2, [sp, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <GrandState_Verita+0x560>)
 80031a8:	2132      	movs	r1, #50	; 0x32
 80031aa:	2046      	movs	r0, #70	; 0x46
 80031ac:	f002 ffc8 	bl	8006140 <ili9341_WriteStringNoBG>

			//// -- Open Client ----
			if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 80031b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031b4:	4822      	ldr	r0, [pc, #136]	; (8003240 <GrandState_Verita+0x51c>)
 80031b6:	f004 fb25 	bl	8007804 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <GrandState_Verita+0x4a4>
				HAL_Delay(20);
 80031c0:	2014      	movs	r0, #20
 80031c2:	f003 fc55 	bl	8006a70 <HAL_Delay>
 80031c6:	e009      	b.n	80031dc <GrandState_Verita+0x4b8>
			}else{
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 80031c8:	2201      	movs	r2, #1
 80031ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ce:	481c      	ldr	r0, [pc, #112]	; (8003240 <GrandState_Verita+0x51c>)
 80031d0:	f004 fb30 	bl	8007834 <HAL_GPIO_WritePin>
				HAL_Delay(2200);
 80031d4:	f640 0098 	movw	r0, #2200	; 0x898
 80031d8:	f003 fc4a 	bl	8006a70 <HAL_Delay>
			}


			BL_UART_Start(&huart1);
 80031dc:	482a      	ldr	r0, [pc, #168]	; (8003288 <GrandState_Verita+0x564>)
 80031de:	f7fe fa63 	bl	80016a8 <BL_UART_Start>

			sprintf(TextDispBuffer,"...");
 80031e2:	492a      	ldr	r1, [pc, #168]	; (800328c <GrandState_Verita+0x568>)
 80031e4:	481d      	ldr	r0, [pc, #116]	; (800325c <GrandState_Verita+0x538>)
 80031e6:	f00a fb47 	bl	800d878 <siprintf>
			ili9341_WriteStringNoBG(260, 50, TextDispBuffer, Font20, cl_CYAN);
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <GrandState_Verita+0x520>)
 80031ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80031f0:	9201      	str	r2, [sp, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	9200      	str	r2, [sp, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <GrandState_Verita+0x538>)
 80031fa:	2132      	movs	r1, #50	; 0x32
 80031fc:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003200:	f002 ff9e 	bl	8006140 <ili9341_WriteStringNoBG>

			//// Flash Memory Erase ============,
			blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8003204:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003208:	481f      	ldr	r0, [pc, #124]	; (8003288 <GrandState_Verita+0x564>)
 800320a:	f7fe fbc7 	bl	800199c <BL_UART_ExtendEraseMem_SP>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <GrandState_Verita+0x56c>)
 8003214:	701a      	strb	r2, [r3, #0]

			//// display
			if(blrespo == UB_ACK){
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <GrandState_Verita+0x56c>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b79      	cmp	r3, #121	; 0x79
 800321c:	d10b      	bne.n	8003236 <GrandState_Verita+0x512>
				ili9341_WriteStringNoBG(70, 80, "Mem erased", Font20, cl_YELLOW);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <GrandState_Verita+0x520>)
 8003220:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	9200      	str	r2, [sp, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <GrandState_Verita+0x570>)
 800322e:	2150      	movs	r1, #80	; 0x50
 8003230:	2046      	movs	r0, #70	; 0x46
 8003232:	f002 ff85 	bl	8006140 <ili9341_WriteStringNoBG>
			}
			//// wait flash erasing for fullscript, about 5-6 sec
			//if(gScr.fullflag == ff_runfull){};
			for(int i = 0;i < 6; i++){
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	e049      	b.n	80032d0 <GrandState_Verita+0x5ac>
 800323c:	200008d4 	.word	0x200008d4
 8003240:	40020800 	.word	0x40020800
 8003244:	20000238 	.word	0x20000238
 8003248:	0800ffa4 	.word	0x0800ffa4
 800324c:	20000230 	.word	0x20000230
 8003250:	0800ffb4 	.word	0x0800ffb4
 8003254:	13280723 	.word	0x13280723
 8003258:	0800ffc4 	.word	0x0800ffc4
 800325c:	200006b8 	.word	0x200006b8
 8003260:	20000228 	.word	0x20000228
 8003264:	0800ffd4 	.word	0x0800ffd4
 8003268:	0800ffe0 	.word	0x0800ffe0
 800326c:	0800ffec 	.word	0x0800ffec
 8003270:	08010010 	.word	0x08010010
 8003274:	200008b8 	.word	0x200008b8
 8003278:	20000006 	.word	0x20000006
 800327c:	200008bc 	.word	0x200008bc
 8003280:	08010018 	.word	0x08010018
 8003284:	08010020 	.word	0x08010020
 8003288:	2000058c 	.word	0x2000058c
 800328c:	08010030 	.word	0x08010030
 8003290:	20000781 	.word	0x20000781
 8003294:	08010034 	.word	0x08010034
				ili9341_FillRect(155, 100, 10, 10, cl_WHITE);
 8003298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	230a      	movs	r3, #10
 80032a0:	220a      	movs	r2, #10
 80032a2:	2164      	movs	r1, #100	; 0x64
 80032a4:	209b      	movs	r0, #155	; 0x9b
 80032a6:	f002 fd55 	bl	8005d54 <ili9341_FillRect>
				HAL_Delay(500);
 80032aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032ae:	f003 fbdf 	bl	8006a70 <HAL_Delay>
				ili9341_FillRect(155, 100, 10, 10, cl_BLACK);
 80032b2:	2300      	movs	r3, #0
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	230a      	movs	r3, #10
 80032b8:	220a      	movs	r2, #10
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	209b      	movs	r0, #155	; 0x9b
 80032be:	f002 fd49 	bl	8005d54 <ili9341_FillRect>
				HAL_Delay(500);
 80032c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032c6:	f003 fbd3 	bl	8006a70 <HAL_Delay>
			for(int i = 0;i < 6; i++){
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3301      	adds	r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	dde0      	ble.n	8003298 <GrandState_Verita+0x574>
			}


			BL_UART_Finish();
 80032d6:	f7fe fa17 	bl	8001708 <BL_UART_Finish>

			//HAL_Delay(3500);
			ili9341_WriteStringNoBG(70, 110, "Erased Finish", Font20, cl_YELLOW);
 80032da:	4b9a      	ldr	r3, [pc, #616]	; (8003544 <GrandState_Verita+0x820>)
 80032dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80032e0:	9201      	str	r2, [sp, #4]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	9200      	str	r2, [sp, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a97      	ldr	r2, [pc, #604]	; (8003548 <GrandState_Verita+0x824>)
 80032ea:	216e      	movs	r1, #110	; 0x6e
 80032ec:	2046      	movs	r0, #70	; 0x46
 80032ee:	f002 ff27 	bl	8006140 <ili9341_WriteStringNoBG>
			HAL_Delay(500);
 80032f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032f6:	f003 fbbb 	bl	8006a70 <HAL_Delay>

			//// -- Close Client ----
			//if(gScr.fullflag != ff_runfull){
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003300:	4892      	ldr	r0, [pc, #584]	; (800354c <GrandState_Verita+0x828>)
 8003302:	f004 fa97 	bl	8007834 <HAL_GPIO_WritePin>
			//};


			k_flag.cnt = 0;
 8003306:	4b92      	ldr	r3, [pc, #584]	; (8003550 <GrandState_Verita+0x82c>)
 8003308:	2200      	movs	r2, #0
 800330a:	709a      	strb	r2, [r3, #2]
			if(gScr.fullflag == ff_runfull){
 800330c:	4b91      	ldr	r3, [pc, #580]	; (8003554 <GrandState_Verita+0x830>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d104      	bne.n	800331e <GrandState_Verita+0x5fa>
				 GrandState = pre_bootloader;
 8003314:	4b90      	ldr	r3, [pc, #576]	; (8003558 <GrandState_Verita+0x834>)
 8003316:	2208      	movs	r2, #8
 8003318:	701a      	strb	r2, [r3, #0]
			}else{
				GrandState = pre_fw_lob;
			}

			break;
 800331a:	f001 bdf0 	b.w	8004efe <GrandState_Verita+0x21da>
				GrandState = pre_fw_lob;
 800331e:	4b8e      	ldr	r3, [pc, #568]	; (8003558 <GrandState_Verita+0x834>)
 8003320:	2205      	movs	r2, #5
 8003322:	701a      	strb	r2, [r3, #0]
			break;
 8003324:	f001 bdeb 	b.w	8004efe <GrandState_Verita+0x21da>

	case pre_hw_chk:
		stboxp.choice_set = bpoxy_def;
 8003328:	4b8c      	ldr	r3, [pc, #560]	; (800355c <GrandState_Verita+0x838>)
 800332a:	2200      	movs	r2, #0
 800332c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 800332e:	2300      	movs	r3, #0
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	23d2      	movs	r3, #210	; 0xd2
 8003334:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003338:	211e      	movs	r1, #30
 800333a:	2000      	movs	r0, #0
 800333c:	f002 fd0a 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_ORANGE);
 8003340:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	231e      	movs	r3, #30
 8003348:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800334c:	2100      	movs	r1, #0
 800334e:	2000      	movs	r0, #0
 8003350:	f002 fd00 	bl	8005d54 <ili9341_FillRect>

		if(gScr.fullflag == ff_runfull){
 8003354:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <GrandState_Verita+0x830>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d10e      	bne.n	800337a <GrandState_Verita+0x656>
			ili9341_WriteString(250, 5, "FULL", Font20, cl_RED, cl_YELLOW);
 800335c:	4b79      	ldr	r3, [pc, #484]	; (8003544 <GrandState_Verita+0x820>)
 800335e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003362:	9202      	str	r2, [sp, #8]
 8003364:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a7b      	ldr	r2, [pc, #492]	; (8003560 <GrandState_Verita+0x83c>)
 8003372:	2105      	movs	r1, #5
 8003374:	20fa      	movs	r0, #250	; 0xfa
 8003376:	f002 fe96 	bl	80060a6 <ili9341_WriteString>
		}

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 800337a:	2201      	movs	r2, #1
 800337c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003380:	4872      	ldr	r0, [pc, #456]	; (800354c <GrandState_Verita+0x828>)
 8003382:	f004 fa57 	bl	8007834 <HAL_GPIO_WritePin>

		ili9341_WriteStringNoBG(80, 5, "Hardware_Chk", Font20, cl_WHITE);
 8003386:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <GrandState_Verita+0x820>)
 8003388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800338c:	9201      	str	r2, [sp, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	9200      	str	r2, [sp, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a73      	ldr	r2, [pc, #460]	; (8003564 <GrandState_Verita+0x840>)
 8003396:	2105      	movs	r1, #5
 8003398:	2050      	movs	r0, #80	; 0x50
 800339a:	f002 fed1 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 50, "5V:", Font16, cl_WHITE);
 800339e:	4b72      	ldr	r3, [pc, #456]	; (8003568 <GrandState_Verita+0x844>)
 80033a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	9200      	str	r2, [sp, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6f      	ldr	r2, [pc, #444]	; (800356c <GrandState_Verita+0x848>)
 80033ae:	2132      	movs	r1, #50	; 0x32
 80033b0:	200f      	movs	r0, #15
 80033b2:	f002 fec5 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 75, "3V3:", Font16, cl_WHITE);
 80033b6:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <GrandState_Verita+0x844>)
 80033b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033bc:	9201      	str	r2, [sp, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6a      	ldr	r2, [pc, #424]	; (8003570 <GrandState_Verita+0x84c>)
 80033c6:	214b      	movs	r1, #75	; 0x4b
 80033c8:	200f      	movs	r0, #15
 80033ca:	f002 feb9 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 95, "3V3:", Font16, cl_WHITE);
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <GrandState_Verita+0x844>)
 80033d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d4:	9201      	str	r2, [sp, #4]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	9200      	str	r2, [sp, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a64      	ldr	r2, [pc, #400]	; (8003570 <GrandState_Verita+0x84c>)
 80033de:	215f      	movs	r1, #95	; 0x5f
 80033e0:	200f      	movs	r0, #15
 80033e2:	f002 fead 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 106, "STLink", Font12, cl_WHITE);
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <GrandState_Verita+0x850>)
 80033e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ec:	9201      	str	r2, [sp, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	9200      	str	r2, [sp, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a60      	ldr	r2, [pc, #384]	; (8003578 <GrandState_Verita+0x854>)
 80033f6:	216a      	movs	r1, #106	; 0x6a
 80033f8:	200f      	movs	r0, #15
 80033fa:	f002 fea1 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 125, "I Brd:", Font16, cl_WHITE);
 80033fe:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <GrandState_Verita+0x844>)
 8003400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003404:	9201      	str	r2, [sp, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	9200      	str	r2, [sp, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5b      	ldr	r2, [pc, #364]	; (800357c <GrandState_Verita+0x858>)
 800340e:	217d      	movs	r1, #125	; 0x7d
 8003410:	200f      	movs	r0, #15
 8003412:	f002 fe95 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 150, "I MCU:", Font16, cl_WHITE);
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <GrandState_Verita+0x844>)
 8003418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800341c:	9201      	str	r2, [sp, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	9200      	str	r2, [sp, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a56      	ldr	r2, [pc, #344]	; (8003580 <GrandState_Verita+0x85c>)
 8003426:	2196      	movs	r1, #150	; 0x96
 8003428:	200f      	movs	r0, #15
 800342a:	f002 fe89 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(165, 54, "mV", Font12, cl_WHITE);
 800342e:	4b51      	ldr	r3, [pc, #324]	; (8003574 <GrandState_Verita+0x850>)
 8003430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003434:	9201      	str	r2, [sp, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	9200      	str	r2, [sp, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a51      	ldr	r2, [pc, #324]	; (8003584 <GrandState_Verita+0x860>)
 800343e:	2136      	movs	r1, #54	; 0x36
 8003440:	20a5      	movs	r0, #165	; 0xa5
 8003442:	f002 fe7d 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 79, "mV", Font12, cl_WHITE);
 8003446:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <GrandState_Verita+0x850>)
 8003448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344c:	9201      	str	r2, [sp, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	9200      	str	r2, [sp, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <GrandState_Verita+0x860>)
 8003456:	214f      	movs	r1, #79	; 0x4f
 8003458:	20a5      	movs	r0, #165	; 0xa5
 800345a:	f002 fe71 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 104, "mV", Font12, cl_WHITE);
 800345e:	4b45      	ldr	r3, [pc, #276]	; (8003574 <GrandState_Verita+0x850>)
 8003460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003464:	9201      	str	r2, [sp, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a45      	ldr	r2, [pc, #276]	; (8003584 <GrandState_Verita+0x860>)
 800346e:	2168      	movs	r1, #104	; 0x68
 8003470:	20a5      	movs	r0, #165	; 0xa5
 8003472:	f002 fe65 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 129, "mA", Font12, cl_WHITE);
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <GrandState_Verita+0x850>)
 8003478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347c:	9201      	str	r2, [sp, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a40      	ldr	r2, [pc, #256]	; (8003588 <GrandState_Verita+0x864>)
 8003486:	2181      	movs	r1, #129	; 0x81
 8003488:	20a5      	movs	r0, #165	; 0xa5
 800348a:	f002 fe59 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 154, "mA", Font12, cl_WHITE);
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <GrandState_Verita+0x850>)
 8003490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003494:	9201      	str	r2, [sp, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	9200      	str	r2, [sp, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <GrandState_Verita+0x864>)
 800349e:	219a      	movs	r1, #154	; 0x9a
 80034a0:	20a5      	movs	r0, #165	; 0xa5
 80034a2:	f002 fe4d 	bl	8006140 <ili9341_WriteStringNoBG>


		gScr.timelog = HAL_GetTick() + 3500;
 80034a6:	f003 fad7 	bl	8006a58 <HAL_GetTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 80034b0:	4a28      	ldr	r2, [pc, #160]	; (8003554 <GrandState_Verita+0x830>)
 80034b2:	6053      	str	r3, [r2, #4]

		k_flag.cnt = 0; //// prevent over state jump
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <GrandState_Verita+0x82c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	709a      	strb	r2, [r3, #2]
		GrandState = hw_chk;
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <GrandState_Verita+0x834>)
 80034bc:	2204      	movs	r2, #4
 80034be:	701a      	strb	r2, [r3, #0]
		break; //pre_hw_chk
 80034c0:	f001 bd1d 	b.w	8004efe <GrandState_Verita+0x21da>

	case hw_chk:
		stboxp.choice_set = bpoxy_def;
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <GrandState_Verita+0x838>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	705a      	strb	r2, [r3, #1]

		//// 5V -----------------------------------------------------------------------
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[1]*1000)); // inatb.inatb.Bus_V
 80034ca:	4b30      	ldr	r3, [pc, #192]	; (800358c <GrandState_Verita+0x868>)
 80034cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80034d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003590 <GrandState_Verita+0x86c>
 80034d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034dc:	ee17 3a90 	vmov	r3, s15
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	492b      	ldr	r1, [pc, #172]	; (8003594 <GrandState_Verita+0x870>)
 80034e6:	482c      	ldr	r0, [pc, #176]	; (8003598 <GrandState_Verita+0x874>)
 80034e8:	f00a f9c6 	bl	800d878 <siprintf>
		if(mcp_read.cv[1] <= hw_par.vol_5V_tsh_V){ //// 4.300
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <GrandState_Verita+0x868>)
 80034ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <GrandState_Verita+0x878>)
 80034f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80034f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	d852      	bhi.n	80035a8 <GrandState_Verita+0x884>
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <GrandState_Verita+0x820>)
 8003504:	2200      	movs	r2, #0
 8003506:	9202      	str	r2, [sp, #8]
 8003508:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800350c:	9201      	str	r2, [sp, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	9200      	str	r2, [sp, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a20      	ldr	r2, [pc, #128]	; (8003598 <GrandState_Verita+0x874>)
 8003516:	2132      	movs	r1, #50	; 0x32
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	f002 fdc4 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 50, "FAIL", Font20, cl_RED, cl_BLACK);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <GrandState_Verita+0x820>)
 8003520:	2200      	movs	r2, #0
 8003522:	9202      	str	r2, [sp, #8]
 8003524:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003528:	9201      	str	r2, [sp, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	9200      	str	r2, [sp, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <GrandState_Verita+0x87c>)
 8003532:	2132      	movs	r1, #50	; 0x32
 8003534:	20dc      	movs	r0, #220	; 0xdc
 8003536:	f002 fdb6 	bl	80060a6 <ili9341_WriteString>
			hwscor.p5V = 0;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <GrandState_Verita+0x880>)
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e051      	b.n	80035e6 <GrandState_Verita+0x8c2>
 8003542:	bf00      	nop
 8003544:	20000238 	.word	0x20000238
 8003548:	08010040 	.word	0x08010040
 800354c:	40020800 	.word	0x40020800
 8003550:	200008b8 	.word	0x200008b8
 8003554:	200008bc 	.word	0x200008bc
 8003558:	20000006 	.word	0x20000006
 800355c:	200008d4 	.word	0x200008d4
 8003560:	08010018 	.word	0x08010018
 8003564:	08010050 	.word	0x08010050
 8003568:	20000230 	.word	0x20000230
 800356c:	08010060 	.word	0x08010060
 8003570:	08010064 	.word	0x08010064
 8003574:	20000228 	.word	0x20000228
 8003578:	0801006c 	.word	0x0801006c
 800357c:	08010074 	.word	0x08010074
 8003580:	0801007c 	.word	0x0801007c
 8003584:	08010084 	.word	0x08010084
 8003588:	08010088 	.word	0x08010088
 800358c:	20000840 	.word	0x20000840
 8003590:	447a0000 	.word	0x447a0000
 8003594:	0801008c 	.word	0x0801008c
 8003598:	200006b8 	.word	0x200006b8
 800359c:	20000828 	.word	0x20000828
 80035a0:	08010090 	.word	0x08010090
 80035a4:	200008c8 	.word	0x200008c8
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80035a8:	4b8d      	ldr	r3, [pc, #564]	; (80037e0 <GrandState_Verita+0xabc>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	9202      	str	r2, [sp, #8]
 80035ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b2:	9201      	str	r2, [sp, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a8a      	ldr	r2, [pc, #552]	; (80037e4 <GrandState_Verita+0xac0>)
 80035bc:	2132      	movs	r1, #50	; 0x32
 80035be:	2064      	movs	r0, #100	; 0x64
 80035c0:	f002 fd71 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 50, "PASS", Font20, cl_GREEN, cl_BLACK);
 80035c4:	4b86      	ldr	r3, [pc, #536]	; (80037e0 <GrandState_Verita+0xabc>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	9202      	str	r2, [sp, #8]
 80035ca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80035ce:	9201      	str	r2, [sp, #4]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	9200      	str	r2, [sp, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a84      	ldr	r2, [pc, #528]	; (80037e8 <GrandState_Verita+0xac4>)
 80035d8:	2132      	movs	r1, #50	; 0x32
 80035da:	20dc      	movs	r0, #220	; 0xdc
 80035dc:	f002 fd63 	bl	80060a6 <ili9341_WriteString>
			hwscor.p5V = 1;
 80035e0:	4b82      	ldr	r3, [pc, #520]	; (80037ec <GrandState_Verita+0xac8>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
		}
		//// 3V3 -----------------------------------------------------------------------
		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 80035e6:	4b82      	ldr	r3, [pc, #520]	; (80037f0 <GrandState_Verita+0xacc>)
 80035e8:	8a1b      	ldrh	r3, [r3, #16]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4981      	ldr	r1, [pc, #516]	; (80037f4 <GrandState_Verita+0xad0>)
 80035ee:	487d      	ldr	r0, [pc, #500]	; (80037e4 <GrandState_Verita+0xac0>)
 80035f0:	f00a f942 	bl	800d878 <siprintf>
		if(inata.Bus_V <= hw_par.vol_3V3_tsh_mV){ // 2900
 80035f4:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <GrandState_Verita+0xacc>)
 80035f6:	8a1a      	ldrh	r2, [r3, #16]
 80035f8:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <GrandState_Verita+0xad4>)
 80035fa:	8a9b      	ldrh	r3, [r3, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d81f      	bhi.n	8003640 <GrandState_Verita+0x91c>
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003600:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <GrandState_Verita+0xabc>)
 8003602:	2200      	movs	r2, #0
 8003604:	9202      	str	r2, [sp, #8]
 8003606:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800360a:	9201      	str	r2, [sp, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a74      	ldr	r2, [pc, #464]	; (80037e4 <GrandState_Verita+0xac0>)
 8003614:	214b      	movs	r1, #75	; 0x4b
 8003616:	2064      	movs	r0, #100	; 0x64
 8003618:	f002 fd45 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 75, "FAIL", Font20, cl_RED, cl_BLACK);
 800361c:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <GrandState_Verita+0xabc>)
 800361e:	2200      	movs	r2, #0
 8003620:	9202      	str	r2, [sp, #8]
 8003622:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003626:	9201      	str	r2, [sp, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	9200      	str	r2, [sp, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a73      	ldr	r2, [pc, #460]	; (80037fc <GrandState_Verita+0xad8>)
 8003630:	214b      	movs	r1, #75	; 0x4b
 8003632:	20dc      	movs	r0, #220	; 0xdc
 8003634:	f002 fd37 	bl	80060a6 <ili9341_WriteString>
			hwscor.p3V3 = 0;
 8003638:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <GrandState_Verita+0xac8>)
 800363a:	2200      	movs	r2, #0
 800363c:	705a      	strb	r2, [r3, #1]
 800363e:	e01e      	b.n	800367e <GrandState_Verita+0x95a>
		}else{
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003640:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <GrandState_Verita+0xabc>)
 8003642:	2200      	movs	r2, #0
 8003644:	9202      	str	r2, [sp, #8]
 8003646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364a:	9201      	str	r2, [sp, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	9200      	str	r2, [sp, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a64      	ldr	r2, [pc, #400]	; (80037e4 <GrandState_Verita+0xac0>)
 8003654:	214b      	movs	r1, #75	; 0x4b
 8003656:	2064      	movs	r0, #100	; 0x64
 8003658:	f002 fd25 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 75, "PASS", Font20, cl_GREEN, cl_BLACK);
 800365c:	4b60      	ldr	r3, [pc, #384]	; (80037e0 <GrandState_Verita+0xabc>)
 800365e:	2200      	movs	r2, #0
 8003660:	9202      	str	r2, [sp, #8]
 8003662:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003666:	9201      	str	r2, [sp, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	9200      	str	r2, [sp, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5e      	ldr	r2, [pc, #376]	; (80037e8 <GrandState_Verita+0xac4>)
 8003670:	214b      	movs	r1, #75	; 0x4b
 8003672:	20dc      	movs	r0, #220	; 0xdc
 8003674:	f002 fd17 	bl	80060a6 <ili9341_WriteString>
			hwscor.p3V3 = 1;
 8003678:	4b5c      	ldr	r3, [pc, #368]	; (80037ec <GrandState_Verita+0xac8>)
 800367a:	2201      	movs	r2, #1
 800367c:	705a      	strb	r2, [r3, #1]
		}
		//// 3V3 STLink ------------------------------------------------------------------------
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[0]*1000));
 800367e:	4b60      	ldr	r3, [pc, #384]	; (8003800 <GrandState_Verita+0xadc>)
 8003680:	edd3 7a04 	vldr	s15, [r3, #16]
 8003684:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003804 <GrandState_Verita+0xae0>
 8003688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003690:	ee17 3a90 	vmov	r3, s15
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	4956      	ldr	r1, [pc, #344]	; (80037f4 <GrandState_Verita+0xad0>)
 800369a:	4852      	ldr	r0, [pc, #328]	; (80037e4 <GrandState_Verita+0xac0>)
 800369c:	f00a f8ec 	bl	800d878 <siprintf>
		if(mcp_read.cv[0] <= hw_par.vol_3VSTlnk_tsh_V){ // 2.9
 80036a0:	4b57      	ldr	r3, [pc, #348]	; (8003800 <GrandState_Verita+0xadc>)
 80036a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80036a6:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <GrandState_Verita+0xad4>)
 80036a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80036ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	d81f      	bhi.n	80036f6 <GrandState_Verita+0x9d2>
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <GrandState_Verita+0xabc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	9202      	str	r2, [sp, #8]
 80036bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036c0:	9201      	str	r2, [sp, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	9200      	str	r2, [sp, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a46      	ldr	r2, [pc, #280]	; (80037e4 <GrandState_Verita+0xac0>)
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	f002 fcea 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 100, "FAIL", Font20, cl_RED, cl_BLACK);
 80036d2:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <GrandState_Verita+0xabc>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	9202      	str	r2, [sp, #8]
 80036d8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036dc:	9201      	str	r2, [sp, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	9200      	str	r2, [sp, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a45      	ldr	r2, [pc, #276]	; (80037fc <GrandState_Verita+0xad8>)
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	20dc      	movs	r0, #220	; 0xdc
 80036ea:	f002 fcdc 	bl	80060a6 <ili9341_WriteString>
			hwscor.p3VSTL = 0;
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <GrandState_Verita+0xac8>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	709a      	strb	r2, [r3, #2]
 80036f4:	e01e      	b.n	8003734 <GrandState_Verita+0xa10>
		}else{
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <GrandState_Verita+0xabc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	9202      	str	r2, [sp, #8]
 80036fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003700:	9201      	str	r2, [sp, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	9200      	str	r2, [sp, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a36      	ldr	r2, [pc, #216]	; (80037e4 <GrandState_Verita+0xac0>)
 800370a:	2164      	movs	r1, #100	; 0x64
 800370c:	2064      	movs	r0, #100	; 0x64
 800370e:	f002 fcca 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 100, "PASS", Font20, cl_GREEN, cl_BLACK);
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <GrandState_Verita+0xabc>)
 8003714:	2200      	movs	r2, #0
 8003716:	9202      	str	r2, [sp, #8]
 8003718:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800371c:	9201      	str	r2, [sp, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <GrandState_Verita+0xac4>)
 8003726:	2164      	movs	r1, #100	; 0x64
 8003728:	20dc      	movs	r0, #220	; 0xdc
 800372a:	f002 fcbc 	bl	80060a6 <ili9341_WriteString>
			hwscor.p3VSTL = 1;
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <GrandState_Verita+0xac8>)
 8003730:	2201      	movs	r2, #1
 8003732:	709a      	strb	r2, [r3, #2]
		}
		 //// I Brd ----------------------------------------------------------------------------
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8003734:	4b34      	ldr	r3, [pc, #208]	; (8003808 <GrandState_Verita+0xae4>)
 8003736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800373a:	461a      	mov	r2, r3
 800373c:	492d      	ldr	r1, [pc, #180]	; (80037f4 <GrandState_Verita+0xad0>)
 800373e:	4829      	ldr	r0, [pc, #164]	; (80037e4 <GrandState_Verita+0xac0>)
 8003740:	f00a f89a 	bl	800d878 <siprintf>
		if(inatb.CURRENT >= hw_par.cur_brd_tsh_mA){ // Current_treash_mA
 8003744:	4b30      	ldr	r3, [pc, #192]	; (8003808 <GrandState_Verita+0xae4>)
 8003746:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800374a:	461a      	mov	r2, r3
 800374c:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <GrandState_Verita+0xad4>)
 800374e:	889b      	ldrh	r3, [r3, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	db1f      	blt.n	8003794 <GrandState_Verita+0xa70>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <GrandState_Verita+0xabc>)
 8003756:	2200      	movs	r2, #0
 8003758:	9202      	str	r2, [sp, #8]
 800375a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800375e:	9201      	str	r2, [sp, #4]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	9200      	str	r2, [sp, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <GrandState_Verita+0xac0>)
 8003768:	217d      	movs	r1, #125	; 0x7d
 800376a:	2064      	movs	r0, #100	; 0x64
 800376c:	f002 fc9b 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 125, "FAIL", Font20, cl_RED, cl_BLACK);
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <GrandState_Verita+0xabc>)
 8003772:	2200      	movs	r2, #0
 8003774:	9202      	str	r2, [sp, #8]
 8003776:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800377a:	9201      	str	r2, [sp, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	9200      	str	r2, [sp, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <GrandState_Verita+0xad8>)
 8003784:	217d      	movs	r1, #125	; 0x7d
 8003786:	20dc      	movs	r0, #220	; 0xdc
 8003788:	f002 fc8d 	bl	80060a6 <ili9341_WriteString>
			hwscor.pIbrd = 0;
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <GrandState_Verita+0xac8>)
 800378e:	2200      	movs	r2, #0
 8003790:	70da      	strb	r2, [r3, #3]
 8003792:	e05c      	b.n	800384e <GrandState_Verita+0xb2a>
		}else if (inatb.CURRENT <= hw_par.cur_all_min_mA) { // 8
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <GrandState_Verita+0xae4>)
 8003796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800379a:	461a      	mov	r2, r3
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <GrandState_Verita+0xad4>)
 800379e:	885b      	ldrh	r3, [r3, #2]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dc35      	bgt.n	8003810 <GrandState_Verita+0xaec>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <GrandState_Verita+0xabc>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	9202      	str	r2, [sp, #8]
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a0b      	ldr	r2, [pc, #44]	; (80037e4 <GrandState_Verita+0xac0>)
 80037b8:	217d      	movs	r1, #125	; 0x7d
 80037ba:	2064      	movs	r0, #100	; 0x64
 80037bc:	f002 fc73 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 125, "N/A", Font20, cl_ORANGE, cl_BLACK);
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <GrandState_Verita+0xabc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	9202      	str	r2, [sp, #8]
 80037c6:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80037ca:	9201      	str	r2, [sp, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	9200      	str	r2, [sp, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <GrandState_Verita+0xae8>)
 80037d4:	217d      	movs	r1, #125	; 0x7d
 80037d6:	20dc      	movs	r0, #220	; 0xdc
 80037d8:	f002 fc65 	bl	80060a6 <ili9341_WriteString>
 80037dc:	e037      	b.n	800384e <GrandState_Verita+0xb2a>
 80037de:	bf00      	nop
 80037e0:	20000238 	.word	0x20000238
 80037e4:	200006b8 	.word	0x200006b8
 80037e8:	08010098 	.word	0x08010098
 80037ec:	200008c8 	.word	0x200008c8
 80037f0:	200007f8 	.word	0x200007f8
 80037f4:	0801008c 	.word	0x0801008c
 80037f8:	20000828 	.word	0x20000828
 80037fc:	08010090 	.word	0x08010090
 8003800:	20000840 	.word	0x20000840
 8003804:	447a0000 	.word	0x447a0000
 8003808:	20000810 	.word	0x20000810
 800380c:	080100a0 	.word	0x080100a0
		}
		else{
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003810:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <GrandState_Verita+0xd00>)
 8003812:	2200      	movs	r2, #0
 8003814:	9202      	str	r2, [sp, #8]
 8003816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800381a:	9201      	str	r2, [sp, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	9200      	str	r2, [sp, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a81      	ldr	r2, [pc, #516]	; (8003a28 <GrandState_Verita+0xd04>)
 8003824:	217d      	movs	r1, #125	; 0x7d
 8003826:	2064      	movs	r0, #100	; 0x64
 8003828:	f002 fc3d 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 125, "PASS", Font20, cl_GREEN, cl_BLACK);
 800382c:	4b7d      	ldr	r3, [pc, #500]	; (8003a24 <GrandState_Verita+0xd00>)
 800382e:	2200      	movs	r2, #0
 8003830:	9202      	str	r2, [sp, #8]
 8003832:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003836:	9201      	str	r2, [sp, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	9200      	str	r2, [sp, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7b      	ldr	r2, [pc, #492]	; (8003a2c <GrandState_Verita+0xd08>)
 8003840:	217d      	movs	r1, #125	; 0x7d
 8003842:	20dc      	movs	r0, #220	; 0xdc
 8003844:	f002 fc2f 	bl	80060a6 <ili9341_WriteString>
			hwscor.pIbrd = 1;
 8003848:	4b79      	ldr	r3, [pc, #484]	; (8003a30 <GrandState_Verita+0xd0c>)
 800384a:	2201      	movs	r2, #1
 800384c:	70da      	strb	r2, [r3, #3]
		}

		//// I MCU
		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 800384e:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <GrandState_Verita+0xd10>)
 8003850:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003854:	461a      	mov	r2, r3
 8003856:	4978      	ldr	r1, [pc, #480]	; (8003a38 <GrandState_Verita+0xd14>)
 8003858:	4873      	ldr	r0, [pc, #460]	; (8003a28 <GrandState_Verita+0xd04>)
 800385a:	f00a f80d 	bl	800d878 <siprintf>
		if(inata.CURRENT >= hw_par.cur_mcu_tsh_mA){
 800385e:	4b75      	ldr	r3, [pc, #468]	; (8003a34 <GrandState_Verita+0xd10>)
 8003860:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003864:	461a      	mov	r2, r3
 8003866:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <GrandState_Verita+0xd18>)
 8003868:	88db      	ldrh	r3, [r3, #6]
 800386a:	429a      	cmp	r2, r3
 800386c:	db1f      	blt.n	80038ae <GrandState_Verita+0xb8a>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <GrandState_Verita+0xd00>)
 8003870:	2200      	movs	r2, #0
 8003872:	9202      	str	r2, [sp, #8]
 8003874:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003878:	9201      	str	r2, [sp, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	9200      	str	r2, [sp, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a69      	ldr	r2, [pc, #420]	; (8003a28 <GrandState_Verita+0xd04>)
 8003882:	2196      	movs	r1, #150	; 0x96
 8003884:	2064      	movs	r0, #100	; 0x64
 8003886:	f002 fc0e 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 150, "FAIL", Font20, cl_RED, cl_BLACK);
 800388a:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <GrandState_Verita+0xd00>)
 800388c:	2200      	movs	r2, #0
 800388e:	9202      	str	r2, [sp, #8]
 8003890:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a68      	ldr	r2, [pc, #416]	; (8003a40 <GrandState_Verita+0xd1c>)
 800389e:	2196      	movs	r1, #150	; 0x96
 80038a0:	20dc      	movs	r0, #220	; 0xdc
 80038a2:	f002 fc00 	bl	80060a6 <ili9341_WriteString>
			hwscor.pImcu = 0;
 80038a6:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <GrandState_Verita+0xd0c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	711a      	strb	r2, [r3, #4]
 80038ac:	e06d      	b.n	800398a <GrandState_Verita+0xc66>
		}else if (inata.CURRENT <= hw_par.cur_all_min_mA) {
 80038ae:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <GrandState_Verita+0xd10>)
 80038b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <GrandState_Verita+0xd18>)
 80038b8:	885b      	ldrh	r3, [r3, #2]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dc3d      	bgt.n	800393a <GrandState_Verita+0xc16>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <GrandState_Verita+0xd00>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	9202      	str	r2, [sp, #8]
 80038c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038c8:	9201      	str	r2, [sp, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	9200      	str	r2, [sp, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a55      	ldr	r2, [pc, #340]	; (8003a28 <GrandState_Verita+0xd04>)
 80038d2:	2196      	movs	r1, #150	; 0x96
 80038d4:	2064      	movs	r0, #100	; 0x64
 80038d6:	f002 fbe6 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 150, "N/A", Font20, cl_ORANGE, cl_BLACK);
 80038da:	4b52      	ldr	r3, [pc, #328]	; (8003a24 <GrandState_Verita+0xd00>)
 80038dc:	2200      	movs	r2, #0
 80038de:	9202      	str	r2, [sp, #8]
 80038e0:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80038e4:	9201      	str	r2, [sp, #4]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a55      	ldr	r2, [pc, #340]	; (8003a44 <GrandState_Verita+0xd20>)
 80038ee:	2196      	movs	r1, #150	; 0x96
 80038f0:	20dc      	movs	r0, #220	; 0xdc
 80038f2:	f002 fbd8 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(275, 145, "Unplug", Font12, cl_GREENYELLOW, cl_BLACK);
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <GrandState_Verita+0xd24>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	9202      	str	r2, [sp, #8]
 80038fc:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8003900:	9201      	str	r2, [sp, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a50      	ldr	r2, [pc, #320]	; (8003a4c <GrandState_Verita+0xd28>)
 800390a:	2191      	movs	r1, #145	; 0x91
 800390c:	f240 1013 	movw	r0, #275	; 0x113
 8003910:	f002 fbc9 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(275, 157, "JP6?", Font12, cl_GREENYELLOW, cl_BLACK);
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <GrandState_Verita+0xd24>)
 8003916:	2200      	movs	r2, #0
 8003918:	9202      	str	r2, [sp, #8]
 800391a:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 800391e:	9201      	str	r2, [sp, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	9200      	str	r2, [sp, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <GrandState_Verita+0xd2c>)
 8003928:	219d      	movs	r1, #157	; 0x9d
 800392a:	f240 1013 	movw	r0, #275	; 0x113
 800392e:	f002 fbba 	bl	80060a6 <ili9341_WriteString>
			hwscor.pImcu = 0;
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <GrandState_Verita+0xd0c>)
 8003934:	2200      	movs	r2, #0
 8003936:	711a      	strb	r2, [r3, #4]
 8003938:	e027      	b.n	800398a <GrandState_Verita+0xc66>
		}else{
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 800393a:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <GrandState_Verita+0xd00>)
 800393c:	2200      	movs	r2, #0
 800393e:	9202      	str	r2, [sp, #8]
 8003940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003944:	9201      	str	r2, [sp, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a36      	ldr	r2, [pc, #216]	; (8003a28 <GrandState_Verita+0xd04>)
 800394e:	2196      	movs	r1, #150	; 0x96
 8003950:	2064      	movs	r0, #100	; 0x64
 8003952:	f002 fba8 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteString(220, 150, "PASS", Font20, cl_GREEN, cl_BLACK);
 8003956:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <GrandState_Verita+0xd00>)
 8003958:	2200      	movs	r2, #0
 800395a:	9202      	str	r2, [sp, #8]
 800395c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003960:	9201      	str	r2, [sp, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	9200      	str	r2, [sp, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <GrandState_Verita+0xd08>)
 800396a:	2196      	movs	r1, #150	; 0x96
 800396c:	20dc      	movs	r0, #220	; 0xdc
 800396e:	f002 fb9a 	bl	80060a6 <ili9341_WriteString>
			ili9341_FillRect(275, 140, 45, 30, cl_BLACK);
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	231e      	movs	r3, #30
 8003978:	222d      	movs	r2, #45	; 0x2d
 800397a:	218c      	movs	r1, #140	; 0x8c
 800397c:	f240 1013 	movw	r0, #275	; 0x113
 8003980:	f002 f9e8 	bl	8005d54 <ili9341_FillRect>
			hwscor.pImcu = 1;
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <GrandState_Verita+0xd0c>)
 8003986:	2201      	movs	r2, #1
 8003988:	711a      	strb	r2, [r3, #4]
		}

		ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <GrandState_Verita+0xd30>)
 800398c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003990:	9201      	str	r2, [sp, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <GrandState_Verita+0xd34>)
 800399a:	21dc      	movs	r1, #220	; 0xdc
 800399c:	201e      	movs	r0, #30
 800399e:	f002 fbcf 	bl	8006140 <ili9341_WriteStringNoBG>
			 * 		if pressed or 3 sec pass -> go bootloader
			 * else force back lobby & turnoff relay.
			 * */

		//// wait for MCU Booting
		if(HAL_GetTick() >= gScr.timelog){
 80039a2:	f003 f859 	bl	8006a58 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <GrandState_Verita+0xd38>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	f0c0 80b2 	bcc.w	8003b16 <GrandState_Verita+0xdf2>

			//// All pass
			if(hwscor.p3V3 + hwscor.p3VSTL + hwscor.pIbrd + hwscor.pImcu + hwscor.p5V >= 5){
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039ba:	789b      	ldrb	r3, [r3, #2]
 80039bc:	4413      	add	r3, r2
 80039be:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039c0:	78d2      	ldrb	r2, [r2, #3]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039c6:	7912      	ldrb	r2, [r2, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	4a19      	ldr	r2, [pc, #100]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	dd49      	ble.n	8003a68 <GrandState_Verita+0xd44>
				hwscor.ptime_scores++;
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039d6:	795b      	ldrb	r3, [r3, #5]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039de:	715a      	strb	r2, [r3, #5]
				//// make sure All really pass continuously
				if(hwscor.ptime_scores >= 2){
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039e2:	795b      	ldrb	r3, [r3, #5]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f240 8096 	bls.w	8003b16 <GrandState_Verita+0xdf2>
					hwscor.ptime_scores = 0;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <GrandState_Verita+0xd0c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	715a      	strb	r2, [r3, #5]
					ili9341_WriteString(220, 170, "ALL PASS", Font16, cl_BLUE, cl_GREEN);
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <GrandState_Verita+0xd30>)
 80039f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80039f6:	9202      	str	r2, [sp, #8]
 80039f8:	221f      	movs	r2, #31
 80039fa:	9201      	str	r2, [sp, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	9200      	str	r2, [sp, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <GrandState_Verita+0xd3c>)
 8003a04:	21aa      	movs	r1, #170	; 0xaa
 8003a06:	20dc      	movs	r0, #220	; 0xdc
 8003a08:	f002 fb4d 	bl	80060a6 <ili9341_WriteString>
					HAL_Delay(500);
 8003a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a10:	f003 f82e 	bl	8006a70 <HAL_Delay>
					if(gScr.fullflag == ff_runfull){
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <GrandState_Verita+0xd38>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d17c      	bne.n	8003b16 <GrandState_Verita+0xdf2>
						//GrandState = pre_bootloader;
						GrandState = pre_fw_erase;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <GrandState_Verita+0xd40>)
 8003a1e:	2207      	movs	r2, #7
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e078      	b.n	8003b16 <GrandState_Verita+0xdf2>
 8003a24:	20000238 	.word	0x20000238
 8003a28:	200006b8 	.word	0x200006b8
 8003a2c:	08010098 	.word	0x08010098
 8003a30:	200008c8 	.word	0x200008c8
 8003a34:	200007f8 	.word	0x200007f8
 8003a38:	0801008c 	.word	0x0801008c
 8003a3c:	20000828 	.word	0x20000828
 8003a40:	08010090 	.word	0x08010090
 8003a44:	080100a0 	.word	0x080100a0
 8003a48:	20000228 	.word	0x20000228
 8003a4c:	080100a4 	.word	0x080100a4
 8003a50:	080100ac 	.word	0x080100ac
 8003a54:	20000230 	.word	0x20000230
 8003a58:	08010010 	.word	0x08010010
 8003a5c:	200008bc 	.word	0x200008bc
 8003a60:	080100b4 	.word	0x080100b4
 8003a64:	20000006 	.word	0x20000006
				}
			}
			//// Atleast fail
			else{

				hwscor.ptime_scores = 0;
 8003a68:	4ba5      	ldr	r3, [pc, #660]	; (8003d00 <GrandState_Verita+0xfdc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	715a      	strb	r2, [r3, #5]

				if(inatb.CURRENT - inata.CURRENT >= 150 && inatb.CURRENT >= hw_par.cur_brd_tsh_mA){
 8003a6e:	4ba5      	ldr	r3, [pc, #660]	; (8003d04 <GrandState_Verita+0xfe0>)
 8003a70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4ba4      	ldr	r3, [pc, #656]	; (8003d08 <GrandState_Verita+0xfe4>)
 8003a78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b95      	cmp	r3, #149	; 0x95
 8003a80:	dd15      	ble.n	8003aae <GrandState_Verita+0xd8a>
 8003a82:	4ba0      	ldr	r3, [pc, #640]	; (8003d04 <GrandState_Verita+0xfe0>)
 8003a84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4ba0      	ldr	r3, [pc, #640]	; (8003d0c <GrandState_Verita+0xfe8>)
 8003a8c:	889b      	ldrh	r3, [r3, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	db0d      	blt.n	8003aae <GrandState_Verita+0xd8a>
				//// board current bad
				ili9341_WriteString(110, 180, "Board Bad", Font16, cl_YELLOW, cl_BLACK);
 8003a92:	4b9f      	ldr	r3, [pc, #636]	; (8003d10 <GrandState_Verita+0xfec>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	9202      	str	r2, [sp, #8]
 8003a98:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003a9c:	9201      	str	r2, [sp, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	9200      	str	r2, [sp, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a9b      	ldr	r2, [pc, #620]	; (8003d14 <GrandState_Verita+0xff0>)
 8003aa6:	21b4      	movs	r1, #180	; 0xb4
 8003aa8:	206e      	movs	r0, #110	; 0x6e
 8003aaa:	f002 fafc 	bl	80060a6 <ili9341_WriteString>
				}
				if(inata.CURRENT >= hw_par.cur_mcu_tsh_mA){
 8003aae:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <GrandState_Verita+0xfe4>)
 8003ab0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b95      	ldr	r3, [pc, #596]	; (8003d0c <GrandState_Verita+0xfe8>)
 8003ab8:	88db      	ldrh	r3, [r3, #6]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	db0d      	blt.n	8003ada <GrandState_Verita+0xdb6>
				//// Bad MCU
					ili9341_WriteString(20, 180, "MCU Bad", Font16, cl_YELLOW, cl_BLACK);
 8003abe:	4b94      	ldr	r3, [pc, #592]	; (8003d10 <GrandState_Verita+0xfec>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	9202      	str	r2, [sp, #8]
 8003ac4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003ac8:	9201      	str	r2, [sp, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a91      	ldr	r2, [pc, #580]	; (8003d18 <GrandState_Verita+0xff4>)
 8003ad2:	21b4      	movs	r1, #180	; 0xb4
 8003ad4:	2014      	movs	r0, #20
 8003ad6:	f002 fae6 	bl	80060a6 <ili9341_WriteString>
				}

				ili9341_WriteString(20, 205, "Unplug Client & Press back to lobby", Font12, cl_YELLOW, cl_BLACK);
 8003ada:	4b90      	ldr	r3, [pc, #576]	; (8003d1c <GrandState_Verita+0xff8>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	9202      	str	r2, [sp, #8]
 8003ae0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003ae4:	9201      	str	r2, [sp, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	9200      	str	r2, [sp, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8c      	ldr	r2, [pc, #560]	; (8003d20 <GrandState_Verita+0xffc>)
 8003aee:	21cd      	movs	r1, #205	; 0xcd
 8003af0:	2014      	movs	r0, #20
 8003af2:	f002 fad8 	bl	80060a6 <ili9341_WriteString>
				if(k_flag.cnt){
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <GrandState_Verita+0x1000>)
 8003af8:	789b      	ldrb	r3, [r3, #2]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <GrandState_Verita+0xdf2>
				k_flag.cnt = 0;
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <GrandState_Verita+0x1000>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b0a:	4887      	ldr	r0, [pc, #540]	; (8003d28 <GrandState_Verita+0x1004>)
 8003b0c:	f003 fe92 	bl	8007834 <HAL_GPIO_WritePin>
				GrandState = pre_lobby;
 8003b10:	4b86      	ldr	r3, [pc, #536]	; (8003d2c <GrandState_Verita+0x1008>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
				}
			}

		}//// haltimelog

		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 8003b16:	4b83      	ldr	r3, [pc, #524]	; (8003d24 <GrandState_Verita+0x1000>)
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f001 81e0 	beq.w	8004ee0 <GrandState_Verita+0x21bc>
 8003b20:	4b83      	ldr	r3, [pc, #524]	; (8003d30 <GrandState_Verita+0x100c>)
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f041 81db 	bne.w	8004ee0 <GrandState_Verita+0x21bc>
			GrandState = pre_lobby;
 8003b2a:	4b80      	ldr	r3, [pc, #512]	; (8003d2c <GrandState_Verita+0x1008>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <GrandState_Verita+0x1000>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	709a      	strb	r2, [r3, #2]
			gScr.fullflag = 0;
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <GrandState_Verita+0x1010>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b42:	4879      	ldr	r0, [pc, #484]	; (8003d28 <GrandState_Verita+0x1004>)
 8003b44:	f003 fe76 	bl	8007834 <HAL_GPIO_WritePin>
		}

		break; //hw_chk
 8003b48:	f001 b9ca 	b.w	8004ee0 <GrandState_Verita+0x21bc>

	case pre_bootloader:
		stboxp.choice_set = bpoxy_no;
 8003b4c:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <GrandState_Verita+0x100c>)
 8003b4e:	2203      	movs	r2, #3
 8003b50:	705a      	strb	r2, [r3, #1]

		ili9341_FillRect(0, 0, 320, 30, cl_YELLOW);
 8003b52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	231e      	movs	r3, #30
 8003b5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2000      	movs	r0, #0
 8003b62:	f002 f8f7 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	23d2      	movs	r3, #210	; 0xd2
 8003b6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b70:	211e      	movs	r1, #30
 8003b72:	2000      	movs	r0, #0
 8003b74:	f002 f8ee 	bl	8005d54 <ili9341_FillRect>

		ili9341_WriteStringNoBG(60, 5, "- BOOTLOADER -", Font20, cl_BLACK);
 8003b78:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <GrandState_Verita+0x1014>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	9201      	str	r2, [sp, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6d      	ldr	r2, [pc, #436]	; (8003d3c <GrandState_Verita+0x1018>)
 8003b86:	2105      	movs	r1, #5
 8003b88:	203c      	movs	r0, #60	; 0x3c
 8003b8a:	f002 fad9 	bl	8006140 <ili9341_WriteStringNoBG>

		if(gScr.fullflag == ff_runfull){
 8003b8e:	4b69      	ldr	r3, [pc, #420]	; (8003d34 <GrandState_Verita+0x1010>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d112      	bne.n	8003bbc <GrandState_Verita+0xe98>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003b96:	496a      	ldr	r1, [pc, #424]	; (8003d40 <GrandState_Verita+0x101c>)
 8003b98:	486a      	ldr	r0, [pc, #424]	; (8003d44 <GrandState_Verita+0x1020>)
 8003b9a:	f009 fe6d 	bl	800d878 <siprintf>
 8003b9e:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <GrandState_Verita+0x1014>)
 8003ba0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003ba4:	9202      	str	r2, [sp, #8]
 8003ba6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003baa:	9201      	str	r2, [sp, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	9200      	str	r2, [sp, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a64      	ldr	r2, [pc, #400]	; (8003d44 <GrandState_Verita+0x1020>)
 8003bb4:	2105      	movs	r1, #5
 8003bb6:	20fa      	movs	r0, #250	; 0xfa
 8003bb8:	f002 fa75 	bl	80060a6 <ili9341_WriteString>
		}


		ili9341_WriteStringNoBG(20, 60, " .bin script is booting...", Font16, cl_WHITE);
 8003bbc:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <GrandState_Verita+0xfec>)
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	9201      	str	r2, [sp, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	9200      	str	r2, [sp, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <GrandState_Verita+0x1024>)
 8003bcc:	213c      	movs	r1, #60	; 0x3c
 8003bce:	2014      	movs	r0, #20
 8003bd0:	f002 fab6 	bl	8006140 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware ver: %08X", client_bin_Ver);
 8003bd4:	4a5d      	ldr	r2, [pc, #372]	; (8003d4c <GrandState_Verita+0x1028>)
 8003bd6:	495e      	ldr	r1, [pc, #376]	; (8003d50 <GrandState_Verita+0x102c>)
 8003bd8:	485a      	ldr	r0, [pc, #360]	; (8003d44 <GrandState_Verita+0x1020>)
 8003bda:	f009 fe4d 	bl	800d878 <siprintf>
		ili9341_WriteStringNoBG(40, 80, TextDispBuffer, Font16, cl_DARKGREY);
 8003bde:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <GrandState_Verita+0xfec>)
 8003be0:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8003be4:	9201      	str	r2, [sp, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	9200      	str	r2, [sp, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a55      	ldr	r2, [pc, #340]	; (8003d44 <GrandState_Verita+0x1020>)
 8003bee:	2150      	movs	r1, #80	; 0x50
 8003bf0:	2028      	movs	r0, #40	; 0x28
 8003bf2:	f002 faa5 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(40, 110, "Don't pluck  off", Font20, cl_WHITE);
 8003bf6:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <GrandState_Verita+0x1014>)
 8003bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bfc:	9201      	str	r2, [sp, #4]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	9200      	str	r2, [sp, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <GrandState_Verita+0x1030>)
 8003c06:	216e      	movs	r1, #110	; 0x6e
 8003c08:	2028      	movs	r0, #40	; 0x28
 8003c0a:	f002 fa99 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(40, 135, "the client board", Font20, cl_ORANGE);
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <GrandState_Verita+0x1014>)
 8003c10:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003c14:	9201      	str	r2, [sp, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	9200      	str	r2, [sp, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <GrandState_Verita+0x1034>)
 8003c1e:	2187      	movs	r1, #135	; 0x87
 8003c20:	2028      	movs	r0, #40	; 0x28
 8003c22:	f002 fa8d 	bl	8006140 <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <GrandState_Verita+0x1000>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	709a      	strb	r2, [r3, #2]
		GrandState = s_bootloader;
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <GrandState_Verita+0x1008>)
 8003c2e:	220a      	movs	r2, #10
 8003c30:	701a      	strb	r2, [r3, #0]
		//GrandState = pnd_bootloader; gScr.timelog = HAL_GetTick() + 3500;
		break; // pre_bootloader
 8003c32:	f001 b964 	b.w	8004efe <GrandState_Verita+0x21da>

	case pnd_bootloader:
		//// -- Open Client make sure ----
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003c36:	2201      	movs	r2, #1
 8003c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c3c:	483a      	ldr	r0, [pc, #232]	; (8003d28 <GrandState_Verita+0x1004>)
 8003c3e:	f003 fdf9 	bl	8007834 <HAL_GPIO_WritePin>

		if(HAL_GetTick() >= gScr.timelog){
 8003c42:	f002 ff09 	bl	8006a58 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <GrandState_Verita+0x1010>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	f0c1 8149 	bcc.w	8004ee4 <GrandState_Verita+0x21c0>
			GrandState = s_bootloader;
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <GrandState_Verita+0x1008>)
 8003c54:	220a      	movs	r2, #10
 8003c56:	701a      	strb	r2, [r3, #0]
		}
		
		break;
 8003c58:	f001 b944 	b.w	8004ee4 <GrandState_Verita+0x21c0>

	case s_bootloader:
		stboxp.choice_set = bpoxy_def;
 8003c5c:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <GrandState_Verita+0x100c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	705a      	strb	r2, [r3, #1]

		//// -- Open Client make sure ----
		if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 8003c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c66:	4830      	ldr	r0, [pc, #192]	; (8003d28 <GrandState_Verita+0x1004>)
 8003c68:	f003 fdcc 	bl	8007804 <HAL_GPIO_ReadPin>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <GrandState_Verita+0xf56>
			HAL_Delay(150);
 8003c72:	2096      	movs	r0, #150	; 0x96
 8003c74:	f002 fefc 	bl	8006a70 <HAL_Delay>
 8003c78:	e009      	b.n	8003c8e <GrandState_Verita+0xf6a>
		}else{
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c80:	4829      	ldr	r0, [pc, #164]	; (8003d28 <GrandState_Verita+0x1004>)
 8003c82:	f003 fdd7 	bl	8007834 <HAL_GPIO_WritePin>
			HAL_Delay(3500);
 8003c86:	f640 50ac 	movw	r0, #3500	; 0xdac
 8003c8a:	f002 fef1 	bl	8006a70 <HAL_Delay>

		//// enable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_activate();

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8003c8e:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <GrandState_Verita+0x1038>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4a30      	ldr	r2, [pc, #192]	; (8003d5c <GrandState_Verita+0x1038>)
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2201      	movne	r2, #1
 8003ca6:	2200      	moveq	r2, #0
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	4413      	add	r3, r2
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <GrandState_Verita+0x103c>)
 8003cb0:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8003cb2:	482c      	ldr	r0, [pc, #176]	; (8003d64 <GrandState_Verita+0x1040>)
 8003cb4:	f7fd fcf8 	bl	80016a8 <BL_UART_Start>
			//blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);


		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003cb8:	2400      	movs	r4, #0
 8003cba:	e085      	b.n	8003dc8 <GrandState_Verita+0x10a4>
			blrespo = BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8003cbc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	0223      	lsls	r3, r4, #8
 8003cc6:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <GrandState_Verita+0x1044>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	22ff      	movs	r2, #255	; 0xff
 8003ccc:	4825      	ldr	r0, [pc, #148]	; (8003d64 <GrandState_Verita+0x1040>)
 8003cce:	f7fd fd39 	bl	8001744 <BL_UART_WriteMem>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <GrandState_Verita+0x1048>)
 8003cd8:	701a      	strb	r2, [r3, #0]
			//// display ---------------
			if(blrespo == UB_ACK){
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <GrandState_Verita+0x1048>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b79      	cmp	r3, #121	; 0x79
 8003ce0:	d148      	bne.n	8003d74 <GrandState_Verita+0x1050>
				ili9341_WriteString(40, 180, "Wr", Font16, cl_YELLOW, cl_BLACK);
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <GrandState_Verita+0xfec>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	9202      	str	r2, [sp, #8]
 8003ce8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003cec:	9201      	str	r2, [sp, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <GrandState_Verita+0x104c>)
 8003cf6:	21b4      	movs	r1, #180	; 0xb4
 8003cf8:	2028      	movs	r0, #40	; 0x28
 8003cfa:	f002 f9d4 	bl	80060a6 <ili9341_WriteString>
 8003cfe:	e05a      	b.n	8003db6 <GrandState_Verita+0x1092>
 8003d00:	200008c8 	.word	0x200008c8
 8003d04:	20000810 	.word	0x20000810
 8003d08:	200007f8 	.word	0x200007f8
 8003d0c:	20000828 	.word	0x20000828
 8003d10:	20000230 	.word	0x20000230
 8003d14:	080100c0 	.word	0x080100c0
 8003d18:	080100cc 	.word	0x080100cc
 8003d1c:	20000228 	.word	0x20000228
 8003d20:	080100d4 	.word	0x080100d4
 8003d24:	200008b8 	.word	0x200008b8
 8003d28:	40020800 	.word	0x40020800
 8003d2c:	20000006 	.word	0x20000006
 8003d30:	200008d4 	.word	0x200008d4
 8003d34:	200008bc 	.word	0x200008bc
 8003d38:	20000238 	.word	0x20000238
 8003d3c:	080100f8 	.word	0x080100f8
 8003d40:	08010018 	.word	0x08010018
 8003d44:	200006b8 	.word	0x200006b8
 8003d48:	08010108 	.word	0x08010108
 8003d4c:	13280723 	.word	0x13280723
 8003d50:	08010124 	.word	0x08010124
 8003d54:	08010138 	.word	0x08010138
 8003d58:	0801014c 	.word	0x0801014c
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	20000780 	.word	0x20000780
 8003d64:	2000058c 	.word	0x2000058c
 8003d68:	080301bc 	.word	0x080301bc
 8003d6c:	20000781 	.word	0x20000781
 8003d70:	08010160 	.word	0x08010160
			}else if(blrespo == UB_NACK){
 8003d74:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <GrandState_Verita+0x1150>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b1f      	cmp	r3, #31
 8003d7a:	d10e      	bne.n	8003d9a <GrandState_Verita+0x1076>
				ili9341_WriteString(40, 180, "B", Font16, cl_YELLOW, cl_BLACK);
 8003d7c:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <GrandState_Verita+0x1154>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	9202      	str	r2, [sp, #8]
 8003d82:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003d86:	9201      	str	r2, [sp, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	9200      	str	r2, [sp, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <GrandState_Verita+0x1158>)
 8003d90:	21b4      	movs	r1, #180	; 0xb4
 8003d92:	2028      	movs	r0, #40	; 0x28
 8003d94:	f002 f987 	bl	80060a6 <ili9341_WriteString>
 8003d98:	e00d      	b.n	8003db6 <GrandState_Verita+0x1092>
			}
			else{
				ili9341_WriteString(40, 180, "-", Font16, cl_GRAY, cl_BLACK);
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <GrandState_Verita+0x1154>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	f645 22eb 	movw	r2, #23275	; 0x5aeb
 8003da4:	9201      	str	r2, [sp, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	9200      	str	r2, [sp, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <GrandState_Verita+0x115c>)
 8003dae:	21b4      	movs	r1, #180	; 0xb4
 8003db0:	2028      	movs	r0, #40	; 0x28
 8003db2:	f002 f978 	bl	80060a6 <ili9341_WriteString>
			}
			ili9341_FillRect(40, 180, 30, 30, cl_BLACK);
 8003db6:	2300      	movs	r3, #0
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	231e      	movs	r3, #30
 8003dbc:	221e      	movs	r2, #30
 8003dbe:	21b4      	movs	r1, #180	; 0xb4
 8003dc0:	2028      	movs	r0, #40	; 0x28
 8003dc2:	f001 ffc7 	bl	8005d54 <ili9341_FillRect>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003dc6:	3401      	adds	r4, #1
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <GrandState_Verita+0x1160>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	429c      	cmp	r4, r3
 8003dd0:	f6ff af74 	blt.w	8003cbc <GrandState_Verita+0xf98>
			//// display ---------------
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <GrandState_Verita+0x1160>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8003ddc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <GrandState_Verita+0x1164>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <GrandState_Verita+0x1160>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	4926      	ldr	r1, [pc, #152]	; (8003e8c <GrandState_Verita+0x1168>)
 8003df4:	440b      	add	r3, r1
 8003df6:	4601      	mov	r1, r0
 8003df8:	4825      	ldr	r0, [pc, #148]	; (8003e90 <GrandState_Verita+0x116c>)
 8003dfa:	f7fd fca3 	bl	8001744 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8003dfe:	f7fd fc83 	bl	8001708 <BL_UART_Finish>
		//		HAL_Delay(50);
		//		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
		//		HAL_Delay(1000);
		//// Hard reset--------

		ili9341_WriteStringNoBG(140, 160, "Finish", Font24, cl_GREEN);
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <GrandState_Verita+0x1170>)
 8003e04:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e08:	9201      	str	r2, [sp, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	9200      	str	r2, [sp, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <GrandState_Verita+0x1174>)
 8003e12:	21a0      	movs	r1, #160	; 0xa0
 8003e14:	208c      	movs	r0, #140	; 0x8c
 8003e16:	f002 f993 	bl	8006140 <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e1e:	f002 fe27 	bl	8006a70 <HAL_Delay>

		ili9341_WriteStringNoBG(140, 190, "Start", Font24, cl_GREEN);
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <GrandState_Verita+0x1170>)
 8003e24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e28:	9201      	str	r2, [sp, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	9200      	str	r2, [sp, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <GrandState_Verita+0x1178>)
 8003e32:	21be      	movs	r1, #190	; 0xbe
 8003e34:	208c      	movs	r0, #140	; 0x8c
 8003e36:	f002 f983 	bl	8006140 <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e3e:	f002 fe17 	bl	8006a70 <HAL_Delay>

		//// disable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_Deactivate();

		k_flag.cnt = 0;//// prevent over state jump
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <GrandState_Verita+0x117c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	709a      	strb	r2, [r3, #2]
		if(gScr.fullflag == ff_runfull){
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <GrandState_Verita+0x1180>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d10b      	bne.n	8003e68 <GrandState_Verita+0x1144>
			GrandState = pre_gpio_chk;
 8003e50:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <GrandState_Verita+0x1184>)
 8003e52:	220d      	movs	r2, #13
 8003e54:	701a      	strb	r2, [r3, #0]
			//// wait for gpio_chk before tomeout ////
			gScr.timelog = HAL_GetTick() + 3500;
 8003e56:	f002 fdff 	bl	8006a58 <HAL_GetTick>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 8003e60:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <GrandState_Verita+0x1180>)
 8003e62:	6053      	str	r3, [r2, #4]
		}else{
			GrandState = pre_fw_lob;
		}

		break; ////s_bootloader
 8003e64:	f001 b84b 	b.w	8004efe <GrandState_Verita+0x21da>
			GrandState = pre_fw_lob;
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <GrandState_Verita+0x1184>)
 8003e6a:	2205      	movs	r2, #5
 8003e6c:	701a      	strb	r2, [r3, #0]
		break; ////s_bootloader
 8003e6e:	f001 b846 	b.w	8004efe <GrandState_Verita+0x21da>
 8003e72:	bf00      	nop
 8003e74:	20000781 	.word	0x20000781
 8003e78:	20000230 	.word	0x20000230
 8003e7c:	08010164 	.word	0x08010164
 8003e80:	08010168 	.word	0x08010168
 8003e84:	20000780 	.word	0x20000780
 8003e88:	20000004 	.word	0x20000004
 8003e8c:	080301bc 	.word	0x080301bc
 8003e90:	2000058c 	.word	0x2000058c
 8003e94:	20000240 	.word	0x20000240
 8003e98:	0801016c 	.word	0x0801016c
 8003e9c:	08010174 	.word	0x08010174
 8003ea0:	200008b8 	.word	0x200008b8
 8003ea4:	200008bc 	.word	0x200008bc
 8003ea8:	20000006 	.word	0x20000006

	case pre_gpio_chk:
			stboxp.choice_set = bpoxy_def;
 8003eac:	4bac      	ldr	r3, [pc, #688]	; (8004160 <GrandState_Verita+0x143c>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	705a      	strb	r2, [r3, #1]
			//// Send CMD to client to run GPIO testscript
			Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	21a1      	movs	r1, #161	; 0xa1
 8003eb6:	48ab      	ldr	r0, [pc, #684]	; (8004164 <GrandState_Verita+0x1440>)
 8003eb8:	f7fd fbba 	bl	8001630 <Tx_UART_Verita_Command>

			//// Set UI
			ili9341_FillRect(0, 0, 320, 30, cl_DARKCYAN);
 8003ebc:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	231e      	movs	r3, #30
 8003ec4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ec8:	2100      	movs	r1, #0
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f001 ff42 	bl	8005d54 <ili9341_FillRect>
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	23d2      	movs	r3, #210	; 0xd2
 8003ed6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003eda:	211e      	movs	r1, #30
 8003edc:	2000      	movs	r0, #0
 8003ede:	f001 ff39 	bl	8005d54 <ili9341_FillRect>

			ili9341_WriteStringNoBG(60, 5, "GPIO Selftest", Font20, cl_WHITE);
 8003ee2:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <GrandState_Verita+0x1444>)
 8003ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee8:	9201      	str	r2, [sp, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	9200      	str	r2, [sp, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a9e      	ldr	r2, [pc, #632]	; (800416c <GrandState_Verita+0x1448>)
 8003ef2:	2105      	movs	r1, #5
 8003ef4:	203c      	movs	r0, #60	; 0x3c
 8003ef6:	f002 f923 	bl	8006140 <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8003efa:	4b9d      	ldr	r3, [pc, #628]	; (8004170 <GrandState_Verita+0x144c>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d112      	bne.n	8003f28 <GrandState_Verita+0x1204>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003f02:	499c      	ldr	r1, [pc, #624]	; (8004174 <GrandState_Verita+0x1450>)
 8003f04:	489c      	ldr	r0, [pc, #624]	; (8004178 <GrandState_Verita+0x1454>)
 8003f06:	f009 fcb7 	bl	800d878 <siprintf>
 8003f0a:	4b97      	ldr	r3, [pc, #604]	; (8004168 <GrandState_Verita+0x1444>)
 8003f0c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003f10:	9202      	str	r2, [sp, #8]
 8003f12:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003f16:	9201      	str	r2, [sp, #4]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	9200      	str	r2, [sp, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a96      	ldr	r2, [pc, #600]	; (8004178 <GrandState_Verita+0x1454>)
 8003f20:	2105      	movs	r1, #5
 8003f22:	20fa      	movs	r0, #250	; 0xfa
 8003f24:	f002 f8bf 	bl	80060a6 <ili9341_WriteString>
			}

			ili9341_WriteStringNoBG(250, 175, "MCU Temp:", Font12, cl_WHITE);
 8003f28:	4b94      	ldr	r3, [pc, #592]	; (800417c <GrandState_Verita+0x1458>)
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	9201      	str	r2, [sp, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	9200      	str	r2, [sp, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a92      	ldr	r2, [pc, #584]	; (8004180 <GrandState_Verita+0x145c>)
 8003f38:	21af      	movs	r1, #175	; 0xaf
 8003f3a:	20fa      	movs	r0, #250	; 0xfa
 8003f3c:	f002 f900 	bl	8006140 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(250, 210, "FWID:", Font12, cl_WHITE);
 8003f40:	4b8e      	ldr	r3, [pc, #568]	; (800417c <GrandState_Verita+0x1458>)
 8003f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f46:	9201      	str	r2, [sp, #4]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	9200      	str	r2, [sp, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a8d      	ldr	r2, [pc, #564]	; (8004184 <GrandState_Verita+0x1460>)
 8003f50:	21d2      	movs	r1, #210	; 0xd2
 8003f52:	20fa      	movs	r0, #250	; 0xfa
 8003f54:	f002 f8f4 	bl	8006140 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(30, 220, "Finish >> ", Font16, cl_GREENYELLOW);
 8003f58:	4b8b      	ldr	r3, [pc, #556]	; (8004188 <GrandState_Verita+0x1464>)
 8003f5a:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8003f5e:	9201      	str	r2, [sp, #4]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	9200      	str	r2, [sp, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a89      	ldr	r2, [pc, #548]	; (800418c <GrandState_Verita+0x1468>)
 8003f68:	21dc      	movs	r1, #220	; 0xdc
 8003f6a:	201e      	movs	r0, #30
 8003f6c:	f002 f8e8 	bl	8006140 <ili9341_WriteStringNoBG>


			//// checkif GPIO test is finished ?  || HAL_GetTick() >= gScr.timelog
			if(VRB_CL.Mark.Flag_next){ // runalltest cplt
 8003f70:	4b87      	ldr	r3, [pc, #540]	; (8004190 <GrandState_Verita+0x146c>)
 8003f72:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8167 	beq.w	800424a <GrandState_Verita+0x1526>
				Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_SendALLTestData);
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	21a1      	movs	r1, #161	; 0xa1
 8003f80:	4878      	ldr	r0, [pc, #480]	; (8004164 <GrandState_Verita+0x1440>)
 8003f82:	f7fd fb55 	bl	8001630 <Tx_UART_Verita_Command>
				HAL_Delay(150);
 8003f86:	2096      	movs	r0, #150	; 0x96
 8003f88:	f002 fd72 	bl	8006a70 <HAL_Delay>

				if(VRB_CL.Mark.Flag_ger == VRF_SendALLTestData){ //// 'll send this flag back after cplt
 8003f8c:	4b80      	ldr	r3, [pc, #512]	; (8004190 <GrandState_Verita+0x146c>)
 8003f8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	f040 813e 	bne.w	8004214 <GrandState_Verita+0x14f0>

					resetgpio_char();
 8003f98:	f001 f840 	bl	800501c <resetgpio_char>

					Compare_pin_32(VRB_CL.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	; (8004190 <GrandState_Verita+0x146c>)
 8003f9e:	6858      	ldr	r0, [r3, #4]
 8003fa0:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <GrandState_Verita+0x1470>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	497c      	ldr	r1, [pc, #496]	; (8004198 <GrandState_Verita+0x1474>)
 8003fa6:	f7fe fd11 	bl	80029cc <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 8003faa:	4b79      	ldr	r3, [pc, #484]	; (8004190 <GrandState_Verita+0x146c>)
 8003fac:	6898      	ldr	r0, [r3, #8]
 8003fae:	4b7b      	ldr	r3, [pc, #492]	; (800419c <GrandState_Verita+0x1478>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4979      	ldr	r1, [pc, #484]	; (8004198 <GrandState_Verita+0x1474>)
 8003fb4:	f7fe fd0a 	bl	80029cc <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <GrandState_Verita+0x146c>)
 8003fba:	68d8      	ldr	r0, [r3, #12]
 8003fbc:	4b78      	ldr	r3, [pc, #480]	; (80041a0 <GrandState_Verita+0x147c>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4975      	ldr	r1, [pc, #468]	; (8004198 <GrandState_Verita+0x1474>)
 8003fc2:	f7fe fd03 	bl	80029cc <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <GrandState_Verita+0x146c>)
 8003fc8:	6918      	ldr	r0, [r3, #16]
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <GrandState_Verita+0x1480>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4976      	ldr	r1, [pc, #472]	; (80041a8 <GrandState_Verita+0x1484>)
 8003fd0:	f7fe fcfc 	bl	80029cc <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8003fd4:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <GrandState_Verita+0x146c>)
 8003fd6:	6958      	ldr	r0, [r3, #20]
 8003fd8:	4b74      	ldr	r3, [pc, #464]	; (80041ac <GrandState_Verita+0x1488>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4972      	ldr	r1, [pc, #456]	; (80041a8 <GrandState_Verita+0x1484>)
 8003fde:	f7fe fcf5 	bl	80029cc <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 8003fe2:	4b6b      	ldr	r3, [pc, #428]	; (8004190 <GrandState_Verita+0x146c>)
 8003fe4:	6998      	ldr	r0, [r3, #24]
 8003fe6:	4b72      	ldr	r3, [pc, #456]	; (80041b0 <GrandState_Verita+0x148c>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	496f      	ldr	r1, [pc, #444]	; (80041a8 <GrandState_Verita+0x1484>)
 8003fec:	f7fe fcee 	bl	80029cc <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 8003ff0:	4b67      	ldr	r3, [pc, #412]	; (8004190 <GrandState_Verita+0x146c>)
 8003ff2:	69d8      	ldr	r0, [r3, #28]
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <GrandState_Verita+0x1490>)
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	496f      	ldr	r1, [pc, #444]	; (80041b8 <GrandState_Verita+0x1494>)
 8003ffa:	f7fe fce7 	bl	80029cc <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8003ffe:	4b64      	ldr	r3, [pc, #400]	; (8004190 <GrandState_Verita+0x146c>)
 8004000:	6a18      	ldr	r0, [r3, #32]
 8004002:	4b6e      	ldr	r3, [pc, #440]	; (80041bc <GrandState_Verita+0x1498>)
 8004004:	2202      	movs	r2, #2
 8004006:	496c      	ldr	r1, [pc, #432]	; (80041b8 <GrandState_Verita+0x1494>)
 8004008:	f7fe fce0 	bl	80029cc <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 800400c:	4b60      	ldr	r3, [pc, #384]	; (8004190 <GrandState_Verita+0x146c>)
 800400e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004010:	4b6b      	ldr	r3, [pc, #428]	; (80041c0 <GrandState_Verita+0x149c>)
 8004012:	2202      	movs	r2, #2
 8004014:	4968      	ldr	r1, [pc, #416]	; (80041b8 <GrandState_Verita+0x1494>)
 8004016:	f7fe fcd9 	bl	80029cc <Compare_pin_32>

					HAL_Delay(5);
 800401a:	2005      	movs	r0, #5
 800401c:	f002 fd28 	bl	8006a70 <HAL_Delay>

					CheckAllPass();
 8004020:	f7fe fd8e 	bl	8002b40 <CheckAllPass>
					if(cnt_allpass >= 9){
 8004024:	4b67      	ldr	r3, [pc, #412]	; (80041c4 <GrandState_Verita+0x14a0>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d91f      	bls.n	800406c <GrandState_Verita+0x1348>
						  //// there're 9 pass
						  sprintf(TextDispBuffer, "ALL");
 800402c:	4966      	ldr	r1, [pc, #408]	; (80041c8 <GrandState_Verita+0x14a4>)
 800402e:	4852      	ldr	r0, [pc, #328]	; (8004178 <GrandState_Verita+0x1454>)
 8004030:	f009 fc22 	bl	800d878 <siprintf>
						  ili9341_WriteStringNoBG(205, 80, TextDispBuffer, Font20, cl_GREEN);
 8004034:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <GrandState_Verita+0x1444>)
 8004036:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800403a:	9201      	str	r2, [sp, #4]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	9200      	str	r2, [sp, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a4d      	ldr	r2, [pc, #308]	; (8004178 <GrandState_Verita+0x1454>)
 8004044:	2150      	movs	r1, #80	; 0x50
 8004046:	20cd      	movs	r0, #205	; 0xcd
 8004048:	f002 f87a 	bl	8006140 <ili9341_WriteStringNoBG>

						  sprintf(TextDispBuffer, "PASS");
 800404c:	495f      	ldr	r1, [pc, #380]	; (80041cc <GrandState_Verita+0x14a8>)
 800404e:	484a      	ldr	r0, [pc, #296]	; (8004178 <GrandState_Verita+0x1454>)
 8004050:	f009 fc12 	bl	800d878 <siprintf>
						  ili9341_WriteStringNoBG(200, 110, TextDispBuffer, Font20, cl_GREEN);
 8004054:	4b44      	ldr	r3, [pc, #272]	; (8004168 <GrandState_Verita+0x1444>)
 8004056:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800405a:	9201      	str	r2, [sp, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	9200      	str	r2, [sp, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a45      	ldr	r2, [pc, #276]	; (8004178 <GrandState_Verita+0x1454>)
 8004064:	216e      	movs	r1, #110	; 0x6e
 8004066:	20c8      	movs	r0, #200	; 0xc8
 8004068:	f002 f86a 	bl	8006140 <ili9341_WriteStringNoBG>
					 }else{}

					 sprintf(TextDispBuffer, WR_A_PUPDR); ili9341_WriteStringNoBG(10, 35, TextDispBuffer, Font16, cl_WHITE);
 800406c:	4949      	ldr	r1, [pc, #292]	; (8004194 <GrandState_Verita+0x1470>)
 800406e:	4842      	ldr	r0, [pc, #264]	; (8004178 <GrandState_Verita+0x1454>)
 8004070:	f009 fc02 	bl	800d878 <siprintf>
 8004074:	4b44      	ldr	r3, [pc, #272]	; (8004188 <GrandState_Verita+0x1464>)
 8004076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800407a:	9201      	str	r2, [sp, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	9200      	str	r2, [sp, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a3d      	ldr	r2, [pc, #244]	; (8004178 <GrandState_Verita+0x1454>)
 8004084:	2123      	movs	r1, #35	; 0x23
 8004086:	200a      	movs	r0, #10
 8004088:	f002 f85a 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_A_OPP); ili9341_WriteStringNoBG(10, 55, TextDispBuffer, Font16, cl_WHITE);
 800408c:	4943      	ldr	r1, [pc, #268]	; (800419c <GrandState_Verita+0x1478>)
 800408e:	483a      	ldr	r0, [pc, #232]	; (8004178 <GrandState_Verita+0x1454>)
 8004090:	f009 fbf2 	bl	800d878 <siprintf>
 8004094:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <GrandState_Verita+0x1464>)
 8004096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800409a:	9201      	str	r2, [sp, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	9200      	str	r2, [sp, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a35      	ldr	r2, [pc, #212]	; (8004178 <GrandState_Verita+0x1454>)
 80040a4:	2137      	movs	r1, #55	; 0x37
 80040a6:	200a      	movs	r0, #10
 80040a8:	f002 f84a 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_A_OOD); ili9341_WriteStringNoBG(10, 75, TextDispBuffer, Font16, cl_WHITE);
 80040ac:	493c      	ldr	r1, [pc, #240]	; (80041a0 <GrandState_Verita+0x147c>)
 80040ae:	4832      	ldr	r0, [pc, #200]	; (8004178 <GrandState_Verita+0x1454>)
 80040b0:	f009 fbe2 	bl	800d878 <siprintf>
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <GrandState_Verita+0x1464>)
 80040b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ba:	9201      	str	r2, [sp, #4]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	9200      	str	r2, [sp, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <GrandState_Verita+0x1454>)
 80040c4:	214b      	movs	r1, #75	; 0x4b
 80040c6:	200a      	movs	r0, #10
 80040c8:	f002 f83a 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_B_PUPDR); ili9341_WriteStringNoBG(10, 95, TextDispBuffer, Font16, cl_WHITE);
 80040cc:	4935      	ldr	r1, [pc, #212]	; (80041a4 <GrandState_Verita+0x1480>)
 80040ce:	482a      	ldr	r0, [pc, #168]	; (8004178 <GrandState_Verita+0x1454>)
 80040d0:	f009 fbd2 	bl	800d878 <siprintf>
 80040d4:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <GrandState_Verita+0x1464>)
 80040d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040da:	9201      	str	r2, [sp, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	9200      	str	r2, [sp, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <GrandState_Verita+0x1454>)
 80040e4:	215f      	movs	r1, #95	; 0x5f
 80040e6:	200a      	movs	r0, #10
 80040e8:	f002 f82a 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_B_OPP); ili9341_WriteStringNoBG(10, 115, TextDispBuffer, Font16, cl_WHITE);
 80040ec:	492f      	ldr	r1, [pc, #188]	; (80041ac <GrandState_Verita+0x1488>)
 80040ee:	4822      	ldr	r0, [pc, #136]	; (8004178 <GrandState_Verita+0x1454>)
 80040f0:	f009 fbc2 	bl	800d878 <siprintf>
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <GrandState_Verita+0x1464>)
 80040f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040fa:	9201      	str	r2, [sp, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	9200      	str	r2, [sp, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <GrandState_Verita+0x1454>)
 8004104:	2173      	movs	r1, #115	; 0x73
 8004106:	200a      	movs	r0, #10
 8004108:	f002 f81a 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_B_OOD); ili9341_WriteStringNoBG(10, 135, TextDispBuffer, Font16, cl_WHITE);
 800410c:	4928      	ldr	r1, [pc, #160]	; (80041b0 <GrandState_Verita+0x148c>)
 800410e:	481a      	ldr	r0, [pc, #104]	; (8004178 <GrandState_Verita+0x1454>)
 8004110:	f009 fbb2 	bl	800d878 <siprintf>
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <GrandState_Verita+0x1464>)
 8004116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800411a:	9201      	str	r2, [sp, #4]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	9200      	str	r2, [sp, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <GrandState_Verita+0x1454>)
 8004124:	2187      	movs	r1, #135	; 0x87
 8004126:	200a      	movs	r0, #10
 8004128:	f002 f80a 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_C_PUPDR); ili9341_WriteStringNoBG(10, 155, TextDispBuffer, Font16, cl_WHITE);
 800412c:	4921      	ldr	r1, [pc, #132]	; (80041b4 <GrandState_Verita+0x1490>)
 800412e:	4812      	ldr	r0, [pc, #72]	; (8004178 <GrandState_Verita+0x1454>)
 8004130:	f009 fba2 	bl	800d878 <siprintf>
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <GrandState_Verita+0x1464>)
 8004136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800413a:	9201      	str	r2, [sp, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	9200      	str	r2, [sp, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <GrandState_Verita+0x1454>)
 8004144:	219b      	movs	r1, #155	; 0x9b
 8004146:	200a      	movs	r0, #10
 8004148:	f001 fffa 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_C_OPP); ili9341_WriteStringNoBG(10, 175, TextDispBuffer, Font16, cl_WHITE);
 800414c:	491b      	ldr	r1, [pc, #108]	; (80041bc <GrandState_Verita+0x1498>)
 800414e:	480a      	ldr	r0, [pc, #40]	; (8004178 <GrandState_Verita+0x1454>)
 8004150:	f009 fb92 	bl	800d878 <siprintf>
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <GrandState_Verita+0x1464>)
 8004156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800415a:	9201      	str	r2, [sp, #4]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	e037      	b.n	80041d0 <GrandState_Verita+0x14ac>
 8004160:	200008d4 	.word	0x200008d4
 8004164:	20000614 	.word	0x20000614
 8004168:	20000238 	.word	0x20000238
 800416c:	0801017c 	.word	0x0801017c
 8004170:	200008bc 	.word	0x200008bc
 8004174:	08010018 	.word	0x08010018
 8004178:	200006b8 	.word	0x200006b8
 800417c:	20000228 	.word	0x20000228
 8004180:	0801018c 	.word	0x0801018c
 8004184:	08010198 	.word	0x08010198
 8004188:	20000230 	.word	0x20000230
 800418c:	080101a0 	.word	0x080101a0
 8004190:	20000784 	.word	0x20000784
 8004194:	2000005c 	.word	0x2000005c
 8004198:	20000008 	.word	0x20000008
 800419c:	200000bc 	.word	0x200000bc
 80041a0:	2000011c 	.word	0x2000011c
 80041a4:	2000007c 	.word	0x2000007c
 80041a8:	2000001c 	.word	0x2000001c
 80041ac:	200000dc 	.word	0x200000dc
 80041b0:	2000013c 	.word	0x2000013c
 80041b4:	2000009c 	.word	0x2000009c
 80041b8:	2000003c 	.word	0x2000003c
 80041bc:	200000fc 	.word	0x200000fc
 80041c0:	2000015c 	.word	0x2000015c
 80041c4:	200008ce 	.word	0x200008ce
 80041c8:	080101ac 	.word	0x080101ac
 80041cc:	08010098 	.word	0x08010098
 80041d0:	9200      	str	r2, [sp, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a76      	ldr	r2, [pc, #472]	; (80043b0 <GrandState_Verita+0x168c>)
 80041d6:	21af      	movs	r1, #175	; 0xaf
 80041d8:	200a      	movs	r0, #10
 80041da:	f001 ffb1 	bl	8006140 <ili9341_WriteStringNoBG>
					 sprintf(TextDispBuffer, WR_C_OOD); ili9341_WriteStringNoBG(10, 195, TextDispBuffer, Font16, cl_WHITE);
 80041de:	4975      	ldr	r1, [pc, #468]	; (80043b4 <GrandState_Verita+0x1690>)
 80041e0:	4873      	ldr	r0, [pc, #460]	; (80043b0 <GrandState_Verita+0x168c>)
 80041e2:	f009 fb49 	bl	800d878 <siprintf>
 80041e6:	4b74      	ldr	r3, [pc, #464]	; (80043b8 <GrandState_Verita+0x1694>)
 80041e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ec:	9201      	str	r2, [sp, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	9200      	str	r2, [sp, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6e      	ldr	r2, [pc, #440]	; (80043b0 <GrandState_Verita+0x168c>)
 80041f6:	21c3      	movs	r1, #195	; 0xc3
 80041f8:	200a      	movs	r0, #10
 80041fa:	f001 ffa1 	bl	8006140 <ili9341_WriteStringNoBG>

					VRB_CL.Mark.Flag_ger = 0;
 80041fe:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <GrandState_Verita+0x1698>)
 8004200:	2200      	movs	r2, #0
 8004202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					VRB_CL.Mark.Flag_next = 0;
 8004206:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <GrandState_Verita+0x1698>)
 8004208:	2200      	movs	r2, #0
 800420a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					GrandState = gpio_chk;
 800420e:	4b6c      	ldr	r3, [pc, #432]	; (80043c0 <GrandState_Verita+0x169c>)
 8004210:	220e      	movs	r2, #14
 8004212:	701a      	strb	r2, [r3, #0]
				}

				//// Buzzer scream
				buzzr.flag = 3;
 8004214:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <GrandState_Verita+0x16a0>)
 8004216:	2203      	movs	r2, #3
 8004218:	701a      	strb	r2, [r3, #0]
				buzzr.priod_up = 300;
 800421a:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <GrandState_Verita+0x16a0>)
 800421c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004220:	805a      	strh	r2, [r3, #2]
				buzzer_scream_cnt();
 8004222:	f7fe fd09 	bl	8002c38 <buzzer_scream_cnt>

				////soft reset
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_SET);
 8004226:	2201      	movs	r2, #1
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	4867      	ldr	r0, [pc, #412]	; (80043c8 <GrandState_Verita+0x16a4>)
 800422c:	f003 fb02 	bl	8007834 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8004230:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004234:	f002 fc1c 	bl	8006a70 <HAL_Delay>
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_RESET);
 8004238:	2200      	movs	r2, #0
 800423a:	2140      	movs	r1, #64	; 0x40
 800423c:	4862      	ldr	r0, [pc, #392]	; (80043c8 <GrandState_Verita+0x16a4>)
 800423e:	f003 faf9 	bl	8007834 <HAL_GPIO_WritePin>

				GrandState = gpio_chk;
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <GrandState_Verita+0x169c>)
 8004244:	220e      	movs	r2, #14
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e031      	b.n	80042ae <GrandState_Verita+0x158a>
			}
			else if(HAL_GetTick() >= gScr.timelog){ //timeout connection
 800424a:	f002 fc05 	bl	8006a58 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	4b5e      	ldr	r3, [pc, #376]	; (80043cc <GrandState_Verita+0x16a8>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d32a      	bcc.n	80042ae <GrandState_Verita+0x158a>

				sprintf(TextDispBuffer,"Connection");
 8004258:	495d      	ldr	r1, [pc, #372]	; (80043d0 <GrandState_Verita+0x16ac>)
 800425a:	4855      	ldr	r0, [pc, #340]	; (80043b0 <GrandState_Verita+0x168c>)
 800425c:	f009 fb0c 	bl	800d878 <siprintf>
				ili9341_WriteStringNoBG(80, 50, TextDispBuffer, Font20, cl_WHITE);
 8004260:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <GrandState_Verita+0x16b0>)
 8004262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004266:	9201      	str	r2, [sp, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	9200      	str	r2, [sp, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a50      	ldr	r2, [pc, #320]	; (80043b0 <GrandState_Verita+0x168c>)
 8004270:	2132      	movs	r1, #50	; 0x32
 8004272:	2050      	movs	r0, #80	; 0x50
 8004274:	f001 ff64 	bl	8006140 <ili9341_WriteStringNoBG>
				sprintf(TextDispBuffer,"Timeout");
 8004278:	4957      	ldr	r1, [pc, #348]	; (80043d8 <GrandState_Verita+0x16b4>)
 800427a:	484d      	ldr	r0, [pc, #308]	; (80043b0 <GrandState_Verita+0x168c>)
 800427c:	f009 fafc 	bl	800d878 <siprintf>
				ili9341_WriteStringNoBG(95, 75, TextDispBuffer, Font20, cl_WHITE);
 8004280:	4b54      	ldr	r3, [pc, #336]	; (80043d4 <GrandState_Verita+0x16b0>)
 8004282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004286:	9201      	str	r2, [sp, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	9200      	str	r2, [sp, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a48      	ldr	r2, [pc, #288]	; (80043b0 <GrandState_Verita+0x168c>)
 8004290:	214b      	movs	r1, #75	; 0x4b
 8004292:	205f      	movs	r0, #95	; 0x5f
 8004294:	f001 ff54 	bl	8006140 <ili9341_WriteStringNoBG>
				VRB_CL.Mark.Flag_ger = 0;
 8004298:	4b48      	ldr	r3, [pc, #288]	; (80043bc <GrandState_Verita+0x1698>)
 800429a:	2200      	movs	r2, #0
 800429c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				VRB_CL.Mark.Flag_next = 0;
 80042a0:	4b46      	ldr	r3, [pc, #280]	; (80043bc <GrandState_Verita+0x1698>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				GrandState = gpio_chk;
 80042a8:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <GrandState_Verita+0x169c>)
 80042aa:	220e      	movs	r2, #14
 80042ac:	701a      	strb	r2, [r3, #0]
			}else{}

			k_flag.cnt = 0;
 80042ae:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <GrandState_Verita+0x16b8>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	709a      	strb	r2, [r3, #2]
			break; //// pre_gpio_chk
 80042b4:	f000 be23 	b.w	8004efe <GrandState_Verita+0x21da>

		case gpio_chk:
			stboxp.choice_set = bpoxy_def;
 80042b8:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <GrandState_Verita+0x16bc>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	705a      	strb	r2, [r3, #1]


			sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <GrandState_Verita+0x16c0>)
 80042c0:	edd3 7a00 	vldr	s15, [r3]
 80042c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	d504      	bpl.n	80042d8 <GrandState_Verita+0x15b4>
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e006      	b.n	80042e6 <GrandState_Verita+0x15c2>
 80042d8:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <GrandState_Verita+0x16c0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc f93b 	bl	8000558 <__aeabi_f2d>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4940      	ldr	r1, [pc, #256]	; (80043e8 <GrandState_Verita+0x16c4>)
 80042e8:	4831      	ldr	r0, [pc, #196]	; (80043b0 <GrandState_Verita+0x168c>)
 80042ea:	f009 fac5 	bl	800d878 <siprintf>
			if(client_temp_mcuCC < hw_par.mct_tsh_c){
 80042ee:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <GrandState_Verita+0x16c8>)
 80042f0:	891b      	ldrh	r3, [r3, #8]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <GrandState_Verita+0x16c0>)
 80042fc:	edd3 7a00 	vldr	s15, [r3]
 8004300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	dd0e      	ble.n	8004328 <GrandState_Verita+0x1604>
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 800430a:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <GrandState_Verita+0x1694>)
 800430c:	2200      	movs	r2, #0
 800430e:	9202      	str	r2, [sp, #8]
 8004310:	f24c 6218 	movw	r2, #50712	; 0xc618
 8004314:	9201      	str	r2, [sp, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	9200      	str	r2, [sp, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <GrandState_Verita+0x168c>)
 800431e:	21be      	movs	r1, #190	; 0xbe
 8004320:	20fa      	movs	r0, #250	; 0xfa
 8004322:	f001 fec0 	bl	80060a6 <ili9341_WriteString>
 8004326:	e00d      	b.n	8004344 <GrandState_Verita+0x1620>
			}else{
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <GrandState_Verita+0x1694>)
 800432a:	2200      	movs	r2, #0
 800432c:	9202      	str	r2, [sp, #8]
 800432e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004332:	9201      	str	r2, [sp, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	9200      	str	r2, [sp, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <GrandState_Verita+0x168c>)
 800433c:	21be      	movs	r1, #190	; 0xbe
 800433e:	20fa      	movs	r0, #250	; 0xfa
 8004340:	f001 feb1 	bl	80060a6 <ili9341_WriteString>
			}

			sprintf(TextDispBuffer,"%08x", (uint) VRB_CL.Mark.FirmwareVer); // uint can't use after cubeide 1.14
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <GrandState_Verita+0x1698>)
 8004346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004348:	461a      	mov	r2, r3
 800434a:	4929      	ldr	r1, [pc, #164]	; (80043f0 <GrandState_Verita+0x16cc>)
 800434c:	4818      	ldr	r0, [pc, #96]	; (80043b0 <GrandState_Verita+0x168c>)
 800434e:	f009 fa93 	bl	800d878 <siprintf>
			ili9341_WriteStringNoBG(250, 225, TextDispBuffer, Font12, cl_WHITE);
 8004352:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <GrandState_Verita+0x16d0>)
 8004354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004358:	9201      	str	r2, [sp, #4]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	9200      	str	r2, [sp, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <GrandState_Verita+0x168c>)
 8004362:	21e1      	movs	r1, #225	; 0xe1
 8004364:	20fa      	movs	r0, #250	; 0xfa
 8004366:	f001 feeb 	bl	8006140 <ili9341_WriteStringNoBG>


			if(k_flag.cnt){ //// Back to lobby  // && stboxp.ch_is == 1
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <GrandState_Verita+0x16b8>)
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 85ba 	beq.w	8004ee8 <GrandState_Verita+0x21c4>
				if(gScr.fullflag != ff_runfull){
 8004374:	4b15      	ldr	r3, [pc, #84]	; (80043cc <GrandState_Verita+0x16a8>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d003      	beq.n	8004384 <GrandState_Verita+0x1660>
					GrandState = pre_fw_lob;
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <GrandState_Verita+0x169c>)
 800437e:	2205      	movs	r2, #5
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e002      	b.n	800438a <GrandState_Verita+0x1666>
				}else{
					GrandState = pre_lobby;
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <GrandState_Verita+0x169c>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
				}

				k_flag.cnt = 0;
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <GrandState_Verita+0x16b8>)
 800438c:	2200      	movs	r2, #0
 800438e:	709a      	strb	r2, [r3, #2]
				// transfer to veritaPTC_reset();
				//VRB_CL.Mark.FirmwareVer = 0x00; // clear if nextstep break
				//VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show

				//// Reset Verita PTC Buffer counter
				resetgpio_char();
 8004390:	f000 fe44 	bl	800501c <resetgpio_char>
				//// reset UART, solve PTC fail???
				veritaPTC_reset();
 8004394:	f000 fe8e 	bl	80050b4 <veritaPTC_reset>
				////

				gScr.fullflag = 0;
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <GrandState_Verita+0x16a8>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 800439e:	2200      	movs	r2, #0
 80043a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043a4:	4808      	ldr	r0, [pc, #32]	; (80043c8 <GrandState_Verita+0x16a4>)
 80043a6:	f003 fa45 	bl	8007834 <HAL_GPIO_WritePin>
				}
			break; //gpio_chk
 80043aa:	f000 bd9d 	b.w	8004ee8 <GrandState_Verita+0x21c4>
 80043ae:	bf00      	nop
 80043b0:	200006b8 	.word	0x200006b8
 80043b4:	2000015c 	.word	0x2000015c
 80043b8:	20000230 	.word	0x20000230
 80043bc:	20000784 	.word	0x20000784
 80043c0:	20000006 	.word	0x20000006
 80043c4:	200008a0 	.word	0x200008a0
 80043c8:	40020800 	.word	0x40020800
 80043cc:	200008bc 	.word	0x200008bc
 80043d0:	080101b0 	.word	0x080101b0
 80043d4:	20000238 	.word	0x20000238
 80043d8:	080101bc 	.word	0x080101bc
 80043dc:	200008b8 	.word	0x200008b8
 80043e0:	200008d4 	.word	0x200008d4
 80043e4:	200007f4 	.word	0x200007f4
 80043e8:	080101c4 	.word	0x080101c4
 80043ec:	20000828 	.word	0x20000828
 80043f0:	080101cc 	.word	0x080101cc
 80043f4:	20000228 	.word	0x20000228

	case pre_monitor:
		stboxp.choice_set = bpoxy_def;
 80043f8:	4b9e      	ldr	r3, [pc, #632]	; (8004674 <GrandState_Verita+0x1950>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	23d2      	movs	r3, #210	; 0xd2
 8004404:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004408:	211e      	movs	r1, #30
 800440a:	2000      	movs	r0, #0
 800440c:	f001 fca2 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_BLUE);
 8004410:	231f      	movs	r3, #31
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	231e      	movs	r3, #30
 8004416:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800441a:	2100      	movs	r1, #0
 800441c:	2000      	movs	r0, #0
 800441e:	f001 fc99 	bl	8005d54 <ili9341_FillRect>

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8004422:	2201      	movs	r2, #1
 8004424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004428:	4893      	ldr	r0, [pc, #588]	; (8004678 <GrandState_Verita+0x1954>)
 800442a:	f003 fa03 	bl	8007834 <HAL_GPIO_WritePin>

		ili9341_WriteStringNoBG(80, 5, "PWR_Monitor", Font20, cl_WHITE);
 800442e:	4b93      	ldr	r3, [pc, #588]	; (800467c <GrandState_Verita+0x1958>)
 8004430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004434:	9201      	str	r2, [sp, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	9200      	str	r2, [sp, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a90      	ldr	r2, [pc, #576]	; (8004680 <GrandState_Verita+0x195c>)
 800443e:	2105      	movs	r1, #5
 8004440:	2050      	movs	r0, #80	; 0x50
 8004442:	f001 fe7d 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 8004446:	4b8f      	ldr	r3, [pc, #572]	; (8004684 <GrandState_Verita+0x1960>)
 8004448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444c:	9201      	str	r2, [sp, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	9200      	str	r2, [sp, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a8c      	ldr	r2, [pc, #560]	; (8004688 <GrandState_Verita+0x1964>)
 8004456:	21dc      	movs	r1, #220	; 0xdc
 8004458:	201e      	movs	r0, #30
 800445a:	f001 fe71 	bl	8006140 <ili9341_WriteStringNoBG>

		//sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
		//ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);

		ili9341_WriteStringNoBG(15, 50, "5Vin:", Font16, cl_WHITE);
 800445e:	4b89      	ldr	r3, [pc, #548]	; (8004684 <GrandState_Verita+0x1960>)
 8004460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004464:	9201      	str	r2, [sp, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	9200      	str	r2, [sp, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a87      	ldr	r2, [pc, #540]	; (800468c <GrandState_Verita+0x1968>)
 800446e:	2132      	movs	r1, #50	; 0x32
 8004470:	200f      	movs	r0, #15
 8004472:	f001 fe65 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 75, "3V3:", Font16, cl_WHITE);
 8004476:	4b83      	ldr	r3, [pc, #524]	; (8004684 <GrandState_Verita+0x1960>)
 8004478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447c:	9201      	str	r2, [sp, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	9200      	str	r2, [sp, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a82      	ldr	r2, [pc, #520]	; (8004690 <GrandState_Verita+0x196c>)
 8004486:	214b      	movs	r1, #75	; 0x4b
 8004488:	200f      	movs	r0, #15
 800448a:	f001 fe59 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 100, "I MCU:", Font16, cl_WHITE);
 800448e:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <GrandState_Verita+0x1960>)
 8004490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004494:	9201      	str	r2, [sp, #4]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	9200      	str	r2, [sp, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7d      	ldr	r2, [pc, #500]	; (8004694 <GrandState_Verita+0x1970>)
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	200f      	movs	r0, #15
 80044a2:	f001 fe4d 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 125, "I Brd:", Font16, cl_WHITE);
 80044a6:	4b77      	ldr	r3, [pc, #476]	; (8004684 <GrandState_Verita+0x1960>)
 80044a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ac:	9201      	str	r2, [sp, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a78      	ldr	r2, [pc, #480]	; (8004698 <GrandState_Verita+0x1974>)
 80044b6:	217d      	movs	r1, #125	; 0x7d
 80044b8:	200f      	movs	r0, #15
 80044ba:	f001 fe41 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 150, "PWR", Font16, cl_WHITE);
 80044be:	4b71      	ldr	r3, [pc, #452]	; (8004684 <GrandState_Verita+0x1960>)
 80044c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c4:	9201      	str	r2, [sp, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	9200      	str	r2, [sp, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a73      	ldr	r2, [pc, #460]	; (800469c <GrandState_Verita+0x1978>)
 80044ce:	2196      	movs	r1, #150	; 0x96
 80044d0:	200f      	movs	r0, #15
 80044d2:	f001 fe35 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(60, 150,"MCU" , Font12, cl_WHITE);
 80044d6:	4b72      	ldr	r3, [pc, #456]	; (80046a0 <GrandState_Verita+0x197c>)
 80044d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044dc:	9201      	str	r2, [sp, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	9200      	str	r2, [sp, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6f      	ldr	r2, [pc, #444]	; (80046a4 <GrandState_Verita+0x1980>)
 80044e6:	2196      	movs	r1, #150	; 0x96
 80044e8:	203c      	movs	r0, #60	; 0x3c
 80044ea:	f001 fe29 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 170, "Brd", Font12, cl_WHITE);
 80044ee:	4b6c      	ldr	r3, [pc, #432]	; (80046a0 <GrandState_Verita+0x197c>)
 80044f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f4:	9201      	str	r2, [sp, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	9200      	str	r2, [sp, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6a      	ldr	r2, [pc, #424]	; (80046a8 <GrandState_Verita+0x1984>)
 80044fe:	21aa      	movs	r1, #170	; 0xaa
 8004500:	203c      	movs	r0, #60	; 0x3c
 8004502:	f001 fe1d 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(220, 40, "MCP3208", Font16, cl_WHITE);
 8004506:	4b5f      	ldr	r3, [pc, #380]	; (8004684 <GrandState_Verita+0x1960>)
 8004508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800450c:	9201      	str	r2, [sp, #4]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	9200      	str	r2, [sp, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a65      	ldr	r2, [pc, #404]	; (80046ac <GrandState_Verita+0x1988>)
 8004516:	2128      	movs	r1, #40	; 0x28
 8004518:	20dc      	movs	r0, #220	; 0xdc
 800451a:	f001 fe11 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(220, 56, "Read Volt V", Font12, cl_WHITE);
 800451e:	4b60      	ldr	r3, [pc, #384]	; (80046a0 <GrandState_Verita+0x197c>)
 8004520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004524:	9201      	str	r2, [sp, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	9200      	str	r2, [sp, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a60      	ldr	r2, [pc, #384]	; (80046b0 <GrandState_Verita+0x198c>)
 800452e:	2138      	movs	r1, #56	; 0x38
 8004530:	20dc      	movs	r0, #220	; 0xdc
 8004532:	f001 fe05 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(150, 54, "mV", Font12, cl_WHITE);
 8004536:	4b5a      	ldr	r3, [pc, #360]	; (80046a0 <GrandState_Verita+0x197c>)
 8004538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800453c:	9201      	str	r2, [sp, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5b      	ldr	r2, [pc, #364]	; (80046b4 <GrandState_Verita+0x1990>)
 8004546:	2136      	movs	r1, #54	; 0x36
 8004548:	2096      	movs	r0, #150	; 0x96
 800454a:	f001 fdf9 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(150, 79, "mV", Font12, cl_WHITE);
 800454e:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <GrandState_Verita+0x197c>)
 8004550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004554:	9201      	str	r2, [sp, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	9200      	str	r2, [sp, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a55      	ldr	r2, [pc, #340]	; (80046b4 <GrandState_Verita+0x1990>)
 800455e:	214f      	movs	r1, #79	; 0x4f
 8004560:	2096      	movs	r0, #150	; 0x96
 8004562:	f001 fded 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(150, 104, "mA", Font12, cl_WHITE);
 8004566:	4b4e      	ldr	r3, [pc, #312]	; (80046a0 <GrandState_Verita+0x197c>)
 8004568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800456c:	9201      	str	r2, [sp, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	9200      	str	r2, [sp, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a50      	ldr	r2, [pc, #320]	; (80046b8 <GrandState_Verita+0x1994>)
 8004576:	2168      	movs	r1, #104	; 0x68
 8004578:	2096      	movs	r0, #150	; 0x96
 800457a:	f001 fde1 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(150, 129, "mA", Font12, cl_WHITE);
 800457e:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <GrandState_Verita+0x197c>)
 8004580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004584:	9201      	str	r2, [sp, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	9200      	str	r2, [sp, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <GrandState_Verita+0x1994>)
 800458e:	2181      	movs	r1, #129	; 0x81
 8004590:	2096      	movs	r0, #150	; 0x96
 8004592:	f001 fdd5 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(170, 154, "mW", Font12, cl_WHITE);
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <GrandState_Verita+0x197c>)
 8004598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800459c:	9201      	str	r2, [sp, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a45      	ldr	r2, [pc, #276]	; (80046bc <GrandState_Verita+0x1998>)
 80045a6:	219a      	movs	r1, #154	; 0x9a
 80045a8:	20aa      	movs	r0, #170	; 0xaa
 80045aa:	f001 fdc9 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(170, 174, "mW", Font12, cl_WHITE);
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <GrandState_Verita+0x197c>)
 80045b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b4:	9201      	str	r2, [sp, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	9200      	str	r2, [sp, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <GrandState_Verita+0x1998>)
 80045be:	21ae      	movs	r1, #174	; 0xae
 80045c0:	20aa      	movs	r0, #170	; 0xaa
 80045c2:	f001 fdbd 	bl	8006140 <ili9341_WriteStringNoBG>

		for(register int t = 0; t <= 7; t++){
 80045c6:	2400      	movs	r4, #0
 80045c8:	e018      	b.n	80045fc <GrandState_Verita+0x18d8>
			sprintf(TextDispBuffer,"CH%d",t);
 80045ca:	4622      	mov	r2, r4
 80045cc:	493c      	ldr	r1, [pc, #240]	; (80046c0 <GrandState_Verita+0x199c>)
 80045ce:	483d      	ldr	r0, [pc, #244]	; (80046c4 <GrandState_Verita+0x19a0>)
 80045d0:	f009 f952 	bl	800d878 <siprintf>
			ili9341_WriteStringNoBG(220, 75 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 80045d4:	b2a3      	uxth	r3, r4
 80045d6:	461a      	mov	r2, r3
 80045d8:	0052      	lsls	r2, r2, #1
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	334b      	adds	r3, #75	; 0x4b
 80045e2:	b299      	uxth	r1, r3
 80045e4:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <GrandState_Verita+0x197c>)
 80045e6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80045ea:	9201      	str	r2, [sp, #4]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	9200      	str	r2, [sp, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <GrandState_Verita+0x19a0>)
 80045f4:	20dc      	movs	r0, #220	; 0xdc
 80045f6:	f001 fda3 	bl	8006140 <ili9341_WriteStringNoBG>
		for(register int t = 0; t <= 7; t++){
 80045fa:	3401      	adds	r4, #1
 80045fc:	2c07      	cmp	r4, #7
 80045fe:	dde4      	ble.n	80045ca <GrandState_Verita+0x18a6>
		}

		sprintf(TextDispBuffer,"MCU_Temp:");
 8004600:	4931      	ldr	r1, [pc, #196]	; (80046c8 <GrandState_Verita+0x19a4>)
 8004602:	4830      	ldr	r0, [pc, #192]	; (80046c4 <GrandState_Verita+0x19a0>)
 8004604:	f009 f938 	bl	800d878 <siprintf>
		ili9341_WriteString(20, 190, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <GrandState_Verita+0x197c>)
 800460a:	2200      	movs	r2, #0
 800460c:	9202      	str	r2, [sp, #8]
 800460e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	9200      	str	r2, [sp, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <GrandState_Verita+0x19a0>)
 800461c:	21be      	movs	r1, #190	; 0xbe
 800461e:	2014      	movs	r0, #20
 8004620:	f001 fd41 	bl	80060a6 <ili9341_WriteString>

		k_flag.cnt = 0; //// prevent over state jump
 8004624:	4b29      	ldr	r3, [pc, #164]	; (80046cc <GrandState_Verita+0x19a8>)
 8004626:	2200      	movs	r2, #0
 8004628:	709a      	strb	r2, [r3, #2]
		GrandState = monitor;
 800462a:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <GrandState_Verita+0x19ac>)
 800462c:	220c      	movs	r2, #12
 800462e:	701a      	strb	r2, [r3, #0]
		break; //// pre monitor
 8004630:	f000 bc65 	b.w	8004efe <GrandState_Verita+0x21da>


	case monitor:
		stboxp.choice_set = bpoxy_def;
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <GrandState_Verita+0x1950>)
 8004636:	2200      	movs	r2, #0
 8004638:	705a      	strb	r2, [r3, #1]
		simple_scr();
 800463a:	f7fe f823 	bl	8002684 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 800463e:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <GrandState_Verita+0x19b0>)
 8004640:	8a1b      	ldrh	r3, [r3, #16]
 8004642:	461a      	mov	r2, r3
 8004644:	4924      	ldr	r1, [pc, #144]	; (80046d8 <GrandState_Verita+0x19b4>)
 8004646:	481f      	ldr	r0, [pc, #124]	; (80046c4 <GrandState_Verita+0x19a0>)
 8004648:	f009 f916 	bl	800d878 <siprintf>
		if(inatb.Bus_V < 2000){
 800464c:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <GrandState_Verita+0x19b0>)
 800464e:	8a1b      	ldrh	r3, [r3, #16]
 8004650:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004654:	d242      	bcs.n	80046dc <GrandState_Verita+0x19b8>
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <GrandState_Verita+0x1960>)
 8004658:	2200      	movs	r2, #0
 800465a:	9202      	str	r2, [sp, #8]
 800465c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004660:	9201      	str	r2, [sp, #4]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	9200      	str	r2, [sp, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <GrandState_Verita+0x19a0>)
 800466a:	2132      	movs	r1, #50	; 0x32
 800466c:	205a      	movs	r0, #90	; 0x5a
 800466e:	f001 fd1a 	bl	80060a6 <ili9341_WriteString>
 8004672:	e041      	b.n	80046f8 <GrandState_Verita+0x19d4>
 8004674:	200008d4 	.word	0x200008d4
 8004678:	40020800 	.word	0x40020800
 800467c:	20000238 	.word	0x20000238
 8004680:	080101d4 	.word	0x080101d4
 8004684:	20000230 	.word	0x20000230
 8004688:	08010010 	.word	0x08010010
 800468c:	080101e0 	.word	0x080101e0
 8004690:	08010064 	.word	0x08010064
 8004694:	0801007c 	.word	0x0801007c
 8004698:	08010074 	.word	0x08010074
 800469c:	080101e8 	.word	0x080101e8
 80046a0:	20000228 	.word	0x20000228
 80046a4:	080101ec 	.word	0x080101ec
 80046a8:	080101f0 	.word	0x080101f0
 80046ac:	080101f4 	.word	0x080101f4
 80046b0:	080101fc 	.word	0x080101fc
 80046b4:	08010084 	.word	0x08010084
 80046b8:	08010088 	.word	0x08010088
 80046bc:	08010208 	.word	0x08010208
 80046c0:	0801020c 	.word	0x0801020c
 80046c4:	200006b8 	.word	0x200006b8
 80046c8:	08010214 	.word	0x08010214
 80046cc:	200008b8 	.word	0x200008b8
 80046d0:	20000006 	.word	0x20000006
 80046d4:	20000810 	.word	0x20000810
 80046d8:	0801008c 	.word	0x0801008c
		}else{
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 80046dc:	4b8e      	ldr	r3, [pc, #568]	; (8004918 <GrandState_Verita+0x1bf4>)
 80046de:	2200      	movs	r2, #0
 80046e0:	9202      	str	r2, [sp, #8]
 80046e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80046e6:	9201      	str	r2, [sp, #4]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	9200      	str	r2, [sp, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a8b      	ldr	r2, [pc, #556]	; (800491c <GrandState_Verita+0x1bf8>)
 80046f0:	2132      	movs	r1, #50	; 0x32
 80046f2:	205a      	movs	r0, #90	; 0x5a
 80046f4:	f001 fcd7 	bl	80060a6 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 80046f8:	4b89      	ldr	r3, [pc, #548]	; (8004920 <GrandState_Verita+0x1bfc>)
 80046fa:	8a1b      	ldrh	r3, [r3, #16]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4989      	ldr	r1, [pc, #548]	; (8004924 <GrandState_Verita+0x1c00>)
 8004700:	4886      	ldr	r0, [pc, #536]	; (800491c <GrandState_Verita+0x1bf8>)
 8004702:	f009 f8b9 	bl	800d878 <siprintf>
		if(inata.Bus_V < 2000){
 8004706:	4b86      	ldr	r3, [pc, #536]	; (8004920 <GrandState_Verita+0x1bfc>)
 8004708:	8a1b      	ldrh	r3, [r3, #16]
 800470a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800470e:	d20e      	bcs.n	800472e <GrandState_Verita+0x1a0a>
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004710:	4b81      	ldr	r3, [pc, #516]	; (8004918 <GrandState_Verita+0x1bf4>)
 8004712:	2200      	movs	r2, #0
 8004714:	9202      	str	r2, [sp, #8]
 8004716:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800471a:	9201      	str	r2, [sp, #4]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	9200      	str	r2, [sp, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7e      	ldr	r2, [pc, #504]	; (800491c <GrandState_Verita+0x1bf8>)
 8004724:	214b      	movs	r1, #75	; 0x4b
 8004726:	205a      	movs	r0, #90	; 0x5a
 8004728:	f001 fcbd 	bl	80060a6 <ili9341_WriteString>
 800472c:	e00d      	b.n	800474a <GrandState_Verita+0x1a26>
		}else{
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 800472e:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <GrandState_Verita+0x1bf4>)
 8004730:	2200      	movs	r2, #0
 8004732:	9202      	str	r2, [sp, #8]
 8004734:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004738:	9201      	str	r2, [sp, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	9200      	str	r2, [sp, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a76      	ldr	r2, [pc, #472]	; (800491c <GrandState_Verita+0x1bf8>)
 8004742:	214b      	movs	r1, #75	; 0x4b
 8004744:	205a      	movs	r0, #90	; 0x5a
 8004746:	f001 fcae 	bl	80060a6 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 800474a:	4b75      	ldr	r3, [pc, #468]	; (8004920 <GrandState_Verita+0x1bfc>)
 800474c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004750:	461a      	mov	r2, r3
 8004752:	4974      	ldr	r1, [pc, #464]	; (8004924 <GrandState_Verita+0x1c00>)
 8004754:	4871      	ldr	r0, [pc, #452]	; (800491c <GrandState_Verita+0x1bf8>)
 8004756:	f009 f88f 	bl	800d878 <siprintf>
		ili9341_WriteString(90, 100, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 800475a:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <GrandState_Verita+0x1bf4>)
 800475c:	2200      	movs	r2, #0
 800475e:	9202      	str	r2, [sp, #8]
 8004760:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004764:	9201      	str	r2, [sp, #4]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	9200      	str	r2, [sp, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a6b      	ldr	r2, [pc, #428]	; (800491c <GrandState_Verita+0x1bf8>)
 800476e:	2164      	movs	r1, #100	; 0x64
 8004770:	205a      	movs	r0, #90	; 0x5a
 8004772:	f001 fc98 	bl	80060a6 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8004776:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <GrandState_Verita+0x1c04>)
 8004778:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800477c:	461a      	mov	r2, r3
 800477e:	4969      	ldr	r1, [pc, #420]	; (8004924 <GrandState_Verita+0x1c00>)
 8004780:	4866      	ldr	r0, [pc, #408]	; (800491c <GrandState_Verita+0x1bf8>)
 8004782:	f009 f879 	bl	800d878 <siprintf>
		ili9341_WriteString(90, 125, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8004786:	4b64      	ldr	r3, [pc, #400]	; (8004918 <GrandState_Verita+0x1bf4>)
 8004788:	2200      	movs	r2, #0
 800478a:	9202      	str	r2, [sp, #8]
 800478c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004790:	9201      	str	r2, [sp, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	9200      	str	r2, [sp, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a60      	ldr	r2, [pc, #384]	; (800491c <GrandState_Verita+0x1bf8>)
 800479a:	217d      	movs	r1, #125	; 0x7d
 800479c:	205a      	movs	r0, #90	; 0x5a
 800479e:	f001 fc82 	bl	80060a6 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4.1f", inata.POWER);
 80047a2:	4b5f      	ldr	r3, [pc, #380]	; (8004920 <GrandState_Verita+0x1bfc>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fb fed6 	bl	8000558 <__aeabi_f2d>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	495e      	ldr	r1, [pc, #376]	; (800492c <GrandState_Verita+0x1c08>)
 80047b2:	485a      	ldr	r0, [pc, #360]	; (800491c <GrandState_Verita+0x1bf8>)
 80047b4:	f009 f860 	bl	800d878 <siprintf>
		ili9341_WriteString(95, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 80047b8:	4b57      	ldr	r3, [pc, #348]	; (8004918 <GrandState_Verita+0x1bf4>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	9202      	str	r2, [sp, #8]
 80047be:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80047c2:	9201      	str	r2, [sp, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	9200      	str	r2, [sp, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a54      	ldr	r2, [pc, #336]	; (800491c <GrandState_Verita+0x1bf8>)
 80047cc:	2196      	movs	r1, #150	; 0x96
 80047ce:	205f      	movs	r0, #95	; 0x5f
 80047d0:	f001 fc69 	bl	80060a6 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4.1f", inatb.POWER);
 80047d4:	4b54      	ldr	r3, [pc, #336]	; (8004928 <GrandState_Verita+0x1c04>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fb febd 	bl	8000558 <__aeabi_f2d>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4952      	ldr	r1, [pc, #328]	; (800492c <GrandState_Verita+0x1c08>)
 80047e4:	484d      	ldr	r0, [pc, #308]	; (800491c <GrandState_Verita+0x1bf8>)
 80047e6:	f009 f847 	bl	800d878 <siprintf>
		ili9341_WriteString(95, 170, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 80047ea:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <GrandState_Verita+0x1bf4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	9202      	str	r2, [sp, #8]
 80047f0:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80047f4:	9201      	str	r2, [sp, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	9200      	str	r2, [sp, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a47      	ldr	r2, [pc, #284]	; (800491c <GrandState_Verita+0x1bf8>)
 80047fe:	21aa      	movs	r1, #170	; 0xaa
 8004800:	205f      	movs	r0, #95	; 0x5f
 8004802:	f001 fc50 	bl	80060a6 <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		//ili9341_FillRect(250, 75, 30, 96, cl_BLACK);
		for(register int t = 0; t <= 7; t++){
 8004806:	2400      	movs	r4, #0
 8004808:	e023      	b.n	8004852 <GrandState_Verita+0x1b2e>
			sprintf(TextDispBuffer,"%.2f",mcp_read.cv[t]);
 800480a:	4a49      	ldr	r2, [pc, #292]	; (8004930 <GrandState_Verita+0x1c0c>)
 800480c:	1d23      	adds	r3, r4, #4
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb fe9f 	bl	8000558 <__aeabi_f2d>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4945      	ldr	r1, [pc, #276]	; (8004934 <GrandState_Verita+0x1c10>)
 8004820:	483e      	ldr	r0, [pc, #248]	; (800491c <GrandState_Verita+0x1bf8>)
 8004822:	f009 f829 	bl	800d878 <siprintf>
		//ili9341_WriteStringNoBG(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE);
		ili9341_WriteString(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8004826:	b2a3      	uxth	r3, r4
 8004828:	461a      	mov	r2, r3
 800482a:	0052      	lsls	r2, r2, #1
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	b29b      	uxth	r3, r3
 8004832:	334b      	adds	r3, #75	; 0x4b
 8004834:	b299      	uxth	r1, r3
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <GrandState_Verita+0x1c14>)
 8004838:	2200      	movs	r2, #0
 800483a:	9202      	str	r2, [sp, #8]
 800483c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004840:	9201      	str	r2, [sp, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	9200      	str	r2, [sp, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a34      	ldr	r2, [pc, #208]	; (800491c <GrandState_Verita+0x1bf8>)
 800484a:	20fa      	movs	r0, #250	; 0xfa
 800484c:	f001 fc2b 	bl	80060a6 <ili9341_WriteString>
		for(register int t = 0; t <= 7; t++){
 8004850:	3401      	adds	r4, #1
 8004852:	2c07      	cmp	r4, #7
 8004854:	ddd9      	ble.n	800480a <GrandState_Verita+0x1ae6>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <GrandState_Verita+0x1c18>)
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	d504      	bpl.n	8004870 <GrandState_Verita+0x1b4c>
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e006      	b.n	800487e <GrandState_Verita+0x1b5a>
 8004870:	4b32      	ldr	r3, [pc, #200]	; (800493c <GrandState_Verita+0x1c18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fb fe6f 	bl	8000558 <__aeabi_f2d>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4930      	ldr	r1, [pc, #192]	; (8004940 <GrandState_Verita+0x1c1c>)
 8004880:	4826      	ldr	r0, [pc, #152]	; (800491c <GrandState_Verita+0x1bf8>)
 8004882:	f008 fff9 	bl	800d878 <siprintf>
		//sprintf(TextDispBuffer,"%2.1f C", client_temp_mcuCC);
			if(client_temp_mcuCC < hw_par.mct_tsh_c){
 8004886:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <GrandState_Verita+0x1c20>)
 8004888:	891b      	ldrh	r3, [r3, #8]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <GrandState_Verita+0x1c18>)
 8004894:	edd3 7a00 	vldr	s15, [r3]
 8004898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	dd0e      	ble.n	80048c0 <GrandState_Verita+0x1b9c>
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <GrandState_Verita+0x1bf4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	9202      	str	r2, [sp, #8]
 80048a8:	f24c 6218 	movw	r2, #50712	; 0xc618
 80048ac:	9201      	str	r2, [sp, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	9200      	str	r2, [sp, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <GrandState_Verita+0x1bf8>)
 80048b6:	21be      	movs	r1, #190	; 0xbe
 80048b8:	2064      	movs	r0, #100	; 0x64
 80048ba:	f001 fbf4 	bl	80060a6 <ili9341_WriteString>
 80048be:	e00d      	b.n	80048dc <GrandState_Verita+0x1bb8>
			}else{
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <GrandState_Verita+0x1bf4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	9202      	str	r2, [sp, #8]
 80048c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80048ca:	9201      	str	r2, [sp, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	9200      	str	r2, [sp, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <GrandState_Verita+0x1bf8>)
 80048d4:	21be      	movs	r1, #190	; 0xbe
 80048d6:	2064      	movs	r0, #100	; 0x64
 80048d8:	f001 fbe5 	bl	80060a6 <ili9341_WriteString>
			}


		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <GrandState_Verita+0x1c24>)
 80048de:	789b      	ldrb	r3, [r3, #2]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8303 	beq.w	8004eec <GrandState_Verita+0x21c8>
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <GrandState_Verita+0x1c28>)
 80048e8:	789b      	ldrb	r3, [r3, #2]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	f040 82fe 	bne.w	8004eec <GrandState_Verita+0x21c8>
			GrandState = pre_lobby;
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <GrandState_Verita+0x1c2c>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
			VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 80048f6:	4b17      	ldr	r3, [pc, #92]	; (8004954 <GrandState_Verita+0x1c30>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80048fe:	2200      	movs	r2, #0
 8004900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004904:	4814      	ldr	r0, [pc, #80]	; (8004958 <GrandState_Verita+0x1c34>)
 8004906:	f002 ff95 	bl	8007834 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <GrandState_Verita+0x1c24>)
 800490c:	2200      	movs	r2, #0
 800490e:	709a      	strb	r2, [r3, #2]
			veritaPTC_reset();
 8004910:	f000 fbd0 	bl	80050b4 <veritaPTC_reset>
			}
		break; // monitor
 8004914:	e2ea      	b.n	8004eec <GrandState_Verita+0x21c8>
 8004916:	bf00      	nop
 8004918:	20000230 	.word	0x20000230
 800491c:	200006b8 	.word	0x200006b8
 8004920:	200007f8 	.word	0x200007f8
 8004924:	0801008c 	.word	0x0801008c
 8004928:	20000810 	.word	0x20000810
 800492c:	08010220 	.word	0x08010220
 8004930:	20000840 	.word	0x20000840
 8004934:	08010228 	.word	0x08010228
 8004938:	20000228 	.word	0x20000228
 800493c:	200007f4 	.word	0x200007f4
 8004940:	080101c4 	.word	0x080101c4
 8004944:	20000828 	.word	0x20000828
 8004948:	200008b8 	.word	0x200008b8
 800494c:	200008d4 	.word	0x200008d4
 8004950:	20000006 	.word	0x20000006
 8004954:	20000784 	.word	0x20000784
 8004958:	40020800 	.word	0x40020800


	case pre_danger:
		stboxp.choice_set = bpoxy_def;
 800495c:	4b6b      	ldr	r3, [pc, #428]	; (8004b0c <GrandState_Verita+0x1de8>)
 800495e:	2200      	movs	r2, #0
 8004960:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004962:	2300      	movs	r3, #0
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	23d2      	movs	r3, #210	; 0xd2
 8004968:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800496c:	211e      	movs	r1, #30
 800496e:	2000      	movs	r0, #0
 8004970:	f001 f9f0 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_RED);
 8004974:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	231e      	movs	r3, #30
 800497c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004980:	2100      	movs	r1, #0
 8004982:	2000      	movs	r0, #0
 8004984:	f001 f9e6 	bl	8005d54 <ili9341_FillRect>

		ili9341_WriteStringNoBG(105, 5, "Danger!!!", Font20, cl_WHITE);
 8004988:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <GrandState_Verita+0x1dec>)
 800498a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800498e:	9201      	str	r2, [sp, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	9200      	str	r2, [sp, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a5f      	ldr	r2, [pc, #380]	; (8004b14 <GrandState_Verita+0x1df0>)
 8004998:	2105      	movs	r1, #5
 800499a:	2069      	movs	r0, #105	; 0x69
 800499c:	f001 fbd0 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(30, 220, "<-Back to lobby", Font16, cl_WHITE);
 80049a0:	4b5d      	ldr	r3, [pc, #372]	; (8004b18 <GrandState_Verita+0x1df4>)
 80049a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049a6:	9201      	str	r2, [sp, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	9200      	str	r2, [sp, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5b      	ldr	r2, [pc, #364]	; (8004b1c <GrandState_Verita+0x1df8>)
 80049b0:	21dc      	movs	r1, #220	; 0xdc
 80049b2:	201e      	movs	r0, #30
 80049b4:	f001 fbc4 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(40, 70, "Overcurrent Detect!", Font20, cl_WHITE);
 80049b8:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <GrandState_Verita+0x1dec>)
 80049ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049be:	9201      	str	r2, [sp, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	9200      	str	r2, [sp, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <GrandState_Verita+0x1dfc>)
 80049c8:	2146      	movs	r1, #70	; 0x46
 80049ca:	2028      	movs	r0, #40	; 0x28
 80049cc:	f001 fbb8 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteString(20, 100, "I MCU:", Font16, cl_WHITE, cl_BLACK);
 80049d0:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <GrandState_Verita+0x1df4>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	9202      	str	r2, [sp, #8]
 80049d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a50      	ldr	r2, [pc, #320]	; (8004b24 <GrandState_Verita+0x1e00>)
 80049e4:	2164      	movs	r1, #100	; 0x64
 80049e6:	2014      	movs	r0, #20
 80049e8:	f001 fb5d 	bl	80060a6 <ili9341_WriteString>

		ili9341_WriteString(20, 130, "I Brd:", Font16, cl_WHITE, cl_BLACK);
 80049ec:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <GrandState_Verita+0x1df4>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	9202      	str	r2, [sp, #8]
 80049f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f6:	9201      	str	r2, [sp, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	9200      	str	r2, [sp, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4a      	ldr	r2, [pc, #296]	; (8004b28 <GrandState_Verita+0x1e04>)
 8004a00:	2182      	movs	r1, #130	; 0x82
 8004a02:	2014      	movs	r0, #20
 8004a04:	f001 fb4f 	bl	80060a6 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8004a08:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <GrandState_Verita+0x1e08>)
 8004a0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4947      	ldr	r1, [pc, #284]	; (8004b30 <GrandState_Verita+0x1e0c>)
 8004a12:	4848      	ldr	r0, [pc, #288]	; (8004b34 <GrandState_Verita+0x1e10>)
 8004a14:	f008 ff30 	bl	800d878 <siprintf>
		if(inata.CURRENT >= hw_par.cur_mcu_tsh_mA){
 8004a18:	4b44      	ldr	r3, [pc, #272]	; (8004b2c <GrandState_Verita+0x1e08>)
 8004a1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b45      	ldr	r3, [pc, #276]	; (8004b38 <GrandState_Verita+0x1e14>)
 8004a22:	88db      	ldrh	r3, [r3, #6]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	db1a      	blt.n	8004a5e <GrandState_Verita+0x1d3a>
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8004a28:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <GrandState_Verita+0x1dec>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	9200      	str	r2, [sp, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3e      	ldr	r2, [pc, #248]	; (8004b34 <GrandState_Verita+0x1e10>)
 8004a3c:	2164      	movs	r1, #100	; 0x64
 8004a3e:	2078      	movs	r0, #120	; 0x78
 8004a40:	f001 fb31 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteStringNoBG(220, 100, "FAIL", Font20, cl_RED);
 8004a44:	4b32      	ldr	r3, [pc, #200]	; (8004b10 <GrandState_Verita+0x1dec>)
 8004a46:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004a4a:	9201      	str	r2, [sp, #4]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	9200      	str	r2, [sp, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3a      	ldr	r2, [pc, #232]	; (8004b3c <GrandState_Verita+0x1e18>)
 8004a54:	2164      	movs	r1, #100	; 0x64
 8004a56:	20dc      	movs	r0, #220	; 0xdc
 8004a58:	f001 fb72 	bl	8006140 <ili9341_WriteStringNoBG>
 8004a5c:	e00d      	b.n	8004a7a <GrandState_Verita+0x1d56>
		}else{
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <GrandState_Verita+0x1dec>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	9202      	str	r2, [sp, #8]
 8004a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a68:	9201      	str	r2, [sp, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	9200      	str	r2, [sp, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a30      	ldr	r2, [pc, #192]	; (8004b34 <GrandState_Verita+0x1e10>)
 8004a72:	2164      	movs	r1, #100	; 0x64
 8004a74:	2078      	movs	r0, #120	; 0x78
 8004a76:	f001 fb16 	bl	80060a6 <ili9341_WriteString>
			}

		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8004a7a:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <GrandState_Verita+0x1e1c>)
 8004a7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a80:	461a      	mov	r2, r3
 8004a82:	492b      	ldr	r1, [pc, #172]	; (8004b30 <GrandState_Verita+0x1e0c>)
 8004a84:	482b      	ldr	r0, [pc, #172]	; (8004b34 <GrandState_Verita+0x1e10>)
 8004a86:	f008 fef7 	bl	800d878 <siprintf>
		if(inatb.CURRENT >= hw_par.cur_brd_tsh_mA){
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <GrandState_Verita+0x1e1c>)
 8004a8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a90:	461a      	mov	r2, r3
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <GrandState_Verita+0x1e14>)
 8004a94:	889b      	ldrh	r3, [r3, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	db1a      	blt.n	8004ad0 <GrandState_Verita+0x1dac>
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8004a9a:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <GrandState_Verita+0x1dec>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9202      	str	r2, [sp, #8]
 8004aa0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004aa4:	9201      	str	r2, [sp, #4]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	9200      	str	r2, [sp, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a21      	ldr	r2, [pc, #132]	; (8004b34 <GrandState_Verita+0x1e10>)
 8004aae:	2182      	movs	r1, #130	; 0x82
 8004ab0:	2078      	movs	r0, #120	; 0x78
 8004ab2:	f001 faf8 	bl	80060a6 <ili9341_WriteString>
			ili9341_WriteStringNoBG(220, 130, "FAIL", Font20, cl_RED);
 8004ab6:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <GrandState_Verita+0x1dec>)
 8004ab8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004abc:	9201      	str	r2, [sp, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	9200      	str	r2, [sp, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <GrandState_Verita+0x1e18>)
 8004ac6:	2182      	movs	r1, #130	; 0x82
 8004ac8:	20dc      	movs	r0, #220	; 0xdc
 8004aca:	f001 fb39 	bl	8006140 <ili9341_WriteStringNoBG>
 8004ace:	e00d      	b.n	8004aec <GrandState_Verita+0x1dc8>
		}else{
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <GrandState_Verita+0x1dec>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	9202      	str	r2, [sp, #8]
 8004ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ada:	9201      	str	r2, [sp, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	9200      	str	r2, [sp, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <GrandState_Verita+0x1e10>)
 8004ae4:	2182      	movs	r1, #130	; 0x82
 8004ae6:	2078      	movs	r0, #120	; 0x78
 8004ae8:	f001 fadd 	bl	80060a6 <ili9341_WriteString>
			}

		GrandState = danger;
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <GrandState_Verita+0x1e20>)
 8004aee:	2210      	movs	r2, #16
 8004af0:	701a      	strb	r2, [r3, #0]
		break;
 8004af2:	e204      	b.n	8004efe <GrandState_Verita+0x21da>

	case danger:

		if(k_flag.cnt){ //// Back to lobby
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <GrandState_Verita+0x1e24>)
 8004af6:	789b      	ldrb	r3, [r3, #2]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 81f9 	beq.w	8004ef0 <GrandState_Verita+0x21cc>
			GrandState = pre_lobby;
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <GrandState_Verita+0x1e20>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <GrandState_Verita+0x1e24>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	709a      	strb	r2, [r3, #2]
			}
		break;
 8004b0a:	e1f1      	b.n	8004ef0 <GrandState_Verita+0x21cc>
 8004b0c:	200008d4 	.word	0x200008d4
 8004b10:	20000238 	.word	0x20000238
 8004b14:	08010230 	.word	0x08010230
 8004b18:	20000230 	.word	0x20000230
 8004b1c:	0801023c 	.word	0x0801023c
 8004b20:	0801024c 	.word	0x0801024c
 8004b24:	0801007c 	.word	0x0801007c
 8004b28:	08010074 	.word	0x08010074
 8004b2c:	200007f8 	.word	0x200007f8
 8004b30:	0801008c 	.word	0x0801008c
 8004b34:	200006b8 	.word	0x200006b8
 8004b38:	20000828 	.word	0x20000828
 8004b3c:	08010090 	.word	0x08010090
 8004b40:	20000810 	.word	0x20000810
 8004b44:	20000006 	.word	0x20000006
 8004b48:	200008b8 	.word	0x200008b8

	case pre_about:
		stboxp.choice_set = bpoxy_no;
 8004b4c:	4b83      	ldr	r3, [pc, #524]	; (8004d5c <GrandState_Verita+0x2038>)
 8004b4e:	2203      	movs	r2, #3
 8004b50:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004b52:	2300      	movs	r3, #0
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	23d2      	movs	r3, #210	; 0xd2
 8004b58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b5c:	211e      	movs	r1, #30
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f001 f8f8 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004b64:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	231e      	movs	r3, #30
 8004b6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b70:	2100      	movs	r1, #0
 8004b72:	2000      	movs	r0, #0
 8004b74:	f001 f8ee 	bl	8005d54 <ili9341_FillRect>

		ili9341_WriteStringNoBG(80, 5, "About Verita", Font20, cl_BLACK);
 8004b78:	4b79      	ldr	r3, [pc, #484]	; (8004d60 <GrandState_Verita+0x203c>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	9201      	str	r2, [sp, #4]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	9200      	str	r2, [sp, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a77      	ldr	r2, [pc, #476]	; (8004d64 <GrandState_Verita+0x2040>)
 8004b86:	2105      	movs	r1, #5
 8004b88:	2050      	movs	r0, #80	; 0x50
 8004b8a:	f001 fad9 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(30, 220,"Next->", Font16, cl_WHITE);
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <GrandState_Verita+0x2044>)
 8004b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b94:	9201      	str	r2, [sp, #4]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	9200      	str	r2, [sp, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a73      	ldr	r2, [pc, #460]	; (8004d6c <GrandState_Verita+0x2048>)
 8004b9e:	21dc      	movs	r1, #220	; 0xdc
 8004ba0:	201e      	movs	r0, #30
 8004ba2:	f001 facd 	bl	8006140 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Verita's Mission is to help the user to check NUCLEO boards' health.");
 8004ba6:	4972      	ldr	r1, [pc, #456]	; (8004d70 <GrandState_Verita+0x204c>)
 8004ba8:	4872      	ldr	r0, [pc, #456]	; (8004d74 <GrandState_Verita+0x2050>)
 8004baa:	f008 fe65 	bl	800d878 <siprintf>
		ili9341_WriteStringNoBG(20, 35, TextDispBuffer, Font16, cl_WHITE);
 8004bae:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <GrandState_Verita+0x2044>)
 8004bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bb4:	9201      	str	r2, [sp, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	9200      	str	r2, [sp, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a6d      	ldr	r2, [pc, #436]	; (8004d74 <GrandState_Verita+0x2050>)
 8004bbe:	2123      	movs	r1, #35	; 0x23
 8004bc0:	2014      	movs	r0, #20
 8004bc2:	f001 fabd 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(20, 100, "Visit more at:", Font16, cl_WHITE);
 8004bc6:	4b68      	ldr	r3, [pc, #416]	; (8004d68 <GrandState_Verita+0x2044>)
 8004bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bcc:	9201      	str	r2, [sp, #4]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	9200      	str	r2, [sp, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a68      	ldr	r2, [pc, #416]	; (8004d78 <GrandState_Verita+0x2054>)
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	2014      	movs	r0, #20
 8004bda:	f001 fab1 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(20, 125, "https://", Font16, cl_CYAN);
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <GrandState_Verita+0x2044>)
 8004be0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004be4:	9201      	str	r2, [sp, #4]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	9200      	str	r2, [sp, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <GrandState_Verita+0x2058>)
 8004bee:	217d      	movs	r1, #125	; 0x7d
 8004bf0:	2014      	movs	r0, #20
 8004bf2:	f001 faa5 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(20, 140, "kmutt.me/owlsoffice.verita", Font16, cl_CYAN);
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <GrandState_Verita+0x2044>)
 8004bf8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	9200      	str	r2, [sp, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5e      	ldr	r2, [pc, #376]	; (8004d80 <GrandState_Verita+0x205c>)
 8004c06:	218c      	movs	r1, #140	; 0x8c
 8004c08:	2014      	movs	r0, #20
 8004c0a:	f001 fa99 	bl	8006140 <ili9341_WriteStringNoBG>
		//owlhor/Verita_NucleoF411RETester
		ili9341_WriteStringNoBG(20, 165, "github.com/owlhor/", Font16, cl_CYAN);
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <GrandState_Verita+0x2044>)
 8004c10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c14:	9201      	str	r2, [sp, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	9200      	str	r2, [sp, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a59      	ldr	r2, [pc, #356]	; (8004d84 <GrandState_Verita+0x2060>)
 8004c1e:	21a5      	movs	r1, #165	; 0xa5
 8004c20:	2014      	movs	r0, #20
 8004c22:	f001 fa8d 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(20, 180, "Verita_NucleoF411RETester", Font16, cl_CYAN);
 8004c26:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <GrandState_Verita+0x2044>)
 8004c28:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c2c:	9201      	str	r2, [sp, #4]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	9200      	str	r2, [sp, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <GrandState_Verita+0x2064>)
 8004c36:	21b4      	movs	r1, #180	; 0xb4
 8004c38:	2014      	movs	r0, #20
 8004c3a:	f001 fa81 	bl	8006140 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Master Version: %08X", FW_Master_Ver);
 8004c3e:	4a53      	ldr	r2, [pc, #332]	; (8004d8c <GrandState_Verita+0x2068>)
 8004c40:	4953      	ldr	r1, [pc, #332]	; (8004d90 <GrandState_Verita+0x206c>)
 8004c42:	484c      	ldr	r0, [pc, #304]	; (8004d74 <GrandState_Verita+0x2050>)
 8004c44:	f008 fe18 	bl	800d878 <siprintf>
		ili9341_WriteStringNoBG(135, 215, TextDispBuffer, Font12, cl_NAVY);
 8004c48:	4b52      	ldr	r3, [pc, #328]	; (8004d94 <GrandState_Verita+0x2070>)
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	9201      	str	r2, [sp, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	9200      	str	r2, [sp, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a47      	ldr	r2, [pc, #284]	; (8004d74 <GrandState_Verita+0x2050>)
 8004c56:	21d7      	movs	r1, #215	; 0xd7
 8004c58:	2087      	movs	r0, #135	; 0x87
 8004c5a:	f001 fa71 	bl	8006140 <ili9341_WriteStringNoBG>

		GrandState = about;
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	; (8004d98 <GrandState_Verita+0x2074>)
 8004c60:	2212      	movs	r2, #18
 8004c62:	701a      	strb	r2, [r3, #0]
		break; ////pre_about
 8004c64:	e14b      	b.n	8004efe <GrandState_Verita+0x21da>

	case about:
		stboxp.choice_set = bpoxy_def;
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <GrandState_Verita+0x2038>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	705a      	strb	r2, [r3, #1]

		if(k_flag.cnt){ //// Back to lobby
 8004c6c:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <GrandState_Verita+0x2078>)
 8004c6e:	789b      	ldrb	r3, [r3, #2]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 813f 	beq.w	8004ef4 <GrandState_Verita+0x21d0>
			GrandState = pre_author;
 8004c76:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <GrandState_Verita+0x2074>)
 8004c78:	2213      	movs	r2, #19
 8004c7a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c82:	4847      	ldr	r0, [pc, #284]	; (8004da0 <GrandState_Verita+0x207c>)
 8004c84:	f002 fdd6 	bl	8007834 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 8004c88:	4b44      	ldr	r3, [pc, #272]	; (8004d9c <GrandState_Verita+0x2078>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	709a      	strb	r2, [r3, #2]
			}
		break; ////about
 8004c8e:	e131      	b.n	8004ef4 <GrandState_Verita+0x21d0>

	case pre_author:
			stboxp.choice_set = bpoxy_def;
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <GrandState_Verita+0x2038>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	23d2      	movs	r3, #210	; 0xd2
 8004c9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ca0:	211e      	movs	r1, #30
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f001 f856 	bl	8005d54 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004ca8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	231e      	movs	r3, #30
 8004cb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f001 f84c 	bl	8005d54 <ili9341_FillRect>

			ili9341_WriteStringNoBG(100, 5, "Authors", Font20, cl_BLACK);
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <GrandState_Verita+0x203c>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	9201      	str	r2, [sp, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	9200      	str	r2, [sp, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a36      	ldr	r2, [pc, #216]	; (8004da4 <GrandState_Verita+0x2080>)
 8004cca:	2105      	movs	r1, #5
 8004ccc:	2064      	movs	r0, #100	; 0x64
 8004cce:	f001 fa37 	bl	8006140 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(25, 35, "Wipop Panyatipsakul", Font16, cl_WHITE);
 8004cd2:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <GrandState_Verita+0x2044>)
 8004cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cd8:	9201      	str	r2, [sp, #4]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	9200      	str	r2, [sp, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <GrandState_Verita+0x2084>)
 8004ce2:	2123      	movs	r1, #35	; 0x23
 8004ce4:	2019      	movs	r0, #25
 8004ce6:	f001 fa2b 	bl	8006140 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(25, 55, "owl_hor | FRAB#7 FIBO", Font16, cl_WHITE);
 8004cea:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <GrandState_Verita+0x2044>)
 8004cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf0:	9201      	str	r2, [sp, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	9200      	str	r2, [sp, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <GrandState_Verita+0x2088>)
 8004cfa:	2137      	movs	r1, #55	; 0x37
 8004cfc:	2019      	movs	r0, #25
 8004cfe:	f001 fa1f 	bl	8006140 <ili9341_WriteStringNoBG>

			ili9341_WriteStringNoBG(40, 220, "Press Knob to continue", Font12, cl_WHITE);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <GrandState_Verita+0x2070>)
 8004d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d08:	9201      	str	r2, [sp, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	9200      	str	r2, [sp, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <GrandState_Verita+0x208c>)
 8004d12:	21dc      	movs	r1, #220	; 0xdc
 8004d14:	2028      	movs	r0, #40	; 0x28
 8004d16:	f001 fa13 	bl	8006140 <ili9341_WriteStringNoBG>

			ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px4_PIC_owlhor_VI_b);
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <GrandState_Verita+0x2090>)
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	2280      	movs	r2, #128	; 0x80
 8004d22:	215a      	movs	r1, #90	; 0x5a
 8004d24:	2014      	movs	r0, #20
 8004d26:	f001 f878 	bl	8005e1a <ili9341_DrawRGBImage>
			ili9341_DrawRGBImage(170, 90, 128, 128, (uint16_t*)px3_PIC_wipop_sc);
 8004d2a:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <GrandState_Verita+0x2094>)
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	2280      	movs	r2, #128	; 0x80
 8004d32:	215a      	movs	r1, #90	; 0x5a
 8004d34:	20aa      	movs	r0, #170	; 0xaa
 8004d36:	f001 f870 	bl	8005e1a <ili9341_DrawRGBImage>

			GrandState = author;
 8004d3a:	4b17      	ldr	r3, [pc, #92]	; (8004d98 <GrandState_Verita+0x2074>)
 8004d3c:	2214      	movs	r2, #20
 8004d3e:	701a      	strb	r2, [r3, #0]
			break; ////pre_author
 8004d40:	e0dd      	b.n	8004efe <GrandState_Verita+0x21da>

	case author:

			if(k_flag.cnt){ //// Back to lobby
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <GrandState_Verita+0x2078>)
 8004d44:	789b      	ldrb	r3, [r3, #2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80d6 	beq.w	8004ef8 <GrandState_Verita+0x21d4>
			GrandState = pre_ppun;
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <GrandState_Verita+0x2074>)
 8004d4e:	2215      	movs	r2, #21
 8004d50:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <GrandState_Verita+0x2078>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	709a      	strb	r2, [r3, #2]
			}
			break; ////author
 8004d58:	e0ce      	b.n	8004ef8 <GrandState_Verita+0x21d4>
 8004d5a:	bf00      	nop
 8004d5c:	200008d4 	.word	0x200008d4
 8004d60:	20000238 	.word	0x20000238
 8004d64:	0800ff94 	.word	0x0800ff94
 8004d68:	20000230 	.word	0x20000230
 8004d6c:	08010260 	.word	0x08010260
 8004d70:	08010268 	.word	0x08010268
 8004d74:	200006b8 	.word	0x200006b8
 8004d78:	080102b0 	.word	0x080102b0
 8004d7c:	080102c0 	.word	0x080102c0
 8004d80:	080102cc 	.word	0x080102cc
 8004d84:	080102e8 	.word	0x080102e8
 8004d88:	080102fc 	.word	0x080102fc
 8004d8c:	12290224 	.word	0x12290224
 8004d90:	08010318 	.word	0x08010318
 8004d94:	20000228 	.word	0x20000228
 8004d98:	20000006 	.word	0x20000006
 8004d9c:	200008b8 	.word	0x200008b8
 8004da0:	40020800 	.word	0x40020800
 8004da4:	08010330 	.word	0x08010330
 8004da8:	08010338 	.word	0x08010338
 8004dac:	0801034c 	.word	0x0801034c
 8004db0:	08010364 	.word	0x08010364
 8004db4:	080281bc 	.word	0x080281bc
 8004db8:	080201bc 	.word	0x080201bc

	case pre_ppun:
		stboxp.choice_set = bpoxy_no;
 8004dbc:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <GrandState_Verita+0x21e4>)
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	23d2      	movs	r3, #210	; 0xd2
 8004dc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dcc:	211e      	movs	r1, #30
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f000 ffc0 	bl	8005d54 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004dd4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	231e      	movs	r3, #30
 8004ddc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004de0:	2100      	movs	r1, #0
 8004de2:	2000      	movs	r0, #0
 8004de4:	f000 ffb6 	bl	8005d54 <ili9341_FillRect>

		ili9341_WriteStringNoBG(100, 5, "Advisors", Font20, cl_BLACK);
 8004de8:	4b48      	ldr	r3, [pc, #288]	; (8004f0c <GrandState_Verita+0x21e8>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	9201      	str	r2, [sp, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	9200      	str	r2, [sp, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a46      	ldr	r2, [pc, #280]	; (8004f10 <GrandState_Verita+0x21ec>)
 8004df6:	2105      	movs	r1, #5
 8004df8:	2064      	movs	r0, #100	; 0x64
 8004dfa:	f001 f9a1 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(10, 35, "#include", Font12, cl_CYAN);
 8004dfe:	4b45      	ldr	r3, [pc, #276]	; (8004f14 <GrandState_Verita+0x21f0>)
 8004e00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e04:	9201      	str	r2, [sp, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	9200      	str	r2, [sp, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a42      	ldr	r2, [pc, #264]	; (8004f18 <GrandState_Verita+0x21f4>)
 8004e0e:	2123      	movs	r1, #35	; 0x23
 8004e10:	200a      	movs	r0, #10
 8004e12:	f001 f995 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(10, 52, "#include", Font12, cl_CYAN);
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <GrandState_Verita+0x21f0>)
 8004e18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e1c:	9201      	str	r2, [sp, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	9200      	str	r2, [sp, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <GrandState_Verita+0x21f4>)
 8004e26:	2134      	movs	r1, #52	; 0x34
 8004e28:	200a      	movs	r0, #10
 8004e2a:	f001 f989 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(75, 35, "Aj PI Pitiwut Teerakittikul", Font12, cl_WHITE);
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <GrandState_Verita+0x21f0>)
 8004e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e34:	9201      	str	r2, [sp, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	9200      	str	r2, [sp, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a37      	ldr	r2, [pc, #220]	; (8004f1c <GrandState_Verita+0x21f8>)
 8004e3e:	2123      	movs	r1, #35	; 0x23
 8004e40:	204b      	movs	r0, #75	; 0x4b
 8004e42:	f001 f97d 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(75, 52, "P PUN Puttinart Archeewawanich", Font12, cl_WHITE);
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <GrandState_Verita+0x21f0>)
 8004e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e4c:	9201      	str	r2, [sp, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	9200      	str	r2, [sp, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <GrandState_Verita+0x21fc>)
 8004e56:	2134      	movs	r1, #52	; 0x34
 8004e58:	204b      	movs	r0, #75	; 0x4b
 8004e5a:	f001 f971 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(40, 220, "Press Knob & Back to lobby", Font12, cl_WHITE);
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <GrandState_Verita+0x21f0>)
 8004e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e64:	9201      	str	r2, [sp, #4]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	9200      	str	r2, [sp, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <GrandState_Verita+0x2200>)
 8004e6e:	21dc      	movs	r1, #220	; 0xdc
 8004e70:	2028      	movs	r0, #40	; 0x28
 8004e72:	f001 f965 	bl	8006140 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(30, 70, "Positive Aura: No crash", Font16, cl_GREENYELLOW);
 8004e76:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <GrandState_Verita+0x2204>)
 8004e78:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8004e7c:	9201      	str	r2, [sp, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	9200      	str	r2, [sp, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <GrandState_Verita+0x2208>)
 8004e86:	2146      	movs	r1, #70	; 0x46
 8004e88:	201e      	movs	r0, #30
 8004e8a:	f001 f959 	bl	8006140 <ili9341_WriteStringNoBG>

		ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px0_PIC_ajpi);
 8004e8e:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <GrandState_Verita+0x220c>)
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	215a      	movs	r1, #90	; 0x5a
 8004e98:	2014      	movs	r0, #20
 8004e9a:	f000 ffbe 	bl	8005e1a <ili9341_DrawRGBImage>
		ili9341_DrawRGBImage(170, 90, 126, 127, (uint16_t*)px1_PIC_ppun);
 8004e9e:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <GrandState_Verita+0x2210>)
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	237f      	movs	r3, #127	; 0x7f
 8004ea4:	227e      	movs	r2, #126	; 0x7e
 8004ea6:	215a      	movs	r1, #90	; 0x5a
 8004ea8:	20aa      	movs	r0, #170	; 0xaa
 8004eaa:	f000 ffb6 	bl	8005e1a <ili9341_DrawRGBImage>

		GrandState = ppun;
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <GrandState_Verita+0x2214>)
 8004eb0:	2216      	movs	r2, #22
 8004eb2:	701a      	strb	r2, [r3, #0]
		break; ////pre_ppun
 8004eb4:	e023      	b.n	8004efe <GrandState_Verita+0x21da>

	case ppun:

		if(k_flag.cnt){ //// Back to lobby
 8004eb6:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <GrandState_Verita+0x2218>)
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01e      	beq.n	8004efc <GrandState_Verita+0x21d8>
		GrandState = pre_lobby;
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <GrandState_Verita+0x2214>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eca:	481d      	ldr	r0, [pc, #116]	; (8004f40 <GrandState_Verita+0x221c>)
 8004ecc:	f002 fcb2 	bl	8007834 <HAL_GPIO_WritePin>
		k_flag.cnt = 0;
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <GrandState_Verita+0x2218>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	709a      	strb	r2, [r3, #2]
		}
		break; ////ppun
 8004ed6:	e011      	b.n	8004efc <GrandState_Verita+0x21d8>
		break; // lobby
 8004ed8:	bf00      	nop
 8004eda:	e010      	b.n	8004efe <GrandState_Verita+0x21da>
		break;
 8004edc:	bf00      	nop
 8004ede:	e00e      	b.n	8004efe <GrandState_Verita+0x21da>
		break; //hw_chk
 8004ee0:	bf00      	nop
 8004ee2:	e00c      	b.n	8004efe <GrandState_Verita+0x21da>
		break;
 8004ee4:	bf00      	nop
 8004ee6:	e00a      	b.n	8004efe <GrandState_Verita+0x21da>
			break; //gpio_chk
 8004ee8:	bf00      	nop
 8004eea:	e008      	b.n	8004efe <GrandState_Verita+0x21da>
		break; // monitor
 8004eec:	bf00      	nop
 8004eee:	e006      	b.n	8004efe <GrandState_Verita+0x21da>
		break;
 8004ef0:	bf00      	nop
 8004ef2:	e004      	b.n	8004efe <GrandState_Verita+0x21da>
		break; ////about
 8004ef4:	bf00      	nop
 8004ef6:	e002      	b.n	8004efe <GrandState_Verita+0x21da>
			break; ////author
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <GrandState_Verita+0x21da>
		break; ////ppun
 8004efc:	bf00      	nop
	}
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200008d4 	.word	0x200008d4
 8004f0c:	20000238 	.word	0x20000238
 8004f10:	0801037c 	.word	0x0801037c
 8004f14:	20000228 	.word	0x20000228
 8004f18:	08010388 	.word	0x08010388
 8004f1c:	08010394 	.word	0x08010394
 8004f20:	080103b0 	.word	0x080103b0
 8004f24:	080103d0 	.word	0x080103d0
 8004f28:	20000230 	.word	0x20000230
 8004f2c:	080103ec 	.word	0x080103ec
 8004f30:	080104b8 	.word	0x080104b8
 8004f34:	080184b8 	.word	0x080184b8
 8004f38:	20000006 	.word	0x20000006
 8004f3c:	200008b8 	.word	0x200008b8
 8004f40:	40020800 	.word	0x40020800
 8004f44:	00000000 	.word	0x00000000

08004f48 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	80fb      	strh	r3, [r7, #6]
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb faed 	bl	8000534 <__aeabi_i2d>
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <ADCTVolta+0x58>)
 8004f60:	f7fb fc7c 	bl	800085c <__aeabi_ddiv>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	a30a      	add	r3, pc, #40	; (adr r3, 8004f98 <ADCTVolta+0x50>)
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f7fb fb49 	bl	8000608 <__aeabi_dmul>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f7fb fe3b 	bl	8000bf8 <__aeabi_d2f>
 8004f82:	4603      	mov	r3, r0
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eeb0 0a67 	vmov.f32	s0, s15
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	f3af 8000 	nop.w
 8004f98:	66666666 	.word	0x66666666
 8004f9c:	400a6666 	.word	0x400a6666
 8004fa0:	40b00000 	.word	0x40b00000
 8004fa4:	00000000 	.word	0x00000000

08004fa8 <TempEquat>:
float TempEquat(float Vs){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fb fad0 	bl	8000558 <__aeabi_f2d>
 8004fb8:	a314      	add	r3, pc, #80	; (adr r3, 800500c <TempEquat+0x64>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb f96b 	bl	8000298 <__aeabi_dsub>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	a312      	add	r3, pc, #72	; (adr r3, 8005014 <TempEquat+0x6c>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb fc44 	bl	800085c <__aeabi_ddiv>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <TempEquat+0x60>)
 8004fe2:	f7fb f95b 	bl	800029c <__adddf3>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	f7fb fe03 	bl	8000bf8 <__aeabi_d2f>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	ee07 3a90 	vmov	s15, r3
}
 8004ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	f3af 8000 	nop.w
 8005008:	40390000 	.word	0x40390000
 800500c:	851eb852 	.word	0x851eb852
 8005010:	3fe851eb 	.word	0x3fe851eb
 8005014:	47ae147b 	.word	0x47ae147b
 8005018:	3f647ae1 	.word	0x3f647ae1

0800501c <resetgpio_char>:
		 tyyy |= ( GPIO_NOPULL << (10 * 2U));
		 GPIOA->PUPDR = tyyy;
}

//// Reset every GPIO char for next test
void resetgpio_char(){
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "A_PUR: ");
 8005020:	4912      	ldr	r1, [pc, #72]	; (800506c <resetgpio_char+0x50>)
 8005022:	4813      	ldr	r0, [pc, #76]	; (8005070 <resetgpio_char+0x54>)
 8005024:	f008 fc28 	bl	800d878 <siprintf>
	sprintf(WR_B_PUPDR, "B_PUR: ");
 8005028:	4912      	ldr	r1, [pc, #72]	; (8005074 <resetgpio_char+0x58>)
 800502a:	4813      	ldr	r0, [pc, #76]	; (8005078 <resetgpio_char+0x5c>)
 800502c:	f008 fc24 	bl	800d878 <siprintf>
	sprintf(WR_C_PUPDR, "C_PUR: ");
 8005030:	4912      	ldr	r1, [pc, #72]	; (800507c <resetgpio_char+0x60>)
 8005032:	4813      	ldr	r0, [pc, #76]	; (8005080 <resetgpio_char+0x64>)
 8005034:	f008 fc20 	bl	800d878 <siprintf>

	sprintf(WR_A_OPP, "A_OPP: ");
 8005038:	4912      	ldr	r1, [pc, #72]	; (8005084 <resetgpio_char+0x68>)
 800503a:	4813      	ldr	r0, [pc, #76]	; (8005088 <resetgpio_char+0x6c>)
 800503c:	f008 fc1c 	bl	800d878 <siprintf>
	sprintf(WR_B_OPP, "B_OPP: ");
 8005040:	4912      	ldr	r1, [pc, #72]	; (800508c <resetgpio_char+0x70>)
 8005042:	4813      	ldr	r0, [pc, #76]	; (8005090 <resetgpio_char+0x74>)
 8005044:	f008 fc18 	bl	800d878 <siprintf>
	sprintf(WR_C_OPP, "C_OPP: ");
 8005048:	4912      	ldr	r1, [pc, #72]	; (8005094 <resetgpio_char+0x78>)
 800504a:	4813      	ldr	r0, [pc, #76]	; (8005098 <resetgpio_char+0x7c>)
 800504c:	f008 fc14 	bl	800d878 <siprintf>

	sprintf(WR_A_OOD, "A_OOD: ");
 8005050:	4912      	ldr	r1, [pc, #72]	; (800509c <resetgpio_char+0x80>)
 8005052:	4813      	ldr	r0, [pc, #76]	; (80050a0 <resetgpio_char+0x84>)
 8005054:	f008 fc10 	bl	800d878 <siprintf>
	sprintf(WR_B_OOD, "B_OOD: ");
 8005058:	4912      	ldr	r1, [pc, #72]	; (80050a4 <resetgpio_char+0x88>)
 800505a:	4813      	ldr	r0, [pc, #76]	; (80050a8 <resetgpio_char+0x8c>)
 800505c:	f008 fc0c 	bl	800d878 <siprintf>
	sprintf(WR_C_OOD, "C_OOD: ");
 8005060:	4912      	ldr	r1, [pc, #72]	; (80050ac <resetgpio_char+0x90>)
 8005062:	4813      	ldr	r0, [pc, #76]	; (80050b0 <resetgpio_char+0x94>)
 8005064:	f008 fc08 	bl	800d878 <siprintf>
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08010404 	.word	0x08010404
 8005070:	2000005c 	.word	0x2000005c
 8005074:	0801040c 	.word	0x0801040c
 8005078:	2000007c 	.word	0x2000007c
 800507c:	08010414 	.word	0x08010414
 8005080:	2000009c 	.word	0x2000009c
 8005084:	0801041c 	.word	0x0801041c
 8005088:	200000bc 	.word	0x200000bc
 800508c:	08010424 	.word	0x08010424
 8005090:	200000dc 	.word	0x200000dc
 8005094:	0801042c 	.word	0x0801042c
 8005098:	200000fc 	.word	0x200000fc
 800509c:	08010434 	.word	0x08010434
 80050a0:	2000011c 	.word	0x2000011c
 80050a4:	0801043c 	.word	0x0801043c
 80050a8:	2000013c 	.word	0x2000013c
 80050ac:	08010444 	.word	0x08010444
 80050b0:	2000015c 	.word	0x2000015c

080050b4 <veritaPTC_reset>:

//// Verita PTC reset ??? try
void veritaPTC_reset(){
 80050b4:	b490      	push	{r4, r7}
 80050b6:	af00      	add	r7, sp, #0
	//   HAL_UART_DMAPause(&huart6);
	//   HAL_UART_DMAResume(&huart6);

	//HAL_UART_DeInit(&huart6);

	VRB_CL.Mark.FirmwareVer = 0x00; // clear if nextstep break
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <veritaPTC_reset+0x30>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	649a      	str	r2, [r3, #72]	; 0x48
	VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <veritaPTC_reset+0x30>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	for (register int i = 0; i <= 9; i++){
 80050c6:	2400      	movs	r4, #0
 80050c8:	e004      	b.n	80050d4 <veritaPTC_reset+0x20>
		VRB_CL.U32[i] = 0x00;
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <veritaPTC_reset+0x30>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (register int i = 0; i <= 9; i++){
 80050d2:	3401      	adds	r4, #1
 80050d4:	2c09      	cmp	r4, #9
 80050d6:	ddf8      	ble.n	80050ca <veritaPTC_reset+0x16>
	}
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc90      	pop	{r4, r7}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000784 	.word	0x20000784

080050e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d10f      	bne.n	800511a <HAL_GPIO_EXTI_Callback+0x32>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <HAL_GPIO_EXTI_Callback+0x4c>)
 80050fc:	2208      	movs	r2, #8
 80050fe:	701a      	strb	r2, [r3, #0]
		buzzr.priod_up = 250;
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005102:	22fa      	movs	r2, #250	; 0xfa
 8005104:	805a      	strh	r2, [r3, #2]
		buzzr.priod_dn = 100;
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005108:	2264      	movs	r2, #100	; 0x64
 800510a:	809a      	strh	r2, [r3, #4]
		buzzer_scream_cnt();
 800510c:	f7fd fd94 	bl	8002c38 <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8005110:	2202      	movs	r2, #2
 8005112:	21a1      	movs	r1, #161	; 0xa1
 8005114:	4808      	ldr	r0, [pc, #32]	; (8005138 <HAL_GPIO_EXTI_Callback+0x50>)
 8005116:	f7fc fa8b 	bl	8001630 <Tx_UART_Verita_Command>
		//Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);

		}

	//// knob rotter button pressed
	if(GPIO_Pin == GPIO_PIN_7){
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d105      	bne.n	800512c <HAL_GPIO_EXTI_Callback+0x44>
		k_flag.cnt++;
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_GPIO_EXTI_Callback+0x54>)
 8005122:	789b      	ldrb	r3, [r3, #2]
 8005124:	3301      	adds	r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <HAL_GPIO_EXTI_Callback+0x54>)
 800512a:	709a      	strb	r2, [r3, #2]
	}
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200008a0 	.word	0x200008a0
 8005138:	20000614 	.word	0x20000614
 800513c:	200008b8 	.word	0x200008b8

08005140 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a07      	ldr	r2, [pc, #28]	; (8005168 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d106      	bne.n	800515e <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005158:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 800515a:	f7fd fd6d 	bl	8002c38 <buzzer_scream_cnt>
	}
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000544 	.word	0x20000544
 800516c:	20000898 	.word	0x20000898

08005170 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VRB_CL); //// try using only 1 slot 9 Buffer
 8005178:	4905      	ldr	r1, [pc, #20]	; (8005190 <HAL_UART_RxCpltCallback+0x20>)
 800517a:	4806      	ldr	r0, [pc, #24]	; (8005194 <HAL_UART_RxCpltCallback+0x24>)
 800517c:	f7fc f8e8 	bl	8001350 <Rx_Verita_engine_callBak>
	Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 8005180:	4903      	ldr	r1, [pc, #12]	; (8005190 <HAL_UART_RxCpltCallback+0x20>)
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <HAL_UART_RxCpltCallback+0x28>)
 8005184:	f7fc f9da 	bl	800153c <Tx_Rq_Verita_engine>
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000784 	.word	0x20000784
 8005194:	200007e8 	.word	0x200007e8
 8005198:	20000614 	.word	0x20000614

0800519c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051a0:	b672      	cpsid	i
}
 80051a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051a4:	e7fe      	b.n	80051a4 <Error_Handler+0x8>
	...

080051a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_MspInit+0x4c>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	4a0f      	ldr	r2, [pc, #60]	; (80051f4 <HAL_MspInit+0x4c>)
 80051b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051bc:	6453      	str	r3, [r2, #68]	; 0x44
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_MspInit+0x4c>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_MspInit+0x4c>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <HAL_MspInit+0x4c>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_MspInit+0x4c>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80051e6:	2007      	movs	r0, #7
 80051e8:	f001 fd36 	bl	8006c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40023800 	.word	0x40023800

080051f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	609a      	str	r2, [r3, #8]
 800520c:	60da      	str	r2, [r3, #12]
 800520e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a21      	ldr	r2, [pc, #132]	; (800529c <HAL_I2C_MspInit+0xa4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d13c      	bne.n	8005294 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_I2C_MspInit+0xa8>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <HAL_I2C_MspInit+0xa8>)
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	6313      	str	r3, [r2, #48]	; 0x30
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <HAL_I2C_MspInit+0xa8>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800523a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800523c:	2312      	movs	r3, #18
 800523e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005244:	2303      	movs	r3, #3
 8005246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005248:	2304      	movs	r3, #4
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800524c:	f107 0314 	add.w	r3, r7, #20
 8005250:	4619      	mov	r1, r3
 8005252:	4814      	ldr	r0, [pc, #80]	; (80052a4 <HAL_I2C_MspInit+0xac>)
 8005254:	f002 f952 	bl	80074fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <HAL_I2C_MspInit+0xa8>)
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <HAL_I2C_MspInit+0xa8>)
 8005262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005266:	6413      	str	r3, [r2, #64]	; 0x40
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <HAL_I2C_MspInit+0xa8>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005274:	2200      	movs	r2, #0
 8005276:	2100      	movs	r1, #0
 8005278:	201f      	movs	r0, #31
 800527a:	f001 fcf8 	bl	8006c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800527e:	201f      	movs	r0, #31
 8005280:	f001 fd11 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005284:	2200      	movs	r2, #0
 8005286:	2100      	movs	r1, #0
 8005288:	2020      	movs	r0, #32
 800528a:	f001 fcf0 	bl	8006c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800528e:	2020      	movs	r0, #32
 8005290:	f001 fd09 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005294:	bf00      	nop
 8005296:	3728      	adds	r7, #40	; 0x28
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40005400 	.word	0x40005400
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40020400 	.word	0x40020400

080052a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 0314 	add.w	r3, r7, #20
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_SPI_MspInit+0x84>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d12c      	bne.n	8005324 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	4b18      	ldr	r3, [pc, #96]	; (8005330 <HAL_SPI_MspInit+0x88>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	4a17      	ldr	r2, [pc, #92]	; (8005330 <HAL_SPI_MspInit+0x88>)
 80052d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d8:	6413      	str	r3, [r2, #64]	; 0x40
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_SPI_MspInit+0x88>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <HAL_SPI_MspInit+0x88>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	4a10      	ldr	r2, [pc, #64]	; (8005330 <HAL_SPI_MspInit+0x88>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	6313      	str	r3, [r2, #48]	; 0x30
 80052f6:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <HAL_SPI_MspInit+0x88>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005302:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	2302      	movs	r3, #2
 800530a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005310:	2303      	movs	r3, #3
 8005312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005314:	2306      	movs	r3, #6
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	4619      	mov	r1, r3
 800531e:	4805      	ldr	r0, [pc, #20]	; (8005334 <HAL_SPI_MspInit+0x8c>)
 8005320:	f002 f8ec 	bl	80074fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005324:	bf00      	nop
 8005326:	3728      	adds	r7, #40	; 0x28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40003c00 	.word	0x40003c00
 8005330:	40023800 	.word	0x40023800
 8005334:	40020800 	.word	0x40020800

08005338 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_TIM_Encoder_MspInit+0x84>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d12b      	bne.n	80053b2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	6413      	str	r3, [r2, #64]	; 0x40
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	6313      	str	r3, [r2, #48]	; 0x30
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005392:	23c0      	movs	r3, #192	; 0xc0
 8005394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005396:	2302      	movs	r3, #2
 8005398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539e:	2300      	movs	r3, #0
 80053a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053a2:	2302      	movs	r3, #2
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	4619      	mov	r1, r3
 80053ac:	4805      	ldr	r0, [pc, #20]	; (80053c4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80053ae:	f002 f8a5 	bl	80074fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80053b2:	bf00      	nop
 80053b4:	3728      	adds	r7, #40	; 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40020000 	.word	0x40020000

080053c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <HAL_TIM_Base_MspInit+0x48>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d115      	bne.n	8005406 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <HAL_TIM_Base_MspInit+0x4c>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <HAL_TIM_Base_MspInit+0x4c>)
 80053e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e8:	6453      	str	r3, [r2, #68]	; 0x44
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_TIM_Base_MspInit+0x4c>)
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80053f6:	2200      	movs	r2, #0
 80053f8:	2100      	movs	r1, #0
 80053fa:	2019      	movs	r0, #25
 80053fc:	f001 fc37 	bl	8006c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005400:	2019      	movs	r0, #25
 8005402:	f001 fc50 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40014400 	.word	0x40014400
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08e      	sub	sp, #56	; 0x38
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a74      	ldr	r2, [pc, #464]	; (8005608 <HAL_UART_MspInit+0x1f0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d135      	bne.n	80054a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	4b73      	ldr	r3, [pc, #460]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4a72      	ldr	r2, [pc, #456]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005444:	f043 0310 	orr.w	r3, r3, #16
 8005448:	6453      	str	r3, [r2, #68]	; 0x44
 800544a:	4b70      	ldr	r3, [pc, #448]	; (800560c <HAL_UART_MspInit+0x1f4>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	4b6c      	ldr	r3, [pc, #432]	; (800560c <HAL_UART_MspInit+0x1f4>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a6b      	ldr	r2, [pc, #428]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b69      	ldr	r3, [pc, #420]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005472:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005480:	2303      	movs	r3, #3
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005484:	2307      	movs	r3, #7
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548c:	4619      	mov	r1, r3
 800548e:	4860      	ldr	r0, [pc, #384]	; (8005610 <HAL_UART_MspInit+0x1f8>)
 8005490:	f002 f834 	bl	80074fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005494:	2200      	movs	r2, #0
 8005496:	2100      	movs	r1, #0
 8005498:	2025      	movs	r0, #37	; 0x25
 800549a:	f001 fbe8 	bl	8006c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800549e:	2025      	movs	r0, #37	; 0x25
 80054a0:	f001 fc01 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80054a4:	e0ab      	b.n	80055fe <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a5a      	ldr	r2, [pc, #360]	; (8005614 <HAL_UART_MspInit+0x1fc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d12c      	bne.n	800550a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_UART_MspInit+0x1f4>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	4a54      	ldr	r2, [pc, #336]	; (800560c <HAL_UART_MspInit+0x1f4>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054be:	6413      	str	r3, [r2, #64]	; 0x40
 80054c0:	4b52      	ldr	r3, [pc, #328]	; (800560c <HAL_UART_MspInit+0x1f4>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	4b4e      	ldr	r3, [pc, #312]	; (800560c <HAL_UART_MspInit+0x1f4>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4a4d      	ldr	r2, [pc, #308]	; (800560c <HAL_UART_MspInit+0x1f4>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6313      	str	r3, [r2, #48]	; 0x30
 80054dc:	4b4b      	ldr	r3, [pc, #300]	; (800560c <HAL_UART_MspInit+0x1f4>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80054e8:	230c      	movs	r3, #12
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ec:	2302      	movs	r3, #2
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f4:	2303      	movs	r3, #3
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054f8:	2307      	movs	r3, #7
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005500:	4619      	mov	r1, r3
 8005502:	4843      	ldr	r0, [pc, #268]	; (8005610 <HAL_UART_MspInit+0x1f8>)
 8005504:	f001 fffa 	bl	80074fc <HAL_GPIO_Init>
}
 8005508:	e079      	b.n	80055fe <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a42      	ldr	r2, [pc, #264]	; (8005618 <HAL_UART_MspInit+0x200>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d174      	bne.n	80055fe <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	4b3c      	ldr	r3, [pc, #240]	; (800560c <HAL_UART_MspInit+0x1f4>)
 800551a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551c:	4a3b      	ldr	r2, [pc, #236]	; (800560c <HAL_UART_MspInit+0x1f4>)
 800551e:	f043 0320 	orr.w	r3, r3, #32
 8005522:	6453      	str	r3, [r2, #68]	; 0x44
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	4b35      	ldr	r3, [pc, #212]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a34      	ldr	r2, [pc, #208]	; (800560c <HAL_UART_MspInit+0x1f4>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	6313      	str	r3, [r2, #48]	; 0x30
 8005540:	4b32      	ldr	r3, [pc, #200]	; (800560c <HAL_UART_MspInit+0x1f4>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800554c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005552:	2302      	movs	r3, #2
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555a:	2303      	movs	r3, #3
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800555e:	2308      	movs	r3, #8
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	4619      	mov	r1, r3
 8005568:	4829      	ldr	r0, [pc, #164]	; (8005610 <HAL_UART_MspInit+0x1f8>)
 800556a:	f001 ffc7 	bl	80074fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800556e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005578:	2301      	movs	r3, #1
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557c:	2303      	movs	r3, #3
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005580:	2308      	movs	r3, #8
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005588:	4619      	mov	r1, r3
 800558a:	4821      	ldr	r0, [pc, #132]	; (8005610 <HAL_UART_MspInit+0x1f8>)
 800558c:	f001 ffb6 	bl	80074fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <HAL_UART_MspInit+0x204>)
 8005592:	4a23      	ldr	r2, [pc, #140]	; (8005620 <HAL_UART_MspInit+0x208>)
 8005594:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_UART_MspInit+0x204>)
 8005598:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800559c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800559e:	4b1f      	ldr	r3, [pc, #124]	; (800561c <HAL_UART_MspInit+0x204>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_UART_MspInit+0x204>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <HAL_UART_MspInit+0x204>)
 80055ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055b0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_UART_MspInit+0x204>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <HAL_UART_MspInit+0x204>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_UART_MspInit+0x204>)
 80055c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <HAL_UART_MspInit+0x204>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_UART_MspInit+0x204>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80055d2:	4812      	ldr	r0, [pc, #72]	; (800561c <HAL_UART_MspInit+0x204>)
 80055d4:	f001 fb82 	bl	8006cdc <HAL_DMA_Init>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80055de:	f7ff fddd 	bl	800519c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a0d      	ldr	r2, [pc, #52]	; (800561c <HAL_UART_MspInit+0x204>)
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <HAL_UART_MspInit+0x204>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80055ee:	2200      	movs	r2, #0
 80055f0:	2100      	movs	r1, #0
 80055f2:	2047      	movs	r0, #71	; 0x47
 80055f4:	f001 fb3b 	bl	8006c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80055f8:	2047      	movs	r0, #71	; 0x47
 80055fa:	f001 fb54 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
}
 80055fe:	bf00      	nop
 8005600:	3738      	adds	r7, #56	; 0x38
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40011000 	.word	0x40011000
 800560c:	40023800 	.word	0x40023800
 8005610:	40020000 	.word	0x40020000
 8005614:	40004400 	.word	0x40004400
 8005618:	40011400 	.word	0x40011400
 800561c:	20000658 	.word	0x20000658
 8005620:	40026428 	.word	0x40026428

08005624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005628:	e7fe      	b.n	8005628 <NMI_Handler+0x4>

0800562a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800562a:	b480      	push	{r7}
 800562c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800562e:	e7fe      	b.n	800562e <HardFault_Handler+0x4>

08005630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005634:	e7fe      	b.n	8005634 <MemManage_Handler+0x4>

08005636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005636:	b480      	push	{r7}
 8005638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800563a:	e7fe      	b.n	800563a <BusFault_Handler+0x4>

0800563c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005640:	e7fe      	b.n	8005640 <UsageFault_Handler+0x4>

08005642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005670:	f001 f9de 	bl	8006a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}

08005678 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800567c:	2080      	movs	r0, #128	; 0x80
 800567e:	f002 f90d 	bl	800789c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800568c:	4802      	ldr	r0, [pc, #8]	; (8005698 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800568e:	f005 ff5a 	bl	800b546 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000544 	.word	0x20000544

0800569c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056a0:	4802      	ldr	r0, [pc, #8]	; (80056ac <I2C1_EV_IRQHandler+0x10>)
 80056a2:	f002 fd77 	bl	8008194 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000450 	.word	0x20000450

080056b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80056b4:	4802      	ldr	r0, [pc, #8]	; (80056c0 <I2C1_ER_IRQHandler+0x10>)
 80056b6:	f002 fede 	bl	8008476 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000450 	.word	0x20000450

080056c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <USART1_IRQHandler+0x10>)
 80056ca:	f006 fb47 	bl	800bd5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000058c 	.word	0x2000058c

080056d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80056dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056e0:	f002 f8dc 	bl	800789c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056e4:	bf00      	nop
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <DMA2_Stream1_IRQHandler+0x10>)
 80056ee:	f001 fc8d 	bl	800700c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000658 	.word	0x20000658

080056fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <USART6_IRQHandler+0x10>)
 8005702:	f006 fb2b 	bl	800bd5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000614 	.word	0x20000614

08005710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
	return 1;
 8005714:	2301      	movs	r3, #1
}
 8005716:	4618      	mov	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_kill>:

int _kill(int pid, int sig)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800572a:	f007 fc09 	bl	800cf40 <__errno>
 800572e:	4603      	mov	r3, r0
 8005730:	2216      	movs	r2, #22
 8005732:	601a      	str	r2, [r3, #0]
	return -1;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <_exit>:

void _exit (int status)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005748:	f04f 31ff 	mov.w	r1, #4294967295
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ffe7 	bl	8005720 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005752:	e7fe      	b.n	8005752 <_exit+0x12>

08005754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e00a      	b.n	800577c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005766:	f3af 8000 	nop.w
 800576a:	4601      	mov	r1, r0
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	60ba      	str	r2, [r7, #8]
 8005772:	b2ca      	uxtb	r2, r1
 8005774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3301      	adds	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	dbf0      	blt.n	8005766 <_read+0x12>
	}

return len;
 8005784:	687b      	ldr	r3, [r7, #4]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e009      	b.n	80057b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	60ba      	str	r2, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	3301      	adds	r3, #1
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	dbf1      	blt.n	80057a0 <_write+0x12>
	}
	return len;
 80057bc:	687b      	ldr	r3, [r7, #4]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_close>:

int _close(int file)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
	return -1;
 80057ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ee:	605a      	str	r2, [r3, #4]
	return 0;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <_isatty>:

int _isatty(int file)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
	return 1;
 8005806:	2301      	movs	r3, #1
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
	return 0;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005838:	4a14      	ldr	r2, [pc, #80]	; (800588c <_sbrk+0x5c>)
 800583a:	4b15      	ldr	r3, [pc, #84]	; (8005890 <_sbrk+0x60>)
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <_sbrk+0x64>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <_sbrk+0x64>)
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <_sbrk+0x68>)
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <_sbrk+0x64>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	429a      	cmp	r2, r3
 800585e:	d207      	bcs.n	8005870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005860:	f007 fb6e 	bl	800cf40 <__errno>
 8005864:	4603      	mov	r3, r0
 8005866:	220c      	movs	r2, #12
 8005868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800586a:	f04f 33ff 	mov.w	r3, #4294967295
 800586e:	e009      	b.n	8005884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005870:	4b08      	ldr	r3, [pc, #32]	; (8005894 <_sbrk+0x64>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005876:	4b07      	ldr	r3, [pc, #28]	; (8005894 <_sbrk+0x64>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <_sbrk+0x64>)
 8005880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20020000 	.word	0x20020000
 8005890:	00000400 	.word	0x00000400
 8005894:	200008e0 	.word	0x200008e0
 8005898:	20000900 	.word	0x20000900

0800589c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <SystemInit+0x20>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	4a05      	ldr	r2, [pc, #20]	; (80058bc <SystemInit+0x20>)
 80058a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	e000ed00 	.word	0xe000ed00

080058c0 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 fefe 	bl	80066c6 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80058ca:	2011      	movs	r0, #17
 80058cc:	f000 ff82 	bl	80067d4 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80058d0:	bf00      	nop
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80058d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80058ea:	23f0      	movs	r3, #240	; 0xf0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80058fe:	4b52      	ldr	r3, [pc, #328]	; (8005a48 <ili9341_Init+0x150>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d115      	bne.n	8005936 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 800590a:	4b4f      	ldr	r3, [pc, #316]	; (8005a48 <ili9341_Init+0x150>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b4c      	ldr	r3, [pc, #304]	; (8005a48 <ili9341_Init+0x150>)
 8005916:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8005918:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <ili9341_Init+0x150>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <ili9341_Init+0x30>
      LCD_IO_Init();
 8005924:	f000 feda 	bl	80066dc <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8005928:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <ili9341_Init+0x150>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	b2da      	uxtb	r2, r3
 8005932:	4b45      	ldr	r3, [pc, #276]	; (8005a48 <ili9341_Init+0x150>)
 8005934:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8005936:	200a      	movs	r0, #10
 8005938:	f000 feba 	bl	80066b0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 800593c:	2001      	movs	r0, #1
 800593e:	f000 ff49 	bl	80067d4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8005942:	200a      	movs	r0, #10
 8005944:	f000 feb4 	bl	80066b0 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8005948:	2203      	movs	r2, #3
 800594a:	4940      	ldr	r1, [pc, #256]	; (8005a4c <ili9341_Init+0x154>)
 800594c:	20ef      	movs	r0, #239	; 0xef
 800594e:	f000 ffaf 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8005952:	2203      	movs	r2, #3
 8005954:	493e      	ldr	r1, [pc, #248]	; (8005a50 <ili9341_Init+0x158>)
 8005956:	20cf      	movs	r0, #207	; 0xcf
 8005958:	f000 ffaa 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 800595c:	2204      	movs	r2, #4
 800595e:	493d      	ldr	r1, [pc, #244]	; (8005a54 <ili9341_Init+0x15c>)
 8005960:	20ed      	movs	r0, #237	; 0xed
 8005962:	f000 ffa5 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8005966:	2203      	movs	r2, #3
 8005968:	493b      	ldr	r1, [pc, #236]	; (8005a58 <ili9341_Init+0x160>)
 800596a:	20e8      	movs	r0, #232	; 0xe8
 800596c:	f000 ffa0 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8005970:	2205      	movs	r2, #5
 8005972:	493a      	ldr	r1, [pc, #232]	; (8005a5c <ili9341_Init+0x164>)
 8005974:	20cb      	movs	r0, #203	; 0xcb
 8005976:	f000 ff9b 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 800597a:	2201      	movs	r2, #1
 800597c:	4938      	ldr	r1, [pc, #224]	; (8005a60 <ili9341_Init+0x168>)
 800597e:	20f7      	movs	r0, #247	; 0xf7
 8005980:	f000 ff96 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8005984:	2202      	movs	r2, #2
 8005986:	4937      	ldr	r1, [pc, #220]	; (8005a64 <ili9341_Init+0x16c>)
 8005988:	20ea      	movs	r0, #234	; 0xea
 800598a:	f000 ff91 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800598e:	2201      	movs	r2, #1
 8005990:	4935      	ldr	r1, [pc, #212]	; (8005a68 <ili9341_Init+0x170>)
 8005992:	20c0      	movs	r0, #192	; 0xc0
 8005994:	f000 ff8c 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8005998:	2201      	movs	r2, #1
 800599a:	4934      	ldr	r1, [pc, #208]	; (8005a6c <ili9341_Init+0x174>)
 800599c:	20c1      	movs	r0, #193	; 0xc1
 800599e:	f000 ff87 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 80059a2:	2202      	movs	r2, #2
 80059a4:	4932      	ldr	r1, [pc, #200]	; (8005a70 <ili9341_Init+0x178>)
 80059a6:	20c5      	movs	r0, #197	; 0xc5
 80059a8:	f000 ff82 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 80059ac:	2201      	movs	r2, #1
 80059ae:	4931      	ldr	r1, [pc, #196]	; (8005a74 <ili9341_Init+0x17c>)
 80059b0:	20c7      	movs	r0, #199	; 0xc7
 80059b2:	f000 ff7d 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80059b6:	2201      	movs	r2, #1
 80059b8:	492f      	ldr	r1, [pc, #188]	; (8005a78 <ili9341_Init+0x180>)
 80059ba:	2037      	movs	r0, #55	; 0x37
 80059bc:	f000 ff78 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80059c0:	2201      	movs	r2, #1
 80059c2:	492e      	ldr	r1, [pc, #184]	; (8005a7c <ili9341_Init+0x184>)
 80059c4:	203a      	movs	r0, #58	; 0x3a
 80059c6:	f000 ff73 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80059ca:	2202      	movs	r2, #2
 80059cc:	492c      	ldr	r1, [pc, #176]	; (8005a80 <ili9341_Init+0x188>)
 80059ce:	20b1      	movs	r0, #177	; 0xb1
 80059d0:	f000 ff6e 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80059d4:	2203      	movs	r2, #3
 80059d6:	492b      	ldr	r1, [pc, #172]	; (8005a84 <ili9341_Init+0x18c>)
 80059d8:	20b6      	movs	r0, #182	; 0xb6
 80059da:	f000 ff69 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80059de:	2201      	movs	r2, #1
 80059e0:	4925      	ldr	r1, [pc, #148]	; (8005a78 <ili9341_Init+0x180>)
 80059e2:	20f2      	movs	r0, #242	; 0xf2
 80059e4:	f000 ff64 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80059e8:	2201      	movs	r2, #1
 80059ea:	4927      	ldr	r1, [pc, #156]	; (8005a88 <ili9341_Init+0x190>)
 80059ec:	2026      	movs	r0, #38	; 0x26
 80059ee:	f000 ff5f 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80059f2:	220f      	movs	r2, #15
 80059f4:	4925      	ldr	r1, [pc, #148]	; (8005a8c <ili9341_Init+0x194>)
 80059f6:	20e0      	movs	r0, #224	; 0xe0
 80059f8:	f000 ff5a 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80059fc:	220f      	movs	r2, #15
 80059fe:	4924      	ldr	r1, [pc, #144]	; (8005a90 <ili9341_Init+0x198>)
 8005a00:	20e1      	movs	r0, #225	; 0xe1
 8005a02:	f000 ff55 	bl	80068b0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8005a06:	2036      	movs	r0, #54	; 0x36
 8005a08:	f000 fee4 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005a0c:	2028      	movs	r0, #40	; 0x28
 8005a0e:	f000 feff 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8005a12:	2011      	movs	r0, #17
 8005a14:	f000 fede 	bl	80067d4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8005a18:	200a      	movs	r0, #10
 8005a1a:	f000 fe49 	bl	80066b0 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	23f0      	movs	r3, #240	; 0xf0
 8005a24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005a28:	2100      	movs	r1, #0
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f000 f992 	bl	8005d54 <ili9341_FillRect>
  LCD_Delay(10);
 8005a30:	200a      	movs	r0, #10
 8005a32:	f000 fe3d 	bl	80066b0 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8005a36:	2029      	movs	r0, #41	; 0x29
 8005a38:	f000 fecc 	bl	80067d4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8005a3c:	200a      	movs	r0, #10
 8005a3e:	f000 fe37 	bl	80066b0 <LCD_Delay>
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200008e4 	.word	0x200008e4
 8005a4c:	0801044c 	.word	0x0801044c
 8005a50:	08010450 	.word	0x08010450
 8005a54:	08010454 	.word	0x08010454
 8005a58:	0801045c 	.word	0x0801045c
 8005a5c:	08010460 	.word	0x08010460
 8005a60:	08010468 	.word	0x08010468
 8005a64:	0801046c 	.word	0x0801046c
 8005a68:	08010470 	.word	0x08010470
 8005a6c:	08010474 	.word	0x08010474
 8005a70:	08010478 	.word	0x08010478
 8005a74:	0801047c 	.word	0x0801047c
 8005a78:	08010480 	.word	0x08010480
 8005a7c:	08010484 	.word	0x08010484
 8005a80:	08010488 	.word	0x08010488
 8005a84:	0801048c 	.word	0x0801048c
 8005a88:	08010490 	.word	0x08010490
 8005a8c:	08010494 	.word	0x08010494
 8005a90:	080104a4 	.word	0x080104a4

08005a94 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	80bb      	strh	r3, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8005aa6:	202a      	movs	r0, #42	; 0x2a
 8005aa8:	f000 fe94 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 feab 	bl	8006810 <LCD_IO_WriteData8>
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fea6 	bl	8006810 <LCD_IO_WriteData8>
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fe9f 	bl	8006810 <LCD_IO_WriteData8>
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fe9a 	bl	8006810 <LCD_IO_WriteData8>
 8005adc:	202b      	movs	r0, #43	; 0x2b
 8005ade:	f000 fe79 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005ae2:	88bb      	ldrh	r3, [r7, #4]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fe90 	bl	8006810 <LCD_IO_WriteData8>
 8005af0:	88bb      	ldrh	r3, [r7, #4]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fe8b 	bl	8006810 <LCD_IO_WriteData8>
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fe84 	bl	8006810 <LCD_IO_WriteData8>
 8005b08:	88bb      	ldrh	r3, [r7, #4]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe7f 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8005b12:	202c      	movs	r0, #44	; 0x2c
 8005b14:	f000 fe5e 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005b18:	887b      	ldrh	r3, [r7, #2]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fe8e 	bl	800683c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	80fb      	strh	r3, [r7, #6]
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	80bb      	strh	r3, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	807b      	strh	r3, [r7, #2]
 8005b42:	4613      	mov	r3, r2
 8005b44:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8005b46:	4a2a      	ldr	r2, [pc, #168]	; (8005bf0 <ili9341_SetDisplayWindow+0xc8>)
 8005b48:	88bb      	ldrh	r3, [r7, #4]
 8005b4a:	8013      	strh	r3, [r2, #0]
 8005b4c:	88ba      	ldrh	r2, [r7, #4]
 8005b4e:	883b      	ldrh	r3, [r7, #0]
 8005b50:	4413      	add	r3, r2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	4b26      	ldr	r3, [pc, #152]	; (8005bf4 <ili9341_SetDisplayWindow+0xcc>)
 8005b5a:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8005b5c:	202a      	movs	r0, #42	; 0x2a
 8005b5e:	f000 fe39 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fe50 	bl	8006810 <LCD_IO_WriteData8>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fe4b 	bl	8006810 <LCD_IO_WriteData8>
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	887b      	ldrh	r3, [r7, #2]
 8005b7e:	4413      	add	r3, r2
 8005b80:	3b01      	subs	r3, #1
 8005b82:	121b      	asrs	r3, r3, #8
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fe42 	bl	8006810 <LCD_IO_WriteData8>
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	4413      	add	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fe37 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8005ba2:	202b      	movs	r0, #43	; 0x2b
 8005ba4:	f000 fe16 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005ba8:	88bb      	ldrh	r3, [r7, #4]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fe2d 	bl	8006810 <LCD_IO_WriteData8>
 8005bb6:	88bb      	ldrh	r3, [r7, #4]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fe28 	bl	8006810 <LCD_IO_WriteData8>
 8005bc0:	88ba      	ldrh	r2, [r7, #4]
 8005bc2:	883b      	ldrh	r3, [r7, #0]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	121b      	asrs	r3, r3, #8
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fe1f 	bl	8006810 <LCD_IO_WriteData8>
 8005bd2:	88bb      	ldrh	r3, [r7, #4]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	883b      	ldrh	r3, [r7, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fe14 	bl	8006810 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd90      	pop	{r4, r7, pc}
 8005bf0:	200008e6 	.word	0x200008e6
 8005bf4:	200008e8 	.word	0x200008e8

08005bf8 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4623      	mov	r3, r4
 8005c08:	80fb      	strh	r3, [r7, #6]
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	80bb      	strh	r3, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	807b      	strh	r3, [r7, #2]
 8005c12:	4613      	mov	r3, r2
 8005c14:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8005c16:	202a      	movs	r0, #42	; 0x2a
 8005c18:	f000 fddc 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005c1c:	88bb      	ldrh	r3, [r7, #4]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fdf3 	bl	8006810 <LCD_IO_WriteData8>
 8005c2a:	88bb      	ldrh	r3, [r7, #4]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fdee 	bl	8006810 <LCD_IO_WriteData8>
 8005c34:	88ba      	ldrh	r2, [r7, #4]
 8005c36:	883b      	ldrh	r3, [r7, #0]
 8005c38:	4413      	add	r3, r2
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	121b      	asrs	r3, r3, #8
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fde5 	bl	8006810 <LCD_IO_WriteData8>
 8005c46:	88bb      	ldrh	r3, [r7, #4]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	883b      	ldrh	r3, [r7, #0]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fdda 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8005c5c:	202b      	movs	r0, #43	; 0x2b
 8005c5e:	f000 fdb9 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005c62:	887b      	ldrh	r3, [r7, #2]
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fdd0 	bl	8006810 <LCD_IO_WriteData8>
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fdcb 	bl	8006810 <LCD_IO_WriteData8>
 8005c7a:	887b      	ldrh	r3, [r7, #2]
 8005c7c:	0a1b      	lsrs	r3, r3, #8
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fdc4 	bl	8006810 <LCD_IO_WriteData8>
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fdbf 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005c92:	883a      	ldrh	r2, [r7, #0]
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	4619      	mov	r1, r3
 8005c98:	202c      	movs	r0, #44	; 0x2c
 8005c9a:	f000 fde5 	bl	8006868 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd90      	pop	{r4, r7, pc}

08005ca6 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005ca6:	b590      	push	{r4, r7, lr}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	4604      	mov	r4, r0
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4623      	mov	r3, r4
 8005cb6:	80fb      	strh	r3, [r7, #6]
 8005cb8:	4603      	mov	r3, r0
 8005cba:	80bb      	strh	r3, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8005cc4:	202a      	movs	r0, #42	; 0x2a
 8005cc6:	f000 fd85 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005cca:	88bb      	ldrh	r3, [r7, #4]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fd9c 	bl	8006810 <LCD_IO_WriteData8>
 8005cd8:	88bb      	ldrh	r3, [r7, #4]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fd97 	bl	8006810 <LCD_IO_WriteData8>
 8005ce2:	88bb      	ldrh	r3, [r7, #4]
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fd90 	bl	8006810 <LCD_IO_WriteData8>
 8005cf0:	88bb      	ldrh	r3, [r7, #4]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fd8b 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8005cfa:	202b      	movs	r0, #43	; 0x2b
 8005cfc:	f000 fd6a 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fd81 	bl	8006810 <LCD_IO_WriteData8>
 8005d0e:	887b      	ldrh	r3, [r7, #2]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd7c 	bl	8006810 <LCD_IO_WriteData8>
 8005d18:	887a      	ldrh	r2, [r7, #2]
 8005d1a:	883b      	ldrh	r3, [r7, #0]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	121b      	asrs	r3, r3, #8
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fd73 	bl	8006810 <LCD_IO_WriteData8>
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	883b      	ldrh	r3, [r7, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fd68 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005d40:	883a      	ldrh	r2, [r7, #0]
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	4619      	mov	r1, r3
 8005d46:	202c      	movs	r0, #44	; 0x2c
 8005d48:	f000 fd8e 	bl	8006868 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd90      	pop	{r4, r7, pc}

08005d54 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	80fb      	strh	r3, [r7, #6]
 8005d66:	4603      	mov	r3, r0
 8005d68:	80bb      	strh	r3, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	807b      	strh	r3, [r7, #2]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8005d72:	202a      	movs	r0, #42	; 0x2a
 8005d74:	f000 fd2e 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	0a1b      	lsrs	r3, r3, #8
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fd45 	bl	8006810 <LCD_IO_WriteData8>
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fd40 	bl	8006810 <LCD_IO_WriteData8>
 8005d90:	88fa      	ldrh	r2, [r7, #6]
 8005d92:	887b      	ldrh	r3, [r7, #2]
 8005d94:	4413      	add	r3, r2
 8005d96:	3b01      	subs	r3, #1
 8005d98:	121b      	asrs	r3, r3, #8
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fd37 	bl	8006810 <LCD_IO_WriteData8>
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	887b      	ldrh	r3, [r7, #2]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	4413      	add	r3, r2
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fd2c 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8005db8:	202b      	movs	r0, #43	; 0x2b
 8005dba:	f000 fd0b 	bl	80067d4 <LCD_IO_WriteCmd8>
 8005dbe:	88bb      	ldrh	r3, [r7, #4]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fd22 	bl	8006810 <LCD_IO_WriteData8>
 8005dcc:	88bb      	ldrh	r3, [r7, #4]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fd1d 	bl	8006810 <LCD_IO_WriteData8>
 8005dd6:	88ba      	ldrh	r2, [r7, #4]
 8005dd8:	883b      	ldrh	r3, [r7, #0]
 8005dda:	4413      	add	r3, r2
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	121b      	asrs	r3, r3, #8
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fd14 	bl	8006810 <LCD_IO_WriteData8>
 8005de8:	88bb      	ldrh	r3, [r7, #4]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	883b      	ldrh	r3, [r7, #0]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4413      	add	r3, r2
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fd09 	bl	8006810 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8005dfe:	887b      	ldrh	r3, [r7, #2]
 8005e00:	883a      	ldrh	r2, [r7, #0]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	8b3b      	ldrh	r3, [r7, #24]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	202c      	movs	r0, #44	; 0x2c
 8005e0e:	f000 fd2b 	bl	8006868 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}

08005e1a <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8005e1a:	b590      	push	{r4, r7, lr}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	4604      	mov	r4, r0
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	461a      	mov	r2, r3
 8005e28:	4623      	mov	r3, r4
 8005e2a:	80fb      	strh	r3, [r7, #6]
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	80bb      	strh	r3, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	807b      	strh	r3, [r7, #2]
 8005e34:	4613      	mov	r3, r2
 8005e36:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8005e38:	883b      	ldrh	r3, [r7, #0]
 8005e3a:	887a      	ldrh	r2, [r7, #2]
 8005e3c:	88b9      	ldrh	r1, [r7, #4]
 8005e3e:	88f8      	ldrh	r0, [r7, #6]
 8005e40:	f7ff fe72 	bl	8005b28 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8005e44:	887b      	ldrh	r3, [r7, #2]
 8005e46:	883a      	ldrh	r2, [r7, #0]
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	202c      	movs	r0, #44	; 0x2c
 8005e52:	f000 fd4f 	bl	80068f4 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}

08005e5e <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8005e5e:	b082      	sub	sp, #8
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	603a      	str	r2, [r7, #0]
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	80fb      	strh	r3, [r7, #6]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005e7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005e88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8005e90:	f009 ffb0 	bl	800fdf4 <ceilf>
 8005e94:	eef0 7a40 	vmov.f32	s15, s0
 8005e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e9c:	ee17 3a90 	vmov	r3, s15
 8005ea0:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	2280      	movs	r2, #128	; 0x80
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	e060      	b.n	8005f78 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e024      	b.n	8005f0a <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	3a20      	subs	r2, #32
 8005ec8:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005eca:	fb01 f202 	mul.w	r2, r1, r2
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	fb02 f101 	mul.w	r1, r2, r1
 8005ed4:	6a3a      	ldr	r2, [r7, #32]
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	fb00 f202 	mul.w	r2, r0, r2
 8005edc:	4411      	add	r1, r2
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	7819      	ldrb	r1, [r3, #0]
 8005ee6:	f107 020c 	add.w	r2, r7, #12
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	460a      	mov	r2, r1
 8005ef0:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	f107 010c 	add.w	r1, r7, #12
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	7812      	ldrb	r2, [r2, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	dbd6      	blt.n	8005ec0 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e027      	b.n	8005f68 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b298      	uxth	r0, r3
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	88bb      	ldrh	r3, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7ff fda9 	bl	8005a94 <ili9341_WritePixel>
 8005f42:	e00e      	b.n	8005f62 <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	b298      	uxth	r0, r3
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	88bb      	ldrh	r3, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f7ff fd99 	bl	8005a94 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	dbd2      	blt.n	8005f18 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	3301      	adds	r3, #1
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	db99      	blt.n	8005eb6 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f8e:	b002      	add	sp, #8
 8005f90:	4770      	bx	lr

08005f92 <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 8005f92:	b082      	sub	sp, #8
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	603a      	str	r2, [r7, #0]
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	80fb      	strh	r3, [r7, #6]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005fae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fb0:	ee07 3a90 	vmov	s15, r3
 8005fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005fbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8005fc4:	f009 ff16 	bl	800fdf4 <ceilf>
 8005fc8:	eef0 7a40 	vmov.f32	s15, s0
 8005fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fd0:	ee17 3a90 	vmov	r3, s15
 8005fd4:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	623b      	str	r3, [r7, #32]
 8005fe8:	e050      	b.n	800608c <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e024      	b.n	800603e <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	3a20      	subs	r2, #32
 8005ffc:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005ffe:	fb01 f202 	mul.w	r2, r1, r2
 8006002:	6979      	ldr	r1, [r7, #20]
 8006004:	fb02 f101 	mul.w	r1, r2, r1
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	6978      	ldr	r0, [r7, #20]
 800600c:	fb00 f202 	mul.w	r2, r0, r2
 8006010:	4411      	add	r1, r2
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	4413      	add	r3, r2
 8006018:	7819      	ldrb	r1, [r3, #0]
 800601a:	f107 020c 	add.w	r2, r7, #12
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	460a      	mov	r2, r1
 8006024:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	f107 010c 	add.w	r1, r7, #12
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	4413      	add	r3, r2
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	429a      	cmp	r2, r3
 8006044:	dbd6      	blt.n	8005ff4 <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e017      	b.n	800607c <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	409a      	lsls	r2, r3
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	b29a      	uxth	r2, r3
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	4413      	add	r3, r2
 8006062:	b298      	uxth	r0, r3
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	b29a      	uxth	r2, r3
 8006068:	88bb      	ldrh	r3, [r7, #4]
 800606a:	4413      	add	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006070:	4619      	mov	r1, r3
 8006072:	f7ff fd0f 	bl	8005a94 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3301      	adds	r3, #1
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800607e:	461a      	mov	r2, r3
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	4293      	cmp	r3, r2
 8006084:	dbe2      	blt.n	800604c <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	3301      	adds	r3, #1
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800608e:	461a      	mov	r2, r3
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	4293      	cmp	r3, r2
 8006094:	dba9      	blt.n	8005fea <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	3728      	adds	r7, #40	; 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060a2:	b002      	add	sp, #8
 80060a4:	4770      	bx	lr

080060a6 <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 80060a6:	b082      	sub	sp, #8
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af04      	add	r7, sp, #16
 80060ae:	603a      	str	r2, [r7, #0]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	4603      	mov	r3, r0
 80060b4:	80fb      	strh	r3, [r7, #6]
 80060b6:	460b      	mov	r3, r1
 80060b8:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 80060ba:	f7ff fc14 	bl	80058e6 <ili9341_GetLcdPixelHeight>
 80060be:	4603      	mov	r3, r0
 80060c0:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 80060c2:	f7ff fc07 	bl	80058d4 <ili9341_GetLcdPixelWidth>
 80060c6:	4603      	mov	r3, r0
 80060c8:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 80060ca:	e02c      	b.n	8006126 <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	8c3a      	ldrh	r2, [r7, #32]
 80060d0:	441a      	add	r2, r3
 80060d2:	89bb      	ldrh	r3, [r7, #12]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	db13      	blt.n	8006100 <ili9341_WriteString+0x5a>
			Xpo = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 80060dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80060de:	88bb      	ldrh	r3, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 80060e4:	88bb      	ldrh	r3, [r7, #4]
 80060e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80060e8:	441a      	add	r2, r3
 80060ea:	89fb      	ldrh	r3, [r7, #14]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	da1f      	bge.n	8006130 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d103      	bne.n	8006100 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	603b      	str	r3, [r7, #0]
				continue;
 80060fe:	e012      	b.n	8006126 <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8006100:	88b9      	ldrh	r1, [r7, #4]
 8006102:	88f8      	ldrh	r0, [r7, #6]
 8006104:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006106:	9302      	str	r3, [sp, #8]
 8006108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	f7ff fea3 	bl	8005e5e <ili9341_WriteChar>
		Xpo += fonto.Width;
 8006118:	8c3a      	ldrh	r2, [r7, #32]
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	4413      	add	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
		strr++;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	603b      	str	r3, [r7, #0]
	while(*strr){
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ce      	bne.n	80060cc <ili9341_WriteString+0x26>
	}
}
 800612e:	e000      	b.n	8006132 <ili9341_WriteString+0x8c>
				break;
 8006130:	bf00      	nop
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613c:	b002      	add	sp, #8
 800613e:	4770      	bx	lr

08006140 <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8006140:	b082      	sub	sp, #8
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af02      	add	r7, sp, #8
 8006148:	603a      	str	r2, [r7, #0]
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	4603      	mov	r3, r0
 800614e:	80fb      	strh	r3, [r7, #6]
 8006150:	460b      	mov	r3, r1
 8006152:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8006154:	f7ff fbc7 	bl	80058e6 <ili9341_GetLcdPixelHeight>
 8006158:	4603      	mov	r3, r0
 800615a:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 800615c:	f7ff fbba 	bl	80058d4 <ili9341_GetLcdPixelWidth>
 8006160:	4603      	mov	r3, r0
 8006162:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8006164:	e02a      	b.n	80061bc <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	8c3a      	ldrh	r2, [r7, #32]
 800616a:	441a      	add	r2, r3
 800616c:	89bb      	ldrh	r3, [r7, #12]
 800616e:	429a      	cmp	r2, r3
 8006170:	db13      	blt.n	800619a <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8006176:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006178:	88bb      	ldrh	r3, [r7, #4]
 800617a:	4413      	add	r3, r2
 800617c:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 800617e:	88bb      	ldrh	r3, [r7, #4]
 8006180:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006182:	441a      	add	r2, r3
 8006184:	89fb      	ldrh	r3, [r7, #14]
 8006186:	429a      	cmp	r2, r3
 8006188:	da1d      	bge.n	80061c6 <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b20      	cmp	r3, #32
 8006190:	d103      	bne.n	800619a <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	603b      	str	r3, [r7, #0]
				continue;
 8006198:	e010      	b.n	80061bc <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 800619a:	88b9      	ldrh	r1, [r7, #4]
 800619c:	88f8      	ldrh	r0, [r7, #6]
 800619e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	f7ff fef2 	bl	8005f92 <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 80061ae:	8c3a      	ldrh	r2, [r7, #32]
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	4413      	add	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
		strr++;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	603b      	str	r3, [r7, #0]
	while(*strr){
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1d0      	bne.n	8006166 <ili9341_WriteStringNoBG+0x26>
	}
}
 80061c4:	e000      	b.n	80061c8 <ili9341_WriteStringNoBG+0x88>
				break;
 80061c6:	bf00      	nop
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d2:	b002      	add	sp, #8
 80061d4:	4770      	bx	lr
	...

080061d8 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 80061e2:	1dfb      	adds	r3, r7, #7
 80061e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	015b      	lsls	r3, r3, #5
 80061ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061f0:	f023 031f 	bic.w	r3, r3, #31
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80061fa:	331c      	adds	r3, #28
 80061fc:	4a53      	ldr	r2, [pc, #332]	; (800634c <LcdWrite8+0x174>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006202:	4b53      	ldr	r3, [pc, #332]	; (8006350 <LcdWrite8+0x178>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	4b51      	ldr	r3, [pc, #324]	; (8006350 <LcdWrite8+0x178>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 800620e:	1dfb      	adds	r3, r7, #7
 8006210:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006214:	1dfb      	adds	r3, r7, #7
 8006216:	015b      	lsls	r3, r3, #5
 8006218:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800621c:	f023 031f 	bic.w	r3, r3, #31
 8006220:	4313      	orrs	r3, r2
 8006222:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006226:	3318      	adds	r3, #24
 8006228:	4a48      	ldr	r2, [pc, #288]	; (800634c <LcdWrite8+0x174>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800622e:	4b48      	ldr	r3, [pc, #288]	; (8006350 <LcdWrite8+0x178>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	4b46      	ldr	r3, [pc, #280]	; (8006350 <LcdWrite8+0x178>)
 8006236:	2201      	movs	r2, #1
 8006238:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 800623a:	1dfb      	adds	r3, r7, #7
 800623c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006240:	1dfb      	adds	r3, r7, #7
 8006242:	015b      	lsls	r3, r3, #5
 8006244:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006248:	f023 031f 	bic.w	r3, r3, #31
 800624c:	4313      	orrs	r3, r2
 800624e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006252:	3314      	adds	r3, #20
 8006254:	4a3d      	ldr	r2, [pc, #244]	; (800634c <LcdWrite8+0x174>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800625a:	4b3d      	ldr	r3, [pc, #244]	; (8006350 <LcdWrite8+0x178>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	4b3b      	ldr	r3, [pc, #236]	; (8006350 <LcdWrite8+0x178>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800626c:	1dfb      	adds	r3, r7, #7
 800626e:	015b      	lsls	r3, r3, #5
 8006270:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006274:	f023 031f 	bic.w	r3, r3, #31
 8006278:	4313      	orrs	r3, r2
 800627a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800627e:	3310      	adds	r3, #16
 8006280:	4a32      	ldr	r2, [pc, #200]	; (800634c <LcdWrite8+0x174>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006286:	4b32      	ldr	r3, [pc, #200]	; (8006350 <LcdWrite8+0x178>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	4b30      	ldr	r3, [pc, #192]	; (8006350 <LcdWrite8+0x178>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8006292:	1dfb      	adds	r3, r7, #7
 8006294:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	015b      	lsls	r3, r3, #5
 800629c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062a0:	f023 031f 	bic.w	r3, r3, #31
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062aa:	330c      	adds	r3, #12
 80062ac:	4a27      	ldr	r2, [pc, #156]	; (800634c <LcdWrite8+0x174>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062b2:	4b27      	ldr	r3, [pc, #156]	; (8006350 <LcdWrite8+0x178>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	4b25      	ldr	r3, [pc, #148]	; (8006350 <LcdWrite8+0x178>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 80062be:	1dfb      	adds	r3, r7, #7
 80062c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	015b      	lsls	r3, r3, #5
 80062c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062cc:	f023 031f 	bic.w	r3, r3, #31
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062d6:	3308      	adds	r3, #8
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <LcdWrite8+0x174>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062de:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <LcdWrite8+0x178>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <LcdWrite8+0x178>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 80062ea:	1dfb      	adds	r3, r7, #7
 80062ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062f0:	1dfb      	adds	r3, r7, #7
 80062f2:	015b      	lsls	r3, r3, #5
 80062f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062f8:	f023 031f 	bic.w	r3, r3, #31
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006302:	3304      	adds	r3, #4
 8006304:	4a11      	ldr	r2, [pc, #68]	; (800634c <LcdWrite8+0x174>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <LcdWrite8+0x178>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <LcdWrite8+0x178>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8006316:	1dfb      	adds	r3, r7, #7
 8006318:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800631c:	1dfb      	adds	r3, r7, #7
 800631e:	015b      	lsls	r3, r3, #5
 8006320:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006324:	f023 031f 	bic.w	r3, r3, #31
 8006328:	4313      	orrs	r3, r2
 800632a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800632e:	4a07      	ldr	r2, [pc, #28]	; (800634c <LcdWrite8+0x174>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <LcdWrite8+0x178>)
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <LcdWrite8+0x178>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	4241028c 	.word	0x4241028c
 8006350:	42408280 	.word	0x42408280

08006354 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 800635e:	1dbb      	adds	r3, r7, #6
 8006360:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006364:	1dbb      	adds	r3, r7, #6
 8006366:	015b      	lsls	r3, r3, #5
 8006368:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800636c:	f023 031f 	bic.w	r3, r3, #31
 8006370:	4313      	orrs	r3, r2
 8006372:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006376:	333c      	adds	r3, #60	; 0x3c
 8006378:	4aab      	ldr	r2, [pc, #684]	; (8006628 <LcdWrite16+0x2d4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800637e:	4bab      	ldr	r3, [pc, #684]	; (800662c <LcdWrite16+0x2d8>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	4ba9      	ldr	r3, [pc, #676]	; (800662c <LcdWrite16+0x2d8>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 800638a:	1dbb      	adds	r3, r7, #6
 800638c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006390:	1dbb      	adds	r3, r7, #6
 8006392:	015b      	lsls	r3, r3, #5
 8006394:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006398:	f023 031f 	bic.w	r3, r3, #31
 800639c:	4313      	orrs	r3, r2
 800639e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063a2:	3338      	adds	r3, #56	; 0x38
 80063a4:	4aa0      	ldr	r2, [pc, #640]	; (8006628 <LcdWrite16+0x2d4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063aa:	4ba0      	ldr	r3, [pc, #640]	; (800662c <LcdWrite16+0x2d8>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	4b9e      	ldr	r3, [pc, #632]	; (800662c <LcdWrite16+0x2d8>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 80063b6:	1dbb      	adds	r3, r7, #6
 80063b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063bc:	1dbb      	adds	r3, r7, #6
 80063be:	015b      	lsls	r3, r3, #5
 80063c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063c4:	f023 031f 	bic.w	r3, r3, #31
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063ce:	3334      	adds	r3, #52	; 0x34
 80063d0:	4a95      	ldr	r2, [pc, #596]	; (8006628 <LcdWrite16+0x2d4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063d6:	4b95      	ldr	r3, [pc, #596]	; (800662c <LcdWrite16+0x2d8>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	4b93      	ldr	r3, [pc, #588]	; (800662c <LcdWrite16+0x2d8>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 80063e2:	1dbb      	adds	r3, r7, #6
 80063e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063e8:	1dbb      	adds	r3, r7, #6
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063f0:	f023 031f 	bic.w	r3, r3, #31
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063fa:	3330      	adds	r3, #48	; 0x30
 80063fc:	4a8a      	ldr	r2, [pc, #552]	; (8006628 <LcdWrite16+0x2d4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006402:	4b8a      	ldr	r3, [pc, #552]	; (800662c <LcdWrite16+0x2d8>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	4b88      	ldr	r3, [pc, #544]	; (800662c <LcdWrite16+0x2d8>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 800640e:	1dbb      	adds	r3, r7, #6
 8006410:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006414:	1dbb      	adds	r3, r7, #6
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800641c:	f023 031f 	bic.w	r3, r3, #31
 8006420:	4313      	orrs	r3, r2
 8006422:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006426:	332c      	adds	r3, #44	; 0x2c
 8006428:	4a7f      	ldr	r2, [pc, #508]	; (8006628 <LcdWrite16+0x2d4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800642e:	4b7f      	ldr	r3, [pc, #508]	; (800662c <LcdWrite16+0x2d8>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	4b7d      	ldr	r3, [pc, #500]	; (800662c <LcdWrite16+0x2d8>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 800643a:	1dbb      	adds	r3, r7, #6
 800643c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006440:	1dbb      	adds	r3, r7, #6
 8006442:	015b      	lsls	r3, r3, #5
 8006444:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006448:	f023 031f 	bic.w	r3, r3, #31
 800644c:	4313      	orrs	r3, r2
 800644e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006452:	3328      	adds	r3, #40	; 0x28
 8006454:	4a74      	ldr	r2, [pc, #464]	; (8006628 <LcdWrite16+0x2d4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800645a:	4b74      	ldr	r3, [pc, #464]	; (800662c <LcdWrite16+0x2d8>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	4b72      	ldr	r3, [pc, #456]	; (800662c <LcdWrite16+0x2d8>)
 8006462:	2201      	movs	r2, #1
 8006464:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8006466:	1dbb      	adds	r3, r7, #6
 8006468:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800646c:	1dbb      	adds	r3, r7, #6
 800646e:	015b      	lsls	r3, r3, #5
 8006470:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006474:	f023 031f 	bic.w	r3, r3, #31
 8006478:	4313      	orrs	r3, r2
 800647a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800647e:	3324      	adds	r3, #36	; 0x24
 8006480:	4a69      	ldr	r2, [pc, #420]	; (8006628 <LcdWrite16+0x2d4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006486:	4b69      	ldr	r3, [pc, #420]	; (800662c <LcdWrite16+0x2d8>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	4b67      	ldr	r3, [pc, #412]	; (800662c <LcdWrite16+0x2d8>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8006492:	1dbb      	adds	r3, r7, #6
 8006494:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006498:	1dbb      	adds	r3, r7, #6
 800649a:	015b      	lsls	r3, r3, #5
 800649c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064a0:	f023 031f 	bic.w	r3, r3, #31
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064aa:	3320      	adds	r3, #32
 80064ac:	4a5e      	ldr	r2, [pc, #376]	; (8006628 <LcdWrite16+0x2d4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064b2:	4b5e      	ldr	r3, [pc, #376]	; (800662c <LcdWrite16+0x2d8>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	4b5c      	ldr	r3, [pc, #368]	; (800662c <LcdWrite16+0x2d8>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 80064be:	1dbb      	adds	r3, r7, #6
 80064c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064c4:	1dbb      	adds	r3, r7, #6
 80064c6:	015b      	lsls	r3, r3, #5
 80064c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064cc:	f023 031f 	bic.w	r3, r3, #31
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064d6:	331c      	adds	r3, #28
 80064d8:	4a53      	ldr	r2, [pc, #332]	; (8006628 <LcdWrite16+0x2d4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064de:	4b53      	ldr	r3, [pc, #332]	; (800662c <LcdWrite16+0x2d8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	4b51      	ldr	r3, [pc, #324]	; (800662c <LcdWrite16+0x2d8>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 80064ea:	1dbb      	adds	r3, r7, #6
 80064ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064f0:	1dbb      	adds	r3, r7, #6
 80064f2:	015b      	lsls	r3, r3, #5
 80064f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064f8:	f023 031f 	bic.w	r3, r3, #31
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006502:	3318      	adds	r3, #24
 8006504:	4a48      	ldr	r2, [pc, #288]	; (8006628 <LcdWrite16+0x2d4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800650a:	4b48      	ldr	r3, [pc, #288]	; (800662c <LcdWrite16+0x2d8>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <LcdWrite16+0x2d8>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8006516:	1dbb      	adds	r3, r7, #6
 8006518:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800651c:	1dbb      	adds	r3, r7, #6
 800651e:	015b      	lsls	r3, r3, #5
 8006520:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006524:	f023 031f 	bic.w	r3, r3, #31
 8006528:	4313      	orrs	r3, r2
 800652a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800652e:	3314      	adds	r3, #20
 8006530:	4a3d      	ldr	r2, [pc, #244]	; (8006628 <LcdWrite16+0x2d4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006536:	4b3d      	ldr	r3, [pc, #244]	; (800662c <LcdWrite16+0x2d8>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <LcdWrite16+0x2d8>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8006542:	1dbb      	adds	r3, r7, #6
 8006544:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006548:	1dbb      	adds	r3, r7, #6
 800654a:	015b      	lsls	r3, r3, #5
 800654c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006550:	f023 031f 	bic.w	r3, r3, #31
 8006554:	4313      	orrs	r3, r2
 8006556:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800655a:	3310      	adds	r3, #16
 800655c:	4a32      	ldr	r2, [pc, #200]	; (8006628 <LcdWrite16+0x2d4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006562:	4b32      	ldr	r3, [pc, #200]	; (800662c <LcdWrite16+0x2d8>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	4b30      	ldr	r3, [pc, #192]	; (800662c <LcdWrite16+0x2d8>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 800656e:	1dbb      	adds	r3, r7, #6
 8006570:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006574:	1dbb      	adds	r3, r7, #6
 8006576:	015b      	lsls	r3, r3, #5
 8006578:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800657c:	f023 031f 	bic.w	r3, r3, #31
 8006580:	4313      	orrs	r3, r2
 8006582:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006586:	330c      	adds	r3, #12
 8006588:	4a27      	ldr	r2, [pc, #156]	; (8006628 <LcdWrite16+0x2d4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800658e:	4b27      	ldr	r3, [pc, #156]	; (800662c <LcdWrite16+0x2d8>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <LcdWrite16+0x2d8>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 800659a:	1dbb      	adds	r3, r7, #6
 800659c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065a0:	1dbb      	adds	r3, r7, #6
 80065a2:	015b      	lsls	r3, r3, #5
 80065a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80065a8:	f023 031f 	bic.w	r3, r3, #31
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80065b2:	3308      	adds	r3, #8
 80065b4:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <LcdWrite16+0x2d4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80065ba:	4b1c      	ldr	r3, [pc, #112]	; (800662c <LcdWrite16+0x2d8>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <LcdWrite16+0x2d8>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 80065c6:	1dbb      	adds	r3, r7, #6
 80065c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065cc:	1dbb      	adds	r3, r7, #6
 80065ce:	015b      	lsls	r3, r3, #5
 80065d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80065d4:	f023 031f 	bic.w	r3, r3, #31
 80065d8:	4313      	orrs	r3, r2
 80065da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80065de:	3304      	adds	r3, #4
 80065e0:	4a11      	ldr	r2, [pc, #68]	; (8006628 <LcdWrite16+0x2d4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <LcdWrite16+0x2d8>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <LcdWrite16+0x2d8>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 80065f2:	1dbb      	adds	r3, r7, #6
 80065f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065f8:	1dbb      	adds	r3, r7, #6
 80065fa:	015b      	lsls	r3, r3, #5
 80065fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006600:	f023 031f 	bic.w	r3, r3, #31
 8006604:	4313      	orrs	r3, r2
 8006606:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800660a:	4a07      	ldr	r2, [pc, #28]	; (8006628 <LcdWrite16+0x2d4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <LcdWrite16+0x2d8>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <LcdWrite16+0x2d8>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	4241028c 	.word	0x4241028c
 800662c:	42408280 	.word	0x42408280

08006630 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  while(Size--)
 800663c:	e00a      	b.n	8006654 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fdc8 	bl	80061d8 <LcdWrite8>
    if(dinc)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	1e5a      	subs	r2, r3, #1
 8006658:	60ba      	str	r2, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1ef      	bne.n	800663e <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 800665e:	4b03      	ldr	r3, [pc, #12]	; (800666c <LCD_IO_WriteMultiData8+0x3c>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	42410284 	.word	0x42410284

08006670 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  while(Size--)
 800667c:	e00a      	b.n	8006694 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fe66 	bl	8006354 <LcdWrite16>
    if(dinc)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3302      	adds	r3, #2
 8006692:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	1e5a      	subs	r2, r3, #1
 8006698:	60ba      	str	r2, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ef      	bne.n	800667e <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <LCD_IO_WriteMultiData16+0x3c>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	42410284 	.word	0x42410284

080066b0 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f9d9 	bl	8006a70 <HAL_Delay>
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	4603      	mov	r3, r0
 80066ce:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80066e0:	4b34      	ldr	r3, [pc, #208]	; (80067b4 <LCD_IO_Init+0xd8>)
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	4a33      	ldr	r2, [pc, #204]	; (80067b4 <LCD_IO_Init+0xd8>)
 80066e6:	f043 0307 	orr.w	r3, r3, #7
 80066ea:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80066ec:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <LCD_IO_Init+0xdc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f4:	4a30      	ldr	r2, [pc, #192]	; (80067b8 <LCD_IO_Init+0xdc>)
 80066f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fa:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80066fc:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <LCD_IO_Init+0xdc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <LCD_IO_Init+0xdc>)
 8006702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006706:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8006708:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <LCD_IO_Init+0xe0>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <LCD_IO_Init+0xe4>)
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8006714:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <LCD_IO_Init+0xe8>)
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800671a:	4b2b      	ldr	r3, [pc, #172]	; (80067c8 <LCD_IO_Init+0xec>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <LCD_IO_Init+0xec>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <LCD_IO_Init+0xec>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 030c 	bic.w	r3, r3, #12
 8006732:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <LCD_IO_Init+0xec>)
 8006734:	f043 0304 	orr.w	r3, r3, #4
 8006738:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <LCD_IO_Init+0xec>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <LCD_IO_Init+0xec>)
 8006740:	f043 0303 	orr.w	r3, r3, #3
 8006744:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <LCD_IO_Init+0xec>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <LCD_IO_Init+0xec>)
 800674c:	f043 030c 	orr.w	r3, r3, #12
 8006750:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8006752:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <LCD_IO_Init+0xf0>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	4a1d      	ldr	r2, [pc, #116]	; (80067cc <LCD_IO_Init+0xf0>)
 8006758:	f043 0303 	orr.w	r3, r3, #3
 800675c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <LCD_IO_Init+0xec>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <LCD_IO_Init+0xec>)
 8006764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006768:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <LCD_IO_Init+0xf4>)
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8006770:	4b16      	ldr	r3, [pc, #88]	; (80067cc <LCD_IO_Init+0xf0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	4a14      	ldr	r2, [pc, #80]	; (80067cc <LCD_IO_Init+0xf0>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <LCD_IO_Init+0xec>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006788:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <LCD_IO_Init+0xec>)
 800678a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678e:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8006790:	200a      	movs	r0, #10
 8006792:	f7ff ff8d 	bl	80066b0 <LCD_Delay>
  LCD_RST_ON;
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <LCD_IO_Init+0xe0>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 800679c:	200a      	movs	r0, #10
 800679e:	f7ff ff87 	bl	80066b0 <LCD_Delay>
  LCD_RST_OFF;
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <LCD_IO_Init+0xe0>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80067a8:	200a      	movs	r0, #10
 80067aa:	f7ff ff81 	bl	80066b0 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80067ae:	bf00      	nop
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40020000 	.word	0x40020000
 80067bc:	42400290 	.word	0x42400290
 80067c0:	42410280 	.word	0x42410280
 80067c4:	42410284 	.word	0x42410284
 80067c8:	40020800 	.word	0x40020800
 80067cc:	40020400 	.word	0x40020400
 80067d0:	42408280 	.word	0x42408280

080067d4 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <LCD_IO_WriteCmd8+0x34>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80067e4:	4b09      	ldr	r3, [pc, #36]	; (800680c <LCD_IO_WriteCmd8+0x38>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fcf3 	bl	80061d8 <LcdWrite8>
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <LCD_IO_WriteCmd8+0x38>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <LCD_IO_WriteCmd8+0x34>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	42410284 	.word	0x42410284
 800680c:	42410280 	.word	0x42410280

08006810 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <LCD_IO_WriteData8+0x28>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff fcd8 	bl	80061d8 <LcdWrite8>
  LCD_CS_OFF;
 8006828:	4b03      	ldr	r3, [pc, #12]	; (8006838 <LCD_IO_WriteData8+0x28>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	42410284 	.word	0x42410284

0800683c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8006846:	4b07      	ldr	r3, [pc, #28]	; (8006864 <LCD_IO_WriteData16+0x28>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fd80 	bl	8006354 <LcdWrite16>
  LCD_CS_OFF;
 8006854:	4b03      	ldr	r3, [pc, #12]	; (8006864 <LCD_IO_WriteData16+0x28>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	42410284 	.word	0x42410284

08006868 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	603a      	str	r2, [r7, #0]
 8006872:	71fb      	strb	r3, [r7, #7]
 8006874:	460b      	mov	r3, r1
 8006876:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <LCD_IO_WriteCmd8DataFill16+0x40>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <LCD_IO_WriteCmd8DataFill16+0x44>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fca6 	bl	80061d8 <LcdWrite8>
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <LCD_IO_WriteCmd8DataFill16+0x44>)
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	2200      	movs	r2, #0
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fee9 	bl	8006670 <LCD_IO_WriteMultiData16>
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	42410284 	.word	0x42410284
 80068ac:	42410280 	.word	0x42410280

080068b0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fc83 	bl	80061d8 <LcdWrite8>
 80068d2:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80068d8:	2201      	movs	r2, #1
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	68b8      	ldr	r0, [r7, #8]
 80068de:	f7ff fea7 	bl	8006630 <LCD_IO_WriteMultiData8>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	42410284 	.word	0x42410284
 80068f0:	42410280 	.word	0x42410280

080068f4 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fc61 	bl	80061d8 <LcdWrite8>
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(pData, Size, 1);
 800691c:	2201      	movs	r2, #1
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f7ff fea5 	bl	8006670 <LCD_IO_WriteMultiData16>
}
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	42410284 	.word	0x42410284
 8006934:	42410280 	.word	0x42410280

08006938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800693c:	480d      	ldr	r0, [pc, #52]	; (8006974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800693e:	490e      	ldr	r1, [pc, #56]	; (8006978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006944:	e002      	b.n	800694c <LoopCopyDataInit>

08006946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800694a:	3304      	adds	r3, #4

0800694c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800694c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800694e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006950:	d3f9      	bcc.n	8006946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006952:	4a0b      	ldr	r2, [pc, #44]	; (8006980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006954:	4c0b      	ldr	r4, [pc, #44]	; (8006984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006958:	e001      	b.n	800695e <LoopFillZerobss>

0800695a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800695a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800695c:	3204      	adds	r2, #4

0800695e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800695e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006960:	d3fb      	bcc.n	800695a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006962:	f7fe ff9b 	bl	800589c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006966:	f006 faf1 	bl	800cf4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800696a:	f7fb f88f 	bl	8001a8c <main>
  bx  lr    
 800696e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006978:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800697c:	0803d75c 	.word	0x0803d75c
  ldr r2, =_sbss
 8006980:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8006984:	20000900 	.word	0x20000900

08006988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006988:	e7fe      	b.n	8006988 <ADC_IRQHandler>
	...

0800698c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <HAL_Init+0x40>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a0d      	ldr	r2, [pc, #52]	; (80069cc <HAL_Init+0x40>)
 8006996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800699a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_Init+0x40>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <HAL_Init+0x40>)
 80069a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <HAL_Init+0x40>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a07      	ldr	r2, [pc, #28]	; (80069cc <HAL_Init+0x40>)
 80069ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069b4:	2003      	movs	r0, #3
 80069b6:	f000 f94f 	bl	8006c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069ba:	2000      	movs	r0, #0
 80069bc:	f000 f808 	bl	80069d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069c0:	f7fe fbf2 	bl	80051a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40023c00 	.word	0x40023c00

080069d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <HAL_InitTick+0x54>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <HAL_InitTick+0x58>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f967 	bl	8006cc2 <HAL_SYSTICK_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e00e      	b.n	8006a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	d80a      	bhi.n	8006a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a04:	2200      	movs	r2, #0
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	f000 f92f 	bl	8006c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a10:	4a06      	ldr	r2, [pc, #24]	; (8006a2c <HAL_InitTick+0x5c>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000224 	.word	0x20000224
 8006a28:	2000024c 	.word	0x2000024c
 8006a2c:	20000248 	.word	0x20000248

08006a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <HAL_IncTick+0x20>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <HAL_IncTick+0x24>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <HAL_IncTick+0x24>)
 8006a42:	6013      	str	r3, [r2, #0]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	2000024c 	.word	0x2000024c
 8006a54:	200008ec 	.word	0x200008ec

08006a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8006a5c:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <HAL_GetTick+0x14>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	200008ec 	.word	0x200008ec

08006a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a78:	f7ff ffee 	bl	8006a58 <HAL_GetTick>
 8006a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d005      	beq.n	8006a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <HAL_Delay+0x44>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a96:	bf00      	nop
 8006a98:	f7ff ffde 	bl	8006a58 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d8f7      	bhi.n	8006a98 <HAL_Delay+0x28>
  {
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2000024c 	.word	0x2000024c

08006ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <__NVIC_SetPriorityGrouping+0x44>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <__NVIC_SetPriorityGrouping+0x44>)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	60d3      	str	r3, [r2, #12]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	e000ed00 	.word	0xe000ed00

08006b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <__NVIC_GetPriorityGrouping+0x18>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	f003 0307 	and.w	r3, r3, #7
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	e000ed00 	.word	0xe000ed00

08006b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	db0b      	blt.n	8006b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	f003 021f 	and.w	r2, r3, #31
 8006b34:	4907      	ldr	r1, [pc, #28]	; (8006b54 <__NVIC_EnableIRQ+0x38>)
 8006b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000e100 	.word	0xe000e100

08006b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	6039      	str	r1, [r7, #0]
 8006b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	db0a      	blt.n	8006b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	490c      	ldr	r1, [pc, #48]	; (8006ba4 <__NVIC_SetPriority+0x4c>)
 8006b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b76:	0112      	lsls	r2, r2, #4
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b80:	e00a      	b.n	8006b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	4908      	ldr	r1, [pc, #32]	; (8006ba8 <__NVIC_SetPriority+0x50>)
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	3b04      	subs	r3, #4
 8006b90:	0112      	lsls	r2, r2, #4
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	440b      	add	r3, r1
 8006b96:	761a      	strb	r2, [r3, #24]
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	e000e100 	.word	0xe000e100
 8006ba8:	e000ed00 	.word	0xe000ed00

08006bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b089      	sub	sp, #36	; 0x24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f1c3 0307 	rsb	r3, r3, #7
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	bf28      	it	cs
 8006bca:	2304      	movcs	r3, #4
 8006bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2b06      	cmp	r3, #6
 8006bd4:	d902      	bls.n	8006bdc <NVIC_EncodePriority+0x30>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3b03      	subs	r3, #3
 8006bda:	e000      	b.n	8006bde <NVIC_EncodePriority+0x32>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006be0:	f04f 32ff 	mov.w	r2, #4294967295
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	43da      	mvns	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	401a      	ands	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfe:	43d9      	mvns	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c04:	4313      	orrs	r3, r2
         );
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3724      	adds	r7, #36	; 0x24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c24:	d301      	bcc.n	8006c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c26:	2301      	movs	r3, #1
 8006c28:	e00f      	b.n	8006c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <SysTick_Config+0x40>)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c32:	210f      	movs	r1, #15
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	f7ff ff8e 	bl	8006b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <SysTick_Config+0x40>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c42:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <SysTick_Config+0x40>)
 8006c44:	2207      	movs	r2, #7
 8006c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	e000e010 	.word	0xe000e010

08006c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ff29 	bl	8006ab8 <__NVIC_SetPriorityGrouping>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	4603      	mov	r3, r0
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c80:	f7ff ff3e 	bl	8006b00 <__NVIC_GetPriorityGrouping>
 8006c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	6978      	ldr	r0, [r7, #20]
 8006c8c:	f7ff ff8e 	bl	8006bac <NVIC_EncodePriority>
 8006c90:	4602      	mov	r2, r0
 8006c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff ff5d 	bl	8006b58 <__NVIC_SetPriority>
}
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	4603      	mov	r3, r0
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff ff31 	bl	8006b1c <__NVIC_EnableIRQ>
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffa2 	bl	8006c14 <SysTick_Config>
 8006cd0:	4603      	mov	r3, r0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ce8:	f7ff feb6 	bl	8006a58 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e099      	b.n	8006e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0201 	bic.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d18:	e00f      	b.n	8006d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d1a:	f7ff fe9d 	bl	8006a58 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b05      	cmp	r3, #5
 8006d26:	d908      	bls.n	8006d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2203      	movs	r2, #3
 8006d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e078      	b.n	8006e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e8      	bne.n	8006d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4b38      	ldr	r3, [pc, #224]	; (8006e34 <HAL_DMA_Init+0x158>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d107      	bne.n	8006da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d117      	bne.n	8006dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00e      	beq.n	8006dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fb0f 	bl	8007404 <DMA_CheckFifoParam>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2240      	movs	r2, #64	; 0x40
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e016      	b.n	8006e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fac6 	bl	8007398 <DMA_CalcBaseAndBitshift>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	223f      	movs	r2, #63	; 0x3f
 8006e16:	409a      	lsls	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	f010803f 	.word	0xf010803f

08006e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <HAL_DMA_Start_IT+0x26>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e040      	b.n	8006ee0 <HAL_DMA_Start_IT+0xa8>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d12f      	bne.n	8006ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fa58 	bl	800733c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	223f      	movs	r2, #63	; 0x3f
 8006e92:	409a      	lsls	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0216 	orr.w	r2, r2, #22
 8006ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0208 	orr.w	r2, r2, #8
 8006ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e005      	b.n	8006ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
 8006edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ef6:	f7ff fdaf 	bl	8006a58 <HAL_GetTick>
 8006efa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d008      	beq.n	8006f1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2280      	movs	r2, #128	; 0x80
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e052      	b.n	8006fc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0216 	bic.w	r2, r2, #22
 8006f28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695a      	ldr	r2, [r3, #20]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <HAL_DMA_Abort+0x62>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0208 	bic.w	r2, r2, #8
 8006f58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f6a:	e013      	b.n	8006f94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f6c:	f7ff fd74 	bl	8006a58 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d90c      	bls.n	8006f94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2203      	movs	r2, #3
 8006f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e015      	b.n	8006fc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e4      	bne.n	8006f6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa6:	223f      	movs	r2, #63	; 0x3f
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d004      	beq.n	8006fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e00c      	b.n	8007000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2205      	movs	r2, #5
 8006fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007018:	4b8e      	ldr	r3, [pc, #568]	; (8007254 <HAL_DMA_IRQHandler+0x248>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a8e      	ldr	r2, [pc, #568]	; (8007258 <HAL_DMA_IRQHandler+0x24c>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	0a9b      	lsrs	r3, r3, #10
 8007024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007036:	2208      	movs	r2, #8
 8007038:	409a      	lsls	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01a      	beq.n	8007078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d013      	beq.n	8007078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0204 	bic.w	r2, r2, #4
 800705e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007064:	2208      	movs	r2, #8
 8007066:	409a      	lsls	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	f043 0201 	orr.w	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707c:	2201      	movs	r2, #1
 800707e:	409a      	lsls	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d012      	beq.n	80070ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709a:	2201      	movs	r2, #1
 800709c:	409a      	lsls	r2, r3
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	f043 0202 	orr.w	r2, r3, #2
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b2:	2204      	movs	r2, #4
 80070b4:	409a      	lsls	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d012      	beq.n	80070e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d0:	2204      	movs	r2, #4
 80070d2:	409a      	lsls	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	f043 0204 	orr.w	r2, r3, #4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	2210      	movs	r2, #16
 80070ea:	409a      	lsls	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4013      	ands	r3, r2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d043      	beq.n	800717c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d03c      	beq.n	800717c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007106:	2210      	movs	r2, #16
 8007108:	409a      	lsls	r2, r3
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d018      	beq.n	800714e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d108      	bne.n	800713c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d024      	beq.n	800717c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	e01f      	b.n	800717c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01b      	beq.n	800717c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	e016      	b.n	800717c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0208 	bic.w	r2, r2, #8
 800716a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	2220      	movs	r2, #32
 8007182:	409a      	lsls	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 808f 	beq.w	80072ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8087 	beq.w	80072ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	2220      	movs	r2, #32
 80071a4:	409a      	lsls	r2, r3
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d136      	bne.n	8007224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0216 	bic.w	r2, r2, #22
 80071c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <HAL_DMA_IRQHandler+0x1da>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0208 	bic.w	r2, r2, #8
 80071f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fa:	223f      	movs	r2, #63	; 0x3f
 80071fc:	409a      	lsls	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007216:	2b00      	cmp	r3, #0
 8007218:	d07e      	beq.n	8007318 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
        }
        return;
 8007222:	e079      	b.n	8007318 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01d      	beq.n	800726e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10d      	bne.n	800725c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	2b00      	cmp	r3, #0
 8007246:	d031      	beq.n	80072ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
 8007250:	e02c      	b.n	80072ac <HAL_DMA_IRQHandler+0x2a0>
 8007252:	bf00      	nop
 8007254:	20000224 	.word	0x20000224
 8007258:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d023      	beq.n	80072ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
 800726c:	e01e      	b.n	80072ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10f      	bne.n	800729c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0210 	bic.w	r2, r2, #16
 800728a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d032      	beq.n	800731a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d022      	beq.n	8007306 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2205      	movs	r2, #5
 80072c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3301      	adds	r3, #1
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d307      	bcc.n	80072f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f2      	bne.n	80072d8 <HAL_DMA_IRQHandler+0x2cc>
 80072f2:	e000      	b.n	80072f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80072f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
 8007316:	e000      	b.n	800731a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007318:	bf00      	nop
    }
  }
}
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800732e:	b2db      	uxtb	r3, r3
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007358:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d108      	bne.n	800737c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800737a:	e007      	b.n	800738c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	60da      	str	r2, [r3, #12]
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	3b10      	subs	r3, #16
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <DMA_CalcBaseAndBitshift+0x64>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073b2:	4a13      	ldr	r2, [pc, #76]	; (8007400 <DMA_CalcBaseAndBitshift+0x68>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d909      	bls.n	80073da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	659a      	str	r2, [r3, #88]	; 0x58
 80073d8:	e007      	b.n	80073ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	aaaaaaab 	.word	0xaaaaaaab
 8007400:	0803d368 	.word	0x0803d368

08007404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d11f      	bne.n	800745e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d856      	bhi.n	80074d2 <DMA_CheckFifoParam+0xce>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <DMA_CheckFifoParam+0x28>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	0800743d 	.word	0x0800743d
 8007430:	0800744f 	.word	0x0800744f
 8007434:	0800743d 	.word	0x0800743d
 8007438:	080074d3 	.word	0x080074d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d046      	beq.n	80074d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800744c:	e043      	b.n	80074d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007456:	d140      	bne.n	80074da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800745c:	e03d      	b.n	80074da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007466:	d121      	bne.n	80074ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d837      	bhi.n	80074de <DMA_CheckFifoParam+0xda>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <DMA_CheckFifoParam+0x70>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	08007485 	.word	0x08007485
 8007478:	0800748b 	.word	0x0800748b
 800747c:	08007485 	.word	0x08007485
 8007480:	0800749d 	.word	0x0800749d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
      break;
 8007488:	e030      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d025      	beq.n	80074e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800749a:	e022      	b.n	80074e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074a4:	d11f      	bne.n	80074e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80074aa:	e01c      	b.n	80074e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d903      	bls.n	80074ba <DMA_CheckFifoParam+0xb6>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d003      	beq.n	80074c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80074b8:	e018      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]
      break;
 80074be:	e015      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
      break;
 80074d0:	e00b      	b.n	80074ea <DMA_CheckFifoParam+0xe6>
      break;
 80074d2:	bf00      	nop
 80074d4:	e00a      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      break;
 80074d6:	bf00      	nop
 80074d8:	e008      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      break;
 80074da:	bf00      	nop
 80074dc:	e006      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      break;
 80074de:	bf00      	nop
 80074e0:	e004      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      break;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      break;   
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
      break;
 80074ea:	bf00      	nop
    }
  } 
  
  return status; 
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop

080074fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b089      	sub	sp, #36	; 0x24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800750e:	2300      	movs	r3, #0
 8007510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e159      	b.n	80077cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007518:	2201      	movs	r2, #1
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4013      	ands	r3, r2
 800752a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	429a      	cmp	r2, r3
 8007532:	f040 8148 	bne.w	80077c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b01      	cmp	r3, #1
 8007540:	d005      	beq.n	800754e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800754a:	2b02      	cmp	r3, #2
 800754c:	d130      	bne.n	80075b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	2203      	movs	r2, #3
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43db      	mvns	r3, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4013      	ands	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007584:	2201      	movs	r2, #1
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	43db      	mvns	r3, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4013      	ands	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	f003 0201 	and.w	r2, r3, #1
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f003 0303 	and.w	r3, r3, #3
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d017      	beq.n	80075ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	2203      	movs	r2, #3
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	43db      	mvns	r3, r3
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	4013      	ands	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d123      	bne.n	8007640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	08da      	lsrs	r2, r3, #3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3208      	adds	r2, #8
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	220f      	movs	r2, #15
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	43db      	mvns	r3, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4013      	ands	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	4313      	orrs	r3, r2
 8007630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	08da      	lsrs	r2, r3, #3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3208      	adds	r2, #8
 800763a:	69b9      	ldr	r1, [r7, #24]
 800763c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	2203      	movs	r2, #3
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	43db      	mvns	r3, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4013      	ands	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f003 0203 	and.w	r2, r3, #3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80a2 	beq.w	80077c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	4b57      	ldr	r3, [pc, #348]	; (80077e4 <HAL_GPIO_Init+0x2e8>)
 8007688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768a:	4a56      	ldr	r2, [pc, #344]	; (80077e4 <HAL_GPIO_Init+0x2e8>)
 800768c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007690:	6453      	str	r3, [r2, #68]	; 0x44
 8007692:	4b54      	ldr	r3, [pc, #336]	; (80077e4 <HAL_GPIO_Init+0x2e8>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800769e:	4a52      	ldr	r2, [pc, #328]	; (80077e8 <HAL_GPIO_Init+0x2ec>)
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	089b      	lsrs	r3, r3, #2
 80076a4:	3302      	adds	r3, #2
 80076a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	220f      	movs	r2, #15
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	43db      	mvns	r3, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4013      	ands	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a49      	ldr	r2, [pc, #292]	; (80077ec <HAL_GPIO_Init+0x2f0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d019      	beq.n	80076fe <HAL_GPIO_Init+0x202>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a48      	ldr	r2, [pc, #288]	; (80077f0 <HAL_GPIO_Init+0x2f4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_GPIO_Init+0x1fe>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a47      	ldr	r2, [pc, #284]	; (80077f4 <HAL_GPIO_Init+0x2f8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00d      	beq.n	80076f6 <HAL_GPIO_Init+0x1fa>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a46      	ldr	r2, [pc, #280]	; (80077f8 <HAL_GPIO_Init+0x2fc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d007      	beq.n	80076f2 <HAL_GPIO_Init+0x1f6>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a45      	ldr	r2, [pc, #276]	; (80077fc <HAL_GPIO_Init+0x300>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d101      	bne.n	80076ee <HAL_GPIO_Init+0x1f2>
 80076ea:	2304      	movs	r3, #4
 80076ec:	e008      	b.n	8007700 <HAL_GPIO_Init+0x204>
 80076ee:	2307      	movs	r3, #7
 80076f0:	e006      	b.n	8007700 <HAL_GPIO_Init+0x204>
 80076f2:	2303      	movs	r3, #3
 80076f4:	e004      	b.n	8007700 <HAL_GPIO_Init+0x204>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e002      	b.n	8007700 <HAL_GPIO_Init+0x204>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <HAL_GPIO_Init+0x204>
 80076fe:	2300      	movs	r3, #0
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	f002 0203 	and.w	r2, r2, #3
 8007706:	0092      	lsls	r2, r2, #2
 8007708:	4093      	lsls	r3, r2
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4313      	orrs	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007710:	4935      	ldr	r1, [pc, #212]	; (80077e8 <HAL_GPIO_Init+0x2ec>)
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	089b      	lsrs	r3, r3, #2
 8007716:	3302      	adds	r3, #2
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800771e:	4b38      	ldr	r3, [pc, #224]	; (8007800 <HAL_GPIO_Init+0x304>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	43db      	mvns	r3, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4013      	ands	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007742:	4a2f      	ldr	r2, [pc, #188]	; (8007800 <HAL_GPIO_Init+0x304>)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007748:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <HAL_GPIO_Init+0x304>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	43db      	mvns	r3, r3
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4013      	ands	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800776c:	4a24      	ldr	r2, [pc, #144]	; (8007800 <HAL_GPIO_Init+0x304>)
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007772:	4b23      	ldr	r3, [pc, #140]	; (8007800 <HAL_GPIO_Init+0x304>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	43db      	mvns	r3, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4013      	ands	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007796:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <HAL_GPIO_Init+0x304>)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800779c:	4b18      	ldr	r3, [pc, #96]	; (8007800 <HAL_GPIO_Init+0x304>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	43db      	mvns	r3, r3
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	4013      	ands	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077c0:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <HAL_GPIO_Init+0x304>)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	3301      	adds	r3, #1
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	2b0f      	cmp	r3, #15
 80077d0:	f67f aea2 	bls.w	8007518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3724      	adds	r7, #36	; 0x24
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40023800 	.word	0x40023800
 80077e8:	40013800 	.word	0x40013800
 80077ec:	40020000 	.word	0x40020000
 80077f0:	40020400 	.word	0x40020400
 80077f4:	40020800 	.word	0x40020800
 80077f8:	40020c00 	.word	0x40020c00
 80077fc:	40021000 	.word	0x40021000
 8007800:	40013c00 	.word	0x40013c00

08007804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e001      	b.n	8007826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]
 8007840:	4613      	mov	r3, r2
 8007842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007844:	787b      	ldrb	r3, [r7, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800784a:	887a      	ldrh	r2, [r7, #2]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007850:	e003      	b.n	800785a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	041a      	lsls	r2, r3, #16
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	619a      	str	r2, [r3, #24]
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007878:	887a      	ldrh	r2, [r7, #2]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4013      	ands	r3, r2
 800787e:	041a      	lsls	r2, r3, #16
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	43d9      	mvns	r1, r3
 8007884:	887b      	ldrh	r3, [r7, #2]
 8007886:	400b      	ands	r3, r1
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	619a      	str	r2, [r3, #24]
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078a8:	695a      	ldr	r2, [r3, #20]
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d006      	beq.n	80078c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078b2:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078b4:	88fb      	ldrh	r3, [r7, #6]
 80078b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd fc14 	bl	80050e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40013c00 	.word	0x40013c00

080078cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e12b      	b.n	8007b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fd fc80 	bl	80051f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2224      	movs	r2, #36	; 0x24
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0201 	bic.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800791e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800792e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007930:	f003 f8d6 	bl	800aae0 <HAL_RCC_GetPCLK1Freq>
 8007934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	4a81      	ldr	r2, [pc, #516]	; (8007b40 <HAL_I2C_Init+0x274>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d807      	bhi.n	8007950 <HAL_I2C_Init+0x84>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a80      	ldr	r2, [pc, #512]	; (8007b44 <HAL_I2C_Init+0x278>)
 8007944:	4293      	cmp	r3, r2
 8007946:	bf94      	ite	ls
 8007948:	2301      	movls	r3, #1
 800794a:	2300      	movhi	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e006      	b.n	800795e <HAL_I2C_Init+0x92>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a7d      	ldr	r2, [pc, #500]	; (8007b48 <HAL_I2C_Init+0x27c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	bf94      	ite	ls
 8007958:	2301      	movls	r3, #1
 800795a:	2300      	movhi	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e0e7      	b.n	8007b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a78      	ldr	r2, [pc, #480]	; (8007b4c <HAL_I2C_Init+0x280>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0c9b      	lsrs	r3, r3, #18
 8007970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	4a6a      	ldr	r2, [pc, #424]	; (8007b40 <HAL_I2C_Init+0x274>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d802      	bhi.n	80079a0 <HAL_I2C_Init+0xd4>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3301      	adds	r3, #1
 800799e:	e009      	b.n	80079b4 <HAL_I2C_Init+0xe8>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80079a6:	fb02 f303 	mul.w	r3, r2, r3
 80079aa:	4a69      	ldr	r2, [pc, #420]	; (8007b50 <HAL_I2C_Init+0x284>)
 80079ac:	fba2 2303 	umull	r2, r3, r2, r3
 80079b0:	099b      	lsrs	r3, r3, #6
 80079b2:	3301      	adds	r3, #1
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80079c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	495c      	ldr	r1, [pc, #368]	; (8007b40 <HAL_I2C_Init+0x274>)
 80079d0:	428b      	cmp	r3, r1
 80079d2:	d819      	bhi.n	8007a08 <HAL_I2C_Init+0x13c>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	1e59      	subs	r1, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	fbb1 f3f3 	udiv	r3, r1, r3
 80079e2:	1c59      	adds	r1, r3, #1
 80079e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079e8:	400b      	ands	r3, r1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_I2C_Init+0x138>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1e59      	subs	r1, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a02:	e051      	b.n	8007aa8 <HAL_I2C_Init+0x1dc>
 8007a04:	2304      	movs	r3, #4
 8007a06:	e04f      	b.n	8007aa8 <HAL_I2C_Init+0x1dc>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d111      	bne.n	8007a34 <HAL_I2C_Init+0x168>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	1e58      	subs	r0, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6859      	ldr	r1, [r3, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	440b      	add	r3, r1
 8007a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e012      	b.n	8007a5a <HAL_I2C_Init+0x18e>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	1e58      	subs	r0, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6859      	ldr	r1, [r3, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	0099      	lsls	r1, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_I2C_Init+0x196>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e022      	b.n	8007aa8 <HAL_I2C_Init+0x1dc>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10e      	bne.n	8007a88 <HAL_I2C_Init+0x1bc>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	1e58      	subs	r0, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6859      	ldr	r1, [r3, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	440b      	add	r3, r1
 8007a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a86:	e00f      	b.n	8007aa8 <HAL_I2C_Init+0x1dc>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	1e58      	subs	r0, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6859      	ldr	r1, [r3, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	0099      	lsls	r1, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	6809      	ldr	r1, [r1, #0]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69da      	ldr	r2, [r3, #28]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6911      	ldr	r1, [r2, #16]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	68d2      	ldr	r2, [r2, #12]
 8007ae2:	4311      	orrs	r1, r2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695a      	ldr	r2, [r3, #20]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	000186a0 	.word	0x000186a0
 8007b44:	001e847f 	.word	0x001e847f
 8007b48:	003d08ff 	.word	0x003d08ff
 8007b4c:	431bde83 	.word	0x431bde83
 8007b50:	10624dd3 	.word	0x10624dd3

08007b54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	4611      	mov	r1, r2
 8007b60:	461a      	mov	r2, r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	817b      	strh	r3, [r7, #10]
 8007b66:	460b      	mov	r3, r1
 8007b68:	813b      	strh	r3, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b6e:	f7fe ff73 	bl	8006a58 <HAL_GetTick>
 8007b72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	f040 80d9 	bne.w	8007d34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2319      	movs	r3, #25
 8007b88:	2201      	movs	r2, #1
 8007b8a:	496d      	ldr	r1, [pc, #436]	; (8007d40 <HAL_I2C_Mem_Write+0x1ec>)
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f002 f90d 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0cc      	b.n	8007d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_I2C_Mem_Write+0x56>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e0c5      	b.n	8007d36 <HAL_I2C_Mem_Write+0x1e2>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d007      	beq.n	8007bd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0201 	orr.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2221      	movs	r2, #33	; 0x21
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2240      	movs	r2, #64	; 0x40
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a4d      	ldr	r2, [pc, #308]	; (8007d44 <HAL_I2C_Mem_Write+0x1f0>)
 8007c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c12:	88f8      	ldrh	r0, [r7, #6]
 8007c14:	893a      	ldrh	r2, [r7, #8]
 8007c16:	8979      	ldrh	r1, [r7, #10]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4603      	mov	r3, r0
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f001 fe9c 	bl	8009960 <I2C_RequestMemoryWrite>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d052      	beq.n	8007cd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e081      	b.n	8007d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f002 f98e 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d107      	bne.n	8007c5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e06b      	b.n	8007d36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d11b      	bne.n	8007cd4 <HAL_I2C_Mem_Write+0x180>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d017      	beq.n	8007cd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1aa      	bne.n	8007c32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f002 f97a 	bl	8009fda <I2C_WaitOnBTFFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00d      	beq.n	8007d08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d107      	bne.n	8007d04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e016      	b.n	8007d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
  }
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	00100002 	.word	0x00100002
 8007d44:	ffff0000 	.word	0xffff0000

08007d48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	; 0x30
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	817b      	strh	r3, [r7, #10]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	813b      	strh	r3, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d62:	f7fe fe79 	bl	8006a58 <HAL_GetTick>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	f040 8208 	bne.w	8008186 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2319      	movs	r3, #25
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	497b      	ldr	r1, [pc, #492]	; (8007f6c <HAL_I2C_Mem_Read+0x224>)
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f002 f813 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e1fb      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_I2C_Mem_Read+0x56>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e1f4      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d007      	beq.n	8007dc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0201 	orr.w	r2, r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2222      	movs	r2, #34	; 0x22
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2240      	movs	r2, #64	; 0x40
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a5b      	ldr	r2, [pc, #364]	; (8007f70 <HAL_I2C_Mem_Read+0x228>)
 8007e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e06:	88f8      	ldrh	r0, [r7, #6]
 8007e08:	893a      	ldrh	r2, [r7, #8]
 8007e0a:	8979      	ldrh	r1, [r7, #10]
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	4603      	mov	r3, r0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f001 fe38 	bl	8009a8c <I2C_RequestMemoryRead>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e1b0      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d113      	bne.n	8007e56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	623b      	str	r3, [r7, #32]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	623b      	str	r3, [r7, #32]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	623b      	str	r3, [r7, #32]
 8007e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e184      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d11b      	bne.n	8007e96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	61fb      	str	r3, [r7, #28]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e164      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d11b      	bne.n	8007ed6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	e144      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007eec:	e138      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	f200 80f1 	bhi.w	80080da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d123      	bne.n	8007f48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f002 f8db 	bl	800a0c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e139      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691a      	ldr	r2, [r3, #16]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f46:	e10b      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d14e      	bne.n	8007fee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	2200      	movs	r2, #0
 8007f58:	4906      	ldr	r1, [pc, #24]	; (8007f74 <HAL_I2C_Mem_Read+0x22c>)
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f001 ff26 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d008      	beq.n	8007f78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e10e      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
 8007f6a:	bf00      	nop
 8007f6c:	00100002 	.word	0x00100002
 8007f70:	ffff0000 	.word	0xffff0000
 8007f74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691a      	ldr	r2, [r3, #16]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	b2d2      	uxtb	r2, r2
 8007fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fec:	e0b8      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4966      	ldr	r1, [pc, #408]	; (8008190 <HAL_I2C_Mem_Read+0x448>)
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f001 fed7 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e0bf      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691a      	ldr	r2, [r3, #16]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	2200      	movs	r2, #0
 8008052:	494f      	ldr	r1, [pc, #316]	; (8008190 <HAL_I2C_Mem_Read+0x448>)
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f001 fea9 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e091      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080d8:	e042      	b.n	8008160 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f001 ffee 	bl	800a0c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e04c      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b04      	cmp	r3, #4
 800812c:	d118      	bne.n	8008160 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814a:	3b01      	subs	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008156:	b29b      	uxth	r3, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008164:	2b00      	cmp	r3, #0
 8008166:	f47f aec2 	bne.w	8007eee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2220      	movs	r2, #32
 800816e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	e000      	b.n	8008188 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008186:	2302      	movs	r3, #2
  }
}
 8008188:	4618      	mov	r0, r3
 800818a:	3728      	adds	r7, #40	; 0x28
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	00010004 	.word	0x00010004

08008194 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d003      	beq.n	80081cc <HAL_I2C_EV_IRQHandler+0x38>
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	f040 80c1 	bne.w	800834e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <HAL_I2C_EV_IRQHandler+0x6e>
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80081ec:	d003      	beq.n	80081f6 <HAL_I2C_EV_IRQHandler+0x62>
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081f4:	d101      	bne.n	80081fa <HAL_I2C_EV_IRQHandler+0x66>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <HAL_I2C_EV_IRQHandler+0x68>
 80081fa:	2300      	movs	r3, #0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	f000 8132 	beq.w	8008466 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00c      	beq.n	8008226 <HAL_I2C_EV_IRQHandler+0x92>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	0a5b      	lsrs	r3, r3, #9
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d006      	beq.n	8008226 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 ffd6 	bl	800a1ca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fd83 	bl	8008d2a <I2C_Master_SB>
 8008224:	e092      	b.n	800834c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <HAL_I2C_EV_IRQHandler+0xb2>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	0a5b      	lsrs	r3, r3, #9
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fdf9 	bl	8008e36 <I2C_Master_ADD10>
 8008244:	e082      	b.n	800834c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	085b      	lsrs	r3, r3, #1
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <HAL_I2C_EV_IRQHandler+0xd2>
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	0a5b      	lsrs	r3, r3, #9
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fe13 	bl	8008e8a <I2C_Master_ADDR>
 8008264:	e072      	b.n	800834c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	089b      	lsrs	r3, r3, #2
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d03b      	beq.n	80082ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800827c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008280:	f000 80f3 	beq.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	09db      	lsrs	r3, r3, #7
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00f      	beq.n	80082b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	0a9b      	lsrs	r3, r3, #10
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d009      	beq.n	80082b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	089b      	lsrs	r3, r3, #2
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9f3 	bl	8008694 <I2C_MasterTransmit_TXE>
 80082ae:	e04d      	b.n	800834c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	089b      	lsrs	r3, r3, #2
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 80d6 	beq.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	0a5b      	lsrs	r3, r3, #9
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80cf 	beq.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b21      	cmp	r3, #33	; 0x21
 80082d0:	d103      	bne.n	80082da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa7a 	bl	80087cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082d8:	e0c7      	b.n	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b40      	cmp	r3, #64	; 0x40
 80082de:	f040 80c4 	bne.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fae8 	bl	80088b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082e8:	e0bf      	b.n	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f8:	f000 80b7 	beq.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	099b      	lsrs	r3, r3, #6
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00f      	beq.n	8008328 <HAL_I2C_EV_IRQHandler+0x194>
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	0a9b      	lsrs	r3, r3, #10
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d009      	beq.n	8008328 <HAL_I2C_EV_IRQHandler+0x194>
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	089b      	lsrs	r3, r3, #2
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fb5d 	bl	80089e0 <I2C_MasterReceive_RXNE>
 8008326:	e011      	b.n	800834c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	089b      	lsrs	r3, r3, #2
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 809a 	beq.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	0a5b      	lsrs	r3, r3, #9
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8093 	beq.w	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fc06 	bl	8008b56 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800834a:	e08e      	b.n	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
 800834c:	e08d      	b.n	800846a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	e007      	b.n	8008370 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d012      	beq.n	80083a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	0a5b      	lsrs	r3, r3, #9
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00c      	beq.n	80083a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008398:	69b9      	ldr	r1, [r7, #24]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 ffc4 	bl	8009328 <I2C_Slave_ADDR>
 80083a0:	e066      	b.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	0a5b      	lsrs	r3, r3, #9
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fffe 	bl	80093bc <I2C_Slave_STOPF>
 80083c0:	e056      	b.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b21      	cmp	r3, #33	; 0x21
 80083c6:	d002      	beq.n	80083ce <HAL_I2C_EV_IRQHandler+0x23a>
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b29      	cmp	r3, #41	; 0x29
 80083cc:	d125      	bne.n	800841a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	09db      	lsrs	r3, r3, #7
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00f      	beq.n	80083fa <HAL_I2C_EV_IRQHandler+0x266>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	0a9b      	lsrs	r3, r3, #10
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <HAL_I2C_EV_IRQHandler+0x266>
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	089b      	lsrs	r3, r3, #2
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 feda 	bl	80091ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083f8:	e039      	b.n	800846e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	089b      	lsrs	r3, r3, #2
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d033      	beq.n	800846e <HAL_I2C_EV_IRQHandler+0x2da>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	0a5b      	lsrs	r3, r3, #9
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d02d      	beq.n	800846e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 ff07 	bl	8009226 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008418:	e029      	b.n	800846e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	099b      	lsrs	r3, r3, #6
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00f      	beq.n	8008446 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	0a9b      	lsrs	r3, r3, #10
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	089b      	lsrs	r3, r3, #2
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 ff12 	bl	8009268 <I2C_SlaveReceive_RXNE>
 8008444:	e014      	b.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	089b      	lsrs	r3, r3, #2
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	0a5b      	lsrs	r3, r3, #9
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 ff40 	bl	80092e4 <I2C_SlaveReceive_BTF>
 8008464:	e004      	b.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008466:	bf00      	nop
 8008468:	e002      	b.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800846a:	bf00      	nop
 800846c:	e000      	b.n	8008470 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800846e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b08a      	sub	sp, #40	; 0x28
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800848e:	2300      	movs	r3, #0
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008498:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	0a1b      	lsrs	r3, r3, #8
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	0a1b      	lsrs	r3, r3, #8
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d008      	beq.n	80084c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	0a5b      	lsrs	r3, r3, #9
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <HAL_I2C_ER_IRQHandler+0x78>
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	f043 0302 	orr.w	r3, r3, #2
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80084ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	0a9b      	lsrs	r3, r3, #10
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d03f      	beq.n	800857a <HAL_I2C_ER_IRQHandler+0x104>
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	0a1b      	lsrs	r3, r3, #8
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d039      	beq.n	800857a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008506:	7efb      	ldrb	r3, [r7, #27]
 8008508:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008518:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008520:	7ebb      	ldrb	r3, [r7, #26]
 8008522:	2b20      	cmp	r3, #32
 8008524:	d112      	bne.n	800854c <HAL_I2C_ER_IRQHandler+0xd6>
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10f      	bne.n	800854c <HAL_I2C_ER_IRQHandler+0xd6>
 800852c:	7cfb      	ldrb	r3, [r7, #19]
 800852e:	2b21      	cmp	r3, #33	; 0x21
 8008530:	d008      	beq.n	8008544 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008532:	7cfb      	ldrb	r3, [r7, #19]
 8008534:	2b29      	cmp	r3, #41	; 0x29
 8008536:	d005      	beq.n	8008544 <HAL_I2C_ER_IRQHandler+0xce>
 8008538:	7cfb      	ldrb	r3, [r7, #19]
 800853a:	2b28      	cmp	r3, #40	; 0x28
 800853c:	d106      	bne.n	800854c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b21      	cmp	r3, #33	; 0x21
 8008542:	d103      	bne.n	800854c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f869 	bl	800961c <I2C_Slave_AF>
 800854a:	e016      	b.n	800857a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008554:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	f043 0304 	orr.w	r3, r3, #4
 800855c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800855e:	7efb      	ldrb	r3, [r7, #27]
 8008560:	2b10      	cmp	r3, #16
 8008562:	d002      	beq.n	800856a <HAL_I2C_ER_IRQHandler+0xf4>
 8008564:	7efb      	ldrb	r3, [r7, #27]
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d107      	bne.n	800857a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008578:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	0adb      	lsrs	r3, r3, #11
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00e      	beq.n	80085a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	f043 0308 	orr.w	r3, r3, #8
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80085a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d008      	beq.n	80085bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 f8a0 	bl	80096fc <I2C_ITError>
  }
}
 80085bc:	bf00      	nop
 80085be:	3728      	adds	r7, #40	; 0x28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
 8008620:	4613      	mov	r3, r2
 8008622:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d150      	bne.n	800875c <I2C_MasterTransmit_TXE+0xc8>
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	2b21      	cmp	r3, #33	; 0x21
 80086be:	d14d      	bne.n	800875c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d01d      	beq.n	8008702 <I2C_MasterTransmit_TXE+0x6e>
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d01a      	beq.n	8008702 <I2C_MasterTransmit_TXE+0x6e>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086d2:	d016      	beq.n	8008702 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2211      	movs	r2, #17
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff ff62 	bl	80085c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008700:	e060      	b.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008710:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008720:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	d107      	bne.n	800874c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff ff7d 	bl	8008644 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800874a:	e03b      	b.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff ff35 	bl	80085c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800875a:	e033      	b.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b21      	cmp	r3, #33	; 0x21
 8008760:	d005      	beq.n	800876e <I2C_MasterTransmit_TXE+0xda>
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d12d      	bne.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d12a      	bne.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d108      	bne.n	800878a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008786:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008788:	e01c      	b.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	d103      	bne.n	800879e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f88e 	bl	80088b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800879c:	e012      	b.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	781a      	ldrb	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b29a      	uxth	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80087c2:	e7ff      	b.n	80087c4 <I2C_MasterTransmit_TXE+0x130>
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b21      	cmp	r3, #33	; 0x21
 80087e4:	d164      	bne.n	80088b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d012      	beq.n	8008816 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008814:	e04c      	b.n	80088b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b08      	cmp	r3, #8
 800881a:	d01d      	beq.n	8008858 <I2C_MasterTransmit_BTF+0x8c>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b20      	cmp	r3, #32
 8008820:	d01a      	beq.n	8008858 <I2C_MasterTransmit_BTF+0x8c>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008828:	d016      	beq.n	8008858 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008838:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2211      	movs	r2, #17
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff feb7 	bl	80085c4 <HAL_I2C_MasterTxCpltCallback>
}
 8008856:	e02b      	b.n	80088b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008866:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008876:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d107      	bne.n	80088a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff fed2 	bl	8008644 <HAL_I2C_MemTxCpltCallback>
}
 80088a0:	e006      	b.n	80088b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe8a 	bl	80085c4 <HAL_I2C_MasterTxCpltCallback>
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11d      	bne.n	800890c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d10b      	bne.n	80088f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e8:	1c9a      	adds	r2, r3, #2
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80088ee:	e073      	b.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	121b      	asrs	r3, r3, #8
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	651a      	str	r2, [r3, #80]	; 0x50
}
 800890a:	e065      	b.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008910:	2b01      	cmp	r3, #1
 8008912:	d10b      	bne.n	800892c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	651a      	str	r2, [r3, #80]	; 0x50
}
 800892a:	e055      	b.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008930:	2b02      	cmp	r3, #2
 8008932:	d151      	bne.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b22      	cmp	r3, #34	; 0x22
 8008938:	d10d      	bne.n	8008956 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008948:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008954:	e040      	b.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d015      	beq.n	800898c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	2b21      	cmp	r3, #33	; 0x21
 8008964:	d112      	bne.n	800898c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	781a      	ldrb	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800898a:	e025      	b.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d120      	bne.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	2b21      	cmp	r3, #33	; 0x21
 800899a:	d11d      	bne.n	80089d8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff fe36 	bl	8008644 <HAL_I2C_MemTxCpltCallback>
}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b22      	cmp	r3, #34	; 0x22
 80089f2:	f040 80ac 	bne.w	8008b4e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d921      	bls.n	8008a48 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	f040 808c 	bne.w	8008b4e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a44:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008a46:	e082      	b.n	8008b4e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d075      	beq.n	8008b3c <I2C_MasterReceive_RXNE+0x15c>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d002      	beq.n	8008a5c <I2C_MasterReceive_RXNE+0x7c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d16f      	bne.n	8008b3c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fafd 	bl	800a05c <I2C_WaitOnSTOPRequestThroughIT>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d142      	bne.n	8008aee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a76:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d10a      	bne.n	8008ad8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff fdc1 	bl	8008658 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ad6:	e03a      	b.n	8008b4e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2212      	movs	r2, #18
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff fd76 	bl	80085d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008aec:	e02f      	b.n	8008b4e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008afc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	b2d2      	uxtb	r2, r2
 8008b0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff fd99 	bl	800866c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008b3a:	e008      	b.n	8008b4e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b4a:	605a      	str	r2, [r3, #4]
}
 8008b4c:	e7ff      	b.n	8008b4e <I2C_MasterReceive_RXNE+0x16e>
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d11b      	bne.n	8008ba6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008ba4:	e0bd      	b.n	8008d22 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d129      	bne.n	8008c04 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bbe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d00a      	beq.n	8008bdc <I2C_MasterReceive_BTF+0x86>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d007      	beq.n	8008bdc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	b2d2      	uxtb	r2, r2
 8008be8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008c02:	e08e      	b.n	8008d22 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d176      	bne.n	8008cfc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d002      	beq.n	8008c1a <I2C_MasterReceive_BTF+0xc4>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b10      	cmp	r3, #16
 8008c18:	d108      	bne.n	8008c2c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e019      	b.n	8008c60 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d002      	beq.n	8008c38 <I2C_MasterReceive_BTF+0xe2>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d108      	bne.n	8008c4a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e00a      	b.n	8008c60 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d007      	beq.n	8008c60 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	b2d2      	uxtb	r2, r2
 8008c92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008cba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b40      	cmp	r3, #64	; 0x40
 8008cce:	d10a      	bne.n	8008ce6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff fcba 	bl	8008658 <HAL_I2C_MemRxCpltCallback>
}
 8008ce4:	e01d      	b.n	8008d22 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2212      	movs	r2, #18
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fc6f 	bl	80085d8 <HAL_I2C_MasterRxCpltCallback>
}
 8008cfa:	e012      	b.n	8008d22 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d117      	bne.n	8008d6e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d56:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008d58:	e067      	b.n	8008e2a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	611a      	str	r2, [r3, #16]
}
 8008d6c:	e05d      	b.n	8008e2a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d76:	d133      	bne.n	8008de0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b21      	cmp	r3, #33	; 0x21
 8008d82:	d109      	bne.n	8008d98 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d94:	611a      	str	r2, [r3, #16]
 8008d96:	e008      	b.n	8008daa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <I2C_Master_SB+0x92>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d032      	beq.n	8008e2a <I2C_Master_SB+0x100>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d02d      	beq.n	8008e2a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ddc:	605a      	str	r2, [r3, #4]
}
 8008dde:	e024      	b.n	8008e2a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10e      	bne.n	8008e06 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	11db      	asrs	r3, r3, #7
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 0306 	and.w	r3, r3, #6
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	f063 030f 	orn	r3, r3, #15
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	611a      	str	r2, [r3, #16]
}
 8008e04:	e011      	b.n	8008e2a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d10d      	bne.n	8008e2a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	11db      	asrs	r3, r3, #7
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0306 	and.w	r3, r3, #6
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f063 030e 	orn	r3, r3, #14
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	611a      	str	r2, [r3, #16]
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <I2C_Master_ADD10+0x26>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d108      	bne.n	8008e6e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00c      	beq.n	8008e7e <I2C_Master_ADD10+0x48>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d007      	beq.n	8008e7e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e7c:	605a      	str	r2, [r3, #4]
  }
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b091      	sub	sp, #68	; 0x44
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b22      	cmp	r3, #34	; 0x22
 8008eb2:	f040 8169 	bne.w	8009188 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10f      	bne.n	8008ede <I2C_Master_ADDR+0x54>
 8008ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d10b      	bne.n	8008ede <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	e160      	b.n	80091a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d11d      	bne.n	8008f22 <I2C_Master_ADDR+0x98>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008eee:	d118      	bne.n	8008f22 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f14:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8008f20:	e13e      	b.n	80091a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d113      	bne.n	8008f54 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	e115      	b.n	8009180 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	f040 808a 	bne.w	8009074 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f66:	d137      	bne.n	8008fd8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f76:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f86:	d113      	bne.n	8008fb0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f96:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	e0e7      	b.n	8009180 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	623b      	str	r3, [r7, #32]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	623b      	str	r3, [r7, #32]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	623b      	str	r3, [r7, #32]
 8008fc4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e0d3      	b.n	8009180 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	d02e      	beq.n	800903c <I2C_Master_ADDR+0x1b2>
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	d02b      	beq.n	800903c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	2b12      	cmp	r3, #18
 8008fe8:	d102      	bne.n	8008ff0 <I2C_Master_ADDR+0x166>
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d125      	bne.n	800903c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d00e      	beq.n	8009014 <I2C_Master_ADDR+0x18a>
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d00b      	beq.n	8009014 <I2C_Master_ADDR+0x18a>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	2b10      	cmp	r3, #16
 8009000:	d008      	beq.n	8009014 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e007      	b.n	8009024 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009022:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	e0a1      	b.n	8009180 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800904c:	2300      	movs	r3, #0
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e085      	b.n	8009180 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009078:	b29b      	uxth	r3, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d14d      	bne.n	800911a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	2b04      	cmp	r3, #4
 8009082:	d016      	beq.n	80090b2 <I2C_Master_ADDR+0x228>
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	2b02      	cmp	r3, #2
 8009088:	d013      	beq.n	80090b2 <I2C_Master_ADDR+0x228>
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	2b10      	cmp	r3, #16
 800908e:	d010      	beq.n	80090b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800909e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e007      	b.n	80090c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d0:	d117      	bne.n	8009102 <I2C_Master_ADDR+0x278>
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090d8:	d00b      	beq.n	80090f2 <I2C_Master_ADDR+0x268>
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d008      	beq.n	80090f2 <I2C_Master_ADDR+0x268>
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	d005      	beq.n	80090f2 <I2C_Master_ADDR+0x268>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d002      	beq.n	80090f2 <I2C_Master_ADDR+0x268>
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d107      	bne.n	8009102 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009100:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	e032      	b.n	8009180 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009128:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009138:	d117      	bne.n	800916a <I2C_Master_ADDR+0x2e0>
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009140:	d00b      	beq.n	800915a <I2C_Master_ADDR+0x2d0>
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	2b01      	cmp	r3, #1
 8009146:	d008      	beq.n	800915a <I2C_Master_ADDR+0x2d0>
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	2b08      	cmp	r3, #8
 800914c:	d005      	beq.n	800915a <I2C_Master_ADDR+0x2d0>
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	2b10      	cmp	r3, #16
 8009152:	d002      	beq.n	800915a <I2C_Master_ADDR+0x2d0>
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	2b20      	cmp	r3, #32
 8009158:	d107      	bne.n	800916a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009168:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800916a:	2300      	movs	r3, #0
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	613b      	str	r3, [r7, #16]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	613b      	str	r3, [r7, #16]
 800917e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009186:	e00b      	b.n	80091a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
}
 800919e:	e7ff      	b.n	80091a0 <I2C_Master_ADDR+0x316>
 80091a0:	bf00      	nop
 80091a2:	3744      	adds	r7, #68	; 0x44
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d02b      	beq.n	800921e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d114      	bne.n	800921e <I2C_SlaveTransmit_TXE+0x72>
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	2b29      	cmp	r3, #41	; 0x29
 80091f8:	d111      	bne.n	800921e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009208:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2221      	movs	r2, #33	; 0x21
 800920e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2228      	movs	r2, #40	; 0x28
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff f9e7 	bl	80085ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d011      	beq.n	800925c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	3b01      	subs	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d02c      	beq.n	80092dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	b2d2      	uxtb	r2, r2
 800928e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d114      	bne.n	80092dc <I2C_SlaveReceive_RXNE+0x74>
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	2b2a      	cmp	r3, #42	; 0x2a
 80092b6:	d111      	bne.n	80092dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2222      	movs	r2, #34	; 0x22
 80092cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2228      	movs	r2, #40	; 0x28
 80092d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff f992 	bl	8008600 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80092dc:	bf00      	nop
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d012      	beq.n	800931c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009342:	2b28      	cmp	r3, #40	; 0x28
 8009344:	d127      	bne.n	8009396 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009354:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	089b      	lsrs	r3, r3, #2
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	09db      	lsrs	r3, r3, #7
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	81bb      	strh	r3, [r7, #12]
 8009378:	e002      	b.n	8009380 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009388:	89ba      	ldrh	r2, [r7, #12]
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff f940 	bl	8008614 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009394:	e00e      	b.n	80093b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	60bb      	str	r3, [r7, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	60bb      	str	r3, [r7, #8]
 80093aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80093da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80093dc:	2300      	movs	r3, #0
 80093de:	60bb      	str	r3, [r7, #8]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	60bb      	str	r3, [r7, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0201 	orr.w	r2, r2, #1
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009408:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009418:	d172      	bne.n	8009500 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	2b22      	cmp	r3, #34	; 0x22
 800941e:	d002      	beq.n	8009426 <I2C_Slave_STOPF+0x6a>
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b2a      	cmp	r3, #42	; 0x2a
 8009424:	d135      	bne.n	8009492 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009438:	b29b      	uxth	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	f043 0204 	orr.w	r2, r3, #4
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009458:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	4618      	mov	r0, r3
 8009460:	f7fd ff5e 	bl	8007320 <HAL_DMA_GetState>
 8009464:	4603      	mov	r3, r0
 8009466:	2b01      	cmp	r3, #1
 8009468:	d049      	beq.n	80094fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	4a69      	ldr	r2, [pc, #420]	; (8009614 <I2C_Slave_STOPF+0x258>)
 8009470:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	4618      	mov	r0, r3
 8009478:	f7fd fda6 	bl	8006fc8 <HAL_DMA_Abort_IT>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d03d      	beq.n	80094fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009490:	e035      	b.n	80094fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	b29a      	uxth	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f043 0204 	orr.w	r2, r3, #4
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fd ff28 	bl	8007320 <HAL_DMA_GetState>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d014      	beq.n	8009500 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094da:	4a4e      	ldr	r2, [pc, #312]	; (8009614 <I2C_Slave_STOPF+0x258>)
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fd fd70 	bl	8006fc8 <HAL_DMA_Abort_IT>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d008      	beq.n	8009500 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	e000      	b.n	8009500 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80094fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d03e      	beq.n	8009588 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b04      	cmp	r3, #4
 8009516:	d112      	bne.n	800953e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691a      	ldr	r2, [r3, #16]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009548:	2b40      	cmp	r3, #64	; 0x40
 800954a:	d112      	bne.n	8009572 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009568:	b29b      	uxth	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	b29a      	uxth	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009576:	b29b      	uxth	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	f043 0204 	orr.w	r2, r3, #4
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8b3 	bl	80096fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009596:	e039      	b.n	800960c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	2b2a      	cmp	r3, #42	; 0x2a
 800959c:	d109      	bne.n	80095b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2228      	movs	r2, #40	; 0x28
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff f827 	bl	8008600 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b28      	cmp	r3, #40	; 0x28
 80095bc:	d111      	bne.n	80095e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a15      	ldr	r2, [pc, #84]	; (8009618 <I2C_Slave_STOPF+0x25c>)
 80095c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff f828 	bl	8008630 <HAL_I2C_ListenCpltCallback>
}
 80095e0:	e014      	b.n	800960c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	2b22      	cmp	r3, #34	; 0x22
 80095e8:	d002      	beq.n	80095f0 <I2C_Slave_STOPF+0x234>
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b22      	cmp	r3, #34	; 0x22
 80095ee:	d10d      	bne.n	800960c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7fe fffa 	bl	8008600 <HAL_I2C_SlaveRxCpltCallback>
}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	08009c5d 	.word	0x08009c5d
 8009618:	ffff0000 	.word	0xffff0000

0800961c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800962a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b08      	cmp	r3, #8
 8009636:	d002      	beq.n	800963e <I2C_Slave_AF+0x22>
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2b20      	cmp	r3, #32
 800963c:	d129      	bne.n	8009692 <I2C_Slave_AF+0x76>
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b28      	cmp	r3, #40	; 0x28
 8009642:	d126      	bne.n	8009692 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a2c      	ldr	r2, [pc, #176]	; (80096f8 <I2C_Slave_AF+0xdc>)
 8009648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009658:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009662:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009672:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7fe ffd0 	bl	8008630 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009690:	e02e      	b.n	80096f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	2b21      	cmp	r3, #33	; 0x21
 8009696:	d126      	bne.n	80096e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <I2C_Slave_AF+0xdc>)
 800969c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2221      	movs	r2, #33	; 0x21
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80096c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fe ff84 	bl	80085ec <HAL_I2C_SlaveTxCpltCallback>
}
 80096e4:	e004      	b.n	80096f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096ee:	615a      	str	r2, [r3, #20]
}
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	ffff0000 	.word	0xffff0000

080096fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800970a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009712:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b10      	cmp	r3, #16
 8009718:	d002      	beq.n	8009720 <I2C_ITError+0x24>
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	2b40      	cmp	r3, #64	; 0x40
 800971e:	d10a      	bne.n	8009736 <I2C_ITError+0x3a>
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	2b22      	cmp	r3, #34	; 0x22
 8009724:	d107      	bne.n	8009736 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009734:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800973c:	2b28      	cmp	r3, #40	; 0x28
 800973e:	d107      	bne.n	8009750 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2228      	movs	r2, #40	; 0x28
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800974e:	e015      	b.n	800977c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800975a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800975e:	d00a      	beq.n	8009776 <I2C_ITError+0x7a>
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b60      	cmp	r3, #96	; 0x60
 8009764:	d007      	beq.n	8009776 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800978a:	d162      	bne.n	8009852 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800979a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d020      	beq.n	80097ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ae:	4a6a      	ldr	r2, [pc, #424]	; (8009958 <I2C_ITError+0x25c>)
 80097b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fd fc06 	bl	8006fc8 <HAL_DMA_Abort_IT>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8089 	beq.w	80098d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0201 	bic.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097e6:	4610      	mov	r0, r2
 80097e8:	4798      	blx	r3
 80097ea:	e074      	b.n	80098d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	4a59      	ldr	r2, [pc, #356]	; (8009958 <I2C_ITError+0x25c>)
 80097f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fd fbe5 	bl	8006fc8 <HAL_DMA_Abort_IT>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d068      	beq.n	80098d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980e:	2b40      	cmp	r3, #64	; 0x40
 8009810:	d10b      	bne.n	800982a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	e041      	b.n	80098d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b60      	cmp	r3, #96	; 0x60
 800985c:	d125      	bne.n	80098aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	d10b      	bne.n	8009892 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691a      	ldr	r2, [r3, #16]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7fe feec 	bl	8008680 <HAL_I2C_AbortCpltCallback>
 80098a8:	e015      	b.n	80098d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b4:	2b40      	cmp	r3, #64	; 0x40
 80098b6:	d10b      	bne.n	80098d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691a      	ldr	r2, [r3, #16]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7fe fecb 	bl	800866c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10e      	bne.n	8009904 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009900:	2b00      	cmp	r3, #0
 8009902:	d007      	beq.n	8009914 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009912:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b04      	cmp	r3, #4
 8009926:	d113      	bne.n	8009950 <I2C_ITError+0x254>
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	2b28      	cmp	r3, #40	; 0x28
 800992c:	d110      	bne.n	8009950 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a0a      	ldr	r2, [pc, #40]	; (800995c <I2C_ITError+0x260>)
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fe fe70 	bl	8008630 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	08009c5d 	.word	0x08009c5d
 800995c:	ffff0000 	.word	0xffff0000

08009960 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	4603      	mov	r3, r0
 8009970:	817b      	strh	r3, [r7, #10]
 8009972:	460b      	mov	r3, r1
 8009974:	813b      	strh	r3, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	2200      	movs	r2, #0
 8009992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fa08 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00d      	beq.n	80099be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b0:	d103      	bne.n	80099ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e05f      	b.n	8009a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099be:	897b      	ldrh	r3, [r7, #10]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	461a      	mov	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	6a3a      	ldr	r2, [r7, #32]
 80099d2:	492d      	ldr	r1, [pc, #180]	; (8009a88 <I2C_RequestMemoryWrite+0x128>)
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fa40 	bl	8009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e04c      	b.n	8009a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fc:	6a39      	ldr	r1, [r7, #32]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 faaa 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d107      	bne.n	8009a22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e02b      	b.n	8009a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a26:	88fb      	ldrh	r3, [r7, #6]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d105      	bne.n	8009a38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a2c:	893b      	ldrh	r3, [r7, #8]
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	611a      	str	r2, [r3, #16]
 8009a36:	e021      	b.n	8009a7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a38:	893b      	ldrh	r3, [r7, #8]
 8009a3a:	0a1b      	lsrs	r3, r3, #8
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a48:	6a39      	ldr	r1, [r7, #32]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fa84 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00d      	beq.n	8009a72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d107      	bne.n	8009a6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e005      	b.n	8009a7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a72:	893b      	ldrh	r3, [r7, #8]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	00010002 	.word	0x00010002

08009a8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af02      	add	r7, sp, #8
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	4608      	mov	r0, r1
 8009a96:	4611      	mov	r1, r2
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	817b      	strh	r3, [r7, #10]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	813b      	strh	r3, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ab4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f96a 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00d      	beq.n	8009afa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aec:	d103      	bne.n	8009af6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e0aa      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009afa:	897b      	ldrh	r3, [r7, #10]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	461a      	mov	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	6a3a      	ldr	r2, [r7, #32]
 8009b0e:	4952      	ldr	r1, [pc, #328]	; (8009c58 <I2C_RequestMemoryRead+0x1cc>)
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f9a2 	bl	8009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e097      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	617b      	str	r3, [r7, #20]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	617b      	str	r3, [r7, #20]
 8009b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b38:	6a39      	ldr	r1, [r7, #32]
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fa0c 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00d      	beq.n	8009b62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	d107      	bne.n	8009b5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e076      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b62:	88fb      	ldrh	r3, [r7, #6]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d105      	bne.n	8009b74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b68:	893b      	ldrh	r3, [r7, #8]
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	611a      	str	r2, [r3, #16]
 8009b72:	e021      	b.n	8009bb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b74:	893b      	ldrh	r3, [r7, #8]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b84:	6a39      	ldr	r1, [r7, #32]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 f9e6 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00d      	beq.n	8009bae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d107      	bne.n	8009baa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e050      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bae:	893b      	ldrh	r3, [r7, #8]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bba:	6a39      	ldr	r1, [r7, #32]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f9cb 	bl	8009f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00d      	beq.n	8009be4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d107      	bne.n	8009be0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e035      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f8d3 	bl	8009dac <I2C_WaitOnFlagUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00d      	beq.n	8009c28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1a:	d103      	bne.n	8009c24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e013      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c28:	897b      	ldrh	r3, [r7, #10]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	6a3a      	ldr	r2, [r7, #32]
 8009c3c:	4906      	ldr	r1, [pc, #24]	; (8009c58 <I2C_RequestMemoryRead+0x1cc>)
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 f90b 	bl	8009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	00010002 	.word	0x00010002

08009c5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c76:	4b4b      	ldr	r3, [pc, #300]	; (8009da4 <I2C_DMAAbort+0x148>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	08db      	lsrs	r3, r3, #3
 8009c7c:	4a4a      	ldr	r2, [pc, #296]	; (8009da8 <I2C_DMAAbort+0x14c>)
 8009c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c82:	0a1a      	lsrs	r2, r3, #8
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	00da      	lsls	r2, r3, #3
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009ca2:	e00a      	b.n	8009cba <I2C_DMAAbort+0x5e>
    }
    count--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb8:	d0ea      	beq.n	8009c90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ce8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2200      	movs	r2, #0
 8009cee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0201 	bic.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b60      	cmp	r3, #96	; 0x60
 8009d2a:	d10e      	bne.n	8009d4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009d42:	6978      	ldr	r0, [r7, #20]
 8009d44:	f7fe fc9c 	bl	8008680 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d48:	e027      	b.n	8009d9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d4a:	7cfb      	ldrb	r3, [r7, #19]
 8009d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d50:	2b28      	cmp	r3, #40	; 0x28
 8009d52:	d117      	bne.n	8009d84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2200      	movs	r2, #0
 8009d78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2228      	movs	r2, #40	; 0x28
 8009d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d82:	e007      	b.n	8009d94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009d94:	6978      	ldr	r0, [r7, #20]
 8009d96:	f7fe fc69 	bl	800866c <HAL_I2C_ErrorCallback>
}
 8009d9a:	bf00      	nop
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000224 	.word	0x20000224
 8009da8:	14f8b589 	.word	0x14f8b589

08009dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009dbc:	e025      	b.n	8009e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc4:	d021      	beq.n	8009e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc6:	f7fc fe47 	bl	8006a58 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d302      	bcc.n	8009ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d116      	bne.n	8009e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	f043 0220 	orr.w	r2, r3, #32
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e023      	b.n	8009e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	0c1b      	lsrs	r3, r3, #16
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d10d      	bne.n	8009e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	43da      	mvns	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bf0c      	ite	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	2300      	movne	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	e00c      	b.n	8009e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	43da      	mvns	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bf0c      	ite	eq
 8009e42:	2301      	moveq	r3, #1
 8009e44:	2300      	movne	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d0b6      	beq.n	8009dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
 8009e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e68:	e051      	b.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e78:	d123      	bne.n	8009ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f043 0204 	orr.w	r2, r3, #4
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e046      	b.n	8009f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec8:	d021      	beq.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eca:	f7fc fdc5 	bl	8006a58 <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d302      	bcc.n	8009ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d116      	bne.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	f043 0220 	orr.w	r2, r3, #32
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e020      	b.n	8009f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	0c1b      	lsrs	r3, r3, #16
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d10c      	bne.n	8009f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	43da      	mvns	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4013      	ands	r3, r2
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bf14      	ite	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	2300      	moveq	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	e00b      	b.n	8009f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	43da      	mvns	r2, r3
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bf14      	ite	ne
 8009f44:	2301      	movne	r3, #1
 8009f46:	2300      	moveq	r3, #0
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d18d      	bne.n	8009e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f64:	e02d      	b.n	8009fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 f900 	bl	800a16c <I2C_IsAcknowledgeFailed>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e02d      	b.n	8009fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d021      	beq.n	8009fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f7e:	f7fc fd6b 	bl	8006a58 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d116      	bne.n	8009fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	f043 0220 	orr.w	r2, r3, #32
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e007      	b.n	8009fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fcc:	2b80      	cmp	r3, #128	; 0x80
 8009fce:	d1ca      	bne.n	8009f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fe6:	e02d      	b.n	800a044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f8bf 	bl	800a16c <I2C_IsAcknowledgeFailed>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e02d      	b.n	800a054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d021      	beq.n	800a044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a000:	f7fc fd2a 	bl	8006a58 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d302      	bcc.n	800a016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d116      	bne.n	800a044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2220      	movs	r2, #32
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	f043 0220 	orr.w	r2, r3, #32
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e007      	b.n	800a054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d1ca      	bne.n	8009fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	08db      	lsrs	r3, r3, #3
 800a06e:	4a13      	ldr	r2, [pc, #76]	; (800a0bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a070:	fba2 2303 	umull	r2, r3, r2, r3
 800a074:	0a1a      	lsrs	r2, r3, #8
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3b01      	subs	r3, #1
 800a082:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d107      	bne.n	800a09a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	f043 0220 	orr.w	r2, r3, #32
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e008      	b.n	800a0ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a8:	d0e9      	beq.n	800a07e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	20000224 	.word	0x20000224
 800a0bc:	14f8b589 	.word	0x14f8b589

0800a0c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0cc:	e042      	b.n	800a154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b10      	cmp	r3, #16
 800a0da:	d119      	bne.n	800a110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f06f 0210 	mvn.w	r2, #16
 800a0e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e029      	b.n	800a164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a110:	f7fc fca2 	bl	8006a58 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d302      	bcc.n	800a126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d116      	bne.n	800a154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2220      	movs	r2, #32
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	f043 0220 	orr.w	r2, r3, #32
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e007      	b.n	800a164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	d1b5      	bne.n	800a0ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a182:	d11b      	bne.n	800a1bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a18c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	f043 0204 	orr.w	r2, r3, #4
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a1da:	d103      	bne.n	800a1e4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1e2:	e007      	b.n	800a1f4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a1ec:	d102      	bne.n	800a1f4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e267      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d075      	beq.n	800a30a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a21e:	4b88      	ldr	r3, [pc, #544]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 030c 	and.w	r3, r3, #12
 800a226:	2b04      	cmp	r3, #4
 800a228:	d00c      	beq.n	800a244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a22a:	4b85      	ldr	r3, [pc, #532]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a232:	2b08      	cmp	r3, #8
 800a234:	d112      	bne.n	800a25c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a236:	4b82      	ldr	r3, [pc, #520]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a23e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a242:	d10b      	bne.n	800a25c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a244:	4b7e      	ldr	r3, [pc, #504]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d05b      	beq.n	800a308 <HAL_RCC_OscConfig+0x108>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d157      	bne.n	800a308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e242      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a264:	d106      	bne.n	800a274 <HAL_RCC_OscConfig+0x74>
 800a266:	4b76      	ldr	r3, [pc, #472]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a75      	ldr	r2, [pc, #468]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a26c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e01d      	b.n	800a2b0 <HAL_RCC_OscConfig+0xb0>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a27c:	d10c      	bne.n	800a298 <HAL_RCC_OscConfig+0x98>
 800a27e:	4b70      	ldr	r3, [pc, #448]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a6f      	ldr	r2, [pc, #444]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	4b6d      	ldr	r3, [pc, #436]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a6c      	ldr	r2, [pc, #432]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	e00b      	b.n	800a2b0 <HAL_RCC_OscConfig+0xb0>
 800a298:	4b69      	ldr	r3, [pc, #420]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a68      	ldr	r2, [pc, #416]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a29e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	4b66      	ldr	r3, [pc, #408]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a65      	ldr	r2, [pc, #404]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a2aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d013      	beq.n	800a2e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2b8:	f7fc fbce 	bl	8006a58 <HAL_GetTick>
 800a2bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2be:	e008      	b.n	800a2d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2c0:	f7fc fbca 	bl	8006a58 <HAL_GetTick>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	2b64      	cmp	r3, #100	; 0x64
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e207      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2d2:	4b5b      	ldr	r3, [pc, #364]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0f0      	beq.n	800a2c0 <HAL_RCC_OscConfig+0xc0>
 800a2de:	e014      	b.n	800a30a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2e0:	f7fc fbba 	bl	8006a58 <HAL_GetTick>
 800a2e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2e6:	e008      	b.n	800a2fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2e8:	f7fc fbb6 	bl	8006a58 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b64      	cmp	r3, #100	; 0x64
 800a2f4:	d901      	bls.n	800a2fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e1f3      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2fa:	4b51      	ldr	r3, [pc, #324]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1f0      	bne.n	800a2e8 <HAL_RCC_OscConfig+0xe8>
 800a306:	e000      	b.n	800a30a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d063      	beq.n	800a3de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a316:	4b4a      	ldr	r3, [pc, #296]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f003 030c 	and.w	r3, r3, #12
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00b      	beq.n	800a33a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a322:	4b47      	ldr	r3, [pc, #284]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a32a:	2b08      	cmp	r3, #8
 800a32c:	d11c      	bne.n	800a368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a32e:	4b44      	ldr	r3, [pc, #272]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d116      	bne.n	800a368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a33a:	4b41      	ldr	r3, [pc, #260]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d005      	beq.n	800a352 <HAL_RCC_OscConfig+0x152>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d001      	beq.n	800a352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e1c7      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a352:	4b3b      	ldr	r3, [pc, #236]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	4937      	ldr	r1, [pc, #220]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a362:	4313      	orrs	r3, r2
 800a364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a366:	e03a      	b.n	800a3de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d020      	beq.n	800a3b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a370:	4b34      	ldr	r3, [pc, #208]	; (800a444 <HAL_RCC_OscConfig+0x244>)
 800a372:	2201      	movs	r2, #1
 800a374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a376:	f7fc fb6f 	bl	8006a58 <HAL_GetTick>
 800a37a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a37c:	e008      	b.n	800a390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a37e:	f7fc fb6b 	bl	8006a58 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d901      	bls.n	800a390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e1a8      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a390:	4b2b      	ldr	r3, [pc, #172]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0f0      	beq.n	800a37e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a39c:	4b28      	ldr	r3, [pc, #160]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	4925      	ldr	r1, [pc, #148]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	600b      	str	r3, [r1, #0]
 800a3b0:	e015      	b.n	800a3de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3b2:	4b24      	ldr	r3, [pc, #144]	; (800a444 <HAL_RCC_OscConfig+0x244>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b8:	f7fc fb4e 	bl	8006a58 <HAL_GetTick>
 800a3bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3be:	e008      	b.n	800a3d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a3c0:	f7fc fb4a 	bl	8006a58 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e187      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1f0      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0308 	and.w	r3, r3, #8
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d036      	beq.n	800a458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d016      	beq.n	800a420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3f2:	4b15      	ldr	r3, [pc, #84]	; (800a448 <HAL_RCC_OscConfig+0x248>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3f8:	f7fc fb2e 	bl	8006a58 <HAL_GetTick>
 800a3fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a400:	f7fc fb2a 	bl	8006a58 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e167      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a412:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <HAL_RCC_OscConfig+0x240>)
 800a414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0f0      	beq.n	800a400 <HAL_RCC_OscConfig+0x200>
 800a41e:	e01b      	b.n	800a458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a420:	4b09      	ldr	r3, [pc, #36]	; (800a448 <HAL_RCC_OscConfig+0x248>)
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a426:	f7fc fb17 	bl	8006a58 <HAL_GetTick>
 800a42a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a42c:	e00e      	b.n	800a44c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a42e:	f7fc fb13 	bl	8006a58 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d907      	bls.n	800a44c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e150      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
 800a440:	40023800 	.word	0x40023800
 800a444:	42470000 	.word	0x42470000
 800a448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a44c:	4b88      	ldr	r3, [pc, #544]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1ea      	bne.n	800a42e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 8097 	beq.w	800a594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a46a:	4b81      	ldr	r3, [pc, #516]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10f      	bne.n	800a496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]
 800a47a:	4b7d      	ldr	r3, [pc, #500]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47e:	4a7c      	ldr	r2, [pc, #496]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a484:	6413      	str	r3, [r2, #64]	; 0x40
 800a486:	4b7a      	ldr	r3, [pc, #488]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a48e:	60bb      	str	r3, [r7, #8]
 800a490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a492:	2301      	movs	r3, #1
 800a494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a496:	4b77      	ldr	r3, [pc, #476]	; (800a674 <HAL_RCC_OscConfig+0x474>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d118      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a4a2:	4b74      	ldr	r3, [pc, #464]	; (800a674 <HAL_RCC_OscConfig+0x474>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a73      	ldr	r2, [pc, #460]	; (800a674 <HAL_RCC_OscConfig+0x474>)
 800a4a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4ae:	f7fc fad3 	bl	8006a58 <HAL_GetTick>
 800a4b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4b6:	f7fc facf 	bl	8006a58 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e10c      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4c8:	4b6a      	ldr	r3, [pc, #424]	; (800a674 <HAL_RCC_OscConfig+0x474>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0f0      	beq.n	800a4b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d106      	bne.n	800a4ea <HAL_RCC_OscConfig+0x2ea>
 800a4dc:	4b64      	ldr	r3, [pc, #400]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e0:	4a63      	ldr	r2, [pc, #396]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a4e2:	f043 0301 	orr.w	r3, r3, #1
 800a4e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e8:	e01c      	b.n	800a524 <HAL_RCC_OscConfig+0x324>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d10c      	bne.n	800a50c <HAL_RCC_OscConfig+0x30c>
 800a4f2:	4b5f      	ldr	r3, [pc, #380]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	4a5e      	ldr	r2, [pc, #376]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a4f8:	f043 0304 	orr.w	r3, r3, #4
 800a4fc:	6713      	str	r3, [r2, #112]	; 0x70
 800a4fe:	4b5c      	ldr	r3, [pc, #368]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a502:	4a5b      	ldr	r2, [pc, #364]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a504:	f043 0301 	orr.w	r3, r3, #1
 800a508:	6713      	str	r3, [r2, #112]	; 0x70
 800a50a:	e00b      	b.n	800a524 <HAL_RCC_OscConfig+0x324>
 800a50c:	4b58      	ldr	r3, [pc, #352]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a510:	4a57      	ldr	r2, [pc, #348]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a512:	f023 0301 	bic.w	r3, r3, #1
 800a516:	6713      	str	r3, [r2, #112]	; 0x70
 800a518:	4b55      	ldr	r3, [pc, #340]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51c:	4a54      	ldr	r2, [pc, #336]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a51e:	f023 0304 	bic.w	r3, r3, #4
 800a522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d015      	beq.n	800a558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a52c:	f7fc fa94 	bl	8006a58 <HAL_GetTick>
 800a530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a532:	e00a      	b.n	800a54a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a534:	f7fc fa90 	bl	8006a58 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a542:	4293      	cmp	r3, r2
 800a544:	d901      	bls.n	800a54a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e0cb      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a54a:	4b49      	ldr	r3, [pc, #292]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54e:	f003 0302 	and.w	r3, r3, #2
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0ee      	beq.n	800a534 <HAL_RCC_OscConfig+0x334>
 800a556:	e014      	b.n	800a582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a558:	f7fc fa7e 	bl	8006a58 <HAL_GetTick>
 800a55c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a55e:	e00a      	b.n	800a576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a560:	f7fc fa7a 	bl	8006a58 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a56e:	4293      	cmp	r3, r2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e0b5      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a576:	4b3e      	ldr	r3, [pc, #248]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1ee      	bne.n	800a560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d105      	bne.n	800a594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a588:	4b39      	ldr	r3, [pc, #228]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58c:	4a38      	ldr	r2, [pc, #224]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a58e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80a1 	beq.w	800a6e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a59e:	4b34      	ldr	r3, [pc, #208]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 030c 	and.w	r3, r3, #12
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d05c      	beq.n	800a664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d141      	bne.n	800a636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5b2:	4b31      	ldr	r3, [pc, #196]	; (800a678 <HAL_RCC_OscConfig+0x478>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5b8:	f7fc fa4e 	bl	8006a58 <HAL_GetTick>
 800a5bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5be:	e008      	b.n	800a5d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5c0:	f7fc fa4a 	bl	8006a58 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d901      	bls.n	800a5d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e087      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5d2:	4b27      	ldr	r3, [pc, #156]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1f0      	bne.n	800a5c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	69da      	ldr	r2, [r3, #28]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	019b      	lsls	r3, r3, #6
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f4:	085b      	lsrs	r3, r3, #1
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	041b      	lsls	r3, r3, #16
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	061b      	lsls	r3, r3, #24
 800a602:	491b      	ldr	r1, [pc, #108]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a604:	4313      	orrs	r3, r2
 800a606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a608:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <HAL_RCC_OscConfig+0x478>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a60e:	f7fc fa23 	bl	8006a58 <HAL_GetTick>
 800a612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a614:	e008      	b.n	800a628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a616:	f7fc fa1f 	bl	8006a58 <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	2b02      	cmp	r3, #2
 800a622:	d901      	bls.n	800a628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e05c      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d0f0      	beq.n	800a616 <HAL_RCC_OscConfig+0x416>
 800a634:	e054      	b.n	800a6e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a636:	4b10      	ldr	r3, [pc, #64]	; (800a678 <HAL_RCC_OscConfig+0x478>)
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a63c:	f7fc fa0c 	bl	8006a58 <HAL_GetTick>
 800a640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a642:	e008      	b.n	800a656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a644:	f7fc fa08 	bl	8006a58 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e045      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a656:	4b06      	ldr	r3, [pc, #24]	; (800a670 <HAL_RCC_OscConfig+0x470>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1f0      	bne.n	800a644 <HAL_RCC_OscConfig+0x444>
 800a662:	e03d      	b.n	800a6e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d107      	bne.n	800a67c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e038      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
 800a670:	40023800 	.word	0x40023800
 800a674:	40007000 	.word	0x40007000
 800a678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a67c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <HAL_RCC_OscConfig+0x4ec>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d028      	beq.n	800a6dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a694:	429a      	cmp	r2, r3
 800a696:	d121      	bne.n	800a6dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d11a      	bne.n	800a6dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d111      	bne.n	800a6dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d107      	bne.n	800a6dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d001      	beq.n	800a6e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	40023800 	.word	0x40023800

0800a6f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e0cc      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a704:	4b68      	ldr	r3, [pc, #416]	; (800a8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0307 	and.w	r3, r3, #7
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d90c      	bls.n	800a72c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a712:	4b65      	ldr	r3, [pc, #404]	; (800a8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a71a:	4b63      	ldr	r3, [pc, #396]	; (800a8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d001      	beq.n	800a72c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e0b8      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d020      	beq.n	800a77a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a744:	4b59      	ldr	r3, [pc, #356]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	4a58      	ldr	r2, [pc, #352]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a74a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a74e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a75c:	4b53      	ldr	r3, [pc, #332]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4a52      	ldr	r2, [pc, #328]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a768:	4b50      	ldr	r3, [pc, #320]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	494d      	ldr	r1, [pc, #308]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a776:	4313      	orrs	r3, r2
 800a778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d044      	beq.n	800a810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d107      	bne.n	800a79e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a78e:	4b47      	ldr	r3, [pc, #284]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d119      	bne.n	800a7ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e07f      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d003      	beq.n	800a7ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d107      	bne.n	800a7be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7ae:	4b3f      	ldr	r3, [pc, #252]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e06f      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7be:	4b3b      	ldr	r3, [pc, #236]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0302 	and.w	r3, r3, #2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e067      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7ce:	4b37      	ldr	r3, [pc, #220]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f023 0203 	bic.w	r2, r3, #3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4934      	ldr	r1, [pc, #208]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a7e0:	f7fc f93a 	bl	8006a58 <HAL_GetTick>
 800a7e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7e6:	e00a      	b.n	800a7fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7e8:	f7fc f936 	bl	8006a58 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d901      	bls.n	800a7fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e04f      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7fe:	4b2b      	ldr	r3, [pc, #172]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 020c 	and.w	r2, r3, #12
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d1eb      	bne.n	800a7e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a810:	4b25      	ldr	r3, [pc, #148]	; (800a8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d20c      	bcs.n	800a838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a81e:	4b22      	ldr	r3, [pc, #136]	; (800a8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	b2d2      	uxtb	r2, r2
 800a824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a826:	4b20      	ldr	r3, [pc, #128]	; (800a8a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d001      	beq.n	800a838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e032      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b00      	cmp	r3, #0
 800a842:	d008      	beq.n	800a856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a844:	4b19      	ldr	r3, [pc, #100]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	4916      	ldr	r1, [pc, #88]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a852:	4313      	orrs	r3, r2
 800a854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0308 	and.w	r3, r3, #8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d009      	beq.n	800a876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	00db      	lsls	r3, r3, #3
 800a870:	490e      	ldr	r1, [pc, #56]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a872:	4313      	orrs	r3, r2
 800a874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a876:	f000 f821 	bl	800a8bc <HAL_RCC_GetSysClockFreq>
 800a87a:	4602      	mov	r2, r0
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <HAL_RCC_ClockConfig+0x1bc>)
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	091b      	lsrs	r3, r3, #4
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	490a      	ldr	r1, [pc, #40]	; (800a8b0 <HAL_RCC_ClockConfig+0x1c0>)
 800a888:	5ccb      	ldrb	r3, [r1, r3]
 800a88a:	fa22 f303 	lsr.w	r3, r2, r3
 800a88e:	4a09      	ldr	r2, [pc, #36]	; (800a8b4 <HAL_RCC_ClockConfig+0x1c4>)
 800a890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <HAL_RCC_ClockConfig+0x1c8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fc f89a 	bl	80069d0 <HAL_InitTick>

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40023c00 	.word	0x40023c00
 800a8ac:	40023800 	.word	0x40023800
 800a8b0:	08039924 	.word	0x08039924
 800a8b4:	20000224 	.word	0x20000224
 800a8b8:	20000248 	.word	0x20000248

0800a8bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8c0:	b094      	sub	sp, #80	; 0x50
 800a8c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	647b      	str	r3, [r7, #68]	; 0x44
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8d4:	4b79      	ldr	r3, [pc, #484]	; (800aabc <HAL_RCC_GetSysClockFreq+0x200>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f003 030c 	and.w	r3, r3, #12
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d00d      	beq.n	800a8fc <HAL_RCC_GetSysClockFreq+0x40>
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	f200 80e1 	bhi.w	800aaa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x34>
 800a8ea:	2b04      	cmp	r3, #4
 800a8ec:	d003      	beq.n	800a8f6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a8ee:	e0db      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8f0:	4b73      	ldr	r3, [pc, #460]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a8f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a8f4:	e0db      	b.n	800aaae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8f6:	4b73      	ldr	r3, [pc, #460]	; (800aac4 <HAL_RCC_GetSysClockFreq+0x208>)
 800a8f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a8fa:	e0d8      	b.n	800aaae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8fc:	4b6f      	ldr	r3, [pc, #444]	; (800aabc <HAL_RCC_GetSysClockFreq+0x200>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a906:	4b6d      	ldr	r3, [pc, #436]	; (800aabc <HAL_RCC_GetSysClockFreq+0x200>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d063      	beq.n	800a9da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a912:	4b6a      	ldr	r3, [pc, #424]	; (800aabc <HAL_RCC_GetSysClockFreq+0x200>)
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	099b      	lsrs	r3, r3, #6
 800a918:	2200      	movs	r2, #0
 800a91a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a91c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a924:	633b      	str	r3, [r7, #48]	; 0x30
 800a926:	2300      	movs	r3, #0
 800a928:	637b      	str	r3, [r7, #52]	; 0x34
 800a92a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f04f 0100 	mov.w	r1, #0
 800a93a:	0159      	lsls	r1, r3, #5
 800a93c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a940:	0150      	lsls	r0, r2, #5
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4621      	mov	r1, r4
 800a948:	1a51      	subs	r1, r2, r1
 800a94a:	6139      	str	r1, [r7, #16]
 800a94c:	4629      	mov	r1, r5
 800a94e:	eb63 0301 	sbc.w	r3, r3, r1
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a960:	4659      	mov	r1, fp
 800a962:	018b      	lsls	r3, r1, #6
 800a964:	4651      	mov	r1, sl
 800a966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a96a:	4651      	mov	r1, sl
 800a96c:	018a      	lsls	r2, r1, #6
 800a96e:	4651      	mov	r1, sl
 800a970:	ebb2 0801 	subs.w	r8, r2, r1
 800a974:	4659      	mov	r1, fp
 800a976:	eb63 0901 	sbc.w	r9, r3, r1
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	f04f 0300 	mov.w	r3, #0
 800a982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a98a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a98e:	4690      	mov	r8, r2
 800a990:	4699      	mov	r9, r3
 800a992:	4623      	mov	r3, r4
 800a994:	eb18 0303 	adds.w	r3, r8, r3
 800a998:	60bb      	str	r3, [r7, #8]
 800a99a:	462b      	mov	r3, r5
 800a99c:	eb49 0303 	adc.w	r3, r9, r3
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	f04f 0300 	mov.w	r3, #0
 800a9aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	024b      	lsls	r3, r1, #9
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	024a      	lsls	r2, r1, #9
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a9cc:	f7f6 f964 	bl	8000c98 <__aeabi_uldivmod>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9d8:	e058      	b.n	800aa8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9da:	4b38      	ldr	r3, [pc, #224]	; (800aabc <HAL_RCC_GetSysClockFreq+0x200>)
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	099b      	lsrs	r3, r3, #6
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a9ea:	623b      	str	r3, [r7, #32]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a9f4:	4642      	mov	r2, r8
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	f04f 0000 	mov.w	r0, #0
 800a9fc:	f04f 0100 	mov.w	r1, #0
 800aa00:	0159      	lsls	r1, r3, #5
 800aa02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa06:	0150      	lsls	r0, r2, #5
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4641      	mov	r1, r8
 800aa0e:	ebb2 0a01 	subs.w	sl, r2, r1
 800aa12:	4649      	mov	r1, r9
 800aa14:	eb63 0b01 	sbc.w	fp, r3, r1
 800aa18:	f04f 0200 	mov.w	r2, #0
 800aa1c:	f04f 0300 	mov.w	r3, #0
 800aa20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aa24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aa28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aa2c:	ebb2 040a 	subs.w	r4, r2, sl
 800aa30:	eb63 050b 	sbc.w	r5, r3, fp
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	00eb      	lsls	r3, r5, #3
 800aa3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa42:	00e2      	lsls	r2, r4, #3
 800aa44:	4614      	mov	r4, r2
 800aa46:	461d      	mov	r5, r3
 800aa48:	4643      	mov	r3, r8
 800aa4a:	18e3      	adds	r3, r4, r3
 800aa4c:	603b      	str	r3, [r7, #0]
 800aa4e:	464b      	mov	r3, r9
 800aa50:	eb45 0303 	adc.w	r3, r5, r3
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	f04f 0300 	mov.w	r3, #0
 800aa5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aa62:	4629      	mov	r1, r5
 800aa64:	028b      	lsls	r3, r1, #10
 800aa66:	4621      	mov	r1, r4
 800aa68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	028a      	lsls	r2, r1, #10
 800aa70:	4610      	mov	r0, r2
 800aa72:	4619      	mov	r1, r3
 800aa74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa76:	2200      	movs	r2, #0
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	61fa      	str	r2, [r7, #28]
 800aa7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa80:	f7f6 f90a 	bl	8000c98 <__aeabi_uldivmod>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4613      	mov	r3, r2
 800aa8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aa8c:	4b0b      	ldr	r3, [pc, #44]	; (800aabc <HAL_RCC_GetSysClockFreq+0x200>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	0c1b      	lsrs	r3, r3, #16
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	3301      	adds	r3, #1
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800aa9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aaa6:	e002      	b.n	800aaae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aaa8:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x204>)
 800aaaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aaac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aaae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3750      	adds	r7, #80	; 0x50
 800aab4:	46bd      	mov	sp, r7
 800aab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaba:	bf00      	nop
 800aabc:	40023800 	.word	0x40023800
 800aac0:	00f42400 	.word	0x00f42400
 800aac4:	007a1200 	.word	0x007a1200

0800aac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aac8:	b480      	push	{r7}
 800aaca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aacc:	4b03      	ldr	r3, [pc, #12]	; (800aadc <HAL_RCC_GetHCLKFreq+0x14>)
 800aace:	681b      	ldr	r3, [r3, #0]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20000224 	.word	0x20000224

0800aae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aae4:	f7ff fff0 	bl	800aac8 <HAL_RCC_GetHCLKFreq>
 800aae8:	4602      	mov	r2, r0
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	0a9b      	lsrs	r3, r3, #10
 800aaf0:	f003 0307 	and.w	r3, r3, #7
 800aaf4:	4903      	ldr	r1, [pc, #12]	; (800ab04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aaf6:	5ccb      	ldrb	r3, [r1, r3]
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	40023800 	.word	0x40023800
 800ab04:	08039934 	.word	0x08039934

0800ab08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ab0c:	f7ff ffdc 	bl	800aac8 <HAL_RCC_GetHCLKFreq>
 800ab10:	4602      	mov	r2, r0
 800ab12:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	0b5b      	lsrs	r3, r3, #13
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	4903      	ldr	r1, [pc, #12]	; (800ab2c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab1e:	5ccb      	ldrb	r3, [r1, r3]
 800ab20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	40023800 	.word	0x40023800
 800ab2c:	08039934 	.word	0x08039934

0800ab30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e07b      	b.n	800ac3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d108      	bne.n	800ab5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab52:	d009      	beq.n	800ab68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	61da      	str	r2, [r3, #28]
 800ab5a:	e005      	b.n	800ab68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7fa fb90 	bl	80052a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800abb0:	431a      	orrs	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abba:	431a      	orrs	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abd8:	431a      	orrs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abe2:	431a      	orrs	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abec:	ea42 0103 	orr.w	r1, r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	430a      	orrs	r2, r1
 800abfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	0c1b      	lsrs	r3, r3, #16
 800ac06:	f003 0104 	and.w	r1, r3, #4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	f003 0210 	and.w	r2, r3, #16
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69da      	ldr	r2, [r3, #28]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b08c      	sub	sp, #48	; 0x30
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
 800ac4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ac50:	2301      	movs	r3, #1
 800ac52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_SPI_TransmitReceive+0x26>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e18a      	b.n	800af7e <HAL_SPI_TransmitReceive+0x33c>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac70:	f7fb fef2 	bl	8006a58 <HAL_GetTick>
 800ac74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ac86:	887b      	ldrh	r3, [r7, #2]
 800ac88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d00f      	beq.n	800acb2 <HAL_SPI_TransmitReceive+0x70>
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac98:	d107      	bne.n	800acaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d103      	bne.n	800acaa <HAL_SPI_TransmitReceive+0x68>
 800aca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d003      	beq.n	800acb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800acaa:	2302      	movs	r3, #2
 800acac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800acb0:	e15b      	b.n	800af6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d005      	beq.n	800acc4 <HAL_SPI_TransmitReceive+0x82>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <HAL_SPI_TransmitReceive+0x82>
 800acbe:	887b      	ldrh	r3, [r7, #2]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800acca:	e14e      	b.n	800af6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d003      	beq.n	800ace0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2205      	movs	r2, #5
 800acdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	887a      	ldrh	r2, [r7, #2]
 800acf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	887a      	ldrh	r2, [r7, #2]
 800acf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	887a      	ldrh	r2, [r7, #2]
 800ad02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	887a      	ldrh	r2, [r7, #2]
 800ad08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad20:	2b40      	cmp	r3, #64	; 0x40
 800ad22:	d007      	beq.n	800ad34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad3c:	d178      	bne.n	800ae30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <HAL_SPI_TransmitReceive+0x10a>
 800ad46:	8b7b      	ldrh	r3, [r7, #26]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d166      	bne.n	800ae1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad50:	881a      	ldrh	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5c:	1c9a      	adds	r2, r3, #2
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad70:	e053      	b.n	800ae1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d11b      	bne.n	800adb8 <HAL_SPI_TransmitReceive+0x176>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d016      	beq.n	800adb8 <HAL_SPI_TransmitReceive+0x176>
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d113      	bne.n	800adb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	881a      	ldrh	r2, [r3, #0]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	1c9a      	adds	r2, r3, #2
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adaa:	b29b      	uxth	r3, r3
 800adac:	3b01      	subs	r3, #1
 800adae:	b29a      	uxth	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d119      	bne.n	800adfa <HAL_SPI_TransmitReceive+0x1b8>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d014      	beq.n	800adfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68da      	ldr	r2, [r3, #12]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	b292      	uxth	r2, r2
 800addc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	1c9a      	adds	r2, r3, #2
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adec:	b29b      	uxth	r3, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800adf6:	2301      	movs	r3, #1
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800adfa:	f7fb fe2d 	bl	8006a58 <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d807      	bhi.n	800ae1a <HAL_SPI_TransmitReceive+0x1d8>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae10:	d003      	beq.n	800ae1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ae18:	e0a7      	b.n	800af6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1a6      	bne.n	800ad72 <HAL_SPI_TransmitReceive+0x130>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1a1      	bne.n	800ad72 <HAL_SPI_TransmitReceive+0x130>
 800ae2e:	e07c      	b.n	800af2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <HAL_SPI_TransmitReceive+0x1fc>
 800ae38:	8b7b      	ldrh	r3, [r7, #26]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d16b      	bne.n	800af16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	330c      	adds	r3, #12
 800ae48:	7812      	ldrb	r2, [r2, #0]
 800ae4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae64:	e057      	b.n	800af16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d11c      	bne.n	800aeae <HAL_SPI_TransmitReceive+0x26c>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d017      	beq.n	800aeae <HAL_SPI_TransmitReceive+0x26c>
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d114      	bne.n	800aeae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	330c      	adds	r3, #12
 800ae8e:	7812      	ldrb	r2, [r2, #0]
 800ae90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	3b01      	subs	r3, #1
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d119      	bne.n	800aef0 <HAL_SPI_TransmitReceive+0x2ae>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d014      	beq.n	800aef0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	b2d2      	uxtb	r2, r2
 800aed2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aeec:	2301      	movs	r3, #1
 800aeee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aef0:	f7fb fdb2 	bl	8006a58 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d803      	bhi.n	800af08 <HAL_SPI_TransmitReceive+0x2c6>
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d102      	bne.n	800af0e <HAL_SPI_TransmitReceive+0x2cc>
 800af08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d103      	bne.n	800af16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800af14:	e029      	b.n	800af6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1a2      	bne.n	800ae66 <HAL_SPI_TransmitReceive+0x224>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af24:	b29b      	uxth	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d19d      	bne.n	800ae66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 f8b2 	bl	800b098 <SPI_EndRxTxTransaction>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d006      	beq.n	800af48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800af46:	e010      	b.n	800af6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10b      	bne.n	800af68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af50:	2300      	movs	r3, #0
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	e000      	b.n	800af6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800af68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
	...

0800af88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	4613      	mov	r3, r2
 800af96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af98:	f7fb fd5e 	bl	8006a58 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	4413      	add	r3, r2
 800afa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afa8:	f7fb fd56 	bl	8006a58 <HAL_GetTick>
 800afac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afae:	4b39      	ldr	r3, [pc, #228]	; (800b094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	015b      	lsls	r3, r3, #5
 800afb4:	0d1b      	lsrs	r3, r3, #20
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	fb02 f303 	mul.w	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afbe:	e054      	b.n	800b06a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d050      	beq.n	800b06a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afc8:	f7fb fd46 	bl	8006a58 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	69fa      	ldr	r2, [r7, #28]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d902      	bls.n	800afde <SPI_WaitFlagStateUntilTimeout+0x56>
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d13d      	bne.n	800b05a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aff6:	d111      	bne.n	800b01c <SPI_WaitFlagStateUntilTimeout+0x94>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b000:	d004      	beq.n	800b00c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00a:	d107      	bne.n	800b01c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b01a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b024:	d10f      	bne.n	800b046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e017      	b.n	800b08a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3b01      	subs	r3, #1
 800b068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	4013      	ands	r3, r2
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	429a      	cmp	r2, r3
 800b078:	bf0c      	ite	eq
 800b07a:	2301      	moveq	r3, #1
 800b07c:	2300      	movne	r3, #0
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	461a      	mov	r2, r3
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	429a      	cmp	r2, r3
 800b086:	d19b      	bne.n	800afc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000224 	.word	0x20000224

0800b098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b0a4:	4b1b      	ldr	r3, [pc, #108]	; (800b114 <SPI_EndRxTxTransaction+0x7c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1b      	ldr	r2, [pc, #108]	; (800b118 <SPI_EndRxTxTransaction+0x80>)
 800b0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ae:	0d5b      	lsrs	r3, r3, #21
 800b0b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0b4:	fb02 f303 	mul.w	r3, r2, r3
 800b0b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0c2:	d112      	bne.n	800b0ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2180      	movs	r1, #128	; 0x80
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7ff ff5a 	bl	800af88 <SPI_WaitFlagStateUntilTimeout>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d016      	beq.n	800b108 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0de:	f043 0220 	orr.w	r2, r3, #32
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e00f      	b.n	800b10a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b100:	2b80      	cmp	r3, #128	; 0x80
 800b102:	d0f2      	beq.n	800b0ea <SPI_EndRxTxTransaction+0x52>
 800b104:	e000      	b.n	800b108 <SPI_EndRxTxTransaction+0x70>
        break;
 800b106:	bf00      	nop
  }

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	20000224 	.word	0x20000224
 800b118:	165e9f81 	.word	0x165e9f81

0800b11c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e041      	b.n	800b1b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fa f940 	bl	80053c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3304      	adds	r3, #4
 800b158:	4619      	mov	r1, r3
 800b15a:	4610      	mov	r0, r2
 800b15c:	f000 fb24 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d001      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e044      	b.n	800b25e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68da      	ldr	r2, [r3, #12]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f042 0201 	orr.w	r2, r2, #1
 800b1ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1e      	ldr	r2, [pc, #120]	; (800b26c <HAL_TIM_Base_Start_IT+0xb0>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d018      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x6c>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1fe:	d013      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x6c>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a1a      	ldr	r2, [pc, #104]	; (800b270 <HAL_TIM_Base_Start_IT+0xb4>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00e      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x6c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a19      	ldr	r2, [pc, #100]	; (800b274 <HAL_TIM_Base_Start_IT+0xb8>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d009      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x6c>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a17      	ldr	r2, [pc, #92]	; (800b278 <HAL_TIM_Base_Start_IT+0xbc>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d004      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x6c>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a16      	ldr	r2, [pc, #88]	; (800b27c <HAL_TIM_Base_Start_IT+0xc0>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d111      	bne.n	800b24c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b06      	cmp	r3, #6
 800b238:	d010      	beq.n	800b25c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f042 0201 	orr.w	r2, r2, #1
 800b248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b24a:	e007      	b.n	800b25c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0201 	orr.w	r2, r2, #1
 800b25a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	40010000 	.word	0x40010000
 800b270:	40000400 	.word	0x40000400
 800b274:	40000800 	.word	0x40000800
 800b278:	40000c00 	.word	0x40000c00
 800b27c:	40014000 	.word	0x40014000

0800b280 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68da      	ldr	r2, [r3, #12]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0201 	bic.w	r2, r2, #1
 800b296:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6a1a      	ldr	r2, [r3, #32]
 800b29e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10f      	bne.n	800b2c8 <HAL_TIM_Base_Stop_IT+0x48>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6a1a      	ldr	r2, [r3, #32]
 800b2ae:	f240 4344 	movw	r3, #1092	; 0x444
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d107      	bne.n	800b2c8 <HAL_TIM_Base_Stop_IT+0x48>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 0201 	bic.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b086      	sub	sp, #24
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e097      	b.n	800b422 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7fa f816 	bl	8005338 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2202      	movs	r2, #2
 800b310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	6812      	ldr	r2, [r2, #0]
 800b31e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b322:	f023 0307 	bic.w	r3, r3, #7
 800b326:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3304      	adds	r3, #4
 800b330:	4619      	mov	r1, r3
 800b332:	4610      	mov	r0, r2
 800b334:	f000 fa38 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	4313      	orrs	r3, r2
 800b358:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b360:	f023 0303 	bic.w	r3, r3, #3
 800b364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	689a      	ldr	r2, [r3, #8]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	021b      	lsls	r3, r3, #8
 800b370:	4313      	orrs	r3, r2
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	4313      	orrs	r3, r2
 800b376:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b37e:	f023 030c 	bic.w	r3, r3, #12
 800b382:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b38a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b38e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	021b      	lsls	r3, r3, #8
 800b39a:	4313      	orrs	r3, r2
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	011a      	lsls	r2, r3, #4
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	031b      	lsls	r3, r3, #12
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b3bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b3c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b43a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b442:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b44a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b452:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d110      	bne.n	800b47c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d102      	bne.n	800b466 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b460:	7b7b      	ldrb	r3, [r7, #13]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d001      	beq.n	800b46a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e069      	b.n	800b53e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2202      	movs	r2, #2
 800b46e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2202      	movs	r2, #2
 800b476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b47a:	e031      	b.n	800b4e0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d110      	bne.n	800b4a4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d102      	bne.n	800b48e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b488:	7b3b      	ldrb	r3, [r7, #12]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d001      	beq.n	800b492 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e055      	b.n	800b53e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2202      	movs	r2, #2
 800b496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2202      	movs	r2, #2
 800b49e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4a2:	e01d      	b.n	800b4e0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d108      	bne.n	800b4bc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d105      	bne.n	800b4bc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4b0:	7b7b      	ldrb	r3, [r7, #13]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d102      	bne.n	800b4bc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4b6:	7b3b      	ldrb	r3, [r7, #12]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d001      	beq.n	800b4c0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e03e      	b.n	800b53e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <HAL_TIM_Encoder_Start+0xc4>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	2b04      	cmp	r3, #4
 800b4ea:	d008      	beq.n	800b4fe <HAL_TIM_Encoder_Start+0xd4>
 800b4ec:	e00f      	b.n	800b50e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f9d6 	bl	800b8a8 <TIM_CCxChannelCmd>
      break;
 800b4fc:	e016      	b.n	800b52c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2201      	movs	r2, #1
 800b504:	2104      	movs	r1, #4
 800b506:	4618      	mov	r0, r3
 800b508:	f000 f9ce 	bl	800b8a8 <TIM_CCxChannelCmd>
      break;
 800b50c:	e00e      	b.n	800b52c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2201      	movs	r2, #1
 800b514:	2100      	movs	r1, #0
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f9c6 	bl	800b8a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2201      	movs	r2, #1
 800b522:	2104      	movs	r1, #4
 800b524:	4618      	mov	r0, r3
 800b526:	f000 f9bf 	bl	800b8a8 <TIM_CCxChannelCmd>
      break;
 800b52a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f042 0201 	orr.w	r2, r2, #1
 800b53a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b082      	sub	sp, #8
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	f003 0302 	and.w	r3, r3, #2
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d122      	bne.n	800b5a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	2b02      	cmp	r3, #2
 800b568:	d11b      	bne.n	800b5a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f06f 0202 	mvn.w	r2, #2
 800b572:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f8ee 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b58e:	e005      	b.n	800b59c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f8e0 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f8f1 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b04      	cmp	r3, #4
 800b5ae:	d122      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	f003 0304 	and.w	r3, r3, #4
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d11b      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f06f 0204 	mvn.w	r2, #4
 800b5c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f8c4 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b5e2:	e005      	b.n	800b5f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f8b6 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f8c7 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	f003 0308 	and.w	r3, r3, #8
 800b600:	2b08      	cmp	r3, #8
 800b602:	d122      	bne.n	800b64a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f003 0308 	and.w	r3, r3, #8
 800b60e:	2b08      	cmp	r3, #8
 800b610:	d11b      	bne.n	800b64a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f06f 0208 	mvn.w	r2, #8
 800b61a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2204      	movs	r2, #4
 800b620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d003      	beq.n	800b638 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f89a 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b636:	e005      	b.n	800b644 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f88c 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f89d 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	f003 0310 	and.w	r3, r3, #16
 800b654:	2b10      	cmp	r3, #16
 800b656:	d122      	bne.n	800b69e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f003 0310 	and.w	r3, r3, #16
 800b662:	2b10      	cmp	r3, #16
 800b664:	d11b      	bne.n	800b69e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f06f 0210 	mvn.w	r2, #16
 800b66e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2208      	movs	r2, #8
 800b674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f870 	bl	800b76a <HAL_TIM_IC_CaptureCallback>
 800b68a:	e005      	b.n	800b698 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f862 	bl	800b756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f873 	bl	800b77e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d10e      	bne.n	800b6ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d107      	bne.n	800b6ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f06f 0201 	mvn.w	r2, #1
 800b6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7f9 fd3b 	bl	8005140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d4:	2b80      	cmp	r3, #128	; 0x80
 800b6d6:	d10e      	bne.n	800b6f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e2:	2b80      	cmp	r3, #128	; 0x80
 800b6e4:	d107      	bne.n	800b6f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f977 	bl	800b9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b700:	2b40      	cmp	r3, #64	; 0x40
 800b702:	d10e      	bne.n	800b722 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b70e:	2b40      	cmp	r3, #64	; 0x40
 800b710:	d107      	bne.n	800b722 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f838 	bl	800b792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d10e      	bne.n	800b74e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f003 0320 	and.w	r3, r3, #32
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d107      	bne.n	800b74e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f06f 0220 	mvn.w	r2, #32
 800b746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f941 	bl	800b9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b77e:	b480      	push	{r7}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
	...

0800b7a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a34      	ldr	r2, [pc, #208]	; (800b88c <TIM_Base_SetConfig+0xe4>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d00f      	beq.n	800b7e0 <TIM_Base_SetConfig+0x38>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c6:	d00b      	beq.n	800b7e0 <TIM_Base_SetConfig+0x38>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a31      	ldr	r2, [pc, #196]	; (800b890 <TIM_Base_SetConfig+0xe8>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d007      	beq.n	800b7e0 <TIM_Base_SetConfig+0x38>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a30      	ldr	r2, [pc, #192]	; (800b894 <TIM_Base_SetConfig+0xec>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d003      	beq.n	800b7e0 <TIM_Base_SetConfig+0x38>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a2f      	ldr	r2, [pc, #188]	; (800b898 <TIM_Base_SetConfig+0xf0>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d108      	bne.n	800b7f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a25      	ldr	r2, [pc, #148]	; (800b88c <TIM_Base_SetConfig+0xe4>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d01b      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b800:	d017      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a22      	ldr	r2, [pc, #136]	; (800b890 <TIM_Base_SetConfig+0xe8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d013      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a21      	ldr	r2, [pc, #132]	; (800b894 <TIM_Base_SetConfig+0xec>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00f      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a20      	ldr	r2, [pc, #128]	; (800b898 <TIM_Base_SetConfig+0xf0>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d00b      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1f      	ldr	r2, [pc, #124]	; (800b89c <TIM_Base_SetConfig+0xf4>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d007      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a1e      	ldr	r2, [pc, #120]	; (800b8a0 <TIM_Base_SetConfig+0xf8>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d003      	beq.n	800b832 <TIM_Base_SetConfig+0x8a>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a1d      	ldr	r2, [pc, #116]	; (800b8a4 <TIM_Base_SetConfig+0xfc>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d108      	bne.n	800b844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4313      	orrs	r3, r2
 800b842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	4313      	orrs	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689a      	ldr	r2, [r3, #8]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a08      	ldr	r2, [pc, #32]	; (800b88c <TIM_Base_SetConfig+0xe4>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d103      	bne.n	800b878 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	691a      	ldr	r2, [r3, #16]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	615a      	str	r2, [r3, #20]
}
 800b87e:	bf00      	nop
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	40010000 	.word	0x40010000
 800b890:	40000400 	.word	0x40000400
 800b894:	40000800 	.word	0x40000800
 800b898:	40000c00 	.word	0x40000c00
 800b89c:	40014000 	.word	0x40014000
 800b8a0:	40014400 	.word	0x40014400
 800b8a4:	40014800 	.word	0x40014800

0800b8a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f003 031f 	and.w	r3, r3, #31
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a1a      	ldr	r2, [r3, #32]
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	43db      	mvns	r3, r3
 800b8ca:	401a      	ands	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6a1a      	ldr	r2, [r3, #32]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f003 031f 	and.w	r3, r3, #31
 800b8da:	6879      	ldr	r1, [r7, #4]
 800b8dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e0:	431a      	orrs	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	621a      	str	r2, [r3, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
	...

0800b8f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b904:	2b01      	cmp	r3, #1
 800b906:	d101      	bne.n	800b90c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b908:	2302      	movs	r3, #2
 800b90a:	e050      	b.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2202      	movs	r2, #2
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1c      	ldr	r2, [pc, #112]	; (800b9bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d018      	beq.n	800b982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b958:	d013      	beq.n	800b982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a18      	ldr	r2, [pc, #96]	; (800b9c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d00e      	beq.n	800b982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a16      	ldr	r2, [pc, #88]	; (800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d009      	beq.n	800b982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a15      	ldr	r2, [pc, #84]	; (800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d004      	beq.n	800b982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a13      	ldr	r2, [pc, #76]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d10c      	bne.n	800b99c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	4313      	orrs	r3, r2
 800b992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	40010000 	.word	0x40010000
 800b9c0:	40000400 	.word	0x40000400
 800b9c4:	40000800 	.word	0x40000800
 800b9c8:	40000c00 	.word	0x40000c00
 800b9cc:	40014000 	.word	0x40014000

0800b9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e03f      	b.n	800ba8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7f9 fcfa 	bl	8005418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2224      	movs	r2, #36	; 0x24
 800ba28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68da      	ldr	r2, [r3, #12]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f001 f80b 	bl	800ca58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	691a      	ldr	r2, [r3, #16]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	695a      	ldr	r2, [r3, #20]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68da      	ldr	r2, [r3, #12]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b08a      	sub	sp, #40	; 0x28
 800ba96:	af02      	add	r7, sp, #8
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	603b      	str	r3, [r7, #0]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b20      	cmp	r3, #32
 800bab0:	d17c      	bne.n	800bbac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <HAL_UART_Transmit+0x2c>
 800bab8:	88fb      	ldrh	r3, [r7, #6]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e075      	b.n	800bbae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d101      	bne.n	800bad0 <HAL_UART_Transmit+0x3e>
 800bacc:	2302      	movs	r3, #2
 800bace:	e06e      	b.n	800bbae <HAL_UART_Transmit+0x11c>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2221      	movs	r2, #33	; 0x21
 800bae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bae6:	f7fa ffb7 	bl	8006a58 <HAL_GetTick>
 800baea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	88fa      	ldrh	r2, [r7, #6]
 800baf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	88fa      	ldrh	r2, [r7, #6]
 800baf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb00:	d108      	bne.n	800bb14 <HAL_UART_Transmit+0x82>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	61bb      	str	r3, [r7, #24]
 800bb12:	e003      	b.n	800bb1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bb24:	e02a      	b.n	800bb7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2180      	movs	r1, #128	; 0x80
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fcc3 	bl	800c4bc <UART_WaitOnFlagUntilTimeout>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e036      	b.n	800bbae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10b      	bne.n	800bb5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	3302      	adds	r3, #2
 800bb5a:	61bb      	str	r3, [r7, #24]
 800bb5c:	e007      	b.n	800bb6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1cf      	bne.n	800bb26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2140      	movs	r1, #64	; 0x40
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 fc93 	bl	800c4bc <UART_WaitOnFlagUntilTimeout>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e006      	b.n	800bbae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2220      	movs	r2, #32
 800bba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	e000      	b.n	800bbae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bbac:	2302      	movs	r3, #2
  }
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3720      	adds	r7, #32
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b08a      	sub	sp, #40	; 0x28
 800bbba:	af02      	add	r7, sp, #8
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	60b9      	str	r1, [r7, #8]
 800bbc0:	603b      	str	r3, [r7, #0]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	f040 808c 	bne.w	800bcf0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <HAL_UART_Receive+0x2e>
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e084      	b.n	800bcf2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_UART_Receive+0x40>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e07d      	b.n	800bcf2 <HAL_UART_Receive+0x13c>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2222      	movs	r2, #34	; 0x22
 800bc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc12:	f7fa ff21 	bl	8006a58 <HAL_GetTick>
 800bc16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	88fa      	ldrh	r2, [r7, #6]
 800bc1c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	88fa      	ldrh	r2, [r7, #6]
 800bc22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc2c:	d108      	bne.n	800bc40 <HAL_UART_Receive+0x8a>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d104      	bne.n	800bc40 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	61bb      	str	r3, [r7, #24]
 800bc3e:	e003      	b.n	800bc48 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bc50:	e043      	b.n	800bcda <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2120      	movs	r1, #32
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 fc2d 	bl	800c4bc <UART_WaitOnFlagUntilTimeout>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e042      	b.n	800bcf2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10c      	bne.n	800bc8c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	3302      	adds	r3, #2
 800bc88:	61bb      	str	r3, [r7, #24]
 800bc8a:	e01f      	b.n	800bccc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc94:	d007      	beq.n	800bca6 <HAL_UART_Receive+0xf0>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10a      	bne.n	800bcb4 <HAL_UART_Receive+0xfe>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	e008      	b.n	800bcc6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1b6      	bne.n	800bc52 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2220      	movs	r2, #32
 800bce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e000      	b.n	800bcf2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800bcf0:	2302      	movs	r3, #2
  }
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	60b9      	str	r1, [r7, #8]
 800bd04:	4613      	mov	r3, r2
 800bd06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d11d      	bne.n	800bd50 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <HAL_UART_Receive_DMA+0x26>
 800bd1a:	88fb      	ldrh	r3, [r7, #6]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e016      	b.n	800bd52 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d101      	bne.n	800bd32 <HAL_UART_Receive_DMA+0x38>
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e00f      	b.n	800bd52 <HAL_UART_Receive_DMA+0x58>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd40:	88fb      	ldrh	r3, [r7, #6]
 800bd42:	461a      	mov	r2, r3
 800bd44:	68b9      	ldr	r1, [r7, #8]
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 fc26 	bl	800c598 <UART_Start_Receive_DMA>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	e000      	b.n	800bd52 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bd50:	2302      	movs	r3, #2
  }
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b0ba      	sub	sp, #232	; 0xe8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd92:	f003 030f 	and.w	r3, r3, #15
 800bd96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bd9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10f      	bne.n	800bdc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda6:	f003 0320 	and.w	r3, r3, #32
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d009      	beq.n	800bdc2 <HAL_UART_IRQHandler+0x66>
 800bdae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdb2:	f003 0320 	and.w	r3, r3, #32
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d003      	beq.n	800bdc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fd91 	bl	800c8e2 <UART_Receive_IT>
      return;
 800bdc0:	e256      	b.n	800c270 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bdc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 80de 	beq.w	800bf88 <HAL_UART_IRQHandler+0x22c>
 800bdcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d106      	bne.n	800bde6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bdd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bddc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 80d1 	beq.w	800bf88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <HAL_UART_IRQHandler+0xae>
 800bdf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d005      	beq.n	800be0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be02:	f043 0201 	orr.w	r2, r3, #1
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <HAL_UART_IRQHandler+0xd2>
 800be16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	f043 0202 	orr.w	r2, r3, #2
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <HAL_UART_IRQHandler+0xf6>
 800be3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be3e:	f003 0301 	and.w	r3, r3, #1
 800be42:	2b00      	cmp	r3, #0
 800be44:	d005      	beq.n	800be52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f043 0204 	orr.w	r2, r3, #4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be56:	f003 0308 	and.w	r3, r3, #8
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d011      	beq.n	800be82 <HAL_UART_IRQHandler+0x126>
 800be5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be62:	f003 0320 	and.w	r3, r3, #32
 800be66:	2b00      	cmp	r3, #0
 800be68:	d105      	bne.n	800be76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	f043 0208 	orr.w	r2, r3, #8
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 81ed 	beq.w	800c266 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be90:	f003 0320 	and.w	r3, r3, #32
 800be94:	2b00      	cmp	r3, #0
 800be96:	d008      	beq.n	800beaa <HAL_UART_IRQHandler+0x14e>
 800be98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be9c:	f003 0320 	and.w	r3, r3, #32
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fd1c 	bl	800c8e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	bf0c      	ite	eq
 800beb8:	2301      	moveq	r3, #1
 800beba:	2300      	movne	r3, #0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	f003 0308 	and.w	r3, r3, #8
 800beca:	2b00      	cmp	r3, #0
 800becc:	d103      	bne.n	800bed6 <HAL_UART_IRQHandler+0x17a>
 800bece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d04f      	beq.n	800bf76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fc24 	bl	800c724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee6:	2b40      	cmp	r3, #64	; 0x40
 800bee8:	d141      	bne.n	800bf6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3314      	adds	r3, #20
 800bef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bef8:	e853 3f00 	ldrex	r3, [r3]
 800befc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3314      	adds	r3, #20
 800bf12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf26:	e841 2300 	strex	r3, r2, [r1]
 800bf2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1d9      	bne.n	800beea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d013      	beq.n	800bf66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	4a7d      	ldr	r2, [pc, #500]	; (800c138 <HAL_UART_IRQHandler+0x3dc>)
 800bf44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fb f83c 	bl	8006fc8 <HAL_DMA_Abort_IT>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d016      	beq.n	800bf84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bf60:	4610      	mov	r0, r2
 800bf62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf64:	e00e      	b.n	800bf84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f99a 	bl	800c2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf6c:	e00a      	b.n	800bf84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f996 	bl	800c2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf74:	e006      	b.n	800bf84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f992 	bl	800c2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bf82:	e170      	b.n	800c266 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf84:	bf00      	nop
    return;
 800bf86:	e16e      	b.n	800c266 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	f040 814a 	bne.w	800c226 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf96:	f003 0310 	and.w	r3, r3, #16
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 8143 	beq.w	800c226 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bfa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa4:	f003 0310 	and.w	r3, r3, #16
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 813c 	beq.w	800c226 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60bb      	str	r3, [r7, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60bb      	str	r3, [r7, #8]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	60bb      	str	r3, [r7, #8]
 800bfc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfce:	2b40      	cmp	r3, #64	; 0x40
 800bfd0:	f040 80b4 	bne.w	800c13c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 8140 	beq.w	800c26a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bff2:	429a      	cmp	r2, r3
 800bff4:	f080 8139 	bcs.w	800c26a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bffe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c00a:	f000 8088 	beq.w	800c11e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	330c      	adds	r3, #12
 800c014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	330c      	adds	r3, #12
 800c036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c03a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c03e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c04a:	e841 2300 	strex	r3, r2, [r1]
 800c04e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1d9      	bne.n	800c00e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3314      	adds	r3, #20
 800c060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c06a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c06c:	f023 0301 	bic.w	r3, r3, #1
 800c070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3314      	adds	r3, #20
 800c07a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c07e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c08a:	e841 2300 	strex	r3, r2, [r1]
 800c08e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1e1      	bne.n	800c05a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3314      	adds	r3, #20
 800c09c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3314      	adds	r3, #20
 800c0b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c0ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c0bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e3      	bne.n	800c096 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e6:	e853 3f00 	ldrex	r3, [r3]
 800c0ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ee:	f023 0310 	bic.w	r3, r3, #16
 800c0f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c100:	65ba      	str	r2, [r7, #88]	; 0x58
 800c102:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c108:	e841 2300 	strex	r3, r2, [r1]
 800c10c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1e3      	bne.n	800c0dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fa fee5 	bl	8006ee8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c126:	b29b      	uxth	r3, r3
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f8c0 	bl	800c2b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c134:	e099      	b.n	800c26a <HAL_UART_IRQHandler+0x50e>
 800c136:	bf00      	nop
 800c138:	0800c7eb 	.word	0x0800c7eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c144:	b29b      	uxth	r3, r3
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c150:	b29b      	uxth	r3, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 808b 	beq.w	800c26e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 8086 	beq.w	800c26e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	330c      	adds	r3, #12
 800c168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	330c      	adds	r3, #12
 800c182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c186:	647a      	str	r2, [r7, #68]	; 0x44
 800c188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c18c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e3      	bne.n	800c162 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3314      	adds	r3, #20
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	e853 3f00 	ldrex	r3, [r3]
 800c1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	f023 0301 	bic.w	r3, r3, #1
 800c1b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c1be:	633a      	str	r2, [r7, #48]	; 0x30
 800c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1c6:	e841 2300 	strex	r3, r2, [r1]
 800c1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1e3      	bne.n	800c19a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2220      	movs	r2, #32
 800c1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	330c      	adds	r3, #12
 800c1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f023 0310 	bic.w	r3, r3, #16
 800c1f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	330c      	adds	r3, #12
 800c200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c204:	61fa      	str	r2, [r7, #28]
 800c206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c208:	69b9      	ldr	r1, [r7, #24]
 800c20a:	69fa      	ldr	r2, [r7, #28]
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	617b      	str	r3, [r7, #20]
   return(result);
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1e3      	bne.n	800c1e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f848 	bl	800c2b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c224:	e023      	b.n	800c26e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d009      	beq.n	800c246 <HAL_UART_IRQHandler+0x4ea>
 800c232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fae7 	bl	800c812 <UART_Transmit_IT>
    return;
 800c244:	e014      	b.n	800c270 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00e      	beq.n	800c270 <HAL_UART_IRQHandler+0x514>
 800c252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d008      	beq.n	800c270 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fb27 	bl	800c8b2 <UART_EndTransmit_IT>
    return;
 800c264:	e004      	b.n	800c270 <HAL_UART_IRQHandler+0x514>
    return;
 800c266:	bf00      	nop
 800c268:	e002      	b.n	800c270 <HAL_UART_IRQHandler+0x514>
      return;
 800c26a:	bf00      	nop
 800c26c:	e000      	b.n	800c270 <HAL_UART_IRQHandler+0x514>
      return;
 800c26e:	bf00      	nop
  }
}
 800c270:	37e8      	adds	r7, #232	; 0xe8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop

0800c278 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b09c      	sub	sp, #112	; 0x70
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d172      	bne.n	800c3ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c2e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	330c      	adds	r3, #12
 800c2f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c304:	66bb      	str	r3, [r7, #104]	; 0x68
 800c306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	330c      	adds	r3, #12
 800c30c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c30e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c310:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c316:	e841 2300 	strex	r3, r2, [r1]
 800c31a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1e5      	bne.n	800c2ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3314      	adds	r3, #20
 800c328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32c:	e853 3f00 	ldrex	r3, [r3]
 800c330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c334:	f023 0301 	bic.w	r3, r3, #1
 800c338:	667b      	str	r3, [r7, #100]	; 0x64
 800c33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3314      	adds	r3, #20
 800c340:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c342:	647a      	str	r2, [r7, #68]	; 0x44
 800c344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e5      	bne.n	800c322 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3314      	adds	r3, #20
 800c35c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	e853 3f00 	ldrex	r3, [r3]
 800c364:	623b      	str	r3, [r7, #32]
   return(result);
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c36c:	663b      	str	r3, [r7, #96]	; 0x60
 800c36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3314      	adds	r3, #20
 800c374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c376:	633a      	str	r2, [r7, #48]	; 0x30
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37e:	e841 2300 	strex	r3, r2, [r1]
 800c382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e5      	bne.n	800c356 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c38c:	2220      	movs	r2, #32
 800c38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c396:	2b01      	cmp	r3, #1
 800c398:	d119      	bne.n	800c3ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	330c      	adds	r3, #12
 800c3a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	e853 3f00 	ldrex	r3, [r3]
 800c3a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f023 0310 	bic.w	r3, r3, #16
 800c3b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	330c      	adds	r3, #12
 800c3b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3ba:	61fa      	str	r2, [r7, #28]
 800c3bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3be:	69b9      	ldr	r1, [r7, #24]
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	e841 2300 	strex	r3, r2, [r1]
 800c3c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1e5      	bne.n	800c39a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d106      	bne.n	800c3e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c3de:	f7ff ff69 	bl	800c2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3e2:	e002      	b.n	800c3ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c3e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c3e6:	f7f8 fec3 	bl	8005170 <HAL_UART_RxCpltCallback>
}
 800c3ea:	bf00      	nop
 800c3ec:	3770      	adds	r7, #112	; 0x70
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c404:	2b01      	cmp	r3, #1
 800c406:	d108      	bne.n	800c41a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c40c:	085b      	lsrs	r3, r3, #1
 800c40e:	b29b      	uxth	r3, r3
 800c410:	4619      	mov	r1, r3
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7ff ff4e 	bl	800c2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c418:	e002      	b.n	800c420 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff ff36 	bl	800c28c <HAL_UART_RxHalfCpltCallback>
}
 800c420:	bf00      	nop
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c430:	2300      	movs	r3, #0
 800c432:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c438:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c444:	2b80      	cmp	r3, #128	; 0x80
 800c446:	bf0c      	ite	eq
 800c448:	2301      	moveq	r3, #1
 800c44a:	2300      	movne	r3, #0
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b21      	cmp	r3, #33	; 0x21
 800c45a:	d108      	bne.n	800c46e <UART_DMAError+0x46>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	2200      	movs	r2, #0
 800c466:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f000 f933 	bl	800c6d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c478:	2b40      	cmp	r3, #64	; 0x40
 800c47a:	bf0c      	ite	eq
 800c47c:	2301      	moveq	r3, #1
 800c47e:	2300      	movne	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b22      	cmp	r3, #34	; 0x22
 800c48e:	d108      	bne.n	800c4a2 <UART_DMAError+0x7a>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d005      	beq.n	800c4a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c49c:	68b8      	ldr	r0, [r7, #8]
 800c49e:	f000 f941 	bl	800c724 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a6:	f043 0210 	orr.w	r2, r3, #16
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4ae:	68b8      	ldr	r0, [r7, #8]
 800c4b0:	f7ff fef6 	bl	800c2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4b4:	bf00      	nop
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b090      	sub	sp, #64	; 0x40
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	603b      	str	r3, [r7, #0]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4cc:	e050      	b.n	800c570 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d4:	d04c      	beq.n	800c570 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <UART_WaitOnFlagUntilTimeout+0x30>
 800c4dc:	f7fa fabc 	bl	8006a58 <HAL_GetTick>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d241      	bcs.n	800c570 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	330c      	adds	r3, #12
 800c4f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	330c      	adds	r3, #12
 800c50a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c50c:	637a      	str	r2, [r7, #52]	; 0x34
 800c50e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c514:	e841 2300 	strex	r3, r2, [r1]
 800c518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e5      	bne.n	800c4ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3314      	adds	r3, #20
 800c526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	e853 3f00 	ldrex	r3, [r3]
 800c52e:	613b      	str	r3, [r7, #16]
   return(result);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f023 0301 	bic.w	r3, r3, #1
 800c536:	63bb      	str	r3, [r7, #56]	; 0x38
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3314      	adds	r3, #20
 800c53e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c540:	623a      	str	r2, [r7, #32]
 800c542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c544:	69f9      	ldr	r1, [r7, #28]
 800c546:	6a3a      	ldr	r2, [r7, #32]
 800c548:	e841 2300 	strex	r3, r2, [r1]
 800c54c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1e5      	bne.n	800c520 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2220      	movs	r2, #32
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2220      	movs	r2, #32
 800c560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e00f      	b.n	800c590 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4013      	ands	r3, r2
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	bf0c      	ite	eq
 800c580:	2301      	moveq	r3, #1
 800c582:	2300      	movne	r3, #0
 800c584:	b2db      	uxtb	r3, r3
 800c586:	461a      	mov	r2, r3
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d09f      	beq.n	800c4ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3740      	adds	r7, #64	; 0x40
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b098      	sub	sp, #96	; 0x60
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	88fa      	ldrh	r2, [r7, #6]
 800c5b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2222      	movs	r2, #34	; 0x22
 800c5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c4:	4a40      	ldr	r2, [pc, #256]	; (800c6c8 <UART_Start_Receive_DMA+0x130>)
 800c5c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5cc:	4a3f      	ldr	r2, [pc, #252]	; (800c6cc <UART_Start_Receive_DMA+0x134>)
 800c5ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	4a3e      	ldr	r2, [pc, #248]	; (800c6d0 <UART_Start_Receive_DMA+0x138>)
 800c5d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5dc:	2200      	movs	r2, #0
 800c5de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	88fb      	ldrh	r3, [r7, #6]
 800c5f8:	f7fa fc1e 	bl	8006e38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	613b      	str	r3, [r7, #16]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	613b      	str	r3, [r7, #16]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	613b      	str	r3, [r7, #16]
 800c610:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d019      	beq.n	800c656 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	330c      	adds	r3, #12
 800c628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c638:	65bb      	str	r3, [r7, #88]	; 0x58
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	330c      	adds	r3, #12
 800c640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c642:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c644:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e5      	bne.n	800c622 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3314      	adds	r3, #20
 800c65c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	e853 3f00 	ldrex	r3, [r3]
 800c664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	f043 0301 	orr.w	r3, r3, #1
 800c66c:	657b      	str	r3, [r7, #84]	; 0x54
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3314      	adds	r3, #20
 800c674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c676:	63ba      	str	r2, [r7, #56]	; 0x38
 800c678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c67e:	e841 2300 	strex	r3, r2, [r1]
 800c682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1e5      	bne.n	800c656 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3314      	adds	r3, #20
 800c690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	e853 3f00 	ldrex	r3, [r3]
 800c698:	617b      	str	r3, [r7, #20]
   return(result);
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	3314      	adds	r3, #20
 800c6a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6aa:	627a      	str	r2, [r7, #36]	; 0x24
 800c6ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ae:	6a39      	ldr	r1, [r7, #32]
 800c6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6b2:	e841 2300 	strex	r3, r2, [r1]
 800c6b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1e5      	bne.n	800c68a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3760      	adds	r7, #96	; 0x60
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	0800c2cd 	.word	0x0800c2cd
 800c6cc:	0800c3f3 	.word	0x0800c3f3
 800c6d0:	0800c429 	.word	0x0800c429

0800c6d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b089      	sub	sp, #36	; 0x24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	330c      	adds	r3, #12
 800c6e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	e853 3f00 	ldrex	r3, [r3]
 800c6ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c6f2:	61fb      	str	r3, [r7, #28]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	330c      	adds	r3, #12
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	61ba      	str	r2, [r7, #24]
 800c6fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c700:	6979      	ldr	r1, [r7, #20]
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	e841 2300 	strex	r3, r2, [r1]
 800c708:	613b      	str	r3, [r7, #16]
   return(result);
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1e5      	bne.n	800c6dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2220      	movs	r2, #32
 800c714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c718:	bf00      	nop
 800c71a:	3724      	adds	r7, #36	; 0x24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c724:	b480      	push	{r7}
 800c726:	b095      	sub	sp, #84	; 0x54
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	330c      	adds	r3, #12
 800c732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c736:	e853 3f00 	ldrex	r3, [r3]
 800c73a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c742:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	330c      	adds	r3, #12
 800c74a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c74c:	643a      	str	r2, [r7, #64]	; 0x40
 800c74e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c754:	e841 2300 	strex	r3, r2, [r1]
 800c758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e5      	bne.n	800c72c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3314      	adds	r3, #20
 800c766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	e853 3f00 	ldrex	r3, [r3]
 800c76e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	f023 0301 	bic.w	r3, r3, #1
 800c776:	64bb      	str	r3, [r7, #72]	; 0x48
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3314      	adds	r3, #20
 800c77e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c780:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c788:	e841 2300 	strex	r3, r2, [r1]
 800c78c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e5      	bne.n	800c760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d119      	bne.n	800c7d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	330c      	adds	r3, #12
 800c7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f023 0310 	bic.w	r3, r3, #16
 800c7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	330c      	adds	r3, #12
 800c7ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7bc:	61ba      	str	r2, [r7, #24]
 800c7be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c0:	6979      	ldr	r1, [r7, #20]
 800c7c2:	69ba      	ldr	r2, [r7, #24]
 800c7c4:	e841 2300 	strex	r3, r2, [r1]
 800c7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e5      	bne.n	800c79c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2220      	movs	r2, #32
 800c7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c7de:	bf00      	nop
 800c7e0:	3754      	adds	r7, #84	; 0x54
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff fd4b 	bl	800c2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c80a:	bf00      	nop
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b21      	cmp	r3, #33	; 0x21
 800c824:	d13e      	bne.n	800c8a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c82e:	d114      	bne.n	800c85a <UART_Transmit_IT+0x48>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d110      	bne.n	800c85a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	461a      	mov	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c84c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	1c9a      	adds	r2, r3, #2
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	621a      	str	r2, [r3, #32]
 800c858:	e008      	b.n	800c86c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a1b      	ldr	r3, [r3, #32]
 800c85e:	1c59      	adds	r1, r3, #1
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	6211      	str	r1, [r2, #32]
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c870:	b29b      	uxth	r3, r3
 800c872:	3b01      	subs	r3, #1
 800c874:	b29b      	uxth	r3, r3
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4619      	mov	r1, r3
 800c87a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10f      	bne.n	800c8a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c88e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	68da      	ldr	r2, [r3, #12]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c89e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e000      	b.n	800c8a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c8a4:	2302      	movs	r3, #2
  }
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68da      	ldr	r2, [r3, #12]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff fcd0 	bl	800c278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b08c      	sub	sp, #48	; 0x30
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b22      	cmp	r3, #34	; 0x22
 800c8f4:	f040 80ab 	bne.w	800ca4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c900:	d117      	bne.n	800c932 <UART_Receive_IT+0x50>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d113      	bne.n	800c932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c912:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c920:	b29a      	uxth	r2, r3
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c92a:	1c9a      	adds	r2, r3, #2
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	629a      	str	r2, [r3, #40]	; 0x28
 800c930:	e026      	b.n	800c980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c936:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c938:	2300      	movs	r3, #0
 800c93a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c944:	d007      	beq.n	800c956 <UART_Receive_IT+0x74>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10a      	bne.n	800c964 <UART_Receive_IT+0x82>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	701a      	strb	r2, [r3, #0]
 800c962:	e008      	b.n	800c976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c970:	b2da      	uxtb	r2, r3
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c984:	b29b      	uxth	r3, r3
 800c986:	3b01      	subs	r3, #1
 800c988:	b29b      	uxth	r3, r3
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	4619      	mov	r1, r3
 800c98e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c990:	2b00      	cmp	r3, #0
 800c992:	d15a      	bne.n	800ca4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f022 0220 	bic.w	r2, r2, #32
 800c9a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68da      	ldr	r2, [r3, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c9b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	695a      	ldr	r2, [r3, #20]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f022 0201 	bic.w	r2, r2, #1
 800c9c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d135      	bne.n	800ca40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	330c      	adds	r3, #12
 800c9e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	f023 0310 	bic.w	r3, r3, #16
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	330c      	adds	r3, #12
 800c9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9fa:	623a      	str	r2, [r7, #32]
 800c9fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fe:	69f9      	ldr	r1, [r7, #28]
 800ca00:	6a3a      	ldr	r2, [r7, #32]
 800ca02:	e841 2300 	strex	r3, r2, [r1]
 800ca06:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e5      	bne.n	800c9da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f003 0310 	and.w	r3, r3, #16
 800ca18:	2b10      	cmp	r3, #16
 800ca1a:	d10a      	bne.n	800ca32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff fc3b 	bl	800c2b4 <HAL_UARTEx_RxEventCallback>
 800ca3e:	e002      	b.n	800ca46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7f8 fb95 	bl	8005170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	e002      	b.n	800ca50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e000      	b.n	800ca50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ca4e:	2302      	movs	r3, #2
  }
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3730      	adds	r7, #48	; 0x30
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca5c:	b0c0      	sub	sp, #256	; 0x100
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ca70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca74:	68d9      	ldr	r1, [r3, #12]
 800ca76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	ea40 0301 	orr.w	r3, r0, r1
 800ca80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ca82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca86:	689a      	ldr	r2, [r3, #8]
 800ca88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	431a      	orrs	r2, r3
 800ca90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	431a      	orrs	r2, r3
 800ca98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800caa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cab0:	f021 010c 	bic.w	r1, r1, #12
 800cab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cabe:	430b      	orrs	r3, r1
 800cac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad2:	6999      	ldr	r1, [r3, #24]
 800cad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	ea40 0301 	orr.w	r3, r0, r1
 800cade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	4b8f      	ldr	r3, [pc, #572]	; (800cd24 <UART_SetConfig+0x2cc>)
 800cae8:	429a      	cmp	r2, r3
 800caea:	d005      	beq.n	800caf8 <UART_SetConfig+0xa0>
 800caec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	4b8d      	ldr	r3, [pc, #564]	; (800cd28 <UART_SetConfig+0x2d0>)
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d104      	bne.n	800cb02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800caf8:	f7fe f806 	bl	800ab08 <HAL_RCC_GetPCLK2Freq>
 800cafc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cb00:	e003      	b.n	800cb0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb02:	f7fd ffed 	bl	800aae0 <HAL_RCC_GetPCLK1Freq>
 800cb06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb0e:	69db      	ldr	r3, [r3, #28]
 800cb10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb14:	f040 810c 	bne.w	800cd30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cb26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	1891      	adds	r1, r2, r2
 800cb30:	65b9      	str	r1, [r7, #88]	; 0x58
 800cb32:	415b      	adcs	r3, r3
 800cb34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	eb12 0801 	adds.w	r8, r2, r1
 800cb40:	4629      	mov	r1, r5
 800cb42:	eb43 0901 	adc.w	r9, r3, r1
 800cb46:	f04f 0200 	mov.w	r2, #0
 800cb4a:	f04f 0300 	mov.w	r3, #0
 800cb4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb5a:	4690      	mov	r8, r2
 800cb5c:	4699      	mov	r9, r3
 800cb5e:	4623      	mov	r3, r4
 800cb60:	eb18 0303 	adds.w	r3, r8, r3
 800cb64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cb68:	462b      	mov	r3, r5
 800cb6a:	eb49 0303 	adc.w	r3, r9, r3
 800cb6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cb72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cb82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cb86:	460b      	mov	r3, r1
 800cb88:	18db      	adds	r3, r3, r3
 800cb8a:	653b      	str	r3, [r7, #80]	; 0x50
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	eb42 0303 	adc.w	r3, r2, r3
 800cb92:	657b      	str	r3, [r7, #84]	; 0x54
 800cb94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cb98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cb9c:	f7f4 f87c 	bl	8000c98 <__aeabi_uldivmod>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4b61      	ldr	r3, [pc, #388]	; (800cd2c <UART_SetConfig+0x2d4>)
 800cba6:	fba3 2302 	umull	r2, r3, r3, r2
 800cbaa:	095b      	lsrs	r3, r3, #5
 800cbac:	011c      	lsls	r4, r3, #4
 800cbae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cbbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cbc0:	4642      	mov	r2, r8
 800cbc2:	464b      	mov	r3, r9
 800cbc4:	1891      	adds	r1, r2, r2
 800cbc6:	64b9      	str	r1, [r7, #72]	; 0x48
 800cbc8:	415b      	adcs	r3, r3
 800cbca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	eb12 0a01 	adds.w	sl, r2, r1
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	eb43 0b01 	adc.w	fp, r3, r1
 800cbdc:	f04f 0200 	mov.w	r2, #0
 800cbe0:	f04f 0300 	mov.w	r3, #0
 800cbe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cbe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cbec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbf0:	4692      	mov	sl, r2
 800cbf2:	469b      	mov	fp, r3
 800cbf4:	4643      	mov	r3, r8
 800cbf6:	eb1a 0303 	adds.w	r3, sl, r3
 800cbfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cbfe:	464b      	mov	r3, r9
 800cc00:	eb4b 0303 	adc.w	r3, fp, r3
 800cc04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cc08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cc18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	18db      	adds	r3, r3, r3
 800cc20:	643b      	str	r3, [r7, #64]	; 0x40
 800cc22:	4613      	mov	r3, r2
 800cc24:	eb42 0303 	adc.w	r3, r2, r3
 800cc28:	647b      	str	r3, [r7, #68]	; 0x44
 800cc2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cc32:	f7f4 f831 	bl	8000c98 <__aeabi_uldivmod>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	4b3b      	ldr	r3, [pc, #236]	; (800cd2c <UART_SetConfig+0x2d4>)
 800cc3e:	fba3 2301 	umull	r2, r3, r3, r1
 800cc42:	095b      	lsrs	r3, r3, #5
 800cc44:	2264      	movs	r2, #100	; 0x64
 800cc46:	fb02 f303 	mul.w	r3, r2, r3
 800cc4a:	1acb      	subs	r3, r1, r3
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cc52:	4b36      	ldr	r3, [pc, #216]	; (800cd2c <UART_SetConfig+0x2d4>)
 800cc54:	fba3 2302 	umull	r2, r3, r3, r2
 800cc58:	095b      	lsrs	r3, r3, #5
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc60:	441c      	add	r4, r3
 800cc62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc66:	2200      	movs	r2, #0
 800cc68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cc70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cc74:	4642      	mov	r2, r8
 800cc76:	464b      	mov	r3, r9
 800cc78:	1891      	adds	r1, r2, r2
 800cc7a:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc7c:	415b      	adcs	r3, r3
 800cc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc84:	4641      	mov	r1, r8
 800cc86:	1851      	adds	r1, r2, r1
 800cc88:	6339      	str	r1, [r7, #48]	; 0x30
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	414b      	adcs	r3, r1
 800cc8e:	637b      	str	r3, [r7, #52]	; 0x34
 800cc90:	f04f 0200 	mov.w	r2, #0
 800cc94:	f04f 0300 	mov.w	r3, #0
 800cc98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cc9c:	4659      	mov	r1, fp
 800cc9e:	00cb      	lsls	r3, r1, #3
 800cca0:	4651      	mov	r1, sl
 800cca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cca6:	4651      	mov	r1, sl
 800cca8:	00ca      	lsls	r2, r1, #3
 800ccaa:	4610      	mov	r0, r2
 800ccac:	4619      	mov	r1, r3
 800ccae:	4603      	mov	r3, r0
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	189b      	adds	r3, r3, r2
 800ccb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccb8:	464b      	mov	r3, r9
 800ccba:	460a      	mov	r2, r1
 800ccbc:	eb42 0303 	adc.w	r3, r2, r3
 800ccc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ccd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ccd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ccd8:	460b      	mov	r3, r1
 800ccda:	18db      	adds	r3, r3, r3
 800ccdc:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccde:	4613      	mov	r3, r2
 800cce0:	eb42 0303 	adc.w	r3, r2, r3
 800cce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ccea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ccee:	f7f3 ffd3 	bl	8000c98 <__aeabi_uldivmod>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4b0d      	ldr	r3, [pc, #52]	; (800cd2c <UART_SetConfig+0x2d4>)
 800ccf8:	fba3 1302 	umull	r1, r3, r3, r2
 800ccfc:	095b      	lsrs	r3, r3, #5
 800ccfe:	2164      	movs	r1, #100	; 0x64
 800cd00:	fb01 f303 	mul.w	r3, r1, r3
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	3332      	adds	r3, #50	; 0x32
 800cd0a:	4a08      	ldr	r2, [pc, #32]	; (800cd2c <UART_SetConfig+0x2d4>)
 800cd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd10:	095b      	lsrs	r3, r3, #5
 800cd12:	f003 0207 	and.w	r2, r3, #7
 800cd16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4422      	add	r2, r4
 800cd1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cd20:	e105      	b.n	800cf2e <UART_SetConfig+0x4d6>
 800cd22:	bf00      	nop
 800cd24:	40011000 	.word	0x40011000
 800cd28:	40011400 	.word	0x40011400
 800cd2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd34:	2200      	movs	r2, #0
 800cd36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cd3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cd42:	4642      	mov	r2, r8
 800cd44:	464b      	mov	r3, r9
 800cd46:	1891      	adds	r1, r2, r2
 800cd48:	6239      	str	r1, [r7, #32]
 800cd4a:	415b      	adcs	r3, r3
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd52:	4641      	mov	r1, r8
 800cd54:	1854      	adds	r4, r2, r1
 800cd56:	4649      	mov	r1, r9
 800cd58:	eb43 0501 	adc.w	r5, r3, r1
 800cd5c:	f04f 0200 	mov.w	r2, #0
 800cd60:	f04f 0300 	mov.w	r3, #0
 800cd64:	00eb      	lsls	r3, r5, #3
 800cd66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd6a:	00e2      	lsls	r2, r4, #3
 800cd6c:	4614      	mov	r4, r2
 800cd6e:	461d      	mov	r5, r3
 800cd70:	4643      	mov	r3, r8
 800cd72:	18e3      	adds	r3, r4, r3
 800cd74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd78:	464b      	mov	r3, r9
 800cd7a:	eb45 0303 	adc.w	r3, r5, r3
 800cd7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	f04f 0300 	mov.w	r3, #0
 800cd9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd9e:	4629      	mov	r1, r5
 800cda0:	008b      	lsls	r3, r1, #2
 800cda2:	4621      	mov	r1, r4
 800cda4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cda8:	4621      	mov	r1, r4
 800cdaa:	008a      	lsls	r2, r1, #2
 800cdac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cdb0:	f7f3 ff72 	bl	8000c98 <__aeabi_uldivmod>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4b60      	ldr	r3, [pc, #384]	; (800cf3c <UART_SetConfig+0x4e4>)
 800cdba:	fba3 2302 	umull	r2, r3, r3, r2
 800cdbe:	095b      	lsrs	r3, r3, #5
 800cdc0:	011c      	lsls	r4, r3, #4
 800cdc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cdcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cdd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cdd4:	4642      	mov	r2, r8
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	1891      	adds	r1, r2, r2
 800cdda:	61b9      	str	r1, [r7, #24]
 800cddc:	415b      	adcs	r3, r3
 800cdde:	61fb      	str	r3, [r7, #28]
 800cde0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cde4:	4641      	mov	r1, r8
 800cde6:	1851      	adds	r1, r2, r1
 800cde8:	6139      	str	r1, [r7, #16]
 800cdea:	4649      	mov	r1, r9
 800cdec:	414b      	adcs	r3, r1
 800cdee:	617b      	str	r3, [r7, #20]
 800cdf0:	f04f 0200 	mov.w	r2, #0
 800cdf4:	f04f 0300 	mov.w	r3, #0
 800cdf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	00cb      	lsls	r3, r1, #3
 800ce00:	4651      	mov	r1, sl
 800ce02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce06:	4651      	mov	r1, sl
 800ce08:	00ca      	lsls	r2, r1, #3
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4642      	mov	r2, r8
 800ce12:	189b      	adds	r3, r3, r2
 800ce14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce18:	464b      	mov	r3, r9
 800ce1a:	460a      	mov	r2, r1
 800ce1c:	eb42 0303 	adc.w	r3, r2, r3
 800ce20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce30:	f04f 0200 	mov.w	r2, #0
 800ce34:	f04f 0300 	mov.w	r3, #0
 800ce38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	008b      	lsls	r3, r1, #2
 800ce40:	4641      	mov	r1, r8
 800ce42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce46:	4641      	mov	r1, r8
 800ce48:	008a      	lsls	r2, r1, #2
 800ce4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ce4e:	f7f3 ff23 	bl	8000c98 <__aeabi_uldivmod>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4b39      	ldr	r3, [pc, #228]	; (800cf3c <UART_SetConfig+0x4e4>)
 800ce58:	fba3 1302 	umull	r1, r3, r3, r2
 800ce5c:	095b      	lsrs	r3, r3, #5
 800ce5e:	2164      	movs	r1, #100	; 0x64
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	3332      	adds	r3, #50	; 0x32
 800ce6a:	4a34      	ldr	r2, [pc, #208]	; (800cf3c <UART_SetConfig+0x4e4>)
 800ce6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce70:	095b      	lsrs	r3, r3, #5
 800ce72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce76:	441c      	add	r4, r3
 800ce78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	673b      	str	r3, [r7, #112]	; 0x70
 800ce80:	677a      	str	r2, [r7, #116]	; 0x74
 800ce82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ce86:	4642      	mov	r2, r8
 800ce88:	464b      	mov	r3, r9
 800ce8a:	1891      	adds	r1, r2, r2
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	415b      	adcs	r3, r3
 800ce90:	60fb      	str	r3, [r7, #12]
 800ce92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce96:	4641      	mov	r1, r8
 800ce98:	1851      	adds	r1, r2, r1
 800ce9a:	6039      	str	r1, [r7, #0]
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	414b      	adcs	r3, r1
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	f04f 0200 	mov.w	r2, #0
 800cea6:	f04f 0300 	mov.w	r3, #0
 800ceaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ceae:	4659      	mov	r1, fp
 800ceb0:	00cb      	lsls	r3, r1, #3
 800ceb2:	4651      	mov	r1, sl
 800ceb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ceb8:	4651      	mov	r1, sl
 800ceba:	00ca      	lsls	r2, r1, #3
 800cebc:	4610      	mov	r0, r2
 800cebe:	4619      	mov	r1, r3
 800cec0:	4603      	mov	r3, r0
 800cec2:	4642      	mov	r2, r8
 800cec4:	189b      	adds	r3, r3, r2
 800cec6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cec8:	464b      	mov	r3, r9
 800ceca:	460a      	mov	r2, r1
 800cecc:	eb42 0303 	adc.w	r3, r2, r3
 800ced0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ced2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	663b      	str	r3, [r7, #96]	; 0x60
 800cedc:	667a      	str	r2, [r7, #100]	; 0x64
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	f04f 0300 	mov.w	r3, #0
 800cee6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ceea:	4649      	mov	r1, r9
 800ceec:	008b      	lsls	r3, r1, #2
 800ceee:	4641      	mov	r1, r8
 800cef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cef4:	4641      	mov	r1, r8
 800cef6:	008a      	lsls	r2, r1, #2
 800cef8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cefc:	f7f3 fecc 	bl	8000c98 <__aeabi_uldivmod>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4b0d      	ldr	r3, [pc, #52]	; (800cf3c <UART_SetConfig+0x4e4>)
 800cf06:	fba3 1302 	umull	r1, r3, r3, r2
 800cf0a:	095b      	lsrs	r3, r3, #5
 800cf0c:	2164      	movs	r1, #100	; 0x64
 800cf0e:	fb01 f303 	mul.w	r3, r1, r3
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	011b      	lsls	r3, r3, #4
 800cf16:	3332      	adds	r3, #50	; 0x32
 800cf18:	4a08      	ldr	r2, [pc, #32]	; (800cf3c <UART_SetConfig+0x4e4>)
 800cf1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf1e:	095b      	lsrs	r3, r3, #5
 800cf20:	f003 020f 	and.w	r2, r3, #15
 800cf24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4422      	add	r2, r4
 800cf2c:	609a      	str	r2, [r3, #8]
}
 800cf2e:	bf00      	nop
 800cf30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cf34:	46bd      	mov	sp, r7
 800cf36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf3a:	bf00      	nop
 800cf3c:	51eb851f 	.word	0x51eb851f

0800cf40 <__errno>:
 800cf40:	4b01      	ldr	r3, [pc, #4]	; (800cf48 <__errno+0x8>)
 800cf42:	6818      	ldr	r0, [r3, #0]
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	20000250 	.word	0x20000250

0800cf4c <__libc_init_array>:
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	4d0d      	ldr	r5, [pc, #52]	; (800cf84 <__libc_init_array+0x38>)
 800cf50:	4c0d      	ldr	r4, [pc, #52]	; (800cf88 <__libc_init_array+0x3c>)
 800cf52:	1b64      	subs	r4, r4, r5
 800cf54:	10a4      	asrs	r4, r4, #2
 800cf56:	2600      	movs	r6, #0
 800cf58:	42a6      	cmp	r6, r4
 800cf5a:	d109      	bne.n	800cf70 <__libc_init_array+0x24>
 800cf5c:	4d0b      	ldr	r5, [pc, #44]	; (800cf8c <__libc_init_array+0x40>)
 800cf5e:	4c0c      	ldr	r4, [pc, #48]	; (800cf90 <__libc_init_array+0x44>)
 800cf60:	f002 ff8a 	bl	800fe78 <_init>
 800cf64:	1b64      	subs	r4, r4, r5
 800cf66:	10a4      	asrs	r4, r4, #2
 800cf68:	2600      	movs	r6, #0
 800cf6a:	42a6      	cmp	r6, r4
 800cf6c:	d105      	bne.n	800cf7a <__libc_init_array+0x2e>
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf74:	4798      	blx	r3
 800cf76:	3601      	adds	r6, #1
 800cf78:	e7ee      	b.n	800cf58 <__libc_init_array+0xc>
 800cf7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7e:	4798      	blx	r3
 800cf80:	3601      	adds	r6, #1
 800cf82:	e7f2      	b.n	800cf6a <__libc_init_array+0x1e>
 800cf84:	0803d754 	.word	0x0803d754
 800cf88:	0803d754 	.word	0x0803d754
 800cf8c:	0803d754 	.word	0x0803d754
 800cf90:	0803d758 	.word	0x0803d758

0800cf94 <memset>:
 800cf94:	4402      	add	r2, r0
 800cf96:	4603      	mov	r3, r0
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d100      	bne.n	800cf9e <memset+0xa>
 800cf9c:	4770      	bx	lr
 800cf9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cfa2:	e7f9      	b.n	800cf98 <memset+0x4>

0800cfa4 <__cvt>:
 800cfa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa8:	ec55 4b10 	vmov	r4, r5, d0
 800cfac:	2d00      	cmp	r5, #0
 800cfae:	460e      	mov	r6, r1
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	462b      	mov	r3, r5
 800cfb4:	bfbb      	ittet	lt
 800cfb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cfba:	461d      	movlt	r5, r3
 800cfbc:	2300      	movge	r3, #0
 800cfbe:	232d      	movlt	r3, #45	; 0x2d
 800cfc0:	700b      	strb	r3, [r1, #0]
 800cfc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cfc8:	4691      	mov	r9, r2
 800cfca:	f023 0820 	bic.w	r8, r3, #32
 800cfce:	bfbc      	itt	lt
 800cfd0:	4622      	movlt	r2, r4
 800cfd2:	4614      	movlt	r4, r2
 800cfd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfd8:	d005      	beq.n	800cfe6 <__cvt+0x42>
 800cfda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cfde:	d100      	bne.n	800cfe2 <__cvt+0x3e>
 800cfe0:	3601      	adds	r6, #1
 800cfe2:	2102      	movs	r1, #2
 800cfe4:	e000      	b.n	800cfe8 <__cvt+0x44>
 800cfe6:	2103      	movs	r1, #3
 800cfe8:	ab03      	add	r3, sp, #12
 800cfea:	9301      	str	r3, [sp, #4]
 800cfec:	ab02      	add	r3, sp, #8
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	ec45 4b10 	vmov	d0, r4, r5
 800cff4:	4653      	mov	r3, sl
 800cff6:	4632      	mov	r2, r6
 800cff8:	f000 fcfe 	bl	800d9f8 <_dtoa_r>
 800cffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d000:	4607      	mov	r7, r0
 800d002:	d102      	bne.n	800d00a <__cvt+0x66>
 800d004:	f019 0f01 	tst.w	r9, #1
 800d008:	d022      	beq.n	800d050 <__cvt+0xac>
 800d00a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d00e:	eb07 0906 	add.w	r9, r7, r6
 800d012:	d110      	bne.n	800d036 <__cvt+0x92>
 800d014:	783b      	ldrb	r3, [r7, #0]
 800d016:	2b30      	cmp	r3, #48	; 0x30
 800d018:	d10a      	bne.n	800d030 <__cvt+0x8c>
 800d01a:	2200      	movs	r2, #0
 800d01c:	2300      	movs	r3, #0
 800d01e:	4620      	mov	r0, r4
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 800d026:	b918      	cbnz	r0, 800d030 <__cvt+0x8c>
 800d028:	f1c6 0601 	rsb	r6, r6, #1
 800d02c:	f8ca 6000 	str.w	r6, [sl]
 800d030:	f8da 3000 	ldr.w	r3, [sl]
 800d034:	4499      	add	r9, r3
 800d036:	2200      	movs	r2, #0
 800d038:	2300      	movs	r3, #0
 800d03a:	4620      	mov	r0, r4
 800d03c:	4629      	mov	r1, r5
 800d03e:	f7f3 fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d042:	b108      	cbz	r0, 800d048 <__cvt+0xa4>
 800d044:	f8cd 900c 	str.w	r9, [sp, #12]
 800d048:	2230      	movs	r2, #48	; 0x30
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	454b      	cmp	r3, r9
 800d04e:	d307      	bcc.n	800d060 <__cvt+0xbc>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d054:	1bdb      	subs	r3, r3, r7
 800d056:	4638      	mov	r0, r7
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	b004      	add	sp, #16
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	1c59      	adds	r1, r3, #1
 800d062:	9103      	str	r1, [sp, #12]
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	e7f0      	b.n	800d04a <__cvt+0xa6>

0800d068 <__exponent>:
 800d068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d06a:	4603      	mov	r3, r0
 800d06c:	2900      	cmp	r1, #0
 800d06e:	bfb8      	it	lt
 800d070:	4249      	neglt	r1, r1
 800d072:	f803 2b02 	strb.w	r2, [r3], #2
 800d076:	bfb4      	ite	lt
 800d078:	222d      	movlt	r2, #45	; 0x2d
 800d07a:	222b      	movge	r2, #43	; 0x2b
 800d07c:	2909      	cmp	r1, #9
 800d07e:	7042      	strb	r2, [r0, #1]
 800d080:	dd2a      	ble.n	800d0d8 <__exponent+0x70>
 800d082:	f10d 0407 	add.w	r4, sp, #7
 800d086:	46a4      	mov	ip, r4
 800d088:	270a      	movs	r7, #10
 800d08a:	46a6      	mov	lr, r4
 800d08c:	460a      	mov	r2, r1
 800d08e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d092:	fb07 1516 	mls	r5, r7, r6, r1
 800d096:	3530      	adds	r5, #48	; 0x30
 800d098:	2a63      	cmp	r2, #99	; 0x63
 800d09a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d09e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	dcf1      	bgt.n	800d08a <__exponent+0x22>
 800d0a6:	3130      	adds	r1, #48	; 0x30
 800d0a8:	f1ae 0502 	sub.w	r5, lr, #2
 800d0ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d0b0:	1c44      	adds	r4, r0, #1
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	4561      	cmp	r1, ip
 800d0b6:	d30a      	bcc.n	800d0ce <__exponent+0x66>
 800d0b8:	f10d 0209 	add.w	r2, sp, #9
 800d0bc:	eba2 020e 	sub.w	r2, r2, lr
 800d0c0:	4565      	cmp	r5, ip
 800d0c2:	bf88      	it	hi
 800d0c4:	2200      	movhi	r2, #0
 800d0c6:	4413      	add	r3, r2
 800d0c8:	1a18      	subs	r0, r3, r0
 800d0ca:	b003      	add	sp, #12
 800d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d0d6:	e7ed      	b.n	800d0b4 <__exponent+0x4c>
 800d0d8:	2330      	movs	r3, #48	; 0x30
 800d0da:	3130      	adds	r1, #48	; 0x30
 800d0dc:	7083      	strb	r3, [r0, #2]
 800d0de:	70c1      	strb	r1, [r0, #3]
 800d0e0:	1d03      	adds	r3, r0, #4
 800d0e2:	e7f1      	b.n	800d0c8 <__exponent+0x60>

0800d0e4 <_printf_float>:
 800d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e8:	ed2d 8b02 	vpush	{d8}
 800d0ec:	b08d      	sub	sp, #52	; 0x34
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d0f4:	4616      	mov	r6, r2
 800d0f6:	461f      	mov	r7, r3
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	f001 fa6b 	bl	800e5d4 <_localeconv_r>
 800d0fe:	f8d0 a000 	ldr.w	sl, [r0]
 800d102:	4650      	mov	r0, sl
 800d104:	f7f3 f86c 	bl	80001e0 <strlen>
 800d108:	2300      	movs	r3, #0
 800d10a:	930a      	str	r3, [sp, #40]	; 0x28
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	9305      	str	r3, [sp, #20]
 800d110:	f8d8 3000 	ldr.w	r3, [r8]
 800d114:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d118:	3307      	adds	r3, #7
 800d11a:	f023 0307 	bic.w	r3, r3, #7
 800d11e:	f103 0208 	add.w	r2, r3, #8
 800d122:	f8c8 2000 	str.w	r2, [r8]
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d12e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	f8cd 8018 	str.w	r8, [sp, #24]
 800d13c:	ee08 0a10 	vmov	s16, r0
 800d140:	4b9f      	ldr	r3, [pc, #636]	; (800d3c0 <_printf_float+0x2dc>)
 800d142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d146:	f04f 32ff 	mov.w	r2, #4294967295
 800d14a:	f7f3 fcf7 	bl	8000b3c <__aeabi_dcmpun>
 800d14e:	bb88      	cbnz	r0, 800d1b4 <_printf_float+0xd0>
 800d150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d154:	4b9a      	ldr	r3, [pc, #616]	; (800d3c0 <_printf_float+0x2dc>)
 800d156:	f04f 32ff 	mov.w	r2, #4294967295
 800d15a:	f7f3 fcd1 	bl	8000b00 <__aeabi_dcmple>
 800d15e:	bb48      	cbnz	r0, 800d1b4 <_printf_float+0xd0>
 800d160:	2200      	movs	r2, #0
 800d162:	2300      	movs	r3, #0
 800d164:	4640      	mov	r0, r8
 800d166:	4649      	mov	r1, r9
 800d168:	f7f3 fcc0 	bl	8000aec <__aeabi_dcmplt>
 800d16c:	b110      	cbz	r0, 800d174 <_printf_float+0x90>
 800d16e:	232d      	movs	r3, #45	; 0x2d
 800d170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d174:	4b93      	ldr	r3, [pc, #588]	; (800d3c4 <_printf_float+0x2e0>)
 800d176:	4894      	ldr	r0, [pc, #592]	; (800d3c8 <_printf_float+0x2e4>)
 800d178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d17c:	bf94      	ite	ls
 800d17e:	4698      	movls	r8, r3
 800d180:	4680      	movhi	r8, r0
 800d182:	2303      	movs	r3, #3
 800d184:	6123      	str	r3, [r4, #16]
 800d186:	9b05      	ldr	r3, [sp, #20]
 800d188:	f023 0204 	bic.w	r2, r3, #4
 800d18c:	6022      	str	r2, [r4, #0]
 800d18e:	f04f 0900 	mov.w	r9, #0
 800d192:	9700      	str	r7, [sp, #0]
 800d194:	4633      	mov	r3, r6
 800d196:	aa0b      	add	r2, sp, #44	; 0x2c
 800d198:	4621      	mov	r1, r4
 800d19a:	4628      	mov	r0, r5
 800d19c:	f000 f9d8 	bl	800d550 <_printf_common>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	f040 8090 	bne.w	800d2c6 <_printf_float+0x1e2>
 800d1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1aa:	b00d      	add	sp, #52	; 0x34
 800d1ac:	ecbd 8b02 	vpop	{d8}
 800d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	f7f3 fcbe 	bl	8000b3c <__aeabi_dcmpun>
 800d1c0:	b140      	cbz	r0, 800d1d4 <_printf_float+0xf0>
 800d1c2:	464b      	mov	r3, r9
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	bfbc      	itt	lt
 800d1c8:	232d      	movlt	r3, #45	; 0x2d
 800d1ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d1ce:	487f      	ldr	r0, [pc, #508]	; (800d3cc <_printf_float+0x2e8>)
 800d1d0:	4b7f      	ldr	r3, [pc, #508]	; (800d3d0 <_printf_float+0x2ec>)
 800d1d2:	e7d1      	b.n	800d178 <_printf_float+0x94>
 800d1d4:	6863      	ldr	r3, [r4, #4]
 800d1d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d1da:	9206      	str	r2, [sp, #24]
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	d13f      	bne.n	800d260 <_printf_float+0x17c>
 800d1e0:	2306      	movs	r3, #6
 800d1e2:	6063      	str	r3, [r4, #4]
 800d1e4:	9b05      	ldr	r3, [sp, #20]
 800d1e6:	6861      	ldr	r1, [r4, #4]
 800d1e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9303      	str	r3, [sp, #12]
 800d1f0:	ab0a      	add	r3, sp, #40	; 0x28
 800d1f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d1f6:	ab09      	add	r3, sp, #36	; 0x24
 800d1f8:	ec49 8b10 	vmov	d0, r8, r9
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	6022      	str	r2, [r4, #0]
 800d200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d204:	4628      	mov	r0, r5
 800d206:	f7ff fecd 	bl	800cfa4 <__cvt>
 800d20a:	9b06      	ldr	r3, [sp, #24]
 800d20c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d20e:	2b47      	cmp	r3, #71	; 0x47
 800d210:	4680      	mov	r8, r0
 800d212:	d108      	bne.n	800d226 <_printf_float+0x142>
 800d214:	1cc8      	adds	r0, r1, #3
 800d216:	db02      	blt.n	800d21e <_printf_float+0x13a>
 800d218:	6863      	ldr	r3, [r4, #4]
 800d21a:	4299      	cmp	r1, r3
 800d21c:	dd41      	ble.n	800d2a2 <_printf_float+0x1be>
 800d21e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d222:	fa5f fb8b 	uxtb.w	fp, fp
 800d226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d22a:	d820      	bhi.n	800d26e <_printf_float+0x18a>
 800d22c:	3901      	subs	r1, #1
 800d22e:	465a      	mov	r2, fp
 800d230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d234:	9109      	str	r1, [sp, #36]	; 0x24
 800d236:	f7ff ff17 	bl	800d068 <__exponent>
 800d23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d23c:	1813      	adds	r3, r2, r0
 800d23e:	2a01      	cmp	r2, #1
 800d240:	4681      	mov	r9, r0
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	dc02      	bgt.n	800d24c <_printf_float+0x168>
 800d246:	6822      	ldr	r2, [r4, #0]
 800d248:	07d2      	lsls	r2, r2, #31
 800d24a:	d501      	bpl.n	800d250 <_printf_float+0x16c>
 800d24c:	3301      	adds	r3, #1
 800d24e:	6123      	str	r3, [r4, #16]
 800d250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d254:	2b00      	cmp	r3, #0
 800d256:	d09c      	beq.n	800d192 <_printf_float+0xae>
 800d258:	232d      	movs	r3, #45	; 0x2d
 800d25a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d25e:	e798      	b.n	800d192 <_printf_float+0xae>
 800d260:	9a06      	ldr	r2, [sp, #24]
 800d262:	2a47      	cmp	r2, #71	; 0x47
 800d264:	d1be      	bne.n	800d1e4 <_printf_float+0x100>
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1bc      	bne.n	800d1e4 <_printf_float+0x100>
 800d26a:	2301      	movs	r3, #1
 800d26c:	e7b9      	b.n	800d1e2 <_printf_float+0xfe>
 800d26e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d272:	d118      	bne.n	800d2a6 <_printf_float+0x1c2>
 800d274:	2900      	cmp	r1, #0
 800d276:	6863      	ldr	r3, [r4, #4]
 800d278:	dd0b      	ble.n	800d292 <_printf_float+0x1ae>
 800d27a:	6121      	str	r1, [r4, #16]
 800d27c:	b913      	cbnz	r3, 800d284 <_printf_float+0x1a0>
 800d27e:	6822      	ldr	r2, [r4, #0]
 800d280:	07d0      	lsls	r0, r2, #31
 800d282:	d502      	bpl.n	800d28a <_printf_float+0x1a6>
 800d284:	3301      	adds	r3, #1
 800d286:	440b      	add	r3, r1
 800d288:	6123      	str	r3, [r4, #16]
 800d28a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d28c:	f04f 0900 	mov.w	r9, #0
 800d290:	e7de      	b.n	800d250 <_printf_float+0x16c>
 800d292:	b913      	cbnz	r3, 800d29a <_printf_float+0x1b6>
 800d294:	6822      	ldr	r2, [r4, #0]
 800d296:	07d2      	lsls	r2, r2, #31
 800d298:	d501      	bpl.n	800d29e <_printf_float+0x1ba>
 800d29a:	3302      	adds	r3, #2
 800d29c:	e7f4      	b.n	800d288 <_printf_float+0x1a4>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e7f2      	b.n	800d288 <_printf_float+0x1a4>
 800d2a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a8:	4299      	cmp	r1, r3
 800d2aa:	db05      	blt.n	800d2b8 <_printf_float+0x1d4>
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	6121      	str	r1, [r4, #16]
 800d2b0:	07d8      	lsls	r0, r3, #31
 800d2b2:	d5ea      	bpl.n	800d28a <_printf_float+0x1a6>
 800d2b4:	1c4b      	adds	r3, r1, #1
 800d2b6:	e7e7      	b.n	800d288 <_printf_float+0x1a4>
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	bfd4      	ite	le
 800d2bc:	f1c1 0202 	rsble	r2, r1, #2
 800d2c0:	2201      	movgt	r2, #1
 800d2c2:	4413      	add	r3, r2
 800d2c4:	e7e0      	b.n	800d288 <_printf_float+0x1a4>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	055a      	lsls	r2, r3, #21
 800d2ca:	d407      	bmi.n	800d2dc <_printf_float+0x1f8>
 800d2cc:	6923      	ldr	r3, [r4, #16]
 800d2ce:	4642      	mov	r2, r8
 800d2d0:	4631      	mov	r1, r6
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	47b8      	blx	r7
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	d12c      	bne.n	800d334 <_printf_float+0x250>
 800d2da:	e764      	b.n	800d1a6 <_printf_float+0xc2>
 800d2dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d2e0:	f240 80e0 	bls.w	800d4a4 <_printf_float+0x3c0>
 800d2e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f7f3 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d034      	beq.n	800d35e <_printf_float+0x27a>
 800d2f4:	4a37      	ldr	r2, [pc, #220]	; (800d3d4 <_printf_float+0x2f0>)
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	47b8      	blx	r7
 800d2fe:	3001      	adds	r0, #1
 800d300:	f43f af51 	beq.w	800d1a6 <_printf_float+0xc2>
 800d304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d308:	429a      	cmp	r2, r3
 800d30a:	db02      	blt.n	800d312 <_printf_float+0x22e>
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	07d8      	lsls	r0, r3, #31
 800d310:	d510      	bpl.n	800d334 <_printf_float+0x250>
 800d312:	ee18 3a10 	vmov	r3, s16
 800d316:	4652      	mov	r2, sl
 800d318:	4631      	mov	r1, r6
 800d31a:	4628      	mov	r0, r5
 800d31c:	47b8      	blx	r7
 800d31e:	3001      	adds	r0, #1
 800d320:	f43f af41 	beq.w	800d1a6 <_printf_float+0xc2>
 800d324:	f04f 0800 	mov.w	r8, #0
 800d328:	f104 091a 	add.w	r9, r4, #26
 800d32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d32e:	3b01      	subs	r3, #1
 800d330:	4543      	cmp	r3, r8
 800d332:	dc09      	bgt.n	800d348 <_printf_float+0x264>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	079b      	lsls	r3, r3, #30
 800d338:	f100 8105 	bmi.w	800d546 <_printf_float+0x462>
 800d33c:	68e0      	ldr	r0, [r4, #12]
 800d33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d340:	4298      	cmp	r0, r3
 800d342:	bfb8      	it	lt
 800d344:	4618      	movlt	r0, r3
 800d346:	e730      	b.n	800d1aa <_printf_float+0xc6>
 800d348:	2301      	movs	r3, #1
 800d34a:	464a      	mov	r2, r9
 800d34c:	4631      	mov	r1, r6
 800d34e:	4628      	mov	r0, r5
 800d350:	47b8      	blx	r7
 800d352:	3001      	adds	r0, #1
 800d354:	f43f af27 	beq.w	800d1a6 <_printf_float+0xc2>
 800d358:	f108 0801 	add.w	r8, r8, #1
 800d35c:	e7e6      	b.n	800d32c <_printf_float+0x248>
 800d35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	dc39      	bgt.n	800d3d8 <_printf_float+0x2f4>
 800d364:	4a1b      	ldr	r2, [pc, #108]	; (800d3d4 <_printf_float+0x2f0>)
 800d366:	2301      	movs	r3, #1
 800d368:	4631      	mov	r1, r6
 800d36a:	4628      	mov	r0, r5
 800d36c:	47b8      	blx	r7
 800d36e:	3001      	adds	r0, #1
 800d370:	f43f af19 	beq.w	800d1a6 <_printf_float+0xc2>
 800d374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d378:	4313      	orrs	r3, r2
 800d37a:	d102      	bne.n	800d382 <_printf_float+0x29e>
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	07d9      	lsls	r1, r3, #31
 800d380:	d5d8      	bpl.n	800d334 <_printf_float+0x250>
 800d382:	ee18 3a10 	vmov	r3, s16
 800d386:	4652      	mov	r2, sl
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b8      	blx	r7
 800d38e:	3001      	adds	r0, #1
 800d390:	f43f af09 	beq.w	800d1a6 <_printf_float+0xc2>
 800d394:	f04f 0900 	mov.w	r9, #0
 800d398:	f104 0a1a 	add.w	sl, r4, #26
 800d39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d39e:	425b      	negs	r3, r3
 800d3a0:	454b      	cmp	r3, r9
 800d3a2:	dc01      	bgt.n	800d3a8 <_printf_float+0x2c4>
 800d3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a6:	e792      	b.n	800d2ce <_printf_float+0x1ea>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4652      	mov	r2, sl
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b8      	blx	r7
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	f43f aef7 	beq.w	800d1a6 <_printf_float+0xc2>
 800d3b8:	f109 0901 	add.w	r9, r9, #1
 800d3bc:	e7ee      	b.n	800d39c <_printf_float+0x2b8>
 800d3be:	bf00      	nop
 800d3c0:	7fefffff 	.word	0x7fefffff
 800d3c4:	0803d374 	.word	0x0803d374
 800d3c8:	0803d378 	.word	0x0803d378
 800d3cc:	0803d380 	.word	0x0803d380
 800d3d0:	0803d37c 	.word	0x0803d37c
 800d3d4:	0803d384 	.word	0x0803d384
 800d3d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	bfa8      	it	ge
 800d3e0:	461a      	movge	r2, r3
 800d3e2:	2a00      	cmp	r2, #0
 800d3e4:	4691      	mov	r9, r2
 800d3e6:	dc37      	bgt.n	800d458 <_printf_float+0x374>
 800d3e8:	f04f 0b00 	mov.w	fp, #0
 800d3ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3f0:	f104 021a 	add.w	r2, r4, #26
 800d3f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3f6:	9305      	str	r3, [sp, #20]
 800d3f8:	eba3 0309 	sub.w	r3, r3, r9
 800d3fc:	455b      	cmp	r3, fp
 800d3fe:	dc33      	bgt.n	800d468 <_printf_float+0x384>
 800d400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d404:	429a      	cmp	r2, r3
 800d406:	db3b      	blt.n	800d480 <_printf_float+0x39c>
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	07da      	lsls	r2, r3, #31
 800d40c:	d438      	bmi.n	800d480 <_printf_float+0x39c>
 800d40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d410:	9a05      	ldr	r2, [sp, #20]
 800d412:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d414:	1a9a      	subs	r2, r3, r2
 800d416:	eba3 0901 	sub.w	r9, r3, r1
 800d41a:	4591      	cmp	r9, r2
 800d41c:	bfa8      	it	ge
 800d41e:	4691      	movge	r9, r2
 800d420:	f1b9 0f00 	cmp.w	r9, #0
 800d424:	dc35      	bgt.n	800d492 <_printf_float+0x3ae>
 800d426:	f04f 0800 	mov.w	r8, #0
 800d42a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d42e:	f104 0a1a 	add.w	sl, r4, #26
 800d432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d436:	1a9b      	subs	r3, r3, r2
 800d438:	eba3 0309 	sub.w	r3, r3, r9
 800d43c:	4543      	cmp	r3, r8
 800d43e:	f77f af79 	ble.w	800d334 <_printf_float+0x250>
 800d442:	2301      	movs	r3, #1
 800d444:	4652      	mov	r2, sl
 800d446:	4631      	mov	r1, r6
 800d448:	4628      	mov	r0, r5
 800d44a:	47b8      	blx	r7
 800d44c:	3001      	adds	r0, #1
 800d44e:	f43f aeaa 	beq.w	800d1a6 <_printf_float+0xc2>
 800d452:	f108 0801 	add.w	r8, r8, #1
 800d456:	e7ec      	b.n	800d432 <_printf_float+0x34e>
 800d458:	4613      	mov	r3, r2
 800d45a:	4631      	mov	r1, r6
 800d45c:	4642      	mov	r2, r8
 800d45e:	4628      	mov	r0, r5
 800d460:	47b8      	blx	r7
 800d462:	3001      	adds	r0, #1
 800d464:	d1c0      	bne.n	800d3e8 <_printf_float+0x304>
 800d466:	e69e      	b.n	800d1a6 <_printf_float+0xc2>
 800d468:	2301      	movs	r3, #1
 800d46a:	4631      	mov	r1, r6
 800d46c:	4628      	mov	r0, r5
 800d46e:	9205      	str	r2, [sp, #20]
 800d470:	47b8      	blx	r7
 800d472:	3001      	adds	r0, #1
 800d474:	f43f ae97 	beq.w	800d1a6 <_printf_float+0xc2>
 800d478:	9a05      	ldr	r2, [sp, #20]
 800d47a:	f10b 0b01 	add.w	fp, fp, #1
 800d47e:	e7b9      	b.n	800d3f4 <_printf_float+0x310>
 800d480:	ee18 3a10 	vmov	r3, s16
 800d484:	4652      	mov	r2, sl
 800d486:	4631      	mov	r1, r6
 800d488:	4628      	mov	r0, r5
 800d48a:	47b8      	blx	r7
 800d48c:	3001      	adds	r0, #1
 800d48e:	d1be      	bne.n	800d40e <_printf_float+0x32a>
 800d490:	e689      	b.n	800d1a6 <_printf_float+0xc2>
 800d492:	9a05      	ldr	r2, [sp, #20]
 800d494:	464b      	mov	r3, r9
 800d496:	4442      	add	r2, r8
 800d498:	4631      	mov	r1, r6
 800d49a:	4628      	mov	r0, r5
 800d49c:	47b8      	blx	r7
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d1c1      	bne.n	800d426 <_printf_float+0x342>
 800d4a2:	e680      	b.n	800d1a6 <_printf_float+0xc2>
 800d4a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4a6:	2a01      	cmp	r2, #1
 800d4a8:	dc01      	bgt.n	800d4ae <_printf_float+0x3ca>
 800d4aa:	07db      	lsls	r3, r3, #31
 800d4ac:	d538      	bpl.n	800d520 <_printf_float+0x43c>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	47b8      	blx	r7
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	f43f ae74 	beq.w	800d1a6 <_printf_float+0xc2>
 800d4be:	ee18 3a10 	vmov	r3, s16
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	47b8      	blx	r7
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f43f ae6b 	beq.w	800d1a6 <_printf_float+0xc2>
 800d4d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f7f3 fafe 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4dc:	b9d8      	cbnz	r0, 800d516 <_printf_float+0x432>
 800d4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4e0:	f108 0201 	add.w	r2, r8, #1
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b8      	blx	r7
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d10e      	bne.n	800d50e <_printf_float+0x42a>
 800d4f0:	e659      	b.n	800d1a6 <_printf_float+0xc2>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	4652      	mov	r2, sl
 800d4f6:	4631      	mov	r1, r6
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	47b8      	blx	r7
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	f43f ae52 	beq.w	800d1a6 <_printf_float+0xc2>
 800d502:	f108 0801 	add.w	r8, r8, #1
 800d506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d508:	3b01      	subs	r3, #1
 800d50a:	4543      	cmp	r3, r8
 800d50c:	dcf1      	bgt.n	800d4f2 <_printf_float+0x40e>
 800d50e:	464b      	mov	r3, r9
 800d510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d514:	e6dc      	b.n	800d2d0 <_printf_float+0x1ec>
 800d516:	f04f 0800 	mov.w	r8, #0
 800d51a:	f104 0a1a 	add.w	sl, r4, #26
 800d51e:	e7f2      	b.n	800d506 <_printf_float+0x422>
 800d520:	2301      	movs	r3, #1
 800d522:	4642      	mov	r2, r8
 800d524:	e7df      	b.n	800d4e6 <_printf_float+0x402>
 800d526:	2301      	movs	r3, #1
 800d528:	464a      	mov	r2, r9
 800d52a:	4631      	mov	r1, r6
 800d52c:	4628      	mov	r0, r5
 800d52e:	47b8      	blx	r7
 800d530:	3001      	adds	r0, #1
 800d532:	f43f ae38 	beq.w	800d1a6 <_printf_float+0xc2>
 800d536:	f108 0801 	add.w	r8, r8, #1
 800d53a:	68e3      	ldr	r3, [r4, #12]
 800d53c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d53e:	1a5b      	subs	r3, r3, r1
 800d540:	4543      	cmp	r3, r8
 800d542:	dcf0      	bgt.n	800d526 <_printf_float+0x442>
 800d544:	e6fa      	b.n	800d33c <_printf_float+0x258>
 800d546:	f04f 0800 	mov.w	r8, #0
 800d54a:	f104 0919 	add.w	r9, r4, #25
 800d54e:	e7f4      	b.n	800d53a <_printf_float+0x456>

0800d550 <_printf_common>:
 800d550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d554:	4616      	mov	r6, r2
 800d556:	4699      	mov	r9, r3
 800d558:	688a      	ldr	r2, [r1, #8]
 800d55a:	690b      	ldr	r3, [r1, #16]
 800d55c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d560:	4293      	cmp	r3, r2
 800d562:	bfb8      	it	lt
 800d564:	4613      	movlt	r3, r2
 800d566:	6033      	str	r3, [r6, #0]
 800d568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d56c:	4607      	mov	r7, r0
 800d56e:	460c      	mov	r4, r1
 800d570:	b10a      	cbz	r2, 800d576 <_printf_common+0x26>
 800d572:	3301      	adds	r3, #1
 800d574:	6033      	str	r3, [r6, #0]
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	0699      	lsls	r1, r3, #26
 800d57a:	bf42      	ittt	mi
 800d57c:	6833      	ldrmi	r3, [r6, #0]
 800d57e:	3302      	addmi	r3, #2
 800d580:	6033      	strmi	r3, [r6, #0]
 800d582:	6825      	ldr	r5, [r4, #0]
 800d584:	f015 0506 	ands.w	r5, r5, #6
 800d588:	d106      	bne.n	800d598 <_printf_common+0x48>
 800d58a:	f104 0a19 	add.w	sl, r4, #25
 800d58e:	68e3      	ldr	r3, [r4, #12]
 800d590:	6832      	ldr	r2, [r6, #0]
 800d592:	1a9b      	subs	r3, r3, r2
 800d594:	42ab      	cmp	r3, r5
 800d596:	dc26      	bgt.n	800d5e6 <_printf_common+0x96>
 800d598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d59c:	1e13      	subs	r3, r2, #0
 800d59e:	6822      	ldr	r2, [r4, #0]
 800d5a0:	bf18      	it	ne
 800d5a2:	2301      	movne	r3, #1
 800d5a4:	0692      	lsls	r2, r2, #26
 800d5a6:	d42b      	bmi.n	800d600 <_printf_common+0xb0>
 800d5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	47c0      	blx	r8
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	d01e      	beq.n	800d5f4 <_printf_common+0xa4>
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	68e5      	ldr	r5, [r4, #12]
 800d5ba:	6832      	ldr	r2, [r6, #0]
 800d5bc:	f003 0306 	and.w	r3, r3, #6
 800d5c0:	2b04      	cmp	r3, #4
 800d5c2:	bf08      	it	eq
 800d5c4:	1aad      	subeq	r5, r5, r2
 800d5c6:	68a3      	ldr	r3, [r4, #8]
 800d5c8:	6922      	ldr	r2, [r4, #16]
 800d5ca:	bf0c      	ite	eq
 800d5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5d0:	2500      	movne	r5, #0
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	bfc4      	itt	gt
 800d5d6:	1a9b      	subgt	r3, r3, r2
 800d5d8:	18ed      	addgt	r5, r5, r3
 800d5da:	2600      	movs	r6, #0
 800d5dc:	341a      	adds	r4, #26
 800d5de:	42b5      	cmp	r5, r6
 800d5e0:	d11a      	bne.n	800d618 <_printf_common+0xc8>
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	e008      	b.n	800d5f8 <_printf_common+0xa8>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	4652      	mov	r2, sl
 800d5ea:	4649      	mov	r1, r9
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	47c0      	blx	r8
 800d5f0:	3001      	adds	r0, #1
 800d5f2:	d103      	bne.n	800d5fc <_printf_common+0xac>
 800d5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fc:	3501      	adds	r5, #1
 800d5fe:	e7c6      	b.n	800d58e <_printf_common+0x3e>
 800d600:	18e1      	adds	r1, r4, r3
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	2030      	movs	r0, #48	; 0x30
 800d606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d60a:	4422      	add	r2, r4
 800d60c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d614:	3302      	adds	r3, #2
 800d616:	e7c7      	b.n	800d5a8 <_printf_common+0x58>
 800d618:	2301      	movs	r3, #1
 800d61a:	4622      	mov	r2, r4
 800d61c:	4649      	mov	r1, r9
 800d61e:	4638      	mov	r0, r7
 800d620:	47c0      	blx	r8
 800d622:	3001      	adds	r0, #1
 800d624:	d0e6      	beq.n	800d5f4 <_printf_common+0xa4>
 800d626:	3601      	adds	r6, #1
 800d628:	e7d9      	b.n	800d5de <_printf_common+0x8e>
	...

0800d62c <_printf_i>:
 800d62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	7e0f      	ldrb	r7, [r1, #24]
 800d632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d634:	2f78      	cmp	r7, #120	; 0x78
 800d636:	4691      	mov	r9, r2
 800d638:	4680      	mov	r8, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	469a      	mov	sl, r3
 800d63e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d642:	d807      	bhi.n	800d654 <_printf_i+0x28>
 800d644:	2f62      	cmp	r7, #98	; 0x62
 800d646:	d80a      	bhi.n	800d65e <_printf_i+0x32>
 800d648:	2f00      	cmp	r7, #0
 800d64a:	f000 80d8 	beq.w	800d7fe <_printf_i+0x1d2>
 800d64e:	2f58      	cmp	r7, #88	; 0x58
 800d650:	f000 80a3 	beq.w	800d79a <_printf_i+0x16e>
 800d654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d65c:	e03a      	b.n	800d6d4 <_printf_i+0xa8>
 800d65e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d662:	2b15      	cmp	r3, #21
 800d664:	d8f6      	bhi.n	800d654 <_printf_i+0x28>
 800d666:	a101      	add	r1, pc, #4	; (adr r1, 800d66c <_printf_i+0x40>)
 800d668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d66c:	0800d6c5 	.word	0x0800d6c5
 800d670:	0800d6d9 	.word	0x0800d6d9
 800d674:	0800d655 	.word	0x0800d655
 800d678:	0800d655 	.word	0x0800d655
 800d67c:	0800d655 	.word	0x0800d655
 800d680:	0800d655 	.word	0x0800d655
 800d684:	0800d6d9 	.word	0x0800d6d9
 800d688:	0800d655 	.word	0x0800d655
 800d68c:	0800d655 	.word	0x0800d655
 800d690:	0800d655 	.word	0x0800d655
 800d694:	0800d655 	.word	0x0800d655
 800d698:	0800d7e5 	.word	0x0800d7e5
 800d69c:	0800d709 	.word	0x0800d709
 800d6a0:	0800d7c7 	.word	0x0800d7c7
 800d6a4:	0800d655 	.word	0x0800d655
 800d6a8:	0800d655 	.word	0x0800d655
 800d6ac:	0800d807 	.word	0x0800d807
 800d6b0:	0800d655 	.word	0x0800d655
 800d6b4:	0800d709 	.word	0x0800d709
 800d6b8:	0800d655 	.word	0x0800d655
 800d6bc:	0800d655 	.word	0x0800d655
 800d6c0:	0800d7cf 	.word	0x0800d7cf
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	1d1a      	adds	r2, r3, #4
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	602a      	str	r2, [r5, #0]
 800d6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e0a3      	b.n	800d820 <_printf_i+0x1f4>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	6829      	ldr	r1, [r5, #0]
 800d6dc:	0606      	lsls	r6, r0, #24
 800d6de:	f101 0304 	add.w	r3, r1, #4
 800d6e2:	d50a      	bpl.n	800d6fa <_printf_i+0xce>
 800d6e4:	680e      	ldr	r6, [r1, #0]
 800d6e6:	602b      	str	r3, [r5, #0]
 800d6e8:	2e00      	cmp	r6, #0
 800d6ea:	da03      	bge.n	800d6f4 <_printf_i+0xc8>
 800d6ec:	232d      	movs	r3, #45	; 0x2d
 800d6ee:	4276      	negs	r6, r6
 800d6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6f4:	485e      	ldr	r0, [pc, #376]	; (800d870 <_printf_i+0x244>)
 800d6f6:	230a      	movs	r3, #10
 800d6f8:	e019      	b.n	800d72e <_printf_i+0x102>
 800d6fa:	680e      	ldr	r6, [r1, #0]
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d702:	bf18      	it	ne
 800d704:	b236      	sxthne	r6, r6
 800d706:	e7ef      	b.n	800d6e8 <_printf_i+0xbc>
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	6820      	ldr	r0, [r4, #0]
 800d70c:	1d19      	adds	r1, r3, #4
 800d70e:	6029      	str	r1, [r5, #0]
 800d710:	0601      	lsls	r1, r0, #24
 800d712:	d501      	bpl.n	800d718 <_printf_i+0xec>
 800d714:	681e      	ldr	r6, [r3, #0]
 800d716:	e002      	b.n	800d71e <_printf_i+0xf2>
 800d718:	0646      	lsls	r6, r0, #25
 800d71a:	d5fb      	bpl.n	800d714 <_printf_i+0xe8>
 800d71c:	881e      	ldrh	r6, [r3, #0]
 800d71e:	4854      	ldr	r0, [pc, #336]	; (800d870 <_printf_i+0x244>)
 800d720:	2f6f      	cmp	r7, #111	; 0x6f
 800d722:	bf0c      	ite	eq
 800d724:	2308      	moveq	r3, #8
 800d726:	230a      	movne	r3, #10
 800d728:	2100      	movs	r1, #0
 800d72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d72e:	6865      	ldr	r5, [r4, #4]
 800d730:	60a5      	str	r5, [r4, #8]
 800d732:	2d00      	cmp	r5, #0
 800d734:	bfa2      	ittt	ge
 800d736:	6821      	ldrge	r1, [r4, #0]
 800d738:	f021 0104 	bicge.w	r1, r1, #4
 800d73c:	6021      	strge	r1, [r4, #0]
 800d73e:	b90e      	cbnz	r6, 800d744 <_printf_i+0x118>
 800d740:	2d00      	cmp	r5, #0
 800d742:	d04d      	beq.n	800d7e0 <_printf_i+0x1b4>
 800d744:	4615      	mov	r5, r2
 800d746:	fbb6 f1f3 	udiv	r1, r6, r3
 800d74a:	fb03 6711 	mls	r7, r3, r1, r6
 800d74e:	5dc7      	ldrb	r7, [r0, r7]
 800d750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d754:	4637      	mov	r7, r6
 800d756:	42bb      	cmp	r3, r7
 800d758:	460e      	mov	r6, r1
 800d75a:	d9f4      	bls.n	800d746 <_printf_i+0x11a>
 800d75c:	2b08      	cmp	r3, #8
 800d75e:	d10b      	bne.n	800d778 <_printf_i+0x14c>
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	07de      	lsls	r6, r3, #31
 800d764:	d508      	bpl.n	800d778 <_printf_i+0x14c>
 800d766:	6923      	ldr	r3, [r4, #16]
 800d768:	6861      	ldr	r1, [r4, #4]
 800d76a:	4299      	cmp	r1, r3
 800d76c:	bfde      	ittt	le
 800d76e:	2330      	movle	r3, #48	; 0x30
 800d770:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d774:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d778:	1b52      	subs	r2, r2, r5
 800d77a:	6122      	str	r2, [r4, #16]
 800d77c:	f8cd a000 	str.w	sl, [sp]
 800d780:	464b      	mov	r3, r9
 800d782:	aa03      	add	r2, sp, #12
 800d784:	4621      	mov	r1, r4
 800d786:	4640      	mov	r0, r8
 800d788:	f7ff fee2 	bl	800d550 <_printf_common>
 800d78c:	3001      	adds	r0, #1
 800d78e:	d14c      	bne.n	800d82a <_printf_i+0x1fe>
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	b004      	add	sp, #16
 800d796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79a:	4835      	ldr	r0, [pc, #212]	; (800d870 <_printf_i+0x244>)
 800d79c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d7a0:	6829      	ldr	r1, [r5, #0]
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7a8:	6029      	str	r1, [r5, #0]
 800d7aa:	061d      	lsls	r5, r3, #24
 800d7ac:	d514      	bpl.n	800d7d8 <_printf_i+0x1ac>
 800d7ae:	07df      	lsls	r7, r3, #31
 800d7b0:	bf44      	itt	mi
 800d7b2:	f043 0320 	orrmi.w	r3, r3, #32
 800d7b6:	6023      	strmi	r3, [r4, #0]
 800d7b8:	b91e      	cbnz	r6, 800d7c2 <_printf_i+0x196>
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	f023 0320 	bic.w	r3, r3, #32
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	2310      	movs	r3, #16
 800d7c4:	e7b0      	b.n	800d728 <_printf_i+0xfc>
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f043 0320 	orr.w	r3, r3, #32
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	2378      	movs	r3, #120	; 0x78
 800d7d0:	4828      	ldr	r0, [pc, #160]	; (800d874 <_printf_i+0x248>)
 800d7d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7d6:	e7e3      	b.n	800d7a0 <_printf_i+0x174>
 800d7d8:	0659      	lsls	r1, r3, #25
 800d7da:	bf48      	it	mi
 800d7dc:	b2b6      	uxthmi	r6, r6
 800d7de:	e7e6      	b.n	800d7ae <_printf_i+0x182>
 800d7e0:	4615      	mov	r5, r2
 800d7e2:	e7bb      	b.n	800d75c <_printf_i+0x130>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	6826      	ldr	r6, [r4, #0]
 800d7e8:	6961      	ldr	r1, [r4, #20]
 800d7ea:	1d18      	adds	r0, r3, #4
 800d7ec:	6028      	str	r0, [r5, #0]
 800d7ee:	0635      	lsls	r5, r6, #24
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	d501      	bpl.n	800d7f8 <_printf_i+0x1cc>
 800d7f4:	6019      	str	r1, [r3, #0]
 800d7f6:	e002      	b.n	800d7fe <_printf_i+0x1d2>
 800d7f8:	0670      	lsls	r0, r6, #25
 800d7fa:	d5fb      	bpl.n	800d7f4 <_printf_i+0x1c8>
 800d7fc:	8019      	strh	r1, [r3, #0]
 800d7fe:	2300      	movs	r3, #0
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	4615      	mov	r5, r2
 800d804:	e7ba      	b.n	800d77c <_printf_i+0x150>
 800d806:	682b      	ldr	r3, [r5, #0]
 800d808:	1d1a      	adds	r2, r3, #4
 800d80a:	602a      	str	r2, [r5, #0]
 800d80c:	681d      	ldr	r5, [r3, #0]
 800d80e:	6862      	ldr	r2, [r4, #4]
 800d810:	2100      	movs	r1, #0
 800d812:	4628      	mov	r0, r5
 800d814:	f7f2 fcec 	bl	80001f0 <memchr>
 800d818:	b108      	cbz	r0, 800d81e <_printf_i+0x1f2>
 800d81a:	1b40      	subs	r0, r0, r5
 800d81c:	6060      	str	r0, [r4, #4]
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	2300      	movs	r3, #0
 800d824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d828:	e7a8      	b.n	800d77c <_printf_i+0x150>
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	462a      	mov	r2, r5
 800d82e:	4649      	mov	r1, r9
 800d830:	4640      	mov	r0, r8
 800d832:	47d0      	blx	sl
 800d834:	3001      	adds	r0, #1
 800d836:	d0ab      	beq.n	800d790 <_printf_i+0x164>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	079b      	lsls	r3, r3, #30
 800d83c:	d413      	bmi.n	800d866 <_printf_i+0x23a>
 800d83e:	68e0      	ldr	r0, [r4, #12]
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	4298      	cmp	r0, r3
 800d844:	bfb8      	it	lt
 800d846:	4618      	movlt	r0, r3
 800d848:	e7a4      	b.n	800d794 <_printf_i+0x168>
 800d84a:	2301      	movs	r3, #1
 800d84c:	4632      	mov	r2, r6
 800d84e:	4649      	mov	r1, r9
 800d850:	4640      	mov	r0, r8
 800d852:	47d0      	blx	sl
 800d854:	3001      	adds	r0, #1
 800d856:	d09b      	beq.n	800d790 <_printf_i+0x164>
 800d858:	3501      	adds	r5, #1
 800d85a:	68e3      	ldr	r3, [r4, #12]
 800d85c:	9903      	ldr	r1, [sp, #12]
 800d85e:	1a5b      	subs	r3, r3, r1
 800d860:	42ab      	cmp	r3, r5
 800d862:	dcf2      	bgt.n	800d84a <_printf_i+0x21e>
 800d864:	e7eb      	b.n	800d83e <_printf_i+0x212>
 800d866:	2500      	movs	r5, #0
 800d868:	f104 0619 	add.w	r6, r4, #25
 800d86c:	e7f5      	b.n	800d85a <_printf_i+0x22e>
 800d86e:	bf00      	nop
 800d870:	0803d386 	.word	0x0803d386
 800d874:	0803d397 	.word	0x0803d397

0800d878 <siprintf>:
 800d878:	b40e      	push	{r1, r2, r3}
 800d87a:	b500      	push	{lr}
 800d87c:	b09c      	sub	sp, #112	; 0x70
 800d87e:	ab1d      	add	r3, sp, #116	; 0x74
 800d880:	9002      	str	r0, [sp, #8]
 800d882:	9006      	str	r0, [sp, #24]
 800d884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d888:	4809      	ldr	r0, [pc, #36]	; (800d8b0 <siprintf+0x38>)
 800d88a:	9107      	str	r1, [sp, #28]
 800d88c:	9104      	str	r1, [sp, #16]
 800d88e:	4909      	ldr	r1, [pc, #36]	; (800d8b4 <siprintf+0x3c>)
 800d890:	f853 2b04 	ldr.w	r2, [r3], #4
 800d894:	9105      	str	r1, [sp, #20]
 800d896:	6800      	ldr	r0, [r0, #0]
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	a902      	add	r1, sp, #8
 800d89c:	f001 fb8a 	bl	800efb4 <_svfiprintf_r>
 800d8a0:	9b02      	ldr	r3, [sp, #8]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	701a      	strb	r2, [r3, #0]
 800d8a6:	b01c      	add	sp, #112	; 0x70
 800d8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8ac:	b003      	add	sp, #12
 800d8ae:	4770      	bx	lr
 800d8b0:	20000250 	.word	0x20000250
 800d8b4:	ffff0208 	.word	0xffff0208

0800d8b8 <strncat>:
 800d8b8:	b530      	push	{r4, r5, lr}
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	7825      	ldrb	r5, [r4, #0]
 800d8be:	4623      	mov	r3, r4
 800d8c0:	3401      	adds	r4, #1
 800d8c2:	2d00      	cmp	r5, #0
 800d8c4:	d1fa      	bne.n	800d8bc <strncat+0x4>
 800d8c6:	3a01      	subs	r2, #1
 800d8c8:	d304      	bcc.n	800d8d4 <strncat+0x1c>
 800d8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ce:	f803 4b01 	strb.w	r4, [r3], #1
 800d8d2:	b904      	cbnz	r4, 800d8d6 <strncat+0x1e>
 800d8d4:	bd30      	pop	{r4, r5, pc}
 800d8d6:	2a00      	cmp	r2, #0
 800d8d8:	d1f5      	bne.n	800d8c6 <strncat+0xe>
 800d8da:	701a      	strb	r2, [r3, #0]
 800d8dc:	e7f3      	b.n	800d8c6 <strncat+0xe>

0800d8de <quorem>:
 800d8de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e2:	6903      	ldr	r3, [r0, #16]
 800d8e4:	690c      	ldr	r4, [r1, #16]
 800d8e6:	42a3      	cmp	r3, r4
 800d8e8:	4607      	mov	r7, r0
 800d8ea:	f2c0 8081 	blt.w	800d9f0 <quorem+0x112>
 800d8ee:	3c01      	subs	r4, #1
 800d8f0:	f101 0814 	add.w	r8, r1, #20
 800d8f4:	f100 0514 	add.w	r5, r0, #20
 800d8f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d906:	3301      	adds	r3, #1
 800d908:	429a      	cmp	r2, r3
 800d90a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d90e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d912:	fbb2 f6f3 	udiv	r6, r2, r3
 800d916:	d331      	bcc.n	800d97c <quorem+0x9e>
 800d918:	f04f 0e00 	mov.w	lr, #0
 800d91c:	4640      	mov	r0, r8
 800d91e:	46ac      	mov	ip, r5
 800d920:	46f2      	mov	sl, lr
 800d922:	f850 2b04 	ldr.w	r2, [r0], #4
 800d926:	b293      	uxth	r3, r2
 800d928:	fb06 e303 	mla	r3, r6, r3, lr
 800d92c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d930:	b29b      	uxth	r3, r3
 800d932:	ebaa 0303 	sub.w	r3, sl, r3
 800d936:	f8dc a000 	ldr.w	sl, [ip]
 800d93a:	0c12      	lsrs	r2, r2, #16
 800d93c:	fa13 f38a 	uxtah	r3, r3, sl
 800d940:	fb06 e202 	mla	r2, r6, r2, lr
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d94c:	b292      	uxth	r2, r2
 800d94e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d956:	f8bd 3000 	ldrh.w	r3, [sp]
 800d95a:	4581      	cmp	r9, r0
 800d95c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d960:	f84c 3b04 	str.w	r3, [ip], #4
 800d964:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d968:	d2db      	bcs.n	800d922 <quorem+0x44>
 800d96a:	f855 300b 	ldr.w	r3, [r5, fp]
 800d96e:	b92b      	cbnz	r3, 800d97c <quorem+0x9e>
 800d970:	9b01      	ldr	r3, [sp, #4]
 800d972:	3b04      	subs	r3, #4
 800d974:	429d      	cmp	r5, r3
 800d976:	461a      	mov	r2, r3
 800d978:	d32e      	bcc.n	800d9d8 <quorem+0xfa>
 800d97a:	613c      	str	r4, [r7, #16]
 800d97c:	4638      	mov	r0, r7
 800d97e:	f001 f8c5 	bl	800eb0c <__mcmp>
 800d982:	2800      	cmp	r0, #0
 800d984:	db24      	blt.n	800d9d0 <quorem+0xf2>
 800d986:	3601      	adds	r6, #1
 800d988:	4628      	mov	r0, r5
 800d98a:	f04f 0c00 	mov.w	ip, #0
 800d98e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d992:	f8d0 e000 	ldr.w	lr, [r0]
 800d996:	b293      	uxth	r3, r2
 800d998:	ebac 0303 	sub.w	r3, ip, r3
 800d99c:	0c12      	lsrs	r2, r2, #16
 800d99e:	fa13 f38e 	uxtah	r3, r3, lr
 800d9a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d9a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9b0:	45c1      	cmp	r9, r8
 800d9b2:	f840 3b04 	str.w	r3, [r0], #4
 800d9b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d9ba:	d2e8      	bcs.n	800d98e <quorem+0xb0>
 800d9bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9c4:	b922      	cbnz	r2, 800d9d0 <quorem+0xf2>
 800d9c6:	3b04      	subs	r3, #4
 800d9c8:	429d      	cmp	r5, r3
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	d30a      	bcc.n	800d9e4 <quorem+0x106>
 800d9ce:	613c      	str	r4, [r7, #16]
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	b003      	add	sp, #12
 800d9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d8:	6812      	ldr	r2, [r2, #0]
 800d9da:	3b04      	subs	r3, #4
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	d1cc      	bne.n	800d97a <quorem+0x9c>
 800d9e0:	3c01      	subs	r4, #1
 800d9e2:	e7c7      	b.n	800d974 <quorem+0x96>
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	3b04      	subs	r3, #4
 800d9e8:	2a00      	cmp	r2, #0
 800d9ea:	d1f0      	bne.n	800d9ce <quorem+0xf0>
 800d9ec:	3c01      	subs	r4, #1
 800d9ee:	e7eb      	b.n	800d9c8 <quorem+0xea>
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	e7ee      	b.n	800d9d2 <quorem+0xf4>
 800d9f4:	0000      	movs	r0, r0
	...

0800d9f8 <_dtoa_r>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	ed2d 8b04 	vpush	{d8-d9}
 800da00:	ec57 6b10 	vmov	r6, r7, d0
 800da04:	b093      	sub	sp, #76	; 0x4c
 800da06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da0c:	9106      	str	r1, [sp, #24]
 800da0e:	ee10 aa10 	vmov	sl, s0
 800da12:	4604      	mov	r4, r0
 800da14:	9209      	str	r2, [sp, #36]	; 0x24
 800da16:	930c      	str	r3, [sp, #48]	; 0x30
 800da18:	46bb      	mov	fp, r7
 800da1a:	b975      	cbnz	r5, 800da3a <_dtoa_r+0x42>
 800da1c:	2010      	movs	r0, #16
 800da1e:	f000 fddd 	bl	800e5dc <malloc>
 800da22:	4602      	mov	r2, r0
 800da24:	6260      	str	r0, [r4, #36]	; 0x24
 800da26:	b920      	cbnz	r0, 800da32 <_dtoa_r+0x3a>
 800da28:	4ba7      	ldr	r3, [pc, #668]	; (800dcc8 <_dtoa_r+0x2d0>)
 800da2a:	21ea      	movs	r1, #234	; 0xea
 800da2c:	48a7      	ldr	r0, [pc, #668]	; (800dccc <_dtoa_r+0x2d4>)
 800da2e:	f001 fbd1 	bl	800f1d4 <__assert_func>
 800da32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da36:	6005      	str	r5, [r0, #0]
 800da38:	60c5      	str	r5, [r0, #12]
 800da3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da3c:	6819      	ldr	r1, [r3, #0]
 800da3e:	b151      	cbz	r1, 800da56 <_dtoa_r+0x5e>
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	604a      	str	r2, [r1, #4]
 800da44:	2301      	movs	r3, #1
 800da46:	4093      	lsls	r3, r2
 800da48:	608b      	str	r3, [r1, #8]
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 fe1c 	bl	800e688 <_Bfree>
 800da50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da52:	2200      	movs	r2, #0
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	1e3b      	subs	r3, r7, #0
 800da58:	bfaa      	itet	ge
 800da5a:	2300      	movge	r3, #0
 800da5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800da60:	f8c8 3000 	strge.w	r3, [r8]
 800da64:	4b9a      	ldr	r3, [pc, #616]	; (800dcd0 <_dtoa_r+0x2d8>)
 800da66:	bfbc      	itt	lt
 800da68:	2201      	movlt	r2, #1
 800da6a:	f8c8 2000 	strlt.w	r2, [r8]
 800da6e:	ea33 030b 	bics.w	r3, r3, fp
 800da72:	d11b      	bne.n	800daac <_dtoa_r+0xb4>
 800da74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da76:	f242 730f 	movw	r3, #9999	; 0x270f
 800da7a:	6013      	str	r3, [r2, #0]
 800da7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da80:	4333      	orrs	r3, r6
 800da82:	f000 8592 	beq.w	800e5aa <_dtoa_r+0xbb2>
 800da86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da88:	b963      	cbnz	r3, 800daa4 <_dtoa_r+0xac>
 800da8a:	4b92      	ldr	r3, [pc, #584]	; (800dcd4 <_dtoa_r+0x2dc>)
 800da8c:	e022      	b.n	800dad4 <_dtoa_r+0xdc>
 800da8e:	4b92      	ldr	r3, [pc, #584]	; (800dcd8 <_dtoa_r+0x2e0>)
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	3308      	adds	r3, #8
 800da94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	9801      	ldr	r0, [sp, #4]
 800da9a:	b013      	add	sp, #76	; 0x4c
 800da9c:	ecbd 8b04 	vpop	{d8-d9}
 800daa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa4:	4b8b      	ldr	r3, [pc, #556]	; (800dcd4 <_dtoa_r+0x2dc>)
 800daa6:	9301      	str	r3, [sp, #4]
 800daa8:	3303      	adds	r3, #3
 800daaa:	e7f3      	b.n	800da94 <_dtoa_r+0x9c>
 800daac:	2200      	movs	r2, #0
 800daae:	2300      	movs	r3, #0
 800dab0:	4650      	mov	r0, sl
 800dab2:	4659      	mov	r1, fp
 800dab4:	f7f3 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 800dab8:	ec4b ab19 	vmov	d9, sl, fp
 800dabc:	4680      	mov	r8, r0
 800dabe:	b158      	cbz	r0, 800dad8 <_dtoa_r+0xe0>
 800dac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dac2:	2301      	movs	r3, #1
 800dac4:	6013      	str	r3, [r2, #0]
 800dac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 856b 	beq.w	800e5a4 <_dtoa_r+0xbac>
 800dace:	4883      	ldr	r0, [pc, #524]	; (800dcdc <_dtoa_r+0x2e4>)
 800dad0:	6018      	str	r0, [r3, #0]
 800dad2:	1e43      	subs	r3, r0, #1
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	e7df      	b.n	800da98 <_dtoa_r+0xa0>
 800dad8:	ec4b ab10 	vmov	d0, sl, fp
 800dadc:	aa10      	add	r2, sp, #64	; 0x40
 800dade:	a911      	add	r1, sp, #68	; 0x44
 800dae0:	4620      	mov	r0, r4
 800dae2:	f001 f8b9 	bl	800ec58 <__d2b>
 800dae6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800daea:	ee08 0a10 	vmov	s16, r0
 800daee:	2d00      	cmp	r5, #0
 800daf0:	f000 8084 	beq.w	800dbfc <_dtoa_r+0x204>
 800daf4:	ee19 3a90 	vmov	r3, s19
 800daf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dafc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db00:	4656      	mov	r6, sl
 800db02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800db0e:	4b74      	ldr	r3, [pc, #464]	; (800dce0 <_dtoa_r+0x2e8>)
 800db10:	2200      	movs	r2, #0
 800db12:	4630      	mov	r0, r6
 800db14:	4639      	mov	r1, r7
 800db16:	f7f2 fbbf 	bl	8000298 <__aeabi_dsub>
 800db1a:	a365      	add	r3, pc, #404	; (adr r3, 800dcb0 <_dtoa_r+0x2b8>)
 800db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db20:	f7f2 fd72 	bl	8000608 <__aeabi_dmul>
 800db24:	a364      	add	r3, pc, #400	; (adr r3, 800dcb8 <_dtoa_r+0x2c0>)
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	f7f2 fbb7 	bl	800029c <__adddf3>
 800db2e:	4606      	mov	r6, r0
 800db30:	4628      	mov	r0, r5
 800db32:	460f      	mov	r7, r1
 800db34:	f7f2 fcfe 	bl	8000534 <__aeabi_i2d>
 800db38:	a361      	add	r3, pc, #388	; (adr r3, 800dcc0 <_dtoa_r+0x2c8>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	f7f2 fd63 	bl	8000608 <__aeabi_dmul>
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4630      	mov	r0, r6
 800db48:	4639      	mov	r1, r7
 800db4a:	f7f2 fba7 	bl	800029c <__adddf3>
 800db4e:	4606      	mov	r6, r0
 800db50:	460f      	mov	r7, r1
 800db52:	f7f3 f809 	bl	8000b68 <__aeabi_d2iz>
 800db56:	2200      	movs	r2, #0
 800db58:	9000      	str	r0, [sp, #0]
 800db5a:	2300      	movs	r3, #0
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 ffc4 	bl	8000aec <__aeabi_dcmplt>
 800db64:	b150      	cbz	r0, 800db7c <_dtoa_r+0x184>
 800db66:	9800      	ldr	r0, [sp, #0]
 800db68:	f7f2 fce4 	bl	8000534 <__aeabi_i2d>
 800db6c:	4632      	mov	r2, r6
 800db6e:	463b      	mov	r3, r7
 800db70:	f7f2 ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800db74:	b910      	cbnz	r0, 800db7c <_dtoa_r+0x184>
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	3b01      	subs	r3, #1
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	9b00      	ldr	r3, [sp, #0]
 800db7e:	2b16      	cmp	r3, #22
 800db80:	d85a      	bhi.n	800dc38 <_dtoa_r+0x240>
 800db82:	9a00      	ldr	r2, [sp, #0]
 800db84:	4b57      	ldr	r3, [pc, #348]	; (800dce4 <_dtoa_r+0x2ec>)
 800db86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	ec51 0b19 	vmov	r0, r1, d9
 800db92:	f7f2 ffab 	bl	8000aec <__aeabi_dcmplt>
 800db96:	2800      	cmp	r0, #0
 800db98:	d050      	beq.n	800dc3c <_dtoa_r+0x244>
 800db9a:	9b00      	ldr	r3, [sp, #0]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	2300      	movs	r3, #0
 800dba2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dba6:	1b5d      	subs	r5, r3, r5
 800dba8:	1e6b      	subs	r3, r5, #1
 800dbaa:	9305      	str	r3, [sp, #20]
 800dbac:	bf45      	ittet	mi
 800dbae:	f1c5 0301 	rsbmi	r3, r5, #1
 800dbb2:	9304      	strmi	r3, [sp, #16]
 800dbb4:	2300      	movpl	r3, #0
 800dbb6:	2300      	movmi	r3, #0
 800dbb8:	bf4c      	ite	mi
 800dbba:	9305      	strmi	r3, [sp, #20]
 800dbbc:	9304      	strpl	r3, [sp, #16]
 800dbbe:	9b00      	ldr	r3, [sp, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	db3d      	blt.n	800dc40 <_dtoa_r+0x248>
 800dbc4:	9b05      	ldr	r3, [sp, #20]
 800dbc6:	9a00      	ldr	r2, [sp, #0]
 800dbc8:	920a      	str	r2, [sp, #40]	; 0x28
 800dbca:	4413      	add	r3, r2
 800dbcc:	9305      	str	r3, [sp, #20]
 800dbce:	2300      	movs	r3, #0
 800dbd0:	9307      	str	r3, [sp, #28]
 800dbd2:	9b06      	ldr	r3, [sp, #24]
 800dbd4:	2b09      	cmp	r3, #9
 800dbd6:	f200 8089 	bhi.w	800dcec <_dtoa_r+0x2f4>
 800dbda:	2b05      	cmp	r3, #5
 800dbdc:	bfc4      	itt	gt
 800dbde:	3b04      	subgt	r3, #4
 800dbe0:	9306      	strgt	r3, [sp, #24]
 800dbe2:	9b06      	ldr	r3, [sp, #24]
 800dbe4:	f1a3 0302 	sub.w	r3, r3, #2
 800dbe8:	bfcc      	ite	gt
 800dbea:	2500      	movgt	r5, #0
 800dbec:	2501      	movle	r5, #1
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	f200 8087 	bhi.w	800dd02 <_dtoa_r+0x30a>
 800dbf4:	e8df f003 	tbb	[pc, r3]
 800dbf8:	59383a2d 	.word	0x59383a2d
 800dbfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc00:	441d      	add	r5, r3
 800dc02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc06:	2b20      	cmp	r3, #32
 800dc08:	bfc1      	itttt	gt
 800dc0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc12:	fa0b f303 	lslgt.w	r3, fp, r3
 800dc16:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc1a:	bfda      	itte	le
 800dc1c:	f1c3 0320 	rsble	r3, r3, #32
 800dc20:	fa06 f003 	lslle.w	r0, r6, r3
 800dc24:	4318      	orrgt	r0, r3
 800dc26:	f7f2 fc75 	bl	8000514 <__aeabi_ui2d>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc32:	3d01      	subs	r5, #1
 800dc34:	930e      	str	r3, [sp, #56]	; 0x38
 800dc36:	e76a      	b.n	800db0e <_dtoa_r+0x116>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e7b2      	b.n	800dba2 <_dtoa_r+0x1aa>
 800dc3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc3e:	e7b1      	b.n	800dba4 <_dtoa_r+0x1ac>
 800dc40:	9b04      	ldr	r3, [sp, #16]
 800dc42:	9a00      	ldr	r2, [sp, #0]
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	9304      	str	r3, [sp, #16]
 800dc48:	4253      	negs	r3, r2
 800dc4a:	9307      	str	r3, [sp, #28]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc50:	e7bf      	b.n	800dbd2 <_dtoa_r+0x1da>
 800dc52:	2300      	movs	r3, #0
 800dc54:	9308      	str	r3, [sp, #32]
 800dc56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	dc55      	bgt.n	800dd08 <_dtoa_r+0x310>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc62:	461a      	mov	r2, r3
 800dc64:	9209      	str	r2, [sp, #36]	; 0x24
 800dc66:	e00c      	b.n	800dc82 <_dtoa_r+0x28a>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e7f3      	b.n	800dc54 <_dtoa_r+0x25c>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc70:	9308      	str	r3, [sp, #32]
 800dc72:	9b00      	ldr	r3, [sp, #0]
 800dc74:	4413      	add	r3, r2
 800dc76:	9302      	str	r3, [sp, #8]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	9303      	str	r3, [sp, #12]
 800dc7e:	bfb8      	it	lt
 800dc80:	2301      	movlt	r3, #1
 800dc82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc84:	2200      	movs	r2, #0
 800dc86:	6042      	str	r2, [r0, #4]
 800dc88:	2204      	movs	r2, #4
 800dc8a:	f102 0614 	add.w	r6, r2, #20
 800dc8e:	429e      	cmp	r6, r3
 800dc90:	6841      	ldr	r1, [r0, #4]
 800dc92:	d93d      	bls.n	800dd10 <_dtoa_r+0x318>
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 fcb7 	bl	800e608 <_Balloc>
 800dc9a:	9001      	str	r0, [sp, #4]
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d13b      	bne.n	800dd18 <_dtoa_r+0x320>
 800dca0:	4b11      	ldr	r3, [pc, #68]	; (800dce8 <_dtoa_r+0x2f0>)
 800dca2:	4602      	mov	r2, r0
 800dca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dca8:	e6c0      	b.n	800da2c <_dtoa_r+0x34>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e7df      	b.n	800dc6e <_dtoa_r+0x276>
 800dcae:	bf00      	nop
 800dcb0:	636f4361 	.word	0x636f4361
 800dcb4:	3fd287a7 	.word	0x3fd287a7
 800dcb8:	8b60c8b3 	.word	0x8b60c8b3
 800dcbc:	3fc68a28 	.word	0x3fc68a28
 800dcc0:	509f79fb 	.word	0x509f79fb
 800dcc4:	3fd34413 	.word	0x3fd34413
 800dcc8:	0803d3b5 	.word	0x0803d3b5
 800dccc:	0803d3cc 	.word	0x0803d3cc
 800dcd0:	7ff00000 	.word	0x7ff00000
 800dcd4:	0803d3b1 	.word	0x0803d3b1
 800dcd8:	0803d3a8 	.word	0x0803d3a8
 800dcdc:	0803d385 	.word	0x0803d385
 800dce0:	3ff80000 	.word	0x3ff80000
 800dce4:	0803d4c0 	.word	0x0803d4c0
 800dce8:	0803d427 	.word	0x0803d427
 800dcec:	2501      	movs	r5, #1
 800dcee:	2300      	movs	r3, #0
 800dcf0:	9306      	str	r3, [sp, #24]
 800dcf2:	9508      	str	r5, [sp, #32]
 800dcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2312      	movs	r3, #18
 800dd00:	e7b0      	b.n	800dc64 <_dtoa_r+0x26c>
 800dd02:	2301      	movs	r3, #1
 800dd04:	9308      	str	r3, [sp, #32]
 800dd06:	e7f5      	b.n	800dcf4 <_dtoa_r+0x2fc>
 800dd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd0e:	e7b8      	b.n	800dc82 <_dtoa_r+0x28a>
 800dd10:	3101      	adds	r1, #1
 800dd12:	6041      	str	r1, [r0, #4]
 800dd14:	0052      	lsls	r2, r2, #1
 800dd16:	e7b8      	b.n	800dc8a <_dtoa_r+0x292>
 800dd18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd1a:	9a01      	ldr	r2, [sp, #4]
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	9b03      	ldr	r3, [sp, #12]
 800dd20:	2b0e      	cmp	r3, #14
 800dd22:	f200 809d 	bhi.w	800de60 <_dtoa_r+0x468>
 800dd26:	2d00      	cmp	r5, #0
 800dd28:	f000 809a 	beq.w	800de60 <_dtoa_r+0x468>
 800dd2c:	9b00      	ldr	r3, [sp, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	dd32      	ble.n	800dd98 <_dtoa_r+0x3a0>
 800dd32:	4ab7      	ldr	r2, [pc, #732]	; (800e010 <_dtoa_r+0x618>)
 800dd34:	f003 030f 	and.w	r3, r3, #15
 800dd38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd40:	9b00      	ldr	r3, [sp, #0]
 800dd42:	05d8      	lsls	r0, r3, #23
 800dd44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dd48:	d516      	bpl.n	800dd78 <_dtoa_r+0x380>
 800dd4a:	4bb2      	ldr	r3, [pc, #712]	; (800e014 <_dtoa_r+0x61c>)
 800dd4c:	ec51 0b19 	vmov	r0, r1, d9
 800dd50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd54:	f7f2 fd82 	bl	800085c <__aeabi_ddiv>
 800dd58:	f007 070f 	and.w	r7, r7, #15
 800dd5c:	4682      	mov	sl, r0
 800dd5e:	468b      	mov	fp, r1
 800dd60:	2503      	movs	r5, #3
 800dd62:	4eac      	ldr	r6, [pc, #688]	; (800e014 <_dtoa_r+0x61c>)
 800dd64:	b957      	cbnz	r7, 800dd7c <_dtoa_r+0x384>
 800dd66:	4642      	mov	r2, r8
 800dd68:	464b      	mov	r3, r9
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	4659      	mov	r1, fp
 800dd6e:	f7f2 fd75 	bl	800085c <__aeabi_ddiv>
 800dd72:	4682      	mov	sl, r0
 800dd74:	468b      	mov	fp, r1
 800dd76:	e028      	b.n	800ddca <_dtoa_r+0x3d2>
 800dd78:	2502      	movs	r5, #2
 800dd7a:	e7f2      	b.n	800dd62 <_dtoa_r+0x36a>
 800dd7c:	07f9      	lsls	r1, r7, #31
 800dd7e:	d508      	bpl.n	800dd92 <_dtoa_r+0x39a>
 800dd80:	4640      	mov	r0, r8
 800dd82:	4649      	mov	r1, r9
 800dd84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd88:	f7f2 fc3e 	bl	8000608 <__aeabi_dmul>
 800dd8c:	3501      	adds	r5, #1
 800dd8e:	4680      	mov	r8, r0
 800dd90:	4689      	mov	r9, r1
 800dd92:	107f      	asrs	r7, r7, #1
 800dd94:	3608      	adds	r6, #8
 800dd96:	e7e5      	b.n	800dd64 <_dtoa_r+0x36c>
 800dd98:	f000 809b 	beq.w	800ded2 <_dtoa_r+0x4da>
 800dd9c:	9b00      	ldr	r3, [sp, #0]
 800dd9e:	4f9d      	ldr	r7, [pc, #628]	; (800e014 <_dtoa_r+0x61c>)
 800dda0:	425e      	negs	r6, r3
 800dda2:	4b9b      	ldr	r3, [pc, #620]	; (800e010 <_dtoa_r+0x618>)
 800dda4:	f006 020f 	and.w	r2, r6, #15
 800dda8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	ec51 0b19 	vmov	r0, r1, d9
 800ddb4:	f7f2 fc28 	bl	8000608 <__aeabi_dmul>
 800ddb8:	1136      	asrs	r6, r6, #4
 800ddba:	4682      	mov	sl, r0
 800ddbc:	468b      	mov	fp, r1
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2502      	movs	r5, #2
 800ddc2:	2e00      	cmp	r6, #0
 800ddc4:	d17a      	bne.n	800debc <_dtoa_r+0x4c4>
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1d3      	bne.n	800dd72 <_dtoa_r+0x37a>
 800ddca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f000 8082 	beq.w	800ded6 <_dtoa_r+0x4de>
 800ddd2:	4b91      	ldr	r3, [pc, #580]	; (800e018 <_dtoa_r+0x620>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	4650      	mov	r0, sl
 800ddd8:	4659      	mov	r1, fp
 800ddda:	f7f2 fe87 	bl	8000aec <__aeabi_dcmplt>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d079      	beq.n	800ded6 <_dtoa_r+0x4de>
 800dde2:	9b03      	ldr	r3, [sp, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d076      	beq.n	800ded6 <_dtoa_r+0x4de>
 800dde8:	9b02      	ldr	r3, [sp, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	dd36      	ble.n	800de5c <_dtoa_r+0x464>
 800ddee:	9b00      	ldr	r3, [sp, #0]
 800ddf0:	4650      	mov	r0, sl
 800ddf2:	4659      	mov	r1, fp
 800ddf4:	1e5f      	subs	r7, r3, #1
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	4b88      	ldr	r3, [pc, #544]	; (800e01c <_dtoa_r+0x624>)
 800ddfa:	f7f2 fc05 	bl	8000608 <__aeabi_dmul>
 800ddfe:	9e02      	ldr	r6, [sp, #8]
 800de00:	4682      	mov	sl, r0
 800de02:	468b      	mov	fp, r1
 800de04:	3501      	adds	r5, #1
 800de06:	4628      	mov	r0, r5
 800de08:	f7f2 fb94 	bl	8000534 <__aeabi_i2d>
 800de0c:	4652      	mov	r2, sl
 800de0e:	465b      	mov	r3, fp
 800de10:	f7f2 fbfa 	bl	8000608 <__aeabi_dmul>
 800de14:	4b82      	ldr	r3, [pc, #520]	; (800e020 <_dtoa_r+0x628>)
 800de16:	2200      	movs	r2, #0
 800de18:	f7f2 fa40 	bl	800029c <__adddf3>
 800de1c:	46d0      	mov	r8, sl
 800de1e:	46d9      	mov	r9, fp
 800de20:	4682      	mov	sl, r0
 800de22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800de26:	2e00      	cmp	r6, #0
 800de28:	d158      	bne.n	800dedc <_dtoa_r+0x4e4>
 800de2a:	4b7e      	ldr	r3, [pc, #504]	; (800e024 <_dtoa_r+0x62c>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	4640      	mov	r0, r8
 800de30:	4649      	mov	r1, r9
 800de32:	f7f2 fa31 	bl	8000298 <__aeabi_dsub>
 800de36:	4652      	mov	r2, sl
 800de38:	465b      	mov	r3, fp
 800de3a:	4680      	mov	r8, r0
 800de3c:	4689      	mov	r9, r1
 800de3e:	f7f2 fe73 	bl	8000b28 <__aeabi_dcmpgt>
 800de42:	2800      	cmp	r0, #0
 800de44:	f040 8295 	bne.w	800e372 <_dtoa_r+0x97a>
 800de48:	4652      	mov	r2, sl
 800de4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	f7f2 fe4b 	bl	8000aec <__aeabi_dcmplt>
 800de56:	2800      	cmp	r0, #0
 800de58:	f040 8289 	bne.w	800e36e <_dtoa_r+0x976>
 800de5c:	ec5b ab19 	vmov	sl, fp, d9
 800de60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de62:	2b00      	cmp	r3, #0
 800de64:	f2c0 8148 	blt.w	800e0f8 <_dtoa_r+0x700>
 800de68:	9a00      	ldr	r2, [sp, #0]
 800de6a:	2a0e      	cmp	r2, #14
 800de6c:	f300 8144 	bgt.w	800e0f8 <_dtoa_r+0x700>
 800de70:	4b67      	ldr	r3, [pc, #412]	; (800e010 <_dtoa_r+0x618>)
 800de72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f280 80d5 	bge.w	800e02c <_dtoa_r+0x634>
 800de82:	9b03      	ldr	r3, [sp, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	f300 80d1 	bgt.w	800e02c <_dtoa_r+0x634>
 800de8a:	f040 826f 	bne.w	800e36c <_dtoa_r+0x974>
 800de8e:	4b65      	ldr	r3, [pc, #404]	; (800e024 <_dtoa_r+0x62c>)
 800de90:	2200      	movs	r2, #0
 800de92:	4640      	mov	r0, r8
 800de94:	4649      	mov	r1, r9
 800de96:	f7f2 fbb7 	bl	8000608 <__aeabi_dmul>
 800de9a:	4652      	mov	r2, sl
 800de9c:	465b      	mov	r3, fp
 800de9e:	f7f2 fe39 	bl	8000b14 <__aeabi_dcmpge>
 800dea2:	9e03      	ldr	r6, [sp, #12]
 800dea4:	4637      	mov	r7, r6
 800dea6:	2800      	cmp	r0, #0
 800dea8:	f040 8245 	bne.w	800e336 <_dtoa_r+0x93e>
 800deac:	9d01      	ldr	r5, [sp, #4]
 800deae:	2331      	movs	r3, #49	; 0x31
 800deb0:	f805 3b01 	strb.w	r3, [r5], #1
 800deb4:	9b00      	ldr	r3, [sp, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	e240      	b.n	800e33e <_dtoa_r+0x946>
 800debc:	07f2      	lsls	r2, r6, #31
 800debe:	d505      	bpl.n	800decc <_dtoa_r+0x4d4>
 800dec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dec4:	f7f2 fba0 	bl	8000608 <__aeabi_dmul>
 800dec8:	3501      	adds	r5, #1
 800deca:	2301      	movs	r3, #1
 800decc:	1076      	asrs	r6, r6, #1
 800dece:	3708      	adds	r7, #8
 800ded0:	e777      	b.n	800ddc2 <_dtoa_r+0x3ca>
 800ded2:	2502      	movs	r5, #2
 800ded4:	e779      	b.n	800ddca <_dtoa_r+0x3d2>
 800ded6:	9f00      	ldr	r7, [sp, #0]
 800ded8:	9e03      	ldr	r6, [sp, #12]
 800deda:	e794      	b.n	800de06 <_dtoa_r+0x40e>
 800dedc:	9901      	ldr	r1, [sp, #4]
 800dede:	4b4c      	ldr	r3, [pc, #304]	; (800e010 <_dtoa_r+0x618>)
 800dee0:	4431      	add	r1, r6
 800dee2:	910d      	str	r1, [sp, #52]	; 0x34
 800dee4:	9908      	ldr	r1, [sp, #32]
 800dee6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800deea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800deee:	2900      	cmp	r1, #0
 800def0:	d043      	beq.n	800df7a <_dtoa_r+0x582>
 800def2:	494d      	ldr	r1, [pc, #308]	; (800e028 <_dtoa_r+0x630>)
 800def4:	2000      	movs	r0, #0
 800def6:	f7f2 fcb1 	bl	800085c <__aeabi_ddiv>
 800defa:	4652      	mov	r2, sl
 800defc:	465b      	mov	r3, fp
 800defe:	f7f2 f9cb 	bl	8000298 <__aeabi_dsub>
 800df02:	9d01      	ldr	r5, [sp, #4]
 800df04:	4682      	mov	sl, r0
 800df06:	468b      	mov	fp, r1
 800df08:	4649      	mov	r1, r9
 800df0a:	4640      	mov	r0, r8
 800df0c:	f7f2 fe2c 	bl	8000b68 <__aeabi_d2iz>
 800df10:	4606      	mov	r6, r0
 800df12:	f7f2 fb0f 	bl	8000534 <__aeabi_i2d>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4640      	mov	r0, r8
 800df1c:	4649      	mov	r1, r9
 800df1e:	f7f2 f9bb 	bl	8000298 <__aeabi_dsub>
 800df22:	3630      	adds	r6, #48	; 0x30
 800df24:	f805 6b01 	strb.w	r6, [r5], #1
 800df28:	4652      	mov	r2, sl
 800df2a:	465b      	mov	r3, fp
 800df2c:	4680      	mov	r8, r0
 800df2e:	4689      	mov	r9, r1
 800df30:	f7f2 fddc 	bl	8000aec <__aeabi_dcmplt>
 800df34:	2800      	cmp	r0, #0
 800df36:	d163      	bne.n	800e000 <_dtoa_r+0x608>
 800df38:	4642      	mov	r2, r8
 800df3a:	464b      	mov	r3, r9
 800df3c:	4936      	ldr	r1, [pc, #216]	; (800e018 <_dtoa_r+0x620>)
 800df3e:	2000      	movs	r0, #0
 800df40:	f7f2 f9aa 	bl	8000298 <__aeabi_dsub>
 800df44:	4652      	mov	r2, sl
 800df46:	465b      	mov	r3, fp
 800df48:	f7f2 fdd0 	bl	8000aec <__aeabi_dcmplt>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	f040 80b5 	bne.w	800e0bc <_dtoa_r+0x6c4>
 800df52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df54:	429d      	cmp	r5, r3
 800df56:	d081      	beq.n	800de5c <_dtoa_r+0x464>
 800df58:	4b30      	ldr	r3, [pc, #192]	; (800e01c <_dtoa_r+0x624>)
 800df5a:	2200      	movs	r2, #0
 800df5c:	4650      	mov	r0, sl
 800df5e:	4659      	mov	r1, fp
 800df60:	f7f2 fb52 	bl	8000608 <__aeabi_dmul>
 800df64:	4b2d      	ldr	r3, [pc, #180]	; (800e01c <_dtoa_r+0x624>)
 800df66:	4682      	mov	sl, r0
 800df68:	468b      	mov	fp, r1
 800df6a:	4640      	mov	r0, r8
 800df6c:	4649      	mov	r1, r9
 800df6e:	2200      	movs	r2, #0
 800df70:	f7f2 fb4a 	bl	8000608 <__aeabi_dmul>
 800df74:	4680      	mov	r8, r0
 800df76:	4689      	mov	r9, r1
 800df78:	e7c6      	b.n	800df08 <_dtoa_r+0x510>
 800df7a:	4650      	mov	r0, sl
 800df7c:	4659      	mov	r1, fp
 800df7e:	f7f2 fb43 	bl	8000608 <__aeabi_dmul>
 800df82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df84:	9d01      	ldr	r5, [sp, #4]
 800df86:	930f      	str	r3, [sp, #60]	; 0x3c
 800df88:	4682      	mov	sl, r0
 800df8a:	468b      	mov	fp, r1
 800df8c:	4649      	mov	r1, r9
 800df8e:	4640      	mov	r0, r8
 800df90:	f7f2 fdea 	bl	8000b68 <__aeabi_d2iz>
 800df94:	4606      	mov	r6, r0
 800df96:	f7f2 facd 	bl	8000534 <__aeabi_i2d>
 800df9a:	3630      	adds	r6, #48	; 0x30
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	f7f2 f978 	bl	8000298 <__aeabi_dsub>
 800dfa8:	f805 6b01 	strb.w	r6, [r5], #1
 800dfac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfae:	429d      	cmp	r5, r3
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	4689      	mov	r9, r1
 800dfb4:	f04f 0200 	mov.w	r2, #0
 800dfb8:	d124      	bne.n	800e004 <_dtoa_r+0x60c>
 800dfba:	4b1b      	ldr	r3, [pc, #108]	; (800e028 <_dtoa_r+0x630>)
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	4659      	mov	r1, fp
 800dfc0:	f7f2 f96c 	bl	800029c <__adddf3>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4640      	mov	r0, r8
 800dfca:	4649      	mov	r1, r9
 800dfcc:	f7f2 fdac 	bl	8000b28 <__aeabi_dcmpgt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d173      	bne.n	800e0bc <_dtoa_r+0x6c4>
 800dfd4:	4652      	mov	r2, sl
 800dfd6:	465b      	mov	r3, fp
 800dfd8:	4913      	ldr	r1, [pc, #76]	; (800e028 <_dtoa_r+0x630>)
 800dfda:	2000      	movs	r0, #0
 800dfdc:	f7f2 f95c 	bl	8000298 <__aeabi_dsub>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4640      	mov	r0, r8
 800dfe6:	4649      	mov	r1, r9
 800dfe8:	f7f2 fd80 	bl	8000aec <__aeabi_dcmplt>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	f43f af35 	beq.w	800de5c <_dtoa_r+0x464>
 800dff2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dff4:	1e6b      	subs	r3, r5, #1
 800dff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dff8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dffc:	2b30      	cmp	r3, #48	; 0x30
 800dffe:	d0f8      	beq.n	800dff2 <_dtoa_r+0x5fa>
 800e000:	9700      	str	r7, [sp, #0]
 800e002:	e049      	b.n	800e098 <_dtoa_r+0x6a0>
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <_dtoa_r+0x624>)
 800e006:	f7f2 faff 	bl	8000608 <__aeabi_dmul>
 800e00a:	4680      	mov	r8, r0
 800e00c:	4689      	mov	r9, r1
 800e00e:	e7bd      	b.n	800df8c <_dtoa_r+0x594>
 800e010:	0803d4c0 	.word	0x0803d4c0
 800e014:	0803d498 	.word	0x0803d498
 800e018:	3ff00000 	.word	0x3ff00000
 800e01c:	40240000 	.word	0x40240000
 800e020:	401c0000 	.word	0x401c0000
 800e024:	40140000 	.word	0x40140000
 800e028:	3fe00000 	.word	0x3fe00000
 800e02c:	9d01      	ldr	r5, [sp, #4]
 800e02e:	4656      	mov	r6, sl
 800e030:	465f      	mov	r7, fp
 800e032:	4642      	mov	r2, r8
 800e034:	464b      	mov	r3, r9
 800e036:	4630      	mov	r0, r6
 800e038:	4639      	mov	r1, r7
 800e03a:	f7f2 fc0f 	bl	800085c <__aeabi_ddiv>
 800e03e:	f7f2 fd93 	bl	8000b68 <__aeabi_d2iz>
 800e042:	4682      	mov	sl, r0
 800e044:	f7f2 fa76 	bl	8000534 <__aeabi_i2d>
 800e048:	4642      	mov	r2, r8
 800e04a:	464b      	mov	r3, r9
 800e04c:	f7f2 fadc 	bl	8000608 <__aeabi_dmul>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4630      	mov	r0, r6
 800e056:	4639      	mov	r1, r7
 800e058:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e05c:	f7f2 f91c 	bl	8000298 <__aeabi_dsub>
 800e060:	f805 6b01 	strb.w	r6, [r5], #1
 800e064:	9e01      	ldr	r6, [sp, #4]
 800e066:	9f03      	ldr	r7, [sp, #12]
 800e068:	1bae      	subs	r6, r5, r6
 800e06a:	42b7      	cmp	r7, r6
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	d135      	bne.n	800e0de <_dtoa_r+0x6e6>
 800e072:	f7f2 f913 	bl	800029c <__adddf3>
 800e076:	4642      	mov	r2, r8
 800e078:	464b      	mov	r3, r9
 800e07a:	4606      	mov	r6, r0
 800e07c:	460f      	mov	r7, r1
 800e07e:	f7f2 fd53 	bl	8000b28 <__aeabi_dcmpgt>
 800e082:	b9d0      	cbnz	r0, 800e0ba <_dtoa_r+0x6c2>
 800e084:	4642      	mov	r2, r8
 800e086:	464b      	mov	r3, r9
 800e088:	4630      	mov	r0, r6
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 800e090:	b110      	cbz	r0, 800e098 <_dtoa_r+0x6a0>
 800e092:	f01a 0f01 	tst.w	sl, #1
 800e096:	d110      	bne.n	800e0ba <_dtoa_r+0x6c2>
 800e098:	4620      	mov	r0, r4
 800e09a:	ee18 1a10 	vmov	r1, s16
 800e09e:	f000 faf3 	bl	800e688 <_Bfree>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	9800      	ldr	r0, [sp, #0]
 800e0a6:	702b      	strb	r3, [r5, #0]
 800e0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	6018      	str	r0, [r3, #0]
 800e0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f43f acf1 	beq.w	800da98 <_dtoa_r+0xa0>
 800e0b6:	601d      	str	r5, [r3, #0]
 800e0b8:	e4ee      	b.n	800da98 <_dtoa_r+0xa0>
 800e0ba:	9f00      	ldr	r7, [sp, #0]
 800e0bc:	462b      	mov	r3, r5
 800e0be:	461d      	mov	r5, r3
 800e0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0c4:	2a39      	cmp	r2, #57	; 0x39
 800e0c6:	d106      	bne.n	800e0d6 <_dtoa_r+0x6de>
 800e0c8:	9a01      	ldr	r2, [sp, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d1f7      	bne.n	800e0be <_dtoa_r+0x6c6>
 800e0ce:	9901      	ldr	r1, [sp, #4]
 800e0d0:	2230      	movs	r2, #48	; 0x30
 800e0d2:	3701      	adds	r7, #1
 800e0d4:	700a      	strb	r2, [r1, #0]
 800e0d6:	781a      	ldrb	r2, [r3, #0]
 800e0d8:	3201      	adds	r2, #1
 800e0da:	701a      	strb	r2, [r3, #0]
 800e0dc:	e790      	b.n	800e000 <_dtoa_r+0x608>
 800e0de:	4ba6      	ldr	r3, [pc, #664]	; (800e378 <_dtoa_r+0x980>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f7f2 fa91 	bl	8000608 <__aeabi_dmul>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	f7f2 fcf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d09d      	beq.n	800e032 <_dtoa_r+0x63a>
 800e0f6:	e7cf      	b.n	800e098 <_dtoa_r+0x6a0>
 800e0f8:	9a08      	ldr	r2, [sp, #32]
 800e0fa:	2a00      	cmp	r2, #0
 800e0fc:	f000 80d7 	beq.w	800e2ae <_dtoa_r+0x8b6>
 800e100:	9a06      	ldr	r2, [sp, #24]
 800e102:	2a01      	cmp	r2, #1
 800e104:	f300 80ba 	bgt.w	800e27c <_dtoa_r+0x884>
 800e108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e10a:	2a00      	cmp	r2, #0
 800e10c:	f000 80b2 	beq.w	800e274 <_dtoa_r+0x87c>
 800e110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e114:	9e07      	ldr	r6, [sp, #28]
 800e116:	9d04      	ldr	r5, [sp, #16]
 800e118:	9a04      	ldr	r2, [sp, #16]
 800e11a:	441a      	add	r2, r3
 800e11c:	9204      	str	r2, [sp, #16]
 800e11e:	9a05      	ldr	r2, [sp, #20]
 800e120:	2101      	movs	r1, #1
 800e122:	441a      	add	r2, r3
 800e124:	4620      	mov	r0, r4
 800e126:	9205      	str	r2, [sp, #20]
 800e128:	f000 fb66 	bl	800e7f8 <__i2b>
 800e12c:	4607      	mov	r7, r0
 800e12e:	2d00      	cmp	r5, #0
 800e130:	dd0c      	ble.n	800e14c <_dtoa_r+0x754>
 800e132:	9b05      	ldr	r3, [sp, #20]
 800e134:	2b00      	cmp	r3, #0
 800e136:	dd09      	ble.n	800e14c <_dtoa_r+0x754>
 800e138:	42ab      	cmp	r3, r5
 800e13a:	9a04      	ldr	r2, [sp, #16]
 800e13c:	bfa8      	it	ge
 800e13e:	462b      	movge	r3, r5
 800e140:	1ad2      	subs	r2, r2, r3
 800e142:	9204      	str	r2, [sp, #16]
 800e144:	9a05      	ldr	r2, [sp, #20]
 800e146:	1aed      	subs	r5, r5, r3
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	9305      	str	r3, [sp, #20]
 800e14c:	9b07      	ldr	r3, [sp, #28]
 800e14e:	b31b      	cbz	r3, 800e198 <_dtoa_r+0x7a0>
 800e150:	9b08      	ldr	r3, [sp, #32]
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 80af 	beq.w	800e2b6 <_dtoa_r+0x8be>
 800e158:	2e00      	cmp	r6, #0
 800e15a:	dd13      	ble.n	800e184 <_dtoa_r+0x78c>
 800e15c:	4639      	mov	r1, r7
 800e15e:	4632      	mov	r2, r6
 800e160:	4620      	mov	r0, r4
 800e162:	f000 fc09 	bl	800e978 <__pow5mult>
 800e166:	ee18 2a10 	vmov	r2, s16
 800e16a:	4601      	mov	r1, r0
 800e16c:	4607      	mov	r7, r0
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fb58 	bl	800e824 <__multiply>
 800e174:	ee18 1a10 	vmov	r1, s16
 800e178:	4680      	mov	r8, r0
 800e17a:	4620      	mov	r0, r4
 800e17c:	f000 fa84 	bl	800e688 <_Bfree>
 800e180:	ee08 8a10 	vmov	s16, r8
 800e184:	9b07      	ldr	r3, [sp, #28]
 800e186:	1b9a      	subs	r2, r3, r6
 800e188:	d006      	beq.n	800e198 <_dtoa_r+0x7a0>
 800e18a:	ee18 1a10 	vmov	r1, s16
 800e18e:	4620      	mov	r0, r4
 800e190:	f000 fbf2 	bl	800e978 <__pow5mult>
 800e194:	ee08 0a10 	vmov	s16, r0
 800e198:	2101      	movs	r1, #1
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 fb2c 	bl	800e7f8 <__i2b>
 800e1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	f340 8088 	ble.w	800e2ba <_dtoa_r+0x8c2>
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	4601      	mov	r1, r0
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 fbe2 	bl	800e978 <__pow5mult>
 800e1b4:	9b06      	ldr	r3, [sp, #24]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	f340 8081 	ble.w	800e2c0 <_dtoa_r+0x8c8>
 800e1be:	f04f 0800 	mov.w	r8, #0
 800e1c2:	6933      	ldr	r3, [r6, #16]
 800e1c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e1c8:	6918      	ldr	r0, [r3, #16]
 800e1ca:	f000 fac5 	bl	800e758 <__hi0bits>
 800e1ce:	f1c0 0020 	rsb	r0, r0, #32
 800e1d2:	9b05      	ldr	r3, [sp, #20]
 800e1d4:	4418      	add	r0, r3
 800e1d6:	f010 001f 	ands.w	r0, r0, #31
 800e1da:	f000 8092 	beq.w	800e302 <_dtoa_r+0x90a>
 800e1de:	f1c0 0320 	rsb	r3, r0, #32
 800e1e2:	2b04      	cmp	r3, #4
 800e1e4:	f340 808a 	ble.w	800e2fc <_dtoa_r+0x904>
 800e1e8:	f1c0 001c 	rsb	r0, r0, #28
 800e1ec:	9b04      	ldr	r3, [sp, #16]
 800e1ee:	4403      	add	r3, r0
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	9b05      	ldr	r3, [sp, #20]
 800e1f4:	4403      	add	r3, r0
 800e1f6:	4405      	add	r5, r0
 800e1f8:	9305      	str	r3, [sp, #20]
 800e1fa:	9b04      	ldr	r3, [sp, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	dd07      	ble.n	800e210 <_dtoa_r+0x818>
 800e200:	ee18 1a10 	vmov	r1, s16
 800e204:	461a      	mov	r2, r3
 800e206:	4620      	mov	r0, r4
 800e208:	f000 fc10 	bl	800ea2c <__lshift>
 800e20c:	ee08 0a10 	vmov	s16, r0
 800e210:	9b05      	ldr	r3, [sp, #20]
 800e212:	2b00      	cmp	r3, #0
 800e214:	dd05      	ble.n	800e222 <_dtoa_r+0x82a>
 800e216:	4631      	mov	r1, r6
 800e218:	461a      	mov	r2, r3
 800e21a:	4620      	mov	r0, r4
 800e21c:	f000 fc06 	bl	800ea2c <__lshift>
 800e220:	4606      	mov	r6, r0
 800e222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e224:	2b00      	cmp	r3, #0
 800e226:	d06e      	beq.n	800e306 <_dtoa_r+0x90e>
 800e228:	ee18 0a10 	vmov	r0, s16
 800e22c:	4631      	mov	r1, r6
 800e22e:	f000 fc6d 	bl	800eb0c <__mcmp>
 800e232:	2800      	cmp	r0, #0
 800e234:	da67      	bge.n	800e306 <_dtoa_r+0x90e>
 800e236:	9b00      	ldr	r3, [sp, #0]
 800e238:	3b01      	subs	r3, #1
 800e23a:	ee18 1a10 	vmov	r1, s16
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	220a      	movs	r2, #10
 800e242:	2300      	movs	r3, #0
 800e244:	4620      	mov	r0, r4
 800e246:	f000 fa41 	bl	800e6cc <__multadd>
 800e24a:	9b08      	ldr	r3, [sp, #32]
 800e24c:	ee08 0a10 	vmov	s16, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 81b1 	beq.w	800e5b8 <_dtoa_r+0xbc0>
 800e256:	2300      	movs	r3, #0
 800e258:	4639      	mov	r1, r7
 800e25a:	220a      	movs	r2, #10
 800e25c:	4620      	mov	r0, r4
 800e25e:	f000 fa35 	bl	800e6cc <__multadd>
 800e262:	9b02      	ldr	r3, [sp, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	4607      	mov	r7, r0
 800e268:	f300 808e 	bgt.w	800e388 <_dtoa_r+0x990>
 800e26c:	9b06      	ldr	r3, [sp, #24]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	dc51      	bgt.n	800e316 <_dtoa_r+0x91e>
 800e272:	e089      	b.n	800e388 <_dtoa_r+0x990>
 800e274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e27a:	e74b      	b.n	800e114 <_dtoa_r+0x71c>
 800e27c:	9b03      	ldr	r3, [sp, #12]
 800e27e:	1e5e      	subs	r6, r3, #1
 800e280:	9b07      	ldr	r3, [sp, #28]
 800e282:	42b3      	cmp	r3, r6
 800e284:	bfbf      	itttt	lt
 800e286:	9b07      	ldrlt	r3, [sp, #28]
 800e288:	9607      	strlt	r6, [sp, #28]
 800e28a:	1af2      	sublt	r2, r6, r3
 800e28c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e28e:	bfb6      	itet	lt
 800e290:	189b      	addlt	r3, r3, r2
 800e292:	1b9e      	subge	r6, r3, r6
 800e294:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e296:	9b03      	ldr	r3, [sp, #12]
 800e298:	bfb8      	it	lt
 800e29a:	2600      	movlt	r6, #0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	bfb7      	itett	lt
 800e2a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e2a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e2a8:	1a9d      	sublt	r5, r3, r2
 800e2aa:	2300      	movlt	r3, #0
 800e2ac:	e734      	b.n	800e118 <_dtoa_r+0x720>
 800e2ae:	9e07      	ldr	r6, [sp, #28]
 800e2b0:	9d04      	ldr	r5, [sp, #16]
 800e2b2:	9f08      	ldr	r7, [sp, #32]
 800e2b4:	e73b      	b.n	800e12e <_dtoa_r+0x736>
 800e2b6:	9a07      	ldr	r2, [sp, #28]
 800e2b8:	e767      	b.n	800e18a <_dtoa_r+0x792>
 800e2ba:	9b06      	ldr	r3, [sp, #24]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	dc18      	bgt.n	800e2f2 <_dtoa_r+0x8fa>
 800e2c0:	f1ba 0f00 	cmp.w	sl, #0
 800e2c4:	d115      	bne.n	800e2f2 <_dtoa_r+0x8fa>
 800e2c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2ca:	b993      	cbnz	r3, 800e2f2 <_dtoa_r+0x8fa>
 800e2cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2d0:	0d1b      	lsrs	r3, r3, #20
 800e2d2:	051b      	lsls	r3, r3, #20
 800e2d4:	b183      	cbz	r3, 800e2f8 <_dtoa_r+0x900>
 800e2d6:	9b04      	ldr	r3, [sp, #16]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	9304      	str	r3, [sp, #16]
 800e2dc:	9b05      	ldr	r3, [sp, #20]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	9305      	str	r3, [sp, #20]
 800e2e2:	f04f 0801 	mov.w	r8, #1
 800e2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f47f af6a 	bne.w	800e1c2 <_dtoa_r+0x7ca>
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	e76f      	b.n	800e1d2 <_dtoa_r+0x7da>
 800e2f2:	f04f 0800 	mov.w	r8, #0
 800e2f6:	e7f6      	b.n	800e2e6 <_dtoa_r+0x8ee>
 800e2f8:	4698      	mov	r8, r3
 800e2fa:	e7f4      	b.n	800e2e6 <_dtoa_r+0x8ee>
 800e2fc:	f43f af7d 	beq.w	800e1fa <_dtoa_r+0x802>
 800e300:	4618      	mov	r0, r3
 800e302:	301c      	adds	r0, #28
 800e304:	e772      	b.n	800e1ec <_dtoa_r+0x7f4>
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	dc37      	bgt.n	800e37c <_dtoa_r+0x984>
 800e30c:	9b06      	ldr	r3, [sp, #24]
 800e30e:	2b02      	cmp	r3, #2
 800e310:	dd34      	ble.n	800e37c <_dtoa_r+0x984>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	9302      	str	r3, [sp, #8]
 800e316:	9b02      	ldr	r3, [sp, #8]
 800e318:	b96b      	cbnz	r3, 800e336 <_dtoa_r+0x93e>
 800e31a:	4631      	mov	r1, r6
 800e31c:	2205      	movs	r2, #5
 800e31e:	4620      	mov	r0, r4
 800e320:	f000 f9d4 	bl	800e6cc <__multadd>
 800e324:	4601      	mov	r1, r0
 800e326:	4606      	mov	r6, r0
 800e328:	ee18 0a10 	vmov	r0, s16
 800e32c:	f000 fbee 	bl	800eb0c <__mcmp>
 800e330:	2800      	cmp	r0, #0
 800e332:	f73f adbb 	bgt.w	800deac <_dtoa_r+0x4b4>
 800e336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e338:	9d01      	ldr	r5, [sp, #4]
 800e33a:	43db      	mvns	r3, r3
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	f04f 0800 	mov.w	r8, #0
 800e342:	4631      	mov	r1, r6
 800e344:	4620      	mov	r0, r4
 800e346:	f000 f99f 	bl	800e688 <_Bfree>
 800e34a:	2f00      	cmp	r7, #0
 800e34c:	f43f aea4 	beq.w	800e098 <_dtoa_r+0x6a0>
 800e350:	f1b8 0f00 	cmp.w	r8, #0
 800e354:	d005      	beq.n	800e362 <_dtoa_r+0x96a>
 800e356:	45b8      	cmp	r8, r7
 800e358:	d003      	beq.n	800e362 <_dtoa_r+0x96a>
 800e35a:	4641      	mov	r1, r8
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 f993 	bl	800e688 <_Bfree>
 800e362:	4639      	mov	r1, r7
 800e364:	4620      	mov	r0, r4
 800e366:	f000 f98f 	bl	800e688 <_Bfree>
 800e36a:	e695      	b.n	800e098 <_dtoa_r+0x6a0>
 800e36c:	2600      	movs	r6, #0
 800e36e:	4637      	mov	r7, r6
 800e370:	e7e1      	b.n	800e336 <_dtoa_r+0x93e>
 800e372:	9700      	str	r7, [sp, #0]
 800e374:	4637      	mov	r7, r6
 800e376:	e599      	b.n	800deac <_dtoa_r+0x4b4>
 800e378:	40240000 	.word	0x40240000
 800e37c:	9b08      	ldr	r3, [sp, #32]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 80ca 	beq.w	800e518 <_dtoa_r+0xb20>
 800e384:	9b03      	ldr	r3, [sp, #12]
 800e386:	9302      	str	r3, [sp, #8]
 800e388:	2d00      	cmp	r5, #0
 800e38a:	dd05      	ble.n	800e398 <_dtoa_r+0x9a0>
 800e38c:	4639      	mov	r1, r7
 800e38e:	462a      	mov	r2, r5
 800e390:	4620      	mov	r0, r4
 800e392:	f000 fb4b 	bl	800ea2c <__lshift>
 800e396:	4607      	mov	r7, r0
 800e398:	f1b8 0f00 	cmp.w	r8, #0
 800e39c:	d05b      	beq.n	800e456 <_dtoa_r+0xa5e>
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 f931 	bl	800e608 <_Balloc>
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	b928      	cbnz	r0, 800e3b6 <_dtoa_r+0x9be>
 800e3aa:	4b87      	ldr	r3, [pc, #540]	; (800e5c8 <_dtoa_r+0xbd0>)
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e3b2:	f7ff bb3b 	b.w	800da2c <_dtoa_r+0x34>
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	3202      	adds	r2, #2
 800e3ba:	0092      	lsls	r2, r2, #2
 800e3bc:	f107 010c 	add.w	r1, r7, #12
 800e3c0:	300c      	adds	r0, #12
 800e3c2:	f000 f913 	bl	800e5ec <memcpy>
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f000 fb2e 	bl	800ea2c <__lshift>
 800e3d0:	9b01      	ldr	r3, [sp, #4]
 800e3d2:	f103 0901 	add.w	r9, r3, #1
 800e3d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e3da:	4413      	add	r3, r2
 800e3dc:	9305      	str	r3, [sp, #20]
 800e3de:	f00a 0301 	and.w	r3, sl, #1
 800e3e2:	46b8      	mov	r8, r7
 800e3e4:	9304      	str	r3, [sp, #16]
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	ee18 0a10 	vmov	r0, s16
 800e3ee:	f7ff fa76 	bl	800d8de <quorem>
 800e3f2:	4641      	mov	r1, r8
 800e3f4:	9002      	str	r0, [sp, #8]
 800e3f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e3fa:	ee18 0a10 	vmov	r0, s16
 800e3fe:	f000 fb85 	bl	800eb0c <__mcmp>
 800e402:	463a      	mov	r2, r7
 800e404:	9003      	str	r0, [sp, #12]
 800e406:	4631      	mov	r1, r6
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 fb9b 	bl	800eb44 <__mdiff>
 800e40e:	68c2      	ldr	r2, [r0, #12]
 800e410:	f109 3bff 	add.w	fp, r9, #4294967295
 800e414:	4605      	mov	r5, r0
 800e416:	bb02      	cbnz	r2, 800e45a <_dtoa_r+0xa62>
 800e418:	4601      	mov	r1, r0
 800e41a:	ee18 0a10 	vmov	r0, s16
 800e41e:	f000 fb75 	bl	800eb0c <__mcmp>
 800e422:	4602      	mov	r2, r0
 800e424:	4629      	mov	r1, r5
 800e426:	4620      	mov	r0, r4
 800e428:	9207      	str	r2, [sp, #28]
 800e42a:	f000 f92d 	bl	800e688 <_Bfree>
 800e42e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e432:	ea43 0102 	orr.w	r1, r3, r2
 800e436:	9b04      	ldr	r3, [sp, #16]
 800e438:	430b      	orrs	r3, r1
 800e43a:	464d      	mov	r5, r9
 800e43c:	d10f      	bne.n	800e45e <_dtoa_r+0xa66>
 800e43e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e442:	d02a      	beq.n	800e49a <_dtoa_r+0xaa2>
 800e444:	9b03      	ldr	r3, [sp, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	dd02      	ble.n	800e450 <_dtoa_r+0xa58>
 800e44a:	9b02      	ldr	r3, [sp, #8]
 800e44c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e450:	f88b a000 	strb.w	sl, [fp]
 800e454:	e775      	b.n	800e342 <_dtoa_r+0x94a>
 800e456:	4638      	mov	r0, r7
 800e458:	e7ba      	b.n	800e3d0 <_dtoa_r+0x9d8>
 800e45a:	2201      	movs	r2, #1
 800e45c:	e7e2      	b.n	800e424 <_dtoa_r+0xa2c>
 800e45e:	9b03      	ldr	r3, [sp, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	db04      	blt.n	800e46e <_dtoa_r+0xa76>
 800e464:	9906      	ldr	r1, [sp, #24]
 800e466:	430b      	orrs	r3, r1
 800e468:	9904      	ldr	r1, [sp, #16]
 800e46a:	430b      	orrs	r3, r1
 800e46c:	d122      	bne.n	800e4b4 <_dtoa_r+0xabc>
 800e46e:	2a00      	cmp	r2, #0
 800e470:	ddee      	ble.n	800e450 <_dtoa_r+0xa58>
 800e472:	ee18 1a10 	vmov	r1, s16
 800e476:	2201      	movs	r2, #1
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 fad7 	bl	800ea2c <__lshift>
 800e47e:	4631      	mov	r1, r6
 800e480:	ee08 0a10 	vmov	s16, r0
 800e484:	f000 fb42 	bl	800eb0c <__mcmp>
 800e488:	2800      	cmp	r0, #0
 800e48a:	dc03      	bgt.n	800e494 <_dtoa_r+0xa9c>
 800e48c:	d1e0      	bne.n	800e450 <_dtoa_r+0xa58>
 800e48e:	f01a 0f01 	tst.w	sl, #1
 800e492:	d0dd      	beq.n	800e450 <_dtoa_r+0xa58>
 800e494:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e498:	d1d7      	bne.n	800e44a <_dtoa_r+0xa52>
 800e49a:	2339      	movs	r3, #57	; 0x39
 800e49c:	f88b 3000 	strb.w	r3, [fp]
 800e4a0:	462b      	mov	r3, r5
 800e4a2:	461d      	mov	r5, r3
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4aa:	2a39      	cmp	r2, #57	; 0x39
 800e4ac:	d071      	beq.n	800e592 <_dtoa_r+0xb9a>
 800e4ae:	3201      	adds	r2, #1
 800e4b0:	701a      	strb	r2, [r3, #0]
 800e4b2:	e746      	b.n	800e342 <_dtoa_r+0x94a>
 800e4b4:	2a00      	cmp	r2, #0
 800e4b6:	dd07      	ble.n	800e4c8 <_dtoa_r+0xad0>
 800e4b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4bc:	d0ed      	beq.n	800e49a <_dtoa_r+0xaa2>
 800e4be:	f10a 0301 	add.w	r3, sl, #1
 800e4c2:	f88b 3000 	strb.w	r3, [fp]
 800e4c6:	e73c      	b.n	800e342 <_dtoa_r+0x94a>
 800e4c8:	9b05      	ldr	r3, [sp, #20]
 800e4ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e4ce:	4599      	cmp	r9, r3
 800e4d0:	d047      	beq.n	800e562 <_dtoa_r+0xb6a>
 800e4d2:	ee18 1a10 	vmov	r1, s16
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	220a      	movs	r2, #10
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f000 f8f6 	bl	800e6cc <__multadd>
 800e4e0:	45b8      	cmp	r8, r7
 800e4e2:	ee08 0a10 	vmov	s16, r0
 800e4e6:	f04f 0300 	mov.w	r3, #0
 800e4ea:	f04f 020a 	mov.w	r2, #10
 800e4ee:	4641      	mov	r1, r8
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	d106      	bne.n	800e502 <_dtoa_r+0xb0a>
 800e4f4:	f000 f8ea 	bl	800e6cc <__multadd>
 800e4f8:	4680      	mov	r8, r0
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	f109 0901 	add.w	r9, r9, #1
 800e500:	e772      	b.n	800e3e8 <_dtoa_r+0x9f0>
 800e502:	f000 f8e3 	bl	800e6cc <__multadd>
 800e506:	4639      	mov	r1, r7
 800e508:	4680      	mov	r8, r0
 800e50a:	2300      	movs	r3, #0
 800e50c:	220a      	movs	r2, #10
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 f8dc 	bl	800e6cc <__multadd>
 800e514:	4607      	mov	r7, r0
 800e516:	e7f1      	b.n	800e4fc <_dtoa_r+0xb04>
 800e518:	9b03      	ldr	r3, [sp, #12]
 800e51a:	9302      	str	r3, [sp, #8]
 800e51c:	9d01      	ldr	r5, [sp, #4]
 800e51e:	ee18 0a10 	vmov	r0, s16
 800e522:	4631      	mov	r1, r6
 800e524:	f7ff f9db 	bl	800d8de <quorem>
 800e528:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e52c:	9b01      	ldr	r3, [sp, #4]
 800e52e:	f805 ab01 	strb.w	sl, [r5], #1
 800e532:	1aea      	subs	r2, r5, r3
 800e534:	9b02      	ldr	r3, [sp, #8]
 800e536:	4293      	cmp	r3, r2
 800e538:	dd09      	ble.n	800e54e <_dtoa_r+0xb56>
 800e53a:	ee18 1a10 	vmov	r1, s16
 800e53e:	2300      	movs	r3, #0
 800e540:	220a      	movs	r2, #10
 800e542:	4620      	mov	r0, r4
 800e544:	f000 f8c2 	bl	800e6cc <__multadd>
 800e548:	ee08 0a10 	vmov	s16, r0
 800e54c:	e7e7      	b.n	800e51e <_dtoa_r+0xb26>
 800e54e:	9b02      	ldr	r3, [sp, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	bfc8      	it	gt
 800e554:	461d      	movgt	r5, r3
 800e556:	9b01      	ldr	r3, [sp, #4]
 800e558:	bfd8      	it	le
 800e55a:	2501      	movle	r5, #1
 800e55c:	441d      	add	r5, r3
 800e55e:	f04f 0800 	mov.w	r8, #0
 800e562:	ee18 1a10 	vmov	r1, s16
 800e566:	2201      	movs	r2, #1
 800e568:	4620      	mov	r0, r4
 800e56a:	f000 fa5f 	bl	800ea2c <__lshift>
 800e56e:	4631      	mov	r1, r6
 800e570:	ee08 0a10 	vmov	s16, r0
 800e574:	f000 faca 	bl	800eb0c <__mcmp>
 800e578:	2800      	cmp	r0, #0
 800e57a:	dc91      	bgt.n	800e4a0 <_dtoa_r+0xaa8>
 800e57c:	d102      	bne.n	800e584 <_dtoa_r+0xb8c>
 800e57e:	f01a 0f01 	tst.w	sl, #1
 800e582:	d18d      	bne.n	800e4a0 <_dtoa_r+0xaa8>
 800e584:	462b      	mov	r3, r5
 800e586:	461d      	mov	r5, r3
 800e588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e58c:	2a30      	cmp	r2, #48	; 0x30
 800e58e:	d0fa      	beq.n	800e586 <_dtoa_r+0xb8e>
 800e590:	e6d7      	b.n	800e342 <_dtoa_r+0x94a>
 800e592:	9a01      	ldr	r2, [sp, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d184      	bne.n	800e4a2 <_dtoa_r+0xaaa>
 800e598:	9b00      	ldr	r3, [sp, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	2331      	movs	r3, #49	; 0x31
 800e5a0:	7013      	strb	r3, [r2, #0]
 800e5a2:	e6ce      	b.n	800e342 <_dtoa_r+0x94a>
 800e5a4:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <_dtoa_r+0xbd4>)
 800e5a6:	f7ff ba95 	b.w	800dad4 <_dtoa_r+0xdc>
 800e5aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f47f aa6e 	bne.w	800da8e <_dtoa_r+0x96>
 800e5b2:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <_dtoa_r+0xbd8>)
 800e5b4:	f7ff ba8e 	b.w	800dad4 <_dtoa_r+0xdc>
 800e5b8:	9b02      	ldr	r3, [sp, #8]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	dcae      	bgt.n	800e51c <_dtoa_r+0xb24>
 800e5be:	9b06      	ldr	r3, [sp, #24]
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	f73f aea8 	bgt.w	800e316 <_dtoa_r+0x91e>
 800e5c6:	e7a9      	b.n	800e51c <_dtoa_r+0xb24>
 800e5c8:	0803d427 	.word	0x0803d427
 800e5cc:	0803d384 	.word	0x0803d384
 800e5d0:	0803d3a8 	.word	0x0803d3a8

0800e5d4 <_localeconv_r>:
 800e5d4:	4800      	ldr	r0, [pc, #0]	; (800e5d8 <_localeconv_r+0x4>)
 800e5d6:	4770      	bx	lr
 800e5d8:	200003a4 	.word	0x200003a4

0800e5dc <malloc>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	; (800e5e8 <malloc+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f000 bc17 	b.w	800ee14 <_malloc_r>
 800e5e6:	bf00      	nop
 800e5e8:	20000250 	.word	0x20000250

0800e5ec <memcpy>:
 800e5ec:	440a      	add	r2, r1
 800e5ee:	4291      	cmp	r1, r2
 800e5f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5f4:	d100      	bne.n	800e5f8 <memcpy+0xc>
 800e5f6:	4770      	bx	lr
 800e5f8:	b510      	push	{r4, lr}
 800e5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e602:	4291      	cmp	r1, r2
 800e604:	d1f9      	bne.n	800e5fa <memcpy+0xe>
 800e606:	bd10      	pop	{r4, pc}

0800e608 <_Balloc>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e60c:	4604      	mov	r4, r0
 800e60e:	460d      	mov	r5, r1
 800e610:	b976      	cbnz	r6, 800e630 <_Balloc+0x28>
 800e612:	2010      	movs	r0, #16
 800e614:	f7ff ffe2 	bl	800e5dc <malloc>
 800e618:	4602      	mov	r2, r0
 800e61a:	6260      	str	r0, [r4, #36]	; 0x24
 800e61c:	b920      	cbnz	r0, 800e628 <_Balloc+0x20>
 800e61e:	4b18      	ldr	r3, [pc, #96]	; (800e680 <_Balloc+0x78>)
 800e620:	4818      	ldr	r0, [pc, #96]	; (800e684 <_Balloc+0x7c>)
 800e622:	2166      	movs	r1, #102	; 0x66
 800e624:	f000 fdd6 	bl	800f1d4 <__assert_func>
 800e628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e62c:	6006      	str	r6, [r0, #0]
 800e62e:	60c6      	str	r6, [r0, #12]
 800e630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e632:	68f3      	ldr	r3, [r6, #12]
 800e634:	b183      	cbz	r3, 800e658 <_Balloc+0x50>
 800e636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e63e:	b9b8      	cbnz	r0, 800e670 <_Balloc+0x68>
 800e640:	2101      	movs	r1, #1
 800e642:	fa01 f605 	lsl.w	r6, r1, r5
 800e646:	1d72      	adds	r2, r6, #5
 800e648:	0092      	lsls	r2, r2, #2
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 fb60 	bl	800ed10 <_calloc_r>
 800e650:	b160      	cbz	r0, 800e66c <_Balloc+0x64>
 800e652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e656:	e00e      	b.n	800e676 <_Balloc+0x6e>
 800e658:	2221      	movs	r2, #33	; 0x21
 800e65a:	2104      	movs	r1, #4
 800e65c:	4620      	mov	r0, r4
 800e65e:	f000 fb57 	bl	800ed10 <_calloc_r>
 800e662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e664:	60f0      	str	r0, [r6, #12]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1e4      	bne.n	800e636 <_Balloc+0x2e>
 800e66c:	2000      	movs	r0, #0
 800e66e:	bd70      	pop	{r4, r5, r6, pc}
 800e670:	6802      	ldr	r2, [r0, #0]
 800e672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e676:	2300      	movs	r3, #0
 800e678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e67c:	e7f7      	b.n	800e66e <_Balloc+0x66>
 800e67e:	bf00      	nop
 800e680:	0803d3b5 	.word	0x0803d3b5
 800e684:	0803d438 	.word	0x0803d438

0800e688 <_Bfree>:
 800e688:	b570      	push	{r4, r5, r6, lr}
 800e68a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e68c:	4605      	mov	r5, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	b976      	cbnz	r6, 800e6b0 <_Bfree+0x28>
 800e692:	2010      	movs	r0, #16
 800e694:	f7ff ffa2 	bl	800e5dc <malloc>
 800e698:	4602      	mov	r2, r0
 800e69a:	6268      	str	r0, [r5, #36]	; 0x24
 800e69c:	b920      	cbnz	r0, 800e6a8 <_Bfree+0x20>
 800e69e:	4b09      	ldr	r3, [pc, #36]	; (800e6c4 <_Bfree+0x3c>)
 800e6a0:	4809      	ldr	r0, [pc, #36]	; (800e6c8 <_Bfree+0x40>)
 800e6a2:	218a      	movs	r1, #138	; 0x8a
 800e6a4:	f000 fd96 	bl	800f1d4 <__assert_func>
 800e6a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6ac:	6006      	str	r6, [r0, #0]
 800e6ae:	60c6      	str	r6, [r0, #12]
 800e6b0:	b13c      	cbz	r4, 800e6c2 <_Bfree+0x3a>
 800e6b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6b4:	6862      	ldr	r2, [r4, #4]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6bc:	6021      	str	r1, [r4, #0]
 800e6be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	0803d3b5 	.word	0x0803d3b5
 800e6c8:	0803d438 	.word	0x0803d438

0800e6cc <__multadd>:
 800e6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d0:	690d      	ldr	r5, [r1, #16]
 800e6d2:	4607      	mov	r7, r0
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	461e      	mov	r6, r3
 800e6d8:	f101 0c14 	add.w	ip, r1, #20
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f8dc 3000 	ldr.w	r3, [ip]
 800e6e2:	b299      	uxth	r1, r3
 800e6e4:	fb02 6101 	mla	r1, r2, r1, r6
 800e6e8:	0c1e      	lsrs	r6, r3, #16
 800e6ea:	0c0b      	lsrs	r3, r1, #16
 800e6ec:	fb02 3306 	mla	r3, r2, r6, r3
 800e6f0:	b289      	uxth	r1, r1
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e6f8:	4285      	cmp	r5, r0
 800e6fa:	f84c 1b04 	str.w	r1, [ip], #4
 800e6fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e702:	dcec      	bgt.n	800e6de <__multadd+0x12>
 800e704:	b30e      	cbz	r6, 800e74a <__multadd+0x7e>
 800e706:	68a3      	ldr	r3, [r4, #8]
 800e708:	42ab      	cmp	r3, r5
 800e70a:	dc19      	bgt.n	800e740 <__multadd+0x74>
 800e70c:	6861      	ldr	r1, [r4, #4]
 800e70e:	4638      	mov	r0, r7
 800e710:	3101      	adds	r1, #1
 800e712:	f7ff ff79 	bl	800e608 <_Balloc>
 800e716:	4680      	mov	r8, r0
 800e718:	b928      	cbnz	r0, 800e726 <__multadd+0x5a>
 800e71a:	4602      	mov	r2, r0
 800e71c:	4b0c      	ldr	r3, [pc, #48]	; (800e750 <__multadd+0x84>)
 800e71e:	480d      	ldr	r0, [pc, #52]	; (800e754 <__multadd+0x88>)
 800e720:	21b5      	movs	r1, #181	; 0xb5
 800e722:	f000 fd57 	bl	800f1d4 <__assert_func>
 800e726:	6922      	ldr	r2, [r4, #16]
 800e728:	3202      	adds	r2, #2
 800e72a:	f104 010c 	add.w	r1, r4, #12
 800e72e:	0092      	lsls	r2, r2, #2
 800e730:	300c      	adds	r0, #12
 800e732:	f7ff ff5b 	bl	800e5ec <memcpy>
 800e736:	4621      	mov	r1, r4
 800e738:	4638      	mov	r0, r7
 800e73a:	f7ff ffa5 	bl	800e688 <_Bfree>
 800e73e:	4644      	mov	r4, r8
 800e740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e744:	3501      	adds	r5, #1
 800e746:	615e      	str	r6, [r3, #20]
 800e748:	6125      	str	r5, [r4, #16]
 800e74a:	4620      	mov	r0, r4
 800e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e750:	0803d427 	.word	0x0803d427
 800e754:	0803d438 	.word	0x0803d438

0800e758 <__hi0bits>:
 800e758:	0c03      	lsrs	r3, r0, #16
 800e75a:	041b      	lsls	r3, r3, #16
 800e75c:	b9d3      	cbnz	r3, 800e794 <__hi0bits+0x3c>
 800e75e:	0400      	lsls	r0, r0, #16
 800e760:	2310      	movs	r3, #16
 800e762:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e766:	bf04      	itt	eq
 800e768:	0200      	lsleq	r0, r0, #8
 800e76a:	3308      	addeq	r3, #8
 800e76c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e770:	bf04      	itt	eq
 800e772:	0100      	lsleq	r0, r0, #4
 800e774:	3304      	addeq	r3, #4
 800e776:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e77a:	bf04      	itt	eq
 800e77c:	0080      	lsleq	r0, r0, #2
 800e77e:	3302      	addeq	r3, #2
 800e780:	2800      	cmp	r0, #0
 800e782:	db05      	blt.n	800e790 <__hi0bits+0x38>
 800e784:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e788:	f103 0301 	add.w	r3, r3, #1
 800e78c:	bf08      	it	eq
 800e78e:	2320      	moveq	r3, #32
 800e790:	4618      	mov	r0, r3
 800e792:	4770      	bx	lr
 800e794:	2300      	movs	r3, #0
 800e796:	e7e4      	b.n	800e762 <__hi0bits+0xa>

0800e798 <__lo0bits>:
 800e798:	6803      	ldr	r3, [r0, #0]
 800e79a:	f013 0207 	ands.w	r2, r3, #7
 800e79e:	4601      	mov	r1, r0
 800e7a0:	d00b      	beq.n	800e7ba <__lo0bits+0x22>
 800e7a2:	07da      	lsls	r2, r3, #31
 800e7a4:	d423      	bmi.n	800e7ee <__lo0bits+0x56>
 800e7a6:	0798      	lsls	r0, r3, #30
 800e7a8:	bf49      	itett	mi
 800e7aa:	085b      	lsrmi	r3, r3, #1
 800e7ac:	089b      	lsrpl	r3, r3, #2
 800e7ae:	2001      	movmi	r0, #1
 800e7b0:	600b      	strmi	r3, [r1, #0]
 800e7b2:	bf5c      	itt	pl
 800e7b4:	600b      	strpl	r3, [r1, #0]
 800e7b6:	2002      	movpl	r0, #2
 800e7b8:	4770      	bx	lr
 800e7ba:	b298      	uxth	r0, r3
 800e7bc:	b9a8      	cbnz	r0, 800e7ea <__lo0bits+0x52>
 800e7be:	0c1b      	lsrs	r3, r3, #16
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	b90a      	cbnz	r2, 800e7ca <__lo0bits+0x32>
 800e7c6:	3008      	adds	r0, #8
 800e7c8:	0a1b      	lsrs	r3, r3, #8
 800e7ca:	071a      	lsls	r2, r3, #28
 800e7cc:	bf04      	itt	eq
 800e7ce:	091b      	lsreq	r3, r3, #4
 800e7d0:	3004      	addeq	r0, #4
 800e7d2:	079a      	lsls	r2, r3, #30
 800e7d4:	bf04      	itt	eq
 800e7d6:	089b      	lsreq	r3, r3, #2
 800e7d8:	3002      	addeq	r0, #2
 800e7da:	07da      	lsls	r2, r3, #31
 800e7dc:	d403      	bmi.n	800e7e6 <__lo0bits+0x4e>
 800e7de:	085b      	lsrs	r3, r3, #1
 800e7e0:	f100 0001 	add.w	r0, r0, #1
 800e7e4:	d005      	beq.n	800e7f2 <__lo0bits+0x5a>
 800e7e6:	600b      	str	r3, [r1, #0]
 800e7e8:	4770      	bx	lr
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	e7e9      	b.n	800e7c2 <__lo0bits+0x2a>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	4770      	bx	lr
 800e7f2:	2020      	movs	r0, #32
 800e7f4:	4770      	bx	lr
	...

0800e7f8 <__i2b>:
 800e7f8:	b510      	push	{r4, lr}
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	2101      	movs	r1, #1
 800e7fe:	f7ff ff03 	bl	800e608 <_Balloc>
 800e802:	4602      	mov	r2, r0
 800e804:	b928      	cbnz	r0, 800e812 <__i2b+0x1a>
 800e806:	4b05      	ldr	r3, [pc, #20]	; (800e81c <__i2b+0x24>)
 800e808:	4805      	ldr	r0, [pc, #20]	; (800e820 <__i2b+0x28>)
 800e80a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e80e:	f000 fce1 	bl	800f1d4 <__assert_func>
 800e812:	2301      	movs	r3, #1
 800e814:	6144      	str	r4, [r0, #20]
 800e816:	6103      	str	r3, [r0, #16]
 800e818:	bd10      	pop	{r4, pc}
 800e81a:	bf00      	nop
 800e81c:	0803d427 	.word	0x0803d427
 800e820:	0803d438 	.word	0x0803d438

0800e824 <__multiply>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	4691      	mov	r9, r2
 800e82a:	690a      	ldr	r2, [r1, #16]
 800e82c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e830:	429a      	cmp	r2, r3
 800e832:	bfb8      	it	lt
 800e834:	460b      	movlt	r3, r1
 800e836:	460c      	mov	r4, r1
 800e838:	bfbc      	itt	lt
 800e83a:	464c      	movlt	r4, r9
 800e83c:	4699      	movlt	r9, r3
 800e83e:	6927      	ldr	r7, [r4, #16]
 800e840:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e844:	68a3      	ldr	r3, [r4, #8]
 800e846:	6861      	ldr	r1, [r4, #4]
 800e848:	eb07 060a 	add.w	r6, r7, sl
 800e84c:	42b3      	cmp	r3, r6
 800e84e:	b085      	sub	sp, #20
 800e850:	bfb8      	it	lt
 800e852:	3101      	addlt	r1, #1
 800e854:	f7ff fed8 	bl	800e608 <_Balloc>
 800e858:	b930      	cbnz	r0, 800e868 <__multiply+0x44>
 800e85a:	4602      	mov	r2, r0
 800e85c:	4b44      	ldr	r3, [pc, #272]	; (800e970 <__multiply+0x14c>)
 800e85e:	4845      	ldr	r0, [pc, #276]	; (800e974 <__multiply+0x150>)
 800e860:	f240 115d 	movw	r1, #349	; 0x15d
 800e864:	f000 fcb6 	bl	800f1d4 <__assert_func>
 800e868:	f100 0514 	add.w	r5, r0, #20
 800e86c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e870:	462b      	mov	r3, r5
 800e872:	2200      	movs	r2, #0
 800e874:	4543      	cmp	r3, r8
 800e876:	d321      	bcc.n	800e8bc <__multiply+0x98>
 800e878:	f104 0314 	add.w	r3, r4, #20
 800e87c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e880:	f109 0314 	add.w	r3, r9, #20
 800e884:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e888:	9202      	str	r2, [sp, #8]
 800e88a:	1b3a      	subs	r2, r7, r4
 800e88c:	3a15      	subs	r2, #21
 800e88e:	f022 0203 	bic.w	r2, r2, #3
 800e892:	3204      	adds	r2, #4
 800e894:	f104 0115 	add.w	r1, r4, #21
 800e898:	428f      	cmp	r7, r1
 800e89a:	bf38      	it	cc
 800e89c:	2204      	movcc	r2, #4
 800e89e:	9201      	str	r2, [sp, #4]
 800e8a0:	9a02      	ldr	r2, [sp, #8]
 800e8a2:	9303      	str	r3, [sp, #12]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d80c      	bhi.n	800e8c2 <__multiply+0x9e>
 800e8a8:	2e00      	cmp	r6, #0
 800e8aa:	dd03      	ble.n	800e8b4 <__multiply+0x90>
 800e8ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d05a      	beq.n	800e96a <__multiply+0x146>
 800e8b4:	6106      	str	r6, [r0, #16]
 800e8b6:	b005      	add	sp, #20
 800e8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8bc:	f843 2b04 	str.w	r2, [r3], #4
 800e8c0:	e7d8      	b.n	800e874 <__multiply+0x50>
 800e8c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8c6:	f1ba 0f00 	cmp.w	sl, #0
 800e8ca:	d024      	beq.n	800e916 <__multiply+0xf2>
 800e8cc:	f104 0e14 	add.w	lr, r4, #20
 800e8d0:	46a9      	mov	r9, r5
 800e8d2:	f04f 0c00 	mov.w	ip, #0
 800e8d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8da:	f8d9 1000 	ldr.w	r1, [r9]
 800e8de:	fa1f fb82 	uxth.w	fp, r2
 800e8e2:	b289      	uxth	r1, r1
 800e8e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e8f0:	4461      	add	r1, ip
 800e8f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e8fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e8fe:	b289      	uxth	r1, r1
 800e900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e904:	4577      	cmp	r7, lr
 800e906:	f849 1b04 	str.w	r1, [r9], #4
 800e90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e90e:	d8e2      	bhi.n	800e8d6 <__multiply+0xb2>
 800e910:	9a01      	ldr	r2, [sp, #4]
 800e912:	f845 c002 	str.w	ip, [r5, r2]
 800e916:	9a03      	ldr	r2, [sp, #12]
 800e918:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e91c:	3304      	adds	r3, #4
 800e91e:	f1b9 0f00 	cmp.w	r9, #0
 800e922:	d020      	beq.n	800e966 <__multiply+0x142>
 800e924:	6829      	ldr	r1, [r5, #0]
 800e926:	f104 0c14 	add.w	ip, r4, #20
 800e92a:	46ae      	mov	lr, r5
 800e92c:	f04f 0a00 	mov.w	sl, #0
 800e930:	f8bc b000 	ldrh.w	fp, [ip]
 800e934:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e938:	fb09 220b 	mla	r2, r9, fp, r2
 800e93c:	4492      	add	sl, r2
 800e93e:	b289      	uxth	r1, r1
 800e940:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e944:	f84e 1b04 	str.w	r1, [lr], #4
 800e948:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e94c:	f8be 1000 	ldrh.w	r1, [lr]
 800e950:	0c12      	lsrs	r2, r2, #16
 800e952:	fb09 1102 	mla	r1, r9, r2, r1
 800e956:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e95a:	4567      	cmp	r7, ip
 800e95c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e960:	d8e6      	bhi.n	800e930 <__multiply+0x10c>
 800e962:	9a01      	ldr	r2, [sp, #4]
 800e964:	50a9      	str	r1, [r5, r2]
 800e966:	3504      	adds	r5, #4
 800e968:	e79a      	b.n	800e8a0 <__multiply+0x7c>
 800e96a:	3e01      	subs	r6, #1
 800e96c:	e79c      	b.n	800e8a8 <__multiply+0x84>
 800e96e:	bf00      	nop
 800e970:	0803d427 	.word	0x0803d427
 800e974:	0803d438 	.word	0x0803d438

0800e978 <__pow5mult>:
 800e978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e97c:	4615      	mov	r5, r2
 800e97e:	f012 0203 	ands.w	r2, r2, #3
 800e982:	4606      	mov	r6, r0
 800e984:	460f      	mov	r7, r1
 800e986:	d007      	beq.n	800e998 <__pow5mult+0x20>
 800e988:	4c25      	ldr	r4, [pc, #148]	; (800ea20 <__pow5mult+0xa8>)
 800e98a:	3a01      	subs	r2, #1
 800e98c:	2300      	movs	r3, #0
 800e98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e992:	f7ff fe9b 	bl	800e6cc <__multadd>
 800e996:	4607      	mov	r7, r0
 800e998:	10ad      	asrs	r5, r5, #2
 800e99a:	d03d      	beq.n	800ea18 <__pow5mult+0xa0>
 800e99c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e99e:	b97c      	cbnz	r4, 800e9c0 <__pow5mult+0x48>
 800e9a0:	2010      	movs	r0, #16
 800e9a2:	f7ff fe1b 	bl	800e5dc <malloc>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	6270      	str	r0, [r6, #36]	; 0x24
 800e9aa:	b928      	cbnz	r0, 800e9b8 <__pow5mult+0x40>
 800e9ac:	4b1d      	ldr	r3, [pc, #116]	; (800ea24 <__pow5mult+0xac>)
 800e9ae:	481e      	ldr	r0, [pc, #120]	; (800ea28 <__pow5mult+0xb0>)
 800e9b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e9b4:	f000 fc0e 	bl	800f1d4 <__assert_func>
 800e9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9bc:	6004      	str	r4, [r0, #0]
 800e9be:	60c4      	str	r4, [r0, #12]
 800e9c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9c8:	b94c      	cbnz	r4, 800e9de <__pow5mult+0x66>
 800e9ca:	f240 2171 	movw	r1, #625	; 0x271
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f7ff ff12 	bl	800e7f8 <__i2b>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9da:	4604      	mov	r4, r0
 800e9dc:	6003      	str	r3, [r0, #0]
 800e9de:	f04f 0900 	mov.w	r9, #0
 800e9e2:	07eb      	lsls	r3, r5, #31
 800e9e4:	d50a      	bpl.n	800e9fc <__pow5mult+0x84>
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f7ff ff1a 	bl	800e824 <__multiply>
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	4680      	mov	r8, r0
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f7ff fe47 	bl	800e688 <_Bfree>
 800e9fa:	4647      	mov	r7, r8
 800e9fc:	106d      	asrs	r5, r5, #1
 800e9fe:	d00b      	beq.n	800ea18 <__pow5mult+0xa0>
 800ea00:	6820      	ldr	r0, [r4, #0]
 800ea02:	b938      	cbnz	r0, 800ea14 <__pow5mult+0x9c>
 800ea04:	4622      	mov	r2, r4
 800ea06:	4621      	mov	r1, r4
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f7ff ff0b 	bl	800e824 <__multiply>
 800ea0e:	6020      	str	r0, [r4, #0]
 800ea10:	f8c0 9000 	str.w	r9, [r0]
 800ea14:	4604      	mov	r4, r0
 800ea16:	e7e4      	b.n	800e9e2 <__pow5mult+0x6a>
 800ea18:	4638      	mov	r0, r7
 800ea1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea1e:	bf00      	nop
 800ea20:	0803d588 	.word	0x0803d588
 800ea24:	0803d3b5 	.word	0x0803d3b5
 800ea28:	0803d438 	.word	0x0803d438

0800ea2c <__lshift>:
 800ea2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea30:	460c      	mov	r4, r1
 800ea32:	6849      	ldr	r1, [r1, #4]
 800ea34:	6923      	ldr	r3, [r4, #16]
 800ea36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea3a:	68a3      	ldr	r3, [r4, #8]
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	4691      	mov	r9, r2
 800ea40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea44:	f108 0601 	add.w	r6, r8, #1
 800ea48:	42b3      	cmp	r3, r6
 800ea4a:	db0b      	blt.n	800ea64 <__lshift+0x38>
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	f7ff fddb 	bl	800e608 <_Balloc>
 800ea52:	4605      	mov	r5, r0
 800ea54:	b948      	cbnz	r0, 800ea6a <__lshift+0x3e>
 800ea56:	4602      	mov	r2, r0
 800ea58:	4b2a      	ldr	r3, [pc, #168]	; (800eb04 <__lshift+0xd8>)
 800ea5a:	482b      	ldr	r0, [pc, #172]	; (800eb08 <__lshift+0xdc>)
 800ea5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea60:	f000 fbb8 	bl	800f1d4 <__assert_func>
 800ea64:	3101      	adds	r1, #1
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	e7ee      	b.n	800ea48 <__lshift+0x1c>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f100 0114 	add.w	r1, r0, #20
 800ea70:	f100 0210 	add.w	r2, r0, #16
 800ea74:	4618      	mov	r0, r3
 800ea76:	4553      	cmp	r3, sl
 800ea78:	db37      	blt.n	800eaea <__lshift+0xbe>
 800ea7a:	6920      	ldr	r0, [r4, #16]
 800ea7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea80:	f104 0314 	add.w	r3, r4, #20
 800ea84:	f019 091f 	ands.w	r9, r9, #31
 800ea88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea90:	d02f      	beq.n	800eaf2 <__lshift+0xc6>
 800ea92:	f1c9 0e20 	rsb	lr, r9, #32
 800ea96:	468a      	mov	sl, r1
 800ea98:	f04f 0c00 	mov.w	ip, #0
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	fa02 f209 	lsl.w	r2, r2, r9
 800eaa2:	ea42 020c 	orr.w	r2, r2, ip
 800eaa6:	f84a 2b04 	str.w	r2, [sl], #4
 800eaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaae:	4298      	cmp	r0, r3
 800eab0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800eab4:	d8f2      	bhi.n	800ea9c <__lshift+0x70>
 800eab6:	1b03      	subs	r3, r0, r4
 800eab8:	3b15      	subs	r3, #21
 800eaba:	f023 0303 	bic.w	r3, r3, #3
 800eabe:	3304      	adds	r3, #4
 800eac0:	f104 0215 	add.w	r2, r4, #21
 800eac4:	4290      	cmp	r0, r2
 800eac6:	bf38      	it	cc
 800eac8:	2304      	movcc	r3, #4
 800eaca:	f841 c003 	str.w	ip, [r1, r3]
 800eace:	f1bc 0f00 	cmp.w	ip, #0
 800ead2:	d001      	beq.n	800ead8 <__lshift+0xac>
 800ead4:	f108 0602 	add.w	r6, r8, #2
 800ead8:	3e01      	subs	r6, #1
 800eada:	4638      	mov	r0, r7
 800eadc:	612e      	str	r6, [r5, #16]
 800eade:	4621      	mov	r1, r4
 800eae0:	f7ff fdd2 	bl	800e688 <_Bfree>
 800eae4:	4628      	mov	r0, r5
 800eae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaea:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaee:	3301      	adds	r3, #1
 800eaf0:	e7c1      	b.n	800ea76 <__lshift+0x4a>
 800eaf2:	3904      	subs	r1, #4
 800eaf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800eafc:	4298      	cmp	r0, r3
 800eafe:	d8f9      	bhi.n	800eaf4 <__lshift+0xc8>
 800eb00:	e7ea      	b.n	800ead8 <__lshift+0xac>
 800eb02:	bf00      	nop
 800eb04:	0803d427 	.word	0x0803d427
 800eb08:	0803d438 	.word	0x0803d438

0800eb0c <__mcmp>:
 800eb0c:	b530      	push	{r4, r5, lr}
 800eb0e:	6902      	ldr	r2, [r0, #16]
 800eb10:	690c      	ldr	r4, [r1, #16]
 800eb12:	1b12      	subs	r2, r2, r4
 800eb14:	d10e      	bne.n	800eb34 <__mcmp+0x28>
 800eb16:	f100 0314 	add.w	r3, r0, #20
 800eb1a:	3114      	adds	r1, #20
 800eb1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb2c:	42a5      	cmp	r5, r4
 800eb2e:	d003      	beq.n	800eb38 <__mcmp+0x2c>
 800eb30:	d305      	bcc.n	800eb3e <__mcmp+0x32>
 800eb32:	2201      	movs	r2, #1
 800eb34:	4610      	mov	r0, r2
 800eb36:	bd30      	pop	{r4, r5, pc}
 800eb38:	4283      	cmp	r3, r0
 800eb3a:	d3f3      	bcc.n	800eb24 <__mcmp+0x18>
 800eb3c:	e7fa      	b.n	800eb34 <__mcmp+0x28>
 800eb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb42:	e7f7      	b.n	800eb34 <__mcmp+0x28>

0800eb44 <__mdiff>:
 800eb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	460c      	mov	r4, r1
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4690      	mov	r8, r2
 800eb52:	f7ff ffdb 	bl	800eb0c <__mcmp>
 800eb56:	1e05      	subs	r5, r0, #0
 800eb58:	d110      	bne.n	800eb7c <__mdiff+0x38>
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	f7ff fd53 	bl	800e608 <_Balloc>
 800eb62:	b930      	cbnz	r0, 800eb72 <__mdiff+0x2e>
 800eb64:	4b3a      	ldr	r3, [pc, #232]	; (800ec50 <__mdiff+0x10c>)
 800eb66:	4602      	mov	r2, r0
 800eb68:	f240 2132 	movw	r1, #562	; 0x232
 800eb6c:	4839      	ldr	r0, [pc, #228]	; (800ec54 <__mdiff+0x110>)
 800eb6e:	f000 fb31 	bl	800f1d4 <__assert_func>
 800eb72:	2301      	movs	r3, #1
 800eb74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7c:	bfa4      	itt	ge
 800eb7e:	4643      	movge	r3, r8
 800eb80:	46a0      	movge	r8, r4
 800eb82:	4630      	mov	r0, r6
 800eb84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb88:	bfa6      	itte	ge
 800eb8a:	461c      	movge	r4, r3
 800eb8c:	2500      	movge	r5, #0
 800eb8e:	2501      	movlt	r5, #1
 800eb90:	f7ff fd3a 	bl	800e608 <_Balloc>
 800eb94:	b920      	cbnz	r0, 800eba0 <__mdiff+0x5c>
 800eb96:	4b2e      	ldr	r3, [pc, #184]	; (800ec50 <__mdiff+0x10c>)
 800eb98:	4602      	mov	r2, r0
 800eb9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb9e:	e7e5      	b.n	800eb6c <__mdiff+0x28>
 800eba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eba4:	6926      	ldr	r6, [r4, #16]
 800eba6:	60c5      	str	r5, [r0, #12]
 800eba8:	f104 0914 	add.w	r9, r4, #20
 800ebac:	f108 0514 	add.w	r5, r8, #20
 800ebb0:	f100 0e14 	add.w	lr, r0, #20
 800ebb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ebb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ebbc:	f108 0210 	add.w	r2, r8, #16
 800ebc0:	46f2      	mov	sl, lr
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebcc:	fa1f f883 	uxth.w	r8, r3
 800ebd0:	fa11 f18b 	uxtah	r1, r1, fp
 800ebd4:	0c1b      	lsrs	r3, r3, #16
 800ebd6:	eba1 0808 	sub.w	r8, r1, r8
 800ebda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebe2:	fa1f f888 	uxth.w	r8, r8
 800ebe6:	1419      	asrs	r1, r3, #16
 800ebe8:	454e      	cmp	r6, r9
 800ebea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebee:	f84a 3b04 	str.w	r3, [sl], #4
 800ebf2:	d8e7      	bhi.n	800ebc4 <__mdiff+0x80>
 800ebf4:	1b33      	subs	r3, r6, r4
 800ebf6:	3b15      	subs	r3, #21
 800ebf8:	f023 0303 	bic.w	r3, r3, #3
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	3415      	adds	r4, #21
 800ec00:	42a6      	cmp	r6, r4
 800ec02:	bf38      	it	cc
 800ec04:	2304      	movcc	r3, #4
 800ec06:	441d      	add	r5, r3
 800ec08:	4473      	add	r3, lr
 800ec0a:	469e      	mov	lr, r3
 800ec0c:	462e      	mov	r6, r5
 800ec0e:	4566      	cmp	r6, ip
 800ec10:	d30e      	bcc.n	800ec30 <__mdiff+0xec>
 800ec12:	f10c 0203 	add.w	r2, ip, #3
 800ec16:	1b52      	subs	r2, r2, r5
 800ec18:	f022 0203 	bic.w	r2, r2, #3
 800ec1c:	3d03      	subs	r5, #3
 800ec1e:	45ac      	cmp	ip, r5
 800ec20:	bf38      	it	cc
 800ec22:	2200      	movcc	r2, #0
 800ec24:	441a      	add	r2, r3
 800ec26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec2a:	b17b      	cbz	r3, 800ec4c <__mdiff+0x108>
 800ec2c:	6107      	str	r7, [r0, #16]
 800ec2e:	e7a3      	b.n	800eb78 <__mdiff+0x34>
 800ec30:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec34:	fa11 f288 	uxtah	r2, r1, r8
 800ec38:	1414      	asrs	r4, r2, #16
 800ec3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec3e:	b292      	uxth	r2, r2
 800ec40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec44:	f84e 2b04 	str.w	r2, [lr], #4
 800ec48:	1421      	asrs	r1, r4, #16
 800ec4a:	e7e0      	b.n	800ec0e <__mdiff+0xca>
 800ec4c:	3f01      	subs	r7, #1
 800ec4e:	e7ea      	b.n	800ec26 <__mdiff+0xe2>
 800ec50:	0803d427 	.word	0x0803d427
 800ec54:	0803d438 	.word	0x0803d438

0800ec58 <__d2b>:
 800ec58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec5c:	4689      	mov	r9, r1
 800ec5e:	2101      	movs	r1, #1
 800ec60:	ec57 6b10 	vmov	r6, r7, d0
 800ec64:	4690      	mov	r8, r2
 800ec66:	f7ff fccf 	bl	800e608 <_Balloc>
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	b930      	cbnz	r0, 800ec7c <__d2b+0x24>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	4b25      	ldr	r3, [pc, #148]	; (800ed08 <__d2b+0xb0>)
 800ec72:	4826      	ldr	r0, [pc, #152]	; (800ed0c <__d2b+0xb4>)
 800ec74:	f240 310a 	movw	r1, #778	; 0x30a
 800ec78:	f000 faac 	bl	800f1d4 <__assert_func>
 800ec7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec84:	bb35      	cbnz	r5, 800ecd4 <__d2b+0x7c>
 800ec86:	2e00      	cmp	r6, #0
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	d028      	beq.n	800ecde <__d2b+0x86>
 800ec8c:	4668      	mov	r0, sp
 800ec8e:	9600      	str	r6, [sp, #0]
 800ec90:	f7ff fd82 	bl	800e798 <__lo0bits>
 800ec94:	9900      	ldr	r1, [sp, #0]
 800ec96:	b300      	cbz	r0, 800ecda <__d2b+0x82>
 800ec98:	9a01      	ldr	r2, [sp, #4]
 800ec9a:	f1c0 0320 	rsb	r3, r0, #32
 800ec9e:	fa02 f303 	lsl.w	r3, r2, r3
 800eca2:	430b      	orrs	r3, r1
 800eca4:	40c2      	lsrs	r2, r0
 800eca6:	6163      	str	r3, [r4, #20]
 800eca8:	9201      	str	r2, [sp, #4]
 800ecaa:	9b01      	ldr	r3, [sp, #4]
 800ecac:	61a3      	str	r3, [r4, #24]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	bf14      	ite	ne
 800ecb2:	2202      	movne	r2, #2
 800ecb4:	2201      	moveq	r2, #1
 800ecb6:	6122      	str	r2, [r4, #16]
 800ecb8:	b1d5      	cbz	r5, 800ecf0 <__d2b+0x98>
 800ecba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecbe:	4405      	add	r5, r0
 800ecc0:	f8c9 5000 	str.w	r5, [r9]
 800ecc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecc8:	f8c8 0000 	str.w	r0, [r8]
 800eccc:	4620      	mov	r0, r4
 800ecce:	b003      	add	sp, #12
 800ecd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecd8:	e7d5      	b.n	800ec86 <__d2b+0x2e>
 800ecda:	6161      	str	r1, [r4, #20]
 800ecdc:	e7e5      	b.n	800ecaa <__d2b+0x52>
 800ecde:	a801      	add	r0, sp, #4
 800ece0:	f7ff fd5a 	bl	800e798 <__lo0bits>
 800ece4:	9b01      	ldr	r3, [sp, #4]
 800ece6:	6163      	str	r3, [r4, #20]
 800ece8:	2201      	movs	r2, #1
 800ecea:	6122      	str	r2, [r4, #16]
 800ecec:	3020      	adds	r0, #32
 800ecee:	e7e3      	b.n	800ecb8 <__d2b+0x60>
 800ecf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ecf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecf8:	f8c9 0000 	str.w	r0, [r9]
 800ecfc:	6918      	ldr	r0, [r3, #16]
 800ecfe:	f7ff fd2b 	bl	800e758 <__hi0bits>
 800ed02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed06:	e7df      	b.n	800ecc8 <__d2b+0x70>
 800ed08:	0803d427 	.word	0x0803d427
 800ed0c:	0803d438 	.word	0x0803d438

0800ed10 <_calloc_r>:
 800ed10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed12:	fba1 2402 	umull	r2, r4, r1, r2
 800ed16:	b94c      	cbnz	r4, 800ed2c <_calloc_r+0x1c>
 800ed18:	4611      	mov	r1, r2
 800ed1a:	9201      	str	r2, [sp, #4]
 800ed1c:	f000 f87a 	bl	800ee14 <_malloc_r>
 800ed20:	9a01      	ldr	r2, [sp, #4]
 800ed22:	4605      	mov	r5, r0
 800ed24:	b930      	cbnz	r0, 800ed34 <_calloc_r+0x24>
 800ed26:	4628      	mov	r0, r5
 800ed28:	b003      	add	sp, #12
 800ed2a:	bd30      	pop	{r4, r5, pc}
 800ed2c:	220c      	movs	r2, #12
 800ed2e:	6002      	str	r2, [r0, #0]
 800ed30:	2500      	movs	r5, #0
 800ed32:	e7f8      	b.n	800ed26 <_calloc_r+0x16>
 800ed34:	4621      	mov	r1, r4
 800ed36:	f7fe f92d 	bl	800cf94 <memset>
 800ed3a:	e7f4      	b.n	800ed26 <_calloc_r+0x16>

0800ed3c <_free_r>:
 800ed3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed3e:	2900      	cmp	r1, #0
 800ed40:	d044      	beq.n	800edcc <_free_r+0x90>
 800ed42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed46:	9001      	str	r0, [sp, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed4e:	bfb8      	it	lt
 800ed50:	18e4      	addlt	r4, r4, r3
 800ed52:	f000 fa9b 	bl	800f28c <__malloc_lock>
 800ed56:	4a1e      	ldr	r2, [pc, #120]	; (800edd0 <_free_r+0x94>)
 800ed58:	9801      	ldr	r0, [sp, #4]
 800ed5a:	6813      	ldr	r3, [r2, #0]
 800ed5c:	b933      	cbnz	r3, 800ed6c <_free_r+0x30>
 800ed5e:	6063      	str	r3, [r4, #4]
 800ed60:	6014      	str	r4, [r2, #0]
 800ed62:	b003      	add	sp, #12
 800ed64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed68:	f000 ba96 	b.w	800f298 <__malloc_unlock>
 800ed6c:	42a3      	cmp	r3, r4
 800ed6e:	d908      	bls.n	800ed82 <_free_r+0x46>
 800ed70:	6825      	ldr	r5, [r4, #0]
 800ed72:	1961      	adds	r1, r4, r5
 800ed74:	428b      	cmp	r3, r1
 800ed76:	bf01      	itttt	eq
 800ed78:	6819      	ldreq	r1, [r3, #0]
 800ed7a:	685b      	ldreq	r3, [r3, #4]
 800ed7c:	1949      	addeq	r1, r1, r5
 800ed7e:	6021      	streq	r1, [r4, #0]
 800ed80:	e7ed      	b.n	800ed5e <_free_r+0x22>
 800ed82:	461a      	mov	r2, r3
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	b10b      	cbz	r3, 800ed8c <_free_r+0x50>
 800ed88:	42a3      	cmp	r3, r4
 800ed8a:	d9fa      	bls.n	800ed82 <_free_r+0x46>
 800ed8c:	6811      	ldr	r1, [r2, #0]
 800ed8e:	1855      	adds	r5, r2, r1
 800ed90:	42a5      	cmp	r5, r4
 800ed92:	d10b      	bne.n	800edac <_free_r+0x70>
 800ed94:	6824      	ldr	r4, [r4, #0]
 800ed96:	4421      	add	r1, r4
 800ed98:	1854      	adds	r4, r2, r1
 800ed9a:	42a3      	cmp	r3, r4
 800ed9c:	6011      	str	r1, [r2, #0]
 800ed9e:	d1e0      	bne.n	800ed62 <_free_r+0x26>
 800eda0:	681c      	ldr	r4, [r3, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	6053      	str	r3, [r2, #4]
 800eda6:	4421      	add	r1, r4
 800eda8:	6011      	str	r1, [r2, #0]
 800edaa:	e7da      	b.n	800ed62 <_free_r+0x26>
 800edac:	d902      	bls.n	800edb4 <_free_r+0x78>
 800edae:	230c      	movs	r3, #12
 800edb0:	6003      	str	r3, [r0, #0]
 800edb2:	e7d6      	b.n	800ed62 <_free_r+0x26>
 800edb4:	6825      	ldr	r5, [r4, #0]
 800edb6:	1961      	adds	r1, r4, r5
 800edb8:	428b      	cmp	r3, r1
 800edba:	bf04      	itt	eq
 800edbc:	6819      	ldreq	r1, [r3, #0]
 800edbe:	685b      	ldreq	r3, [r3, #4]
 800edc0:	6063      	str	r3, [r4, #4]
 800edc2:	bf04      	itt	eq
 800edc4:	1949      	addeq	r1, r1, r5
 800edc6:	6021      	streq	r1, [r4, #0]
 800edc8:	6054      	str	r4, [r2, #4]
 800edca:	e7ca      	b.n	800ed62 <_free_r+0x26>
 800edcc:	b003      	add	sp, #12
 800edce:	bd30      	pop	{r4, r5, pc}
 800edd0:	200008f0 	.word	0x200008f0

0800edd4 <sbrk_aligned>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	4e0e      	ldr	r6, [pc, #56]	; (800ee10 <sbrk_aligned+0x3c>)
 800edd8:	460c      	mov	r4, r1
 800edda:	6831      	ldr	r1, [r6, #0]
 800eddc:	4605      	mov	r5, r0
 800edde:	b911      	cbnz	r1, 800ede6 <sbrk_aligned+0x12>
 800ede0:	f000 f9e8 	bl	800f1b4 <_sbrk_r>
 800ede4:	6030      	str	r0, [r6, #0]
 800ede6:	4621      	mov	r1, r4
 800ede8:	4628      	mov	r0, r5
 800edea:	f000 f9e3 	bl	800f1b4 <_sbrk_r>
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	d00a      	beq.n	800ee08 <sbrk_aligned+0x34>
 800edf2:	1cc4      	adds	r4, r0, #3
 800edf4:	f024 0403 	bic.w	r4, r4, #3
 800edf8:	42a0      	cmp	r0, r4
 800edfa:	d007      	beq.n	800ee0c <sbrk_aligned+0x38>
 800edfc:	1a21      	subs	r1, r4, r0
 800edfe:	4628      	mov	r0, r5
 800ee00:	f000 f9d8 	bl	800f1b4 <_sbrk_r>
 800ee04:	3001      	adds	r0, #1
 800ee06:	d101      	bne.n	800ee0c <sbrk_aligned+0x38>
 800ee08:	f04f 34ff 	mov.w	r4, #4294967295
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
 800ee10:	200008f4 	.word	0x200008f4

0800ee14 <_malloc_r>:
 800ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee18:	1ccd      	adds	r5, r1, #3
 800ee1a:	f025 0503 	bic.w	r5, r5, #3
 800ee1e:	3508      	adds	r5, #8
 800ee20:	2d0c      	cmp	r5, #12
 800ee22:	bf38      	it	cc
 800ee24:	250c      	movcc	r5, #12
 800ee26:	2d00      	cmp	r5, #0
 800ee28:	4607      	mov	r7, r0
 800ee2a:	db01      	blt.n	800ee30 <_malloc_r+0x1c>
 800ee2c:	42a9      	cmp	r1, r5
 800ee2e:	d905      	bls.n	800ee3c <_malloc_r+0x28>
 800ee30:	230c      	movs	r3, #12
 800ee32:	603b      	str	r3, [r7, #0]
 800ee34:	2600      	movs	r6, #0
 800ee36:	4630      	mov	r0, r6
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3c:	4e2e      	ldr	r6, [pc, #184]	; (800eef8 <_malloc_r+0xe4>)
 800ee3e:	f000 fa25 	bl	800f28c <__malloc_lock>
 800ee42:	6833      	ldr	r3, [r6, #0]
 800ee44:	461c      	mov	r4, r3
 800ee46:	bb34      	cbnz	r4, 800ee96 <_malloc_r+0x82>
 800ee48:	4629      	mov	r1, r5
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	f7ff ffc2 	bl	800edd4 <sbrk_aligned>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	4604      	mov	r4, r0
 800ee54:	d14d      	bne.n	800eef2 <_malloc_r+0xde>
 800ee56:	6834      	ldr	r4, [r6, #0]
 800ee58:	4626      	mov	r6, r4
 800ee5a:	2e00      	cmp	r6, #0
 800ee5c:	d140      	bne.n	800eee0 <_malloc_r+0xcc>
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	4631      	mov	r1, r6
 800ee62:	4638      	mov	r0, r7
 800ee64:	eb04 0803 	add.w	r8, r4, r3
 800ee68:	f000 f9a4 	bl	800f1b4 <_sbrk_r>
 800ee6c:	4580      	cmp	r8, r0
 800ee6e:	d13a      	bne.n	800eee6 <_malloc_r+0xd2>
 800ee70:	6821      	ldr	r1, [r4, #0]
 800ee72:	3503      	adds	r5, #3
 800ee74:	1a6d      	subs	r5, r5, r1
 800ee76:	f025 0503 	bic.w	r5, r5, #3
 800ee7a:	3508      	adds	r5, #8
 800ee7c:	2d0c      	cmp	r5, #12
 800ee7e:	bf38      	it	cc
 800ee80:	250c      	movcc	r5, #12
 800ee82:	4629      	mov	r1, r5
 800ee84:	4638      	mov	r0, r7
 800ee86:	f7ff ffa5 	bl	800edd4 <sbrk_aligned>
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d02b      	beq.n	800eee6 <_malloc_r+0xd2>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	442b      	add	r3, r5
 800ee92:	6023      	str	r3, [r4, #0]
 800ee94:	e00e      	b.n	800eeb4 <_malloc_r+0xa0>
 800ee96:	6822      	ldr	r2, [r4, #0]
 800ee98:	1b52      	subs	r2, r2, r5
 800ee9a:	d41e      	bmi.n	800eeda <_malloc_r+0xc6>
 800ee9c:	2a0b      	cmp	r2, #11
 800ee9e:	d916      	bls.n	800eece <_malloc_r+0xba>
 800eea0:	1961      	adds	r1, r4, r5
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	6025      	str	r5, [r4, #0]
 800eea6:	bf18      	it	ne
 800eea8:	6059      	strne	r1, [r3, #4]
 800eeaa:	6863      	ldr	r3, [r4, #4]
 800eeac:	bf08      	it	eq
 800eeae:	6031      	streq	r1, [r6, #0]
 800eeb0:	5162      	str	r2, [r4, r5]
 800eeb2:	604b      	str	r3, [r1, #4]
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f104 060b 	add.w	r6, r4, #11
 800eeba:	f000 f9ed 	bl	800f298 <__malloc_unlock>
 800eebe:	f026 0607 	bic.w	r6, r6, #7
 800eec2:	1d23      	adds	r3, r4, #4
 800eec4:	1af2      	subs	r2, r6, r3
 800eec6:	d0b6      	beq.n	800ee36 <_malloc_r+0x22>
 800eec8:	1b9b      	subs	r3, r3, r6
 800eeca:	50a3      	str	r3, [r4, r2]
 800eecc:	e7b3      	b.n	800ee36 <_malloc_r+0x22>
 800eece:	6862      	ldr	r2, [r4, #4]
 800eed0:	42a3      	cmp	r3, r4
 800eed2:	bf0c      	ite	eq
 800eed4:	6032      	streq	r2, [r6, #0]
 800eed6:	605a      	strne	r2, [r3, #4]
 800eed8:	e7ec      	b.n	800eeb4 <_malloc_r+0xa0>
 800eeda:	4623      	mov	r3, r4
 800eedc:	6864      	ldr	r4, [r4, #4]
 800eede:	e7b2      	b.n	800ee46 <_malloc_r+0x32>
 800eee0:	4634      	mov	r4, r6
 800eee2:	6876      	ldr	r6, [r6, #4]
 800eee4:	e7b9      	b.n	800ee5a <_malloc_r+0x46>
 800eee6:	230c      	movs	r3, #12
 800eee8:	603b      	str	r3, [r7, #0]
 800eeea:	4638      	mov	r0, r7
 800eeec:	f000 f9d4 	bl	800f298 <__malloc_unlock>
 800eef0:	e7a1      	b.n	800ee36 <_malloc_r+0x22>
 800eef2:	6025      	str	r5, [r4, #0]
 800eef4:	e7de      	b.n	800eeb4 <_malloc_r+0xa0>
 800eef6:	bf00      	nop
 800eef8:	200008f0 	.word	0x200008f0

0800eefc <__ssputs_r>:
 800eefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef00:	688e      	ldr	r6, [r1, #8]
 800ef02:	429e      	cmp	r6, r3
 800ef04:	4682      	mov	sl, r0
 800ef06:	460c      	mov	r4, r1
 800ef08:	4690      	mov	r8, r2
 800ef0a:	461f      	mov	r7, r3
 800ef0c:	d838      	bhi.n	800ef80 <__ssputs_r+0x84>
 800ef0e:	898a      	ldrh	r2, [r1, #12]
 800ef10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef14:	d032      	beq.n	800ef7c <__ssputs_r+0x80>
 800ef16:	6825      	ldr	r5, [r4, #0]
 800ef18:	6909      	ldr	r1, [r1, #16]
 800ef1a:	eba5 0901 	sub.w	r9, r5, r1
 800ef1e:	6965      	ldr	r5, [r4, #20]
 800ef20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef28:	3301      	adds	r3, #1
 800ef2a:	444b      	add	r3, r9
 800ef2c:	106d      	asrs	r5, r5, #1
 800ef2e:	429d      	cmp	r5, r3
 800ef30:	bf38      	it	cc
 800ef32:	461d      	movcc	r5, r3
 800ef34:	0553      	lsls	r3, r2, #21
 800ef36:	d531      	bpl.n	800ef9c <__ssputs_r+0xa0>
 800ef38:	4629      	mov	r1, r5
 800ef3a:	f7ff ff6b 	bl	800ee14 <_malloc_r>
 800ef3e:	4606      	mov	r6, r0
 800ef40:	b950      	cbnz	r0, 800ef58 <__ssputs_r+0x5c>
 800ef42:	230c      	movs	r3, #12
 800ef44:	f8ca 3000 	str.w	r3, [sl]
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4e:	81a3      	strh	r3, [r4, #12]
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef58:	6921      	ldr	r1, [r4, #16]
 800ef5a:	464a      	mov	r2, r9
 800ef5c:	f7ff fb46 	bl	800e5ec <memcpy>
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	6126      	str	r6, [r4, #16]
 800ef6e:	6165      	str	r5, [r4, #20]
 800ef70:	444e      	add	r6, r9
 800ef72:	eba5 0509 	sub.w	r5, r5, r9
 800ef76:	6026      	str	r6, [r4, #0]
 800ef78:	60a5      	str	r5, [r4, #8]
 800ef7a:	463e      	mov	r6, r7
 800ef7c:	42be      	cmp	r6, r7
 800ef7e:	d900      	bls.n	800ef82 <__ssputs_r+0x86>
 800ef80:	463e      	mov	r6, r7
 800ef82:	6820      	ldr	r0, [r4, #0]
 800ef84:	4632      	mov	r2, r6
 800ef86:	4641      	mov	r1, r8
 800ef88:	f000 f966 	bl	800f258 <memmove>
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	1b9b      	subs	r3, r3, r6
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	4433      	add	r3, r6
 800ef96:	6023      	str	r3, [r4, #0]
 800ef98:	2000      	movs	r0, #0
 800ef9a:	e7db      	b.n	800ef54 <__ssputs_r+0x58>
 800ef9c:	462a      	mov	r2, r5
 800ef9e:	f000 f981 	bl	800f2a4 <_realloc_r>
 800efa2:	4606      	mov	r6, r0
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d1e1      	bne.n	800ef6c <__ssputs_r+0x70>
 800efa8:	6921      	ldr	r1, [r4, #16]
 800efaa:	4650      	mov	r0, sl
 800efac:	f7ff fec6 	bl	800ed3c <_free_r>
 800efb0:	e7c7      	b.n	800ef42 <__ssputs_r+0x46>
	...

0800efb4 <_svfiprintf_r>:
 800efb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	4698      	mov	r8, r3
 800efba:	898b      	ldrh	r3, [r1, #12]
 800efbc:	061b      	lsls	r3, r3, #24
 800efbe:	b09d      	sub	sp, #116	; 0x74
 800efc0:	4607      	mov	r7, r0
 800efc2:	460d      	mov	r5, r1
 800efc4:	4614      	mov	r4, r2
 800efc6:	d50e      	bpl.n	800efe6 <_svfiprintf_r+0x32>
 800efc8:	690b      	ldr	r3, [r1, #16]
 800efca:	b963      	cbnz	r3, 800efe6 <_svfiprintf_r+0x32>
 800efcc:	2140      	movs	r1, #64	; 0x40
 800efce:	f7ff ff21 	bl	800ee14 <_malloc_r>
 800efd2:	6028      	str	r0, [r5, #0]
 800efd4:	6128      	str	r0, [r5, #16]
 800efd6:	b920      	cbnz	r0, 800efe2 <_svfiprintf_r+0x2e>
 800efd8:	230c      	movs	r3, #12
 800efda:	603b      	str	r3, [r7, #0]
 800efdc:	f04f 30ff 	mov.w	r0, #4294967295
 800efe0:	e0d1      	b.n	800f186 <_svfiprintf_r+0x1d2>
 800efe2:	2340      	movs	r3, #64	; 0x40
 800efe4:	616b      	str	r3, [r5, #20]
 800efe6:	2300      	movs	r3, #0
 800efe8:	9309      	str	r3, [sp, #36]	; 0x24
 800efea:	2320      	movs	r3, #32
 800efec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eff0:	f8cd 800c 	str.w	r8, [sp, #12]
 800eff4:	2330      	movs	r3, #48	; 0x30
 800eff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f1a0 <_svfiprintf_r+0x1ec>
 800effa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800effe:	f04f 0901 	mov.w	r9, #1
 800f002:	4623      	mov	r3, r4
 800f004:	469a      	mov	sl, r3
 800f006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f00a:	b10a      	cbz	r2, 800f010 <_svfiprintf_r+0x5c>
 800f00c:	2a25      	cmp	r2, #37	; 0x25
 800f00e:	d1f9      	bne.n	800f004 <_svfiprintf_r+0x50>
 800f010:	ebba 0b04 	subs.w	fp, sl, r4
 800f014:	d00b      	beq.n	800f02e <_svfiprintf_r+0x7a>
 800f016:	465b      	mov	r3, fp
 800f018:	4622      	mov	r2, r4
 800f01a:	4629      	mov	r1, r5
 800f01c:	4638      	mov	r0, r7
 800f01e:	f7ff ff6d 	bl	800eefc <__ssputs_r>
 800f022:	3001      	adds	r0, #1
 800f024:	f000 80aa 	beq.w	800f17c <_svfiprintf_r+0x1c8>
 800f028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f02a:	445a      	add	r2, fp
 800f02c:	9209      	str	r2, [sp, #36]	; 0x24
 800f02e:	f89a 3000 	ldrb.w	r3, [sl]
 800f032:	2b00      	cmp	r3, #0
 800f034:	f000 80a2 	beq.w	800f17c <_svfiprintf_r+0x1c8>
 800f038:	2300      	movs	r3, #0
 800f03a:	f04f 32ff 	mov.w	r2, #4294967295
 800f03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f042:	f10a 0a01 	add.w	sl, sl, #1
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	9307      	str	r3, [sp, #28]
 800f04a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f04e:	931a      	str	r3, [sp, #104]	; 0x68
 800f050:	4654      	mov	r4, sl
 800f052:	2205      	movs	r2, #5
 800f054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f058:	4851      	ldr	r0, [pc, #324]	; (800f1a0 <_svfiprintf_r+0x1ec>)
 800f05a:	f7f1 f8c9 	bl	80001f0 <memchr>
 800f05e:	9a04      	ldr	r2, [sp, #16]
 800f060:	b9d8      	cbnz	r0, 800f09a <_svfiprintf_r+0xe6>
 800f062:	06d0      	lsls	r0, r2, #27
 800f064:	bf44      	itt	mi
 800f066:	2320      	movmi	r3, #32
 800f068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f06c:	0711      	lsls	r1, r2, #28
 800f06e:	bf44      	itt	mi
 800f070:	232b      	movmi	r3, #43	; 0x2b
 800f072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f076:	f89a 3000 	ldrb.w	r3, [sl]
 800f07a:	2b2a      	cmp	r3, #42	; 0x2a
 800f07c:	d015      	beq.n	800f0aa <_svfiprintf_r+0xf6>
 800f07e:	9a07      	ldr	r2, [sp, #28]
 800f080:	4654      	mov	r4, sl
 800f082:	2000      	movs	r0, #0
 800f084:	f04f 0c0a 	mov.w	ip, #10
 800f088:	4621      	mov	r1, r4
 800f08a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f08e:	3b30      	subs	r3, #48	; 0x30
 800f090:	2b09      	cmp	r3, #9
 800f092:	d94e      	bls.n	800f132 <_svfiprintf_r+0x17e>
 800f094:	b1b0      	cbz	r0, 800f0c4 <_svfiprintf_r+0x110>
 800f096:	9207      	str	r2, [sp, #28]
 800f098:	e014      	b.n	800f0c4 <_svfiprintf_r+0x110>
 800f09a:	eba0 0308 	sub.w	r3, r0, r8
 800f09e:	fa09 f303 	lsl.w	r3, r9, r3
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	9304      	str	r3, [sp, #16]
 800f0a6:	46a2      	mov	sl, r4
 800f0a8:	e7d2      	b.n	800f050 <_svfiprintf_r+0x9c>
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	1d19      	adds	r1, r3, #4
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	9103      	str	r1, [sp, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	bfbb      	ittet	lt
 800f0b6:	425b      	neglt	r3, r3
 800f0b8:	f042 0202 	orrlt.w	r2, r2, #2
 800f0bc:	9307      	strge	r3, [sp, #28]
 800f0be:	9307      	strlt	r3, [sp, #28]
 800f0c0:	bfb8      	it	lt
 800f0c2:	9204      	strlt	r2, [sp, #16]
 800f0c4:	7823      	ldrb	r3, [r4, #0]
 800f0c6:	2b2e      	cmp	r3, #46	; 0x2e
 800f0c8:	d10c      	bne.n	800f0e4 <_svfiprintf_r+0x130>
 800f0ca:	7863      	ldrb	r3, [r4, #1]
 800f0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f0ce:	d135      	bne.n	800f13c <_svfiprintf_r+0x188>
 800f0d0:	9b03      	ldr	r3, [sp, #12]
 800f0d2:	1d1a      	adds	r2, r3, #4
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	9203      	str	r2, [sp, #12]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	bfb8      	it	lt
 800f0dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0e0:	3402      	adds	r4, #2
 800f0e2:	9305      	str	r3, [sp, #20]
 800f0e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f1b0 <_svfiprintf_r+0x1fc>
 800f0e8:	7821      	ldrb	r1, [r4, #0]
 800f0ea:	2203      	movs	r2, #3
 800f0ec:	4650      	mov	r0, sl
 800f0ee:	f7f1 f87f 	bl	80001f0 <memchr>
 800f0f2:	b140      	cbz	r0, 800f106 <_svfiprintf_r+0x152>
 800f0f4:	2340      	movs	r3, #64	; 0x40
 800f0f6:	eba0 000a 	sub.w	r0, r0, sl
 800f0fa:	fa03 f000 	lsl.w	r0, r3, r0
 800f0fe:	9b04      	ldr	r3, [sp, #16]
 800f100:	4303      	orrs	r3, r0
 800f102:	3401      	adds	r4, #1
 800f104:	9304      	str	r3, [sp, #16]
 800f106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10a:	4826      	ldr	r0, [pc, #152]	; (800f1a4 <_svfiprintf_r+0x1f0>)
 800f10c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f110:	2206      	movs	r2, #6
 800f112:	f7f1 f86d 	bl	80001f0 <memchr>
 800f116:	2800      	cmp	r0, #0
 800f118:	d038      	beq.n	800f18c <_svfiprintf_r+0x1d8>
 800f11a:	4b23      	ldr	r3, [pc, #140]	; (800f1a8 <_svfiprintf_r+0x1f4>)
 800f11c:	bb1b      	cbnz	r3, 800f166 <_svfiprintf_r+0x1b2>
 800f11e:	9b03      	ldr	r3, [sp, #12]
 800f120:	3307      	adds	r3, #7
 800f122:	f023 0307 	bic.w	r3, r3, #7
 800f126:	3308      	adds	r3, #8
 800f128:	9303      	str	r3, [sp, #12]
 800f12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12c:	4433      	add	r3, r6
 800f12e:	9309      	str	r3, [sp, #36]	; 0x24
 800f130:	e767      	b.n	800f002 <_svfiprintf_r+0x4e>
 800f132:	fb0c 3202 	mla	r2, ip, r2, r3
 800f136:	460c      	mov	r4, r1
 800f138:	2001      	movs	r0, #1
 800f13a:	e7a5      	b.n	800f088 <_svfiprintf_r+0xd4>
 800f13c:	2300      	movs	r3, #0
 800f13e:	3401      	adds	r4, #1
 800f140:	9305      	str	r3, [sp, #20]
 800f142:	4619      	mov	r1, r3
 800f144:	f04f 0c0a 	mov.w	ip, #10
 800f148:	4620      	mov	r0, r4
 800f14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f14e:	3a30      	subs	r2, #48	; 0x30
 800f150:	2a09      	cmp	r2, #9
 800f152:	d903      	bls.n	800f15c <_svfiprintf_r+0x1a8>
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0c5      	beq.n	800f0e4 <_svfiprintf_r+0x130>
 800f158:	9105      	str	r1, [sp, #20]
 800f15a:	e7c3      	b.n	800f0e4 <_svfiprintf_r+0x130>
 800f15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f160:	4604      	mov	r4, r0
 800f162:	2301      	movs	r3, #1
 800f164:	e7f0      	b.n	800f148 <_svfiprintf_r+0x194>
 800f166:	ab03      	add	r3, sp, #12
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	462a      	mov	r2, r5
 800f16c:	4b0f      	ldr	r3, [pc, #60]	; (800f1ac <_svfiprintf_r+0x1f8>)
 800f16e:	a904      	add	r1, sp, #16
 800f170:	4638      	mov	r0, r7
 800f172:	f7fd ffb7 	bl	800d0e4 <_printf_float>
 800f176:	1c42      	adds	r2, r0, #1
 800f178:	4606      	mov	r6, r0
 800f17a:	d1d6      	bne.n	800f12a <_svfiprintf_r+0x176>
 800f17c:	89ab      	ldrh	r3, [r5, #12]
 800f17e:	065b      	lsls	r3, r3, #25
 800f180:	f53f af2c 	bmi.w	800efdc <_svfiprintf_r+0x28>
 800f184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f186:	b01d      	add	sp, #116	; 0x74
 800f188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18c:	ab03      	add	r3, sp, #12
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	462a      	mov	r2, r5
 800f192:	4b06      	ldr	r3, [pc, #24]	; (800f1ac <_svfiprintf_r+0x1f8>)
 800f194:	a904      	add	r1, sp, #16
 800f196:	4638      	mov	r0, r7
 800f198:	f7fe fa48 	bl	800d62c <_printf_i>
 800f19c:	e7eb      	b.n	800f176 <_svfiprintf_r+0x1c2>
 800f19e:	bf00      	nop
 800f1a0:	0803d594 	.word	0x0803d594
 800f1a4:	0803d59e 	.word	0x0803d59e
 800f1a8:	0800d0e5 	.word	0x0800d0e5
 800f1ac:	0800eefd 	.word	0x0800eefd
 800f1b0:	0803d59a 	.word	0x0803d59a

0800f1b4 <_sbrk_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d06      	ldr	r5, [pc, #24]	; (800f1d0 <_sbrk_r+0x1c>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	602b      	str	r3, [r5, #0]
 800f1c0:	f7f6 fb36 	bl	8005830 <_sbrk>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_sbrk_r+0x1a>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_sbrk_r+0x1a>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	200008f8 	.word	0x200008f8

0800f1d4 <__assert_func>:
 800f1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1d6:	4614      	mov	r4, r2
 800f1d8:	461a      	mov	r2, r3
 800f1da:	4b09      	ldr	r3, [pc, #36]	; (800f200 <__assert_func+0x2c>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4605      	mov	r5, r0
 800f1e0:	68d8      	ldr	r0, [r3, #12]
 800f1e2:	b14c      	cbz	r4, 800f1f8 <__assert_func+0x24>
 800f1e4:	4b07      	ldr	r3, [pc, #28]	; (800f204 <__assert_func+0x30>)
 800f1e6:	9100      	str	r1, [sp, #0]
 800f1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1ec:	4906      	ldr	r1, [pc, #24]	; (800f208 <__assert_func+0x34>)
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	f000 f80e 	bl	800f210 <fiprintf>
 800f1f4:	f000 faac 	bl	800f750 <abort>
 800f1f8:	4b04      	ldr	r3, [pc, #16]	; (800f20c <__assert_func+0x38>)
 800f1fa:	461c      	mov	r4, r3
 800f1fc:	e7f3      	b.n	800f1e6 <__assert_func+0x12>
 800f1fe:	bf00      	nop
 800f200:	20000250 	.word	0x20000250
 800f204:	0803d5a5 	.word	0x0803d5a5
 800f208:	0803d5b2 	.word	0x0803d5b2
 800f20c:	0803d5e0 	.word	0x0803d5e0

0800f210 <fiprintf>:
 800f210:	b40e      	push	{r1, r2, r3}
 800f212:	b503      	push	{r0, r1, lr}
 800f214:	4601      	mov	r1, r0
 800f216:	ab03      	add	r3, sp, #12
 800f218:	4805      	ldr	r0, [pc, #20]	; (800f230 <fiprintf+0x20>)
 800f21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f21e:	6800      	ldr	r0, [r0, #0]
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	f000 f897 	bl	800f354 <_vfiprintf_r>
 800f226:	b002      	add	sp, #8
 800f228:	f85d eb04 	ldr.w	lr, [sp], #4
 800f22c:	b003      	add	sp, #12
 800f22e:	4770      	bx	lr
 800f230:	20000250 	.word	0x20000250

0800f234 <__ascii_mbtowc>:
 800f234:	b082      	sub	sp, #8
 800f236:	b901      	cbnz	r1, 800f23a <__ascii_mbtowc+0x6>
 800f238:	a901      	add	r1, sp, #4
 800f23a:	b142      	cbz	r2, 800f24e <__ascii_mbtowc+0x1a>
 800f23c:	b14b      	cbz	r3, 800f252 <__ascii_mbtowc+0x1e>
 800f23e:	7813      	ldrb	r3, [r2, #0]
 800f240:	600b      	str	r3, [r1, #0]
 800f242:	7812      	ldrb	r2, [r2, #0]
 800f244:	1e10      	subs	r0, r2, #0
 800f246:	bf18      	it	ne
 800f248:	2001      	movne	r0, #1
 800f24a:	b002      	add	sp, #8
 800f24c:	4770      	bx	lr
 800f24e:	4610      	mov	r0, r2
 800f250:	e7fb      	b.n	800f24a <__ascii_mbtowc+0x16>
 800f252:	f06f 0001 	mvn.w	r0, #1
 800f256:	e7f8      	b.n	800f24a <__ascii_mbtowc+0x16>

0800f258 <memmove>:
 800f258:	4288      	cmp	r0, r1
 800f25a:	b510      	push	{r4, lr}
 800f25c:	eb01 0402 	add.w	r4, r1, r2
 800f260:	d902      	bls.n	800f268 <memmove+0x10>
 800f262:	4284      	cmp	r4, r0
 800f264:	4623      	mov	r3, r4
 800f266:	d807      	bhi.n	800f278 <memmove+0x20>
 800f268:	1e43      	subs	r3, r0, #1
 800f26a:	42a1      	cmp	r1, r4
 800f26c:	d008      	beq.n	800f280 <memmove+0x28>
 800f26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f272:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f276:	e7f8      	b.n	800f26a <memmove+0x12>
 800f278:	4402      	add	r2, r0
 800f27a:	4601      	mov	r1, r0
 800f27c:	428a      	cmp	r2, r1
 800f27e:	d100      	bne.n	800f282 <memmove+0x2a>
 800f280:	bd10      	pop	{r4, pc}
 800f282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f28a:	e7f7      	b.n	800f27c <memmove+0x24>

0800f28c <__malloc_lock>:
 800f28c:	4801      	ldr	r0, [pc, #4]	; (800f294 <__malloc_lock+0x8>)
 800f28e:	f000 bc1f 	b.w	800fad0 <__retarget_lock_acquire_recursive>
 800f292:	bf00      	nop
 800f294:	200008fc 	.word	0x200008fc

0800f298 <__malloc_unlock>:
 800f298:	4801      	ldr	r0, [pc, #4]	; (800f2a0 <__malloc_unlock+0x8>)
 800f29a:	f000 bc1a 	b.w	800fad2 <__retarget_lock_release_recursive>
 800f29e:	bf00      	nop
 800f2a0:	200008fc 	.word	0x200008fc

0800f2a4 <_realloc_r>:
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	4680      	mov	r8, r0
 800f2aa:	4614      	mov	r4, r2
 800f2ac:	460e      	mov	r6, r1
 800f2ae:	b921      	cbnz	r1, 800f2ba <_realloc_r+0x16>
 800f2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b4:	4611      	mov	r1, r2
 800f2b6:	f7ff bdad 	b.w	800ee14 <_malloc_r>
 800f2ba:	b92a      	cbnz	r2, 800f2c8 <_realloc_r+0x24>
 800f2bc:	f7ff fd3e 	bl	800ed3c <_free_r>
 800f2c0:	4625      	mov	r5, r4
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c8:	f000 fc6a 	bl	800fba0 <_malloc_usable_size_r>
 800f2cc:	4284      	cmp	r4, r0
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	d802      	bhi.n	800f2d8 <_realloc_r+0x34>
 800f2d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2d6:	d812      	bhi.n	800f2fe <_realloc_r+0x5a>
 800f2d8:	4621      	mov	r1, r4
 800f2da:	4640      	mov	r0, r8
 800f2dc:	f7ff fd9a 	bl	800ee14 <_malloc_r>
 800f2e0:	4605      	mov	r5, r0
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d0ed      	beq.n	800f2c2 <_realloc_r+0x1e>
 800f2e6:	42bc      	cmp	r4, r7
 800f2e8:	4622      	mov	r2, r4
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	bf28      	it	cs
 800f2ee:	463a      	movcs	r2, r7
 800f2f0:	f7ff f97c 	bl	800e5ec <memcpy>
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	f7ff fd20 	bl	800ed3c <_free_r>
 800f2fc:	e7e1      	b.n	800f2c2 <_realloc_r+0x1e>
 800f2fe:	4635      	mov	r5, r6
 800f300:	e7df      	b.n	800f2c2 <_realloc_r+0x1e>

0800f302 <__sfputc_r>:
 800f302:	6893      	ldr	r3, [r2, #8]
 800f304:	3b01      	subs	r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	b410      	push	{r4}
 800f30a:	6093      	str	r3, [r2, #8]
 800f30c:	da08      	bge.n	800f320 <__sfputc_r+0x1e>
 800f30e:	6994      	ldr	r4, [r2, #24]
 800f310:	42a3      	cmp	r3, r4
 800f312:	db01      	blt.n	800f318 <__sfputc_r+0x16>
 800f314:	290a      	cmp	r1, #10
 800f316:	d103      	bne.n	800f320 <__sfputc_r+0x1e>
 800f318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f31c:	f000 b94a 	b.w	800f5b4 <__swbuf_r>
 800f320:	6813      	ldr	r3, [r2, #0]
 800f322:	1c58      	adds	r0, r3, #1
 800f324:	6010      	str	r0, [r2, #0]
 800f326:	7019      	strb	r1, [r3, #0]
 800f328:	4608      	mov	r0, r1
 800f32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <__sfputs_r>:
 800f330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f332:	4606      	mov	r6, r0
 800f334:	460f      	mov	r7, r1
 800f336:	4614      	mov	r4, r2
 800f338:	18d5      	adds	r5, r2, r3
 800f33a:	42ac      	cmp	r4, r5
 800f33c:	d101      	bne.n	800f342 <__sfputs_r+0x12>
 800f33e:	2000      	movs	r0, #0
 800f340:	e007      	b.n	800f352 <__sfputs_r+0x22>
 800f342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f346:	463a      	mov	r2, r7
 800f348:	4630      	mov	r0, r6
 800f34a:	f7ff ffda 	bl	800f302 <__sfputc_r>
 800f34e:	1c43      	adds	r3, r0, #1
 800f350:	d1f3      	bne.n	800f33a <__sfputs_r+0xa>
 800f352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f354 <_vfiprintf_r>:
 800f354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f358:	460d      	mov	r5, r1
 800f35a:	b09d      	sub	sp, #116	; 0x74
 800f35c:	4614      	mov	r4, r2
 800f35e:	4698      	mov	r8, r3
 800f360:	4606      	mov	r6, r0
 800f362:	b118      	cbz	r0, 800f36c <_vfiprintf_r+0x18>
 800f364:	6983      	ldr	r3, [r0, #24]
 800f366:	b90b      	cbnz	r3, 800f36c <_vfiprintf_r+0x18>
 800f368:	f000 fb14 	bl	800f994 <__sinit>
 800f36c:	4b89      	ldr	r3, [pc, #548]	; (800f594 <_vfiprintf_r+0x240>)
 800f36e:	429d      	cmp	r5, r3
 800f370:	d11b      	bne.n	800f3aa <_vfiprintf_r+0x56>
 800f372:	6875      	ldr	r5, [r6, #4]
 800f374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f376:	07d9      	lsls	r1, r3, #31
 800f378:	d405      	bmi.n	800f386 <_vfiprintf_r+0x32>
 800f37a:	89ab      	ldrh	r3, [r5, #12]
 800f37c:	059a      	lsls	r2, r3, #22
 800f37e:	d402      	bmi.n	800f386 <_vfiprintf_r+0x32>
 800f380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f382:	f000 fba5 	bl	800fad0 <__retarget_lock_acquire_recursive>
 800f386:	89ab      	ldrh	r3, [r5, #12]
 800f388:	071b      	lsls	r3, r3, #28
 800f38a:	d501      	bpl.n	800f390 <_vfiprintf_r+0x3c>
 800f38c:	692b      	ldr	r3, [r5, #16]
 800f38e:	b9eb      	cbnz	r3, 800f3cc <_vfiprintf_r+0x78>
 800f390:	4629      	mov	r1, r5
 800f392:	4630      	mov	r0, r6
 800f394:	f000 f96e 	bl	800f674 <__swsetup_r>
 800f398:	b1c0      	cbz	r0, 800f3cc <_vfiprintf_r+0x78>
 800f39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f39c:	07dc      	lsls	r4, r3, #31
 800f39e:	d50e      	bpl.n	800f3be <_vfiprintf_r+0x6a>
 800f3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a4:	b01d      	add	sp, #116	; 0x74
 800f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3aa:	4b7b      	ldr	r3, [pc, #492]	; (800f598 <_vfiprintf_r+0x244>)
 800f3ac:	429d      	cmp	r5, r3
 800f3ae:	d101      	bne.n	800f3b4 <_vfiprintf_r+0x60>
 800f3b0:	68b5      	ldr	r5, [r6, #8]
 800f3b2:	e7df      	b.n	800f374 <_vfiprintf_r+0x20>
 800f3b4:	4b79      	ldr	r3, [pc, #484]	; (800f59c <_vfiprintf_r+0x248>)
 800f3b6:	429d      	cmp	r5, r3
 800f3b8:	bf08      	it	eq
 800f3ba:	68f5      	ldreq	r5, [r6, #12]
 800f3bc:	e7da      	b.n	800f374 <_vfiprintf_r+0x20>
 800f3be:	89ab      	ldrh	r3, [r5, #12]
 800f3c0:	0598      	lsls	r0, r3, #22
 800f3c2:	d4ed      	bmi.n	800f3a0 <_vfiprintf_r+0x4c>
 800f3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3c6:	f000 fb84 	bl	800fad2 <__retarget_lock_release_recursive>
 800f3ca:	e7e9      	b.n	800f3a0 <_vfiprintf_r+0x4c>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f3d0:	2320      	movs	r3, #32
 800f3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3da:	2330      	movs	r3, #48	; 0x30
 800f3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5a0 <_vfiprintf_r+0x24c>
 800f3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3e4:	f04f 0901 	mov.w	r9, #1
 800f3e8:	4623      	mov	r3, r4
 800f3ea:	469a      	mov	sl, r3
 800f3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3f0:	b10a      	cbz	r2, 800f3f6 <_vfiprintf_r+0xa2>
 800f3f2:	2a25      	cmp	r2, #37	; 0x25
 800f3f4:	d1f9      	bne.n	800f3ea <_vfiprintf_r+0x96>
 800f3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f3fa:	d00b      	beq.n	800f414 <_vfiprintf_r+0xc0>
 800f3fc:	465b      	mov	r3, fp
 800f3fe:	4622      	mov	r2, r4
 800f400:	4629      	mov	r1, r5
 800f402:	4630      	mov	r0, r6
 800f404:	f7ff ff94 	bl	800f330 <__sfputs_r>
 800f408:	3001      	adds	r0, #1
 800f40a:	f000 80aa 	beq.w	800f562 <_vfiprintf_r+0x20e>
 800f40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f410:	445a      	add	r2, fp
 800f412:	9209      	str	r2, [sp, #36]	; 0x24
 800f414:	f89a 3000 	ldrb.w	r3, [sl]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f000 80a2 	beq.w	800f562 <_vfiprintf_r+0x20e>
 800f41e:	2300      	movs	r3, #0
 800f420:	f04f 32ff 	mov.w	r2, #4294967295
 800f424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f428:	f10a 0a01 	add.w	sl, sl, #1
 800f42c:	9304      	str	r3, [sp, #16]
 800f42e:	9307      	str	r3, [sp, #28]
 800f430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f434:	931a      	str	r3, [sp, #104]	; 0x68
 800f436:	4654      	mov	r4, sl
 800f438:	2205      	movs	r2, #5
 800f43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f43e:	4858      	ldr	r0, [pc, #352]	; (800f5a0 <_vfiprintf_r+0x24c>)
 800f440:	f7f0 fed6 	bl	80001f0 <memchr>
 800f444:	9a04      	ldr	r2, [sp, #16]
 800f446:	b9d8      	cbnz	r0, 800f480 <_vfiprintf_r+0x12c>
 800f448:	06d1      	lsls	r1, r2, #27
 800f44a:	bf44      	itt	mi
 800f44c:	2320      	movmi	r3, #32
 800f44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f452:	0713      	lsls	r3, r2, #28
 800f454:	bf44      	itt	mi
 800f456:	232b      	movmi	r3, #43	; 0x2b
 800f458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f45c:	f89a 3000 	ldrb.w	r3, [sl]
 800f460:	2b2a      	cmp	r3, #42	; 0x2a
 800f462:	d015      	beq.n	800f490 <_vfiprintf_r+0x13c>
 800f464:	9a07      	ldr	r2, [sp, #28]
 800f466:	4654      	mov	r4, sl
 800f468:	2000      	movs	r0, #0
 800f46a:	f04f 0c0a 	mov.w	ip, #10
 800f46e:	4621      	mov	r1, r4
 800f470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f474:	3b30      	subs	r3, #48	; 0x30
 800f476:	2b09      	cmp	r3, #9
 800f478:	d94e      	bls.n	800f518 <_vfiprintf_r+0x1c4>
 800f47a:	b1b0      	cbz	r0, 800f4aa <_vfiprintf_r+0x156>
 800f47c:	9207      	str	r2, [sp, #28]
 800f47e:	e014      	b.n	800f4aa <_vfiprintf_r+0x156>
 800f480:	eba0 0308 	sub.w	r3, r0, r8
 800f484:	fa09 f303 	lsl.w	r3, r9, r3
 800f488:	4313      	orrs	r3, r2
 800f48a:	9304      	str	r3, [sp, #16]
 800f48c:	46a2      	mov	sl, r4
 800f48e:	e7d2      	b.n	800f436 <_vfiprintf_r+0xe2>
 800f490:	9b03      	ldr	r3, [sp, #12]
 800f492:	1d19      	adds	r1, r3, #4
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	9103      	str	r1, [sp, #12]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	bfbb      	ittet	lt
 800f49c:	425b      	neglt	r3, r3
 800f49e:	f042 0202 	orrlt.w	r2, r2, #2
 800f4a2:	9307      	strge	r3, [sp, #28]
 800f4a4:	9307      	strlt	r3, [sp, #28]
 800f4a6:	bfb8      	it	lt
 800f4a8:	9204      	strlt	r2, [sp, #16]
 800f4aa:	7823      	ldrb	r3, [r4, #0]
 800f4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800f4ae:	d10c      	bne.n	800f4ca <_vfiprintf_r+0x176>
 800f4b0:	7863      	ldrb	r3, [r4, #1]
 800f4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f4b4:	d135      	bne.n	800f522 <_vfiprintf_r+0x1ce>
 800f4b6:	9b03      	ldr	r3, [sp, #12]
 800f4b8:	1d1a      	adds	r2, r3, #4
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	9203      	str	r2, [sp, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	bfb8      	it	lt
 800f4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4c6:	3402      	adds	r4, #2
 800f4c8:	9305      	str	r3, [sp, #20]
 800f4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5b0 <_vfiprintf_r+0x25c>
 800f4ce:	7821      	ldrb	r1, [r4, #0]
 800f4d0:	2203      	movs	r2, #3
 800f4d2:	4650      	mov	r0, sl
 800f4d4:	f7f0 fe8c 	bl	80001f0 <memchr>
 800f4d8:	b140      	cbz	r0, 800f4ec <_vfiprintf_r+0x198>
 800f4da:	2340      	movs	r3, #64	; 0x40
 800f4dc:	eba0 000a 	sub.w	r0, r0, sl
 800f4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800f4e4:	9b04      	ldr	r3, [sp, #16]
 800f4e6:	4303      	orrs	r3, r0
 800f4e8:	3401      	adds	r4, #1
 800f4ea:	9304      	str	r3, [sp, #16]
 800f4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f0:	482c      	ldr	r0, [pc, #176]	; (800f5a4 <_vfiprintf_r+0x250>)
 800f4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4f6:	2206      	movs	r2, #6
 800f4f8:	f7f0 fe7a 	bl	80001f0 <memchr>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d03f      	beq.n	800f580 <_vfiprintf_r+0x22c>
 800f500:	4b29      	ldr	r3, [pc, #164]	; (800f5a8 <_vfiprintf_r+0x254>)
 800f502:	bb1b      	cbnz	r3, 800f54c <_vfiprintf_r+0x1f8>
 800f504:	9b03      	ldr	r3, [sp, #12]
 800f506:	3307      	adds	r3, #7
 800f508:	f023 0307 	bic.w	r3, r3, #7
 800f50c:	3308      	adds	r3, #8
 800f50e:	9303      	str	r3, [sp, #12]
 800f510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f512:	443b      	add	r3, r7
 800f514:	9309      	str	r3, [sp, #36]	; 0x24
 800f516:	e767      	b.n	800f3e8 <_vfiprintf_r+0x94>
 800f518:	fb0c 3202 	mla	r2, ip, r2, r3
 800f51c:	460c      	mov	r4, r1
 800f51e:	2001      	movs	r0, #1
 800f520:	e7a5      	b.n	800f46e <_vfiprintf_r+0x11a>
 800f522:	2300      	movs	r3, #0
 800f524:	3401      	adds	r4, #1
 800f526:	9305      	str	r3, [sp, #20]
 800f528:	4619      	mov	r1, r3
 800f52a:	f04f 0c0a 	mov.w	ip, #10
 800f52e:	4620      	mov	r0, r4
 800f530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f534:	3a30      	subs	r2, #48	; 0x30
 800f536:	2a09      	cmp	r2, #9
 800f538:	d903      	bls.n	800f542 <_vfiprintf_r+0x1ee>
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d0c5      	beq.n	800f4ca <_vfiprintf_r+0x176>
 800f53e:	9105      	str	r1, [sp, #20]
 800f540:	e7c3      	b.n	800f4ca <_vfiprintf_r+0x176>
 800f542:	fb0c 2101 	mla	r1, ip, r1, r2
 800f546:	4604      	mov	r4, r0
 800f548:	2301      	movs	r3, #1
 800f54a:	e7f0      	b.n	800f52e <_vfiprintf_r+0x1da>
 800f54c:	ab03      	add	r3, sp, #12
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	462a      	mov	r2, r5
 800f552:	4b16      	ldr	r3, [pc, #88]	; (800f5ac <_vfiprintf_r+0x258>)
 800f554:	a904      	add	r1, sp, #16
 800f556:	4630      	mov	r0, r6
 800f558:	f7fd fdc4 	bl	800d0e4 <_printf_float>
 800f55c:	4607      	mov	r7, r0
 800f55e:	1c78      	adds	r0, r7, #1
 800f560:	d1d6      	bne.n	800f510 <_vfiprintf_r+0x1bc>
 800f562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f564:	07d9      	lsls	r1, r3, #31
 800f566:	d405      	bmi.n	800f574 <_vfiprintf_r+0x220>
 800f568:	89ab      	ldrh	r3, [r5, #12]
 800f56a:	059a      	lsls	r2, r3, #22
 800f56c:	d402      	bmi.n	800f574 <_vfiprintf_r+0x220>
 800f56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f570:	f000 faaf 	bl	800fad2 <__retarget_lock_release_recursive>
 800f574:	89ab      	ldrh	r3, [r5, #12]
 800f576:	065b      	lsls	r3, r3, #25
 800f578:	f53f af12 	bmi.w	800f3a0 <_vfiprintf_r+0x4c>
 800f57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f57e:	e711      	b.n	800f3a4 <_vfiprintf_r+0x50>
 800f580:	ab03      	add	r3, sp, #12
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	462a      	mov	r2, r5
 800f586:	4b09      	ldr	r3, [pc, #36]	; (800f5ac <_vfiprintf_r+0x258>)
 800f588:	a904      	add	r1, sp, #16
 800f58a:	4630      	mov	r0, r6
 800f58c:	f7fe f84e 	bl	800d62c <_printf_i>
 800f590:	e7e4      	b.n	800f55c <_vfiprintf_r+0x208>
 800f592:	bf00      	nop
 800f594:	0803d70c 	.word	0x0803d70c
 800f598:	0803d72c 	.word	0x0803d72c
 800f59c:	0803d6ec 	.word	0x0803d6ec
 800f5a0:	0803d594 	.word	0x0803d594
 800f5a4:	0803d59e 	.word	0x0803d59e
 800f5a8:	0800d0e5 	.word	0x0800d0e5
 800f5ac:	0800f331 	.word	0x0800f331
 800f5b0:	0803d59a 	.word	0x0803d59a

0800f5b4 <__swbuf_r>:
 800f5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b6:	460e      	mov	r6, r1
 800f5b8:	4614      	mov	r4, r2
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	b118      	cbz	r0, 800f5c6 <__swbuf_r+0x12>
 800f5be:	6983      	ldr	r3, [r0, #24]
 800f5c0:	b90b      	cbnz	r3, 800f5c6 <__swbuf_r+0x12>
 800f5c2:	f000 f9e7 	bl	800f994 <__sinit>
 800f5c6:	4b21      	ldr	r3, [pc, #132]	; (800f64c <__swbuf_r+0x98>)
 800f5c8:	429c      	cmp	r4, r3
 800f5ca:	d12b      	bne.n	800f624 <__swbuf_r+0x70>
 800f5cc:	686c      	ldr	r4, [r5, #4]
 800f5ce:	69a3      	ldr	r3, [r4, #24]
 800f5d0:	60a3      	str	r3, [r4, #8]
 800f5d2:	89a3      	ldrh	r3, [r4, #12]
 800f5d4:	071a      	lsls	r2, r3, #28
 800f5d6:	d52f      	bpl.n	800f638 <__swbuf_r+0x84>
 800f5d8:	6923      	ldr	r3, [r4, #16]
 800f5da:	b36b      	cbz	r3, 800f638 <__swbuf_r+0x84>
 800f5dc:	6923      	ldr	r3, [r4, #16]
 800f5de:	6820      	ldr	r0, [r4, #0]
 800f5e0:	1ac0      	subs	r0, r0, r3
 800f5e2:	6963      	ldr	r3, [r4, #20]
 800f5e4:	b2f6      	uxtb	r6, r6
 800f5e6:	4283      	cmp	r3, r0
 800f5e8:	4637      	mov	r7, r6
 800f5ea:	dc04      	bgt.n	800f5f6 <__swbuf_r+0x42>
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f000 f93c 	bl	800f86c <_fflush_r>
 800f5f4:	bb30      	cbnz	r0, 800f644 <__swbuf_r+0x90>
 800f5f6:	68a3      	ldr	r3, [r4, #8]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	60a3      	str	r3, [r4, #8]
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	6022      	str	r2, [r4, #0]
 800f602:	701e      	strb	r6, [r3, #0]
 800f604:	6963      	ldr	r3, [r4, #20]
 800f606:	3001      	adds	r0, #1
 800f608:	4283      	cmp	r3, r0
 800f60a:	d004      	beq.n	800f616 <__swbuf_r+0x62>
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	07db      	lsls	r3, r3, #31
 800f610:	d506      	bpl.n	800f620 <__swbuf_r+0x6c>
 800f612:	2e0a      	cmp	r6, #10
 800f614:	d104      	bne.n	800f620 <__swbuf_r+0x6c>
 800f616:	4621      	mov	r1, r4
 800f618:	4628      	mov	r0, r5
 800f61a:	f000 f927 	bl	800f86c <_fflush_r>
 800f61e:	b988      	cbnz	r0, 800f644 <__swbuf_r+0x90>
 800f620:	4638      	mov	r0, r7
 800f622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f624:	4b0a      	ldr	r3, [pc, #40]	; (800f650 <__swbuf_r+0x9c>)
 800f626:	429c      	cmp	r4, r3
 800f628:	d101      	bne.n	800f62e <__swbuf_r+0x7a>
 800f62a:	68ac      	ldr	r4, [r5, #8]
 800f62c:	e7cf      	b.n	800f5ce <__swbuf_r+0x1a>
 800f62e:	4b09      	ldr	r3, [pc, #36]	; (800f654 <__swbuf_r+0xa0>)
 800f630:	429c      	cmp	r4, r3
 800f632:	bf08      	it	eq
 800f634:	68ec      	ldreq	r4, [r5, #12]
 800f636:	e7ca      	b.n	800f5ce <__swbuf_r+0x1a>
 800f638:	4621      	mov	r1, r4
 800f63a:	4628      	mov	r0, r5
 800f63c:	f000 f81a 	bl	800f674 <__swsetup_r>
 800f640:	2800      	cmp	r0, #0
 800f642:	d0cb      	beq.n	800f5dc <__swbuf_r+0x28>
 800f644:	f04f 37ff 	mov.w	r7, #4294967295
 800f648:	e7ea      	b.n	800f620 <__swbuf_r+0x6c>
 800f64a:	bf00      	nop
 800f64c:	0803d70c 	.word	0x0803d70c
 800f650:	0803d72c 	.word	0x0803d72c
 800f654:	0803d6ec 	.word	0x0803d6ec

0800f658 <__ascii_wctomb>:
 800f658:	b149      	cbz	r1, 800f66e <__ascii_wctomb+0x16>
 800f65a:	2aff      	cmp	r2, #255	; 0xff
 800f65c:	bf85      	ittet	hi
 800f65e:	238a      	movhi	r3, #138	; 0x8a
 800f660:	6003      	strhi	r3, [r0, #0]
 800f662:	700a      	strbls	r2, [r1, #0]
 800f664:	f04f 30ff 	movhi.w	r0, #4294967295
 800f668:	bf98      	it	ls
 800f66a:	2001      	movls	r0, #1
 800f66c:	4770      	bx	lr
 800f66e:	4608      	mov	r0, r1
 800f670:	4770      	bx	lr
	...

0800f674 <__swsetup_r>:
 800f674:	4b32      	ldr	r3, [pc, #200]	; (800f740 <__swsetup_r+0xcc>)
 800f676:	b570      	push	{r4, r5, r6, lr}
 800f678:	681d      	ldr	r5, [r3, #0]
 800f67a:	4606      	mov	r6, r0
 800f67c:	460c      	mov	r4, r1
 800f67e:	b125      	cbz	r5, 800f68a <__swsetup_r+0x16>
 800f680:	69ab      	ldr	r3, [r5, #24]
 800f682:	b913      	cbnz	r3, 800f68a <__swsetup_r+0x16>
 800f684:	4628      	mov	r0, r5
 800f686:	f000 f985 	bl	800f994 <__sinit>
 800f68a:	4b2e      	ldr	r3, [pc, #184]	; (800f744 <__swsetup_r+0xd0>)
 800f68c:	429c      	cmp	r4, r3
 800f68e:	d10f      	bne.n	800f6b0 <__swsetup_r+0x3c>
 800f690:	686c      	ldr	r4, [r5, #4]
 800f692:	89a3      	ldrh	r3, [r4, #12]
 800f694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f698:	0719      	lsls	r1, r3, #28
 800f69a:	d42c      	bmi.n	800f6f6 <__swsetup_r+0x82>
 800f69c:	06dd      	lsls	r5, r3, #27
 800f69e:	d411      	bmi.n	800f6c4 <__swsetup_r+0x50>
 800f6a0:	2309      	movs	r3, #9
 800f6a2:	6033      	str	r3, [r6, #0]
 800f6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f6a8:	81a3      	strh	r3, [r4, #12]
 800f6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ae:	e03e      	b.n	800f72e <__swsetup_r+0xba>
 800f6b0:	4b25      	ldr	r3, [pc, #148]	; (800f748 <__swsetup_r+0xd4>)
 800f6b2:	429c      	cmp	r4, r3
 800f6b4:	d101      	bne.n	800f6ba <__swsetup_r+0x46>
 800f6b6:	68ac      	ldr	r4, [r5, #8]
 800f6b8:	e7eb      	b.n	800f692 <__swsetup_r+0x1e>
 800f6ba:	4b24      	ldr	r3, [pc, #144]	; (800f74c <__swsetup_r+0xd8>)
 800f6bc:	429c      	cmp	r4, r3
 800f6be:	bf08      	it	eq
 800f6c0:	68ec      	ldreq	r4, [r5, #12]
 800f6c2:	e7e6      	b.n	800f692 <__swsetup_r+0x1e>
 800f6c4:	0758      	lsls	r0, r3, #29
 800f6c6:	d512      	bpl.n	800f6ee <__swsetup_r+0x7a>
 800f6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6ca:	b141      	cbz	r1, 800f6de <__swsetup_r+0x6a>
 800f6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6d0:	4299      	cmp	r1, r3
 800f6d2:	d002      	beq.n	800f6da <__swsetup_r+0x66>
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f7ff fb31 	bl	800ed3c <_free_r>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800f6de:	89a3      	ldrh	r3, [r4, #12]
 800f6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6e4:	81a3      	strh	r3, [r4, #12]
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	6063      	str	r3, [r4, #4]
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	89a3      	ldrh	r3, [r4, #12]
 800f6f0:	f043 0308 	orr.w	r3, r3, #8
 800f6f4:	81a3      	strh	r3, [r4, #12]
 800f6f6:	6923      	ldr	r3, [r4, #16]
 800f6f8:	b94b      	cbnz	r3, 800f70e <__swsetup_r+0x9a>
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f704:	d003      	beq.n	800f70e <__swsetup_r+0x9a>
 800f706:	4621      	mov	r1, r4
 800f708:	4630      	mov	r0, r6
 800f70a:	f000 fa09 	bl	800fb20 <__smakebuf_r>
 800f70e:	89a0      	ldrh	r0, [r4, #12]
 800f710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f714:	f010 0301 	ands.w	r3, r0, #1
 800f718:	d00a      	beq.n	800f730 <__swsetup_r+0xbc>
 800f71a:	2300      	movs	r3, #0
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	6963      	ldr	r3, [r4, #20]
 800f720:	425b      	negs	r3, r3
 800f722:	61a3      	str	r3, [r4, #24]
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	b943      	cbnz	r3, 800f73a <__swsetup_r+0xc6>
 800f728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f72c:	d1ba      	bne.n	800f6a4 <__swsetup_r+0x30>
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	0781      	lsls	r1, r0, #30
 800f732:	bf58      	it	pl
 800f734:	6963      	ldrpl	r3, [r4, #20]
 800f736:	60a3      	str	r3, [r4, #8]
 800f738:	e7f4      	b.n	800f724 <__swsetup_r+0xb0>
 800f73a:	2000      	movs	r0, #0
 800f73c:	e7f7      	b.n	800f72e <__swsetup_r+0xba>
 800f73e:	bf00      	nop
 800f740:	20000250 	.word	0x20000250
 800f744:	0803d70c 	.word	0x0803d70c
 800f748:	0803d72c 	.word	0x0803d72c
 800f74c:	0803d6ec 	.word	0x0803d6ec

0800f750 <abort>:
 800f750:	b508      	push	{r3, lr}
 800f752:	2006      	movs	r0, #6
 800f754:	f000 fa54 	bl	800fc00 <raise>
 800f758:	2001      	movs	r0, #1
 800f75a:	f7f5 fff1 	bl	8005740 <_exit>
	...

0800f760 <__sflush_r>:
 800f760:	898a      	ldrh	r2, [r1, #12]
 800f762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f766:	4605      	mov	r5, r0
 800f768:	0710      	lsls	r0, r2, #28
 800f76a:	460c      	mov	r4, r1
 800f76c:	d458      	bmi.n	800f820 <__sflush_r+0xc0>
 800f76e:	684b      	ldr	r3, [r1, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	dc05      	bgt.n	800f780 <__sflush_r+0x20>
 800f774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f776:	2b00      	cmp	r3, #0
 800f778:	dc02      	bgt.n	800f780 <__sflush_r+0x20>
 800f77a:	2000      	movs	r0, #0
 800f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f782:	2e00      	cmp	r6, #0
 800f784:	d0f9      	beq.n	800f77a <__sflush_r+0x1a>
 800f786:	2300      	movs	r3, #0
 800f788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f78c:	682f      	ldr	r7, [r5, #0]
 800f78e:	602b      	str	r3, [r5, #0]
 800f790:	d032      	beq.n	800f7f8 <__sflush_r+0x98>
 800f792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	075a      	lsls	r2, r3, #29
 800f798:	d505      	bpl.n	800f7a6 <__sflush_r+0x46>
 800f79a:	6863      	ldr	r3, [r4, #4]
 800f79c:	1ac0      	subs	r0, r0, r3
 800f79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7a0:	b10b      	cbz	r3, 800f7a6 <__sflush_r+0x46>
 800f7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7a4:	1ac0      	subs	r0, r0, r3
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7ac:	6a21      	ldr	r1, [r4, #32]
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	47b0      	blx	r6
 800f7b2:	1c43      	adds	r3, r0, #1
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	d106      	bne.n	800f7c6 <__sflush_r+0x66>
 800f7b8:	6829      	ldr	r1, [r5, #0]
 800f7ba:	291d      	cmp	r1, #29
 800f7bc:	d82c      	bhi.n	800f818 <__sflush_r+0xb8>
 800f7be:	4a2a      	ldr	r2, [pc, #168]	; (800f868 <__sflush_r+0x108>)
 800f7c0:	40ca      	lsrs	r2, r1
 800f7c2:	07d6      	lsls	r6, r2, #31
 800f7c4:	d528      	bpl.n	800f818 <__sflush_r+0xb8>
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	6062      	str	r2, [r4, #4]
 800f7ca:	04d9      	lsls	r1, r3, #19
 800f7cc:	6922      	ldr	r2, [r4, #16]
 800f7ce:	6022      	str	r2, [r4, #0]
 800f7d0:	d504      	bpl.n	800f7dc <__sflush_r+0x7c>
 800f7d2:	1c42      	adds	r2, r0, #1
 800f7d4:	d101      	bne.n	800f7da <__sflush_r+0x7a>
 800f7d6:	682b      	ldr	r3, [r5, #0]
 800f7d8:	b903      	cbnz	r3, 800f7dc <__sflush_r+0x7c>
 800f7da:	6560      	str	r0, [r4, #84]	; 0x54
 800f7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7de:	602f      	str	r7, [r5, #0]
 800f7e0:	2900      	cmp	r1, #0
 800f7e2:	d0ca      	beq.n	800f77a <__sflush_r+0x1a>
 800f7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	d002      	beq.n	800f7f2 <__sflush_r+0x92>
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f7ff faa5 	bl	800ed3c <_free_r>
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800f7f6:	e7c1      	b.n	800f77c <__sflush_r+0x1c>
 800f7f8:	6a21      	ldr	r1, [r4, #32]
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b0      	blx	r6
 800f800:	1c41      	adds	r1, r0, #1
 800f802:	d1c7      	bne.n	800f794 <__sflush_r+0x34>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d0c4      	beq.n	800f794 <__sflush_r+0x34>
 800f80a:	2b1d      	cmp	r3, #29
 800f80c:	d001      	beq.n	800f812 <__sflush_r+0xb2>
 800f80e:	2b16      	cmp	r3, #22
 800f810:	d101      	bne.n	800f816 <__sflush_r+0xb6>
 800f812:	602f      	str	r7, [r5, #0]
 800f814:	e7b1      	b.n	800f77a <__sflush_r+0x1a>
 800f816:	89a3      	ldrh	r3, [r4, #12]
 800f818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f81c:	81a3      	strh	r3, [r4, #12]
 800f81e:	e7ad      	b.n	800f77c <__sflush_r+0x1c>
 800f820:	690f      	ldr	r7, [r1, #16]
 800f822:	2f00      	cmp	r7, #0
 800f824:	d0a9      	beq.n	800f77a <__sflush_r+0x1a>
 800f826:	0793      	lsls	r3, r2, #30
 800f828:	680e      	ldr	r6, [r1, #0]
 800f82a:	bf08      	it	eq
 800f82c:	694b      	ldreq	r3, [r1, #20]
 800f82e:	600f      	str	r7, [r1, #0]
 800f830:	bf18      	it	ne
 800f832:	2300      	movne	r3, #0
 800f834:	eba6 0807 	sub.w	r8, r6, r7
 800f838:	608b      	str	r3, [r1, #8]
 800f83a:	f1b8 0f00 	cmp.w	r8, #0
 800f83e:	dd9c      	ble.n	800f77a <__sflush_r+0x1a>
 800f840:	6a21      	ldr	r1, [r4, #32]
 800f842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f844:	4643      	mov	r3, r8
 800f846:	463a      	mov	r2, r7
 800f848:	4628      	mov	r0, r5
 800f84a:	47b0      	blx	r6
 800f84c:	2800      	cmp	r0, #0
 800f84e:	dc06      	bgt.n	800f85e <__sflush_r+0xfe>
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f856:	81a3      	strh	r3, [r4, #12]
 800f858:	f04f 30ff 	mov.w	r0, #4294967295
 800f85c:	e78e      	b.n	800f77c <__sflush_r+0x1c>
 800f85e:	4407      	add	r7, r0
 800f860:	eba8 0800 	sub.w	r8, r8, r0
 800f864:	e7e9      	b.n	800f83a <__sflush_r+0xda>
 800f866:	bf00      	nop
 800f868:	20400001 	.word	0x20400001

0800f86c <_fflush_r>:
 800f86c:	b538      	push	{r3, r4, r5, lr}
 800f86e:	690b      	ldr	r3, [r1, #16]
 800f870:	4605      	mov	r5, r0
 800f872:	460c      	mov	r4, r1
 800f874:	b913      	cbnz	r3, 800f87c <_fflush_r+0x10>
 800f876:	2500      	movs	r5, #0
 800f878:	4628      	mov	r0, r5
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	b118      	cbz	r0, 800f886 <_fflush_r+0x1a>
 800f87e:	6983      	ldr	r3, [r0, #24]
 800f880:	b90b      	cbnz	r3, 800f886 <_fflush_r+0x1a>
 800f882:	f000 f887 	bl	800f994 <__sinit>
 800f886:	4b14      	ldr	r3, [pc, #80]	; (800f8d8 <_fflush_r+0x6c>)
 800f888:	429c      	cmp	r4, r3
 800f88a:	d11b      	bne.n	800f8c4 <_fflush_r+0x58>
 800f88c:	686c      	ldr	r4, [r5, #4]
 800f88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d0ef      	beq.n	800f876 <_fflush_r+0xa>
 800f896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f898:	07d0      	lsls	r0, r2, #31
 800f89a:	d404      	bmi.n	800f8a6 <_fflush_r+0x3a>
 800f89c:	0599      	lsls	r1, r3, #22
 800f89e:	d402      	bmi.n	800f8a6 <_fflush_r+0x3a>
 800f8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8a2:	f000 f915 	bl	800fad0 <__retarget_lock_acquire_recursive>
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	f7ff ff59 	bl	800f760 <__sflush_r>
 800f8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8b0:	07da      	lsls	r2, r3, #31
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	d4e0      	bmi.n	800f878 <_fflush_r+0xc>
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	059b      	lsls	r3, r3, #22
 800f8ba:	d4dd      	bmi.n	800f878 <_fflush_r+0xc>
 800f8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8be:	f000 f908 	bl	800fad2 <__retarget_lock_release_recursive>
 800f8c2:	e7d9      	b.n	800f878 <_fflush_r+0xc>
 800f8c4:	4b05      	ldr	r3, [pc, #20]	; (800f8dc <_fflush_r+0x70>)
 800f8c6:	429c      	cmp	r4, r3
 800f8c8:	d101      	bne.n	800f8ce <_fflush_r+0x62>
 800f8ca:	68ac      	ldr	r4, [r5, #8]
 800f8cc:	e7df      	b.n	800f88e <_fflush_r+0x22>
 800f8ce:	4b04      	ldr	r3, [pc, #16]	; (800f8e0 <_fflush_r+0x74>)
 800f8d0:	429c      	cmp	r4, r3
 800f8d2:	bf08      	it	eq
 800f8d4:	68ec      	ldreq	r4, [r5, #12]
 800f8d6:	e7da      	b.n	800f88e <_fflush_r+0x22>
 800f8d8:	0803d70c 	.word	0x0803d70c
 800f8dc:	0803d72c 	.word	0x0803d72c
 800f8e0:	0803d6ec 	.word	0x0803d6ec

0800f8e4 <std>:
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	b510      	push	{r4, lr}
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8f2:	6083      	str	r3, [r0, #8]
 800f8f4:	8181      	strh	r1, [r0, #12]
 800f8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800f8f8:	81c2      	strh	r2, [r0, #14]
 800f8fa:	6183      	str	r3, [r0, #24]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	2208      	movs	r2, #8
 800f900:	305c      	adds	r0, #92	; 0x5c
 800f902:	f7fd fb47 	bl	800cf94 <memset>
 800f906:	4b05      	ldr	r3, [pc, #20]	; (800f91c <std+0x38>)
 800f908:	6263      	str	r3, [r4, #36]	; 0x24
 800f90a:	4b05      	ldr	r3, [pc, #20]	; (800f920 <std+0x3c>)
 800f90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f90e:	4b05      	ldr	r3, [pc, #20]	; (800f924 <std+0x40>)
 800f910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f912:	4b05      	ldr	r3, [pc, #20]	; (800f928 <std+0x44>)
 800f914:	6224      	str	r4, [r4, #32]
 800f916:	6323      	str	r3, [r4, #48]	; 0x30
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	bf00      	nop
 800f91c:	0800fc39 	.word	0x0800fc39
 800f920:	0800fc5b 	.word	0x0800fc5b
 800f924:	0800fc93 	.word	0x0800fc93
 800f928:	0800fcb7 	.word	0x0800fcb7

0800f92c <_cleanup_r>:
 800f92c:	4901      	ldr	r1, [pc, #4]	; (800f934 <_cleanup_r+0x8>)
 800f92e:	f000 b8af 	b.w	800fa90 <_fwalk_reent>
 800f932:	bf00      	nop
 800f934:	0800f86d 	.word	0x0800f86d

0800f938 <__sfmoreglue>:
 800f938:	b570      	push	{r4, r5, r6, lr}
 800f93a:	2268      	movs	r2, #104	; 0x68
 800f93c:	1e4d      	subs	r5, r1, #1
 800f93e:	4355      	muls	r5, r2
 800f940:	460e      	mov	r6, r1
 800f942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f946:	f7ff fa65 	bl	800ee14 <_malloc_r>
 800f94a:	4604      	mov	r4, r0
 800f94c:	b140      	cbz	r0, 800f960 <__sfmoreglue+0x28>
 800f94e:	2100      	movs	r1, #0
 800f950:	e9c0 1600 	strd	r1, r6, [r0]
 800f954:	300c      	adds	r0, #12
 800f956:	60a0      	str	r0, [r4, #8]
 800f958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f95c:	f7fd fb1a 	bl	800cf94 <memset>
 800f960:	4620      	mov	r0, r4
 800f962:	bd70      	pop	{r4, r5, r6, pc}

0800f964 <__sfp_lock_acquire>:
 800f964:	4801      	ldr	r0, [pc, #4]	; (800f96c <__sfp_lock_acquire+0x8>)
 800f966:	f000 b8b3 	b.w	800fad0 <__retarget_lock_acquire_recursive>
 800f96a:	bf00      	nop
 800f96c:	200008fd 	.word	0x200008fd

0800f970 <__sfp_lock_release>:
 800f970:	4801      	ldr	r0, [pc, #4]	; (800f978 <__sfp_lock_release+0x8>)
 800f972:	f000 b8ae 	b.w	800fad2 <__retarget_lock_release_recursive>
 800f976:	bf00      	nop
 800f978:	200008fd 	.word	0x200008fd

0800f97c <__sinit_lock_acquire>:
 800f97c:	4801      	ldr	r0, [pc, #4]	; (800f984 <__sinit_lock_acquire+0x8>)
 800f97e:	f000 b8a7 	b.w	800fad0 <__retarget_lock_acquire_recursive>
 800f982:	bf00      	nop
 800f984:	200008fe 	.word	0x200008fe

0800f988 <__sinit_lock_release>:
 800f988:	4801      	ldr	r0, [pc, #4]	; (800f990 <__sinit_lock_release+0x8>)
 800f98a:	f000 b8a2 	b.w	800fad2 <__retarget_lock_release_recursive>
 800f98e:	bf00      	nop
 800f990:	200008fe 	.word	0x200008fe

0800f994 <__sinit>:
 800f994:	b510      	push	{r4, lr}
 800f996:	4604      	mov	r4, r0
 800f998:	f7ff fff0 	bl	800f97c <__sinit_lock_acquire>
 800f99c:	69a3      	ldr	r3, [r4, #24]
 800f99e:	b11b      	cbz	r3, 800f9a8 <__sinit+0x14>
 800f9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9a4:	f7ff bff0 	b.w	800f988 <__sinit_lock_release>
 800f9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800f9ae:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <__sinit+0x68>)
 800f9b0:	4a13      	ldr	r2, [pc, #76]	; (800fa00 <__sinit+0x6c>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9b6:	42a3      	cmp	r3, r4
 800f9b8:	bf04      	itt	eq
 800f9ba:	2301      	moveq	r3, #1
 800f9bc:	61a3      	streq	r3, [r4, #24]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 f820 	bl	800fa04 <__sfp>
 800f9c4:	6060      	str	r0, [r4, #4]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f000 f81c 	bl	800fa04 <__sfp>
 800f9cc:	60a0      	str	r0, [r4, #8]
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 f818 	bl	800fa04 <__sfp>
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	60e0      	str	r0, [r4, #12]
 800f9d8:	2104      	movs	r1, #4
 800f9da:	6860      	ldr	r0, [r4, #4]
 800f9dc:	f7ff ff82 	bl	800f8e4 <std>
 800f9e0:	68a0      	ldr	r0, [r4, #8]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	2109      	movs	r1, #9
 800f9e6:	f7ff ff7d 	bl	800f8e4 <std>
 800f9ea:	68e0      	ldr	r0, [r4, #12]
 800f9ec:	2202      	movs	r2, #2
 800f9ee:	2112      	movs	r1, #18
 800f9f0:	f7ff ff78 	bl	800f8e4 <std>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	61a3      	str	r3, [r4, #24]
 800f9f8:	e7d2      	b.n	800f9a0 <__sinit+0xc>
 800f9fa:	bf00      	nop
 800f9fc:	0803d370 	.word	0x0803d370
 800fa00:	0800f92d 	.word	0x0800f92d

0800fa04 <__sfp>:
 800fa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa06:	4607      	mov	r7, r0
 800fa08:	f7ff ffac 	bl	800f964 <__sfp_lock_acquire>
 800fa0c:	4b1e      	ldr	r3, [pc, #120]	; (800fa88 <__sfp+0x84>)
 800fa0e:	681e      	ldr	r6, [r3, #0]
 800fa10:	69b3      	ldr	r3, [r6, #24]
 800fa12:	b913      	cbnz	r3, 800fa1a <__sfp+0x16>
 800fa14:	4630      	mov	r0, r6
 800fa16:	f7ff ffbd 	bl	800f994 <__sinit>
 800fa1a:	3648      	adds	r6, #72	; 0x48
 800fa1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa20:	3b01      	subs	r3, #1
 800fa22:	d503      	bpl.n	800fa2c <__sfp+0x28>
 800fa24:	6833      	ldr	r3, [r6, #0]
 800fa26:	b30b      	cbz	r3, 800fa6c <__sfp+0x68>
 800fa28:	6836      	ldr	r6, [r6, #0]
 800fa2a:	e7f7      	b.n	800fa1c <__sfp+0x18>
 800fa2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa30:	b9d5      	cbnz	r5, 800fa68 <__sfp+0x64>
 800fa32:	4b16      	ldr	r3, [pc, #88]	; (800fa8c <__sfp+0x88>)
 800fa34:	60e3      	str	r3, [r4, #12]
 800fa36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa3a:	6665      	str	r5, [r4, #100]	; 0x64
 800fa3c:	f000 f847 	bl	800face <__retarget_lock_init_recursive>
 800fa40:	f7ff ff96 	bl	800f970 <__sfp_lock_release>
 800fa44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa4c:	6025      	str	r5, [r4, #0]
 800fa4e:	61a5      	str	r5, [r4, #24]
 800fa50:	2208      	movs	r2, #8
 800fa52:	4629      	mov	r1, r5
 800fa54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa58:	f7fd fa9c 	bl	800cf94 <memset>
 800fa5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa64:	4620      	mov	r0, r4
 800fa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa68:	3468      	adds	r4, #104	; 0x68
 800fa6a:	e7d9      	b.n	800fa20 <__sfp+0x1c>
 800fa6c:	2104      	movs	r1, #4
 800fa6e:	4638      	mov	r0, r7
 800fa70:	f7ff ff62 	bl	800f938 <__sfmoreglue>
 800fa74:	4604      	mov	r4, r0
 800fa76:	6030      	str	r0, [r6, #0]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d1d5      	bne.n	800fa28 <__sfp+0x24>
 800fa7c:	f7ff ff78 	bl	800f970 <__sfp_lock_release>
 800fa80:	230c      	movs	r3, #12
 800fa82:	603b      	str	r3, [r7, #0]
 800fa84:	e7ee      	b.n	800fa64 <__sfp+0x60>
 800fa86:	bf00      	nop
 800fa88:	0803d370 	.word	0x0803d370
 800fa8c:	ffff0001 	.word	0xffff0001

0800fa90 <_fwalk_reent>:
 800fa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa94:	4606      	mov	r6, r0
 800fa96:	4688      	mov	r8, r1
 800fa98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa9c:	2700      	movs	r7, #0
 800fa9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800faa2:	f1b9 0901 	subs.w	r9, r9, #1
 800faa6:	d505      	bpl.n	800fab4 <_fwalk_reent+0x24>
 800faa8:	6824      	ldr	r4, [r4, #0]
 800faaa:	2c00      	cmp	r4, #0
 800faac:	d1f7      	bne.n	800fa9e <_fwalk_reent+0xe>
 800faae:	4638      	mov	r0, r7
 800fab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab4:	89ab      	ldrh	r3, [r5, #12]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d907      	bls.n	800faca <_fwalk_reent+0x3a>
 800faba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fabe:	3301      	adds	r3, #1
 800fac0:	d003      	beq.n	800faca <_fwalk_reent+0x3a>
 800fac2:	4629      	mov	r1, r5
 800fac4:	4630      	mov	r0, r6
 800fac6:	47c0      	blx	r8
 800fac8:	4307      	orrs	r7, r0
 800faca:	3568      	adds	r5, #104	; 0x68
 800facc:	e7e9      	b.n	800faa2 <_fwalk_reent+0x12>

0800face <__retarget_lock_init_recursive>:
 800face:	4770      	bx	lr

0800fad0 <__retarget_lock_acquire_recursive>:
 800fad0:	4770      	bx	lr

0800fad2 <__retarget_lock_release_recursive>:
 800fad2:	4770      	bx	lr

0800fad4 <__swhatbuf_r>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	460e      	mov	r6, r1
 800fad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fadc:	2900      	cmp	r1, #0
 800fade:	b096      	sub	sp, #88	; 0x58
 800fae0:	4614      	mov	r4, r2
 800fae2:	461d      	mov	r5, r3
 800fae4:	da08      	bge.n	800faf8 <__swhatbuf_r+0x24>
 800fae6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800faea:	2200      	movs	r2, #0
 800faec:	602a      	str	r2, [r5, #0]
 800faee:	061a      	lsls	r2, r3, #24
 800faf0:	d410      	bmi.n	800fb14 <__swhatbuf_r+0x40>
 800faf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faf6:	e00e      	b.n	800fb16 <__swhatbuf_r+0x42>
 800faf8:	466a      	mov	r2, sp
 800fafa:	f000 f903 	bl	800fd04 <_fstat_r>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	dbf1      	blt.n	800fae6 <__swhatbuf_r+0x12>
 800fb02:	9a01      	ldr	r2, [sp, #4]
 800fb04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb0c:	425a      	negs	r2, r3
 800fb0e:	415a      	adcs	r2, r3
 800fb10:	602a      	str	r2, [r5, #0]
 800fb12:	e7ee      	b.n	800faf2 <__swhatbuf_r+0x1e>
 800fb14:	2340      	movs	r3, #64	; 0x40
 800fb16:	2000      	movs	r0, #0
 800fb18:	6023      	str	r3, [r4, #0]
 800fb1a:	b016      	add	sp, #88	; 0x58
 800fb1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb20 <__smakebuf_r>:
 800fb20:	898b      	ldrh	r3, [r1, #12]
 800fb22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb24:	079d      	lsls	r5, r3, #30
 800fb26:	4606      	mov	r6, r0
 800fb28:	460c      	mov	r4, r1
 800fb2a:	d507      	bpl.n	800fb3c <__smakebuf_r+0x1c>
 800fb2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	6123      	str	r3, [r4, #16]
 800fb34:	2301      	movs	r3, #1
 800fb36:	6163      	str	r3, [r4, #20]
 800fb38:	b002      	add	sp, #8
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	ab01      	add	r3, sp, #4
 800fb3e:	466a      	mov	r2, sp
 800fb40:	f7ff ffc8 	bl	800fad4 <__swhatbuf_r>
 800fb44:	9900      	ldr	r1, [sp, #0]
 800fb46:	4605      	mov	r5, r0
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7ff f963 	bl	800ee14 <_malloc_r>
 800fb4e:	b948      	cbnz	r0, 800fb64 <__smakebuf_r+0x44>
 800fb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb54:	059a      	lsls	r2, r3, #22
 800fb56:	d4ef      	bmi.n	800fb38 <__smakebuf_r+0x18>
 800fb58:	f023 0303 	bic.w	r3, r3, #3
 800fb5c:	f043 0302 	orr.w	r3, r3, #2
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	e7e3      	b.n	800fb2c <__smakebuf_r+0xc>
 800fb64:	4b0d      	ldr	r3, [pc, #52]	; (800fb9c <__smakebuf_r+0x7c>)
 800fb66:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb68:	89a3      	ldrh	r3, [r4, #12]
 800fb6a:	6020      	str	r0, [r4, #0]
 800fb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb70:	81a3      	strh	r3, [r4, #12]
 800fb72:	9b00      	ldr	r3, [sp, #0]
 800fb74:	6163      	str	r3, [r4, #20]
 800fb76:	9b01      	ldr	r3, [sp, #4]
 800fb78:	6120      	str	r0, [r4, #16]
 800fb7a:	b15b      	cbz	r3, 800fb94 <__smakebuf_r+0x74>
 800fb7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb80:	4630      	mov	r0, r6
 800fb82:	f000 f8d1 	bl	800fd28 <_isatty_r>
 800fb86:	b128      	cbz	r0, 800fb94 <__smakebuf_r+0x74>
 800fb88:	89a3      	ldrh	r3, [r4, #12]
 800fb8a:	f023 0303 	bic.w	r3, r3, #3
 800fb8e:	f043 0301 	orr.w	r3, r3, #1
 800fb92:	81a3      	strh	r3, [r4, #12]
 800fb94:	89a0      	ldrh	r0, [r4, #12]
 800fb96:	4305      	orrs	r5, r0
 800fb98:	81a5      	strh	r5, [r4, #12]
 800fb9a:	e7cd      	b.n	800fb38 <__smakebuf_r+0x18>
 800fb9c:	0800f92d 	.word	0x0800f92d

0800fba0 <_malloc_usable_size_r>:
 800fba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fba4:	1f18      	subs	r0, r3, #4
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	bfbc      	itt	lt
 800fbaa:	580b      	ldrlt	r3, [r1, r0]
 800fbac:	18c0      	addlt	r0, r0, r3
 800fbae:	4770      	bx	lr

0800fbb0 <_raise_r>:
 800fbb0:	291f      	cmp	r1, #31
 800fbb2:	b538      	push	{r3, r4, r5, lr}
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	460d      	mov	r5, r1
 800fbb8:	d904      	bls.n	800fbc4 <_raise_r+0x14>
 800fbba:	2316      	movs	r3, #22
 800fbbc:	6003      	str	r3, [r0, #0]
 800fbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc2:	bd38      	pop	{r3, r4, r5, pc}
 800fbc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fbc6:	b112      	cbz	r2, 800fbce <_raise_r+0x1e>
 800fbc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbcc:	b94b      	cbnz	r3, 800fbe2 <_raise_r+0x32>
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f000 f830 	bl	800fc34 <_getpid_r>
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	4620      	mov	r0, r4
 800fbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbde:	f000 b817 	b.w	800fc10 <_kill_r>
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d00a      	beq.n	800fbfc <_raise_r+0x4c>
 800fbe6:	1c59      	adds	r1, r3, #1
 800fbe8:	d103      	bne.n	800fbf2 <_raise_r+0x42>
 800fbea:	2316      	movs	r3, #22
 800fbec:	6003      	str	r3, [r0, #0]
 800fbee:	2001      	movs	r0, #1
 800fbf0:	e7e7      	b.n	800fbc2 <_raise_r+0x12>
 800fbf2:	2400      	movs	r4, #0
 800fbf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	4798      	blx	r3
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	e7e0      	b.n	800fbc2 <_raise_r+0x12>

0800fc00 <raise>:
 800fc00:	4b02      	ldr	r3, [pc, #8]	; (800fc0c <raise+0xc>)
 800fc02:	4601      	mov	r1, r0
 800fc04:	6818      	ldr	r0, [r3, #0]
 800fc06:	f7ff bfd3 	b.w	800fbb0 <_raise_r>
 800fc0a:	bf00      	nop
 800fc0c:	20000250 	.word	0x20000250

0800fc10 <_kill_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4d07      	ldr	r5, [pc, #28]	; (800fc30 <_kill_r+0x20>)
 800fc14:	2300      	movs	r3, #0
 800fc16:	4604      	mov	r4, r0
 800fc18:	4608      	mov	r0, r1
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	f7f5 fd7f 	bl	8005720 <_kill>
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	d102      	bne.n	800fc2c <_kill_r+0x1c>
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	b103      	cbz	r3, 800fc2c <_kill_r+0x1c>
 800fc2a:	6023      	str	r3, [r4, #0]
 800fc2c:	bd38      	pop	{r3, r4, r5, pc}
 800fc2e:	bf00      	nop
 800fc30:	200008f8 	.word	0x200008f8

0800fc34 <_getpid_r>:
 800fc34:	f7f5 bd6c 	b.w	8005710 <_getpid>

0800fc38 <__sread>:
 800fc38:	b510      	push	{r4, lr}
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc40:	f000 f894 	bl	800fd6c <_read_r>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	bfab      	itete	ge
 800fc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fc4c:	181b      	addge	r3, r3, r0
 800fc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc52:	bfac      	ite	ge
 800fc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc56:	81a3      	strhlt	r3, [r4, #12]
 800fc58:	bd10      	pop	{r4, pc}

0800fc5a <__swrite>:
 800fc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5e:	461f      	mov	r7, r3
 800fc60:	898b      	ldrh	r3, [r1, #12]
 800fc62:	05db      	lsls	r3, r3, #23
 800fc64:	4605      	mov	r5, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	4616      	mov	r6, r2
 800fc6a:	d505      	bpl.n	800fc78 <__swrite+0x1e>
 800fc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc70:	2302      	movs	r3, #2
 800fc72:	2200      	movs	r2, #0
 800fc74:	f000 f868 	bl	800fd48 <_lseek_r>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	4632      	mov	r2, r6
 800fc86:	463b      	mov	r3, r7
 800fc88:	4628      	mov	r0, r5
 800fc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc8e:	f000 b817 	b.w	800fcc0 <_write_r>

0800fc92 <__sseek>:
 800fc92:	b510      	push	{r4, lr}
 800fc94:	460c      	mov	r4, r1
 800fc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc9a:	f000 f855 	bl	800fd48 <_lseek_r>
 800fc9e:	1c43      	adds	r3, r0, #1
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	bf15      	itete	ne
 800fca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcae:	81a3      	strheq	r3, [r4, #12]
 800fcb0:	bf18      	it	ne
 800fcb2:	81a3      	strhne	r3, [r4, #12]
 800fcb4:	bd10      	pop	{r4, pc}

0800fcb6 <__sclose>:
 800fcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcba:	f000 b813 	b.w	800fce4 <_close_r>
	...

0800fcc0 <_write_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d07      	ldr	r5, [pc, #28]	; (800fce0 <_write_r+0x20>)
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	4608      	mov	r0, r1
 800fcc8:	4611      	mov	r1, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	602a      	str	r2, [r5, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	f7f5 fd5d 	bl	800578e <_write>
 800fcd4:	1c43      	adds	r3, r0, #1
 800fcd6:	d102      	bne.n	800fcde <_write_r+0x1e>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	b103      	cbz	r3, 800fcde <_write_r+0x1e>
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
 800fce0:	200008f8 	.word	0x200008f8

0800fce4 <_close_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4d06      	ldr	r5, [pc, #24]	; (800fd00 <_close_r+0x1c>)
 800fce8:	2300      	movs	r3, #0
 800fcea:	4604      	mov	r4, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	602b      	str	r3, [r5, #0]
 800fcf0:	f7f5 fd69 	bl	80057c6 <_close>
 800fcf4:	1c43      	adds	r3, r0, #1
 800fcf6:	d102      	bne.n	800fcfe <_close_r+0x1a>
 800fcf8:	682b      	ldr	r3, [r5, #0]
 800fcfa:	b103      	cbz	r3, 800fcfe <_close_r+0x1a>
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	200008f8 	.word	0x200008f8

0800fd04 <_fstat_r>:
 800fd04:	b538      	push	{r3, r4, r5, lr}
 800fd06:	4d07      	ldr	r5, [pc, #28]	; (800fd24 <_fstat_r+0x20>)
 800fd08:	2300      	movs	r3, #0
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	4608      	mov	r0, r1
 800fd0e:	4611      	mov	r1, r2
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	f7f5 fd64 	bl	80057de <_fstat>
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	d102      	bne.n	800fd20 <_fstat_r+0x1c>
 800fd1a:	682b      	ldr	r3, [r5, #0]
 800fd1c:	b103      	cbz	r3, 800fd20 <_fstat_r+0x1c>
 800fd1e:	6023      	str	r3, [r4, #0]
 800fd20:	bd38      	pop	{r3, r4, r5, pc}
 800fd22:	bf00      	nop
 800fd24:	200008f8 	.word	0x200008f8

0800fd28 <_isatty_r>:
 800fd28:	b538      	push	{r3, r4, r5, lr}
 800fd2a:	4d06      	ldr	r5, [pc, #24]	; (800fd44 <_isatty_r+0x1c>)
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	4604      	mov	r4, r0
 800fd30:	4608      	mov	r0, r1
 800fd32:	602b      	str	r3, [r5, #0]
 800fd34:	f7f5 fd63 	bl	80057fe <_isatty>
 800fd38:	1c43      	adds	r3, r0, #1
 800fd3a:	d102      	bne.n	800fd42 <_isatty_r+0x1a>
 800fd3c:	682b      	ldr	r3, [r5, #0]
 800fd3e:	b103      	cbz	r3, 800fd42 <_isatty_r+0x1a>
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	bd38      	pop	{r3, r4, r5, pc}
 800fd44:	200008f8 	.word	0x200008f8

0800fd48 <_lseek_r>:
 800fd48:	b538      	push	{r3, r4, r5, lr}
 800fd4a:	4d07      	ldr	r5, [pc, #28]	; (800fd68 <_lseek_r+0x20>)
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	4608      	mov	r0, r1
 800fd50:	4611      	mov	r1, r2
 800fd52:	2200      	movs	r2, #0
 800fd54:	602a      	str	r2, [r5, #0]
 800fd56:	461a      	mov	r2, r3
 800fd58:	f7f5 fd5c 	bl	8005814 <_lseek>
 800fd5c:	1c43      	adds	r3, r0, #1
 800fd5e:	d102      	bne.n	800fd66 <_lseek_r+0x1e>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	b103      	cbz	r3, 800fd66 <_lseek_r+0x1e>
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	bd38      	pop	{r3, r4, r5, pc}
 800fd68:	200008f8 	.word	0x200008f8

0800fd6c <_read_r>:
 800fd6c:	b538      	push	{r3, r4, r5, lr}
 800fd6e:	4d07      	ldr	r5, [pc, #28]	; (800fd8c <_read_r+0x20>)
 800fd70:	4604      	mov	r4, r0
 800fd72:	4608      	mov	r0, r1
 800fd74:	4611      	mov	r1, r2
 800fd76:	2200      	movs	r2, #0
 800fd78:	602a      	str	r2, [r5, #0]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	f7f5 fcea 	bl	8005754 <_read>
 800fd80:	1c43      	adds	r3, r0, #1
 800fd82:	d102      	bne.n	800fd8a <_read_r+0x1e>
 800fd84:	682b      	ldr	r3, [r5, #0]
 800fd86:	b103      	cbz	r3, 800fd8a <_read_r+0x1e>
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	bd38      	pop	{r3, r4, r5, pc}
 800fd8c:	200008f8 	.word	0x200008f8

0800fd90 <trunc>:
 800fd90:	ec51 0b10 	vmov	r0, r1, d0
 800fd94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fd9c:	2b13      	cmp	r3, #19
 800fd9e:	b5d0      	push	{r4, r6, r7, lr}
 800fda0:	460c      	mov	r4, r1
 800fda2:	dc10      	bgt.n	800fdc6 <trunc+0x36>
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	bfa5      	ittet	ge
 800fda8:	4a11      	ldrge	r2, [pc, #68]	; (800fdf0 <trunc+0x60>)
 800fdaa:	fa42 f303 	asrge.w	r3, r2, r3
 800fdae:	2100      	movlt	r1, #0
 800fdb0:	2100      	movge	r1, #0
 800fdb2:	bfb9      	ittee	lt
 800fdb4:	2000      	movlt	r0, #0
 800fdb6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800fdba:	2000      	movge	r0, #0
 800fdbc:	ea24 0103 	bicge.w	r1, r4, r3
 800fdc0:	ec41 0b10 	vmov	d0, r0, r1
 800fdc4:	bdd0      	pop	{r4, r6, r7, pc}
 800fdc6:	2b33      	cmp	r3, #51	; 0x33
 800fdc8:	dd08      	ble.n	800fddc <trunc+0x4c>
 800fdca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdce:	d1f7      	bne.n	800fdc0 <trunc+0x30>
 800fdd0:	ee10 2a10 	vmov	r2, s0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	f7f0 fa61 	bl	800029c <__adddf3>
 800fdda:	e7f1      	b.n	800fdc0 <trunc+0x30>
 800fddc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fde0:	f04f 33ff 	mov.w	r3, #4294967295
 800fde4:	fa23 f202 	lsr.w	r2, r3, r2
 800fde8:	ea20 0602 	bic.w	r6, r0, r2
 800fdec:	4630      	mov	r0, r6
 800fdee:	e7e7      	b.n	800fdc0 <trunc+0x30>
 800fdf0:	000fffff 	.word	0x000fffff

0800fdf4 <ceilf>:
 800fdf4:	ee10 3a10 	vmov	r3, s0
 800fdf8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fdfc:	3a7f      	subs	r2, #127	; 0x7f
 800fdfe:	2a16      	cmp	r2, #22
 800fe00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe04:	dc2a      	bgt.n	800fe5c <ceilf+0x68>
 800fe06:	2a00      	cmp	r2, #0
 800fe08:	da11      	bge.n	800fe2e <ceilf+0x3a>
 800fe0a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fe70 <ceilf+0x7c>
 800fe0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	dd05      	ble.n	800fe28 <ceilf+0x34>
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	db23      	blt.n	800fe68 <ceilf+0x74>
 800fe20:	2900      	cmp	r1, #0
 800fe22:	bf18      	it	ne
 800fe24:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800fe28:	ee00 3a10 	vmov	s0, r3
 800fe2c:	4770      	bx	lr
 800fe2e:	4911      	ldr	r1, [pc, #68]	; (800fe74 <ceilf+0x80>)
 800fe30:	4111      	asrs	r1, r2
 800fe32:	420b      	tst	r3, r1
 800fe34:	d0fa      	beq.n	800fe2c <ceilf+0x38>
 800fe36:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fe70 <ceilf+0x7c>
 800fe3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	ddef      	ble.n	800fe28 <ceilf+0x34>
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	bfc2      	ittt	gt
 800fe4c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800fe50:	fa40 f202 	asrgt.w	r2, r0, r2
 800fe54:	189b      	addgt	r3, r3, r2
 800fe56:	ea23 0301 	bic.w	r3, r3, r1
 800fe5a:	e7e5      	b.n	800fe28 <ceilf+0x34>
 800fe5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fe60:	d3e4      	bcc.n	800fe2c <ceilf+0x38>
 800fe62:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe66:	4770      	bx	lr
 800fe68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe6c:	e7dc      	b.n	800fe28 <ceilf+0x34>
 800fe6e:	bf00      	nop
 800fe70:	7149f2ca 	.word	0x7149f2ca
 800fe74:	007fffff 	.word	0x007fffff

0800fe78 <_init>:
 800fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7a:	bf00      	nop
 800fe7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe7e:	bc08      	pop	{r3}
 800fe80:	469e      	mov	lr, r3
 800fe82:	4770      	bx	lr

0800fe84 <_fini>:
 800fe84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe86:	bf00      	nop
 800fe88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe8a:	bc08      	pop	{r3}
 800fe8c:	469e      	mov	lr, r3
 800fe8e:	4770      	bx	lr
