
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009f84  0800d3d0  0800d3d0  0001d3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017354  08017354  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08017354  08017354  00027354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801735c  0801735c  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801735c  0801735c  0002735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017360  08017360  00027360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08017364  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000210  08017574  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08017574  0003062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180d6  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003230  00000000  00000000  00048316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0004b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0004ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dde  00000000  00000000  0004de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ebe  00000000  00000000  00067c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f62  00000000  00000000  00080adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119a3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b20  00000000  00000000  00119a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3b8 	.word	0x0800d3b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800d3b8 	.word	0x0800d3b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f004 f96f 	bl	80052ac <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000022c 	.word	0x2000022c
 8000fe8:	2000022d 	.word	0x2000022d
 8000fec:	00000000 	.word	0x00000000

08000ff0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8000ffe:	7853      	ldrb	r3, [r2, #1]
 8001000:	f36f 13c7 	bfc	r3, #7, #1
 8001004:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001008:	7853      	ldrb	r3, [r2, #1]
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001012:	7853      	ldrb	r3, [r2, #1]
 8001014:	2102      	movs	r1, #2
 8001016:	f361 03c4 	bfi	r3, r1, #3, #2
 800101a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800101e:	8813      	ldrh	r3, [r2, #0]
 8001020:	2103      	movs	r1, #3
 8001022:	f361 13ca 	bfi	r3, r1, #7, #4
 8001026:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800102a:	7813      	ldrb	r3, [r2, #0]
 800102c:	2103      	movs	r1, #3
 800102e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001032:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f043 0307 	orr.w	r3, r3, #7
 800103c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	753b      	strb	r3, [r7, #20]
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b299      	uxth	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f004 f829 	bl	80050b8 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <INA219_INIT_Calibrate+0x15c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	a32d      	add	r3, pc, #180	; (adr r3, 8001128 <INA219_INIT_Calibrate+0x138>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fac7 	bl	8000608 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	a12c      	add	r1, pc, #176	; (adr r1, 8001130 <INA219_INIT_Calibrate+0x140>)
 8001080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b17 	vmov	d7, r2, r3
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f00c f91a 	bl	800d2d0 <trunc>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd88 	bl	8000bb8 <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010ae:	8a3b      	ldrh	r3, [r7, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa3f 	bl	8000534 <__aeabi_i2d>
 80010b6:	a320      	add	r3, pc, #128	; (adr r3, 8001138 <INA219_INIT_Calibrate+0x148>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a31d      	add	r3, pc, #116	; (adr r3, 8001140 <INA219_INIT_Calibrate+0x150>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fbc5 	bl	800085c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f00c f8f5 	bl	800d2d0 <trunc>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd63 	bl	8000bb8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	b299      	uxth	r1, r3
 8001104:	230a      	movs	r3, #10
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2302      	movs	r3, #2
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2205      	movs	r2, #5
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 ffce 	bl	80050b8 <HAL_I2C_Mem_Write>

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	9999999a 	.word	0x9999999a
 800112c:	3fb99999 	.word	0x3fb99999
 8001130:	88e368f1 	.word	0x88e368f1
 8001134:	3fa4f8b5 	.word	0x3fa4f8b5
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fe99999 	.word	0x3fe99999
 8001140:	9999999a 	.word	0x9999999a
 8001144:	40059999 	.word	0x40059999
 8001148:	20000230 	.word	0x20000230
 800114c:	20000000 	.word	0x20000000

08001150 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <INA219Read_BusV+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <INA219Read_BusV+0x4c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f004 f898 	bl	80052ac <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <INA219Read_BusV+0x48>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <INA219Read_BusV+0x48>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b29b      	uxth	r3, r3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000022c 	.word	0x2000022c
 800119c:	2000022d 	.word	0x2000022d

080011a0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <INA219Read_Current+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <INA219Read_Current+0x44>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2204      	movs	r2, #4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f004 f870 	bl	80052ac <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <INA219Read_Current+0x40>)
 80011ce:	885a      	ldrh	r2, [r3, #2]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <INA219Read_Current+0x40>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b29b      	uxth	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000022c 	.word	0x2000022c
 80011e4:	2000022d 	.word	0x2000022d

080011e8 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <INA219Read_ShuntV+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2302      	movs	r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <INA219Read_ShuntV+0x70>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2201      	movs	r2, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f004 f84c 	bl	80052ac <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <INA219Read_ShuntV+0x6c>)
 8001216:	885a      	ldrh	r2, [r3, #2]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <INA219Read_ShuntV+0x6c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f984 	bl	8000534 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <INA219Read_ShuntV+0x74>)
 8001232:	f7ff fb13 	bl	800085c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcdb 	bl	8000bf8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000022c 	.word	0x2000022c
 8001258:	2000022d 	.word	0x2000022d
 800125c:	40590000 	.word	0x40590000

08001260 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <INA219Read_Power+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	b299      	uxth	r1, r3
 8001276:	230a      	movs	r3, #10
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <INA219Read_Power+0x8c>)
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f004 f810 	bl	80052ac <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <INA219Read_Power+0x88>)
 800128e:	885a      	ldrh	r2, [r3, #2]
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <INA219Read_Power+0x88>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <INA219Read_Power+0x90>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	a30c      	add	r3, pc, #48	; (adr r3, 80012e0 <INA219Read_Power+0x80>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f9a3 	bl	8000608 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc95 	bl	8000bf8 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40d38800 	.word	0x40d38800
 80012e8:	2000022c 	.word	0x2000022c
 80012ec:	2000022d 	.word	0x2000022d
 80012f0:	20000000 	.word	0x20000000

080012f4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	b2db      	uxtb	r3, r3
 800130e:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2104      	movs	r1, #4
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001316:	f003 fd3f 	bl	8004d98 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2303      	movs	r3, #3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 ff3c 	bl	80081a6 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2104      	movs	r1, #4
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001334:	f003 fd30 	bl	8004d98 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	b29b      	uxth	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020c00 	.word	0x40020c00
 800135c:	00000000 	.word	0x00000000

08001360 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <MCP320x_ADCbit_to_Volt+0x38>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f946 	bl	8000608 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	ee07 3a90 	vmov	s15, r3
}
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0678c005 	.word	0x0678c005
 800139c:	3f53fd0d 	.word	0x3f53fd0d

080013a0 <Rx_Verita_engine>:
  */


static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d023      	beq.n	80013fe <Rx_Verita_engine+0x5e>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f000 8082 	beq.w	80014c0 <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b56      	cmp	r3, #86	; 0x56
 80013ca:	d103      	bne.n	80013d4 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index+=9;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 80013d2:	e0c4      	b.n	800155e <Rx_Verita_engine+0x1be>
		index+=9;
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3309      	adds	r3, #9
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013de:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b63      	ldr	r3, [pc, #396]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80013e6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ea:	08d9      	lsrs	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013fa:	701a      	strb	r2, [r3, #0]
		break; //// init
 80013fc:	e0af      	b.n	800155e <Rx_Verita_engine+0x1be>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b56      	cmp	r3, #86	; 0x56
 800140c:	d13f      	bne.n	800148e <Rx_Verita_engine+0xee>
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b52      	cmp	r3, #82	; 0x52
 800141c:	d137      	bne.n	800148e <Rx_Verita_engine+0xee>
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b54      	cmp	r3, #84	; 0x54
 800142c:	d12f      	bne.n	800148e <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 800142e:	2400      	movs	r4, #0
 8001430:	e009      	b.n	8001446 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 8001432:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4423      	add	r3, r4
 8001438:	3303      	adds	r3, #3
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001442:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8001444:	3401      	adds	r4, #1
 8001446:	2c06      	cmp	r4, #6
 8001448:	ddf3      	ble.n	8001432 <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 800144a:	2400      	movs	r4, #0
 800144c:	e006      	b.n	800145c <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 800144e:	7b3a      	ldrb	r2, [r7, #12]
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001452:	5d1b      	ldrb	r3, [r3, r4]
 8001454:	4413      	add	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 800145a:	3401      	adds	r4, #1
 800145c:	2c04      	cmp	r4, #4
 800145e:	ddf6      	ble.n	800144e <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001468:	7b7a      	ldrb	r2, [r7, #13]
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	429a      	cmp	r2, r3
 8001470:	d10b      	bne.n	800148a <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001486:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001488:	e069      	b.n	800155e <Rx_Verita_engine+0x1be>
				return VRT_DataLoss;}
 800148a:	2395      	movs	r3, #149	; 0x95
 800148c:	e068      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			verita_engine = init;
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			index += Framesize_VRT; // 9
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3309      	adds	r3, #9
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <Rx_Verita_engine+0x1d0>)
 800149e:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014a6:	fba3 1302 	umull	r1, r3, r3, r2
 80014aa:	08d9      	lsrs	r1, r3, #3
 80014ac:	460b      	mov	r3, r1
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ba:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 80014bc:	2396      	movs	r3, #150	; 0x96
 80014be:	e04f      	b.n	8001560 <Rx_Verita_engine+0x1c0>

	case decode:
		verita_engine = init;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <Rx_Verita_engine+0x1cc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3309      	adds	r3, #9
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d0:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014d8:	fba3 1302 	umull	r1, r3, r3, r2
 80014dc:	08d9      	lsrs	r1, r3, #3
 80014de:	460b      	mov	r3, r1
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ec:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d814      	bhi.n	8001520 <Rx_Verita_engine+0x180>
			logu.U8[2] = logger[2];
			logu.U8[1] = logger[3];
			logu.U8[0] = logger[4];
#else
			//// Little endian
			logu.U8[0] = logger[1];
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	723b      	strb	r3, [r7, #8]
			logu.U8[1] = logger[2];
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	727b      	strb	r3, [r7, #9]
			logu.U8[2] = logger[3];
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	72bb      	strb	r3, [r7, #10]
			logu.U8[3] = logger[4];
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	72fb      	strb	r3, [r7, #11]
#endif
			// place data into the request register
			regisk[logger[0]] = logu.U32;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]


			return VRT_OK;
 800151c:	2391      	movs	r3, #145	; 0x91
 800151e:	e01f      	b.n	8001560 <Rx_Verita_engine+0x1c0>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b8f      	cmp	r3, #143	; 0x8f
 8001526:	d919      	bls.n	800155c <Rx_Verita_engine+0x1bc>
			switch(logger[0]){
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b91      	subs	r3, #145	; 0x91
 800152e:	2b03      	cmp	r3, #3
 8001530:	d80a      	bhi.n	8001548 <Rx_Verita_engine+0x1a8>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <Rx_Verita_engine+0x198>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001551 	.word	0x08001551
 8001540:	08001555 	.word	0x08001555
 8001544:	08001559 	.word	0x08001559
				default:
				case 0x90:
					return VRT_ERROR;
 8001548:	2390      	movs	r3, #144	; 0x90
 800154a:	e009      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x91:
					return VRT_OK;
 800154c:	2391      	movs	r3, #145	; 0x91
 800154e:	e007      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x92:
					return VRT_Busy;
 8001550:	2392      	movs	r3, #146	; 0x92
 8001552:	e005      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x93:
					return VRT_Regain;
 8001554:	2393      	movs	r3, #147	; 0x93
 8001556:	e003      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x94:
					return VRT_Next;
 8001558:	2394      	movs	r3, #148	; 0x94
 800155a:	e001      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 800155c:	bf00      	nop
	} // end switch
	return VRT_ERROR;
 800155e:	2390      	movs	r3, #144	; 0x90
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bc90      	pop	{r4, r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000232 	.word	0x20000232
 8001570:	20000233 	.word	0x20000233
 8001574:	38e38e39 	.word	0x38e38e39
 8001578:	20000234 	.word	0x20000234

0800157c <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 8001584:	237f      	movs	r3, #127	; 0x7f
 8001586:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <BL_UART_Start+0x58>)
 8001590:	f003 fc02 	bl	8004d98 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <BL_UART_Start+0x5c>)
 800159a:	f003 fbfd 	bl	8004d98 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800159e:	2014      	movs	r0, #20
 80015a0:	f002 fd18 	bl	8003fd4 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <BL_UART_Start+0x5c>)
 80015aa:	f003 fbf5 	bl	8004d98 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80015ae:	2055      	movs	r0, #85	; 0x55
 80015b0:	f002 fd10 	bl	8003fd4 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80015b4:	f107 010f 	add.w	r1, r7, #15
 80015b8:	230a      	movs	r3, #10
 80015ba:	2201      	movs	r2, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f007 fd1a 	bl	8008ff6 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80015c2:	2114      	movs	r1, #20
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f999 	bl	80018fc <BL_UART_wait_ACK>

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020800 	.word	0x40020800

080015dc <BL_UART_Finish>:

void BL_UART_Finish(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f002 fcf7 	bl	8003fd4 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <BL_UART_Finish+0x34>)
 80015ee:	f003 fbd3 	bl	8004d98 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <BL_UART_Finish+0x38>)
 80015f8:	f003 fbce 	bl	8004d98 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015fc:	2014      	movs	r0, #20
 80015fe:	f002 fce9 	bl	8003fd4 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <BL_UART_Finish+0x38>)
 8001608:	f003 fbc6 	bl	8004d98 <HAL_GPIO_WritePin>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800

08001618 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b0cb      	sub	sp, #300	; 0x12c
 800161c:	af00      	add	r7, sp, #0
 800161e:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001622:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001626:	6020      	str	r0, [r4, #0]
 8001628:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800162c:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001630:	6001      	str	r1, [r0, #0]
 8001632:	4611      	mov	r1, r2
 8001634:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001638:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001642:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 800164a:	f64c 6331 	movw	r3, #52785	; 0xce31
 800164e:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001658:	2300      	movs	r3, #0
 800165a:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001664:	2300      	movs	r3, #0
 8001666:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 800166a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800166e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f008 ff3a 	bl	800a4f8 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 8001684:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001688:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a77      	ldr	r2, [pc, #476]	; (800186c <BL_UART_WriteMem+0x254>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d909      	bls.n	80016a8 <BL_UART_WriteMem+0x90>
 8001694:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001698:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a2:	d201      	bcs.n	80016a8 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80016a4:	23bc      	movs	r3, #188	; 0xbc
 80016a6:	e0dc      	b.n	8001862 <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80016a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016b0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80016b4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80016bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80016ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 80016d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 80016e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 80016f4:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 80016f8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80016fc:	4053      	eors	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001704:	4053      	eors	r3, r2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800170c:	4053      	eors	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001714:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001718:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 8001722:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001726:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800172a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800172e:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001736:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800173a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001744:	2400      	movs	r4, #0
 8001746:	e01c      	b.n	8001782 <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001748:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 800174c:	4621      	mov	r1, r4
 800174e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001752:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	440b      	add	r3, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4053      	eors	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001764:	4622      	mov	r2, r4
 8001766:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	441a      	add	r2, r3
 8001772:	1c63      	adds	r3, r4, #1
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800177a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800177e:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 8001780:	3401      	adds	r4, #1
 8001782:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001786:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	429c      	cmp	r4, r3
 800178e:	dddb      	ble.n	8001748 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 8001790:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001794:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3302      	adds	r3, #2
 800179c:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80017a0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017a4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80017a8:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80017aa:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80017ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b2:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80017b6:	230a      	movs	r3, #10
 80017b8:	2202      	movs	r2, #2
 80017ba:	6800      	ldr	r0, [r0, #0]
 80017bc:	f007 fc1b 	bl	8008ff6 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017c8:	210a      	movs	r1, #10
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	f000 f896 	bl	80018fc <BL_UART_wait_ACK>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 80017d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017da:	2b79      	cmp	r3, #121	; 0x79
 80017dc:	d140      	bne.n	8001860 <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 80017de:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80017e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017e6:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80017ea:	230f      	movs	r3, #15
 80017ec:	2205      	movs	r2, #5
 80017ee:	6800      	ldr	r0, [r0, #0]
 80017f0:	f007 fc01 	bl	8008ff6 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 80017f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017fc:	210a      	movs	r1, #10
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f000 f87c 	bl	80018fc <BL_UART_wait_ACK>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 800180a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800180e:	2b79      	cmp	r3, #121	; 0x79
 8001810:	d124      	bne.n	800185c <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	3303      	adds	r3, #3
 8001820:	b29a      	uxth	r2, r3
 8001822:	f107 0114 	add.w	r1, r7, #20
 8001826:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800182a:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	6800      	ldr	r0, [r0, #0]
 8001832:	f007 fbe0 	bl	8008ff6 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001836:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800183a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800183e:	210a      	movs	r1, #10
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	f000 f85b 	bl	80018fc <BL_UART_wait_ACK>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 800184c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001850:	2b79      	cmp	r3, #121	; 0x79
 8001852:	d101      	bne.n	8001858 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001854:	2379      	movs	r3, #121	; 0x79
 8001856:	e004      	b.n	8001862 <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001858:	231f      	movs	r3, #31
 800185a:	e002      	b.n	8001862 <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 800185c:	231f      	movs	r3, #31
 800185e:	e000      	b.n	8001862 <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 8001860:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001862:	4618      	mov	r0, r3
 8001864:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	1ffeffff 	.word	0x1ffeffff

08001870 <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 800187c:	f64b 3344 	movw	r3, #47940	; 0xbb44
 8001880:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <BL_UART_ExtendEraseMem_SP+0x88>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	823b      	strh	r3, [r7, #16]
 800188c:	2300      	movs	r3, #0
 800188e:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 8001894:	7b7b      	ldrb	r3, [r7, #13]
 8001896:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 8001898:	7b3b      	ldrb	r3, [r7, #12]
 800189a:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 800189c:	7b3a      	ldrb	r2, [r7, #12]
 800189e:	7b7b      	ldrb	r3, [r7, #13]
 80018a0:	4053      	eors	r3, r2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80018a6:	f107 0114 	add.w	r1, r7, #20
 80018aa:	230a      	movs	r3, #10
 80018ac:	2202      	movs	r2, #2
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f007 fba1 	bl	8008ff6 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018b4:	210a      	movs	r1, #10
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f820 	bl	80018fc <BL_UART_wait_ACK>
 80018bc:	4603      	mov	r3, r0
 80018be:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b79      	cmp	r3, #121	; 0x79
 80018c4:	d113      	bne.n	80018ee <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80018c6:	f107 0110 	add.w	r1, r7, #16
 80018ca:	230f      	movs	r3, #15
 80018cc:	2203      	movs	r2, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f007 fb91 	bl	8008ff6 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 80018d4:	210a      	movs	r1, #10
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f810 	bl	80018fc <BL_UART_wait_ACK>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b79      	cmp	r3, #121	; 0x79
 80018e4:	d101      	bne.n	80018ea <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 80018e6:	2379      	movs	r3, #121	; 0x79
 80018e8:	e002      	b.n	80018f0 <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 80018ea:	231f      	movs	r3, #31
 80018ec:	e000      	b.n	80018f0 <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 80018ee:	231f      	movs	r3, #31

	return UB_NACK;
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0800d3d0 	.word	0x0800d3d0

080018fc <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001910:	f002 fb54 	bl	8003fbc <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	4413      	add	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

	while(tick){
 800191c:	e018      	b.n	8001950 <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 800191e:	f107 010f 	add.w	r1, r7, #15
 8001922:	2302      	movs	r3, #2
 8001924:	2201      	movs	r2, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f007 fbf7 	bl	800911a <HAL_UART_Receive>

		if(response == 0x79){
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b79      	cmp	r3, #121	; 0x79
 8001930:	d101      	bne.n	8001936 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001932:	2379      	movs	r3, #121	; 0x79
 8001934:	e010      	b.n	8001958 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b1f      	cmp	r3, #31
 800193a:	d101      	bne.n	8001940 <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 800193c:	231f      	movs	r3, #31
 800193e:	e00b      	b.n	8001958 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001940:	f002 fb3c 	bl	8003fbc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4293      	cmp	r3, r2
 800194a:	d801      	bhi.n	8001950 <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 800194c:	23ab      	movs	r3, #171	; 0xab
 800194e:	e003      	b.n	8001958 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e3      	bne.n	800191e <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001956:	231f      	movs	r3, #31
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001968:	f002 fac2 	bl	8003ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196c:	f000 f912 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001970:	f000 faf4 	bl	8001f5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001974:	f000 fad2 	bl	8001f1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001978:	f000 fa7c 	bl	8001e74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800197c:	f000 f972 	bl	8001c64 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001980:	f000 faa2 	bl	8001ec8 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001984:	f000 f99c 	bl	8001cc0 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001988:	f000 fa24 	bl	8001dd4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800198c:	f000 fa46 	bl	8001e1c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001990:	f000 f9cc 	bl	8001d2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001994:	486c      	ldr	r0, [pc, #432]	; (8001b48 <main+0x1e8>)
 8001996:	f006 fec3 	bl	8008720 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800199a:	2104      	movs	r1, #4
 800199c:	486b      	ldr	r0, [pc, #428]	; (8001b4c <main+0x1ec>)
 800199e:	f006 fff6 	bl	800898e <HAL_TIM_Encoder_Start>
  TIM3->CNT = 0x8000; //// start QEI counter from the center
 80019a2:	4b6b      	ldr	r3, [pc, #428]	; (8001b50 <main+0x1f0>)
 80019a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 80019aa:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <main+0x1f0>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <main+0x1f4>)
 80019b2:	801a      	strh	r2, [r3, #0]

  ili9341_Init();
 80019b4:	f001 fbac 	bl	8003110 <ili9341_Init>
  ili9341_DisplayOn();
 80019b8:	f001 fb8e 	bl	80030d8 <ili9341_DisplayOn>
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);


#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	4866      	ldr	r0, [pc, #408]	; (8001b58 <main+0x1f8>)
 80019c0:	f7ff fb16 	bl	8000ff0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 80019c4:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <main+0x1fc>)
 80019c6:	f107 0414 	add.w	r4, r7, #20
 80019ca:	461d      	mov	r5, r3
 80019cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fbfb 	bl	80001e0 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f107 0114 	add.w	r1, r7, #20
 80019f2:	230a      	movs	r3, #10
 80019f4:	485a      	ldr	r0, [pc, #360]	; (8001b60 <main+0x200>)
 80019f6:	f007 fafe 	bl	8008ff6 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	4959      	ldr	r1, [pc, #356]	; (8001b64 <main+0x204>)
 80019fe:	485a      	ldr	r0, [pc, #360]	; (8001b68 <main+0x208>)
 8001a00:	f007 fc2d 	bl	800925e <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001a04:	f000 fd0c 	bl	8002420 <Button_machine>
	  ////  ------------- Verita UART Recieve --------------------------
	  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9); // Normal DMA
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  Rx_Verita_engine(RxBufferMtCl, VRB.U32);
 8001a08:	4958      	ldr	r1, [pc, #352]	; (8001b6c <main+0x20c>)
 8001a0a:	4856      	ldr	r0, [pc, #344]	; (8001b64 <main+0x204>)
 8001a0c:	f7ff fcc8 	bl	80013a0 <Rx_Verita_engine>
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001a10:	f002 fad4 	bl	8003fbc <HAL_GetTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2200      	movs	r2, #0
 8001a18:	4698      	mov	r8, r3
 8001a1a:	4691      	mov	r9, r2
 8001a1c:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <main+0x210>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	4590      	cmp	r8, r2
 8001a24:	eb79 0303 	sbcs.w	r3, r9, r3
 8001a28:	d366      	bcc.n	8001af8 <main+0x198>
		timestamp_buzbtn += 200;
 8001a2a:	4b51      	ldr	r3, [pc, #324]	; (8001b70 <main+0x210>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	f143 0300 	adc.w	r3, r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <main+0x210>)
 8001a3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a42:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001a46:	f000 fd51 	bl	80024ec <knob_rotter>
		/* function runs here with speed
		 * can change the number of selection following to the GrandState
		 * state_box_choice = 3;
		*/

		if(state_box_choice_n){
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <main+0x214>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d052      	beq.n	8001af8 <main+0x198>

		switch (a_boxpoint){
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <main+0x218>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d03f      	beq.n	8001ada <main+0x17a>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d04e      	beq.n	8001afc <main+0x19c>

		default:
		case a_wait:

			if(flag_k_up){
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <main+0x21c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d019      	beq.n	8001a9a <main+0x13a>

				state_box_choice_is++;
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <main+0x220>)
 8001a68:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <main+0x220>)
 8001a76:	701a      	strb	r2, [r3, #0]
				//state_box_choice_is %= state_box_choice_n; // don't be more than spec of Grandstate sub
				if(state_box_choice_is >= state_box_choice_n){state_box_choice_is = 0;}
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <main+0x220>)
 8001a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <main+0x214>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	db02      	blt.n	8001a8e <main+0x12e>
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <main+0x220>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]

				 flag_k_up = 0;
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <main+0x21c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
				 a_boxpoint = a_change;}
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <main+0x218>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
			if(flag_k_dn){
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <main+0x224>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d02e      	beq.n	8001b00 <main+0x1a0>

				state_box_choice_is--;
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <main+0x220>)
 8001aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <main+0x220>)
 8001ab2:	701a      	strb	r2, [r3, #0]
				if(state_box_choice_is < 0){state_box_choice_is = state_box_choice_n - 1;}
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <main+0x220>)
 8001ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da06      	bge.n	8001acc <main+0x16c>
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <main+0x214>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	b25a      	sxtb	r2, r3
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <main+0x220>)
 8001aca:	701a      	strb	r2, [r3, #0]
				//state_box_choice_is = (state_box_choice_is < 0) ? state_box_choice_n-1:state_box_choice_is;
				 flag_k_dn = 0;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <main+0x224>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
				 a_boxpoint = a_change;}
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <main+0x218>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]

			break;
 8001ad8:	e012      	b.n	8001b00 <main+0x1a0>

		case a_change:

			box_pointer(20, bosy[state_box_choice_is]);
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <main+0x220>)
 8001adc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <main+0x228>)
 8001ae4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	2014      	movs	r0, #20
 8001aec:	f000 fb2e 	bl	800214c <box_pointer>
			a_boxpoint = a_wait;
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <main+0x218>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
			break;
 8001af6:	e004      	b.n	8001b02 <main+0x1a2>
		case a_boxclr:

			break;

			}
		}
 8001af8:	bf00      	nop
 8001afa:	e002      	b.n	8001b02 <main+0x1a2>
			break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <main+0x1a2>
			break;
 8001b00:	bf00      	nop


	  }// timestamp_dis


	  if (HAL_GetTick() >= timestamp_one){
 8001b02:	f002 fa5b 	bl	8003fbc <HAL_GetTick>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2200      	movs	r2, #0
 8001b0a:	469a      	mov	sl, r3
 8001b0c:	4693      	mov	fp, r2
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <main+0x22c>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	4592      	cmp	sl, r2
 8001b16:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001b1a:	f4ff af73 	bcc.w	8001a04 <main+0xa4>
		  timestamp_one += 500;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <main+0x22c>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	f143 0300 	adc.w	r3, r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <main+0x22c>)
 8001b32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b36:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	4814      	ldr	r0, [pc, #80]	; (8001b90 <main+0x230>)
 8001b3e:	f003 f944 	bl	8004dca <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001b42:	f000 fd9d 	bl	8002680 <GrandState_Verita>
	  Button_machine();
 8001b46:	e75d      	b.n	8001a04 <main+0xa4>
 8001b48:	20000334 	.word	0x20000334
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	40000400 	.word	0x40000400
 8001b54:	200005f8 	.word	0x200005f8
 8001b58:	20000240 	.word	0x20000240
 8001b5c:	0800d3d4 	.word	0x0800d3d4
 8001b60:	200003c0 	.word	0x200003c0
 8001b64:	2000050c 	.word	0x2000050c
 8001b68:	20000404 	.word	0x20000404
 8001b6c:	20000534 	.word	0x20000534
 8001b70:	200005d8 	.word	0x200005d8
 8001b74:	20000018 	.word	0x20000018
 8001b78:	20000601 	.word	0x20000601
 8001b7c:	200005ff 	.word	0x200005ff
 8001b80:	20000019 	.word	0x20000019
 8001b84:	20000600 	.word	0x20000600
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	200005d0 	.word	0x200005d0
 8001b90:	40020000 	.word	0x40020000

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b094      	sub	sp, #80	; 0x50
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2230      	movs	r2, #48	; 0x30
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f008 fca8 	bl	800a4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <SystemClock_Config+0xc8>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <SystemClock_Config+0xc8>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <SystemClock_Config+0xc8>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <SystemClock_Config+0xcc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <SystemClock_Config+0xcc>)
 8001bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <SystemClock_Config+0xcc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c04:	2308      	movs	r3, #8
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f005 fda3 	bl	8007764 <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c24:	f000 fee0 	bl	80029e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2103      	movs	r1, #3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f006 f805 	bl	8007c54 <HAL_RCC_ClockConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c50:	f000 feca 	bl	80029e8 <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <MX_I2C1_Init+0x54>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x58>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001ca2:	f003 f8c5 	bl	8004e30 <HAL_I2C_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cac:	f000 fe9c 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000240 	.word	0x20000240
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	00061a80 	.word	0x00061a80

08001cc0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_SPI3_Init+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_SPI3_Init+0x64>)
 8001d12:	f006 f9bf 	bl	8008094 <HAL_SPI_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 fe64 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000294 	.word	0x20000294
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f008 fbdc 	bl	800a4f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <MX_TIM3_Init+0xa4>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d72:	2302      	movs	r3, #2
 8001d74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d82:	2302      	movs	r3, #2
 8001d84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d86:	2301      	movs	r3, #1
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 8001d8e:	2308      	movs	r3, #8
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001d9a:	f006 fd52 	bl	8008842 <HAL_TIM_Encoder_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001da4:	f000 fe20 	bl	80029e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_TIM3_Init+0xa0>)
 8001db6:	f007 f84f 	bl	8008e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001dc0:	f000 fe12 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3730      	adds	r7, #48	; 0x30
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200002ec 	.word	0x200002ec
 8001dd0:	40000400 	.word	0x40000400

08001dd4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <MX_TIM10_Init+0x44>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001de4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001dee:	f241 3287 	movw	r2, #4999	; 0x1387
 8001df2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_TIM10_Init+0x40>)
 8001e02:	f006 fc3d 	bl	8008680 <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001e0c:	f000 fdec 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000334 	.word	0x20000334
 8001e18:	40014400 	.word	0x40014400

08001e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <MX_USART1_UART_Init+0x54>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e34:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_USART1_UART_Init+0x50>)
 8001e58:	f007 f880 	bl	8008f5c <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001e62:	f000 fdc1 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000037c 	.word	0x2000037c
 8001e70:	40011000 	.word	0x40011000

08001e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_USART2_UART_Init+0x4c>)
 8001eac:	f007 f856 	bl	8008f5c <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eb6:	f000 fd97 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200003c0 	.word	0x200003c0
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <MX_USART6_UART_Init+0x50>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_USART6_UART_Init+0x4c>)
 8001f00:	f007 f82c 	bl	8008f5c <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f0a:	f000 fd6d 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000404 	.word	0x20000404
 8001f18:	40011400 	.word	0x40011400

08001f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_DMA_Init+0x3c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <MX_DMA_Init+0x3c>)
 8001f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_DMA_Init+0x3c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2039      	movs	r0, #57	; 0x39
 8001f44:	f002 f945 	bl	80041d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f48:	2039      	movs	r0, #57	; 0x39
 8001f4a:	f002 f95e 	bl	800420a <HAL_NVIC_EnableIRQ>

}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b70      	ldr	r3, [pc, #448]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a6f      	ldr	r2, [pc, #444]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b69      	ldr	r3, [pc, #420]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a68      	ldr	r2, [pc, #416]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b66      	ldr	r3, [pc, #408]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b62      	ldr	r3, [pc, #392]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a61      	ldr	r2, [pc, #388]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b54      	ldr	r3, [pc, #336]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a53      	ldr	r2, [pc, #332]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b51      	ldr	r3, [pc, #324]	; (8002138 <MX_GPIO_Init+0x1dc>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 8001ffe:	2200      	movs	r2, #0
 8002000:	f240 214b 	movw	r1, #587	; 0x24b
 8002004:	484d      	ldr	r0, [pc, #308]	; (800213c <MX_GPIO_Init+0x1e0>)
 8002006:	f002 fec7 	bl	8004d98 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002010:	484b      	ldr	r0, [pc, #300]	; (8002140 <MX_GPIO_Init+0x1e4>)
 8002012:	f002 fec1 	bl	8004d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2101      	movs	r1, #1
 800201a:	484a      	ldr	r0, [pc, #296]	; (8002144 <MX_GPIO_Init+0x1e8>)
 800201c:	f002 febc 	bl	8004d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	2104      	movs	r1, #4
 8002024:	4848      	ldr	r0, [pc, #288]	; (8002148 <MX_GPIO_Init+0x1ec>)
 8002026:	f002 feb7 	bl	8004d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800202a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002030:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	483e      	ldr	r0, [pc, #248]	; (800213c <MX_GPIO_Init+0x1e0>)
 8002042:	f002 fd0d 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin;
 8002046:	f240 2343 	movw	r3, #579	; 0x243
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4837      	ldr	r0, [pc, #220]	; (800213c <MX_GPIO_Init+0x1e0>)
 8002060:	f002 fcfe 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8002064:	2304      	movs	r3, #4
 8002066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4831      	ldr	r0, [pc, #196]	; (800213c <MX_GPIO_Init+0x1e0>)
 8002078:	f002 fcf2 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 800207c:	2308      	movs	r3, #8
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002080:	2301      	movs	r3, #1
 8002082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	482a      	ldr	r0, [pc, #168]	; (800213c <MX_GPIO_Init+0x1e0>)
 8002094:	f002 fce4 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8002098:	f44f 7398 	mov.w	r3, #304	; 0x130
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4823      	ldr	r0, [pc, #140]	; (8002140 <MX_GPIO_Init+0x1e4>)
 80020b2:	f002 fcd5 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 80020b6:	2301      	movs	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020c2:	2301      	movs	r3, #1
 80020c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	481d      	ldr	r0, [pc, #116]	; (8002144 <MX_GPIO_Init+0x1e8>)
 80020ce:	f002 fcc7 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 80020d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4817      	ldr	r0, [pc, #92]	; (8002144 <MX_GPIO_Init+0x1e8>)
 80020e8:	f002 fcba 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80020ec:	2304      	movs	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4811      	ldr	r0, [pc, #68]	; (8002148 <MX_GPIO_Init+0x1ec>)
 8002104:	f002 fcac 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	480a      	ldr	r0, [pc, #40]	; (8002144 <MX_GPIO_Init+0x1e8>)
 800211c:	f002 fca0 	bl	8004a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2028      	movs	r0, #40	; 0x28
 8002126:	f002 f854 	bl	80041d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800212a:	2028      	movs	r0, #40	; 0x28
 800212c:	f002 f86d 	bl	800420a <HAL_NVIC_EnableIRQ>

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	40020800 	.word	0x40020800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020c00 	.word	0x40020c00

0800214c <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
 8002152:	4603      	mov	r3, r0
 8002154:	460a      	mov	r2, r1
 8002156:	80fb      	strh	r3, [r7, #6]
 8002158:	4613      	mov	r3, r2
 800215a:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <box_pointer+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <box_pointer+0x5c>)
 8002166:	8818      	ldrh	r0, [r3, #0]
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <box_pointer+0x5c>)
 800216a:	8859      	ldrh	r1, [r3, #2]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	230f      	movs	r3, #15
 8002172:	220f      	movs	r2, #15
 8002174:	f001 f8e4 	bl	8003340 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002178:	88b9      	ldrh	r1, [r7, #4]
 800217a:	88f8      	ldrh	r0, [r7, #6]
 800217c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	230f      	movs	r3, #15
 8002184:	220f      	movs	r2, #15
 8002186:	f001 f8db 	bl	8003340 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 800218a:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <box_pointer+0x5c>)
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 8002190:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <box_pointer+0x5c>)
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <box_pointer+0x58>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000602 	.word	0x20000602
 80021a8:	20000604 	.word	0x20000604

080021ac <simple_scr>:

void simple_scr(){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af04      	add	r7, sp, #16
#ifdef INA219_Wrk

	  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
	  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

	  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	4884      	ldr	r0, [pc, #528]	; (80023c8 <simple_scr+0x21c>)
 80021b6:	f7fe ffcb 	bl	8001150 <INA219Read_BusV>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	4b83      	ldr	r3, [pc, #524]	; (80023cc <simple_scr+0x220>)
 80021c0:	821a      	strh	r2, [r3, #16]
	  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	4880      	ldr	r0, [pc, #512]	; (80023c8 <simple_scr+0x21c>)
 80021c6:	f7fe ffeb 	bl	80011a0 <INA219Read_Current>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	4b7f      	ldr	r3, [pc, #508]	; (80023cc <simple_scr+0x220>)
 80021d0:	811a      	strh	r2, [r3, #8]
	  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	487c      	ldr	r0, [pc, #496]	; (80023c8 <simple_scr+0x21c>)
 80021d6:	f7ff f843 	bl	8001260 <INA219Read_Power>
 80021da:	eef0 7a40 	vmov.f32	s15, s0
 80021de:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <simple_scr+0x220>)
 80021e0:	edc3 7a03 	vstr	s15, [r3, #12]
	  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	4878      	ldr	r0, [pc, #480]	; (80023c8 <simple_scr+0x21c>)
 80021e8:	f7fe fffe 	bl	80011e8 <INA219Read_ShuntV>
 80021ec:	eef0 7a40 	vmov.f32	s15, s0
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <simple_scr+0x220>)
 80021f2:	edc3 7a01 	vstr	s15, [r3, #4]

	  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 80021f6:	2205      	movs	r2, #5
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	4873      	ldr	r0, [pc, #460]	; (80023c8 <simple_scr+0x21c>)
 80021fc:	f7fe fece 	bl	8000f9c <INA219Read_cx>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <simple_scr+0x220>)
 8002206:	825a      	strh	r2, [r3, #18]
	  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	486e      	ldr	r0, [pc, #440]	; (80023c8 <simple_scr+0x21c>)
 800220e:	f7fe fec5 	bl	8000f9c <INA219Read_cx>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <simple_scr+0x220>)
 8002218:	801a      	strh	r2, [r3, #0]

	  sprintf(TextDispBuffer,"calibrator:%4X", inata.Calibra);
 800221a:	4b6c      	ldr	r3, [pc, #432]	; (80023cc <simple_scr+0x220>)
 800221c:	8a5b      	ldrh	r3, [r3, #18]
 800221e:	461a      	mov	r2, r3
 8002220:	496b      	ldr	r1, [pc, #428]	; (80023d0 <simple_scr+0x224>)
 8002222:	486c      	ldr	r0, [pc, #432]	; (80023d4 <simple_scr+0x228>)
 8002224:	f008 fdda 	bl	800addc <siprintf>
	  ili9341_WriteString(20, 50, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 8002228:	4b6b      	ldr	r3, [pc, #428]	; (80023d8 <simple_scr+0x22c>)
 800222a:	2200      	movs	r2, #0
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a66      	ldr	r2, [pc, #408]	; (80023d4 <simple_scr+0x228>)
 800223c:	2132      	movs	r1, #50	; 0x32
 800223e:	2014      	movs	r0, #20
 8002240:	f001 fa05 	bl	800364e <ili9341_WriteString>

	  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 8002244:	4b61      	ldr	r3, [pc, #388]	; (80023cc <simple_scr+0x220>)
 8002246:	8a1b      	ldrh	r3, [r3, #16]
 8002248:	461a      	mov	r2, r3
 800224a:	4964      	ldr	r1, [pc, #400]	; (80023dc <simple_scr+0x230>)
 800224c:	4861      	ldr	r0, [pc, #388]	; (80023d4 <simple_scr+0x228>)
 800224e:	f008 fdc5 	bl	800addc <siprintf>
	  ili9341_WriteString(20, 70, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <simple_scr+0x234>)
 8002254:	2200      	movs	r2, #0
 8002256:	9202      	str	r2, [sp, #8]
 8002258:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800225c:	9201      	str	r2, [sp, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	9200      	str	r2, [sp, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <simple_scr+0x228>)
 8002266:	2146      	movs	r1, #70	; 0x46
 8002268:	2014      	movs	r0, #20
 800226a:	f001 f9f0 	bl	800364e <ili9341_WriteString>

	  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 800226e:	4b57      	ldr	r3, [pc, #348]	; (80023cc <simple_scr+0x220>)
 8002270:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002274:	461a      	mov	r2, r3
 8002276:	495b      	ldr	r1, [pc, #364]	; (80023e4 <simple_scr+0x238>)
 8002278:	4856      	ldr	r0, [pc, #344]	; (80023d4 <simple_scr+0x228>)
 800227a:	f008 fdaf 	bl	800addc <siprintf>
	  ili9341_WriteString(20, 95, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 800227e:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <simple_scr+0x234>)
 8002280:	2200      	movs	r2, #0
 8002282:	9202      	str	r2, [sp, #8]
 8002284:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002288:	9201      	str	r2, [sp, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <simple_scr+0x228>)
 8002292:	215f      	movs	r1, #95	; 0x5f
 8002294:	2014      	movs	r0, #20
 8002296:	f001 f9da 	bl	800364e <ili9341_WriteString>

	  sprintf(TextDispBuffer,"P mW: %.2f  ", inata.POWER);
 800229a:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <simple_scr+0x220>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	494f      	ldr	r1, [pc, #316]	; (80023e8 <simple_scr+0x23c>)
 80022aa:	484a      	ldr	r0, [pc, #296]	; (80023d4 <simple_scr+0x228>)
 80022ac:	f008 fd96 	bl	800addc <siprintf>
	  ili9341_WriteString(20, 120, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80022b0:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <simple_scr+0x234>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	9202      	str	r2, [sp, #8]
 80022b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022ba:	9201      	str	r2, [sp, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	9200      	str	r2, [sp, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a44      	ldr	r2, [pc, #272]	; (80023d4 <simple_scr+0x228>)
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	2014      	movs	r0, #20
 80022c8:	f001 f9c1 	bl	800364e <ili9341_WriteString>
#endif

	  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 80022cc:	2118      	movs	r1, #24
 80022ce:	4847      	ldr	r0, [pc, #284]	; (80023ec <simple_scr+0x240>)
 80022d0:	f7ff f810 	bl	80012f4 <MCP3208_READ_8_DataSPI>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <simple_scr+0x244>)
 80022da:	801a      	strh	r2, [r3, #0]
	  mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
 80022dc:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <simple_scr+0x244>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff f83d 	bl	8001360 <MCP320x_ADCbit_to_Volt>
 80022e6:	eef0 7a40 	vmov.f32	s15, s0
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <simple_scr+0x244>)
 80022ec:	edc3 7a02 	vstr	s15, [r3, #8]
	  sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <simple_scr+0x244>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f92f 	bl	8000558 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	493d      	ldr	r1, [pc, #244]	; (80023f4 <simple_scr+0x248>)
 8002300:	4834      	ldr	r0, [pc, #208]	; (80023d4 <simple_scr+0x228>)
 8002302:	f008 fd6b 	bl	800addc <siprintf>
	  ili9341_WriteString(20, 145, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <simple_scr+0x234>)
 8002308:	2200      	movs	r2, #0
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	9200      	str	r2, [sp, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <simple_scr+0x228>)
 800231a:	2191      	movs	r1, #145	; 0x91
 800231c:	2014      	movs	r0, #20
 800231e:	f001 f996 	bl	800364e <ili9341_WriteString>

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <simple_scr+0x24c>)
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	461a      	mov	r2, r3
 8002328:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <simple_scr+0x24c>)
 800232a:	789b      	ldrb	r3, [r3, #2]
 800232c:	4619      	mov	r1, r3
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <simple_scr+0x250>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	4932      	ldr	r1, [pc, #200]	; (8002400 <simple_scr+0x254>)
 8002338:	4826      	ldr	r0, [pc, #152]	; (80023d4 <simple_scr+0x228>)
 800233a:	f008 fd4f 	bl	800addc <siprintf>
	  ili9341_WriteString(170, 50, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 800233e:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <simple_scr+0x234>)
 8002340:	2200      	movs	r2, #0
 8002342:	9202      	str	r2, [sp, #8]
 8002344:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002348:	9201      	str	r2, [sp, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <simple_scr+0x228>)
 8002352:	2132      	movs	r1, #50	; 0x32
 8002354:	20aa      	movs	r0, #170	; 0xaa
 8002356:	f001 f97a 	bl	800364e <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], btn_k_cnt, flag_k_up);
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <simple_scr+0x258>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <simple_scr+0x25c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <simple_scr+0x260>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	460b      	mov	r3, r1
 800236e:	4928      	ldr	r1, [pc, #160]	; (8002410 <simple_scr+0x264>)
 8002370:	4818      	ldr	r0, [pc, #96]	; (80023d4 <simple_scr+0x228>)
 8002372:	f008 fd33 	bl	800addc <siprintf>
	  ili9341_WriteString(170, 90, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <simple_scr+0x234>)
 8002378:	2200      	movs	r2, #0
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <simple_scr+0x228>)
 800238a:	215a      	movs	r1, #90	; 0x5a
 800238c:	20aa      	movs	r0, #170	; 0xaa
 800238e:	f001 f95e 	bl	800364e <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, state_box_choice_is);
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <simple_scr+0x268>)
 8002394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <simple_scr+0x26c>)
 8002398:	f993 3000 	ldrsb.w	r3, [r3]
 800239c:	491f      	ldr	r1, [pc, #124]	; (800241c <simple_scr+0x270>)
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <simple_scr+0x228>)
 80023a0:	f008 fd1c 	bl	800addc <siprintf>
	  ili9341_WriteString(190, 110, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <simple_scr+0x234>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	9202      	str	r2, [sp, #8]
 80023aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ae:	9201      	str	r2, [sp, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	9200      	str	r2, [sp, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <simple_scr+0x228>)
 80023b8:	216e      	movs	r1, #110	; 0x6e
 80023ba:	20be      	movs	r0, #190	; 0xbe
 80023bc:	f001 f947 	bl	800364e <ili9341_WriteString>


}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000240 	.word	0x20000240
 80023cc:	2000059c 	.word	0x2000059c
 80023d0:	0800d410 	.word	0x0800d410
 80023d4:	200004a8 	.word	0x200004a8
 80023d8:	20000020 	.word	0x20000020
 80023dc:	0800d420 	.word	0x0800d420
 80023e0:	20000028 	.word	0x20000028
 80023e4:	0800d430 	.word	0x0800d430
 80023e8:	0800d440 	.word	0x0800d440
 80023ec:	20000294 	.word	0x20000294
 80023f0:	200005b4 	.word	0x200005b4
 80023f4:	0800d450 	.word	0x0800d450
 80023f8:	200005f0 	.word	0x200005f0
 80023fc:	200005f4 	.word	0x200005f4
 8002400:	0800d460 	.word	0x0800d460
 8002404:	200005f8 	.word	0x200005f8
 8002408:	200005fe 	.word	0x200005fe
 800240c:	200005ff 	.word	0x200005ff
 8002410:	0800d470 	.word	0x0800d470
 8002414:	40000400 	.word	0x40000400
 8002418:	20000019 	.word	0x20000019
 800241c:	0800d480 	.word	0x0800d480

08002420 <Button_machine>:


void Button_machine(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	 * raw read,
	 * read from 1 as rising detect,
	 * read latest (bdebug),
	 * read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <Button_machine+0xb0>)
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <Button_machine+0xb0>)
 800242a:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <Button_machine+0xb4>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	0b1b      	lsrs	r3, r3, #12
 8002432:	b2db      	uxtb	r3, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <Button_machine+0xb0>)
 8002440:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <Button_machine+0xb0>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d014      	beq.n	8002474 <Button_machine+0x54>
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <Button_machine+0xb0>)
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d110      	bne.n	8002474 <Button_machine+0x54>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <Button_machine+0xb0>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <Button_machine+0xb8>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4413      	add	r3, r2
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <Button_machine+0xb8>)
 8002462:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <Button_machine+0xb0>)
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <Button_machine+0xb0>)
 800246a:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <Button_machine+0xb0>)
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <Button_machine+0xb0>)
 8002472:	70da      	strb	r2, [r3, #3]
		}

		//// Rotary Encoder knob Button----------------------------------
		btn_K[1] = btn_K[0];
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <Button_machine+0xbc>)
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	4b18      	ldr	r3, [pc, #96]	; (80024dc <Button_machine+0xbc>)
 800247a:	705a      	strb	r2, [r3, #1]
		btn_K[0] = HAL_GPIO_ReadPin(KnobBTN_GPIO_Port, KnobBTN_Pin);
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	4815      	ldr	r0, [pc, #84]	; (80024d4 <Button_machine+0xb4>)
 8002480:	f002 fc72 	bl	8004d68 <HAL_GPIO_ReadPin>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <Button_machine+0xbc>)
 800248a:	701a      	strb	r2, [r3, #0]

		if(btn_K[0] == 0 && btn_K[1]){
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <Button_machine+0xbc>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <Button_machine+0x88>
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <Button_machine+0xbc>)
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <Button_machine+0x88>
			btn_k_cnt++;
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <Button_machine+0xc0>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <Button_machine+0xc0>)
 80024a6:	701a      	strb	r2, [r3, #0]
		}

//		knob_rotter();

		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <Button_machine+0xc4>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d905      	bls.n	80024bc <Button_machine+0x9c>
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <Button_machine+0xc4>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d907      	bls.n	80024cc <Button_machine+0xac>
			TIM3->CNT = 0x8000; // back to center
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <Button_machine+0xc8>)
 80024be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <Button_machine+0xc4>)
 80024c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024ca:	801a      	strh	r2, [r3, #0]
		}


}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200005f0 	.word	0x200005f0
 80024d4:	40020400 	.word	0x40020400
 80024d8:	200005f4 	.word	0x200005f4
 80024dc:	200005fc 	.word	0x200005fc
 80024e0:	200005fe 	.word	0x200005fe
 80024e4:	200005f8 	.word	0x200005f8
 80024e8:	40000400 	.word	0x40000400

080024ec <knob_rotter>:

void knob_rotter(){
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <knob_rotter+0x4c>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <knob_rotter+0x50>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d908      	bls.n	8002510 <knob_rotter+0x24>
		flag_k_up = 1;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <knob_rotter+0x54>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <knob_rotter+0x4c>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b29a      	uxth	r2, r3
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <knob_rotter+0x50>)
 800250c:	801a      	strh	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;

	}
	else{}

}
 800250e:	e00e      	b.n	800252e <knob_rotter+0x42>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <knob_rotter+0x4c>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <knob_rotter+0x50>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d207      	bcs.n	800252e <knob_rotter+0x42>
		flag_k_dn = 1;
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <knob_rotter+0x58>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <knob_rotter+0x4c>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <knob_rotter+0x50>)
 800252c:	801a      	strh	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40000400 	.word	0x40000400
 800253c:	200005f8 	.word	0x200005f8
 8002540:	200005ff 	.word	0x200005ff
 8002544:	20000600 	.word	0x20000600

08002548 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 8002550:	4b44      	ldr	r3, [pc, #272]	; (8002664 <buzzer_scream_cnt+0x11c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d04b      	beq.n	80025f0 <buzzer_scream_cnt+0xa8>
 8002558:	2b02      	cmp	r3, #2
 800255a:	d023      	beq.n	80025a4 <buzzer_scream_cnt+0x5c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(flagc_bz){
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <buzzer_scream_cnt+0x120>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <buzzer_scream_cnt+0x54>

				HAL_TIM_Base_Start_IT(&htim10);
 8002564:	4841      	ldr	r0, [pc, #260]	; (800266c <buzzer_scream_cnt+0x124>)
 8002566:	f006 f8db 	bl	8008720 <HAL_TIM_Base_Start_IT>
				timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <buzzer_scream_cnt+0x128>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	461c      	mov	r4, r3
 8002570:	f001 fd24 	bl	8003fbc <HAL_GetTick>
 8002574:	4603      	mov	r3, r0
 8002576:	4423      	add	r3, r4
 8002578:	2200      	movs	r2, #0
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	60fa      	str	r2, [r7, #12]
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <buzzer_scream_cnt+0x12c>)
 8002580:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002584:	e9c3 1200 	strd	r1, r2, [r3]

				bz_st = bz_scream;
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <buzzer_scream_cnt+0x11c>)
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				flagc_bz--;
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <buzzer_scream_cnt+0x120>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3b01      	subs	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <buzzer_scream_cnt+0x120>)
 8002598:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 800259a:	e05e      	b.n	800265a <buzzer_scream_cnt+0x112>
				HAL_TIM_Base_Stop_IT(&htim10);
 800259c:	4833      	ldr	r0, [pc, #204]	; (800266c <buzzer_scream_cnt+0x124>)
 800259e:	f006 f921 	bl	80087e4 <HAL_TIM_Base_Stop_IT>
			break;
 80025a2:	e05a      	b.n	800265a <buzzer_scream_cnt+0x112>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80025a4:	2201      	movs	r2, #1
 80025a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025aa:	4833      	ldr	r0, [pc, #204]	; (8002678 <buzzer_scream_cnt+0x130>)
 80025ac:	f002 fbf4 	bl	8004d98 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 80025b0:	f001 fd04 	bl	8003fbc <HAL_GetTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2200      	movs	r2, #0
 80025b8:	4698      	mov	r8, r3
 80025ba:	4691      	mov	r9, r2
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <buzzer_scream_cnt+0x12c>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	4590      	cmp	r8, r2
 80025c4:	eb79 0303 	sbcs.w	r3, r9, r3
 80025c8:	d344      	bcc.n	8002654 <buzzer_scream_cnt+0x10c>
				timestamp_bz = bzz_t_priod_dn + HAL_GetTick();
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <buzzer_scream_cnt+0x134>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	461c      	mov	r4, r3
 80025d0:	f001 fcf4 	bl	8003fbc <HAL_GetTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4423      	add	r3, r4
 80025d8:	2200      	movs	r2, #0
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <buzzer_scream_cnt+0x12c>)
 80025e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025e4:	e9c3 1200 	strd	r1, r2, [r3]

				bz_st = bz_silent;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <buzzer_scream_cnt+0x11c>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
			}
			break;
 80025ee:	e031      	b.n	8002654 <buzzer_scream_cnt+0x10c>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	4820      	ldr	r0, [pc, #128]	; (8002678 <buzzer_scream_cnt+0x130>)
 80025f8:	f002 fbce 	bl	8004d98 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 80025fc:	f001 fcde 	bl	8003fbc <HAL_GetTick>
 8002600:	4603      	mov	r3, r0
 8002602:	2200      	movs	r2, #0
 8002604:	461c      	mov	r4, r3
 8002606:	4615      	mov	r5, r2
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <buzzer_scream_cnt+0x12c>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	4294      	cmp	r4, r2
 8002610:	eb75 0303 	sbcs.w	r3, r5, r3
 8002614:	d320      	bcc.n	8002658 <buzzer_scream_cnt+0x110>

				if(flagc_bz){
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <buzzer_scream_cnt+0x120>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <buzzer_scream_cnt+0x104>
					timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <buzzer_scream_cnt+0x128>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	461c      	mov	r4, r3
 8002624:	f001 fcca 	bl	8003fbc <HAL_GetTick>
 8002628:	4603      	mov	r3, r0
 800262a:	4423      	add	r3, r4
 800262c:	2200      	movs	r2, #0
 800262e:	469a      	mov	sl, r3
 8002630:	4693      	mov	fp, r2
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <buzzer_scream_cnt+0x12c>)
 8002634:	e9c3 ab00 	strd	sl, fp, [r3]

					flagc_bz--;
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <buzzer_scream_cnt+0x120>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	3b01      	subs	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <buzzer_scream_cnt+0x120>)
 8002642:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <buzzer_scream_cnt+0x11c>)
 8002646:	2202      	movs	r2, #2
 8002648:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 800264a:	e005      	b.n	8002658 <buzzer_scream_cnt+0x110>
				bz_st = bz_init;
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <buzzer_scream_cnt+0x11c>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
			break;
 8002652:	e001      	b.n	8002658 <buzzer_scream_cnt+0x110>
			break;
 8002654:	bf00      	nop
 8002656:	e000      	b.n	800265a <buzzer_scream_cnt+0x112>
			break;
 8002658:	bf00      	nop
		}

}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002664:	2000060c 	.word	0x2000060c
 8002668:	200005ec 	.word	0x200005ec
 800266c:	20000334 	.word	0x20000334
 8002670:	20000008 	.word	0x20000008
 8002674:	200005e0 	.word	0x200005e0
 8002678:	40020800 	.word	0x40020800
 800267c:	2000000a 	.word	0x2000000a

08002680 <GrandState_Verita>:


void GrandState_Verita(){
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002686:	4ba6      	ldr	r3, [pc, #664]	; (8002920 <GrandState_Verita+0x2a0>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d87c      	bhi.n	8002788 <GrandState_Verita+0x108>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <GrandState_Verita+0x14>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080027df 	.word	0x080027df
 8002698:	080026ad 	.word	0x080026ad
 800269c:	08002789 	.word	0x08002789
 80026a0:	08002801 	.word	0x08002801
 80026a4:	080028a1 	.word	0x080028a1
 80026a8:	080028f3 	.word	0x080028f3

	case pre_lobby:
		state_box_choice_n = 4;
 80026ac:	4b9d      	ldr	r3, [pc, #628]	; (8002924 <GrandState_Verita+0x2a4>)
 80026ae:	2204      	movs	r2, #4
 80026b0:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	23f0      	movs	r3, #240	; 0xf0
 80026b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026bc:	2100      	movs	r1, #0
 80026be:	2000      	movs	r0, #0
 80026c0:	f000 fe3e 	bl	8003340 <ili9341_FillRect>

		ili9341_FillRect(300, 0, 20, 240, cl_ORANGE);
 80026c4:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	23f0      	movs	r3, #240	; 0xf0
 80026cc:	2214      	movs	r2, #20
 80026ce:	2100      	movs	r1, #0
 80026d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026d4:	f000 fe34 	bl	8003340 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_ORANGE);
 80026d8:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	230a      	movs	r3, #10
 80026e0:	220a      	movs	r2, #10
 80026e2:	2100      	movs	r1, #0
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 fe2b 	bl	8003340 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Verita: Nucleo-F411RE Tester");
 80026ea:	498f      	ldr	r1, [pc, #572]	; (8002928 <GrandState_Verita+0x2a8>)
 80026ec:	488f      	ldr	r0, [pc, #572]	; (800292c <GrandState_Verita+0x2ac>)
 80026ee:	f008 fb75 	bl	800addc <siprintf>
		ili9341_WriteStringNoBG(10, 10, TextDispBuffer, Font20, cl_WHITE);
 80026f2:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <GrandState_Verita+0x2b0>)
 80026f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	9200      	str	r2, [sp, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8a      	ldr	r2, [pc, #552]	; (800292c <GrandState_Verita+0x2ac>)
 8002702:	210a      	movs	r1, #10
 8002704:	200a      	movs	r0, #10
 8002706:	f000 ffef 	bl	80036e8 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Full Script");
 800270a:	498a      	ldr	r1, [pc, #552]	; (8002934 <GrandState_Verita+0x2b4>)
 800270c:	4887      	ldr	r0, [pc, #540]	; (800292c <GrandState_Verita+0x2ac>)
 800270e:	f008 fb65 	bl	800addc <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 8002712:	4b89      	ldr	r3, [pc, #548]	; (8002938 <GrandState_Verita+0x2b8>)
 8002714:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002718:	9201      	str	r2, [sp, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	9200      	str	r2, [sp, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a82      	ldr	r2, [pc, #520]	; (800292c <GrandState_Verita+0x2ac>)
 8002722:	213c      	movs	r1, #60	; 0x3c
 8002724:	2032      	movs	r0, #50	; 0x32
 8002726:	f000 ffdf 	bl	80036e8 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR_Monitor");
 800272a:	4984      	ldr	r1, [pc, #528]	; (800293c <GrandState_Verita+0x2bc>)
 800272c:	487f      	ldr	r0, [pc, #508]	; (800292c <GrandState_Verita+0x2ac>)
 800272e:	f008 fb55 	bl	800addc <siprintf>
		ili9341_WriteStringNoBG(50, 90, TextDispBuffer, Font16, cl_CYAN);
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <GrandState_Verita+0x2b8>)
 8002734:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	9200      	str	r2, [sp, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7a      	ldr	r2, [pc, #488]	; (800292c <GrandState_Verita+0x2ac>)
 8002742:	215a      	movs	r1, #90	; 0x5a
 8002744:	2032      	movs	r0, #50	; 0x32
 8002746:	f000 ffcf 	bl	80036e8 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Analog, coming soon");
 800274a:	497d      	ldr	r1, [pc, #500]	; (8002940 <GrandState_Verita+0x2c0>)
 800274c:	4877      	ldr	r0, [pc, #476]	; (800292c <GrandState_Verita+0x2ac>)
 800274e:	f008 fb45 	bl	800addc <siprintf>
		ili9341_WriteStringNoBG(50, 120, TextDispBuffer, Font16, cl_CYAN);
 8002752:	4b79      	ldr	r3, [pc, #484]	; (8002938 <GrandState_Verita+0x2b8>)
 8002754:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a72      	ldr	r2, [pc, #456]	; (800292c <GrandState_Verita+0x2ac>)
 8002762:	2178      	movs	r1, #120	; 0x78
 8002764:	2032      	movs	r0, #50	; 0x32
 8002766:	f000 ffbf 	bl	80036e8 <ili9341_WriteStringNoBG>

		box_pointer(20, bosy[state_box_choice_is]);
 800276a:	4b76      	ldr	r3, [pc, #472]	; (8002944 <GrandState_Verita+0x2c4>)
 800276c:	f993 3000 	ldrsb.w	r3, [r3]
 8002770:	461a      	mov	r2, r3
 8002772:	4b75      	ldr	r3, [pc, #468]	; (8002948 <GrandState_Verita+0x2c8>)
 8002774:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002778:	4619      	mov	r1, r3
 800277a:	2014      	movs	r0, #20
 800277c:	f7ff fce6 	bl	800214c <box_pointer>

		GrandState = lobby;
 8002780:	4b67      	ldr	r3, [pc, #412]	; (8002920 <GrandState_Verita+0x2a0>)
 8002782:	2202      	movs	r2, #2
 8002784:	701a      	strb	r2, [r3, #0]
		break;
 8002786:	e0c7      	b.n	8002918 <GrandState_Verita+0x298>

	default:
	case lobby:
		state_box_choice_n = 4;
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <GrandState_Verita+0x2a4>)
 800278a:	2204      	movs	r2, #4
 800278c:	701a      	strb	r2, [r3, #0]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, state_box_choice_is);
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <GrandState_Verita+0x2cc>)
 8002790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002792:	4b6c      	ldr	r3, [pc, #432]	; (8002944 <GrandState_Verita+0x2c4>)
 8002794:	f993 3000 	ldrsb.w	r3, [r3]
 8002798:	496d      	ldr	r1, [pc, #436]	; (8002950 <GrandState_Verita+0x2d0>)
 800279a:	4864      	ldr	r0, [pc, #400]	; (800292c <GrandState_Verita+0x2ac>)
 800279c:	f008 fb1e 	bl	800addc <siprintf>
		ili9341_WriteString(120, 150, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <GrandState_Verita+0x2b8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	9202      	str	r2, [sp, #8]
 80027a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027aa:	9201      	str	r2, [sp, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	9200      	str	r2, [sp, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5e      	ldr	r2, [pc, #376]	; (800292c <GrandState_Verita+0x2ac>)
 80027b4:	2196      	movs	r1, #150	; 0x96
 80027b6:	2078      	movs	r0, #120	; 0x78
 80027b8:	f000 ff49 	bl	800364e <ili9341_WriteString>
		//simple_scr();
		if(btn_k_cnt){
 80027bc:	4b65      	ldr	r3, [pc, #404]	; (8002954 <GrandState_Verita+0x2d4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a6 	beq.w	8002912 <GrandState_Verita+0x292>

			if (state_box_choice_is == 2){GrandState = pre_monitor;}
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <GrandState_Verita+0x2c4>)
 80027c8:	f993 3000 	ldrsb.w	r3, [r3]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d102      	bne.n	80027d6 <GrandState_Verita+0x156>
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <GrandState_Verita+0x2a0>)
 80027d2:	2204      	movs	r2, #4
 80027d4:	701a      	strb	r2, [r3, #0]

		btn_k_cnt = 0;
 80027d6:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <GrandState_Verita+0x2d4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
//		  if(flag_k_dn){a_boxpoint_lobby = abd2s; flag_k_dn--;}
//		  break;
//
//		}

		break; // lobby
 80027dc:	e099      	b.n	8002912 <GrandState_Verita+0x292>

	case init:
		state_box_choice_n = 0;
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <GrandState_Verita+0x2a4>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
//		}
//		//// last round: send only left bit (less 255)
//		HAL_Delay(2);
//		BL_UART_WriteMem_d(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);

		BL_UART_Start(&huart1);
 80027e4:	485c      	ldr	r0, [pc, #368]	; (8002958 <GrandState_Verita+0x2d8>)
 80027e6:	f7fe fec9 	bl	800157c <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 80027ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027ee:	485a      	ldr	r0, [pc, #360]	; (8002958 <GrandState_Verita+0x2d8>)
 80027f0:	f7ff f83e 	bl	8001870 <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 80027f4:	f7fe fef2 	bl	80015dc <BL_UART_Finish>

		GrandState = lobby;
 80027f8:	4b49      	ldr	r3, [pc, #292]	; (8002920 <GrandState_Verita+0x2a0>)
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
		break;
 80027fe:	e08b      	b.n	8002918 <GrandState_Verita+0x298>

	case s_bootloader:
		state_box_choice_n = 0;
 8002800:	4b48      	ldr	r3, [pc, #288]	; (8002924 <GrandState_Verita+0x2a4>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8002806:	4b55      	ldr	r3, [pc, #340]	; (800295c <GrandState_Verita+0x2dc>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b29b      	uxth	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <GrandState_Verita+0x2dc>)
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	b292      	uxth	r2, r2
 8002818:	2a00      	cmp	r2, #0
 800281a:	bf14      	ite	ne
 800281c:	2201      	movne	r2, #1
 800281e:	2200      	moveq	r2, #0
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	4413      	add	r3, r2
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <GrandState_Verita+0x2e0>)
 8002828:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 800282a:	484b      	ldr	r0, [pc, #300]	; (8002958 <GrandState_Verita+0x2d8>)
 800282c:	f7fe fea6 	bl	800157c <BL_UART_Start>

		//// Flash Memory Erase ============, Erase1_Mass_CMD makes bootloader not response to ALL write CMD / dont know why
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank1_CMD);
 8002830:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002834:	4848      	ldr	r0, [pc, #288]	; (8002958 <GrandState_Verita+0x2d8>)
 8002836:	f7ff f81b 	bl	8001870 <BL_UART_ExtendEraseMem_SP>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank2_CMD);
 800283a:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 800283e:	4846      	ldr	r0, [pc, #280]	; (8002958 <GrandState_Verita+0x2d8>)
 8002840:	f7ff f816 	bl	8001870 <BL_UART_ExtendEraseMem_SP>

		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002844:	2400      	movs	r4, #0
 8002846:	e00b      	b.n	8002860 <GrandState_Verita+0x1e0>
			BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8002848:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	4619      	mov	r1, r3
 8002850:	0223      	lsls	r3, r4, #8
 8002852:	4a44      	ldr	r2, [pc, #272]	; (8002964 <GrandState_Verita+0x2e4>)
 8002854:	4413      	add	r3, r2
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	483f      	ldr	r0, [pc, #252]	; (8002958 <GrandState_Verita+0x2d8>)
 800285a:	f7fe fedd 	bl	8001618 <BL_UART_WriteMem>
		for(register int b = 0;b < bootloop_n - 1;b++){
 800285e:	3401      	adds	r4, #1
 8002860:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <GrandState_Verita+0x2e0>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3b01      	subs	r3, #1
 8002866:	429c      	cmp	r4, r3
 8002868:	dbee      	blt.n	8002848 <GrandState_Verita+0x1c8>
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <GrandState_Verita+0x2e0>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8002872:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	4618      	mov	r0, r3
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <GrandState_Verita+0x2dc>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b37      	ldr	r3, [pc, #220]	; (8002960 <GrandState_Verita+0x2e0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	4936      	ldr	r1, [pc, #216]	; (8002964 <GrandState_Verita+0x2e4>)
 800288a:	440b      	add	r3, r1
 800288c:	4601      	mov	r1, r0
 800288e:	4832      	ldr	r0, [pc, #200]	; (8002958 <GrandState_Verita+0x2d8>)
 8002890:	f7fe fec2 	bl	8001618 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8002894:	f7fe fea2 	bl	80015dc <BL_UART_Finish>

		GrandState = lobby;
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <GrandState_Verita+0x2a0>)
 800289a:	2202      	movs	r2, #2
 800289c:	701a      	strb	r2, [r3, #0]

		break;
 800289e:	e03b      	b.n	8002918 <GrandState_Verita+0x298>

	case pre_monitor:
		state_box_choice_n = 0;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <GrandState_Verita+0x2a4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	23f0      	movs	r3, #240	; 0xf0
 80028ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028b0:	2100      	movs	r1, #0
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 fd44 	bl	8003340 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_ORANGE);
 80028b8:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	230a      	movs	r3, #10
 80028c0:	220a      	movs	r2, #10
 80028c2:	2100      	movs	r1, #0
 80028c4:	2000      	movs	r0, #0
 80028c6:	f000 fd3b 	bl	8003340 <ili9341_FillRect>

		sprintf(TextDispBuffer,"<-Back (Knob press)");
 80028ca:	4927      	ldr	r1, [pc, #156]	; (8002968 <GrandState_Verita+0x2e8>)
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <GrandState_Verita+0x2ac>)
 80028ce:	f008 fa85 	bl	800addc <siprintf>
		ili9341_WriteStringNoBG(60, 220, TextDispBuffer, Font16, cl_WHITE);
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <GrandState_Verita+0x2b8>)
 80028d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d8:	9201      	str	r2, [sp, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a12      	ldr	r2, [pc, #72]	; (800292c <GrandState_Verita+0x2ac>)
 80028e2:	21dc      	movs	r1, #220	; 0xdc
 80028e4:	203c      	movs	r0, #60	; 0x3c
 80028e6:	f000 feff 	bl	80036e8 <ili9341_WriteStringNoBG>
		GrandState = monitor;
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <GrandState_Verita+0x2a0>)
 80028ec:	2205      	movs	r2, #5
 80028ee:	701a      	strb	r2, [r3, #0]
		break;
 80028f0:	e012      	b.n	8002918 <GrandState_Verita+0x298>

	case monitor:
		state_box_choice_n = 1;
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <GrandState_Verita+0x2a4>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
		simple_scr();
 80028f8:	f7ff fc58 	bl	80021ac <simple_scr>

		if(btn_k_cnt){
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <GrandState_Verita+0x2d4>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <GrandState_Verita+0x296>
			GrandState = pre_lobby;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <GrandState_Verita+0x2a0>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
			btn_k_cnt = 0;
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <GrandState_Verita+0x2d4>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002910:	e001      	b.n	8002916 <GrandState_Verita+0x296>
		break; // lobby
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <GrandState_Verita+0x298>
		break;
 8002916:	bf00      	nop
	}
}
 8002918:	bf00      	nop
 800291a:	3704      	adds	r7, #4
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	20000006 	.word	0x20000006
 8002924:	20000018 	.word	0x20000018
 8002928:	0800d488 	.word	0x0800d488
 800292c:	200004a8 	.word	0x200004a8
 8002930:	20000030 	.word	0x20000030
 8002934:	0800d4a8 	.word	0x0800d4a8
 8002938:	20000028 	.word	0x20000028
 800293c:	0800d4b4 	.word	0x0800d4b4
 8002940:	0800d4c0 	.word	0x0800d4c0
 8002944:	20000019 	.word	0x20000019
 8002948:	2000000c 	.word	0x2000000c
 800294c:	40000400 	.word	0x40000400
 8002950:	0800d480 	.word	0x0800d480
 8002954:	200005fe 	.word	0x200005fe
 8002958:	2000037c 	.word	0x2000037c
 800295c:	20000004 	.word	0x20000004
 8002960:	20000530 	.word	0x20000530
 8002964:	0800d554 	.word	0x0800d554
 8002968:	0800d4d4 	.word	0x0800d4d4

0800296c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297c:	d104      	bne.n	8002988 <HAL_GPIO_EXTI_Callback+0x1c>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		flagc_bz = 12;
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_GPIO_EXTI_Callback+0x24>)
 8002980:	220c      	movs	r2, #12
 8002982:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8002984:	f7ff fde0 	bl	8002548 <buzzer_scream_cnt>

		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;
		}
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200005ec 	.word	0x200005ec

08002994 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d106      	bne.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029ac:	6013      	str	r3, [r2, #0]
		buzzer_scream_cnt();
 80029ae:	f7ff fdcb 	bl	8002548 <buzzer_scream_cnt>
	}
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000334 	.word	0x20000334
 80029c0:	200005e8 	.word	0x200005e8

080029c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	counter++;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_UART_RxCpltCallback+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_UART_RxCpltCallback+0x20>)
 80029d6:	701a      	strb	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	200005f6 	.word	0x200005f6

080029e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ec:	b672      	cpsid	i
}
 80029ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <Error_Handler+0x8>
	...

080029f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a32:	2007      	movs	r0, #7
 8002a34:	f001 fbc2 	bl	80041bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <HAL_I2C_MspInit+0xa4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d13c      	bne.n	8002ae0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_I2C_MspInit+0xa8>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_I2C_MspInit+0xa8>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_I2C_MspInit+0xa8>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a94:	2304      	movs	r3, #4
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4814      	ldr	r0, [pc, #80]	; (8002af0 <HAL_I2C_MspInit+0xac>)
 8002aa0:	f001 ffde 	bl	8004a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_I2C_MspInit+0xa8>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_I2C_MspInit+0xa8>)
 8002aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_I2C_MspInit+0xa8>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	201f      	movs	r0, #31
 8002ac6:	f001 fb84 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002aca:	201f      	movs	r0, #31
 8002acc:	f001 fb9d 	bl	800420a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2020      	movs	r0, #32
 8002ad6:	f001 fb7c 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ada:	2020      	movs	r0, #32
 8002adc:	f001 fb95 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3728      	adds	r7, #40	; 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_SPI_MspInit+0x84>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12c      	bne.n	8002b70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b60:	2306      	movs	r3, #6
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4805      	ldr	r0, [pc, #20]	; (8002b80 <HAL_SPI_MspInit+0x8c>)
 8002b6c:	f001 ff78 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b70:	bf00      	nop
 8002b72:	3728      	adds	r7, #40	; 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40003c00 	.word	0x40003c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020800 	.word	0x40020800

08002b84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12b      	bne.n	8002bfe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x88>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bfa:	f001 ff31 	bl	8004a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000

08002c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_TIM_Base_MspInit+0x48>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d115      	bne.n	8002c52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_TIM_Base_MspInit+0x4c>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_TIM_Base_MspInit+0x4c>)
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c34:	6453      	str	r3, [r2, #68]	; 0x44
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_TIM_Base_MspInit+0x4c>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2019      	movs	r0, #25
 8002c48:	f001 fac3 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c4c:	2019      	movs	r0, #25
 8002c4e:	f001 fadc 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6b      	ldr	r2, [pc, #428]	; (8002e30 <HAL_UART_MspInit+0x1cc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d135      	bne.n	8002cf2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002c90:	f043 0310 	orr.w	r3, r3, #16
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a62      	ldr	r2, [pc, #392]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4857      	ldr	r0, [pc, #348]	; (8002e38 <HAL_UART_MspInit+0x1d4>)
 8002cdc:	f001 fec0 	bl	8004a60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	2025      	movs	r0, #37	; 0x25
 8002ce6:	f001 fa74 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cea:	2025      	movs	r0, #37	; 0x25
 8002cec:	f001 fa8d 	bl	800420a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cf0:	e09a      	b.n	8002e28 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a51      	ldr	r2, [pc, #324]	; (8002e3c <HAL_UART_MspInit+0x1d8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d12c      	bne.n	8002d56 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a4b      	ldr	r2, [pc, #300]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0c:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a44      	ldr	r2, [pc, #272]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d34:	230c      	movs	r3, #12
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d44:	2307      	movs	r3, #7
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	483a      	ldr	r0, [pc, #232]	; (8002e38 <HAL_UART_MspInit+0x1d4>)
 8002d50:	f001 fe86 	bl	8004a60 <HAL_GPIO_Init>
}
 8002d54:	e068      	b.n	8002e28 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART6)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a39      	ldr	r2, [pc, #228]	; (8002e40 <HAL_UART_MspInit+0x1dc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d163      	bne.n	8002e28 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d6a:	f043 0320 	orr.w	r3, r3, #32
 8002d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d70:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8c:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_UART_MspInit+0x1d0>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d98:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002daa:	2308      	movs	r3, #8
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	4820      	ldr	r0, [pc, #128]	; (8002e38 <HAL_UART_MspInit+0x1d4>)
 8002db6:	f001 fe53 	bl	8004a60 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dbc:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_UART_MspInit+0x1e4>)
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002dc0:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dc2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002dc6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dda:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002dfc:	4811      	ldr	r0, [pc, #68]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002dfe:	f001 fa1f 	bl	8004240 <HAL_DMA_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002e08:	f7ff fdee 	bl	80029e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
 8002e12:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <HAL_UART_MspInit+0x1e0>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2047      	movs	r0, #71	; 0x47
 8002e1e:	f001 f9d8 	bl	80041d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e22:	2047      	movs	r0, #71	; 0x47
 8002e24:	f001 f9f1 	bl	800420a <HAL_NVIC_EnableIRQ>
}
 8002e28:	bf00      	nop
 8002e2a:	3738      	adds	r7, #56	; 0x38
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40011000 	.word	0x40011000
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	40011400 	.word	0x40011400
 8002e44:	20000448 	.word	0x20000448
 8002e48:	40026428 	.word	0x40026428

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <NMI_Handler+0x4>

08002e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <MemManage_Handler+0x4>

08002e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler+0x4>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <UsageFault_Handler+0x4>

08002e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e98:	f001 f87c 	bl	8003f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ea6:	f005 fe00 	bl	8008aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000334 	.word	0x20000334

08002eb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <I2C1_EV_IRQHandler+0x10>)
 8002eba:	f002 fc1d 	bl	80056f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000240 	.word	0x20000240

08002ec8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <I2C1_ER_IRQHandler+0x10>)
 8002ece:	f002 fd84 	bl	80059da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000240 	.word	0x20000240

08002edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <USART1_IRQHandler+0x10>)
 8002ee2:	f006 f9ed 	bl	80092c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000037c 	.word	0x2000037c

08002ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ef8:	f001 ff82 	bl	8004e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <DMA2_Stream1_IRQHandler+0x10>)
 8002f06:	f001 fb33 	bl	8004570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000448 	.word	0x20000448

08002f14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <USART6_IRQHandler+0x10>)
 8002f1a:	f006 f9d1 	bl	80092c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000404 	.word	0x20000404

08002f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
	return 1;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <_kill>:

int _kill(int pid, int sig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f42:	f007 faaf 	bl	800a4a4 <__errno>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2216      	movs	r2, #22
 8002f4a:	601a      	str	r2, [r3, #0]
	return -1;
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_exit>:

void _exit (int status)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f60:	f04f 31ff 	mov.w	r1, #4294967295
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ffe7 	bl	8002f38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f6a:	e7fe      	b.n	8002f6a <_exit+0x12>

08002f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e00a      	b.n	8002f94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f7e:	f3af 8000 	nop.w
 8002f82:	4601      	mov	r1, r0
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	60ba      	str	r2, [r7, #8]
 8002f8a:	b2ca      	uxtb	r2, r1
 8002f8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	dbf0      	blt.n	8002f7e <_read+0x12>
	}

return len;
 8002f9c:	687b      	ldr	r3, [r7, #4]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e009      	b.n	8002fcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	60ba      	str	r2, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	dbf1      	blt.n	8002fb8 <_write+0x12>
	}
	return len;
 8002fd4:	687b      	ldr	r3, [r7, #4]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_close>:

int _close(int file)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
	return -1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003006:	605a      	str	r2, [r3, #4]
	return 0;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <_isatty>:

int _isatty(int file)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
	return 1;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
	return 0;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <_sbrk+0x5c>)
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <_sbrk+0x60>)
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <_sbrk+0x64>)
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <_sbrk+0x68>)
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <_sbrk+0x64>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d207      	bcs.n	8003088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003078:	f007 fa14 	bl	800a4a4 <__errno>
 800307c:	4603      	mov	r3, r0
 800307e:	220c      	movs	r2, #12
 8003080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e009      	b.n	800309c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <_sbrk+0x64>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	4a05      	ldr	r2, [pc, #20]	; (80030ac <_sbrk+0x64>)
 8003098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20020000 	.word	0x20020000
 80030a8:	00000400 	.word	0x00000400
 80030ac:	20000610 	.word	0x20000610
 80030b0:	20000630 	.word	0x20000630

080030b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SystemInit+0x20>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <SystemInit+0x20>)
 80030c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80030dc:	2001      	movs	r0, #1
 80030de:	f000 fdc6 	bl	8003c6e <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80030e2:	2011      	movs	r0, #17
 80030e4:	f000 fe4a 	bl	8003d7c <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80030f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8003102:	23f0      	movs	r3, #240	; 0xf0
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8003116:	4b52      	ldr	r3, [pc, #328]	; (8003260 <ili9341_Init+0x150>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d115      	bne.n	800314e <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8003122:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <ili9341_Init+0x150>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <ili9341_Init+0x150>)
 800312e:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8003130:	4b4b      	ldr	r3, [pc, #300]	; (8003260 <ili9341_Init+0x150>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <ili9341_Init+0x30>
      LCD_IO_Init();
 800313c:	f000 fda2 	bl	8003c84 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8003140:	4b47      	ldr	r3, [pc, #284]	; (8003260 <ili9341_Init+0x150>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b45      	ldr	r3, [pc, #276]	; (8003260 <ili9341_Init+0x150>)
 800314c:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800314e:	200a      	movs	r0, #10
 8003150:	f000 fd82 	bl	8003c58 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8003154:	2001      	movs	r0, #1
 8003156:	f000 fe11 	bl	8003d7c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800315a:	200a      	movs	r0, #10
 800315c:	f000 fd7c 	bl	8003c58 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8003160:	2203      	movs	r2, #3
 8003162:	4940      	ldr	r1, [pc, #256]	; (8003264 <ili9341_Init+0x154>)
 8003164:	20ef      	movs	r0, #239	; 0xef
 8003166:	f000 fe77 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800316a:	2203      	movs	r2, #3
 800316c:	493e      	ldr	r1, [pc, #248]	; (8003268 <ili9341_Init+0x158>)
 800316e:	20cf      	movs	r0, #207	; 0xcf
 8003170:	f000 fe72 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8003174:	2204      	movs	r2, #4
 8003176:	493d      	ldr	r1, [pc, #244]	; (800326c <ili9341_Init+0x15c>)
 8003178:	20ed      	movs	r0, #237	; 0xed
 800317a:	f000 fe6d 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800317e:	2203      	movs	r2, #3
 8003180:	493b      	ldr	r1, [pc, #236]	; (8003270 <ili9341_Init+0x160>)
 8003182:	20e8      	movs	r0, #232	; 0xe8
 8003184:	f000 fe68 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8003188:	2205      	movs	r2, #5
 800318a:	493a      	ldr	r1, [pc, #232]	; (8003274 <ili9341_Init+0x164>)
 800318c:	20cb      	movs	r0, #203	; 0xcb
 800318e:	f000 fe63 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8003192:	2201      	movs	r2, #1
 8003194:	4938      	ldr	r1, [pc, #224]	; (8003278 <ili9341_Init+0x168>)
 8003196:	20f7      	movs	r0, #247	; 0xf7
 8003198:	f000 fe5e 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 800319c:	2202      	movs	r2, #2
 800319e:	4937      	ldr	r1, [pc, #220]	; (800327c <ili9341_Init+0x16c>)
 80031a0:	20ea      	movs	r0, #234	; 0xea
 80031a2:	f000 fe59 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80031a6:	2201      	movs	r2, #1
 80031a8:	4935      	ldr	r1, [pc, #212]	; (8003280 <ili9341_Init+0x170>)
 80031aa:	20c0      	movs	r0, #192	; 0xc0
 80031ac:	f000 fe54 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 80031b0:	2201      	movs	r2, #1
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <ili9341_Init+0x174>)
 80031b4:	20c1      	movs	r0, #193	; 0xc1
 80031b6:	f000 fe4f 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 80031ba:	2202      	movs	r2, #2
 80031bc:	4932      	ldr	r1, [pc, #200]	; (8003288 <ili9341_Init+0x178>)
 80031be:	20c5      	movs	r0, #197	; 0xc5
 80031c0:	f000 fe4a 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 80031c4:	2201      	movs	r2, #1
 80031c6:	4931      	ldr	r1, [pc, #196]	; (800328c <ili9341_Init+0x17c>)
 80031c8:	20c7      	movs	r0, #199	; 0xc7
 80031ca:	f000 fe45 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80031ce:	2201      	movs	r2, #1
 80031d0:	492f      	ldr	r1, [pc, #188]	; (8003290 <ili9341_Init+0x180>)
 80031d2:	2037      	movs	r0, #55	; 0x37
 80031d4:	f000 fe40 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80031d8:	2201      	movs	r2, #1
 80031da:	492e      	ldr	r1, [pc, #184]	; (8003294 <ili9341_Init+0x184>)
 80031dc:	203a      	movs	r0, #58	; 0x3a
 80031de:	f000 fe3b 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80031e2:	2202      	movs	r2, #2
 80031e4:	492c      	ldr	r1, [pc, #176]	; (8003298 <ili9341_Init+0x188>)
 80031e6:	20b1      	movs	r0, #177	; 0xb1
 80031e8:	f000 fe36 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80031ec:	2203      	movs	r2, #3
 80031ee:	492b      	ldr	r1, [pc, #172]	; (800329c <ili9341_Init+0x18c>)
 80031f0:	20b6      	movs	r0, #182	; 0xb6
 80031f2:	f000 fe31 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80031f6:	2201      	movs	r2, #1
 80031f8:	4925      	ldr	r1, [pc, #148]	; (8003290 <ili9341_Init+0x180>)
 80031fa:	20f2      	movs	r0, #242	; 0xf2
 80031fc:	f000 fe2c 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8003200:	2201      	movs	r2, #1
 8003202:	4927      	ldr	r1, [pc, #156]	; (80032a0 <ili9341_Init+0x190>)
 8003204:	2026      	movs	r0, #38	; 0x26
 8003206:	f000 fe27 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800320a:	220f      	movs	r2, #15
 800320c:	4925      	ldr	r1, [pc, #148]	; (80032a4 <ili9341_Init+0x194>)
 800320e:	20e0      	movs	r0, #224	; 0xe0
 8003210:	f000 fe22 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8003214:	220f      	movs	r2, #15
 8003216:	4924      	ldr	r1, [pc, #144]	; (80032a8 <ili9341_Init+0x198>)
 8003218:	20e1      	movs	r0, #225	; 0xe1
 800321a:	f000 fe1d 	bl	8003e58 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 800321e:	2036      	movs	r0, #54	; 0x36
 8003220:	f000 fdac 	bl	8003d7c <LCD_IO_WriteCmd8>
 8003224:	20e8      	movs	r0, #232	; 0xe8
 8003226:	f000 fdc7 	bl	8003db8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800322a:	2011      	movs	r0, #17
 800322c:	f000 fda6 	bl	8003d7c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8003230:	200a      	movs	r0, #10
 8003232:	f000 fd11 	bl	8003c58 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8003236:	2300      	movs	r3, #0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	23f0      	movs	r3, #240	; 0xf0
 800323c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003240:	2100      	movs	r1, #0
 8003242:	2000      	movs	r0, #0
 8003244:	f000 f87c 	bl	8003340 <ili9341_FillRect>
  LCD_Delay(10);
 8003248:	200a      	movs	r0, #10
 800324a:	f000 fd05 	bl	8003c58 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 800324e:	2029      	movs	r0, #41	; 0x29
 8003250:	f000 fd94 	bl	8003d7c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8003254:	200a      	movs	r0, #10
 8003256:	f000 fcff 	bl	8003c58 <LCD_Delay>
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000614 	.word	0x20000614
 8003264:	0800d4e8 	.word	0x0800d4e8
 8003268:	0800d4ec 	.word	0x0800d4ec
 800326c:	0800d4f0 	.word	0x0800d4f0
 8003270:	0800d4f8 	.word	0x0800d4f8
 8003274:	0800d4fc 	.word	0x0800d4fc
 8003278:	0800d504 	.word	0x0800d504
 800327c:	0800d508 	.word	0x0800d508
 8003280:	0800d50c 	.word	0x0800d50c
 8003284:	0800d510 	.word	0x0800d510
 8003288:	0800d514 	.word	0x0800d514
 800328c:	0800d518 	.word	0x0800d518
 8003290:	0800d51c 	.word	0x0800d51c
 8003294:	0800d520 	.word	0x0800d520
 8003298:	0800d524 	.word	0x0800d524
 800329c:	0800d528 	.word	0x0800d528
 80032a0:	0800d52c 	.word	0x0800d52c
 80032a4:	0800d530 	.word	0x0800d530
 80032a8:	0800d540 	.word	0x0800d540

080032ac <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
 80032b6:	460b      	mov	r3, r1
 80032b8:	80bb      	strh	r3, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80032be:	202a      	movs	r0, #42	; 0x2a
 80032c0:	f000 fd5c 	bl	8003d7c <LCD_IO_WriteCmd8>
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fd73 	bl	8003db8 <LCD_IO_WriteData8>
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fd6e 	bl	8003db8 <LCD_IO_WriteData8>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd67 	bl	8003db8 <LCD_IO_WriteData8>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fd62 	bl	8003db8 <LCD_IO_WriteData8>
 80032f4:	202b      	movs	r0, #43	; 0x2b
 80032f6:	f000 fd41 	bl	8003d7c <LCD_IO_WriteCmd8>
 80032fa:	88bb      	ldrh	r3, [r7, #4]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	b29b      	uxth	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fd58 	bl	8003db8 <LCD_IO_WriteData8>
 8003308:	88bb      	ldrh	r3, [r7, #4]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fd53 	bl	8003db8 <LCD_IO_WriteData8>
 8003312:	88bb      	ldrh	r3, [r7, #4]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	b29b      	uxth	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd4c 	bl	8003db8 <LCD_IO_WriteData8>
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd47 	bl	8003db8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800332a:	202c      	movs	r0, #44	; 0x2c
 800332c:	f000 fd26 	bl	8003d7c <LCD_IO_WriteCmd8>
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fd56 	bl	8003de4 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	4611      	mov	r1, r2
 800334c:	461a      	mov	r2, r3
 800334e:	4623      	mov	r3, r4
 8003350:	80fb      	strh	r3, [r7, #6]
 8003352:	4603      	mov	r3, r0
 8003354:	80bb      	strh	r3, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	807b      	strh	r3, [r7, #2]
 800335a:	4613      	mov	r3, r2
 800335c:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 800335e:	202a      	movs	r0, #42	; 0x2a
 8003360:	f000 fd0c 	bl	8003d7c <LCD_IO_WriteCmd8>
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	b29b      	uxth	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fd23 	bl	8003db8 <LCD_IO_WriteData8>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fd1e 	bl	8003db8 <LCD_IO_WriteData8>
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	4413      	add	r3, r2
 8003382:	3b01      	subs	r3, #1
 8003384:	121b      	asrs	r3, r3, #8
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fd15 	bl	8003db8 <LCD_IO_WriteData8>
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4413      	add	r3, r2
 8003398:	b2db      	uxtb	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fd0a 	bl	8003db8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80033a4:	202b      	movs	r0, #43	; 0x2b
 80033a6:	f000 fce9 	bl	8003d7c <LCD_IO_WriteCmd8>
 80033aa:	88bb      	ldrh	r3, [r7, #4]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fd00 	bl	8003db8 <LCD_IO_WriteData8>
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fcfb 	bl	8003db8 <LCD_IO_WriteData8>
 80033c2:	88ba      	ldrh	r2, [r7, #4]
 80033c4:	883b      	ldrh	r3, [r7, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	3b01      	subs	r3, #1
 80033ca:	121b      	asrs	r3, r3, #8
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fcf2 	bl	8003db8 <LCD_IO_WriteData8>
 80033d4:	88bb      	ldrh	r3, [r7, #4]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	883b      	ldrh	r3, [r7, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4413      	add	r3, r2
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fce7 	bl	8003db8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	883a      	ldrh	r2, [r7, #0]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	8b3b      	ldrh	r3, [r7, #24]
 80033f6:	4619      	mov	r1, r3
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	f000 fd09 	bl	8003e10 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}

08003406 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003406:	b082      	sub	sp, #8
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	603a      	str	r2, [r7, #0]
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
 8003416:	460b      	mov	r3, r1
 8003418:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003422:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003430:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003434:	eeb0 0a47 	vmov.f32	s0, s14
 8003438:	f009 ff7c 	bl	800d334 <ceilf>
 800343c:	eef0 7a40 	vmov.f32	s15, s0
 8003440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003444:	ee17 3a90 	vmov	r3, s15
 8003448:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3b01      	subs	r3, #1
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
 800345c:	e060      	b.n	8003520 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	e024      	b.n	80034b2 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	3a20      	subs	r2, #32
 8003470:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003472:	fb01 f202 	mul.w	r2, r1, r2
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	fb02 f101 	mul.w	r1, r2, r1
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	fb00 f202 	mul.w	r2, r0, r2
 8003484:	4411      	add	r1, r2
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	440a      	add	r2, r1
 800348a:	4413      	add	r3, r2
 800348c:	7819      	ldrb	r1, [r3, #0]
 800348e:	f107 020c 	add.w	r2, r7, #12
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	460a      	mov	r2, r1
 8003498:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	f107 010c 	add.w	r1, r7, #12
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	440a      	add	r2, r1
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	3301      	adds	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dbd6      	blt.n	8003468 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e027      	b.n	8003510 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	4413      	add	r3, r2
 80034d6:	b298      	uxth	r0, r3
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	88bb      	ldrh	r3, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7ff fee1 	bl	80032ac <ili9341_WritePixel>
 80034ea:	e00e      	b.n	800350a <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	4413      	add	r3, r2
 80034f4:	b298      	uxth	r0, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	88bb      	ldrh	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003504:	4619      	mov	r1, r3
 8003506:	f7ff fed1 	bl	80032ac <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	3301      	adds	r3, #1
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003512:	461a      	mov	r2, r3
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4293      	cmp	r3, r2
 8003518:	dbd2      	blt.n	80034c0 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	3301      	adds	r3, #1
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003522:	461a      	mov	r2, r3
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	4293      	cmp	r3, r2
 8003528:	db99      	blt.n	800345e <ili9341_WriteChar+0x58>
			}

		}
	}
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	; 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003536:	b002      	add	sp, #8
 8003538:	4770      	bx	lr

0800353a <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 800353a:	b082      	sub	sp, #8
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	603a      	str	r2, [r7, #0]
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
 800354a:	460b      	mov	r3, r1
 800354c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003556:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003560:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003564:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003568:	eeb0 0a47 	vmov.f32	s0, s14
 800356c:	f009 fee2 	bl	800d334 <ceilf>
 8003570:	eef0 7a40 	vmov.f32	s15, s0
 8003574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003578:	ee17 3a90 	vmov	r3, s15
 800357c:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3b01      	subs	r3, #1
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	e050      	b.n	8003634 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e024      	b.n	80035e6 <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	3a20      	subs	r2, #32
 80035a4:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80035a6:	fb01 f202 	mul.w	r2, r1, r2
 80035aa:	6979      	ldr	r1, [r7, #20]
 80035ac:	fb02 f101 	mul.w	r1, r2, r1
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	fb00 f202 	mul.w	r2, r0, r2
 80035b8:	4411      	add	r1, r2
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	440a      	add	r2, r1
 80035be:	4413      	add	r3, r2
 80035c0:	7819      	ldrb	r1, [r3, #0]
 80035c2:	f107 020c 	add.w	r2, r7, #12
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	460a      	mov	r2, r1
 80035cc:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	f107 010c 	add.w	r1, r7, #12
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	440a      	add	r2, r1
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	dbd6      	blt.n	800359c <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	e017      	b.n	8003624 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	b29a      	uxth	r2, r3
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	4413      	add	r3, r2
 800360a:	b298      	uxth	r0, r3
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	b29a      	uxth	r2, r3
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003618:	4619      	mov	r1, r3
 800361a:	f7ff fe47 	bl	80032ac <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3301      	adds	r3, #1
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003626:	461a      	mov	r2, r3
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	4293      	cmp	r3, r2
 800362c:	dbe2      	blt.n	80035f4 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	3301      	adds	r3, #1
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003636:	461a      	mov	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	4293      	cmp	r3, r2
 800363c:	dba9      	blt.n	8003592 <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800364a:	b002      	add	sp, #8
 800364c:	4770      	bx	lr

0800364e <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 800364e:	b082      	sub	sp, #8
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af04      	add	r7, sp, #16
 8003656:	603a      	str	r2, [r7, #0]
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
 800365e:	460b      	mov	r3, r1
 8003660:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8003662:	f7ff fd4c 	bl	80030fe <ili9341_GetLcdPixelHeight>
 8003666:	4603      	mov	r3, r0
 8003668:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 800366a:	f7ff fd3f 	bl	80030ec <ili9341_GetLcdPixelWidth>
 800366e:	4603      	mov	r3, r0
 8003670:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8003672:	e02c      	b.n	80036ce <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	8c3a      	ldrh	r2, [r7, #32]
 8003678:	441a      	add	r2, r3
 800367a:	89bb      	ldrh	r3, [r7, #12]
 800367c:	429a      	cmp	r2, r3
 800367e:	db13      	blt.n	80036a8 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8003684:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003686:	88bb      	ldrh	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 800368c:	88bb      	ldrh	r3, [r7, #4]
 800368e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003690:	441a      	add	r2, r3
 8003692:	89fb      	ldrh	r3, [r7, #14]
 8003694:	429a      	cmp	r2, r3
 8003696:	da1f      	bge.n	80036d8 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b20      	cmp	r3, #32
 800369e:	d103      	bne.n	80036a8 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	603b      	str	r3, [r7, #0]
				continue;
 80036a6:	e012      	b.n	80036ce <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 80036a8:	88b9      	ldrh	r1, [r7, #4]
 80036aa:	88f8      	ldrh	r0, [r7, #6]
 80036ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	f7ff fea3 	bl	8003406 <ili9341_WriteChar>
		Xpo += fonto.Width;
 80036c0:	8c3a      	ldrh	r2, [r7, #32]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4413      	add	r3, r2
 80036c6:	80fb      	strh	r3, [r7, #6]
		strr++;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	603b      	str	r3, [r7, #0]
	while(*strr){
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ce      	bne.n	8003674 <ili9341_WriteString+0x26>
	}
}
 80036d6:	e000      	b.n	80036da <ili9341_WriteString+0x8c>
				break;
 80036d8:	bf00      	nop
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e4:	b002      	add	sp, #8
 80036e6:	4770      	bx	lr

080036e8 <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 80036e8:	b082      	sub	sp, #8
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	603a      	str	r2, [r7, #0]
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	4603      	mov	r3, r0
 80036f6:	80fb      	strh	r3, [r7, #6]
 80036f8:	460b      	mov	r3, r1
 80036fa:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 80036fc:	f7ff fcff 	bl	80030fe <ili9341_GetLcdPixelHeight>
 8003700:	4603      	mov	r3, r0
 8003702:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8003704:	f7ff fcf2 	bl	80030ec <ili9341_GetLcdPixelWidth>
 8003708:	4603      	mov	r3, r0
 800370a:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 800370c:	e02a      	b.n	8003764 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	8c3a      	ldrh	r2, [r7, #32]
 8003712:	441a      	add	r2, r3
 8003714:	89bb      	ldrh	r3, [r7, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	db13      	blt.n	8003742 <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 800371e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003720:	88bb      	ldrh	r3, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8003726:	88bb      	ldrh	r3, [r7, #4]
 8003728:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800372a:	441a      	add	r2, r3
 800372c:	89fb      	ldrh	r3, [r7, #14]
 800372e:	429a      	cmp	r2, r3
 8003730:	da1d      	bge.n	800376e <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d103      	bne.n	8003742 <ili9341_WriteStringNoBG+0x5a>
				strr++;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	603b      	str	r3, [r7, #0]
				continue;
 8003740:	e010      	b.n	8003764 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8003742:	88b9      	ldrh	r1, [r7, #4]
 8003744:	88f8      	ldrh	r0, [r7, #6]
 8003746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	f7ff fef2 	bl	800353a <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8003756:	8c3a      	ldrh	r2, [r7, #32]
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	4413      	add	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
		strr++;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	603b      	str	r3, [r7, #0]
	while(*strr){
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1d0      	bne.n	800370e <ili9341_WriteStringNoBG+0x26>
	}
}
 800376c:	e000      	b.n	8003770 <ili9341_WriteStringNoBG+0x88>
				break;
 800376e:	bf00      	nop
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377a:	b002      	add	sp, #8
 800377c:	4770      	bx	lr
	...

08003780 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	015b      	lsls	r3, r3, #5
 8003794:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003798:	f023 031f 	bic.w	r3, r3, #31
 800379c:	4313      	orrs	r3, r2
 800379e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80037a2:	331c      	adds	r3, #28
 80037a4:	4a53      	ldr	r2, [pc, #332]	; (80038f4 <LcdWrite8+0x174>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80037aa:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <LcdWrite8+0x178>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <LcdWrite8+0x178>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	015b      	lsls	r3, r3, #5
 80037c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80037c4:	f023 031f 	bic.w	r3, r3, #31
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80037ce:	3318      	adds	r3, #24
 80037d0:	4a48      	ldr	r2, [pc, #288]	; (80038f4 <LcdWrite8+0x174>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80037d6:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <LcdWrite8+0x178>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <LcdWrite8+0x178>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	015b      	lsls	r3, r3, #5
 80037ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80037f0:	f023 031f 	bic.w	r3, r3, #31
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80037fa:	3314      	adds	r3, #20
 80037fc:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <LcdWrite8+0x174>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <LcdWrite8+0x178>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <LcdWrite8+0x178>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800381c:	f023 031f 	bic.w	r3, r3, #31
 8003820:	4313      	orrs	r3, r2
 8003822:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003826:	3310      	adds	r3, #16
 8003828:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <LcdWrite8+0x174>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800382e:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <LcdWrite8+0x178>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <LcdWrite8+0x178>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003840:	1dfb      	adds	r3, r7, #7
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003848:	f023 031f 	bic.w	r3, r3, #31
 800384c:	4313      	orrs	r3, r2
 800384e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003852:	330c      	adds	r3, #12
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <LcdWrite8+0x174>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <LcdWrite8+0x178>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <LcdWrite8+0x178>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	015b      	lsls	r3, r3, #5
 8003870:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003874:	f023 031f 	bic.w	r3, r3, #31
 8003878:	4313      	orrs	r3, r2
 800387a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800387e:	3308      	adds	r3, #8
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <LcdWrite8+0x174>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <LcdWrite8+0x178>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <LcdWrite8+0x178>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	015b      	lsls	r3, r3, #5
 800389c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80038a0:	f023 031f 	bic.w	r3, r3, #31
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80038aa:	3304      	adds	r3, #4
 80038ac:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <LcdWrite8+0x174>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <LcdWrite8+0x178>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <LcdWrite8+0x178>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	015b      	lsls	r3, r3, #5
 80038c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80038cc:	f023 031f 	bic.w	r3, r3, #31
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <LcdWrite8+0x174>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <LcdWrite8+0x178>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <LcdWrite8+0x178>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	4241028c 	.word	0x4241028c
 80038f8:	42408280 	.word	0x42408280

080038fc <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800390c:	1dbb      	adds	r3, r7, #6
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003914:	f023 031f 	bic.w	r3, r3, #31
 8003918:	4313      	orrs	r3, r2
 800391a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800391e:	333c      	adds	r3, #60	; 0x3c
 8003920:	4aab      	ldr	r2, [pc, #684]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003926:	4bab      	ldr	r3, [pc, #684]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4ba9      	ldr	r3, [pc, #676]	; (8003bd4 <LcdWrite16+0x2d8>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8003932:	1dbb      	adds	r3, r7, #6
 8003934:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003938:	1dbb      	adds	r3, r7, #6
 800393a:	015b      	lsls	r3, r3, #5
 800393c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003940:	f023 031f 	bic.w	r3, r3, #31
 8003944:	4313      	orrs	r3, r2
 8003946:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800394a:	3338      	adds	r3, #56	; 0x38
 800394c:	4aa0      	ldr	r2, [pc, #640]	; (8003bd0 <LcdWrite16+0x2d4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003952:	4ba0      	ldr	r3, [pc, #640]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	4b9e      	ldr	r3, [pc, #632]	; (8003bd4 <LcdWrite16+0x2d8>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 800395e:	1dbb      	adds	r3, r7, #6
 8003960:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800396c:	f023 031f 	bic.w	r3, r3, #31
 8003970:	4313      	orrs	r3, r2
 8003972:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003976:	3334      	adds	r3, #52	; 0x34
 8003978:	4a95      	ldr	r2, [pc, #596]	; (8003bd0 <LcdWrite16+0x2d4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800397e:	4b95      	ldr	r3, [pc, #596]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	4b93      	ldr	r3, [pc, #588]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 800398a:	1dbb      	adds	r3, r7, #6
 800398c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003990:	1dbb      	adds	r3, r7, #6
 8003992:	015b      	lsls	r3, r3, #5
 8003994:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003998:	f023 031f 	bic.w	r3, r3, #31
 800399c:	4313      	orrs	r3, r2
 800399e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80039a2:	3330      	adds	r3, #48	; 0x30
 80039a4:	4a8a      	ldr	r2, [pc, #552]	; (8003bd0 <LcdWrite16+0x2d4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80039aa:	4b8a      	ldr	r3, [pc, #552]	; (8003bd4 <LcdWrite16+0x2d8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <LcdWrite16+0x2d8>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 80039b6:	1dbb      	adds	r3, r7, #6
 80039b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	015b      	lsls	r3, r3, #5
 80039c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80039c4:	f023 031f 	bic.w	r3, r3, #31
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80039ce:	332c      	adds	r3, #44	; 0x2c
 80039d0:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <LcdWrite16+0x2d4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80039d6:	4b7f      	ldr	r3, [pc, #508]	; (8003bd4 <LcdWrite16+0x2d8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	4b7d      	ldr	r3, [pc, #500]	; (8003bd4 <LcdWrite16+0x2d8>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 80039e2:	1dbb      	adds	r3, r7, #6
 80039e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80039e8:	1dbb      	adds	r3, r7, #6
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80039f0:	f023 031f 	bic.w	r3, r3, #31
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80039fa:	3328      	adds	r3, #40	; 0x28
 80039fc:	4a74      	ldr	r2, [pc, #464]	; (8003bd0 <LcdWrite16+0x2d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8003a0e:	1dbb      	adds	r3, r7, #6
 8003a10:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a14:	1dbb      	adds	r3, r7, #6
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003a1c:	f023 031f 	bic.w	r3, r3, #31
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003a26:	3324      	adds	r3, #36	; 0x24
 8003a28:	4a69      	ldr	r2, [pc, #420]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003a2e:	4b69      	ldr	r3, [pc, #420]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	015b      	lsls	r3, r3, #5
 8003a44:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003a48:	f023 031f 	bic.w	r3, r3, #31
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003a52:	3320      	adds	r3, #32
 8003a54:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003a5a:	4b5e      	ldr	r3, [pc, #376]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	4b5c      	ldr	r3, [pc, #368]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8003a66:	1dbb      	adds	r3, r7, #6
 8003a68:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a6c:	1dbb      	adds	r3, r7, #6
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003a74:	f023 031f 	bic.w	r3, r3, #31
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	331c      	adds	r3, #28
 8003a80:	4a53      	ldr	r2, [pc, #332]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003a86:	4b53      	ldr	r3, [pc, #332]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8003a92:	1dbb      	adds	r3, r7, #6
 8003a94:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a98:	1dbb      	adds	r3, r7, #6
 8003a9a:	015b      	lsls	r3, r3, #5
 8003a9c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003aa0:	f023 031f 	bic.w	r3, r3, #31
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	3318      	adds	r3, #24
 8003aac:	4a48      	ldr	r2, [pc, #288]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003ab2:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8003abe:	1dbb      	adds	r3, r7, #6
 8003ac0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003acc:	f023 031f 	bic.w	r3, r3, #31
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	4a3d      	ldr	r2, [pc, #244]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003ade:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8003aea:	1dbb      	adds	r3, r7, #6
 8003aec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003af8:	f023 031f 	bic.w	r3, r3, #31
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b02:	3310      	adds	r3, #16
 8003b04:	4a32      	ldr	r2, [pc, #200]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b0a:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8003b16:	1dbb      	adds	r3, r7, #6
 8003b18:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	015b      	lsls	r3, r3, #5
 8003b20:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003b24:	f023 031f 	bic.w	r3, r3, #31
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	330c      	adds	r3, #12
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8003b42:	1dbb      	adds	r3, r7, #6
 8003b44:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b48:	1dbb      	adds	r3, r7, #6
 8003b4a:	015b      	lsls	r3, r3, #5
 8003b4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003b50:	f023 031f 	bic.w	r3, r3, #31
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003b74:	1dbb      	adds	r3, r7, #6
 8003b76:	015b      	lsls	r3, r3, #5
 8003b78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003b7c:	f023 031f 	bic.w	r3, r3, #31
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003b86:	3304      	adds	r3, #4
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003ba0:	1dbb      	adds	r3, r7, #6
 8003ba2:	015b      	lsls	r3, r3, #5
 8003ba4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003ba8:	f023 031f 	bic.w	r3, r3, #31
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <LcdWrite16+0x2d4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <LcdWrite16+0x2d8>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	4241028c 	.word	0x4241028c
 8003bd4:	42408280 	.word	0x42408280

08003bd8 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  while(Size--)
 8003be4:	e00a      	b.n	8003bfc <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fdc8 	bl	8003780 <LcdWrite8>
    if(dinc)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1e5a      	subs	r2, r3, #1
 8003c00:	60ba      	str	r2, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ef      	bne.n	8003be6 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8003c06:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <LCD_IO_WriteMultiData8+0x3c>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	42410284 	.word	0x42410284

08003c18 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  while(Size--)
 8003c24:	e00a      	b.n	8003c3c <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fe66 	bl	80038fc <LcdWrite16>
    if(dinc)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3302      	adds	r3, #2
 8003c3a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	60ba      	str	r2, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ef      	bne.n	8003c26 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8003c46:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <LCD_IO_WriteMultiData16+0x3c>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	42410284 	.word	0x42410284

08003c58 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f9b7 	bl	8003fd4 <HAL_Delay>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <LCD_IO_Init+0xd8>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <LCD_IO_Init+0xd8>)
 8003c8e:	f043 0307 	orr.w	r3, r3, #7
 8003c92:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <LCD_IO_Init+0xdc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	4a30      	ldr	r2, [pc, #192]	; (8003d60 <LCD_IO_Init+0xdc>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <LCD_IO_Init+0xdc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <LCD_IO_Init+0xdc>)
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <LCD_IO_Init+0xe0>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <LCD_IO_Init+0xe4>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <LCD_IO_Init+0xe8>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <LCD_IO_Init+0xec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <LCD_IO_Init+0xec>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <LCD_IO_Init+0xec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 030c 	bic.w	r3, r3, #12
 8003cda:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <LCD_IO_Init+0xec>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8003ce2:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <LCD_IO_Init+0xec>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <LCD_IO_Init+0xec>)
 8003ce8:	f043 0303 	orr.w	r3, r3, #3
 8003cec:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <LCD_IO_Init+0xec>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <LCD_IO_Init+0xec>)
 8003cf4:	f043 030c 	orr.w	r3, r3, #12
 8003cf8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <LCD_IO_Init+0xf0>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <LCD_IO_Init+0xf0>)
 8003d00:	f043 0303 	orr.w	r3, r3, #3
 8003d04:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <LCD_IO_Init+0xec>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <LCD_IO_Init+0xec>)
 8003d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d10:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8003d12:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <LCD_IO_Init+0xf4>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <LCD_IO_Init+0xf0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 0303 	bic.w	r3, r3, #3
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <LCD_IO_Init+0xf0>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <LCD_IO_Init+0xec>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d30:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <LCD_IO_Init+0xec>)
 8003d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d36:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8003d38:	200a      	movs	r0, #10
 8003d3a:	f7ff ff8d 	bl	8003c58 <LCD_Delay>
  LCD_RST_ON;
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <LCD_IO_Init+0xe0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8003d44:	200a      	movs	r0, #10
 8003d46:	f7ff ff87 	bl	8003c58 <LCD_Delay>
  LCD_RST_OFF;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <LCD_IO_Init+0xe0>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8003d50:	200a      	movs	r0, #10
 8003d52:	f7ff ff81 	bl	8003c58 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020000 	.word	0x40020000
 8003d64:	42400290 	.word	0x42400290
 8003d68:	42410280 	.word	0x42410280
 8003d6c:	42410284 	.word	0x42410284
 8003d70:	40020800 	.word	0x40020800
 8003d74:	40020400 	.word	0x40020400
 8003d78:	42408280 	.word	0x42408280

08003d7c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <LCD_IO_WriteCmd8+0x34>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <LCD_IO_WriteCmd8+0x38>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fcf3 	bl	8003780 <LcdWrite8>
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <LCD_IO_WriteCmd8+0x38>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <LCD_IO_WriteCmd8+0x34>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	42410284 	.word	0x42410284
 8003db4:	42410280 	.word	0x42410280

08003db8 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <LCD_IO_WriteData8+0x28>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fcd8 	bl	8003780 <LcdWrite8>
  LCD_CS_OFF;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <LCD_IO_WriteData8+0x28>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	42410284 	.word	0x42410284

08003de4 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <LCD_IO_WriteData16+0x28>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fd80 	bl	80038fc <LcdWrite16>
  LCD_CS_OFF;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <LCD_IO_WriteData16+0x28>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	42410284 	.word	0x42410284

08003e10 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	603a      	str	r2, [r7, #0]
 8003e1a:	71fb      	strb	r3, [r7, #7]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fca6 	bl	8003780 <LcdWrite8>
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fee9 	bl	8003c18 <LCD_IO_WriteMultiData16>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	42410284 	.word	0x42410284
 8003e54:	42410280 	.word	0x42410280

08003e58 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fc83 	bl	8003780 <LcdWrite8>
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8003e80:	2201      	movs	r2, #1
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68b8      	ldr	r0, [r7, #8]
 8003e86:	f7ff fea7 	bl	8003bd8 <LCD_IO_WriteMultiData8>
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	42410284 	.word	0x42410284
 8003e98:	42410280 	.word	0x42410280

08003e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ec6:	f7ff f8f5 	bl	80030b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eca:	f006 faf1 	bl	800a4b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ece:	f7fd fd47 	bl	8001960 <main>
  bx  lr    
 8003ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003edc:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003ee0:	08017364 	.word	0x08017364
  ldr r2, =_sbss
 8003ee4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003ee8:	2000062c 	.word	0x2000062c

08003eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>
	...

08003ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_Init+0x40>)
 8003efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_Init+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_Init+0x40>)
 8003f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_Init+0x40>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_Init+0x40>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f000 f94f 	bl	80041bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f000 f808 	bl	8003f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f24:	f7fe fd66 	bl	80029f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00

08003f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_InitTick+0x54>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_InitTick+0x58>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f967 	bl	8004226 <HAL_SYSTICK_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e00e      	b.n	8003f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b0f      	cmp	r3, #15
 8003f66:	d80a      	bhi.n	8003f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	f000 f92f 	bl	80041d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f74:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <HAL_InitTick+0x5c>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	2000001c 	.word	0x2000001c
 8003f8c:	2000003c 	.word	0x2000003c
 8003f90:	20000038 	.word	0x20000038

08003f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_IncTick+0x20>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000003c 	.word	0x2000003c
 8003fb8:	20000618 	.word	0x20000618

08003fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_GetTick+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000618 	.word	0x20000618

08003fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff ffee 	bl	8003fbc <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d005      	beq.n	8003ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_Delay+0x44>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffa:	bf00      	nop
 8003ffc:	f7ff ffde 	bl	8003fbc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d8f7      	bhi.n	8003ffc <HAL_Delay+0x28>
  {
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000003c 	.word	0x2000003c

0800401c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800404e:	4a04      	ldr	r2, [pc, #16]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	60d3      	str	r3, [r2, #12]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__NVIC_GetPriorityGrouping+0x18>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 0307 	and.w	r3, r3, #7
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db0b      	blt.n	80040aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <__NVIC_EnableIRQ+0x38>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	e000e100 	.word	0xe000e100

080040bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	db0a      	blt.n	80040e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	490c      	ldr	r1, [pc, #48]	; (8004108 <__NVIC_SetPriority+0x4c>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	440b      	add	r3, r1
 80040e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e4:	e00a      	b.n	80040fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4908      	ldr	r1, [pc, #32]	; (800410c <__NVIC_SetPriority+0x50>)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3b04      	subs	r3, #4
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	440b      	add	r3, r1
 80040fa:	761a      	strb	r2, [r3, #24]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000e100 	.word	0xe000e100
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f1c3 0307 	rsb	r3, r3, #7
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf28      	it	cs
 800412e:	2304      	movcs	r3, #4
 8004130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3304      	adds	r3, #4
 8004136:	2b06      	cmp	r3, #6
 8004138:	d902      	bls.n	8004140 <NVIC_EncodePriority+0x30>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3b03      	subs	r3, #3
 800413e:	e000      	b.n	8004142 <NVIC_EncodePriority+0x32>
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004158:	f04f 31ff 	mov.w	r1, #4294967295
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43d9      	mvns	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	4313      	orrs	r3, r2
         );
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004188:	d301      	bcc.n	800418e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800418a:	2301      	movs	r3, #1
 800418c:	e00f      	b.n	80041ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <SysTick_Config+0x40>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004196:	210f      	movs	r1, #15
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	f7ff ff8e 	bl	80040bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <SysTick_Config+0x40>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <SysTick_Config+0x40>)
 80041a8:	2207      	movs	r2, #7
 80041aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	e000e010 	.word	0xe000e010

080041bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff29 	bl	800401c <__NVIC_SetPriorityGrouping>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041e4:	f7ff ff3e 	bl	8004064 <__NVIC_GetPriorityGrouping>
 80041e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7ff ff8e 	bl	8004110 <NVIC_EncodePriority>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff5d 	bl	80040bc <__NVIC_SetPriority>
}
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	4603      	mov	r3, r0
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff31 	bl	8004080 <__NVIC_EnableIRQ>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffa2 	bl	8004178 <SysTick_Config>
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7ff feb6 	bl	8003fbc <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e099      	b.n	8004390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427c:	e00f      	b.n	800429e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800427e:	f7ff fe9d 	bl	8003fbc <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b05      	cmp	r3, #5
 800428a:	d908      	bls.n	800429e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e078      	b.n	8004390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e8      	bne.n	800427e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4b38      	ldr	r3, [pc, #224]	; (8004398 <HAL_DMA_Init+0x158>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d107      	bne.n	8004308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	4313      	orrs	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0307 	bic.w	r3, r3, #7
 800431e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b04      	cmp	r3, #4
 8004330:	d117      	bne.n	8004362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb0f 	bl	8004968 <DMA_CheckFifoParam>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800435e:	2301      	movs	r3, #1
 8004360:	e016      	b.n	8004390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fac6 	bl	80048fc <DMA_CalcBaseAndBitshift>
 8004370:	4603      	mov	r3, r0
 8004372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	223f      	movs	r2, #63	; 0x3f
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	f010803f 	.word	0xf010803f

0800439c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_DMA_Start_IT+0x26>
 80043be:	2302      	movs	r3, #2
 80043c0:	e040      	b.n	8004444 <HAL_DMA_Start_IT+0xa8>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d12f      	bne.n	8004436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa58 	bl	80048a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	223f      	movs	r2, #63	; 0x3f
 80043f6:	409a      	lsls	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0216 	orr.w	r2, r2, #22
 800440a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e005      	b.n	8004442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800443e:	2302      	movs	r3, #2
 8004440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7ff fdaf 	bl	8003fbc <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d008      	beq.n	800447e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e052      	b.n	8004524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0216 	bic.w	r2, r2, #22
 800448c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800449c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_DMA_Abort+0x62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0208 	bic.w	r2, r2, #8
 80044bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ce:	e013      	b.n	80044f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044d0:	f7ff fd74 	bl	8003fbc <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d90c      	bls.n	80044f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2203      	movs	r2, #3
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e015      	b.n	8004524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e4      	bne.n	80044d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	223f      	movs	r2, #63	; 0x3f
 800450c:	409a      	lsls	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d004      	beq.n	800454a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00c      	b.n	8004564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2205      	movs	r2, #5
 800454e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800457c:	4b8e      	ldr	r3, [pc, #568]	; (80047b8 <HAL_DMA_IRQHandler+0x248>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a8e      	ldr	r2, [pc, #568]	; (80047bc <HAL_DMA_IRQHandler+0x24c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2208      	movs	r2, #8
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01a      	beq.n	80045dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	2208      	movs	r2, #8
 80045ca:	409a      	lsls	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	2201      	movs	r2, #1
 8004600:	409a      	lsls	r2, r3
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	2204      	movs	r2, #4
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00b      	beq.n	8004648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	2204      	movs	r2, #4
 8004636:	409a      	lsls	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	2210      	movs	r2, #16
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d043      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d03c      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2210      	movs	r2, #16
 800466c:	409a      	lsls	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d024      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
 800469e:	e01f      	b.n	80046e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
 80046b0:	e016      	b.n	80046e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0208 	bic.w	r2, r2, #8
 80046ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	2220      	movs	r2, #32
 80046e6:	409a      	lsls	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 808f 	beq.w	8004810 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8087 	beq.w	8004810 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	2220      	movs	r2, #32
 8004708:	409a      	lsls	r2, r3
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b05      	cmp	r3, #5
 8004718:	d136      	bne.n	8004788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0216 	bic.w	r2, r2, #22
 8004728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <HAL_DMA_IRQHandler+0x1da>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0208 	bic.w	r2, r2, #8
 8004758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	223f      	movs	r2, #63	; 0x3f
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	2b00      	cmp	r3, #0
 800477c:	d07e      	beq.n	800487c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
        }
        return;
 8004786:	e079      	b.n	800487c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01d      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10d      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
 80047b4:	e02c      	b.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
 80047b6:	bf00      	nop
 80047b8:	2000001c 	.word	0x2000001c
 80047bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d023      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
 80047d0:	e01e      	b.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10f      	bne.n	8004800 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0210 	bic.w	r2, r2, #16
 80047ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	2b00      	cmp	r3, #0
 8004816:	d032      	beq.n	800487e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d022      	beq.n	800486a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2205      	movs	r2, #5
 8004828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3301      	adds	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	d307      	bcc.n	8004858 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f2      	bne.n	800483c <HAL_DMA_IRQHandler+0x2cc>
 8004856:	e000      	b.n	800485a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004858:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
 800487a:	e000      	b.n	800487e <HAL_DMA_IRQHandler+0x30e>
        return;
 800487c:	bf00      	nop
    }
  }
}
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004892:	b2db      	uxtb	r3, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d108      	bne.n	80048e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048de:	e007      	b.n	80048f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3b10      	subs	r3, #16
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <DMA_CalcBaseAndBitshift+0x64>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <DMA_CalcBaseAndBitshift+0x68>)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d909      	bls.n	800493e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004932:	f023 0303 	bic.w	r3, r3, #3
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
 800493c:	e007      	b.n	800494e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	aaaaaaab 	.word	0xaaaaaaab
 8004964:	08016f74 	.word	0x08016f74

08004968 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11f      	bne.n	80049c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d856      	bhi.n	8004a36 <DMA_CheckFifoParam+0xce>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <DMA_CheckFifoParam+0x28>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049b3 	.word	0x080049b3
 8004998:	080049a1 	.word	0x080049a1
 800499c:	08004a37 	.word	0x08004a37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d046      	beq.n	8004a3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b0:	e043      	b.n	8004a3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ba:	d140      	bne.n	8004a3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c0:	e03d      	b.n	8004a3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ca:	d121      	bne.n	8004a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d837      	bhi.n	8004a42 <DMA_CheckFifoParam+0xda>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <DMA_CheckFifoParam+0x70>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049ef 	.word	0x080049ef
 80049e0:	080049e9 	.word	0x080049e9
 80049e4:	08004a01 	.word	0x08004a01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e030      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d025      	beq.n	8004a46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fe:	e022      	b.n	8004a46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a08:	d11f      	bne.n	8004a4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a0e:	e01c      	b.n	8004a4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d903      	bls.n	8004a1e <DMA_CheckFifoParam+0xb6>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d003      	beq.n	8004a24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a1c:	e018      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      break;
 8004a22:	e015      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00e      	beq.n	8004a4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e00b      	b.n	8004a4e <DMA_CheckFifoParam+0xe6>
      break;
 8004a36:	bf00      	nop
 8004a38:	e00a      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e008      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e006      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a42:	bf00      	nop
 8004a44:	e004      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e159      	b.n	8004d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	f040 8148 	bne.w	8004d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d005      	beq.n	8004ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d130      	bne.n	8004b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	2203      	movs	r2, #3
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 0201 	and.w	r2, r3, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d017      	beq.n	8004b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d123      	bne.n	8004ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	08da      	lsrs	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3208      	adds	r2, #8
 8004b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	220f      	movs	r2, #15
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	08da      	lsrs	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3208      	adds	r2, #8
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2203      	movs	r2, #3
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0203 	and.w	r2, r3, #3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80a2 	beq.w	8004d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	4b57      	ldr	r3, [pc, #348]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	4a56      	ldr	r2, [pc, #344]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c02:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_GPIO_Init+0x2ec>)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	3302      	adds	r3, #2
 8004c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	220f      	movs	r2, #15
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a49      	ldr	r2, [pc, #292]	; (8004d50 <HAL_GPIO_Init+0x2f0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d019      	beq.n	8004c62 <HAL_GPIO_Init+0x202>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a48      	ldr	r2, [pc, #288]	; (8004d54 <HAL_GPIO_Init+0x2f4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_GPIO_Init+0x1fe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <HAL_GPIO_Init+0x2f8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00d      	beq.n	8004c5a <HAL_GPIO_Init+0x1fa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a46      	ldr	r2, [pc, #280]	; (8004d5c <HAL_GPIO_Init+0x2fc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_Init+0x1f6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a45      	ldr	r2, [pc, #276]	; (8004d60 <HAL_GPIO_Init+0x300>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_GPIO_Init+0x1f2>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e008      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c52:	2307      	movs	r3, #7
 8004c54:	e006      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c56:	2303      	movs	r3, #3
 8004c58:	e004      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e002      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c62:	2300      	movs	r3, #0
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	f002 0203 	and.w	r2, r2, #3
 8004c6a:	0092      	lsls	r2, r2, #2
 8004c6c:	4093      	lsls	r3, r2
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c74:	4935      	ldr	r1, [pc, #212]	; (8004d4c <HAL_GPIO_Init+0x2ec>)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	089b      	lsrs	r3, r3, #2
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ca6:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	f67f aea2 	bls.w	8004a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3724      	adds	r7, #36	; 0x24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40020000 	.word	0x40020000
 8004d54:	40020400 	.word	0x40020400
 8004d58:	40020800 	.word	0x40020800
 8004d5c:	40020c00 	.word	0x40020c00
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40013c00 	.word	0x40013c00

08004d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	887b      	ldrh	r3, [r7, #2]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
 8004d84:	e001      	b.n	8004d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	807b      	strh	r3, [r7, #2]
 8004da4:	4613      	mov	r3, r2
 8004da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004da8:	787b      	ldrb	r3, [r7, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004db4:	e003      	b.n	8004dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	041a      	lsls	r2, r3, #16
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	619a      	str	r2, [r3, #24]
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ddc:	887a      	ldrh	r2, [r7, #2]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4013      	ands	r3, r2
 8004de2:	041a      	lsls	r2, r3, #16
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	43d9      	mvns	r1, r3
 8004de8:	887b      	ldrh	r3, [r7, #2]
 8004dea:	400b      	ands	r3, r1
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e16:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fda4 	bl	800296c <HAL_GPIO_EXTI_Callback>
  }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40013c00 	.word	0x40013c00

08004e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e12b      	b.n	800509a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fd fdf4 	bl	8002a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e94:	f003 f8d6 	bl	8008044 <HAL_RCC_GetPCLK1Freq>
 8004e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4a81      	ldr	r2, [pc, #516]	; (80050a4 <HAL_I2C_Init+0x274>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d807      	bhi.n	8004eb4 <HAL_I2C_Init+0x84>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a80      	ldr	r2, [pc, #512]	; (80050a8 <HAL_I2C_Init+0x278>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bf94      	ite	ls
 8004eac:	2301      	movls	r3, #1
 8004eae:	2300      	movhi	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e006      	b.n	8004ec2 <HAL_I2C_Init+0x92>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a7d      	ldr	r2, [pc, #500]	; (80050ac <HAL_I2C_Init+0x27c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	bf94      	ite	ls
 8004ebc:	2301      	movls	r3, #1
 8004ebe:	2300      	movhi	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e0e7      	b.n	800509a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a78      	ldr	r2, [pc, #480]	; (80050b0 <HAL_I2C_Init+0x280>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	0c9b      	lsrs	r3, r3, #18
 8004ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a6a      	ldr	r2, [pc, #424]	; (80050a4 <HAL_I2C_Init+0x274>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d802      	bhi.n	8004f04 <HAL_I2C_Init+0xd4>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3301      	adds	r3, #1
 8004f02:	e009      	b.n	8004f18 <HAL_I2C_Init+0xe8>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	4a69      	ldr	r2, [pc, #420]	; (80050b4 <HAL_I2C_Init+0x284>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	3301      	adds	r3, #1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	495c      	ldr	r1, [pc, #368]	; (80050a4 <HAL_I2C_Init+0x274>)
 8004f34:	428b      	cmp	r3, r1
 8004f36:	d819      	bhi.n	8004f6c <HAL_I2C_Init+0x13c>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1e59      	subs	r1, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f4c:	400b      	ands	r3, r1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_I2C_Init+0x138>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1e59      	subs	r1, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	e051      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	e04f      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d111      	bne.n	8004f98 <HAL_I2C_Init+0x168>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1e58      	subs	r0, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	440b      	add	r3, r1
 8004f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f86:	3301      	adds	r3, #1
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e012      	b.n	8004fbe <HAL_I2C_Init+0x18e>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	0099      	lsls	r1, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Init+0x196>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e022      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10e      	bne.n	8004fec <HAL_I2C_Init+0x1bc>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1e58      	subs	r0, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	440b      	add	r3, r1
 8004fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fea:	e00f      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e58      	subs	r0, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	0099      	lsls	r1, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005002:	3301      	adds	r3, #1
 8005004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	6809      	ldr	r1, [r1, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800503a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6911      	ldr	r1, [r2, #16]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	430b      	orrs	r3, r1
 800504e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	000186a0 	.word	0x000186a0
 80050a8:	001e847f 	.word	0x001e847f
 80050ac:	003d08ff 	.word	0x003d08ff
 80050b0:	431bde83 	.word	0x431bde83
 80050b4:	10624dd3 	.word	0x10624dd3

080050b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	460b      	mov	r3, r1
 80050cc:	813b      	strh	r3, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050d2:	f7fe ff73 	bl	8003fbc <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	f040 80d9 	bne.w	8005298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2319      	movs	r3, #25
 80050ec:	2201      	movs	r2, #1
 80050ee:	496d      	ldr	r1, [pc, #436]	; (80052a4 <HAL_I2C_Mem_Write+0x1ec>)
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f002 f90d 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0cc      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2C_Mem_Write+0x56>
 800510a:	2302      	movs	r3, #2
 800510c:	e0c5      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d007      	beq.n	8005134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2221      	movs	r2, #33	; 0x21
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a4d      	ldr	r2, [pc, #308]	; (80052a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005176:	88f8      	ldrh	r0, [r7, #6]
 8005178:	893a      	ldrh	r2, [r7, #8]
 800517a:	8979      	ldrh	r1, [r7, #10]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f001 fe9c 	bl	8006ec4 <I2C_RequestMemoryWrite>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d052      	beq.n	8005238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e081      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f002 f98e 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d107      	bne.n	80051be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06b      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	781a      	ldrb	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d11b      	bne.n	8005238 <HAL_I2C_Mem_Write+0x180>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d017      	beq.n	8005238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1aa      	bne.n	8005196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f002 f97a 	bl	800753e <I2C_WaitOnBTFFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2b04      	cmp	r3, #4
 8005256:	d107      	bne.n	8005268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e016      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	e000      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005298:	2302      	movs	r3, #2
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	00100002 	.word	0x00100002
 80052a8:	ffff0000 	.word	0xffff0000

080052ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052c6:	f7fe fe79 	bl	8003fbc <HAL_GetTick>
 80052ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	f040 8208 	bne.w	80056ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	497b      	ldr	r1, [pc, #492]	; (80054d0 <HAL_I2C_Mem_Read+0x224>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f002 f813 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	e1fb      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_I2C_Mem_Read+0x56>
 80052fe:	2302      	movs	r3, #2
 8005300:	e1f4      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d007      	beq.n	8005328 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2222      	movs	r2, #34	; 0x22
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a5b      	ldr	r2, [pc, #364]	; (80054d4 <HAL_I2C_Mem_Read+0x228>)
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800536a:	88f8      	ldrh	r0, [r7, #6]
 800536c:	893a      	ldrh	r2, [r7, #8]
 800536e:	8979      	ldrh	r1, [r7, #10]
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4603      	mov	r3, r0
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f001 fe38 	bl	8006ff0 <I2C_RequestMemoryRead>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e1b0      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d113      	bne.n	80053ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005392:	2300      	movs	r3, #0
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e184      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d11b      	bne.n	80053fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e164      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d11b      	bne.n	800543a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	e144      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005450:	e138      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	2b03      	cmp	r3, #3
 8005458:	f200 80f1 	bhi.w	800563e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	2b01      	cmp	r3, #1
 8005462:	d123      	bne.n	80054ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f002 f8db 	bl	8007624 <I2C_WaitOnRXNEFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e139      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054aa:	e10b      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d14e      	bne.n	8005552 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2200      	movs	r2, #0
 80054bc:	4906      	ldr	r1, [pc, #24]	; (80054d8 <HAL_I2C_Mem_Read+0x22c>)
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 ff26 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e10e      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
 80054ce:	bf00      	nop
 80054d0:	00100002 	.word	0x00100002
 80054d4:	ffff0000 	.word	0xffff0000
 80054d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005550:	e0b8      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2200      	movs	r2, #0
 800555a:	4966      	ldr	r1, [pc, #408]	; (80056f4 <HAL_I2C_Mem_Read+0x448>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f001 fed7 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0bf      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2200      	movs	r2, #0
 80055b6:	494f      	ldr	r1, [pc, #316]	; (80056f4 <HAL_I2C_Mem_Read+0x448>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f001 fea9 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e091      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800563c:	e042      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f001 ffee 	bl	8007624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e04c      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d118      	bne.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f47f aec2 	bne.w	8005452 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	00010004 	.word	0x00010004

080056f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005718:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005720:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b10      	cmp	r3, #16
 8005726:	d003      	beq.n	8005730 <HAL_I2C_EV_IRQHandler+0x38>
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	f040 80c1 	bne.w	80058b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10d      	bne.n	8005766 <HAL_I2C_EV_IRQHandler+0x6e>
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005750:	d003      	beq.n	800575a <HAL_I2C_EV_IRQHandler+0x62>
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005758:	d101      	bne.n	800575e <HAL_I2C_EV_IRQHandler+0x66>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <HAL_I2C_EV_IRQHandler+0x68>
 800575e:	2300      	movs	r3, #0
 8005760:	2b01      	cmp	r3, #1
 8005762:	f000 8132 	beq.w	80059ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_I2C_EV_IRQHandler+0x92>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	0a5b      	lsrs	r3, r3, #9
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 ffd6 	bl	800772e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fd83 	bl	800628e <I2C_Master_SB>
 8005788:	e092      	b.n	80058b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_I2C_EV_IRQHandler+0xb2>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	0a5b      	lsrs	r3, r3, #9
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fdf9 	bl	800639a <I2C_Master_ADD10>
 80057a8:	e082      	b.n	80058b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_I2C_EV_IRQHandler+0xd2>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	0a5b      	lsrs	r3, r3, #9
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fe13 	bl	80063ee <I2C_Master_ADDR>
 80057c8:	e072      	b.n	80058b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d03b      	beq.n	800584e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e4:	f000 80f3 	beq.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	09db      	lsrs	r3, r3, #7
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00f      	beq.n	8005814 <HAL_I2C_EV_IRQHandler+0x11c>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	0a9b      	lsrs	r3, r3, #10
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d009      	beq.n	8005814 <HAL_I2C_EV_IRQHandler+0x11c>
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9f3 	bl	8005bf8 <I2C_MasterTransmit_TXE>
 8005812:	e04d      	b.n	80058b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80d6 	beq.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	0a5b      	lsrs	r3, r3, #9
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 80cf 	beq.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	2b21      	cmp	r3, #33	; 0x21
 8005834:	d103      	bne.n	800583e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa7a 	bl	8005d30 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800583c:	e0c7      	b.n	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	f040 80c4 	bne.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fae8 	bl	8005e1c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800584c:	e0bf      	b.n	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585c:	f000 80b7 	beq.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00f      	beq.n	800588c <HAL_I2C_EV_IRQHandler+0x194>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	0a9b      	lsrs	r3, r3, #10
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <HAL_I2C_EV_IRQHandler+0x194>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fb5d 	bl	8005f44 <I2C_MasterReceive_RXNE>
 800588a:	e011      	b.n	80058b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 809a 	beq.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	0a5b      	lsrs	r3, r3, #9
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8093 	beq.w	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fc06 	bl	80060ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058ae:	e08e      	b.n	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80058b0:	e08d      	b.n	80059ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e007      	b.n	80058d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d012      	beq.n	8005906 <HAL_I2C_EV_IRQHandler+0x20e>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	0a5b      	lsrs	r3, r3, #9
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 ffc4 	bl	800688c <I2C_Slave_ADDR>
 8005904:	e066      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x22e>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	0a5b      	lsrs	r3, r3, #9
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fffe 	bl	8006920 <I2C_Slave_STOPF>
 8005924:	e056      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	2b21      	cmp	r3, #33	; 0x21
 800592a:	d002      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x23a>
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	2b29      	cmp	r3, #41	; 0x29
 8005930:	d125      	bne.n	800597e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	09db      	lsrs	r3, r3, #7
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00f      	beq.n	800595e <HAL_I2C_EV_IRQHandler+0x266>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	0a9b      	lsrs	r3, r3, #10
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_I2C_EV_IRQHandler+0x266>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	089b      	lsrs	r3, r3, #2
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 feda 	bl	8006710 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800595c:	e039      	b.n	80059d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	089b      	lsrs	r3, r3, #2
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d033      	beq.n	80059d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	0a5b      	lsrs	r3, r3, #9
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02d      	beq.n	80059d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 ff07 	bl	800678a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800597c:	e029      	b.n	80059d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	099b      	lsrs	r3, r3, #6
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00f      	beq.n	80059aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	0a9b      	lsrs	r3, r3, #10
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 ff12 	bl	80067cc <I2C_SlaveReceive_RXNE>
 80059a8:	e014      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	0a5b      	lsrs	r3, r3, #9
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 ff40 	bl	8006848 <I2C_SlaveReceive_BTF>
 80059c8:	e004      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80059ca:	bf00      	nop
 80059cc:	e002      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	0a1b      	lsrs	r3, r3, #8
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00e      	beq.n	8005a28 <HAL_I2C_ER_IRQHandler+0x4e>
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a26:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <HAL_I2C_ER_IRQHandler+0x78>
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	f043 0302 	orr.w	r3, r3, #2
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005a50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	0a9b      	lsrs	r3, r3, #10
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d03f      	beq.n	8005ade <HAL_I2C_ER_IRQHandler+0x104>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d039      	beq.n	8005ade <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005a6a:	7efb      	ldrb	r3, [r7, #27]
 8005a6c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a84:	7ebb      	ldrb	r3, [r7, #26]
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d112      	bne.n	8005ab0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10f      	bne.n	8005ab0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	2b21      	cmp	r3, #33	; 0x21
 8005a94:	d008      	beq.n	8005aa8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a96:	7cfb      	ldrb	r3, [r7, #19]
 8005a98:	2b29      	cmp	r3, #41	; 0x29
 8005a9a:	d005      	beq.n	8005aa8 <HAL_I2C_ER_IRQHandler+0xce>
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b28      	cmp	r3, #40	; 0x28
 8005aa0:	d106      	bne.n	8005ab0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b21      	cmp	r3, #33	; 0x21
 8005aa6:	d103      	bne.n	8005ab0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f869 	bl	8006b80 <I2C_Slave_AF>
 8005aae:	e016      	b.n	8005ade <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	f043 0304 	orr.w	r3, r3, #4
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ac2:	7efb      	ldrb	r3, [r7, #27]
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d002      	beq.n	8005ace <HAL_I2C_ER_IRQHandler+0xf4>
 8005ac8:	7efb      	ldrb	r3, [r7, #27]
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d107      	bne.n	8005ade <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005adc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	0adb      	lsrs	r3, r3, #11
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <HAL_I2C_ER_IRQHandler+0x12e>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	0a1b      	lsrs	r3, r3, #8
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005b06:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 f8a0 	bl	8006c60 <I2C_ITError>
  }
}
 8005b20:	bf00      	nop
 8005b22:	3728      	adds	r7, #40	; 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
 8005b84:	4613      	mov	r3, r2
 8005b86:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d150      	bne.n	8005cc0 <I2C_MasterTransmit_TXE+0xc8>
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	2b21      	cmp	r3, #33	; 0x21
 8005c22:	d14d      	bne.n	8005cc0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d01d      	beq.n	8005c66 <I2C_MasterTransmit_TXE+0x6e>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d01a      	beq.n	8005c66 <I2C_MasterTransmit_TXE+0x6e>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c36:	d016      	beq.n	8005c66 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c46:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2211      	movs	r2, #17
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff ff62 	bl	8005b28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c64:	e060      	b.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c74:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c84:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d107      	bne.n	8005cb0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff7d 	bl	8005ba8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cae:	e03b      	b.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ff35 	bl	8005b28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cbe:	e033      	b.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b21      	cmp	r3, #33	; 0x21
 8005cc4:	d005      	beq.n	8005cd2 <I2C_MasterTransmit_TXE+0xda>
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d12d      	bne.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b22      	cmp	r3, #34	; 0x22
 8005cd0:	d12a      	bne.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d108      	bne.n	8005cee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005cec:	e01c      	b.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d103      	bne.n	8005d02 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f88e 	bl	8005e1c <I2C_MemoryTransmit_TXE_BTF>
}
 8005d00:	e012      	b.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d26:	e7ff      	b.n	8005d28 <I2C_MasterTransmit_TXE+0x130>
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b21      	cmp	r3, #33	; 0x21
 8005d48:	d164      	bne.n	8005e14 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d012      	beq.n	8005d7a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d78:	e04c      	b.n	8005e14 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d01d      	beq.n	8005dbc <I2C_MasterTransmit_BTF+0x8c>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d01a      	beq.n	8005dbc <I2C_MasterTransmit_BTF+0x8c>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d8c:	d016      	beq.n	8005dbc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d9c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2211      	movs	r2, #17
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff feb7 	bl	8005b28 <HAL_I2C_MasterTxCpltCallback>
}
 8005dba:	e02b      	b.n	8005e14 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dda:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d107      	bne.n	8005e06 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fed2 	bl	8005ba8 <HAL_I2C_MemTxCpltCallback>
}
 8005e04:	e006      	b.n	8005e14 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff fe8a 	bl	8005b28 <HAL_I2C_MasterTxCpltCallback>
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11d      	bne.n	8005e70 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10b      	bne.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e52:	e073      	b.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	121b      	asrs	r3, r3, #8
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e6e:	e065      	b.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d10b      	bne.n	8005e90 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e8e:	e055      	b.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d151      	bne.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b22      	cmp	r3, #34	; 0x22
 8005e9c:	d10d      	bne.n	8005eba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005eb8:	e040      	b.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b21      	cmp	r3, #33	; 0x21
 8005ec8:	d112      	bne.n	8005ef0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eee:	e025      	b.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d120      	bne.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b21      	cmp	r3, #33	; 0x21
 8005efe:	d11d      	bne.n	8005f3c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fe36 	bl	8005ba8 <HAL_I2C_MemTxCpltCallback>
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b22      	cmp	r3, #34	; 0x22
 8005f56:	f040 80ac 	bne.w	80060b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d921      	bls.n	8005fac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	f040 808c 	bne.w	80060b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005faa:	e082      	b.n	80060b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d075      	beq.n	80060a0 <I2C_MasterReceive_RXNE+0x15c>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d002      	beq.n	8005fc0 <I2C_MasterReceive_RXNE+0x7c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d16f      	bne.n	80060a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 fafd 	bl	80075c0 <I2C_WaitOnSTOPRequestThroughIT>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d142      	bne.n	8006052 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fda:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d10a      	bne.n	800603c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fdc1 	bl	8005bbc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800603a:	e03a      	b.n	80060b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2212      	movs	r2, #18
 8006048:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fd76 	bl	8005b3c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006050:	e02f      	b.n	80060b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006060:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fd99 	bl	8005bd0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800609e:	e008      	b.n	80060b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ae:	605a      	str	r2, [r3, #4]
}
 80060b0:	e7ff      	b.n	80060b2 <I2C_MasterReceive_RXNE+0x16e>
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d11b      	bne.n	800610a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006108:	e0bd      	b.n	8006286 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b03      	cmp	r3, #3
 8006112:	d129      	bne.n	8006168 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006122:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b04      	cmp	r3, #4
 8006128:	d00a      	beq.n	8006140 <I2C_MasterReceive_BTF+0x86>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d007      	beq.n	8006140 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006166:	e08e      	b.n	8006286 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d176      	bne.n	8006260 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d002      	beq.n	800617e <I2C_MasterReceive_BTF+0xc4>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b10      	cmp	r3, #16
 800617c:	d108      	bne.n	8006190 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e019      	b.n	80061c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d002      	beq.n	800619c <I2C_MasterReceive_BTF+0xe2>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d108      	bne.n	80061ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	e00a      	b.n	80061c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d007      	beq.n	80061c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800621e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d10a      	bne.n	800624a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fcba 	bl	8005bbc <HAL_I2C_MemRxCpltCallback>
}
 8006248:	e01d      	b.n	8006286 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2212      	movs	r2, #18
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff fc6f 	bl	8005b3c <HAL_I2C_MasterRxCpltCallback>
}
 800625e:	e012      	b.n	8006286 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d117      	bne.n	80062d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80062bc:	e067      	b.n	800638e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	611a      	str	r2, [r3, #16]
}
 80062d0:	e05d      	b.n	800638e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062da:	d133      	bne.n	8006344 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b21      	cmp	r3, #33	; 0x21
 80062e6:	d109      	bne.n	80062fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062f8:	611a      	str	r2, [r3, #16]
 80062fa:	e008      	b.n	800630e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <I2C_Master_SB+0x92>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d108      	bne.n	8006332 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d032      	beq.n	800638e <I2C_Master_SB+0x100>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d02d      	beq.n	800638e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006340:	605a      	str	r2, [r3, #4]
}
 8006342:	e024      	b.n	800638e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10e      	bne.n	800636a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	b29b      	uxth	r3, r3
 8006352:	11db      	asrs	r3, r3, #7
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 0306 	and.w	r3, r3, #6
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f063 030f 	orn	r3, r3, #15
 8006360:	b2da      	uxtb	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]
}
 8006368:	e011      	b.n	800638e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	2b01      	cmp	r3, #1
 8006370:	d10d      	bne.n	800638e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	b29b      	uxth	r3, r3
 8006378:	11db      	asrs	r3, r3, #7
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0306 	and.w	r3, r3, #6
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f063 030e 	orn	r3, r3, #14
 8006386:	b2da      	uxtb	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	611a      	str	r2, [r3, #16]
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <I2C_Master_ADD10+0x26>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d108      	bne.n	80063d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00c      	beq.n	80063e2 <I2C_Master_ADD10+0x48>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e0:	605a      	str	r2, [r3, #4]
  }
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b091      	sub	sp, #68	; 0x44
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b22      	cmp	r3, #34	; 0x22
 8006416:	f040 8169 	bne.w	80066ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10f      	bne.n	8006442 <I2C_Master_ADDR+0x54>
 8006422:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d10b      	bne.n	8006442 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642a:	2300      	movs	r3, #0
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	633b      	str	r3, [r7, #48]	; 0x30
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	633b      	str	r3, [r7, #48]	; 0x30
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	e160      	b.n	8006704 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11d      	bne.n	8006486 <I2C_Master_ADDR+0x98>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006452:	d118      	bne.n	8006486 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006454:	2300      	movs	r3, #0
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006478:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	651a      	str	r2, [r3, #80]	; 0x50
 8006484:	e13e      	b.n	8006704 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d113      	bne.n	80064b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006490:	2300      	movs	r3, #0
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e115      	b.n	80066e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b01      	cmp	r3, #1
 80064c0:	f040 808a 	bne.w	80065d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064ca:	d137      	bne.n	800653c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ea:	d113      	bne.n	8006514 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fc:	2300      	movs	r3, #0
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	e0e7      	b.n	80066e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006514:	2300      	movs	r3, #0
 8006516:	623b      	str	r3, [r7, #32]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	623b      	str	r3, [r7, #32]
 8006528:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e0d3      	b.n	80066e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	2b08      	cmp	r3, #8
 8006540:	d02e      	beq.n	80065a0 <I2C_Master_ADDR+0x1b2>
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	2b20      	cmp	r3, #32
 8006546:	d02b      	beq.n	80065a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	2b12      	cmp	r3, #18
 800654c:	d102      	bne.n	8006554 <I2C_Master_ADDR+0x166>
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	2b01      	cmp	r3, #1
 8006552:	d125      	bne.n	80065a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	2b04      	cmp	r3, #4
 8006558:	d00e      	beq.n	8006578 <I2C_Master_ADDR+0x18a>
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	2b02      	cmp	r3, #2
 800655e:	d00b      	beq.n	8006578 <I2C_Master_ADDR+0x18a>
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	2b10      	cmp	r3, #16
 8006564:	d008      	beq.n	8006578 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e007      	b.n	8006588 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006586:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	e0a1      	b.n	80066e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e085      	b.n	80066e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d14d      	bne.n	800667e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d016      	beq.n	8006616 <I2C_Master_ADDR+0x228>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d013      	beq.n	8006616 <I2C_Master_ADDR+0x228>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d010      	beq.n	8006616 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006602:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e007      	b.n	8006626 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006624:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006634:	d117      	bne.n	8006666 <I2C_Master_ADDR+0x278>
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800663c:	d00b      	beq.n	8006656 <I2C_Master_ADDR+0x268>
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	2b01      	cmp	r3, #1
 8006642:	d008      	beq.n	8006656 <I2C_Master_ADDR+0x268>
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	2b08      	cmp	r3, #8
 8006648:	d005      	beq.n	8006656 <I2C_Master_ADDR+0x268>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2b10      	cmp	r3, #16
 800664e:	d002      	beq.n	8006656 <I2C_Master_ADDR+0x268>
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	2b20      	cmp	r3, #32
 8006654:	d107      	bne.n	8006666 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006664:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e032      	b.n	80066e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800668c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669c:	d117      	bne.n	80066ce <I2C_Master_ADDR+0x2e0>
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066a4:	d00b      	beq.n	80066be <I2C_Master_ADDR+0x2d0>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d008      	beq.n	80066be <I2C_Master_ADDR+0x2d0>
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d005      	beq.n	80066be <I2C_Master_ADDR+0x2d0>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d002      	beq.n	80066be <I2C_Master_ADDR+0x2d0>
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d107      	bne.n	80066ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80066ea:	e00b      	b.n	8006704 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	e7ff      	b.n	8006704 <I2C_Master_ADDR+0x316>
 8006704:	bf00      	nop
 8006706:	3744      	adds	r7, #68	; 0x44
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02b      	beq.n	8006782 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d114      	bne.n	8006782 <I2C_SlaveTransmit_TXE+0x72>
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	2b29      	cmp	r3, #41	; 0x29
 800675c:	d111      	bne.n	8006782 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2221      	movs	r2, #33	; 0x21
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2228      	movs	r2, #40	; 0x28
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff f9e7 	bl	8005b50 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d011      	beq.n	80067c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d02c      	beq.n	8006840 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d114      	bne.n	8006840 <I2C_SlaveReceive_RXNE+0x74>
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b2a      	cmp	r3, #42	; 0x2a
 800681a:	d111      	bne.n	8006840 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2222      	movs	r2, #34	; 0x22
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2228      	movs	r2, #40	; 0x28
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff f992 	bl	8005b64 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d012      	beq.n	8006880 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068a6:	2b28      	cmp	r3, #40	; 0x28
 80068a8:	d127      	bne.n	80068fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	089b      	lsrs	r3, r3, #2
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80068c6:	2301      	movs	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	09db      	lsrs	r3, r3, #7
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	81bb      	strh	r3, [r7, #12]
 80068dc:	e002      	b.n	80068e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80068ec:	89ba      	ldrh	r2, [r7, #12]
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff f940 	bl	8005b78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068f8:	e00e      	b.n	8006918 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800693e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006940:	2300      	movs	r3, #0
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697c:	d172      	bne.n	8006a64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b22      	cmp	r3, #34	; 0x22
 8006982:	d002      	beq.n	800698a <I2C_Slave_STOPF+0x6a>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b2a      	cmp	r3, #42	; 0x2a
 8006988:	d135      	bne.n	80069f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b29a      	uxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd ff5e 	bl	8004884 <HAL_DMA_GetState>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d049      	beq.n	8006a62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	4a69      	ldr	r2, [pc, #420]	; (8006b78 <I2C_Slave_STOPF+0x258>)
 80069d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fd fda6 	bl	800452c <HAL_DMA_Abort_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d03d      	beq.n	8006a62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069f4:	e035      	b.n	8006a62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fd ff28 	bl	8004884 <HAL_DMA_GetState>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d014      	beq.n	8006a64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3e:	4a4e      	ldr	r2, [pc, #312]	; (8006b78 <I2C_Slave_STOPF+0x258>)
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fd fd70 	bl	800452c <HAL_DMA_Abort_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	e000      	b.n	8006a64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d03e      	beq.n	8006aec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d112      	bne.n	8006aa2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d112      	bne.n	8006ad6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	f043 0204 	orr.w	r2, r3, #4
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8b3 	bl	8006c60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006afa:	e039      	b.n	8006b70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b2a      	cmp	r3, #42	; 0x2a
 8006b00:	d109      	bne.n	8006b16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2228      	movs	r2, #40	; 0x28
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff f827 	bl	8005b64 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b28      	cmp	r3, #40	; 0x28
 8006b20:	d111      	bne.n	8006b46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <I2C_Slave_STOPF+0x25c>)
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff f828 	bl	8005b94 <HAL_I2C_ListenCpltCallback>
}
 8006b44:	e014      	b.n	8006b70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	2b22      	cmp	r3, #34	; 0x22
 8006b4c:	d002      	beq.n	8006b54 <I2C_Slave_STOPF+0x234>
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	2b22      	cmp	r3, #34	; 0x22
 8006b52:	d10d      	bne.n	8006b70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fe fffa 	bl	8005b64 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	080071c1 	.word	0x080071c1
 8006b7c:	ffff0000 	.word	0xffff0000

08006b80 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d002      	beq.n	8006ba2 <I2C_Slave_AF+0x22>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d129      	bne.n	8006bf6 <I2C_Slave_AF+0x76>
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b28      	cmp	r3, #40	; 0x28
 8006ba6:	d126      	bne.n	8006bf6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <I2C_Slave_AF+0xdc>)
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bbc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bc6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fe ffd0 	bl	8005b94 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006bf4:	e02e      	b.n	8006c54 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b21      	cmp	r3, #33	; 0x21
 8006bfa:	d126      	bne.n	8006c4a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a17      	ldr	r2, [pc, #92]	; (8006c5c <I2C_Slave_AF+0xdc>)
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2221      	movs	r2, #33	; 0x21
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c26:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c30:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c40:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fe ff84 	bl	8005b50 <HAL_I2C_SlaveTxCpltCallback>
}
 8006c48:	e004      	b.n	8006c54 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c52:	615a      	str	r2, [r3, #20]
}
 8006c54:	bf00      	nop
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	ffff0000 	.word	0xffff0000

08006c60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d002      	beq.n	8006c84 <I2C_ITError+0x24>
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d10a      	bne.n	8006c9a <I2C_ITError+0x3a>
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b22      	cmp	r3, #34	; 0x22
 8006c88:	d107      	bne.n	8006c9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ca0:	2b28      	cmp	r3, #40	; 0x28
 8006ca2:	d107      	bne.n	8006cb4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2228      	movs	r2, #40	; 0x28
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cb2:	e015      	b.n	8006ce0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc2:	d00a      	beq.n	8006cda <I2C_ITError+0x7a>
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b60      	cmp	r3, #96	; 0x60
 8006cc8:	d007      	beq.n	8006cda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cee:	d162      	bne.n	8006db6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d020      	beq.n	8006d50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	4a6a      	ldr	r2, [pc, #424]	; (8006ebc <I2C_ITError+0x25c>)
 8006d14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fd fc06 	bl	800452c <HAL_DMA_Abort_IT>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8089 	beq.w	8006e3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4798      	blx	r3
 8006d4e:	e074      	b.n	8006e3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	4a59      	ldr	r2, [pc, #356]	; (8006ebc <I2C_ITError+0x25c>)
 8006d56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fd fbe5 	bl	800452c <HAL_DMA_Abort_IT>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d068      	beq.n	8006e3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d10b      	bne.n	8006d8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	e041      	b.n	8006e3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b60      	cmp	r3, #96	; 0x60
 8006dc0:	d125      	bne.n	8006e0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d10b      	bne.n	8006df6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0201 	bic.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe feec 	bl	8005be4 <HAL_I2C_AbortCpltCallback>
 8006e0c:	e015      	b.n	8006e3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d10b      	bne.n	8006e34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fe fecb 	bl	8005bd0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10e      	bne.n	8006e68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d113      	bne.n	8006eb4 <I2C_ITError+0x254>
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b28      	cmp	r3, #40	; 0x28
 8006e90:	d110      	bne.n	8006eb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a0a      	ldr	r2, [pc, #40]	; (8006ec0 <I2C_ITError+0x260>)
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fe fe70 	bl	8005b94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	080071c1 	.word	0x080071c1
 8006ec0:	ffff0000 	.word	0xffff0000

08006ec4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	817b      	strh	r3, [r7, #10]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	813b      	strh	r3, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 fa08 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00d      	beq.n	8006f22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f14:	d103      	bne.n	8006f1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e05f      	b.n	8006fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	6a3a      	ldr	r2, [r7, #32]
 8006f36:	492d      	ldr	r1, [pc, #180]	; (8006fec <I2C_RequestMemoryWrite+0x128>)
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fa40 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e04c      	b.n	8006fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f60:	6a39      	ldr	r1, [r7, #32]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 faaa 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00d      	beq.n	8006f8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d107      	bne.n	8006f86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e02b      	b.n	8006fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d105      	bne.n	8006f9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f90:	893b      	ldrh	r3, [r7, #8]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	611a      	str	r2, [r3, #16]
 8006f9a:	e021      	b.n	8006fe0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f9c:	893b      	ldrh	r3, [r7, #8]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fac:	6a39      	ldr	r1, [r7, #32]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fa84 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00d      	beq.n	8006fd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d107      	bne.n	8006fd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e005      	b.n	8006fe2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fd6:	893b      	ldrh	r3, [r7, #8]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	00010002 	.word	0x00010002

08006ff0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	817b      	strh	r3, [r7, #10]
 8007002:	460b      	mov	r3, r1
 8007004:	813b      	strh	r3, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007018:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	2200      	movs	r2, #0
 8007032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f96a 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007050:	d103      	bne.n	800705a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e0aa      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800706c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	4952      	ldr	r1, [pc, #328]	; (80071bc <I2C_RequestMemoryRead+0x1cc>)
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f9a2 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e097      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007084:	2300      	movs	r3, #0
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800709a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709c:	6a39      	ldr	r1, [r7, #32]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fa0c 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d107      	bne.n	80070c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e076      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d105      	bne.n	80070d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]
 80070d6:	e021      	b.n	800711c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070d8:	893b      	ldrh	r3, [r7, #8]
 80070da:	0a1b      	lsrs	r3, r3, #8
 80070dc:	b29b      	uxth	r3, r3
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e8:	6a39      	ldr	r1, [r7, #32]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f9e6 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00d      	beq.n	8007112 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d107      	bne.n	800710e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e050      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007112:	893b      	ldrh	r3, [r7, #8]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800711c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711e:	6a39      	ldr	r1, [r7, #32]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f9cb 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	2b04      	cmp	r3, #4
 8007132:	d107      	bne.n	8007144 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007142:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e035      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007156:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	2200      	movs	r2, #0
 8007160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f8d3 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717e:	d103      	bne.n	8007188 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e013      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800718c:	897b      	ldrh	r3, [r7, #10]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	4906      	ldr	r1, [pc, #24]	; (80071bc <I2C_RequestMemoryRead+0x1cc>)
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f90b 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	00010002 	.word	0x00010002

080071c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80071da:	4b4b      	ldr	r3, [pc, #300]	; (8007308 <I2C_DMAAbort+0x148>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	4a4a      	ldr	r2, [pc, #296]	; (800730c <I2C_DMAAbort+0x14c>)
 80071e2:	fba2 2303 	umull	r2, r3, r2, r3
 80071e6:	0a1a      	lsrs	r2, r3, #8
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	00da      	lsls	r2, r3, #3
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007206:	e00a      	b.n	800721e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3b01      	subs	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721c:	d0ea      	beq.n	80071f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	2200      	movs	r2, #0
 800722c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	2200      	movs	r2, #0
 800723c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2200      	movs	r2, #0
 8007262:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	2200      	movs	r2, #0
 8007272:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0201 	bic.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b60      	cmp	r3, #96	; 0x60
 800728e:	d10e      	bne.n	80072ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072a6:	6978      	ldr	r0, [r7, #20]
 80072a8:	f7fe fc9c 	bl	8005be4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072ac:	e027      	b.n	80072fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072ae:	7cfb      	ldrb	r3, [r7, #19]
 80072b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072b4:	2b28      	cmp	r3, #40	; 0x28
 80072b6:	d117      	bne.n	80072e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2228      	movs	r2, #40	; 0x28
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072e6:	e007      	b.n	80072f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f7fe fc69 	bl	8005bd0 <HAL_I2C_ErrorCallback>
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	2000001c 	.word	0x2000001c
 800730c:	14f8b589 	.word	0x14f8b589

08007310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007320:	e025      	b.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d021      	beq.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fc fe47 	bl	8003fbc <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d116      	bne.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e023      	b.n	80073b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	d10d      	bne.n	8007394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	43da      	mvns	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	e00c      	b.n	80073ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	43da      	mvns	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4013      	ands	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf0c      	ite	eq
 80073a6:	2301      	moveq	r3, #1
 80073a8:	2300      	movne	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d0b6      	beq.n	8007322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073cc:	e051      	b.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d123      	bne.n	8007426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f043 0204 	orr.w	r2, r3, #4
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e046      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d021      	beq.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800742e:	f7fc fdc5 	bl	8003fbc <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d116      	bne.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f043 0220 	orr.w	r2, r3, #32
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e020      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d10c      	bne.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	43da      	mvns	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	bf14      	ite	ne
 800748e:	2301      	movne	r3, #1
 8007490:	2300      	moveq	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	e00b      	b.n	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	43da      	mvns	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf14      	ite	ne
 80074a8:	2301      	movne	r3, #1
 80074aa:	2300      	moveq	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d18d      	bne.n	80073ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074c8:	e02d      	b.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f900 	bl	80076d0 <I2C_IsAcknowledgeFailed>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e02d      	b.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d021      	beq.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e2:	f7fc fd6b 	bl	8003fbc <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d116      	bne.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e007      	b.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007530:	2b80      	cmp	r3, #128	; 0x80
 8007532:	d1ca      	bne.n	80074ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800754a:	e02d      	b.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f8bf 	bl	80076d0 <I2C_IsAcknowledgeFailed>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e02d      	b.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007562:	d021      	beq.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007564:	f7fc fd2a 	bl	8003fbc <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d116      	bne.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e007      	b.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d1ca      	bne.n	800754c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80075cc:	4b13      	ldr	r3, [pc, #76]	; (800761c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	08db      	lsrs	r3, r3, #3
 80075d2:	4a13      	ldr	r2, [pc, #76]	; (8007620 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80075d4:	fba2 2303 	umull	r2, r3, r2, r3
 80075d8:	0a1a      	lsrs	r2, r3, #8
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e008      	b.n	8007610 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760c:	d0e9      	beq.n	80075e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000001c 	.word	0x2000001c
 8007620:	14f8b589 	.word	0x14f8b589

08007624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007630:	e042      	b.n	80076b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b10      	cmp	r3, #16
 800763e:	d119      	bne.n	8007674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0210 	mvn.w	r2, #16
 8007648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e029      	b.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007674:	f7fc fca2 	bl	8003fbc <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d302      	bcc.n	800768a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d116      	bne.n	80076b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	f043 0220 	orr.w	r2, r3, #32
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e007      	b.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d1b5      	bne.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e6:	d11b      	bne.n	8007720 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	f043 0204 	orr.w	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800773e:	d103      	bne.n	8007748 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007746:	e007      	b.n	8007758 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007750:	d102      	bne.n	8007758 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2208      	movs	r2, #8
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e267      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d075      	beq.n	800786e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007782:	4b88      	ldr	r3, [pc, #544]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d00c      	beq.n	80077a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778e:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007796:	2b08      	cmp	r3, #8
 8007798:	d112      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779a:	4b82      	ldr	r3, [pc, #520]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a8:	4b7e      	ldr	r3, [pc, #504]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05b      	beq.n	800786c <HAL_RCC_OscConfig+0x108>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d157      	bne.n	800786c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e242      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c8:	d106      	bne.n	80077d8 <HAL_RCC_OscConfig+0x74>
 80077ca:	4b76      	ldr	r3, [pc, #472]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a75      	ldr	r2, [pc, #468]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x98>
 80077e2:	4b70      	ldr	r3, [pc, #448]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a6f      	ldr	r2, [pc, #444]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4b6d      	ldr	r3, [pc, #436]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6c      	ldr	r2, [pc, #432]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077fc:	4b69      	ldr	r3, [pc, #420]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a68      	ldr	r2, [pc, #416]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	4b66      	ldr	r3, [pc, #408]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a65      	ldr	r2, [pc, #404]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781c:	f7fc fbce 	bl	8003fbc <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007824:	f7fc fbca 	bl	8003fbc <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e207      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007836:	4b5b      	ldr	r3, [pc, #364]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCC_OscConfig+0xc0>
 8007842:	e014      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007844:	f7fc fbba 	bl	8003fbc <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800784c:	f7fc fbb6 	bl	8003fbc <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1f3      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800785e:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0xe8>
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d063      	beq.n	8007942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787a:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007886:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800788e:	2b08      	cmp	r3, #8
 8007890:	d11c      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007892:	4b44      	ldr	r3, [pc, #272]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d116      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d001      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e1c7      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b6:	4b3b      	ldr	r3, [pc, #236]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4937      	ldr	r1, [pc, #220]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	e03a      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d4:	4b34      	ldr	r3, [pc, #208]	; (80079a8 <HAL_RCC_OscConfig+0x244>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078da:	f7fc fb6f 	bl	8003fbc <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fc fb6b 	bl	8003fbc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1a8      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4925      	ldr	r1, [pc, #148]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]
 8007914:	e015      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCC_OscConfig+0x244>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fc fb4e 	bl	8003fbc <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007924:	f7fc fb4a 	bl	8003fbc <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e187      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007936:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d036      	beq.n	80079bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_RCC_OscConfig+0x248>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7fc fb2e 	bl	8003fbc <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007964:	f7fc fb2a 	bl	8003fbc <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e167      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x200>
 8007982:	e01b      	b.n	80079bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <HAL_RCC_OscConfig+0x248>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798a:	f7fc fb17 	bl	8003fbc <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	e00e      	b.n	80079b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007992:	f7fc fb13 	bl	8003fbc <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d907      	bls.n	80079b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e150      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
 80079a4:	40023800 	.word	0x40023800
 80079a8:	42470000 	.word	0x42470000
 80079ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b0:	4b88      	ldr	r3, [pc, #544]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1ea      	bne.n	8007992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8097 	beq.w	8007af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ce:	4b81      	ldr	r3, [pc, #516]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10f      	bne.n	80079fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	4b7d      	ldr	r3, [pc, #500]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	4a7c      	ldr	r2, [pc, #496]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ea:	4b7a      	ldr	r3, [pc, #488]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fa:	4b77      	ldr	r3, [pc, #476]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d118      	bne.n	8007a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a06:	4b74      	ldr	r3, [pc, #464]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a73      	ldr	r2, [pc, #460]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a12:	f7fc fad3 	bl	8003fbc <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1a:	f7fc facf 	bl	8003fbc <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e10c      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a2c:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f0      	beq.n	8007a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCC_OscConfig+0x2ea>
 8007a40:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a63      	ldr	r2, [pc, #396]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4c:	e01c      	b.n	8007a88 <HAL_RCC_OscConfig+0x324>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCC_OscConfig+0x30c>
 8007a56:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	4a5e      	ldr	r2, [pc, #376]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	f043 0304 	orr.w	r3, r3, #4
 8007a60:	6713      	str	r3, [r2, #112]	; 0x70
 8007a62:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a5b      	ldr	r2, [pc, #364]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	e00b      	b.n	8007a88 <HAL_RCC_OscConfig+0x324>
 8007a70:	4b58      	ldr	r3, [pc, #352]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	4a57      	ldr	r2, [pc, #348]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	4a54      	ldr	r2, [pc, #336]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a82:	f023 0304 	bic.w	r3, r3, #4
 8007a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d015      	beq.n	8007abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a90:	f7fc fa94 	bl	8003fbc <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a96:	e00a      	b.n	8007aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a98:	f7fc fa90 	bl	8003fbc <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0cb      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aae:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0ee      	beq.n	8007a98 <HAL_RCC_OscConfig+0x334>
 8007aba:	e014      	b.n	8007ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007abc:	f7fc fa7e 	bl	8003fbc <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ac4:	f7fc fa7a 	bl	8003fbc <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e0b5      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ada:	4b3e      	ldr	r3, [pc, #248]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1ee      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d105      	bne.n	8007af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aec:	4b39      	ldr	r3, [pc, #228]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	4a38      	ldr	r2, [pc, #224]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80a1 	beq.w	8007c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b02:	4b34      	ldr	r3, [pc, #208]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d05c      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d141      	bne.n	8007b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b16:	4b31      	ldr	r3, [pc, #196]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1c:	f7fc fa4e 	bl	8003fbc <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b24:	f7fc fa4a 	bl	8003fbc <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e087      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f0      	bne.n	8007b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	491b      	ldr	r1, [pc, #108]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b6c:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b72:	f7fc fa23 	bl	8003fbc <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b7a:	f7fc fa1f 	bl	8003fbc <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e05c      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0f0      	beq.n	8007b7a <HAL_RCC_OscConfig+0x416>
 8007b98:	e054      	b.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba0:	f7fc fa0c 	bl	8003fbc <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba8:	f7fc fa08 	bl	8003fbc <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e045      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f0      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x444>
 8007bc6:	e03d      	b.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d107      	bne.n	8007be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e038      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <HAL_RCC_OscConfig+0x4ec>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d028      	beq.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d121      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d11a      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c10:	4013      	ands	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d111      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d001      	beq.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40023800 	.word	0x40023800

08007c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e0cc      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c68:	4b68      	ldr	r3, [pc, #416]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d90c      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b65      	ldr	r3, [pc, #404]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0b8      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d020      	beq.n	8007cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ca8:	4b59      	ldr	r3, [pc, #356]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	4a58      	ldr	r2, [pc, #352]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ccc:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	494d      	ldr	r1, [pc, #308]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d044      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d119      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e07f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d003      	beq.n	8007d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d107      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d12:	4b3f      	ldr	r3, [pc, #252]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e06f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e067      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d32:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f023 0203 	bic.w	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4934      	ldr	r1, [pc, #208]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d44:	f7fc f93a 	bl	8003fbc <HAL_GetTick>
 8007d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d4c:	f7fc f936 	bl	8003fbc <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e04f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 020c 	and.w	r2, r3, #12
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d1eb      	bne.n	8007d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d74:	4b25      	ldr	r3, [pc, #148]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d20c      	bcs.n	8007d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e032      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007da8:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4916      	ldr	r1, [pc, #88]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dc6:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	490e      	ldr	r1, [pc, #56]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dda:	f000 f821 	bl	8007e20 <HAL_RCC_GetSysClockFreq>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	490a      	ldr	r1, [pc, #40]	; (8007e14 <HAL_RCC_ClockConfig+0x1c0>)
 8007dec:	5ccb      	ldrb	r3, [r1, r3]
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <HAL_RCC_ClockConfig+0x1c4>)
 8007df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <HAL_RCC_ClockConfig+0x1c8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fc f89a 	bl	8003f34 <HAL_InitTick>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40023c00 	.word	0x40023c00
 8007e10:	40023800 	.word	0x40023800
 8007e14:	08015030 	.word	0x08015030
 8007e18:	2000001c 	.word	0x2000001c
 8007e1c:	20000038 	.word	0x20000038

08007e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e24:	b094      	sub	sp, #80	; 0x50
 8007e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e30:	2300      	movs	r3, #0
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e38:	4b79      	ldr	r3, [pc, #484]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 030c 	and.w	r3, r3, #12
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d00d      	beq.n	8007e60 <HAL_RCC_GetSysClockFreq+0x40>
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	f200 80e1 	bhi.w	800800c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq+0x34>
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d003      	beq.n	8007e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e52:	e0db      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e54:	4b73      	ldr	r3, [pc, #460]	; (8008024 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e58:	e0db      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e5a:	4b73      	ldr	r3, [pc, #460]	; (8008028 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e5e:	e0d8      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e60:	4b6f      	ldr	r3, [pc, #444]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e6a:	4b6d      	ldr	r3, [pc, #436]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d063      	beq.n	8007f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e76:	4b6a      	ldr	r3, [pc, #424]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	099b      	lsrs	r3, r3, #6
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e88:	633b      	str	r3, [r7, #48]	; 0x30
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e92:	4622      	mov	r2, r4
 8007e94:	462b      	mov	r3, r5
 8007e96:	f04f 0000 	mov.w	r0, #0
 8007e9a:	f04f 0100 	mov.w	r1, #0
 8007e9e:	0159      	lsls	r1, r3, #5
 8007ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ea4:	0150      	lsls	r0, r2, #5
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4621      	mov	r1, r4
 8007eac:	1a51      	subs	r1, r2, r1
 8007eae:	6139      	str	r1, [r7, #16]
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	018b      	lsls	r3, r1, #6
 8007ec8:	4651      	mov	r1, sl
 8007eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ece:	4651      	mov	r1, sl
 8007ed0:	018a      	lsls	r2, r1, #6
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8007ed8:	4659      	mov	r1, fp
 8007eda:	eb63 0901 	sbc.w	r9, r3, r1
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ef2:	4690      	mov	r8, r2
 8007ef4:	4699      	mov	r9, r3
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	eb18 0303 	adds.w	r3, r8, r3
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	462b      	mov	r3, r5
 8007f00:	eb49 0303 	adc.w	r3, r9, r3
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f12:	4629      	mov	r1, r5
 8007f14:	024b      	lsls	r3, r1, #9
 8007f16:	4621      	mov	r1, r4
 8007f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	024a      	lsls	r2, r1, #9
 8007f20:	4610      	mov	r0, r2
 8007f22:	4619      	mov	r1, r3
 8007f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f26:	2200      	movs	r2, #0
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f30:	f7f8 feb2 	bl	8000c98 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3c:	e058      	b.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f3e:	4b38      	ldr	r3, [pc, #224]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	099b      	lsrs	r3, r3, #6
 8007f44:	2200      	movs	r2, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	4611      	mov	r1, r2
 8007f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f4e:	623b      	str	r3, [r7, #32]
 8007f50:	2300      	movs	r3, #0
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f58:	4642      	mov	r2, r8
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	f04f 0000 	mov.w	r0, #0
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	0159      	lsls	r1, r3, #5
 8007f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f6a:	0150      	lsls	r0, r2, #5
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4641      	mov	r1, r8
 8007f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f76:	4649      	mov	r1, r9
 8007f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	f04f 0300 	mov.w	r3, #0
 8007f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f90:	ebb2 040a 	subs.w	r4, r2, sl
 8007f94:	eb63 050b 	sbc.w	r5, r3, fp
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	00eb      	lsls	r3, r5, #3
 8007fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fa6:	00e2      	lsls	r2, r4, #3
 8007fa8:	4614      	mov	r4, r2
 8007faa:	461d      	mov	r5, r3
 8007fac:	4643      	mov	r3, r8
 8007fae:	18e3      	adds	r3, r4, r3
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	eb45 0303 	adc.w	r3, r5, r3
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	028b      	lsls	r3, r1, #10
 8007fca:	4621      	mov	r1, r4
 8007fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	028a      	lsls	r2, r1, #10
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fda:	2200      	movs	r2, #0
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	61fa      	str	r2, [r7, #28]
 8007fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fe4:	f7f8 fe58 	bl	8000c98 <__aeabi_uldivmod>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4613      	mov	r3, r2
 8007fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008004:	fbb2 f3f3 	udiv	r3, r2, r3
 8008008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800800a:	e002      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <HAL_RCC_GetSysClockFreq+0x204>)
 800800e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008014:	4618      	mov	r0, r3
 8008016:	3750      	adds	r7, #80	; 0x50
 8008018:	46bd      	mov	sp, r7
 800801a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800801e:	bf00      	nop
 8008020:	40023800 	.word	0x40023800
 8008024:	00f42400 	.word	0x00f42400
 8008028:	007a1200 	.word	0x007a1200

0800802c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008030:	4b03      	ldr	r3, [pc, #12]	; (8008040 <HAL_RCC_GetHCLKFreq+0x14>)
 8008032:	681b      	ldr	r3, [r3, #0]
}
 8008034:	4618      	mov	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	2000001c 	.word	0x2000001c

08008044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008048:	f7ff fff0 	bl	800802c <HAL_RCC_GetHCLKFreq>
 800804c:	4602      	mov	r2, r0
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	0a9b      	lsrs	r3, r3, #10
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	4903      	ldr	r1, [pc, #12]	; (8008068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800805a:	5ccb      	ldrb	r3, [r1, r3]
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008060:	4618      	mov	r0, r3
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40023800 	.word	0x40023800
 8008068:	08015040 	.word	0x08015040

0800806c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008070:	f7ff ffdc 	bl	800802c <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0b5b      	lsrs	r3, r3, #13
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4903      	ldr	r1, [pc, #12]	; (8008090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40023800 	.word	0x40023800
 8008090:	08015040 	.word	0x08015040

08008094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e07b      	b.n	800819e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b6:	d009      	beq.n	80080cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	61da      	str	r2, [r3, #28]
 80080be:	e005      	b.n	80080cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa fd04 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008150:	ea42 0103 	orr.w	r1, r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	f003 0104 	and.w	r1, r3, #4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	f003 0210 	and.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800818c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b08c      	sub	sp, #48	; 0x30
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081b4:	2301      	movs	r3, #1
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_SPI_TransmitReceive+0x26>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e18a      	b.n	80084e2 <HAL_SPI_TransmitReceive+0x33c>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d4:	f7fb fef2 	bl	8003fbc <HAL_GetTick>
 80081d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081ea:	887b      	ldrh	r3, [r7, #2]
 80081ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d00f      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x70>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081fc:	d107      	bne.n	800820e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d103      	bne.n	800820e <HAL_SPI_TransmitReceive+0x68>
 8008206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800820a:	2b04      	cmp	r3, #4
 800820c:	d003      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800820e:	2302      	movs	r3, #2
 8008210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008214:	e15b      	b.n	80084ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x82>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x82>
 8008222:	887b      	ldrh	r3, [r7, #2]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800822e:	e14e      	b.n	80084ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b04      	cmp	r3, #4
 800823a:	d003      	beq.n	8008244 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2205      	movs	r2, #5
 8008240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	887a      	ldrh	r2, [r7, #2]
 8008254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	887a      	ldrh	r2, [r7, #2]
 800825a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	887a      	ldrh	r2, [r7, #2]
 8008266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	887a      	ldrh	r2, [r7, #2]
 800826c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	d007      	beq.n	8008298 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a0:	d178      	bne.n	8008394 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <HAL_SPI_TransmitReceive+0x10a>
 80082aa:	8b7b      	ldrh	r3, [r7, #26]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d166      	bne.n	800837e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b4:	881a      	ldrh	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	1c9a      	adds	r2, r3, #2
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d4:	e053      	b.n	800837e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d11b      	bne.n	800831c <HAL_SPI_TransmitReceive+0x176>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d016      	beq.n	800831c <HAL_SPI_TransmitReceive+0x176>
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d113      	bne.n	800831c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	881a      	ldrh	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	1c9a      	adds	r2, r3, #2
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b01      	cmp	r3, #1
 8008328:	d119      	bne.n	800835e <HAL_SPI_TransmitReceive+0x1b8>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d014      	beq.n	800835e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	b292      	uxth	r2, r2
 8008340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	1c9a      	adds	r2, r3, #2
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800835a:	2301      	movs	r3, #1
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800835e:	f7fb fe2d 	bl	8003fbc <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800836a:	429a      	cmp	r2, r3
 800836c:	d807      	bhi.n	800837e <HAL_SPI_TransmitReceive+0x1d8>
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d003      	beq.n	800837e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800837c:	e0a7      	b.n	80084ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1a6      	bne.n	80082d6 <HAL_SPI_TransmitReceive+0x130>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1a1      	bne.n	80082d6 <HAL_SPI_TransmitReceive+0x130>
 8008392:	e07c      	b.n	800848e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_SPI_TransmitReceive+0x1fc>
 800839c:	8b7b      	ldrh	r3, [r7, #26]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d16b      	bne.n	800847a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	330c      	adds	r3, #12
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c8:	e057      	b.n	800847a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d11c      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x26c>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d017      	beq.n	8008412 <HAL_SPI_TransmitReceive+0x26c>
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d114      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d119      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x2ae>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d014      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008450:	2301      	movs	r3, #1
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008454:	f7fb fdb2 	bl	8003fbc <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008460:	429a      	cmp	r2, r3
 8008462:	d803      	bhi.n	800846c <HAL_SPI_TransmitReceive+0x2c6>
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d102      	bne.n	8008472 <HAL_SPI_TransmitReceive+0x2cc>
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	2b00      	cmp	r3, #0
 8008470:	d103      	bne.n	800847a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008478:	e029      	b.n	80084ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847e:	b29b      	uxth	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1a2      	bne.n	80083ca <HAL_SPI_TransmitReceive+0x224>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d19d      	bne.n	80083ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800848e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f8b2 	bl	80085fc <SPI_EndRxTxTransaction>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d006      	beq.n	80084ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084aa:	e010      	b.n	80084ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	e000      	b.n	80084ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3730      	adds	r7, #48	; 0x30
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4613      	mov	r3, r2
 80084fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084fc:	f7fb fd5e 	bl	8003fbc <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4413      	add	r3, r2
 800850a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800850c:	f7fb fd56 	bl	8003fbc <HAL_GetTick>
 8008510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008512:	4b39      	ldr	r3, [pc, #228]	; (80085f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	015b      	lsls	r3, r3, #5
 8008518:	0d1b      	lsrs	r3, r3, #20
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	fb02 f303 	mul.w	r3, r2, r3
 8008520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008522:	e054      	b.n	80085ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d050      	beq.n	80085ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800852c:	f7fb fd46 	bl	8003fbc <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	429a      	cmp	r2, r3
 800853a:	d902      	bls.n	8008542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d13d      	bne.n	80085be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800855a:	d111      	bne.n	8008580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008564:	d004      	beq.n	8008570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856e:	d107      	bne.n	8008580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800857e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008588:	d10f      	bne.n	80085aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e017      	b.n	80085ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4013      	ands	r3, r2
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	429a      	cmp	r2, r3
 80085dc:	bf0c      	ite	eq
 80085de:	2301      	moveq	r3, #1
 80085e0:	2300      	movne	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d19b      	bne.n	8008524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	2000001c 	.word	0x2000001c

080085fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af02      	add	r7, sp, #8
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008608:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <SPI_EndRxTxTransaction+0x7c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1b      	ldr	r2, [pc, #108]	; (800867c <SPI_EndRxTxTransaction+0x80>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	0d5b      	lsrs	r3, r3, #21
 8008614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008626:	d112      	bne.n	800864e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff ff5a 	bl	80084ec <SPI_WaitFlagStateUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d016      	beq.n	800866c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008642:	f043 0220 	orr.w	r2, r3, #32
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e00f      	b.n	800866e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3b01      	subs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008664:	2b80      	cmp	r3, #128	; 0x80
 8008666:	d0f2      	beq.n	800864e <SPI_EndRxTxTransaction+0x52>
 8008668:	e000      	b.n	800866c <SPI_EndRxTxTransaction+0x70>
        break;
 800866a:	bf00      	nop
  }

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	2000001c 	.word	0x2000001c
 800867c:	165e9f81 	.word	0x165e9f81

08008680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e041      	b.n	8008716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7fa fab4 	bl	8002c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f000 fb24 	bl	8008d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b01      	cmp	r3, #1
 8008732:	d001      	beq.n	8008738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e044      	b.n	80087c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d018      	beq.n	800878c <HAL_TIM_Base_Start_IT+0x6c>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d013      	beq.n	800878c <HAL_TIM_Base_Start_IT+0x6c>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00e      	beq.n	800878c <HAL_TIM_Base_Start_IT+0x6c>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d009      	beq.n	800878c <HAL_TIM_Base_Start_IT+0x6c>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a17      	ldr	r2, [pc, #92]	; (80087dc <HAL_TIM_Base_Start_IT+0xbc>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d004      	beq.n	800878c <HAL_TIM_Base_Start_IT+0x6c>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d111      	bne.n	80087b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b06      	cmp	r3, #6
 800879c:	d010      	beq.n	80087c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ae:	e007      	b.n	80087c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	40000c00 	.word	0x40000c00
 80087e0:	40014000 	.word	0x40014000

080087e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0201 	bic.w	r2, r2, #1
 80087fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6a1a      	ldr	r2, [r3, #32]
 8008802:	f241 1311 	movw	r3, #4369	; 0x1111
 8008806:	4013      	ands	r3, r2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10f      	bne.n	800882c <HAL_TIM_Base_Stop_IT+0x48>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6a1a      	ldr	r2, [r3, #32]
 8008812:	f240 4344 	movw	r3, #1092	; 0x444
 8008816:	4013      	ands	r3, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <HAL_TIM_Base_Stop_IT+0x48>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0201 	bic.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b086      	sub	sp, #24
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e097      	b.n	8008986 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fa f98a 	bl	8002b84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008886:	f023 0307 	bic.w	r3, r3, #7
 800888a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f000 fa38 	bl	8008d0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088c4:	f023 0303 	bic.w	r3, r3, #3
 80088c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	4313      	orrs	r3, r2
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80088e2:	f023 030c 	bic.w	r3, r3, #12
 80088e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	021b      	lsls	r3, r3, #8
 80088fe:	4313      	orrs	r3, r2
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	011a      	lsls	r2, r3, #4
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	031b      	lsls	r3, r3, #12
 8008912:	4313      	orrs	r3, r2
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008920:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008928:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	4313      	orrs	r3, r2
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800899e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089ae:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089b6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d110      	bne.n	80089e0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d102      	bne.n	80089ca <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80089c4:	7b7b      	ldrb	r3, [r7, #13]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d001      	beq.n	80089ce <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e069      	b.n	8008aa2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2202      	movs	r2, #2
 80089da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089de:	e031      	b.n	8008a44 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d110      	bne.n	8008a08 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d102      	bne.n	80089f2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089ec:	7b3b      	ldrb	r3, [r7, #12]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d001      	beq.n	80089f6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e055      	b.n	8008aa2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a06:	e01d      	b.n	8008a44 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d108      	bne.n	8008a20 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d105      	bne.n	8008a20 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a14:	7b7b      	ldrb	r3, [r7, #13]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d102      	bne.n	8008a20 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a1a:	7b3b      	ldrb	r3, [r7, #12]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d001      	beq.n	8008a24 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e03e      	b.n	8008aa2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <HAL_TIM_Encoder_Start+0xc4>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d008      	beq.n	8008a62 <HAL_TIM_Encoder_Start+0xd4>
 8008a50:	e00f      	b.n	8008a72 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2201      	movs	r2, #1
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f9d6 	bl	8008e0c <TIM_CCxChannelCmd>
      break;
 8008a60:	e016      	b.n	8008a90 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2201      	movs	r2, #1
 8008a68:	2104      	movs	r1, #4
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f9ce 	bl	8008e0c <TIM_CCxChannelCmd>
      break;
 8008a70:	e00e      	b.n	8008a90 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2201      	movs	r2, #1
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f9c6 	bl	8008e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2201      	movs	r2, #1
 8008a86:	2104      	movs	r1, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 f9bf 	bl	8008e0c <TIM_CCxChannelCmd>
      break;
 8008a8e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d122      	bne.n	8008b06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d11b      	bne.n	8008b06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f06f 0202 	mvn.w	r2, #2
 8008ad6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f8ee 	bl	8008cce <HAL_TIM_IC_CaptureCallback>
 8008af2:	e005      	b.n	8008b00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f8e0 	bl	8008cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f8f1 	bl	8008ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d122      	bne.n	8008b5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d11b      	bne.n	8008b5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f06f 0204 	mvn.w	r2, #4
 8008b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f8c4 	bl	8008cce <HAL_TIM_IC_CaptureCallback>
 8008b46:	e005      	b.n	8008b54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8b6 	bl	8008cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8c7 	bl	8008ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d122      	bne.n	8008bae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d11b      	bne.n	8008bae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f06f 0208 	mvn.w	r2, #8
 8008b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2204      	movs	r2, #4
 8008b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f89a 	bl	8008cce <HAL_TIM_IC_CaptureCallback>
 8008b9a:	e005      	b.n	8008ba8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f88c 	bl	8008cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f89d 	bl	8008ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d122      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	2b10      	cmp	r3, #16
 8008bc8:	d11b      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f06f 0210 	mvn.w	r2, #16
 8008bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f870 	bl	8008cce <HAL_TIM_IC_CaptureCallback>
 8008bee:	e005      	b.n	8008bfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f862 	bl	8008cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f873 	bl	8008ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10e      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d107      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f06f 0201 	mvn.w	r2, #1
 8008c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7f9 feb3 	bl	8002994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c38:	2b80      	cmp	r3, #128	; 0x80
 8008c3a:	d10e      	bne.n	8008c5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c46:	2b80      	cmp	r3, #128	; 0x80
 8008c48:	d107      	bne.n	8008c5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f977 	bl	8008f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c64:	2b40      	cmp	r3, #64	; 0x40
 8008c66:	d10e      	bne.n	8008c86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c72:	2b40      	cmp	r3, #64	; 0x40
 8008c74:	d107      	bne.n	8008c86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f838 	bl	8008cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b20      	cmp	r3, #32
 8008c92:	d10e      	bne.n	8008cb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d107      	bne.n	8008cb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f06f 0220 	mvn.w	r2, #32
 8008caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f941 	bl	8008f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cea:	bf00      	nop
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a34      	ldr	r2, [pc, #208]	; (8008df0 <TIM_Base_SetConfig+0xe4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00f      	beq.n	8008d44 <TIM_Base_SetConfig+0x38>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2a:	d00b      	beq.n	8008d44 <TIM_Base_SetConfig+0x38>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a31      	ldr	r2, [pc, #196]	; (8008df4 <TIM_Base_SetConfig+0xe8>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_Base_SetConfig+0x38>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a30      	ldr	r2, [pc, #192]	; (8008df8 <TIM_Base_SetConfig+0xec>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_Base_SetConfig+0x38>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2f      	ldr	r2, [pc, #188]	; (8008dfc <TIM_Base_SetConfig+0xf0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d108      	bne.n	8008d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a25      	ldr	r2, [pc, #148]	; (8008df0 <TIM_Base_SetConfig+0xe4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d01b      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d017      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a22      	ldr	r2, [pc, #136]	; (8008df4 <TIM_Base_SetConfig+0xe8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d013      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <TIM_Base_SetConfig+0xec>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00f      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <TIM_Base_SetConfig+0xf0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00b      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1f      	ldr	r2, [pc, #124]	; (8008e00 <TIM_Base_SetConfig+0xf4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d007      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a1e      	ldr	r2, [pc, #120]	; (8008e04 <TIM_Base_SetConfig+0xf8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d003      	beq.n	8008d96 <TIM_Base_SetConfig+0x8a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a1d      	ldr	r2, [pc, #116]	; (8008e08 <TIM_Base_SetConfig+0xfc>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d108      	bne.n	8008da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a08      	ldr	r2, [pc, #32]	; (8008df0 <TIM_Base_SetConfig+0xe4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d103      	bne.n	8008ddc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	615a      	str	r2, [r3, #20]
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40010000 	.word	0x40010000
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40000800 	.word	0x40000800
 8008dfc:	40000c00 	.word	0x40000c00
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800

08008e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 031f 	and.w	r3, r3, #31
 8008e1e:	2201      	movs	r2, #1
 8008e20:	fa02 f303 	lsl.w	r3, r2, r3
 8008e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6a1a      	ldr	r2, [r3, #32]
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	401a      	ands	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a1a      	ldr	r2, [r3, #32]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	fa01 f303 	lsl.w	r3, r1, r3
 8008e44:	431a      	orrs	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	621a      	str	r2, [r3, #32]
}
 8008e4a:	bf00      	nop
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d101      	bne.n	8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e050      	b.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d018      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebc:	d013      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00e      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a16      	ldr	r2, [pc, #88]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a15      	ldr	r2, [pc, #84]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d004      	beq.n	8008ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a13      	ldr	r2, [pc, #76]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d10c      	bne.n	8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40010000 	.word	0x40010000
 8008f24:	40000400 	.word	0x40000400
 8008f28:	40000800 	.word	0x40000800
 8008f2c:	40000c00 	.word	0x40000c00
 8008f30:	40014000 	.word	0x40014000

08008f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e03f      	b.n	8008fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7f9 fe6e 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	; 0x24
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 f80b 	bl	8009fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695a      	ldr	r2, [r3, #20]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b08a      	sub	sp, #40	; 0x28
 8008ffa:	af02      	add	r7, sp, #8
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	603b      	str	r3, [r7, #0]
 8009002:	4613      	mov	r3, r2
 8009004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b20      	cmp	r3, #32
 8009014:	d17c      	bne.n	8009110 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <HAL_UART_Transmit+0x2c>
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e075      	b.n	8009112 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_UART_Transmit+0x3e>
 8009030:	2302      	movs	r3, #2
 8009032:	e06e      	b.n	8009112 <HAL_UART_Transmit+0x11c>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2221      	movs	r2, #33	; 0x21
 8009046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800904a:	f7fa ffb7 	bl	8003fbc <HAL_GetTick>
 800904e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	88fa      	ldrh	r2, [r7, #6]
 8009054:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009064:	d108      	bne.n	8009078 <HAL_UART_Transmit+0x82>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	e003      	b.n	8009080 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800907c:	2300      	movs	r3, #0
 800907e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009088:	e02a      	b.n	80090e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2200      	movs	r2, #0
 8009092:	2180      	movs	r1, #128	; 0x80
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 fcc3 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e036      	b.n	8009112 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10b      	bne.n	80090c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	3302      	adds	r3, #2
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	e007      	b.n	80090d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	3301      	adds	r3, #1
 80090d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1cf      	bne.n	800908a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2200      	movs	r2, #0
 80090f2:	2140      	movs	r1, #64	; 0x40
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fc93 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e006      	b.n	8009112 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2220      	movs	r2, #32
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	e000      	b.n	8009112 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009110:	2302      	movs	r3, #2
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b08a      	sub	sp, #40	; 0x28
 800911e:	af02      	add	r7, sp, #8
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b20      	cmp	r3, #32
 8009138:	f040 808c 	bne.w	8009254 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_UART_Receive+0x2e>
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e084      	b.n	8009256 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_UART_Receive+0x40>
 8009156:	2302      	movs	r3, #2
 8009158:	e07d      	b.n	8009256 <HAL_UART_Receive+0x13c>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2222      	movs	r2, #34	; 0x22
 800916c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009176:	f7fa ff21 	bl	8003fbc <HAL_GetTick>
 800917a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	88fa      	ldrh	r2, [r7, #6]
 8009180:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	88fa      	ldrh	r2, [r7, #6]
 8009186:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009190:	d108      	bne.n	80091a4 <HAL_UART_Receive+0x8a>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	61bb      	str	r3, [r7, #24]
 80091a2:	e003      	b.n	80091ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80091b4:	e043      	b.n	800923e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2200      	movs	r2, #0
 80091be:	2120      	movs	r1, #32
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 fc2d 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e042      	b.n	8009256 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10c      	bne.n	80091f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	3302      	adds	r3, #2
 80091ec:	61bb      	str	r3, [r7, #24]
 80091ee:	e01f      	b.n	8009230 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f8:	d007      	beq.n	800920a <HAL_UART_Receive+0xf0>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <HAL_UART_Receive+0xfe>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	b2da      	uxtb	r2, r3
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	e008      	b.n	800922a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009224:	b2da      	uxtb	r2, r3
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	3301      	adds	r3, #1
 800922e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1b6      	bne.n	80091b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2220      	movs	r2, #32
 800924c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	e000      	b.n	8009256 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009254:	2302      	movs	r3, #2
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3720      	adds	r7, #32
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	4613      	mov	r3, r2
 800926a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b20      	cmp	r3, #32
 8009276:	d11d      	bne.n	80092b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d002      	beq.n	8009284 <HAL_UART_Receive_DMA+0x26>
 800927e:	88fb      	ldrh	r3, [r7, #6]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e016      	b.n	80092b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_UART_Receive_DMA+0x38>
 8009292:	2302      	movs	r3, #2
 8009294:	e00f      	b.n	80092b6 <HAL_UART_Receive_DMA+0x58>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	461a      	mov	r2, r3
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fc26 	bl	8009afc <UART_Start_Receive_DMA>
 80092b0:	4603      	mov	r3, r0
 80092b2:	e000      	b.n	80092b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092b4:	2302      	movs	r3, #2
  }
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b0ba      	sub	sp, #232	; 0xe8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80092f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80092fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10f      	bne.n	8009326 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <HAL_UART_IRQHandler+0x66>
 8009312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009316:	f003 0320 	and.w	r3, r3, #32
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd91 	bl	8009e46 <UART_Receive_IT>
      return;
 8009324:	e256      	b.n	80097d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 80de 	beq.w	80094ec <HAL_UART_IRQHandler+0x22c>
 8009330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d106      	bne.n	800934a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800933c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009340:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 80d1 	beq.w	80094ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800934a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <HAL_UART_IRQHandler+0xae>
 8009356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800935a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	f043 0201 	orr.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800936e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <HAL_UART_IRQHandler+0xd2>
 800937a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	f043 0202 	orr.w	r2, r3, #2
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <HAL_UART_IRQHandler+0xf6>
 800939e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f043 0204 	orr.w	r2, r3, #4
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d011      	beq.n	80093e6 <HAL_UART_IRQHandler+0x126>
 80093c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f043 0208 	orr.w	r2, r3, #8
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 81ed 	beq.w	80097ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <HAL_UART_IRQHandler+0x14e>
 80093fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009400:	f003 0320 	and.w	r3, r3, #32
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fd1c 	bl	8009e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009418:	2b40      	cmp	r3, #64	; 0x40
 800941a:	bf0c      	ite	eq
 800941c:	2301      	moveq	r3, #1
 800941e:	2300      	movne	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d103      	bne.n	800943a <HAL_UART_IRQHandler+0x17a>
 8009432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04f      	beq.n	80094da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fc24 	bl	8009c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b40      	cmp	r3, #64	; 0x40
 800944c:	d141      	bne.n	80094d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3314      	adds	r3, #20
 8009454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800946c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3314      	adds	r3, #20
 8009476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800947a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800947e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1d9      	bne.n	800944e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d013      	beq.n	80094ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	4a7d      	ldr	r2, [pc, #500]	; (800969c <HAL_UART_IRQHandler+0x3dc>)
 80094a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fb f83c 	bl	800452c <HAL_DMA_Abort_IT>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d016      	beq.n	80094e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c8:	e00e      	b.n	80094e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f99a 	bl	8009804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d0:	e00a      	b.n	80094e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f996 	bl	8009804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d8:	e006      	b.n	80094e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f992 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094e6:	e170      	b.n	80097ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e8:	bf00      	nop
    return;
 80094ea:	e16e      	b.n	80097ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	f040 814a 	bne.w	800978a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fa:	f003 0310 	and.w	r3, r3, #16
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 8143 	beq.w	800978a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 813c 	beq.w	800978a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009512:	2300      	movs	r3, #0
 8009514:	60bb      	str	r3, [r7, #8]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60bb      	str	r3, [r7, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b40      	cmp	r3, #64	; 0x40
 8009534:	f040 80b4 	bne.w	80096a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 8140 	beq.w	80097ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009556:	429a      	cmp	r2, r3
 8009558:	f080 8139 	bcs.w	80097ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009562:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800956e:	f000 8088 	beq.w	8009682 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	330c      	adds	r3, #12
 8009578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800958c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800959e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1d9      	bne.n	8009572 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3314      	adds	r3, #20
 80095c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3314      	adds	r3, #20
 80095de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e1      	bne.n	80095be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800960a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800960c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3314      	adds	r3, #20
 800961a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800961e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009620:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800962c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e3      	bne.n	80095fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009664:	65ba      	str	r2, [r7, #88]	; 0x58
 8009666:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800966a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e3      	bne.n	8009640 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967c:	4618      	mov	r0, r3
 800967e:	f7fa fee5 	bl	800444c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800968a:	b29b      	uxth	r3, r3
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	b29b      	uxth	r3, r3
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f8c0 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009698:	e099      	b.n	80097ce <HAL_UART_IRQHandler+0x50e>
 800969a:	bf00      	nop
 800969c:	08009d4f 	.word	0x08009d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 808b 	beq.w	80097d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80096bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 8086 	beq.w	80097d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	330c      	adds	r3, #12
 80096cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	330c      	adds	r3, #12
 80096e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80096ea:	647a      	str	r2, [r7, #68]	; 0x44
 80096ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e3      	bne.n	80096c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3314      	adds	r3, #20
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	623b      	str	r3, [r7, #32]
   return(result);
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	f023 0301 	bic.w	r3, r3, #1
 8009714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3314      	adds	r3, #20
 800971e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009722:	633a      	str	r2, [r7, #48]	; 0x30
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e3      	bne.n	80096fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	330c      	adds	r3, #12
 800974a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	60fb      	str	r3, [r7, #12]
   return(result);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0310 	bic.w	r3, r3, #16
 800975a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	330c      	adds	r3, #12
 8009764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009768:	61fa      	str	r2, [r7, #28]
 800976a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	69b9      	ldr	r1, [r7, #24]
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	617b      	str	r3, [r7, #20]
   return(result);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e3      	bne.n	8009744 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800977c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f848 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009788:	e023      	b.n	80097d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800978a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <HAL_UART_IRQHandler+0x4ea>
 8009796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fae7 	bl	8009d76 <UART_Transmit_IT>
    return;
 80097a8:	e014      	b.n	80097d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00e      	beq.n	80097d4 <HAL_UART_IRQHandler+0x514>
 80097b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fb27 	bl	8009e16 <UART_EndTransmit_IT>
    return;
 80097c8:	e004      	b.n	80097d4 <HAL_UART_IRQHandler+0x514>
    return;
 80097ca:	bf00      	nop
 80097cc:	e002      	b.n	80097d4 <HAL_UART_IRQHandler+0x514>
      return;
 80097ce:	bf00      	nop
 80097d0:	e000      	b.n	80097d4 <HAL_UART_IRQHandler+0x514>
      return;
 80097d2:	bf00      	nop
  }
}
 80097d4:	37e8      	adds	r7, #232	; 0xe8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop

080097dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b09c      	sub	sp, #112	; 0x70
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009848:	2b00      	cmp	r3, #0
 800984a:	d172      	bne.n	8009932 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800984c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984e:	2200      	movs	r2, #0
 8009850:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009868:	66bb      	str	r3, [r7, #104]	; 0x68
 800986a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	330c      	adds	r3, #12
 8009870:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009872:	65ba      	str	r2, [r7, #88]	; 0x58
 8009874:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3314      	adds	r3, #20
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009898:	f023 0301 	bic.w	r3, r3, #1
 800989c:	667b      	str	r3, [r7, #100]	; 0x64
 800989e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3314      	adds	r3, #20
 80098a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098a6:	647a      	str	r2, [r7, #68]	; 0x44
 80098a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e5      	bne.n	8009886 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3314      	adds	r3, #20
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	623b      	str	r3, [r7, #32]
   return(result);
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d0:	663b      	str	r3, [r7, #96]	; 0x60
 80098d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3314      	adds	r3, #20
 80098d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098da:	633a      	str	r2, [r7, #48]	; 0x30
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e5      	bne.n	80098ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d119      	bne.n	8009932 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	330c      	adds	r3, #12
 8009904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	60fb      	str	r3, [r7, #12]
   return(result);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f023 0310 	bic.w	r3, r3, #16
 8009914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	330c      	adds	r3, #12
 800991c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800991e:	61fa      	str	r2, [r7, #28]
 8009920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	69b9      	ldr	r1, [r7, #24]
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	617b      	str	r3, [r7, #20]
   return(result);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e5      	bne.n	80098fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	2b01      	cmp	r3, #1
 8009938:	d106      	bne.n	8009948 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800993a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800993c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800993e:	4619      	mov	r1, r3
 8009940:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009942:	f7ff ff69 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009946:	e002      	b.n	800994e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009948:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800994a:	f7f9 f83b 	bl	80029c4 <HAL_UART_RxCpltCallback>
}
 800994e:	bf00      	nop
 8009950:	3770      	adds	r7, #112	; 0x70
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009962:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	2b01      	cmp	r3, #1
 800996a:	d108      	bne.n	800997e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009970:	085b      	lsrs	r3, r3, #1
 8009972:	b29b      	uxth	r3, r3
 8009974:	4619      	mov	r1, r3
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7ff ff4e 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800997c:	e002      	b.n	8009984 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f7ff ff36 	bl	80097f0 <HAL_UART_RxHalfCpltCallback>
}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a8:	2b80      	cmp	r3, #128	; 0x80
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b21      	cmp	r3, #33	; 0x21
 80099be:	d108      	bne.n	80099d2 <UART_DMAError+0x46>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2200      	movs	r2, #0
 80099ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80099cc:	68b8      	ldr	r0, [r7, #8]
 80099ce:	f000 f933 	bl	8009c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099dc:	2b40      	cmp	r3, #64	; 0x40
 80099de:	bf0c      	ite	eq
 80099e0:	2301      	moveq	r3, #1
 80099e2:	2300      	movne	r3, #0
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b22      	cmp	r3, #34	; 0x22
 80099f2:	d108      	bne.n	8009a06 <UART_DMAError+0x7a>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	2200      	movs	r2, #0
 80099fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009a00:	68b8      	ldr	r0, [r7, #8]
 8009a02:	f000 f941 	bl	8009c88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	f043 0210 	orr.w	r2, r3, #16
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a12:	68b8      	ldr	r0, [r7, #8]
 8009a14:	f7ff fef6 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a18:	bf00      	nop
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b090      	sub	sp, #64	; 0x40
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a30:	e050      	b.n	8009ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d04c      	beq.n	8009ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a40:	f7fa fabc 	bl	8003fbc <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d241      	bcs.n	8009ad4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	330c      	adds	r3, #12
 8009a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a70:	637a      	str	r2, [r7, #52]	; 0x34
 8009a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a78:	e841 2300 	strex	r3, r2, [r1]
 8009a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e5      	bne.n	8009a50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3314      	adds	r3, #20
 8009a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	613b      	str	r3, [r7, #16]
   return(result);
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f023 0301 	bic.w	r3, r3, #1
 8009a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3314      	adds	r3, #20
 8009aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa4:	623a      	str	r2, [r7, #32]
 8009aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	69f9      	ldr	r1, [r7, #28]
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e5      	bne.n	8009a84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2220      	movs	r2, #32
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e00f      	b.n	8009af4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4013      	ands	r3, r2
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	bf0c      	ite	eq
 8009ae4:	2301      	moveq	r3, #1
 8009ae6:	2300      	movne	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d09f      	beq.n	8009a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3740      	adds	r7, #64	; 0x40
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b098      	sub	sp, #96	; 0x60
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	88fa      	ldrh	r2, [r7, #6]
 8009b14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2222      	movs	r2, #34	; 0x22
 8009b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	4a40      	ldr	r2, [pc, #256]	; (8009c2c <UART_Start_Receive_DMA+0x130>)
 8009b2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	4a3f      	ldr	r2, [pc, #252]	; (8009c30 <UART_Start_Receive_DMA+0x134>)
 8009b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b38:	4a3e      	ldr	r2, [pc, #248]	; (8009c34 <UART_Start_Receive_DMA+0x138>)
 8009b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	2200      	movs	r2, #0
 8009b42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009b44:	f107 0308 	add.w	r3, r7, #8
 8009b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	f7fa fc1e 	bl	800439c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009b60:	2300      	movs	r3, #0
 8009b62:	613b      	str	r3, [r7, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	613b      	str	r3, [r7, #16]
 8009b74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d019      	beq.n	8009bba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	330c      	adds	r3, #12
 8009b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009ba8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e5      	bne.n	8009b86 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3314      	adds	r3, #20
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	f043 0301 	orr.w	r3, r3, #1
 8009bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3314      	adds	r3, #20
 8009bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bda:	63ba      	str	r2, [r7, #56]	; 0x38
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e5      	bne.n	8009bba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3314      	adds	r3, #20
 8009bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c04:	653b      	str	r3, [r7, #80]	; 0x50
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3314      	adds	r3, #20
 8009c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c0e:	627a      	str	r2, [r7, #36]	; 0x24
 8009c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	6a39      	ldr	r1, [r7, #32]
 8009c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1e5      	bne.n	8009bee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3760      	adds	r7, #96	; 0x60
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	08009831 	.word	0x08009831
 8009c30:	08009957 	.word	0x08009957
 8009c34:	0800998d 	.word	0x0800998d

08009c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b089      	sub	sp, #36	; 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	330c      	adds	r3, #12
 8009c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	330c      	adds	r3, #12
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	61ba      	str	r2, [r7, #24]
 8009c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6979      	ldr	r1, [r7, #20]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e5      	bne.n	8009c40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009c7c:	bf00      	nop
 8009c7e:	3724      	adds	r7, #36	; 0x24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b095      	sub	sp, #84	; 0x54
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	330c      	adds	r3, #12
 8009cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e5      	bne.n	8009c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3314      	adds	r3, #20
 8009cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f023 0301 	bic.w	r3, r3, #1
 8009cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3314      	adds	r3, #20
 8009ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e5      	bne.n	8009cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d119      	bne.n	8009d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	330c      	adds	r3, #12
 8009d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f023 0310 	bic.w	r3, r3, #16
 8009d16:	647b      	str	r3, [r7, #68]	; 0x44
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	330c      	adds	r3, #12
 8009d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d20:	61ba      	str	r2, [r7, #24]
 8009d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6979      	ldr	r1, [r7, #20]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e5      	bne.n	8009d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d42:	bf00      	nop
 8009d44:	3754      	adds	r7, #84	; 0x54
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f7ff fd4b 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d6e:	bf00      	nop
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b21      	cmp	r3, #33	; 0x21
 8009d88:	d13e      	bne.n	8009e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d92:	d114      	bne.n	8009dbe <UART_Transmit_IT+0x48>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d110      	bne.n	8009dbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	1c9a      	adds	r2, r3, #2
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	621a      	str	r2, [r3, #32]
 8009dbc:	e008      	b.n	8009dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	1c59      	adds	r1, r3, #1
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6211      	str	r1, [r2, #32]
 8009dc8:	781a      	ldrb	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10f      	bne.n	8009e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68da      	ldr	r2, [r3, #12]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68da      	ldr	r2, [r3, #12]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e000      	b.n	8009e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e08:	2302      	movs	r3, #2
  }
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff fcd0 	bl	80097dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b08c      	sub	sp, #48	; 0x30
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b22      	cmp	r3, #34	; 0x22
 8009e58:	f040 80ab 	bne.w	8009fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e64:	d117      	bne.n	8009e96 <UART_Receive_IT+0x50>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d113      	bne.n	8009e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8e:	1c9a      	adds	r2, r3, #2
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	629a      	str	r2, [r3, #40]	; 0x28
 8009e94:	e026      	b.n	8009ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea8:	d007      	beq.n	8009eba <UART_Receive_IT+0x74>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <UART_Receive_IT+0x82>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	e008      	b.n	8009eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	3b01      	subs	r3, #1
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d15a      	bne.n	8009fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0220 	bic.w	r2, r2, #32
 8009f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695a      	ldr	r2, [r3, #20]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d135      	bne.n	8009fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	330c      	adds	r3, #12
 8009f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f023 0310 	bic.w	r3, r3, #16
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5e:	623a      	str	r2, [r7, #32]
 8009f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	69f9      	ldr	r1, [r7, #28]
 8009f64:	6a3a      	ldr	r2, [r7, #32]
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e5      	bne.n	8009f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b10      	cmp	r3, #16
 8009f7e:	d10a      	bne.n	8009f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fc3b 	bl	8009818 <HAL_UARTEx_RxEventCallback>
 8009fa2:	e002      	b.n	8009faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7f8 fd0d 	bl	80029c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e002      	b.n	8009fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e000      	b.n	8009fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009fb2:	2302      	movs	r3, #2
  }
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3730      	adds	r7, #48	; 0x30
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc0:	b0c0      	sub	sp, #256	; 0x100
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd8:	68d9      	ldr	r1, [r3, #12]
 8009fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	ea40 0301 	orr.w	r3, r0, r1
 8009fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	4313      	orrs	r3, r2
 800a004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a014:	f021 010c 	bic.w	r1, r1, #12
 800a018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a022:	430b      	orrs	r3, r1
 800a024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a036:	6999      	ldr	r1, [r3, #24]
 800a038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	ea40 0301 	orr.w	r3, r0, r1
 800a042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4b8f      	ldr	r3, [pc, #572]	; (800a288 <UART_SetConfig+0x2cc>)
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d005      	beq.n	800a05c <UART_SetConfig+0xa0>
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	4b8d      	ldr	r3, [pc, #564]	; (800a28c <UART_SetConfig+0x2d0>)
 800a058:	429a      	cmp	r2, r3
 800a05a:	d104      	bne.n	800a066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a05c:	f7fe f806 	bl	800806c <HAL_RCC_GetPCLK2Freq>
 800a060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a064:	e003      	b.n	800a06e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a066:	f7fd ffed 	bl	8008044 <HAL_RCC_GetPCLK1Freq>
 800a06a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a078:	f040 810c 	bne.w	800a294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a07c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a080:	2200      	movs	r2, #0
 800a082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a08a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a08e:	4622      	mov	r2, r4
 800a090:	462b      	mov	r3, r5
 800a092:	1891      	adds	r1, r2, r2
 800a094:	65b9      	str	r1, [r7, #88]	; 0x58
 800a096:	415b      	adcs	r3, r3
 800a098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a09a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a09e:	4621      	mov	r1, r4
 800a0a0:	eb12 0801 	adds.w	r8, r2, r1
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	eb43 0901 	adc.w	r9, r3, r1
 800a0aa:	f04f 0200 	mov.w	r2, #0
 800a0ae:	f04f 0300 	mov.w	r3, #0
 800a0b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0be:	4690      	mov	r8, r2
 800a0c0:	4699      	mov	r9, r3
 800a0c2:	4623      	mov	r3, r4
 800a0c4:	eb18 0303 	adds.w	r3, r8, r3
 800a0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0cc:	462b      	mov	r3, r5
 800a0ce:	eb49 0303 	adc.w	r3, r9, r3
 800a0d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a0e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	18db      	adds	r3, r3, r3
 800a0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	eb42 0303 	adc.w	r3, r2, r3
 800a0f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a0f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a0fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a100:	f7f6 fdca 	bl	8000c98 <__aeabi_uldivmod>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4b61      	ldr	r3, [pc, #388]	; (800a290 <UART_SetConfig+0x2d4>)
 800a10a:	fba3 2302 	umull	r2, r3, r3, r2
 800a10e:	095b      	lsrs	r3, r3, #5
 800a110:	011c      	lsls	r4, r3, #4
 800a112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a116:	2200      	movs	r2, #0
 800a118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a11c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a124:	4642      	mov	r2, r8
 800a126:	464b      	mov	r3, r9
 800a128:	1891      	adds	r1, r2, r2
 800a12a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a12c:	415b      	adcs	r3, r3
 800a12e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a134:	4641      	mov	r1, r8
 800a136:	eb12 0a01 	adds.w	sl, r2, r1
 800a13a:	4649      	mov	r1, r9
 800a13c:	eb43 0b01 	adc.w	fp, r3, r1
 800a140:	f04f 0200 	mov.w	r2, #0
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a14c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a154:	4692      	mov	sl, r2
 800a156:	469b      	mov	fp, r3
 800a158:	4643      	mov	r3, r8
 800a15a:	eb1a 0303 	adds.w	r3, sl, r3
 800a15e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a162:	464b      	mov	r3, r9
 800a164:	eb4b 0303 	adc.w	r3, fp, r3
 800a168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a17c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a180:	460b      	mov	r3, r1
 800a182:	18db      	adds	r3, r3, r3
 800a184:	643b      	str	r3, [r7, #64]	; 0x40
 800a186:	4613      	mov	r3, r2
 800a188:	eb42 0303 	adc.w	r3, r2, r3
 800a18c:	647b      	str	r3, [r7, #68]	; 0x44
 800a18e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a196:	f7f6 fd7f 	bl	8000c98 <__aeabi_uldivmod>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4b3b      	ldr	r3, [pc, #236]	; (800a290 <UART_SetConfig+0x2d4>)
 800a1a2:	fba3 2301 	umull	r2, r3, r3, r1
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	2264      	movs	r2, #100	; 0x64
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
 800a1ae:	1acb      	subs	r3, r1, r3
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a1b6:	4b36      	ldr	r3, [pc, #216]	; (800a290 <UART_SetConfig+0x2d4>)
 800a1b8:	fba3 2302 	umull	r2, r3, r3, r2
 800a1bc:	095b      	lsrs	r3, r3, #5
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a1c4:	441c      	add	r4, r3
 800a1c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a1d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a1d8:	4642      	mov	r2, r8
 800a1da:	464b      	mov	r3, r9
 800a1dc:	1891      	adds	r1, r2, r2
 800a1de:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1e0:	415b      	adcs	r3, r3
 800a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1e8:	4641      	mov	r1, r8
 800a1ea:	1851      	adds	r1, r2, r1
 800a1ec:	6339      	str	r1, [r7, #48]	; 0x30
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	414b      	adcs	r3, r1
 800a1f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f4:	f04f 0200 	mov.w	r2, #0
 800a1f8:	f04f 0300 	mov.w	r3, #0
 800a1fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a200:	4659      	mov	r1, fp
 800a202:	00cb      	lsls	r3, r1, #3
 800a204:	4651      	mov	r1, sl
 800a206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a20a:	4651      	mov	r1, sl
 800a20c:	00ca      	lsls	r2, r1, #3
 800a20e:	4610      	mov	r0, r2
 800a210:	4619      	mov	r1, r3
 800a212:	4603      	mov	r3, r0
 800a214:	4642      	mov	r2, r8
 800a216:	189b      	adds	r3, r3, r2
 800a218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a21c:	464b      	mov	r3, r9
 800a21e:	460a      	mov	r2, r1
 800a220:	eb42 0303 	adc.w	r3, r2, r3
 800a224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a23c:	460b      	mov	r3, r1
 800a23e:	18db      	adds	r3, r3, r3
 800a240:	62bb      	str	r3, [r7, #40]	; 0x28
 800a242:	4613      	mov	r3, r2
 800a244:	eb42 0303 	adc.w	r3, r2, r3
 800a248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a24a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a24e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a252:	f7f6 fd21 	bl	8000c98 <__aeabi_uldivmod>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <UART_SetConfig+0x2d4>)
 800a25c:	fba3 1302 	umull	r1, r3, r3, r2
 800a260:	095b      	lsrs	r3, r3, #5
 800a262:	2164      	movs	r1, #100	; 0x64
 800a264:	fb01 f303 	mul.w	r3, r1, r3
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	3332      	adds	r3, #50	; 0x32
 800a26e:	4a08      	ldr	r2, [pc, #32]	; (800a290 <UART_SetConfig+0x2d4>)
 800a270:	fba2 2303 	umull	r2, r3, r2, r3
 800a274:	095b      	lsrs	r3, r3, #5
 800a276:	f003 0207 	and.w	r2, r3, #7
 800a27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4422      	add	r2, r4
 800a282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a284:	e105      	b.n	800a492 <UART_SetConfig+0x4d6>
 800a286:	bf00      	nop
 800a288:	40011000 	.word	0x40011000
 800a28c:	40011400 	.word	0x40011400
 800a290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a29e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a2a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	1891      	adds	r1, r2, r2
 800a2ac:	6239      	str	r1, [r7, #32]
 800a2ae:	415b      	adcs	r3, r3
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2b6:	4641      	mov	r1, r8
 800a2b8:	1854      	adds	r4, r2, r1
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	eb43 0501 	adc.w	r5, r3, r1
 800a2c0:	f04f 0200 	mov.w	r2, #0
 800a2c4:	f04f 0300 	mov.w	r3, #0
 800a2c8:	00eb      	lsls	r3, r5, #3
 800a2ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2ce:	00e2      	lsls	r2, r4, #3
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	461d      	mov	r5, r3
 800a2d4:	4643      	mov	r3, r8
 800a2d6:	18e3      	adds	r3, r4, r3
 800a2d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2dc:	464b      	mov	r3, r9
 800a2de:	eb45 0303 	adc.w	r3, r5, r3
 800a2e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2f6:	f04f 0200 	mov.w	r2, #0
 800a2fa:	f04f 0300 	mov.w	r3, #0
 800a2fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a302:	4629      	mov	r1, r5
 800a304:	008b      	lsls	r3, r1, #2
 800a306:	4621      	mov	r1, r4
 800a308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a30c:	4621      	mov	r1, r4
 800a30e:	008a      	lsls	r2, r1, #2
 800a310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a314:	f7f6 fcc0 	bl	8000c98 <__aeabi_uldivmod>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4b60      	ldr	r3, [pc, #384]	; (800a4a0 <UART_SetConfig+0x4e4>)
 800a31e:	fba3 2302 	umull	r2, r3, r3, r2
 800a322:	095b      	lsrs	r3, r3, #5
 800a324:	011c      	lsls	r4, r3, #4
 800a326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	1891      	adds	r1, r2, r2
 800a33e:	61b9      	str	r1, [r7, #24]
 800a340:	415b      	adcs	r3, r3
 800a342:	61fb      	str	r3, [r7, #28]
 800a344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a348:	4641      	mov	r1, r8
 800a34a:	1851      	adds	r1, r2, r1
 800a34c:	6139      	str	r1, [r7, #16]
 800a34e:	4649      	mov	r1, r9
 800a350:	414b      	adcs	r3, r1
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a360:	4659      	mov	r1, fp
 800a362:	00cb      	lsls	r3, r1, #3
 800a364:	4651      	mov	r1, sl
 800a366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a36a:	4651      	mov	r1, sl
 800a36c:	00ca      	lsls	r2, r1, #3
 800a36e:	4610      	mov	r0, r2
 800a370:	4619      	mov	r1, r3
 800a372:	4603      	mov	r3, r0
 800a374:	4642      	mov	r2, r8
 800a376:	189b      	adds	r3, r3, r2
 800a378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a37c:	464b      	mov	r3, r9
 800a37e:	460a      	mov	r2, r1
 800a380:	eb42 0303 	adc.w	r3, r2, r3
 800a384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	67bb      	str	r3, [r7, #120]	; 0x78
 800a392:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a394:	f04f 0200 	mov.w	r2, #0
 800a398:	f04f 0300 	mov.w	r3, #0
 800a39c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	008b      	lsls	r3, r1, #2
 800a3a4:	4641      	mov	r1, r8
 800a3a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3aa:	4641      	mov	r1, r8
 800a3ac:	008a      	lsls	r2, r1, #2
 800a3ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a3b2:	f7f6 fc71 	bl	8000c98 <__aeabi_uldivmod>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <UART_SetConfig+0x4e4>)
 800a3bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a3c0:	095b      	lsrs	r3, r3, #5
 800a3c2:	2164      	movs	r1, #100	; 0x64
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	3332      	adds	r3, #50	; 0x32
 800a3ce:	4a34      	ldr	r2, [pc, #208]	; (800a4a0 <UART_SetConfig+0x4e4>)
 800a3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d4:	095b      	lsrs	r3, r3, #5
 800a3d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3da:	441c      	add	r4, r3
 800a3dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	673b      	str	r3, [r7, #112]	; 0x70
 800a3e4:	677a      	str	r2, [r7, #116]	; 0x74
 800a3e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a3ea:	4642      	mov	r2, r8
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	1891      	adds	r1, r2, r2
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	415b      	adcs	r3, r3
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3fa:	4641      	mov	r1, r8
 800a3fc:	1851      	adds	r1, r2, r1
 800a3fe:	6039      	str	r1, [r7, #0]
 800a400:	4649      	mov	r1, r9
 800a402:	414b      	adcs	r3, r1
 800a404:	607b      	str	r3, [r7, #4]
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a412:	4659      	mov	r1, fp
 800a414:	00cb      	lsls	r3, r1, #3
 800a416:	4651      	mov	r1, sl
 800a418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a41c:	4651      	mov	r1, sl
 800a41e:	00ca      	lsls	r2, r1, #3
 800a420:	4610      	mov	r0, r2
 800a422:	4619      	mov	r1, r3
 800a424:	4603      	mov	r3, r0
 800a426:	4642      	mov	r2, r8
 800a428:	189b      	adds	r3, r3, r2
 800a42a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a42c:	464b      	mov	r3, r9
 800a42e:	460a      	mov	r2, r1
 800a430:	eb42 0303 	adc.w	r3, r2, r3
 800a434:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	663b      	str	r3, [r7, #96]	; 0x60
 800a440:	667a      	str	r2, [r7, #100]	; 0x64
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	f04f 0300 	mov.w	r3, #0
 800a44a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a44e:	4649      	mov	r1, r9
 800a450:	008b      	lsls	r3, r1, #2
 800a452:	4641      	mov	r1, r8
 800a454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a458:	4641      	mov	r1, r8
 800a45a:	008a      	lsls	r2, r1, #2
 800a45c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a460:	f7f6 fc1a 	bl	8000c98 <__aeabi_uldivmod>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4b0d      	ldr	r3, [pc, #52]	; (800a4a0 <UART_SetConfig+0x4e4>)
 800a46a:	fba3 1302 	umull	r1, r3, r3, r2
 800a46e:	095b      	lsrs	r3, r3, #5
 800a470:	2164      	movs	r1, #100	; 0x64
 800a472:	fb01 f303 	mul.w	r3, r1, r3
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	3332      	adds	r3, #50	; 0x32
 800a47c:	4a08      	ldr	r2, [pc, #32]	; (800a4a0 <UART_SetConfig+0x4e4>)
 800a47e:	fba2 2303 	umull	r2, r3, r2, r3
 800a482:	095b      	lsrs	r3, r3, #5
 800a484:	f003 020f 	and.w	r2, r3, #15
 800a488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4422      	add	r2, r4
 800a490:	609a      	str	r2, [r3, #8]
}
 800a492:	bf00      	nop
 800a494:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a498:	46bd      	mov	sp, r7
 800a49a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a49e:	bf00      	nop
 800a4a0:	51eb851f 	.word	0x51eb851f

0800a4a4 <__errno>:
 800a4a4:	4b01      	ldr	r3, [pc, #4]	; (800a4ac <__errno+0x8>)
 800a4a6:	6818      	ldr	r0, [r3, #0]
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	20000040 	.word	0x20000040

0800a4b0 <__libc_init_array>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4d0d      	ldr	r5, [pc, #52]	; (800a4e8 <__libc_init_array+0x38>)
 800a4b4:	4c0d      	ldr	r4, [pc, #52]	; (800a4ec <__libc_init_array+0x3c>)
 800a4b6:	1b64      	subs	r4, r4, r5
 800a4b8:	10a4      	asrs	r4, r4, #2
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	42a6      	cmp	r6, r4
 800a4be:	d109      	bne.n	800a4d4 <__libc_init_array+0x24>
 800a4c0:	4d0b      	ldr	r5, [pc, #44]	; (800a4f0 <__libc_init_array+0x40>)
 800a4c2:	4c0c      	ldr	r4, [pc, #48]	; (800a4f4 <__libc_init_array+0x44>)
 800a4c4:	f002 ff78 	bl	800d3b8 <_init>
 800a4c8:	1b64      	subs	r4, r4, r5
 800a4ca:	10a4      	asrs	r4, r4, #2
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	42a6      	cmp	r6, r4
 800a4d0:	d105      	bne.n	800a4de <__libc_init_array+0x2e>
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d8:	4798      	blx	r3
 800a4da:	3601      	adds	r6, #1
 800a4dc:	e7ee      	b.n	800a4bc <__libc_init_array+0xc>
 800a4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e2:	4798      	blx	r3
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	e7f2      	b.n	800a4ce <__libc_init_array+0x1e>
 800a4e8:	0801735c 	.word	0x0801735c
 800a4ec:	0801735c 	.word	0x0801735c
 800a4f0:	0801735c 	.word	0x0801735c
 800a4f4:	08017360 	.word	0x08017360

0800a4f8 <memset>:
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d100      	bne.n	800a502 <memset+0xa>
 800a500:	4770      	bx	lr
 800a502:	f803 1b01 	strb.w	r1, [r3], #1
 800a506:	e7f9      	b.n	800a4fc <memset+0x4>

0800a508 <__cvt>:
 800a508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	ec55 4b10 	vmov	r4, r5, d0
 800a510:	2d00      	cmp	r5, #0
 800a512:	460e      	mov	r6, r1
 800a514:	4619      	mov	r1, r3
 800a516:	462b      	mov	r3, r5
 800a518:	bfbb      	ittet	lt
 800a51a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a51e:	461d      	movlt	r5, r3
 800a520:	2300      	movge	r3, #0
 800a522:	232d      	movlt	r3, #45	; 0x2d
 800a524:	700b      	strb	r3, [r1, #0]
 800a526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a528:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a52c:	4691      	mov	r9, r2
 800a52e:	f023 0820 	bic.w	r8, r3, #32
 800a532:	bfbc      	itt	lt
 800a534:	4622      	movlt	r2, r4
 800a536:	4614      	movlt	r4, r2
 800a538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a53c:	d005      	beq.n	800a54a <__cvt+0x42>
 800a53e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a542:	d100      	bne.n	800a546 <__cvt+0x3e>
 800a544:	3601      	adds	r6, #1
 800a546:	2102      	movs	r1, #2
 800a548:	e000      	b.n	800a54c <__cvt+0x44>
 800a54a:	2103      	movs	r1, #3
 800a54c:	ab03      	add	r3, sp, #12
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	ab02      	add	r3, sp, #8
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	ec45 4b10 	vmov	d0, r4, r5
 800a558:	4653      	mov	r3, sl
 800a55a:	4632      	mov	r2, r6
 800a55c:	f000 fcec 	bl	800af38 <_dtoa_r>
 800a560:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a564:	4607      	mov	r7, r0
 800a566:	d102      	bne.n	800a56e <__cvt+0x66>
 800a568:	f019 0f01 	tst.w	r9, #1
 800a56c:	d022      	beq.n	800a5b4 <__cvt+0xac>
 800a56e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a572:	eb07 0906 	add.w	r9, r7, r6
 800a576:	d110      	bne.n	800a59a <__cvt+0x92>
 800a578:	783b      	ldrb	r3, [r7, #0]
 800a57a:	2b30      	cmp	r3, #48	; 0x30
 800a57c:	d10a      	bne.n	800a594 <__cvt+0x8c>
 800a57e:	2200      	movs	r2, #0
 800a580:	2300      	movs	r3, #0
 800a582:	4620      	mov	r0, r4
 800a584:	4629      	mov	r1, r5
 800a586:	f7f6 faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a58a:	b918      	cbnz	r0, 800a594 <__cvt+0x8c>
 800a58c:	f1c6 0601 	rsb	r6, r6, #1
 800a590:	f8ca 6000 	str.w	r6, [sl]
 800a594:	f8da 3000 	ldr.w	r3, [sl]
 800a598:	4499      	add	r9, r3
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7f6 fa99 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5a6:	b108      	cbz	r0, 800a5ac <__cvt+0xa4>
 800a5a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5ac:	2230      	movs	r2, #48	; 0x30
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	454b      	cmp	r3, r9
 800a5b2:	d307      	bcc.n	800a5c4 <__cvt+0xbc>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b8:	1bdb      	subs	r3, r3, r7
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	b004      	add	sp, #16
 800a5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c4:	1c59      	adds	r1, r3, #1
 800a5c6:	9103      	str	r1, [sp, #12]
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	e7f0      	b.n	800a5ae <__cvt+0xa6>

0800a5cc <__exponent>:
 800a5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2900      	cmp	r1, #0
 800a5d2:	bfb8      	it	lt
 800a5d4:	4249      	neglt	r1, r1
 800a5d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a5da:	bfb4      	ite	lt
 800a5dc:	222d      	movlt	r2, #45	; 0x2d
 800a5de:	222b      	movge	r2, #43	; 0x2b
 800a5e0:	2909      	cmp	r1, #9
 800a5e2:	7042      	strb	r2, [r0, #1]
 800a5e4:	dd2a      	ble.n	800a63c <__exponent+0x70>
 800a5e6:	f10d 0407 	add.w	r4, sp, #7
 800a5ea:	46a4      	mov	ip, r4
 800a5ec:	270a      	movs	r7, #10
 800a5ee:	46a6      	mov	lr, r4
 800a5f0:	460a      	mov	r2, r1
 800a5f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5f6:	fb07 1516 	mls	r5, r7, r6, r1
 800a5fa:	3530      	adds	r5, #48	; 0x30
 800a5fc:	2a63      	cmp	r2, #99	; 0x63
 800a5fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800a602:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a606:	4631      	mov	r1, r6
 800a608:	dcf1      	bgt.n	800a5ee <__exponent+0x22>
 800a60a:	3130      	adds	r1, #48	; 0x30
 800a60c:	f1ae 0502 	sub.w	r5, lr, #2
 800a610:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a614:	1c44      	adds	r4, r0, #1
 800a616:	4629      	mov	r1, r5
 800a618:	4561      	cmp	r1, ip
 800a61a:	d30a      	bcc.n	800a632 <__exponent+0x66>
 800a61c:	f10d 0209 	add.w	r2, sp, #9
 800a620:	eba2 020e 	sub.w	r2, r2, lr
 800a624:	4565      	cmp	r5, ip
 800a626:	bf88      	it	hi
 800a628:	2200      	movhi	r2, #0
 800a62a:	4413      	add	r3, r2
 800a62c:	1a18      	subs	r0, r3, r0
 800a62e:	b003      	add	sp, #12
 800a630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a636:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a63a:	e7ed      	b.n	800a618 <__exponent+0x4c>
 800a63c:	2330      	movs	r3, #48	; 0x30
 800a63e:	3130      	adds	r1, #48	; 0x30
 800a640:	7083      	strb	r3, [r0, #2]
 800a642:	70c1      	strb	r1, [r0, #3]
 800a644:	1d03      	adds	r3, r0, #4
 800a646:	e7f1      	b.n	800a62c <__exponent+0x60>

0800a648 <_printf_float>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	ed2d 8b02 	vpush	{d8}
 800a650:	b08d      	sub	sp, #52	; 0x34
 800a652:	460c      	mov	r4, r1
 800a654:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a658:	4616      	mov	r6, r2
 800a65a:	461f      	mov	r7, r3
 800a65c:	4605      	mov	r5, r0
 800a65e:	f001 fa59 	bl	800bb14 <_localeconv_r>
 800a662:	f8d0 a000 	ldr.w	sl, [r0]
 800a666:	4650      	mov	r0, sl
 800a668:	f7f5 fdba 	bl	80001e0 <strlen>
 800a66c:	2300      	movs	r3, #0
 800a66e:	930a      	str	r3, [sp, #40]	; 0x28
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	f8d8 3000 	ldr.w	r3, [r8]
 800a678:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a67c:	3307      	adds	r3, #7
 800a67e:	f023 0307 	bic.w	r3, r3, #7
 800a682:	f103 0208 	add.w	r2, r3, #8
 800a686:	f8c8 2000 	str.w	r2, [r8]
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a692:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6a0:	ee08 0a10 	vmov	s16, r0
 800a6a4:	4b9f      	ldr	r3, [pc, #636]	; (800a924 <_printf_float+0x2dc>)
 800a6a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	f7f6 fa45 	bl	8000b3c <__aeabi_dcmpun>
 800a6b2:	bb88      	cbnz	r0, 800a718 <_printf_float+0xd0>
 800a6b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b8:	4b9a      	ldr	r3, [pc, #616]	; (800a924 <_printf_float+0x2dc>)
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	f7f6 fa1f 	bl	8000b00 <__aeabi_dcmple>
 800a6c2:	bb48      	cbnz	r0, 800a718 <_printf_float+0xd0>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f6 fa0e 	bl	8000aec <__aeabi_dcmplt>
 800a6d0:	b110      	cbz	r0, 800a6d8 <_printf_float+0x90>
 800a6d2:	232d      	movs	r3, #45	; 0x2d
 800a6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d8:	4b93      	ldr	r3, [pc, #588]	; (800a928 <_printf_float+0x2e0>)
 800a6da:	4894      	ldr	r0, [pc, #592]	; (800a92c <_printf_float+0x2e4>)
 800a6dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6e0:	bf94      	ite	ls
 800a6e2:	4698      	movls	r8, r3
 800a6e4:	4680      	movhi	r8, r0
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	9b05      	ldr	r3, [sp, #20]
 800a6ec:	f023 0204 	bic.w	r2, r3, #4
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	f04f 0900 	mov.w	r9, #0
 800a6f6:	9700      	str	r7, [sp, #0]
 800a6f8:	4633      	mov	r3, r6
 800a6fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 f9d8 	bl	800aab4 <_printf_common>
 800a704:	3001      	adds	r0, #1
 800a706:	f040 8090 	bne.w	800a82a <_printf_float+0x1e2>
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295
 800a70e:	b00d      	add	sp, #52	; 0x34
 800a710:	ecbd 8b02 	vpop	{d8}
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f6 fa0c 	bl	8000b3c <__aeabi_dcmpun>
 800a724:	b140      	cbz	r0, 800a738 <_printf_float+0xf0>
 800a726:	464b      	mov	r3, r9
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfbc      	itt	lt
 800a72c:	232d      	movlt	r3, #45	; 0x2d
 800a72e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a732:	487f      	ldr	r0, [pc, #508]	; (800a930 <_printf_float+0x2e8>)
 800a734:	4b7f      	ldr	r3, [pc, #508]	; (800a934 <_printf_float+0x2ec>)
 800a736:	e7d1      	b.n	800a6dc <_printf_float+0x94>
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a73e:	9206      	str	r2, [sp, #24]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	d13f      	bne.n	800a7c4 <_printf_float+0x17c>
 800a744:	2306      	movs	r3, #6
 800a746:	6063      	str	r3, [r4, #4]
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	6861      	ldr	r1, [r4, #4]
 800a74c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a750:	2300      	movs	r3, #0
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	ab0a      	add	r3, sp, #40	; 0x28
 800a756:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a75a:	ab09      	add	r3, sp, #36	; 0x24
 800a75c:	ec49 8b10 	vmov	d0, r8, r9
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a768:	4628      	mov	r0, r5
 800a76a:	f7ff fecd 	bl	800a508 <__cvt>
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a772:	2b47      	cmp	r3, #71	; 0x47
 800a774:	4680      	mov	r8, r0
 800a776:	d108      	bne.n	800a78a <_printf_float+0x142>
 800a778:	1cc8      	adds	r0, r1, #3
 800a77a:	db02      	blt.n	800a782 <_printf_float+0x13a>
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	4299      	cmp	r1, r3
 800a780:	dd41      	ble.n	800a806 <_printf_float+0x1be>
 800a782:	f1ab 0b02 	sub.w	fp, fp, #2
 800a786:	fa5f fb8b 	uxtb.w	fp, fp
 800a78a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a78e:	d820      	bhi.n	800a7d2 <_printf_float+0x18a>
 800a790:	3901      	subs	r1, #1
 800a792:	465a      	mov	r2, fp
 800a794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a798:	9109      	str	r1, [sp, #36]	; 0x24
 800a79a:	f7ff ff17 	bl	800a5cc <__exponent>
 800a79e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7a0:	1813      	adds	r3, r2, r0
 800a7a2:	2a01      	cmp	r2, #1
 800a7a4:	4681      	mov	r9, r0
 800a7a6:	6123      	str	r3, [r4, #16]
 800a7a8:	dc02      	bgt.n	800a7b0 <_printf_float+0x168>
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	07d2      	lsls	r2, r2, #31
 800a7ae:	d501      	bpl.n	800a7b4 <_printf_float+0x16c>
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d09c      	beq.n	800a6f6 <_printf_float+0xae>
 800a7bc:	232d      	movs	r3, #45	; 0x2d
 800a7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7c2:	e798      	b.n	800a6f6 <_printf_float+0xae>
 800a7c4:	9a06      	ldr	r2, [sp, #24]
 800a7c6:	2a47      	cmp	r2, #71	; 0x47
 800a7c8:	d1be      	bne.n	800a748 <_printf_float+0x100>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1bc      	bne.n	800a748 <_printf_float+0x100>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e7b9      	b.n	800a746 <_printf_float+0xfe>
 800a7d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7d6:	d118      	bne.n	800a80a <_printf_float+0x1c2>
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	dd0b      	ble.n	800a7f6 <_printf_float+0x1ae>
 800a7de:	6121      	str	r1, [r4, #16]
 800a7e0:	b913      	cbnz	r3, 800a7e8 <_printf_float+0x1a0>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	07d0      	lsls	r0, r2, #31
 800a7e6:	d502      	bpl.n	800a7ee <_printf_float+0x1a6>
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	440b      	add	r3, r1
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	e7de      	b.n	800a7b4 <_printf_float+0x16c>
 800a7f6:	b913      	cbnz	r3, 800a7fe <_printf_float+0x1b6>
 800a7f8:	6822      	ldr	r2, [r4, #0]
 800a7fa:	07d2      	lsls	r2, r2, #31
 800a7fc:	d501      	bpl.n	800a802 <_printf_float+0x1ba>
 800a7fe:	3302      	adds	r3, #2
 800a800:	e7f4      	b.n	800a7ec <_printf_float+0x1a4>
 800a802:	2301      	movs	r3, #1
 800a804:	e7f2      	b.n	800a7ec <_printf_float+0x1a4>
 800a806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80c:	4299      	cmp	r1, r3
 800a80e:	db05      	blt.n	800a81c <_printf_float+0x1d4>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	6121      	str	r1, [r4, #16]
 800a814:	07d8      	lsls	r0, r3, #31
 800a816:	d5ea      	bpl.n	800a7ee <_printf_float+0x1a6>
 800a818:	1c4b      	adds	r3, r1, #1
 800a81a:	e7e7      	b.n	800a7ec <_printf_float+0x1a4>
 800a81c:	2900      	cmp	r1, #0
 800a81e:	bfd4      	ite	le
 800a820:	f1c1 0202 	rsble	r2, r1, #2
 800a824:	2201      	movgt	r2, #1
 800a826:	4413      	add	r3, r2
 800a828:	e7e0      	b.n	800a7ec <_printf_float+0x1a4>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	055a      	lsls	r2, r3, #21
 800a82e:	d407      	bmi.n	800a840 <_printf_float+0x1f8>
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	4642      	mov	r2, r8
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	47b8      	blx	r7
 800a83a:	3001      	adds	r0, #1
 800a83c:	d12c      	bne.n	800a898 <_printf_float+0x250>
 800a83e:	e764      	b.n	800a70a <_printf_float+0xc2>
 800a840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a844:	f240 80e0 	bls.w	800aa08 <_printf_float+0x3c0>
 800a848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	f7f6 f942 	bl	8000ad8 <__aeabi_dcmpeq>
 800a854:	2800      	cmp	r0, #0
 800a856:	d034      	beq.n	800a8c2 <_printf_float+0x27a>
 800a858:	4a37      	ldr	r2, [pc, #220]	; (800a938 <_printf_float+0x2f0>)
 800a85a:	2301      	movs	r3, #1
 800a85c:	4631      	mov	r1, r6
 800a85e:	4628      	mov	r0, r5
 800a860:	47b8      	blx	r7
 800a862:	3001      	adds	r0, #1
 800a864:	f43f af51 	beq.w	800a70a <_printf_float+0xc2>
 800a868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a86c:	429a      	cmp	r2, r3
 800a86e:	db02      	blt.n	800a876 <_printf_float+0x22e>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	07d8      	lsls	r0, r3, #31
 800a874:	d510      	bpl.n	800a898 <_printf_float+0x250>
 800a876:	ee18 3a10 	vmov	r3, s16
 800a87a:	4652      	mov	r2, sl
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f af41 	beq.w	800a70a <_printf_float+0xc2>
 800a888:	f04f 0800 	mov.w	r8, #0
 800a88c:	f104 091a 	add.w	r9, r4, #26
 800a890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a892:	3b01      	subs	r3, #1
 800a894:	4543      	cmp	r3, r8
 800a896:	dc09      	bgt.n	800a8ac <_printf_float+0x264>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	079b      	lsls	r3, r3, #30
 800a89c:	f100 8105 	bmi.w	800aaaa <_printf_float+0x462>
 800a8a0:	68e0      	ldr	r0, [r4, #12]
 800a8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a4:	4298      	cmp	r0, r3
 800a8a6:	bfb8      	it	lt
 800a8a8:	4618      	movlt	r0, r3
 800a8aa:	e730      	b.n	800a70e <_printf_float+0xc6>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	464a      	mov	r2, r9
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	47b8      	blx	r7
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f43f af27 	beq.w	800a70a <_printf_float+0xc2>
 800a8bc:	f108 0801 	add.w	r8, r8, #1
 800a8c0:	e7e6      	b.n	800a890 <_printf_float+0x248>
 800a8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dc39      	bgt.n	800a93c <_printf_float+0x2f4>
 800a8c8:	4a1b      	ldr	r2, [pc, #108]	; (800a938 <_printf_float+0x2f0>)
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f af19 	beq.w	800a70a <_printf_float+0xc2>
 800a8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	d102      	bne.n	800a8e6 <_printf_float+0x29e>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	07d9      	lsls	r1, r3, #31
 800a8e4:	d5d8      	bpl.n	800a898 <_printf_float+0x250>
 800a8e6:	ee18 3a10 	vmov	r3, s16
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f af09 	beq.w	800a70a <_printf_float+0xc2>
 800a8f8:	f04f 0900 	mov.w	r9, #0
 800a8fc:	f104 0a1a 	add.w	sl, r4, #26
 800a900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a902:	425b      	negs	r3, r3
 800a904:	454b      	cmp	r3, r9
 800a906:	dc01      	bgt.n	800a90c <_printf_float+0x2c4>
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	e792      	b.n	800a832 <_printf_float+0x1ea>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4652      	mov	r2, sl
 800a910:	4631      	mov	r1, r6
 800a912:	4628      	mov	r0, r5
 800a914:	47b8      	blx	r7
 800a916:	3001      	adds	r0, #1
 800a918:	f43f aef7 	beq.w	800a70a <_printf_float+0xc2>
 800a91c:	f109 0901 	add.w	r9, r9, #1
 800a920:	e7ee      	b.n	800a900 <_printf_float+0x2b8>
 800a922:	bf00      	nop
 800a924:	7fefffff 	.word	0x7fefffff
 800a928:	08016f80 	.word	0x08016f80
 800a92c:	08016f84 	.word	0x08016f84
 800a930:	08016f8c 	.word	0x08016f8c
 800a934:	08016f88 	.word	0x08016f88
 800a938:	08016f90 	.word	0x08016f90
 800a93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a93e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a940:	429a      	cmp	r2, r3
 800a942:	bfa8      	it	ge
 800a944:	461a      	movge	r2, r3
 800a946:	2a00      	cmp	r2, #0
 800a948:	4691      	mov	r9, r2
 800a94a:	dc37      	bgt.n	800a9bc <_printf_float+0x374>
 800a94c:	f04f 0b00 	mov.w	fp, #0
 800a950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a954:	f104 021a 	add.w	r2, r4, #26
 800a958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a95a:	9305      	str	r3, [sp, #20]
 800a95c:	eba3 0309 	sub.w	r3, r3, r9
 800a960:	455b      	cmp	r3, fp
 800a962:	dc33      	bgt.n	800a9cc <_printf_float+0x384>
 800a964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a968:	429a      	cmp	r2, r3
 800a96a:	db3b      	blt.n	800a9e4 <_printf_float+0x39c>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	07da      	lsls	r2, r3, #31
 800a970:	d438      	bmi.n	800a9e4 <_printf_float+0x39c>
 800a972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a974:	9a05      	ldr	r2, [sp, #20]
 800a976:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a978:	1a9a      	subs	r2, r3, r2
 800a97a:	eba3 0901 	sub.w	r9, r3, r1
 800a97e:	4591      	cmp	r9, r2
 800a980:	bfa8      	it	ge
 800a982:	4691      	movge	r9, r2
 800a984:	f1b9 0f00 	cmp.w	r9, #0
 800a988:	dc35      	bgt.n	800a9f6 <_printf_float+0x3ae>
 800a98a:	f04f 0800 	mov.w	r8, #0
 800a98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a992:	f104 0a1a 	add.w	sl, r4, #26
 800a996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	eba3 0309 	sub.w	r3, r3, r9
 800a9a0:	4543      	cmp	r3, r8
 800a9a2:	f77f af79 	ble.w	800a898 <_printf_float+0x250>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b8      	blx	r7
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f43f aeaa 	beq.w	800a70a <_printf_float+0xc2>
 800a9b6:	f108 0801 	add.w	r8, r8, #1
 800a9ba:	e7ec      	b.n	800a996 <_printf_float+0x34e>
 800a9bc:	4613      	mov	r3, r2
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d1c0      	bne.n	800a94c <_printf_float+0x304>
 800a9ca:	e69e      	b.n	800a70a <_printf_float+0xc2>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	9205      	str	r2, [sp, #20]
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f ae97 	beq.w	800a70a <_printf_float+0xc2>
 800a9dc:	9a05      	ldr	r2, [sp, #20]
 800a9de:	f10b 0b01 	add.w	fp, fp, #1
 800a9e2:	e7b9      	b.n	800a958 <_printf_float+0x310>
 800a9e4:	ee18 3a10 	vmov	r3, s16
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b8      	blx	r7
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d1be      	bne.n	800a972 <_printf_float+0x32a>
 800a9f4:	e689      	b.n	800a70a <_printf_float+0xc2>
 800a9f6:	9a05      	ldr	r2, [sp, #20]
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	4442      	add	r2, r8
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	d1c1      	bne.n	800a98a <_printf_float+0x342>
 800aa06:	e680      	b.n	800a70a <_printf_float+0xc2>
 800aa08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa0a:	2a01      	cmp	r2, #1
 800aa0c:	dc01      	bgt.n	800aa12 <_printf_float+0x3ca>
 800aa0e:	07db      	lsls	r3, r3, #31
 800aa10:	d538      	bpl.n	800aa84 <_printf_float+0x43c>
 800aa12:	2301      	movs	r3, #1
 800aa14:	4642      	mov	r2, r8
 800aa16:	4631      	mov	r1, r6
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b8      	blx	r7
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f43f ae74 	beq.w	800a70a <_printf_float+0xc2>
 800aa22:	ee18 3a10 	vmov	r3, s16
 800aa26:	4652      	mov	r2, sl
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	f43f ae6b 	beq.w	800a70a <_printf_float+0xc2>
 800aa34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f7f6 f84c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa40:	b9d8      	cbnz	r0, 800aa7a <_printf_float+0x432>
 800aa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa44:	f108 0201 	add.w	r2, r8, #1
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	d10e      	bne.n	800aa72 <_printf_float+0x42a>
 800aa54:	e659      	b.n	800a70a <_printf_float+0xc2>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4652      	mov	r2, sl
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f ae52 	beq.w	800a70a <_printf_float+0xc2>
 800aa66:	f108 0801 	add.w	r8, r8, #1
 800aa6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	4543      	cmp	r3, r8
 800aa70:	dcf1      	bgt.n	800aa56 <_printf_float+0x40e>
 800aa72:	464b      	mov	r3, r9
 800aa74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa78:	e6dc      	b.n	800a834 <_printf_float+0x1ec>
 800aa7a:	f04f 0800 	mov.w	r8, #0
 800aa7e:	f104 0a1a 	add.w	sl, r4, #26
 800aa82:	e7f2      	b.n	800aa6a <_printf_float+0x422>
 800aa84:	2301      	movs	r3, #1
 800aa86:	4642      	mov	r2, r8
 800aa88:	e7df      	b.n	800aa4a <_printf_float+0x402>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	464a      	mov	r2, r9
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae38 	beq.w	800a70a <_printf_float+0xc2>
 800aa9a:	f108 0801 	add.w	r8, r8, #1
 800aa9e:	68e3      	ldr	r3, [r4, #12]
 800aaa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaa2:	1a5b      	subs	r3, r3, r1
 800aaa4:	4543      	cmp	r3, r8
 800aaa6:	dcf0      	bgt.n	800aa8a <_printf_float+0x442>
 800aaa8:	e6fa      	b.n	800a8a0 <_printf_float+0x258>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	f104 0919 	add.w	r9, r4, #25
 800aab2:	e7f4      	b.n	800aa9e <_printf_float+0x456>

0800aab4 <_printf_common>:
 800aab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	4616      	mov	r6, r2
 800aaba:	4699      	mov	r9, r3
 800aabc:	688a      	ldr	r2, [r1, #8]
 800aabe:	690b      	ldr	r3, [r1, #16]
 800aac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aac4:	4293      	cmp	r3, r2
 800aac6:	bfb8      	it	lt
 800aac8:	4613      	movlt	r3, r2
 800aaca:	6033      	str	r3, [r6, #0]
 800aacc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aad0:	4607      	mov	r7, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	b10a      	cbz	r2, 800aada <_printf_common+0x26>
 800aad6:	3301      	adds	r3, #1
 800aad8:	6033      	str	r3, [r6, #0]
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	0699      	lsls	r1, r3, #26
 800aade:	bf42      	ittt	mi
 800aae0:	6833      	ldrmi	r3, [r6, #0]
 800aae2:	3302      	addmi	r3, #2
 800aae4:	6033      	strmi	r3, [r6, #0]
 800aae6:	6825      	ldr	r5, [r4, #0]
 800aae8:	f015 0506 	ands.w	r5, r5, #6
 800aaec:	d106      	bne.n	800aafc <_printf_common+0x48>
 800aaee:	f104 0a19 	add.w	sl, r4, #25
 800aaf2:	68e3      	ldr	r3, [r4, #12]
 800aaf4:	6832      	ldr	r2, [r6, #0]
 800aaf6:	1a9b      	subs	r3, r3, r2
 800aaf8:	42ab      	cmp	r3, r5
 800aafa:	dc26      	bgt.n	800ab4a <_printf_common+0x96>
 800aafc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab00:	1e13      	subs	r3, r2, #0
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	bf18      	it	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	0692      	lsls	r2, r2, #26
 800ab0a:	d42b      	bmi.n	800ab64 <_printf_common+0xb0>
 800ab0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab10:	4649      	mov	r1, r9
 800ab12:	4638      	mov	r0, r7
 800ab14:	47c0      	blx	r8
 800ab16:	3001      	adds	r0, #1
 800ab18:	d01e      	beq.n	800ab58 <_printf_common+0xa4>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	68e5      	ldr	r5, [r4, #12]
 800ab1e:	6832      	ldr	r2, [r6, #0]
 800ab20:	f003 0306 	and.w	r3, r3, #6
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	bf08      	it	eq
 800ab28:	1aad      	subeq	r5, r5, r2
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	6922      	ldr	r2, [r4, #16]
 800ab2e:	bf0c      	ite	eq
 800ab30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab34:	2500      	movne	r5, #0
 800ab36:	4293      	cmp	r3, r2
 800ab38:	bfc4      	itt	gt
 800ab3a:	1a9b      	subgt	r3, r3, r2
 800ab3c:	18ed      	addgt	r5, r5, r3
 800ab3e:	2600      	movs	r6, #0
 800ab40:	341a      	adds	r4, #26
 800ab42:	42b5      	cmp	r5, r6
 800ab44:	d11a      	bne.n	800ab7c <_printf_common+0xc8>
 800ab46:	2000      	movs	r0, #0
 800ab48:	e008      	b.n	800ab5c <_printf_common+0xa8>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4652      	mov	r2, sl
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4638      	mov	r0, r7
 800ab52:	47c0      	blx	r8
 800ab54:	3001      	adds	r0, #1
 800ab56:	d103      	bne.n	800ab60 <_printf_common+0xac>
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab60:	3501      	adds	r5, #1
 800ab62:	e7c6      	b.n	800aaf2 <_printf_common+0x3e>
 800ab64:	18e1      	adds	r1, r4, r3
 800ab66:	1c5a      	adds	r2, r3, #1
 800ab68:	2030      	movs	r0, #48	; 0x30
 800ab6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab6e:	4422      	add	r2, r4
 800ab70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab78:	3302      	adds	r3, #2
 800ab7a:	e7c7      	b.n	800ab0c <_printf_common+0x58>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4622      	mov	r2, r4
 800ab80:	4649      	mov	r1, r9
 800ab82:	4638      	mov	r0, r7
 800ab84:	47c0      	blx	r8
 800ab86:	3001      	adds	r0, #1
 800ab88:	d0e6      	beq.n	800ab58 <_printf_common+0xa4>
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e7d9      	b.n	800ab42 <_printf_common+0x8e>
	...

0800ab90 <_printf_i>:
 800ab90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab94:	7e0f      	ldrb	r7, [r1, #24]
 800ab96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab98:	2f78      	cmp	r7, #120	; 0x78
 800ab9a:	4691      	mov	r9, r2
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	469a      	mov	sl, r3
 800aba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aba6:	d807      	bhi.n	800abb8 <_printf_i+0x28>
 800aba8:	2f62      	cmp	r7, #98	; 0x62
 800abaa:	d80a      	bhi.n	800abc2 <_printf_i+0x32>
 800abac:	2f00      	cmp	r7, #0
 800abae:	f000 80d8 	beq.w	800ad62 <_printf_i+0x1d2>
 800abb2:	2f58      	cmp	r7, #88	; 0x58
 800abb4:	f000 80a3 	beq.w	800acfe <_printf_i+0x16e>
 800abb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abc0:	e03a      	b.n	800ac38 <_printf_i+0xa8>
 800abc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abc6:	2b15      	cmp	r3, #21
 800abc8:	d8f6      	bhi.n	800abb8 <_printf_i+0x28>
 800abca:	a101      	add	r1, pc, #4	; (adr r1, 800abd0 <_printf_i+0x40>)
 800abcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abd0:	0800ac29 	.word	0x0800ac29
 800abd4:	0800ac3d 	.word	0x0800ac3d
 800abd8:	0800abb9 	.word	0x0800abb9
 800abdc:	0800abb9 	.word	0x0800abb9
 800abe0:	0800abb9 	.word	0x0800abb9
 800abe4:	0800abb9 	.word	0x0800abb9
 800abe8:	0800ac3d 	.word	0x0800ac3d
 800abec:	0800abb9 	.word	0x0800abb9
 800abf0:	0800abb9 	.word	0x0800abb9
 800abf4:	0800abb9 	.word	0x0800abb9
 800abf8:	0800abb9 	.word	0x0800abb9
 800abfc:	0800ad49 	.word	0x0800ad49
 800ac00:	0800ac6d 	.word	0x0800ac6d
 800ac04:	0800ad2b 	.word	0x0800ad2b
 800ac08:	0800abb9 	.word	0x0800abb9
 800ac0c:	0800abb9 	.word	0x0800abb9
 800ac10:	0800ad6b 	.word	0x0800ad6b
 800ac14:	0800abb9 	.word	0x0800abb9
 800ac18:	0800ac6d 	.word	0x0800ac6d
 800ac1c:	0800abb9 	.word	0x0800abb9
 800ac20:	0800abb9 	.word	0x0800abb9
 800ac24:	0800ad33 	.word	0x0800ad33
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	1d1a      	adds	r2, r3, #4
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	602a      	str	r2, [r5, #0]
 800ac30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e0a3      	b.n	800ad84 <_printf_i+0x1f4>
 800ac3c:	6820      	ldr	r0, [r4, #0]
 800ac3e:	6829      	ldr	r1, [r5, #0]
 800ac40:	0606      	lsls	r6, r0, #24
 800ac42:	f101 0304 	add.w	r3, r1, #4
 800ac46:	d50a      	bpl.n	800ac5e <_printf_i+0xce>
 800ac48:	680e      	ldr	r6, [r1, #0]
 800ac4a:	602b      	str	r3, [r5, #0]
 800ac4c:	2e00      	cmp	r6, #0
 800ac4e:	da03      	bge.n	800ac58 <_printf_i+0xc8>
 800ac50:	232d      	movs	r3, #45	; 0x2d
 800ac52:	4276      	negs	r6, r6
 800ac54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac58:	485e      	ldr	r0, [pc, #376]	; (800add4 <_printf_i+0x244>)
 800ac5a:	230a      	movs	r3, #10
 800ac5c:	e019      	b.n	800ac92 <_printf_i+0x102>
 800ac5e:	680e      	ldr	r6, [r1, #0]
 800ac60:	602b      	str	r3, [r5, #0]
 800ac62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac66:	bf18      	it	ne
 800ac68:	b236      	sxthne	r6, r6
 800ac6a:	e7ef      	b.n	800ac4c <_printf_i+0xbc>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	6820      	ldr	r0, [r4, #0]
 800ac70:	1d19      	adds	r1, r3, #4
 800ac72:	6029      	str	r1, [r5, #0]
 800ac74:	0601      	lsls	r1, r0, #24
 800ac76:	d501      	bpl.n	800ac7c <_printf_i+0xec>
 800ac78:	681e      	ldr	r6, [r3, #0]
 800ac7a:	e002      	b.n	800ac82 <_printf_i+0xf2>
 800ac7c:	0646      	lsls	r6, r0, #25
 800ac7e:	d5fb      	bpl.n	800ac78 <_printf_i+0xe8>
 800ac80:	881e      	ldrh	r6, [r3, #0]
 800ac82:	4854      	ldr	r0, [pc, #336]	; (800add4 <_printf_i+0x244>)
 800ac84:	2f6f      	cmp	r7, #111	; 0x6f
 800ac86:	bf0c      	ite	eq
 800ac88:	2308      	moveq	r3, #8
 800ac8a:	230a      	movne	r3, #10
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac92:	6865      	ldr	r5, [r4, #4]
 800ac94:	60a5      	str	r5, [r4, #8]
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	bfa2      	ittt	ge
 800ac9a:	6821      	ldrge	r1, [r4, #0]
 800ac9c:	f021 0104 	bicge.w	r1, r1, #4
 800aca0:	6021      	strge	r1, [r4, #0]
 800aca2:	b90e      	cbnz	r6, 800aca8 <_printf_i+0x118>
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	d04d      	beq.n	800ad44 <_printf_i+0x1b4>
 800aca8:	4615      	mov	r5, r2
 800acaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800acae:	fb03 6711 	mls	r7, r3, r1, r6
 800acb2:	5dc7      	ldrb	r7, [r0, r7]
 800acb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acb8:	4637      	mov	r7, r6
 800acba:	42bb      	cmp	r3, r7
 800acbc:	460e      	mov	r6, r1
 800acbe:	d9f4      	bls.n	800acaa <_printf_i+0x11a>
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d10b      	bne.n	800acdc <_printf_i+0x14c>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	07de      	lsls	r6, r3, #31
 800acc8:	d508      	bpl.n	800acdc <_printf_i+0x14c>
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	6861      	ldr	r1, [r4, #4]
 800acce:	4299      	cmp	r1, r3
 800acd0:	bfde      	ittt	le
 800acd2:	2330      	movle	r3, #48	; 0x30
 800acd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acdc:	1b52      	subs	r2, r2, r5
 800acde:	6122      	str	r2, [r4, #16]
 800ace0:	f8cd a000 	str.w	sl, [sp]
 800ace4:	464b      	mov	r3, r9
 800ace6:	aa03      	add	r2, sp, #12
 800ace8:	4621      	mov	r1, r4
 800acea:	4640      	mov	r0, r8
 800acec:	f7ff fee2 	bl	800aab4 <_printf_common>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d14c      	bne.n	800ad8e <_printf_i+0x1fe>
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	b004      	add	sp, #16
 800acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfe:	4835      	ldr	r0, [pc, #212]	; (800add4 <_printf_i+0x244>)
 800ad00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad0c:	6029      	str	r1, [r5, #0]
 800ad0e:	061d      	lsls	r5, r3, #24
 800ad10:	d514      	bpl.n	800ad3c <_printf_i+0x1ac>
 800ad12:	07df      	lsls	r7, r3, #31
 800ad14:	bf44      	itt	mi
 800ad16:	f043 0320 	orrmi.w	r3, r3, #32
 800ad1a:	6023      	strmi	r3, [r4, #0]
 800ad1c:	b91e      	cbnz	r6, 800ad26 <_printf_i+0x196>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	f023 0320 	bic.w	r3, r3, #32
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	2310      	movs	r3, #16
 800ad28:	e7b0      	b.n	800ac8c <_printf_i+0xfc>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	f043 0320 	orr.w	r3, r3, #32
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	2378      	movs	r3, #120	; 0x78
 800ad34:	4828      	ldr	r0, [pc, #160]	; (800add8 <_printf_i+0x248>)
 800ad36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad3a:	e7e3      	b.n	800ad04 <_printf_i+0x174>
 800ad3c:	0659      	lsls	r1, r3, #25
 800ad3e:	bf48      	it	mi
 800ad40:	b2b6      	uxthmi	r6, r6
 800ad42:	e7e6      	b.n	800ad12 <_printf_i+0x182>
 800ad44:	4615      	mov	r5, r2
 800ad46:	e7bb      	b.n	800acc0 <_printf_i+0x130>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	6826      	ldr	r6, [r4, #0]
 800ad4c:	6961      	ldr	r1, [r4, #20]
 800ad4e:	1d18      	adds	r0, r3, #4
 800ad50:	6028      	str	r0, [r5, #0]
 800ad52:	0635      	lsls	r5, r6, #24
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	d501      	bpl.n	800ad5c <_printf_i+0x1cc>
 800ad58:	6019      	str	r1, [r3, #0]
 800ad5a:	e002      	b.n	800ad62 <_printf_i+0x1d2>
 800ad5c:	0670      	lsls	r0, r6, #25
 800ad5e:	d5fb      	bpl.n	800ad58 <_printf_i+0x1c8>
 800ad60:	8019      	strh	r1, [r3, #0]
 800ad62:	2300      	movs	r3, #0
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	4615      	mov	r5, r2
 800ad68:	e7ba      	b.n	800ace0 <_printf_i+0x150>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	1d1a      	adds	r2, r3, #4
 800ad6e:	602a      	str	r2, [r5, #0]
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	2100      	movs	r1, #0
 800ad76:	4628      	mov	r0, r5
 800ad78:	f7f5 fa3a 	bl	80001f0 <memchr>
 800ad7c:	b108      	cbz	r0, 800ad82 <_printf_i+0x1f2>
 800ad7e:	1b40      	subs	r0, r0, r5
 800ad80:	6060      	str	r0, [r4, #4]
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	2300      	movs	r3, #0
 800ad88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad8c:	e7a8      	b.n	800ace0 <_printf_i+0x150>
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	462a      	mov	r2, r5
 800ad92:	4649      	mov	r1, r9
 800ad94:	4640      	mov	r0, r8
 800ad96:	47d0      	blx	sl
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d0ab      	beq.n	800acf4 <_printf_i+0x164>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	079b      	lsls	r3, r3, #30
 800ada0:	d413      	bmi.n	800adca <_printf_i+0x23a>
 800ada2:	68e0      	ldr	r0, [r4, #12]
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	4298      	cmp	r0, r3
 800ada8:	bfb8      	it	lt
 800adaa:	4618      	movlt	r0, r3
 800adac:	e7a4      	b.n	800acf8 <_printf_i+0x168>
 800adae:	2301      	movs	r3, #1
 800adb0:	4632      	mov	r2, r6
 800adb2:	4649      	mov	r1, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	47d0      	blx	sl
 800adb8:	3001      	adds	r0, #1
 800adba:	d09b      	beq.n	800acf4 <_printf_i+0x164>
 800adbc:	3501      	adds	r5, #1
 800adbe:	68e3      	ldr	r3, [r4, #12]
 800adc0:	9903      	ldr	r1, [sp, #12]
 800adc2:	1a5b      	subs	r3, r3, r1
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	dcf2      	bgt.n	800adae <_printf_i+0x21e>
 800adc8:	e7eb      	b.n	800ada2 <_printf_i+0x212>
 800adca:	2500      	movs	r5, #0
 800adcc:	f104 0619 	add.w	r6, r4, #25
 800add0:	e7f5      	b.n	800adbe <_printf_i+0x22e>
 800add2:	bf00      	nop
 800add4:	08016f92 	.word	0x08016f92
 800add8:	08016fa3 	.word	0x08016fa3

0800addc <siprintf>:
 800addc:	b40e      	push	{r1, r2, r3}
 800adde:	b500      	push	{lr}
 800ade0:	b09c      	sub	sp, #112	; 0x70
 800ade2:	ab1d      	add	r3, sp, #116	; 0x74
 800ade4:	9002      	str	r0, [sp, #8]
 800ade6:	9006      	str	r0, [sp, #24]
 800ade8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adec:	4809      	ldr	r0, [pc, #36]	; (800ae14 <siprintf+0x38>)
 800adee:	9107      	str	r1, [sp, #28]
 800adf0:	9104      	str	r1, [sp, #16]
 800adf2:	4909      	ldr	r1, [pc, #36]	; (800ae18 <siprintf+0x3c>)
 800adf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf8:	9105      	str	r1, [sp, #20]
 800adfa:	6800      	ldr	r0, [r0, #0]
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	a902      	add	r1, sp, #8
 800ae00:	f001 fb78 	bl	800c4f4 <_svfiprintf_r>
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	b01c      	add	sp, #112	; 0x70
 800ae0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	20000040 	.word	0x20000040
 800ae18:	ffff0208 	.word	0xffff0208

0800ae1c <quorem>:
 800ae1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	6903      	ldr	r3, [r0, #16]
 800ae22:	690c      	ldr	r4, [r1, #16]
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	4607      	mov	r7, r0
 800ae28:	f2c0 8081 	blt.w	800af2e <quorem+0x112>
 800ae2c:	3c01      	subs	r4, #1
 800ae2e:	f101 0814 	add.w	r8, r1, #20
 800ae32:	f100 0514 	add.w	r5, r0, #20
 800ae36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae44:	3301      	adds	r3, #1
 800ae46:	429a      	cmp	r2, r3
 800ae48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae50:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae54:	d331      	bcc.n	800aeba <quorem+0x9e>
 800ae56:	f04f 0e00 	mov.w	lr, #0
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	46ac      	mov	ip, r5
 800ae5e:	46f2      	mov	sl, lr
 800ae60:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae64:	b293      	uxth	r3, r2
 800ae66:	fb06 e303 	mla	r3, r6, r3, lr
 800ae6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	ebaa 0303 	sub.w	r3, sl, r3
 800ae74:	f8dc a000 	ldr.w	sl, [ip]
 800ae78:	0c12      	lsrs	r2, r2, #16
 800ae7a:	fa13 f38a 	uxtah	r3, r3, sl
 800ae7e:	fb06 e202 	mla	r2, r6, r2, lr
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	9b00      	ldr	r3, [sp, #0]
 800ae86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae8a:	b292      	uxth	r2, r2
 800ae8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae94:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae98:	4581      	cmp	r9, r0
 800ae9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae9e:	f84c 3b04 	str.w	r3, [ip], #4
 800aea2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aea6:	d2db      	bcs.n	800ae60 <quorem+0x44>
 800aea8:	f855 300b 	ldr.w	r3, [r5, fp]
 800aeac:	b92b      	cbnz	r3, 800aeba <quorem+0x9e>
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	3b04      	subs	r3, #4
 800aeb2:	429d      	cmp	r5, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	d32e      	bcc.n	800af16 <quorem+0xfa>
 800aeb8:	613c      	str	r4, [r7, #16]
 800aeba:	4638      	mov	r0, r7
 800aebc:	f001 f8c6 	bl	800c04c <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	db24      	blt.n	800af0e <quorem+0xf2>
 800aec4:	3601      	adds	r6, #1
 800aec6:	4628      	mov	r0, r5
 800aec8:	f04f 0c00 	mov.w	ip, #0
 800aecc:	f858 2b04 	ldr.w	r2, [r8], #4
 800aed0:	f8d0 e000 	ldr.w	lr, [r0]
 800aed4:	b293      	uxth	r3, r2
 800aed6:	ebac 0303 	sub.w	r3, ip, r3
 800aeda:	0c12      	lsrs	r2, r2, #16
 800aedc:	fa13 f38e 	uxtah	r3, r3, lr
 800aee0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeee:	45c1      	cmp	r9, r8
 800aef0:	f840 3b04 	str.w	r3, [r0], #4
 800aef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aef8:	d2e8      	bcs.n	800aecc <quorem+0xb0>
 800aefa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aefe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af02:	b922      	cbnz	r2, 800af0e <quorem+0xf2>
 800af04:	3b04      	subs	r3, #4
 800af06:	429d      	cmp	r5, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	d30a      	bcc.n	800af22 <quorem+0x106>
 800af0c:	613c      	str	r4, [r7, #16]
 800af0e:	4630      	mov	r0, r6
 800af10:	b003      	add	sp, #12
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	6812      	ldr	r2, [r2, #0]
 800af18:	3b04      	subs	r3, #4
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	d1cc      	bne.n	800aeb8 <quorem+0x9c>
 800af1e:	3c01      	subs	r4, #1
 800af20:	e7c7      	b.n	800aeb2 <quorem+0x96>
 800af22:	6812      	ldr	r2, [r2, #0]
 800af24:	3b04      	subs	r3, #4
 800af26:	2a00      	cmp	r2, #0
 800af28:	d1f0      	bne.n	800af0c <quorem+0xf0>
 800af2a:	3c01      	subs	r4, #1
 800af2c:	e7eb      	b.n	800af06 <quorem+0xea>
 800af2e:	2000      	movs	r0, #0
 800af30:	e7ee      	b.n	800af10 <quorem+0xf4>
 800af32:	0000      	movs	r0, r0
 800af34:	0000      	movs	r0, r0
	...

0800af38 <_dtoa_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	ed2d 8b04 	vpush	{d8-d9}
 800af40:	ec57 6b10 	vmov	r6, r7, d0
 800af44:	b093      	sub	sp, #76	; 0x4c
 800af46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af4c:	9106      	str	r1, [sp, #24]
 800af4e:	ee10 aa10 	vmov	sl, s0
 800af52:	4604      	mov	r4, r0
 800af54:	9209      	str	r2, [sp, #36]	; 0x24
 800af56:	930c      	str	r3, [sp, #48]	; 0x30
 800af58:	46bb      	mov	fp, r7
 800af5a:	b975      	cbnz	r5, 800af7a <_dtoa_r+0x42>
 800af5c:	2010      	movs	r0, #16
 800af5e:	f000 fddd 	bl	800bb1c <malloc>
 800af62:	4602      	mov	r2, r0
 800af64:	6260      	str	r0, [r4, #36]	; 0x24
 800af66:	b920      	cbnz	r0, 800af72 <_dtoa_r+0x3a>
 800af68:	4ba7      	ldr	r3, [pc, #668]	; (800b208 <_dtoa_r+0x2d0>)
 800af6a:	21ea      	movs	r1, #234	; 0xea
 800af6c:	48a7      	ldr	r0, [pc, #668]	; (800b20c <_dtoa_r+0x2d4>)
 800af6e:	f001 fbd1 	bl	800c714 <__assert_func>
 800af72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af76:	6005      	str	r5, [r0, #0]
 800af78:	60c5      	str	r5, [r0, #12]
 800af7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7c:	6819      	ldr	r1, [r3, #0]
 800af7e:	b151      	cbz	r1, 800af96 <_dtoa_r+0x5e>
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	604a      	str	r2, [r1, #4]
 800af84:	2301      	movs	r3, #1
 800af86:	4093      	lsls	r3, r2
 800af88:	608b      	str	r3, [r1, #8]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 fe1c 	bl	800bbc8 <_Bfree>
 800af90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	1e3b      	subs	r3, r7, #0
 800af98:	bfaa      	itet	ge
 800af9a:	2300      	movge	r3, #0
 800af9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800afa0:	f8c8 3000 	strge.w	r3, [r8]
 800afa4:	4b9a      	ldr	r3, [pc, #616]	; (800b210 <_dtoa_r+0x2d8>)
 800afa6:	bfbc      	itt	lt
 800afa8:	2201      	movlt	r2, #1
 800afaa:	f8c8 2000 	strlt.w	r2, [r8]
 800afae:	ea33 030b 	bics.w	r3, r3, fp
 800afb2:	d11b      	bne.n	800afec <_dtoa_r+0xb4>
 800afb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afc0:	4333      	orrs	r3, r6
 800afc2:	f000 8592 	beq.w	800baea <_dtoa_r+0xbb2>
 800afc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afc8:	b963      	cbnz	r3, 800afe4 <_dtoa_r+0xac>
 800afca:	4b92      	ldr	r3, [pc, #584]	; (800b214 <_dtoa_r+0x2dc>)
 800afcc:	e022      	b.n	800b014 <_dtoa_r+0xdc>
 800afce:	4b92      	ldr	r3, [pc, #584]	; (800b218 <_dtoa_r+0x2e0>)
 800afd0:	9301      	str	r3, [sp, #4]
 800afd2:	3308      	adds	r3, #8
 800afd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	9801      	ldr	r0, [sp, #4]
 800afda:	b013      	add	sp, #76	; 0x4c
 800afdc:	ecbd 8b04 	vpop	{d8-d9}
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	4b8b      	ldr	r3, [pc, #556]	; (800b214 <_dtoa_r+0x2dc>)
 800afe6:	9301      	str	r3, [sp, #4]
 800afe8:	3303      	adds	r3, #3
 800afea:	e7f3      	b.n	800afd4 <_dtoa_r+0x9c>
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	4650      	mov	r0, sl
 800aff2:	4659      	mov	r1, fp
 800aff4:	f7f5 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 800aff8:	ec4b ab19 	vmov	d9, sl, fp
 800affc:	4680      	mov	r8, r0
 800affe:	b158      	cbz	r0, 800b018 <_dtoa_r+0xe0>
 800b000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b002:	2301      	movs	r3, #1
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 856b 	beq.w	800bae4 <_dtoa_r+0xbac>
 800b00e:	4883      	ldr	r0, [pc, #524]	; (800b21c <_dtoa_r+0x2e4>)
 800b010:	6018      	str	r0, [r3, #0]
 800b012:	1e43      	subs	r3, r0, #1
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	e7df      	b.n	800afd8 <_dtoa_r+0xa0>
 800b018:	ec4b ab10 	vmov	d0, sl, fp
 800b01c:	aa10      	add	r2, sp, #64	; 0x40
 800b01e:	a911      	add	r1, sp, #68	; 0x44
 800b020:	4620      	mov	r0, r4
 800b022:	f001 f8b9 	bl	800c198 <__d2b>
 800b026:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b02a:	ee08 0a10 	vmov	s16, r0
 800b02e:	2d00      	cmp	r5, #0
 800b030:	f000 8084 	beq.w	800b13c <_dtoa_r+0x204>
 800b034:	ee19 3a90 	vmov	r3, s19
 800b038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b03c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b040:	4656      	mov	r6, sl
 800b042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b04a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b04e:	4b74      	ldr	r3, [pc, #464]	; (800b220 <_dtoa_r+0x2e8>)
 800b050:	2200      	movs	r2, #0
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 f91f 	bl	8000298 <__aeabi_dsub>
 800b05a:	a365      	add	r3, pc, #404	; (adr r3, 800b1f0 <_dtoa_r+0x2b8>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 fad2 	bl	8000608 <__aeabi_dmul>
 800b064:	a364      	add	r3, pc, #400	; (adr r3, 800b1f8 <_dtoa_r+0x2c0>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	f7f5 f917 	bl	800029c <__adddf3>
 800b06e:	4606      	mov	r6, r0
 800b070:	4628      	mov	r0, r5
 800b072:	460f      	mov	r7, r1
 800b074:	f7f5 fa5e 	bl	8000534 <__aeabi_i2d>
 800b078:	a361      	add	r3, pc, #388	; (adr r3, 800b200 <_dtoa_r+0x2c8>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 fac3 	bl	8000608 <__aeabi_dmul>
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	f7f5 f907 	bl	800029c <__adddf3>
 800b08e:	4606      	mov	r6, r0
 800b090:	460f      	mov	r7, r1
 800b092:	f7f5 fd69 	bl	8000b68 <__aeabi_d2iz>
 800b096:	2200      	movs	r2, #0
 800b098:	9000      	str	r0, [sp, #0]
 800b09a:	2300      	movs	r3, #0
 800b09c:	4630      	mov	r0, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	f7f5 fd24 	bl	8000aec <__aeabi_dcmplt>
 800b0a4:	b150      	cbz	r0, 800b0bc <_dtoa_r+0x184>
 800b0a6:	9800      	ldr	r0, [sp, #0]
 800b0a8:	f7f5 fa44 	bl	8000534 <__aeabi_i2d>
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	f7f5 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0b4:	b910      	cbnz	r0, 800b0bc <_dtoa_r+0x184>
 800b0b6:	9b00      	ldr	r3, [sp, #0]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	9b00      	ldr	r3, [sp, #0]
 800b0be:	2b16      	cmp	r3, #22
 800b0c0:	d85a      	bhi.n	800b178 <_dtoa_r+0x240>
 800b0c2:	9a00      	ldr	r2, [sp, #0]
 800b0c4:	4b57      	ldr	r3, [pc, #348]	; (800b224 <_dtoa_r+0x2ec>)
 800b0c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	ec51 0b19 	vmov	r0, r1, d9
 800b0d2:	f7f5 fd0b 	bl	8000aec <__aeabi_dcmplt>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d050      	beq.n	800b17c <_dtoa_r+0x244>
 800b0da:	9b00      	ldr	r3, [sp, #0]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0e6:	1b5d      	subs	r5, r3, r5
 800b0e8:	1e6b      	subs	r3, r5, #1
 800b0ea:	9305      	str	r3, [sp, #20]
 800b0ec:	bf45      	ittet	mi
 800b0ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800b0f2:	9304      	strmi	r3, [sp, #16]
 800b0f4:	2300      	movpl	r3, #0
 800b0f6:	2300      	movmi	r3, #0
 800b0f8:	bf4c      	ite	mi
 800b0fa:	9305      	strmi	r3, [sp, #20]
 800b0fc:	9304      	strpl	r3, [sp, #16]
 800b0fe:	9b00      	ldr	r3, [sp, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	db3d      	blt.n	800b180 <_dtoa_r+0x248>
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	9a00      	ldr	r2, [sp, #0]
 800b108:	920a      	str	r2, [sp, #40]	; 0x28
 800b10a:	4413      	add	r3, r2
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	2300      	movs	r3, #0
 800b110:	9307      	str	r3, [sp, #28]
 800b112:	9b06      	ldr	r3, [sp, #24]
 800b114:	2b09      	cmp	r3, #9
 800b116:	f200 8089 	bhi.w	800b22c <_dtoa_r+0x2f4>
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	bfc4      	itt	gt
 800b11e:	3b04      	subgt	r3, #4
 800b120:	9306      	strgt	r3, [sp, #24]
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	f1a3 0302 	sub.w	r3, r3, #2
 800b128:	bfcc      	ite	gt
 800b12a:	2500      	movgt	r5, #0
 800b12c:	2501      	movle	r5, #1
 800b12e:	2b03      	cmp	r3, #3
 800b130:	f200 8087 	bhi.w	800b242 <_dtoa_r+0x30a>
 800b134:	e8df f003 	tbb	[pc, r3]
 800b138:	59383a2d 	.word	0x59383a2d
 800b13c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b140:	441d      	add	r5, r3
 800b142:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b146:	2b20      	cmp	r3, #32
 800b148:	bfc1      	itttt	gt
 800b14a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b14e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b152:	fa0b f303 	lslgt.w	r3, fp, r3
 800b156:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b15a:	bfda      	itte	le
 800b15c:	f1c3 0320 	rsble	r3, r3, #32
 800b160:	fa06 f003 	lslle.w	r0, r6, r3
 800b164:	4318      	orrgt	r0, r3
 800b166:	f7f5 f9d5 	bl	8000514 <__aeabi_ui2d>
 800b16a:	2301      	movs	r3, #1
 800b16c:	4606      	mov	r6, r0
 800b16e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b172:	3d01      	subs	r5, #1
 800b174:	930e      	str	r3, [sp, #56]	; 0x38
 800b176:	e76a      	b.n	800b04e <_dtoa_r+0x116>
 800b178:	2301      	movs	r3, #1
 800b17a:	e7b2      	b.n	800b0e2 <_dtoa_r+0x1aa>
 800b17c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b17e:	e7b1      	b.n	800b0e4 <_dtoa_r+0x1ac>
 800b180:	9b04      	ldr	r3, [sp, #16]
 800b182:	9a00      	ldr	r2, [sp, #0]
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	9304      	str	r3, [sp, #16]
 800b188:	4253      	negs	r3, r2
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	2300      	movs	r3, #0
 800b18e:	930a      	str	r3, [sp, #40]	; 0x28
 800b190:	e7bf      	b.n	800b112 <_dtoa_r+0x1da>
 800b192:	2300      	movs	r3, #0
 800b194:	9308      	str	r3, [sp, #32]
 800b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dc55      	bgt.n	800b248 <_dtoa_r+0x310>
 800b19c:	2301      	movs	r3, #1
 800b19e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1a6:	e00c      	b.n	800b1c2 <_dtoa_r+0x28a>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e7f3      	b.n	800b194 <_dtoa_r+0x25c>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b0:	9308      	str	r3, [sp, #32]
 800b1b2:	9b00      	ldr	r3, [sp, #0]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	9302      	str	r3, [sp, #8]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	bfb8      	it	lt
 800b1c0:	2301      	movlt	r3, #1
 800b1c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	6042      	str	r2, [r0, #4]
 800b1c8:	2204      	movs	r2, #4
 800b1ca:	f102 0614 	add.w	r6, r2, #20
 800b1ce:	429e      	cmp	r6, r3
 800b1d0:	6841      	ldr	r1, [r0, #4]
 800b1d2:	d93d      	bls.n	800b250 <_dtoa_r+0x318>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fcb7 	bl	800bb48 <_Balloc>
 800b1da:	9001      	str	r0, [sp, #4]
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d13b      	bne.n	800b258 <_dtoa_r+0x320>
 800b1e0:	4b11      	ldr	r3, [pc, #68]	; (800b228 <_dtoa_r+0x2f0>)
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1e8:	e6c0      	b.n	800af6c <_dtoa_r+0x34>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e7df      	b.n	800b1ae <_dtoa_r+0x276>
 800b1ee:	bf00      	nop
 800b1f0:	636f4361 	.word	0x636f4361
 800b1f4:	3fd287a7 	.word	0x3fd287a7
 800b1f8:	8b60c8b3 	.word	0x8b60c8b3
 800b1fc:	3fc68a28 	.word	0x3fc68a28
 800b200:	509f79fb 	.word	0x509f79fb
 800b204:	3fd34413 	.word	0x3fd34413
 800b208:	08016fc1 	.word	0x08016fc1
 800b20c:	08016fd8 	.word	0x08016fd8
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	08016fbd 	.word	0x08016fbd
 800b218:	08016fb4 	.word	0x08016fb4
 800b21c:	08016f91 	.word	0x08016f91
 800b220:	3ff80000 	.word	0x3ff80000
 800b224:	080170c8 	.word	0x080170c8
 800b228:	08017033 	.word	0x08017033
 800b22c:	2501      	movs	r5, #1
 800b22e:	2300      	movs	r3, #0
 800b230:	9306      	str	r3, [sp, #24]
 800b232:	9508      	str	r5, [sp, #32]
 800b234:	f04f 33ff 	mov.w	r3, #4294967295
 800b238:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b23c:	2200      	movs	r2, #0
 800b23e:	2312      	movs	r3, #18
 800b240:	e7b0      	b.n	800b1a4 <_dtoa_r+0x26c>
 800b242:	2301      	movs	r3, #1
 800b244:	9308      	str	r3, [sp, #32]
 800b246:	e7f5      	b.n	800b234 <_dtoa_r+0x2fc>
 800b248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b24e:	e7b8      	b.n	800b1c2 <_dtoa_r+0x28a>
 800b250:	3101      	adds	r1, #1
 800b252:	6041      	str	r1, [r0, #4]
 800b254:	0052      	lsls	r2, r2, #1
 800b256:	e7b8      	b.n	800b1ca <_dtoa_r+0x292>
 800b258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b25a:	9a01      	ldr	r2, [sp, #4]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	2b0e      	cmp	r3, #14
 800b262:	f200 809d 	bhi.w	800b3a0 <_dtoa_r+0x468>
 800b266:	2d00      	cmp	r5, #0
 800b268:	f000 809a 	beq.w	800b3a0 <_dtoa_r+0x468>
 800b26c:	9b00      	ldr	r3, [sp, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd32      	ble.n	800b2d8 <_dtoa_r+0x3a0>
 800b272:	4ab7      	ldr	r2, [pc, #732]	; (800b550 <_dtoa_r+0x618>)
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b27c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b280:	9b00      	ldr	r3, [sp, #0]
 800b282:	05d8      	lsls	r0, r3, #23
 800b284:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b288:	d516      	bpl.n	800b2b8 <_dtoa_r+0x380>
 800b28a:	4bb2      	ldr	r3, [pc, #712]	; (800b554 <_dtoa_r+0x61c>)
 800b28c:	ec51 0b19 	vmov	r0, r1, d9
 800b290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b294:	f7f5 fae2 	bl	800085c <__aeabi_ddiv>
 800b298:	f007 070f 	and.w	r7, r7, #15
 800b29c:	4682      	mov	sl, r0
 800b29e:	468b      	mov	fp, r1
 800b2a0:	2503      	movs	r5, #3
 800b2a2:	4eac      	ldr	r6, [pc, #688]	; (800b554 <_dtoa_r+0x61c>)
 800b2a4:	b957      	cbnz	r7, 800b2bc <_dtoa_r+0x384>
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	4659      	mov	r1, fp
 800b2ae:	f7f5 fad5 	bl	800085c <__aeabi_ddiv>
 800b2b2:	4682      	mov	sl, r0
 800b2b4:	468b      	mov	fp, r1
 800b2b6:	e028      	b.n	800b30a <_dtoa_r+0x3d2>
 800b2b8:	2502      	movs	r5, #2
 800b2ba:	e7f2      	b.n	800b2a2 <_dtoa_r+0x36a>
 800b2bc:	07f9      	lsls	r1, r7, #31
 800b2be:	d508      	bpl.n	800b2d2 <_dtoa_r+0x39a>
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2c8:	f7f5 f99e 	bl	8000608 <__aeabi_dmul>
 800b2cc:	3501      	adds	r5, #1
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	4689      	mov	r9, r1
 800b2d2:	107f      	asrs	r7, r7, #1
 800b2d4:	3608      	adds	r6, #8
 800b2d6:	e7e5      	b.n	800b2a4 <_dtoa_r+0x36c>
 800b2d8:	f000 809b 	beq.w	800b412 <_dtoa_r+0x4da>
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	4f9d      	ldr	r7, [pc, #628]	; (800b554 <_dtoa_r+0x61c>)
 800b2e0:	425e      	negs	r6, r3
 800b2e2:	4b9b      	ldr	r3, [pc, #620]	; (800b550 <_dtoa_r+0x618>)
 800b2e4:	f006 020f 	and.w	r2, r6, #15
 800b2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	ec51 0b19 	vmov	r0, r1, d9
 800b2f4:	f7f5 f988 	bl	8000608 <__aeabi_dmul>
 800b2f8:	1136      	asrs	r6, r6, #4
 800b2fa:	4682      	mov	sl, r0
 800b2fc:	468b      	mov	fp, r1
 800b2fe:	2300      	movs	r3, #0
 800b300:	2502      	movs	r5, #2
 800b302:	2e00      	cmp	r6, #0
 800b304:	d17a      	bne.n	800b3fc <_dtoa_r+0x4c4>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1d3      	bne.n	800b2b2 <_dtoa_r+0x37a>
 800b30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 8082 	beq.w	800b416 <_dtoa_r+0x4de>
 800b312:	4b91      	ldr	r3, [pc, #580]	; (800b558 <_dtoa_r+0x620>)
 800b314:	2200      	movs	r2, #0
 800b316:	4650      	mov	r0, sl
 800b318:	4659      	mov	r1, fp
 800b31a:	f7f5 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d079      	beq.n	800b416 <_dtoa_r+0x4de>
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d076      	beq.n	800b416 <_dtoa_r+0x4de>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	dd36      	ble.n	800b39c <_dtoa_r+0x464>
 800b32e:	9b00      	ldr	r3, [sp, #0]
 800b330:	4650      	mov	r0, sl
 800b332:	4659      	mov	r1, fp
 800b334:	1e5f      	subs	r7, r3, #1
 800b336:	2200      	movs	r2, #0
 800b338:	4b88      	ldr	r3, [pc, #544]	; (800b55c <_dtoa_r+0x624>)
 800b33a:	f7f5 f965 	bl	8000608 <__aeabi_dmul>
 800b33e:	9e02      	ldr	r6, [sp, #8]
 800b340:	4682      	mov	sl, r0
 800b342:	468b      	mov	fp, r1
 800b344:	3501      	adds	r5, #1
 800b346:	4628      	mov	r0, r5
 800b348:	f7f5 f8f4 	bl	8000534 <__aeabi_i2d>
 800b34c:	4652      	mov	r2, sl
 800b34e:	465b      	mov	r3, fp
 800b350:	f7f5 f95a 	bl	8000608 <__aeabi_dmul>
 800b354:	4b82      	ldr	r3, [pc, #520]	; (800b560 <_dtoa_r+0x628>)
 800b356:	2200      	movs	r2, #0
 800b358:	f7f4 ffa0 	bl	800029c <__adddf3>
 800b35c:	46d0      	mov	r8, sl
 800b35e:	46d9      	mov	r9, fp
 800b360:	4682      	mov	sl, r0
 800b362:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b366:	2e00      	cmp	r6, #0
 800b368:	d158      	bne.n	800b41c <_dtoa_r+0x4e4>
 800b36a:	4b7e      	ldr	r3, [pc, #504]	; (800b564 <_dtoa_r+0x62c>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4640      	mov	r0, r8
 800b370:	4649      	mov	r1, r9
 800b372:	f7f4 ff91 	bl	8000298 <__aeabi_dsub>
 800b376:	4652      	mov	r2, sl
 800b378:	465b      	mov	r3, fp
 800b37a:	4680      	mov	r8, r0
 800b37c:	4689      	mov	r9, r1
 800b37e:	f7f5 fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 800b382:	2800      	cmp	r0, #0
 800b384:	f040 8295 	bne.w	800b8b2 <_dtoa_r+0x97a>
 800b388:	4652      	mov	r2, sl
 800b38a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b38e:	4640      	mov	r0, r8
 800b390:	4649      	mov	r1, r9
 800b392:	f7f5 fbab 	bl	8000aec <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	f040 8289 	bne.w	800b8ae <_dtoa_r+0x976>
 800b39c:	ec5b ab19 	vmov	sl, fp, d9
 800b3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f2c0 8148 	blt.w	800b638 <_dtoa_r+0x700>
 800b3a8:	9a00      	ldr	r2, [sp, #0]
 800b3aa:	2a0e      	cmp	r2, #14
 800b3ac:	f300 8144 	bgt.w	800b638 <_dtoa_r+0x700>
 800b3b0:	4b67      	ldr	r3, [pc, #412]	; (800b550 <_dtoa_r+0x618>)
 800b3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f280 80d5 	bge.w	800b56c <_dtoa_r+0x634>
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f300 80d1 	bgt.w	800b56c <_dtoa_r+0x634>
 800b3ca:	f040 826f 	bne.w	800b8ac <_dtoa_r+0x974>
 800b3ce:	4b65      	ldr	r3, [pc, #404]	; (800b564 <_dtoa_r+0x62c>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	f7f5 f917 	bl	8000608 <__aeabi_dmul>
 800b3da:	4652      	mov	r2, sl
 800b3dc:	465b      	mov	r3, fp
 800b3de:	f7f5 fb99 	bl	8000b14 <__aeabi_dcmpge>
 800b3e2:	9e03      	ldr	r6, [sp, #12]
 800b3e4:	4637      	mov	r7, r6
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f040 8245 	bne.w	800b876 <_dtoa_r+0x93e>
 800b3ec:	9d01      	ldr	r5, [sp, #4]
 800b3ee:	2331      	movs	r3, #49	; 0x31
 800b3f0:	f805 3b01 	strb.w	r3, [r5], #1
 800b3f4:	9b00      	ldr	r3, [sp, #0]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	e240      	b.n	800b87e <_dtoa_r+0x946>
 800b3fc:	07f2      	lsls	r2, r6, #31
 800b3fe:	d505      	bpl.n	800b40c <_dtoa_r+0x4d4>
 800b400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b404:	f7f5 f900 	bl	8000608 <__aeabi_dmul>
 800b408:	3501      	adds	r5, #1
 800b40a:	2301      	movs	r3, #1
 800b40c:	1076      	asrs	r6, r6, #1
 800b40e:	3708      	adds	r7, #8
 800b410:	e777      	b.n	800b302 <_dtoa_r+0x3ca>
 800b412:	2502      	movs	r5, #2
 800b414:	e779      	b.n	800b30a <_dtoa_r+0x3d2>
 800b416:	9f00      	ldr	r7, [sp, #0]
 800b418:	9e03      	ldr	r6, [sp, #12]
 800b41a:	e794      	b.n	800b346 <_dtoa_r+0x40e>
 800b41c:	9901      	ldr	r1, [sp, #4]
 800b41e:	4b4c      	ldr	r3, [pc, #304]	; (800b550 <_dtoa_r+0x618>)
 800b420:	4431      	add	r1, r6
 800b422:	910d      	str	r1, [sp, #52]	; 0x34
 800b424:	9908      	ldr	r1, [sp, #32]
 800b426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b42a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b42e:	2900      	cmp	r1, #0
 800b430:	d043      	beq.n	800b4ba <_dtoa_r+0x582>
 800b432:	494d      	ldr	r1, [pc, #308]	; (800b568 <_dtoa_r+0x630>)
 800b434:	2000      	movs	r0, #0
 800b436:	f7f5 fa11 	bl	800085c <__aeabi_ddiv>
 800b43a:	4652      	mov	r2, sl
 800b43c:	465b      	mov	r3, fp
 800b43e:	f7f4 ff2b 	bl	8000298 <__aeabi_dsub>
 800b442:	9d01      	ldr	r5, [sp, #4]
 800b444:	4682      	mov	sl, r0
 800b446:	468b      	mov	fp, r1
 800b448:	4649      	mov	r1, r9
 800b44a:	4640      	mov	r0, r8
 800b44c:	f7f5 fb8c 	bl	8000b68 <__aeabi_d2iz>
 800b450:	4606      	mov	r6, r0
 800b452:	f7f5 f86f 	bl	8000534 <__aeabi_i2d>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	f7f4 ff1b 	bl	8000298 <__aeabi_dsub>
 800b462:	3630      	adds	r6, #48	; 0x30
 800b464:	f805 6b01 	strb.w	r6, [r5], #1
 800b468:	4652      	mov	r2, sl
 800b46a:	465b      	mov	r3, fp
 800b46c:	4680      	mov	r8, r0
 800b46e:	4689      	mov	r9, r1
 800b470:	f7f5 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800b474:	2800      	cmp	r0, #0
 800b476:	d163      	bne.n	800b540 <_dtoa_r+0x608>
 800b478:	4642      	mov	r2, r8
 800b47a:	464b      	mov	r3, r9
 800b47c:	4936      	ldr	r1, [pc, #216]	; (800b558 <_dtoa_r+0x620>)
 800b47e:	2000      	movs	r0, #0
 800b480:	f7f4 ff0a 	bl	8000298 <__aeabi_dsub>
 800b484:	4652      	mov	r2, sl
 800b486:	465b      	mov	r3, fp
 800b488:	f7f5 fb30 	bl	8000aec <__aeabi_dcmplt>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f040 80b5 	bne.w	800b5fc <_dtoa_r+0x6c4>
 800b492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b494:	429d      	cmp	r5, r3
 800b496:	d081      	beq.n	800b39c <_dtoa_r+0x464>
 800b498:	4b30      	ldr	r3, [pc, #192]	; (800b55c <_dtoa_r+0x624>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	4650      	mov	r0, sl
 800b49e:	4659      	mov	r1, fp
 800b4a0:	f7f5 f8b2 	bl	8000608 <__aeabi_dmul>
 800b4a4:	4b2d      	ldr	r3, [pc, #180]	; (800b55c <_dtoa_r+0x624>)
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	468b      	mov	fp, r1
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f7f5 f8aa 	bl	8000608 <__aeabi_dmul>
 800b4b4:	4680      	mov	r8, r0
 800b4b6:	4689      	mov	r9, r1
 800b4b8:	e7c6      	b.n	800b448 <_dtoa_r+0x510>
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	4659      	mov	r1, fp
 800b4be:	f7f5 f8a3 	bl	8000608 <__aeabi_dmul>
 800b4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4c4:	9d01      	ldr	r5, [sp, #4]
 800b4c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	468b      	mov	fp, r1
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f7f5 fb4a 	bl	8000b68 <__aeabi_d2iz>
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	f7f5 f82d 	bl	8000534 <__aeabi_i2d>
 800b4da:	3630      	adds	r6, #48	; 0x30
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	f7f4 fed8 	bl	8000298 <__aeabi_dsub>
 800b4e8:	f805 6b01 	strb.w	r6, [r5], #1
 800b4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4689      	mov	r9, r1
 800b4f4:	f04f 0200 	mov.w	r2, #0
 800b4f8:	d124      	bne.n	800b544 <_dtoa_r+0x60c>
 800b4fa:	4b1b      	ldr	r3, [pc, #108]	; (800b568 <_dtoa_r+0x630>)
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	4659      	mov	r1, fp
 800b500:	f7f4 fecc 	bl	800029c <__adddf3>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4640      	mov	r0, r8
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7f5 fb0c 	bl	8000b28 <__aeabi_dcmpgt>
 800b510:	2800      	cmp	r0, #0
 800b512:	d173      	bne.n	800b5fc <_dtoa_r+0x6c4>
 800b514:	4652      	mov	r2, sl
 800b516:	465b      	mov	r3, fp
 800b518:	4913      	ldr	r1, [pc, #76]	; (800b568 <_dtoa_r+0x630>)
 800b51a:	2000      	movs	r0, #0
 800b51c:	f7f4 febc 	bl	8000298 <__aeabi_dsub>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4640      	mov	r0, r8
 800b526:	4649      	mov	r1, r9
 800b528:	f7f5 fae0 	bl	8000aec <__aeabi_dcmplt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f43f af35 	beq.w	800b39c <_dtoa_r+0x464>
 800b532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b534:	1e6b      	subs	r3, r5, #1
 800b536:	930f      	str	r3, [sp, #60]	; 0x3c
 800b538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b53c:	2b30      	cmp	r3, #48	; 0x30
 800b53e:	d0f8      	beq.n	800b532 <_dtoa_r+0x5fa>
 800b540:	9700      	str	r7, [sp, #0]
 800b542:	e049      	b.n	800b5d8 <_dtoa_r+0x6a0>
 800b544:	4b05      	ldr	r3, [pc, #20]	; (800b55c <_dtoa_r+0x624>)
 800b546:	f7f5 f85f 	bl	8000608 <__aeabi_dmul>
 800b54a:	4680      	mov	r8, r0
 800b54c:	4689      	mov	r9, r1
 800b54e:	e7bd      	b.n	800b4cc <_dtoa_r+0x594>
 800b550:	080170c8 	.word	0x080170c8
 800b554:	080170a0 	.word	0x080170a0
 800b558:	3ff00000 	.word	0x3ff00000
 800b55c:	40240000 	.word	0x40240000
 800b560:	401c0000 	.word	0x401c0000
 800b564:	40140000 	.word	0x40140000
 800b568:	3fe00000 	.word	0x3fe00000
 800b56c:	9d01      	ldr	r5, [sp, #4]
 800b56e:	4656      	mov	r6, sl
 800b570:	465f      	mov	r7, fp
 800b572:	4642      	mov	r2, r8
 800b574:	464b      	mov	r3, r9
 800b576:	4630      	mov	r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	f7f5 f96f 	bl	800085c <__aeabi_ddiv>
 800b57e:	f7f5 faf3 	bl	8000b68 <__aeabi_d2iz>
 800b582:	4682      	mov	sl, r0
 800b584:	f7f4 ffd6 	bl	8000534 <__aeabi_i2d>
 800b588:	4642      	mov	r2, r8
 800b58a:	464b      	mov	r3, r9
 800b58c:	f7f5 f83c 	bl	8000608 <__aeabi_dmul>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b59c:	f7f4 fe7c 	bl	8000298 <__aeabi_dsub>
 800b5a0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5a4:	9e01      	ldr	r6, [sp, #4]
 800b5a6:	9f03      	ldr	r7, [sp, #12]
 800b5a8:	1bae      	subs	r6, r5, r6
 800b5aa:	42b7      	cmp	r7, r6
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	d135      	bne.n	800b61e <_dtoa_r+0x6e6>
 800b5b2:	f7f4 fe73 	bl	800029c <__adddf3>
 800b5b6:	4642      	mov	r2, r8
 800b5b8:	464b      	mov	r3, r9
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	f7f5 fab3 	bl	8000b28 <__aeabi_dcmpgt>
 800b5c2:	b9d0      	cbnz	r0, 800b5fa <_dtoa_r+0x6c2>
 800b5c4:	4642      	mov	r2, r8
 800b5c6:	464b      	mov	r3, r9
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f5 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5d0:	b110      	cbz	r0, 800b5d8 <_dtoa_r+0x6a0>
 800b5d2:	f01a 0f01 	tst.w	sl, #1
 800b5d6:	d110      	bne.n	800b5fa <_dtoa_r+0x6c2>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	ee18 1a10 	vmov	r1, s16
 800b5de:	f000 faf3 	bl	800bbc8 <_Bfree>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9800      	ldr	r0, [sp, #0]
 800b5e6:	702b      	strb	r3, [r5, #0]
 800b5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	6018      	str	r0, [r3, #0]
 800b5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f43f acf1 	beq.w	800afd8 <_dtoa_r+0xa0>
 800b5f6:	601d      	str	r5, [r3, #0]
 800b5f8:	e4ee      	b.n	800afd8 <_dtoa_r+0xa0>
 800b5fa:	9f00      	ldr	r7, [sp, #0]
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	461d      	mov	r5, r3
 800b600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b604:	2a39      	cmp	r2, #57	; 0x39
 800b606:	d106      	bne.n	800b616 <_dtoa_r+0x6de>
 800b608:	9a01      	ldr	r2, [sp, #4]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d1f7      	bne.n	800b5fe <_dtoa_r+0x6c6>
 800b60e:	9901      	ldr	r1, [sp, #4]
 800b610:	2230      	movs	r2, #48	; 0x30
 800b612:	3701      	adds	r7, #1
 800b614:	700a      	strb	r2, [r1, #0]
 800b616:	781a      	ldrb	r2, [r3, #0]
 800b618:	3201      	adds	r2, #1
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	e790      	b.n	800b540 <_dtoa_r+0x608>
 800b61e:	4ba6      	ldr	r3, [pc, #664]	; (800b8b8 <_dtoa_r+0x980>)
 800b620:	2200      	movs	r2, #0
 800b622:	f7f4 fff1 	bl	8000608 <__aeabi_dmul>
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	4606      	mov	r6, r0
 800b62c:	460f      	mov	r7, r1
 800b62e:	f7f5 fa53 	bl	8000ad8 <__aeabi_dcmpeq>
 800b632:	2800      	cmp	r0, #0
 800b634:	d09d      	beq.n	800b572 <_dtoa_r+0x63a>
 800b636:	e7cf      	b.n	800b5d8 <_dtoa_r+0x6a0>
 800b638:	9a08      	ldr	r2, [sp, #32]
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	f000 80d7 	beq.w	800b7ee <_dtoa_r+0x8b6>
 800b640:	9a06      	ldr	r2, [sp, #24]
 800b642:	2a01      	cmp	r2, #1
 800b644:	f300 80ba 	bgt.w	800b7bc <_dtoa_r+0x884>
 800b648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b64a:	2a00      	cmp	r2, #0
 800b64c:	f000 80b2 	beq.w	800b7b4 <_dtoa_r+0x87c>
 800b650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b654:	9e07      	ldr	r6, [sp, #28]
 800b656:	9d04      	ldr	r5, [sp, #16]
 800b658:	9a04      	ldr	r2, [sp, #16]
 800b65a:	441a      	add	r2, r3
 800b65c:	9204      	str	r2, [sp, #16]
 800b65e:	9a05      	ldr	r2, [sp, #20]
 800b660:	2101      	movs	r1, #1
 800b662:	441a      	add	r2, r3
 800b664:	4620      	mov	r0, r4
 800b666:	9205      	str	r2, [sp, #20]
 800b668:	f000 fb66 	bl	800bd38 <__i2b>
 800b66c:	4607      	mov	r7, r0
 800b66e:	2d00      	cmp	r5, #0
 800b670:	dd0c      	ble.n	800b68c <_dtoa_r+0x754>
 800b672:	9b05      	ldr	r3, [sp, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	dd09      	ble.n	800b68c <_dtoa_r+0x754>
 800b678:	42ab      	cmp	r3, r5
 800b67a:	9a04      	ldr	r2, [sp, #16]
 800b67c:	bfa8      	it	ge
 800b67e:	462b      	movge	r3, r5
 800b680:	1ad2      	subs	r2, r2, r3
 800b682:	9204      	str	r2, [sp, #16]
 800b684:	9a05      	ldr	r2, [sp, #20]
 800b686:	1aed      	subs	r5, r5, r3
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	9b07      	ldr	r3, [sp, #28]
 800b68e:	b31b      	cbz	r3, 800b6d8 <_dtoa_r+0x7a0>
 800b690:	9b08      	ldr	r3, [sp, #32]
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 80af 	beq.w	800b7f6 <_dtoa_r+0x8be>
 800b698:	2e00      	cmp	r6, #0
 800b69a:	dd13      	ble.n	800b6c4 <_dtoa_r+0x78c>
 800b69c:	4639      	mov	r1, r7
 800b69e:	4632      	mov	r2, r6
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fc09 	bl	800beb8 <__pow5mult>
 800b6a6:	ee18 2a10 	vmov	r2, s16
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 fb58 	bl	800bd64 <__multiply>
 800b6b4:	ee18 1a10 	vmov	r1, s16
 800b6b8:	4680      	mov	r8, r0
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 fa84 	bl	800bbc8 <_Bfree>
 800b6c0:	ee08 8a10 	vmov	s16, r8
 800b6c4:	9b07      	ldr	r3, [sp, #28]
 800b6c6:	1b9a      	subs	r2, r3, r6
 800b6c8:	d006      	beq.n	800b6d8 <_dtoa_r+0x7a0>
 800b6ca:	ee18 1a10 	vmov	r1, s16
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 fbf2 	bl	800beb8 <__pow5mult>
 800b6d4:	ee08 0a10 	vmov	s16, r0
 800b6d8:	2101      	movs	r1, #1
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 fb2c 	bl	800bd38 <__i2b>
 800b6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	f340 8088 	ble.w	800b7fa <_dtoa_r+0x8c2>
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 fbe2 	bl	800beb8 <__pow5mult>
 800b6f4:	9b06      	ldr	r3, [sp, #24]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	f340 8081 	ble.w	800b800 <_dtoa_r+0x8c8>
 800b6fe:	f04f 0800 	mov.w	r8, #0
 800b702:	6933      	ldr	r3, [r6, #16]
 800b704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b708:	6918      	ldr	r0, [r3, #16]
 800b70a:	f000 fac5 	bl	800bc98 <__hi0bits>
 800b70e:	f1c0 0020 	rsb	r0, r0, #32
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	4418      	add	r0, r3
 800b716:	f010 001f 	ands.w	r0, r0, #31
 800b71a:	f000 8092 	beq.w	800b842 <_dtoa_r+0x90a>
 800b71e:	f1c0 0320 	rsb	r3, r0, #32
 800b722:	2b04      	cmp	r3, #4
 800b724:	f340 808a 	ble.w	800b83c <_dtoa_r+0x904>
 800b728:	f1c0 001c 	rsb	r0, r0, #28
 800b72c:	9b04      	ldr	r3, [sp, #16]
 800b72e:	4403      	add	r3, r0
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	9b05      	ldr	r3, [sp, #20]
 800b734:	4403      	add	r3, r0
 800b736:	4405      	add	r5, r0
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	9b04      	ldr	r3, [sp, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dd07      	ble.n	800b750 <_dtoa_r+0x818>
 800b740:	ee18 1a10 	vmov	r1, s16
 800b744:	461a      	mov	r2, r3
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fc10 	bl	800bf6c <__lshift>
 800b74c:	ee08 0a10 	vmov	s16, r0
 800b750:	9b05      	ldr	r3, [sp, #20]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dd05      	ble.n	800b762 <_dtoa_r+0x82a>
 800b756:	4631      	mov	r1, r6
 800b758:	461a      	mov	r2, r3
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 fc06 	bl	800bf6c <__lshift>
 800b760:	4606      	mov	r6, r0
 800b762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b764:	2b00      	cmp	r3, #0
 800b766:	d06e      	beq.n	800b846 <_dtoa_r+0x90e>
 800b768:	ee18 0a10 	vmov	r0, s16
 800b76c:	4631      	mov	r1, r6
 800b76e:	f000 fc6d 	bl	800c04c <__mcmp>
 800b772:	2800      	cmp	r0, #0
 800b774:	da67      	bge.n	800b846 <_dtoa_r+0x90e>
 800b776:	9b00      	ldr	r3, [sp, #0]
 800b778:	3b01      	subs	r3, #1
 800b77a:	ee18 1a10 	vmov	r1, s16
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	220a      	movs	r2, #10
 800b782:	2300      	movs	r3, #0
 800b784:	4620      	mov	r0, r4
 800b786:	f000 fa41 	bl	800bc0c <__multadd>
 800b78a:	9b08      	ldr	r3, [sp, #32]
 800b78c:	ee08 0a10 	vmov	s16, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 81b1 	beq.w	800baf8 <_dtoa_r+0xbc0>
 800b796:	2300      	movs	r3, #0
 800b798:	4639      	mov	r1, r7
 800b79a:	220a      	movs	r2, #10
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 fa35 	bl	800bc0c <__multadd>
 800b7a2:	9b02      	ldr	r3, [sp, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	f300 808e 	bgt.w	800b8c8 <_dtoa_r+0x990>
 800b7ac:	9b06      	ldr	r3, [sp, #24]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	dc51      	bgt.n	800b856 <_dtoa_r+0x91e>
 800b7b2:	e089      	b.n	800b8c8 <_dtoa_r+0x990>
 800b7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7ba:	e74b      	b.n	800b654 <_dtoa_r+0x71c>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	1e5e      	subs	r6, r3, #1
 800b7c0:	9b07      	ldr	r3, [sp, #28]
 800b7c2:	42b3      	cmp	r3, r6
 800b7c4:	bfbf      	itttt	lt
 800b7c6:	9b07      	ldrlt	r3, [sp, #28]
 800b7c8:	9607      	strlt	r6, [sp, #28]
 800b7ca:	1af2      	sublt	r2, r6, r3
 800b7cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b7ce:	bfb6      	itet	lt
 800b7d0:	189b      	addlt	r3, r3, r2
 800b7d2:	1b9e      	subge	r6, r3, r6
 800b7d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	bfb8      	it	lt
 800b7da:	2600      	movlt	r6, #0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bfb7      	itett	lt
 800b7e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b7e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b7e8:	1a9d      	sublt	r5, r3, r2
 800b7ea:	2300      	movlt	r3, #0
 800b7ec:	e734      	b.n	800b658 <_dtoa_r+0x720>
 800b7ee:	9e07      	ldr	r6, [sp, #28]
 800b7f0:	9d04      	ldr	r5, [sp, #16]
 800b7f2:	9f08      	ldr	r7, [sp, #32]
 800b7f4:	e73b      	b.n	800b66e <_dtoa_r+0x736>
 800b7f6:	9a07      	ldr	r2, [sp, #28]
 800b7f8:	e767      	b.n	800b6ca <_dtoa_r+0x792>
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	dc18      	bgt.n	800b832 <_dtoa_r+0x8fa>
 800b800:	f1ba 0f00 	cmp.w	sl, #0
 800b804:	d115      	bne.n	800b832 <_dtoa_r+0x8fa>
 800b806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b80a:	b993      	cbnz	r3, 800b832 <_dtoa_r+0x8fa>
 800b80c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b810:	0d1b      	lsrs	r3, r3, #20
 800b812:	051b      	lsls	r3, r3, #20
 800b814:	b183      	cbz	r3, 800b838 <_dtoa_r+0x900>
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	3301      	adds	r3, #1
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	9b05      	ldr	r3, [sp, #20]
 800b81e:	3301      	adds	r3, #1
 800b820:	9305      	str	r3, [sp, #20]
 800b822:	f04f 0801 	mov.w	r8, #1
 800b826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f47f af6a 	bne.w	800b702 <_dtoa_r+0x7ca>
 800b82e:	2001      	movs	r0, #1
 800b830:	e76f      	b.n	800b712 <_dtoa_r+0x7da>
 800b832:	f04f 0800 	mov.w	r8, #0
 800b836:	e7f6      	b.n	800b826 <_dtoa_r+0x8ee>
 800b838:	4698      	mov	r8, r3
 800b83a:	e7f4      	b.n	800b826 <_dtoa_r+0x8ee>
 800b83c:	f43f af7d 	beq.w	800b73a <_dtoa_r+0x802>
 800b840:	4618      	mov	r0, r3
 800b842:	301c      	adds	r0, #28
 800b844:	e772      	b.n	800b72c <_dtoa_r+0x7f4>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	dc37      	bgt.n	800b8bc <_dtoa_r+0x984>
 800b84c:	9b06      	ldr	r3, [sp, #24]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	dd34      	ble.n	800b8bc <_dtoa_r+0x984>
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	9302      	str	r3, [sp, #8]
 800b856:	9b02      	ldr	r3, [sp, #8]
 800b858:	b96b      	cbnz	r3, 800b876 <_dtoa_r+0x93e>
 800b85a:	4631      	mov	r1, r6
 800b85c:	2205      	movs	r2, #5
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f9d4 	bl	800bc0c <__multadd>
 800b864:	4601      	mov	r1, r0
 800b866:	4606      	mov	r6, r0
 800b868:	ee18 0a10 	vmov	r0, s16
 800b86c:	f000 fbee 	bl	800c04c <__mcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	f73f adbb 	bgt.w	800b3ec <_dtoa_r+0x4b4>
 800b876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b878:	9d01      	ldr	r5, [sp, #4]
 800b87a:	43db      	mvns	r3, r3
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	f04f 0800 	mov.w	r8, #0
 800b882:	4631      	mov	r1, r6
 800b884:	4620      	mov	r0, r4
 800b886:	f000 f99f 	bl	800bbc8 <_Bfree>
 800b88a:	2f00      	cmp	r7, #0
 800b88c:	f43f aea4 	beq.w	800b5d8 <_dtoa_r+0x6a0>
 800b890:	f1b8 0f00 	cmp.w	r8, #0
 800b894:	d005      	beq.n	800b8a2 <_dtoa_r+0x96a>
 800b896:	45b8      	cmp	r8, r7
 800b898:	d003      	beq.n	800b8a2 <_dtoa_r+0x96a>
 800b89a:	4641      	mov	r1, r8
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f993 	bl	800bbc8 <_Bfree>
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 f98f 	bl	800bbc8 <_Bfree>
 800b8aa:	e695      	b.n	800b5d8 <_dtoa_r+0x6a0>
 800b8ac:	2600      	movs	r6, #0
 800b8ae:	4637      	mov	r7, r6
 800b8b0:	e7e1      	b.n	800b876 <_dtoa_r+0x93e>
 800b8b2:	9700      	str	r7, [sp, #0]
 800b8b4:	4637      	mov	r7, r6
 800b8b6:	e599      	b.n	800b3ec <_dtoa_r+0x4b4>
 800b8b8:	40240000 	.word	0x40240000
 800b8bc:	9b08      	ldr	r3, [sp, #32]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f000 80ca 	beq.w	800ba58 <_dtoa_r+0xb20>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	9302      	str	r3, [sp, #8]
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	dd05      	ble.n	800b8d8 <_dtoa_r+0x9a0>
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fb4b 	bl	800bf6c <__lshift>
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	f1b8 0f00 	cmp.w	r8, #0
 800b8dc:	d05b      	beq.n	800b996 <_dtoa_r+0xa5e>
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 f931 	bl	800bb48 <_Balloc>
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	b928      	cbnz	r0, 800b8f6 <_dtoa_r+0x9be>
 800b8ea:	4b87      	ldr	r3, [pc, #540]	; (800bb08 <_dtoa_r+0xbd0>)
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8f2:	f7ff bb3b 	b.w	800af6c <_dtoa_r+0x34>
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	3202      	adds	r2, #2
 800b8fa:	0092      	lsls	r2, r2, #2
 800b8fc:	f107 010c 	add.w	r1, r7, #12
 800b900:	300c      	adds	r0, #12
 800b902:	f000 f913 	bl	800bb2c <memcpy>
 800b906:	2201      	movs	r2, #1
 800b908:	4629      	mov	r1, r5
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fb2e 	bl	800bf6c <__lshift>
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	f103 0901 	add.w	r9, r3, #1
 800b916:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b91a:	4413      	add	r3, r2
 800b91c:	9305      	str	r3, [sp, #20]
 800b91e:	f00a 0301 	and.w	r3, sl, #1
 800b922:	46b8      	mov	r8, r7
 800b924:	9304      	str	r3, [sp, #16]
 800b926:	4607      	mov	r7, r0
 800b928:	4631      	mov	r1, r6
 800b92a:	ee18 0a10 	vmov	r0, s16
 800b92e:	f7ff fa75 	bl	800ae1c <quorem>
 800b932:	4641      	mov	r1, r8
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b93a:	ee18 0a10 	vmov	r0, s16
 800b93e:	f000 fb85 	bl	800c04c <__mcmp>
 800b942:	463a      	mov	r2, r7
 800b944:	9003      	str	r0, [sp, #12]
 800b946:	4631      	mov	r1, r6
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fb9b 	bl	800c084 <__mdiff>
 800b94e:	68c2      	ldr	r2, [r0, #12]
 800b950:	f109 3bff 	add.w	fp, r9, #4294967295
 800b954:	4605      	mov	r5, r0
 800b956:	bb02      	cbnz	r2, 800b99a <_dtoa_r+0xa62>
 800b958:	4601      	mov	r1, r0
 800b95a:	ee18 0a10 	vmov	r0, s16
 800b95e:	f000 fb75 	bl	800c04c <__mcmp>
 800b962:	4602      	mov	r2, r0
 800b964:	4629      	mov	r1, r5
 800b966:	4620      	mov	r0, r4
 800b968:	9207      	str	r2, [sp, #28]
 800b96a:	f000 f92d 	bl	800bbc8 <_Bfree>
 800b96e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b972:	ea43 0102 	orr.w	r1, r3, r2
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	430b      	orrs	r3, r1
 800b97a:	464d      	mov	r5, r9
 800b97c:	d10f      	bne.n	800b99e <_dtoa_r+0xa66>
 800b97e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b982:	d02a      	beq.n	800b9da <_dtoa_r+0xaa2>
 800b984:	9b03      	ldr	r3, [sp, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd02      	ble.n	800b990 <_dtoa_r+0xa58>
 800b98a:	9b02      	ldr	r3, [sp, #8]
 800b98c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b990:	f88b a000 	strb.w	sl, [fp]
 800b994:	e775      	b.n	800b882 <_dtoa_r+0x94a>
 800b996:	4638      	mov	r0, r7
 800b998:	e7ba      	b.n	800b910 <_dtoa_r+0x9d8>
 800b99a:	2201      	movs	r2, #1
 800b99c:	e7e2      	b.n	800b964 <_dtoa_r+0xa2c>
 800b99e:	9b03      	ldr	r3, [sp, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	db04      	blt.n	800b9ae <_dtoa_r+0xa76>
 800b9a4:	9906      	ldr	r1, [sp, #24]
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	9904      	ldr	r1, [sp, #16]
 800b9aa:	430b      	orrs	r3, r1
 800b9ac:	d122      	bne.n	800b9f4 <_dtoa_r+0xabc>
 800b9ae:	2a00      	cmp	r2, #0
 800b9b0:	ddee      	ble.n	800b990 <_dtoa_r+0xa58>
 800b9b2:	ee18 1a10 	vmov	r1, s16
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fad7 	bl	800bf6c <__lshift>
 800b9be:	4631      	mov	r1, r6
 800b9c0:	ee08 0a10 	vmov	s16, r0
 800b9c4:	f000 fb42 	bl	800c04c <__mcmp>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	dc03      	bgt.n	800b9d4 <_dtoa_r+0xa9c>
 800b9cc:	d1e0      	bne.n	800b990 <_dtoa_r+0xa58>
 800b9ce:	f01a 0f01 	tst.w	sl, #1
 800b9d2:	d0dd      	beq.n	800b990 <_dtoa_r+0xa58>
 800b9d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9d8:	d1d7      	bne.n	800b98a <_dtoa_r+0xa52>
 800b9da:	2339      	movs	r3, #57	; 0x39
 800b9dc:	f88b 3000 	strb.w	r3, [fp]
 800b9e0:	462b      	mov	r3, r5
 800b9e2:	461d      	mov	r5, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9ea:	2a39      	cmp	r2, #57	; 0x39
 800b9ec:	d071      	beq.n	800bad2 <_dtoa_r+0xb9a>
 800b9ee:	3201      	adds	r2, #1
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	e746      	b.n	800b882 <_dtoa_r+0x94a>
 800b9f4:	2a00      	cmp	r2, #0
 800b9f6:	dd07      	ble.n	800ba08 <_dtoa_r+0xad0>
 800b9f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9fc:	d0ed      	beq.n	800b9da <_dtoa_r+0xaa2>
 800b9fe:	f10a 0301 	add.w	r3, sl, #1
 800ba02:	f88b 3000 	strb.w	r3, [fp]
 800ba06:	e73c      	b.n	800b882 <_dtoa_r+0x94a>
 800ba08:	9b05      	ldr	r3, [sp, #20]
 800ba0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ba0e:	4599      	cmp	r9, r3
 800ba10:	d047      	beq.n	800baa2 <_dtoa_r+0xb6a>
 800ba12:	ee18 1a10 	vmov	r1, s16
 800ba16:	2300      	movs	r3, #0
 800ba18:	220a      	movs	r2, #10
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 f8f6 	bl	800bc0c <__multadd>
 800ba20:	45b8      	cmp	r8, r7
 800ba22:	ee08 0a10 	vmov	s16, r0
 800ba26:	f04f 0300 	mov.w	r3, #0
 800ba2a:	f04f 020a 	mov.w	r2, #10
 800ba2e:	4641      	mov	r1, r8
 800ba30:	4620      	mov	r0, r4
 800ba32:	d106      	bne.n	800ba42 <_dtoa_r+0xb0a>
 800ba34:	f000 f8ea 	bl	800bc0c <__multadd>
 800ba38:	4680      	mov	r8, r0
 800ba3a:	4607      	mov	r7, r0
 800ba3c:	f109 0901 	add.w	r9, r9, #1
 800ba40:	e772      	b.n	800b928 <_dtoa_r+0x9f0>
 800ba42:	f000 f8e3 	bl	800bc0c <__multadd>
 800ba46:	4639      	mov	r1, r7
 800ba48:	4680      	mov	r8, r0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	220a      	movs	r2, #10
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 f8dc 	bl	800bc0c <__multadd>
 800ba54:	4607      	mov	r7, r0
 800ba56:	e7f1      	b.n	800ba3c <_dtoa_r+0xb04>
 800ba58:	9b03      	ldr	r3, [sp, #12]
 800ba5a:	9302      	str	r3, [sp, #8]
 800ba5c:	9d01      	ldr	r5, [sp, #4]
 800ba5e:	ee18 0a10 	vmov	r0, s16
 800ba62:	4631      	mov	r1, r6
 800ba64:	f7ff f9da 	bl	800ae1c <quorem>
 800ba68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba6c:	9b01      	ldr	r3, [sp, #4]
 800ba6e:	f805 ab01 	strb.w	sl, [r5], #1
 800ba72:	1aea      	subs	r2, r5, r3
 800ba74:	9b02      	ldr	r3, [sp, #8]
 800ba76:	4293      	cmp	r3, r2
 800ba78:	dd09      	ble.n	800ba8e <_dtoa_r+0xb56>
 800ba7a:	ee18 1a10 	vmov	r1, s16
 800ba7e:	2300      	movs	r3, #0
 800ba80:	220a      	movs	r2, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 f8c2 	bl	800bc0c <__multadd>
 800ba88:	ee08 0a10 	vmov	s16, r0
 800ba8c:	e7e7      	b.n	800ba5e <_dtoa_r+0xb26>
 800ba8e:	9b02      	ldr	r3, [sp, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfc8      	it	gt
 800ba94:	461d      	movgt	r5, r3
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	bfd8      	it	le
 800ba9a:	2501      	movle	r5, #1
 800ba9c:	441d      	add	r5, r3
 800ba9e:	f04f 0800 	mov.w	r8, #0
 800baa2:	ee18 1a10 	vmov	r1, s16
 800baa6:	2201      	movs	r2, #1
 800baa8:	4620      	mov	r0, r4
 800baaa:	f000 fa5f 	bl	800bf6c <__lshift>
 800baae:	4631      	mov	r1, r6
 800bab0:	ee08 0a10 	vmov	s16, r0
 800bab4:	f000 faca 	bl	800c04c <__mcmp>
 800bab8:	2800      	cmp	r0, #0
 800baba:	dc91      	bgt.n	800b9e0 <_dtoa_r+0xaa8>
 800babc:	d102      	bne.n	800bac4 <_dtoa_r+0xb8c>
 800babe:	f01a 0f01 	tst.w	sl, #1
 800bac2:	d18d      	bne.n	800b9e0 <_dtoa_r+0xaa8>
 800bac4:	462b      	mov	r3, r5
 800bac6:	461d      	mov	r5, r3
 800bac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bacc:	2a30      	cmp	r2, #48	; 0x30
 800bace:	d0fa      	beq.n	800bac6 <_dtoa_r+0xb8e>
 800bad0:	e6d7      	b.n	800b882 <_dtoa_r+0x94a>
 800bad2:	9a01      	ldr	r2, [sp, #4]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d184      	bne.n	800b9e2 <_dtoa_r+0xaaa>
 800bad8:	9b00      	ldr	r3, [sp, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	2331      	movs	r3, #49	; 0x31
 800bae0:	7013      	strb	r3, [r2, #0]
 800bae2:	e6ce      	b.n	800b882 <_dtoa_r+0x94a>
 800bae4:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <_dtoa_r+0xbd4>)
 800bae6:	f7ff ba95 	b.w	800b014 <_dtoa_r+0xdc>
 800baea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800baec:	2b00      	cmp	r3, #0
 800baee:	f47f aa6e 	bne.w	800afce <_dtoa_r+0x96>
 800baf2:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <_dtoa_r+0xbd8>)
 800baf4:	f7ff ba8e 	b.w	800b014 <_dtoa_r+0xdc>
 800baf8:	9b02      	ldr	r3, [sp, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dcae      	bgt.n	800ba5c <_dtoa_r+0xb24>
 800bafe:	9b06      	ldr	r3, [sp, #24]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	f73f aea8 	bgt.w	800b856 <_dtoa_r+0x91e>
 800bb06:	e7a9      	b.n	800ba5c <_dtoa_r+0xb24>
 800bb08:	08017033 	.word	0x08017033
 800bb0c:	08016f90 	.word	0x08016f90
 800bb10:	08016fb4 	.word	0x08016fb4

0800bb14 <_localeconv_r>:
 800bb14:	4800      	ldr	r0, [pc, #0]	; (800bb18 <_localeconv_r+0x4>)
 800bb16:	4770      	bx	lr
 800bb18:	20000194 	.word	0x20000194

0800bb1c <malloc>:
 800bb1c:	4b02      	ldr	r3, [pc, #8]	; (800bb28 <malloc+0xc>)
 800bb1e:	4601      	mov	r1, r0
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	f000 bc17 	b.w	800c354 <_malloc_r>
 800bb26:	bf00      	nop
 800bb28:	20000040 	.word	0x20000040

0800bb2c <memcpy>:
 800bb2c:	440a      	add	r2, r1
 800bb2e:	4291      	cmp	r1, r2
 800bb30:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb34:	d100      	bne.n	800bb38 <memcpy+0xc>
 800bb36:	4770      	bx	lr
 800bb38:	b510      	push	{r4, lr}
 800bb3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb42:	4291      	cmp	r1, r2
 800bb44:	d1f9      	bne.n	800bb3a <memcpy+0xe>
 800bb46:	bd10      	pop	{r4, pc}

0800bb48 <_Balloc>:
 800bb48:	b570      	push	{r4, r5, r6, lr}
 800bb4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	460d      	mov	r5, r1
 800bb50:	b976      	cbnz	r6, 800bb70 <_Balloc+0x28>
 800bb52:	2010      	movs	r0, #16
 800bb54:	f7ff ffe2 	bl	800bb1c <malloc>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	6260      	str	r0, [r4, #36]	; 0x24
 800bb5c:	b920      	cbnz	r0, 800bb68 <_Balloc+0x20>
 800bb5e:	4b18      	ldr	r3, [pc, #96]	; (800bbc0 <_Balloc+0x78>)
 800bb60:	4818      	ldr	r0, [pc, #96]	; (800bbc4 <_Balloc+0x7c>)
 800bb62:	2166      	movs	r1, #102	; 0x66
 800bb64:	f000 fdd6 	bl	800c714 <__assert_func>
 800bb68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb6c:	6006      	str	r6, [r0, #0]
 800bb6e:	60c6      	str	r6, [r0, #12]
 800bb70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb72:	68f3      	ldr	r3, [r6, #12]
 800bb74:	b183      	cbz	r3, 800bb98 <_Balloc+0x50>
 800bb76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb7e:	b9b8      	cbnz	r0, 800bbb0 <_Balloc+0x68>
 800bb80:	2101      	movs	r1, #1
 800bb82:	fa01 f605 	lsl.w	r6, r1, r5
 800bb86:	1d72      	adds	r2, r6, #5
 800bb88:	0092      	lsls	r2, r2, #2
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f000 fb60 	bl	800c250 <_calloc_r>
 800bb90:	b160      	cbz	r0, 800bbac <_Balloc+0x64>
 800bb92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb96:	e00e      	b.n	800bbb6 <_Balloc+0x6e>
 800bb98:	2221      	movs	r2, #33	; 0x21
 800bb9a:	2104      	movs	r1, #4
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f000 fb57 	bl	800c250 <_calloc_r>
 800bba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bba4:	60f0      	str	r0, [r6, #12]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e4      	bne.n	800bb76 <_Balloc+0x2e>
 800bbac:	2000      	movs	r0, #0
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	6802      	ldr	r2, [r0, #0]
 800bbb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbbc:	e7f7      	b.n	800bbae <_Balloc+0x66>
 800bbbe:	bf00      	nop
 800bbc0:	08016fc1 	.word	0x08016fc1
 800bbc4:	08017044 	.word	0x08017044

0800bbc8 <_Bfree>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbcc:	4605      	mov	r5, r0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	b976      	cbnz	r6, 800bbf0 <_Bfree+0x28>
 800bbd2:	2010      	movs	r0, #16
 800bbd4:	f7ff ffa2 	bl	800bb1c <malloc>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	6268      	str	r0, [r5, #36]	; 0x24
 800bbdc:	b920      	cbnz	r0, 800bbe8 <_Bfree+0x20>
 800bbde:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <_Bfree+0x3c>)
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <_Bfree+0x40>)
 800bbe2:	218a      	movs	r1, #138	; 0x8a
 800bbe4:	f000 fd96 	bl	800c714 <__assert_func>
 800bbe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbec:	6006      	str	r6, [r0, #0]
 800bbee:	60c6      	str	r6, [r0, #12]
 800bbf0:	b13c      	cbz	r4, 800bc02 <_Bfree+0x3a>
 800bbf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbf4:	6862      	ldr	r2, [r4, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbfc:	6021      	str	r1, [r4, #0]
 800bbfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	08016fc1 	.word	0x08016fc1
 800bc08:	08017044 	.word	0x08017044

0800bc0c <__multadd>:
 800bc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc10:	690d      	ldr	r5, [r1, #16]
 800bc12:	4607      	mov	r7, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	461e      	mov	r6, r3
 800bc18:	f101 0c14 	add.w	ip, r1, #20
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc22:	b299      	uxth	r1, r3
 800bc24:	fb02 6101 	mla	r1, r2, r1, r6
 800bc28:	0c1e      	lsrs	r6, r3, #16
 800bc2a:	0c0b      	lsrs	r3, r1, #16
 800bc2c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc30:	b289      	uxth	r1, r1
 800bc32:	3001      	adds	r0, #1
 800bc34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc38:	4285      	cmp	r5, r0
 800bc3a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc42:	dcec      	bgt.n	800bc1e <__multadd+0x12>
 800bc44:	b30e      	cbz	r6, 800bc8a <__multadd+0x7e>
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	42ab      	cmp	r3, r5
 800bc4a:	dc19      	bgt.n	800bc80 <__multadd+0x74>
 800bc4c:	6861      	ldr	r1, [r4, #4]
 800bc4e:	4638      	mov	r0, r7
 800bc50:	3101      	adds	r1, #1
 800bc52:	f7ff ff79 	bl	800bb48 <_Balloc>
 800bc56:	4680      	mov	r8, r0
 800bc58:	b928      	cbnz	r0, 800bc66 <__multadd+0x5a>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <__multadd+0x84>)
 800bc5e:	480d      	ldr	r0, [pc, #52]	; (800bc94 <__multadd+0x88>)
 800bc60:	21b5      	movs	r1, #181	; 0xb5
 800bc62:	f000 fd57 	bl	800c714 <__assert_func>
 800bc66:	6922      	ldr	r2, [r4, #16]
 800bc68:	3202      	adds	r2, #2
 800bc6a:	f104 010c 	add.w	r1, r4, #12
 800bc6e:	0092      	lsls	r2, r2, #2
 800bc70:	300c      	adds	r0, #12
 800bc72:	f7ff ff5b 	bl	800bb2c <memcpy>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff ffa5 	bl	800bbc8 <_Bfree>
 800bc7e:	4644      	mov	r4, r8
 800bc80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc84:	3501      	adds	r5, #1
 800bc86:	615e      	str	r6, [r3, #20]
 800bc88:	6125      	str	r5, [r4, #16]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	08017033 	.word	0x08017033
 800bc94:	08017044 	.word	0x08017044

0800bc98 <__hi0bits>:
 800bc98:	0c03      	lsrs	r3, r0, #16
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	b9d3      	cbnz	r3, 800bcd4 <__hi0bits+0x3c>
 800bc9e:	0400      	lsls	r0, r0, #16
 800bca0:	2310      	movs	r3, #16
 800bca2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bca6:	bf04      	itt	eq
 800bca8:	0200      	lsleq	r0, r0, #8
 800bcaa:	3308      	addeq	r3, #8
 800bcac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcb0:	bf04      	itt	eq
 800bcb2:	0100      	lsleq	r0, r0, #4
 800bcb4:	3304      	addeq	r3, #4
 800bcb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcba:	bf04      	itt	eq
 800bcbc:	0080      	lsleq	r0, r0, #2
 800bcbe:	3302      	addeq	r3, #2
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	db05      	blt.n	800bcd0 <__hi0bits+0x38>
 800bcc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcc8:	f103 0301 	add.w	r3, r3, #1
 800bccc:	bf08      	it	eq
 800bcce:	2320      	moveq	r3, #32
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	4770      	bx	lr
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e7e4      	b.n	800bca2 <__hi0bits+0xa>

0800bcd8 <__lo0bits>:
 800bcd8:	6803      	ldr	r3, [r0, #0]
 800bcda:	f013 0207 	ands.w	r2, r3, #7
 800bcde:	4601      	mov	r1, r0
 800bce0:	d00b      	beq.n	800bcfa <__lo0bits+0x22>
 800bce2:	07da      	lsls	r2, r3, #31
 800bce4:	d423      	bmi.n	800bd2e <__lo0bits+0x56>
 800bce6:	0798      	lsls	r0, r3, #30
 800bce8:	bf49      	itett	mi
 800bcea:	085b      	lsrmi	r3, r3, #1
 800bcec:	089b      	lsrpl	r3, r3, #2
 800bcee:	2001      	movmi	r0, #1
 800bcf0:	600b      	strmi	r3, [r1, #0]
 800bcf2:	bf5c      	itt	pl
 800bcf4:	600b      	strpl	r3, [r1, #0]
 800bcf6:	2002      	movpl	r0, #2
 800bcf8:	4770      	bx	lr
 800bcfa:	b298      	uxth	r0, r3
 800bcfc:	b9a8      	cbnz	r0, 800bd2a <__lo0bits+0x52>
 800bcfe:	0c1b      	lsrs	r3, r3, #16
 800bd00:	2010      	movs	r0, #16
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	b90a      	cbnz	r2, 800bd0a <__lo0bits+0x32>
 800bd06:	3008      	adds	r0, #8
 800bd08:	0a1b      	lsrs	r3, r3, #8
 800bd0a:	071a      	lsls	r2, r3, #28
 800bd0c:	bf04      	itt	eq
 800bd0e:	091b      	lsreq	r3, r3, #4
 800bd10:	3004      	addeq	r0, #4
 800bd12:	079a      	lsls	r2, r3, #30
 800bd14:	bf04      	itt	eq
 800bd16:	089b      	lsreq	r3, r3, #2
 800bd18:	3002      	addeq	r0, #2
 800bd1a:	07da      	lsls	r2, r3, #31
 800bd1c:	d403      	bmi.n	800bd26 <__lo0bits+0x4e>
 800bd1e:	085b      	lsrs	r3, r3, #1
 800bd20:	f100 0001 	add.w	r0, r0, #1
 800bd24:	d005      	beq.n	800bd32 <__lo0bits+0x5a>
 800bd26:	600b      	str	r3, [r1, #0]
 800bd28:	4770      	bx	lr
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	e7e9      	b.n	800bd02 <__lo0bits+0x2a>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	4770      	bx	lr
 800bd32:	2020      	movs	r0, #32
 800bd34:	4770      	bx	lr
	...

0800bd38 <__i2b>:
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	f7ff ff03 	bl	800bb48 <_Balloc>
 800bd42:	4602      	mov	r2, r0
 800bd44:	b928      	cbnz	r0, 800bd52 <__i2b+0x1a>
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <__i2b+0x24>)
 800bd48:	4805      	ldr	r0, [pc, #20]	; (800bd60 <__i2b+0x28>)
 800bd4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd4e:	f000 fce1 	bl	800c714 <__assert_func>
 800bd52:	2301      	movs	r3, #1
 800bd54:	6144      	str	r4, [r0, #20]
 800bd56:	6103      	str	r3, [r0, #16]
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	bf00      	nop
 800bd5c:	08017033 	.word	0x08017033
 800bd60:	08017044 	.word	0x08017044

0800bd64 <__multiply>:
 800bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd68:	4691      	mov	r9, r2
 800bd6a:	690a      	ldr	r2, [r1, #16]
 800bd6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	bfb8      	it	lt
 800bd74:	460b      	movlt	r3, r1
 800bd76:	460c      	mov	r4, r1
 800bd78:	bfbc      	itt	lt
 800bd7a:	464c      	movlt	r4, r9
 800bd7c:	4699      	movlt	r9, r3
 800bd7e:	6927      	ldr	r7, [r4, #16]
 800bd80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	6861      	ldr	r1, [r4, #4]
 800bd88:	eb07 060a 	add.w	r6, r7, sl
 800bd8c:	42b3      	cmp	r3, r6
 800bd8e:	b085      	sub	sp, #20
 800bd90:	bfb8      	it	lt
 800bd92:	3101      	addlt	r1, #1
 800bd94:	f7ff fed8 	bl	800bb48 <_Balloc>
 800bd98:	b930      	cbnz	r0, 800bda8 <__multiply+0x44>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	4b44      	ldr	r3, [pc, #272]	; (800beb0 <__multiply+0x14c>)
 800bd9e:	4845      	ldr	r0, [pc, #276]	; (800beb4 <__multiply+0x150>)
 800bda0:	f240 115d 	movw	r1, #349	; 0x15d
 800bda4:	f000 fcb6 	bl	800c714 <__assert_func>
 800bda8:	f100 0514 	add.w	r5, r0, #20
 800bdac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bdb0:	462b      	mov	r3, r5
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4543      	cmp	r3, r8
 800bdb6:	d321      	bcc.n	800bdfc <__multiply+0x98>
 800bdb8:	f104 0314 	add.w	r3, r4, #20
 800bdbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bdc0:	f109 0314 	add.w	r3, r9, #20
 800bdc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bdc8:	9202      	str	r2, [sp, #8]
 800bdca:	1b3a      	subs	r2, r7, r4
 800bdcc:	3a15      	subs	r2, #21
 800bdce:	f022 0203 	bic.w	r2, r2, #3
 800bdd2:	3204      	adds	r2, #4
 800bdd4:	f104 0115 	add.w	r1, r4, #21
 800bdd8:	428f      	cmp	r7, r1
 800bdda:	bf38      	it	cc
 800bddc:	2204      	movcc	r2, #4
 800bdde:	9201      	str	r2, [sp, #4]
 800bde0:	9a02      	ldr	r2, [sp, #8]
 800bde2:	9303      	str	r3, [sp, #12]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d80c      	bhi.n	800be02 <__multiply+0x9e>
 800bde8:	2e00      	cmp	r6, #0
 800bdea:	dd03      	ble.n	800bdf4 <__multiply+0x90>
 800bdec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d05a      	beq.n	800beaa <__multiply+0x146>
 800bdf4:	6106      	str	r6, [r0, #16]
 800bdf6:	b005      	add	sp, #20
 800bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfc:	f843 2b04 	str.w	r2, [r3], #4
 800be00:	e7d8      	b.n	800bdb4 <__multiply+0x50>
 800be02:	f8b3 a000 	ldrh.w	sl, [r3]
 800be06:	f1ba 0f00 	cmp.w	sl, #0
 800be0a:	d024      	beq.n	800be56 <__multiply+0xf2>
 800be0c:	f104 0e14 	add.w	lr, r4, #20
 800be10:	46a9      	mov	r9, r5
 800be12:	f04f 0c00 	mov.w	ip, #0
 800be16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be1a:	f8d9 1000 	ldr.w	r1, [r9]
 800be1e:	fa1f fb82 	uxth.w	fp, r2
 800be22:	b289      	uxth	r1, r1
 800be24:	fb0a 110b 	mla	r1, sl, fp, r1
 800be28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be2c:	f8d9 2000 	ldr.w	r2, [r9]
 800be30:	4461      	add	r1, ip
 800be32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be36:	fb0a c20b 	mla	r2, sl, fp, ip
 800be3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be3e:	b289      	uxth	r1, r1
 800be40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be44:	4577      	cmp	r7, lr
 800be46:	f849 1b04 	str.w	r1, [r9], #4
 800be4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be4e:	d8e2      	bhi.n	800be16 <__multiply+0xb2>
 800be50:	9a01      	ldr	r2, [sp, #4]
 800be52:	f845 c002 	str.w	ip, [r5, r2]
 800be56:	9a03      	ldr	r2, [sp, #12]
 800be58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be5c:	3304      	adds	r3, #4
 800be5e:	f1b9 0f00 	cmp.w	r9, #0
 800be62:	d020      	beq.n	800bea6 <__multiply+0x142>
 800be64:	6829      	ldr	r1, [r5, #0]
 800be66:	f104 0c14 	add.w	ip, r4, #20
 800be6a:	46ae      	mov	lr, r5
 800be6c:	f04f 0a00 	mov.w	sl, #0
 800be70:	f8bc b000 	ldrh.w	fp, [ip]
 800be74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be78:	fb09 220b 	mla	r2, r9, fp, r2
 800be7c:	4492      	add	sl, r2
 800be7e:	b289      	uxth	r1, r1
 800be80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be84:	f84e 1b04 	str.w	r1, [lr], #4
 800be88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be8c:	f8be 1000 	ldrh.w	r1, [lr]
 800be90:	0c12      	lsrs	r2, r2, #16
 800be92:	fb09 1102 	mla	r1, r9, r2, r1
 800be96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be9a:	4567      	cmp	r7, ip
 800be9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bea0:	d8e6      	bhi.n	800be70 <__multiply+0x10c>
 800bea2:	9a01      	ldr	r2, [sp, #4]
 800bea4:	50a9      	str	r1, [r5, r2]
 800bea6:	3504      	adds	r5, #4
 800bea8:	e79a      	b.n	800bde0 <__multiply+0x7c>
 800beaa:	3e01      	subs	r6, #1
 800beac:	e79c      	b.n	800bde8 <__multiply+0x84>
 800beae:	bf00      	nop
 800beb0:	08017033 	.word	0x08017033
 800beb4:	08017044 	.word	0x08017044

0800beb8 <__pow5mult>:
 800beb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bebc:	4615      	mov	r5, r2
 800bebe:	f012 0203 	ands.w	r2, r2, #3
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	d007      	beq.n	800bed8 <__pow5mult+0x20>
 800bec8:	4c25      	ldr	r4, [pc, #148]	; (800bf60 <__pow5mult+0xa8>)
 800beca:	3a01      	subs	r2, #1
 800becc:	2300      	movs	r3, #0
 800bece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bed2:	f7ff fe9b 	bl	800bc0c <__multadd>
 800bed6:	4607      	mov	r7, r0
 800bed8:	10ad      	asrs	r5, r5, #2
 800beda:	d03d      	beq.n	800bf58 <__pow5mult+0xa0>
 800bedc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bede:	b97c      	cbnz	r4, 800bf00 <__pow5mult+0x48>
 800bee0:	2010      	movs	r0, #16
 800bee2:	f7ff fe1b 	bl	800bb1c <malloc>
 800bee6:	4602      	mov	r2, r0
 800bee8:	6270      	str	r0, [r6, #36]	; 0x24
 800beea:	b928      	cbnz	r0, 800bef8 <__pow5mult+0x40>
 800beec:	4b1d      	ldr	r3, [pc, #116]	; (800bf64 <__pow5mult+0xac>)
 800beee:	481e      	ldr	r0, [pc, #120]	; (800bf68 <__pow5mult+0xb0>)
 800bef0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bef4:	f000 fc0e 	bl	800c714 <__assert_func>
 800bef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800befc:	6004      	str	r4, [r0, #0]
 800befe:	60c4      	str	r4, [r0, #12]
 800bf00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf08:	b94c      	cbnz	r4, 800bf1e <__pow5mult+0x66>
 800bf0a:	f240 2171 	movw	r1, #625	; 0x271
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ff12 	bl	800bd38 <__i2b>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	6003      	str	r3, [r0, #0]
 800bf1e:	f04f 0900 	mov.w	r9, #0
 800bf22:	07eb      	lsls	r3, r5, #31
 800bf24:	d50a      	bpl.n	800bf3c <__pow5mult+0x84>
 800bf26:	4639      	mov	r1, r7
 800bf28:	4622      	mov	r2, r4
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7ff ff1a 	bl	800bd64 <__multiply>
 800bf30:	4639      	mov	r1, r7
 800bf32:	4680      	mov	r8, r0
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7ff fe47 	bl	800bbc8 <_Bfree>
 800bf3a:	4647      	mov	r7, r8
 800bf3c:	106d      	asrs	r5, r5, #1
 800bf3e:	d00b      	beq.n	800bf58 <__pow5mult+0xa0>
 800bf40:	6820      	ldr	r0, [r4, #0]
 800bf42:	b938      	cbnz	r0, 800bf54 <__pow5mult+0x9c>
 800bf44:	4622      	mov	r2, r4
 800bf46:	4621      	mov	r1, r4
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7ff ff0b 	bl	800bd64 <__multiply>
 800bf4e:	6020      	str	r0, [r4, #0]
 800bf50:	f8c0 9000 	str.w	r9, [r0]
 800bf54:	4604      	mov	r4, r0
 800bf56:	e7e4      	b.n	800bf22 <__pow5mult+0x6a>
 800bf58:	4638      	mov	r0, r7
 800bf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5e:	bf00      	nop
 800bf60:	08017190 	.word	0x08017190
 800bf64:	08016fc1 	.word	0x08016fc1
 800bf68:	08017044 	.word	0x08017044

0800bf6c <__lshift>:
 800bf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	6849      	ldr	r1, [r1, #4]
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	4691      	mov	r9, r2
 800bf80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf84:	f108 0601 	add.w	r6, r8, #1
 800bf88:	42b3      	cmp	r3, r6
 800bf8a:	db0b      	blt.n	800bfa4 <__lshift+0x38>
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f7ff fddb 	bl	800bb48 <_Balloc>
 800bf92:	4605      	mov	r5, r0
 800bf94:	b948      	cbnz	r0, 800bfaa <__lshift+0x3e>
 800bf96:	4602      	mov	r2, r0
 800bf98:	4b2a      	ldr	r3, [pc, #168]	; (800c044 <__lshift+0xd8>)
 800bf9a:	482b      	ldr	r0, [pc, #172]	; (800c048 <__lshift+0xdc>)
 800bf9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfa0:	f000 fbb8 	bl	800c714 <__assert_func>
 800bfa4:	3101      	adds	r1, #1
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	e7ee      	b.n	800bf88 <__lshift+0x1c>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f100 0114 	add.w	r1, r0, #20
 800bfb0:	f100 0210 	add.w	r2, r0, #16
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	4553      	cmp	r3, sl
 800bfb8:	db37      	blt.n	800c02a <__lshift+0xbe>
 800bfba:	6920      	ldr	r0, [r4, #16]
 800bfbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfc0:	f104 0314 	add.w	r3, r4, #20
 800bfc4:	f019 091f 	ands.w	r9, r9, #31
 800bfc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfd0:	d02f      	beq.n	800c032 <__lshift+0xc6>
 800bfd2:	f1c9 0e20 	rsb	lr, r9, #32
 800bfd6:	468a      	mov	sl, r1
 800bfd8:	f04f 0c00 	mov.w	ip, #0
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	fa02 f209 	lsl.w	r2, r2, r9
 800bfe2:	ea42 020c 	orr.w	r2, r2, ip
 800bfe6:	f84a 2b04 	str.w	r2, [sl], #4
 800bfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfee:	4298      	cmp	r0, r3
 800bff0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bff4:	d8f2      	bhi.n	800bfdc <__lshift+0x70>
 800bff6:	1b03      	subs	r3, r0, r4
 800bff8:	3b15      	subs	r3, #21
 800bffa:	f023 0303 	bic.w	r3, r3, #3
 800bffe:	3304      	adds	r3, #4
 800c000:	f104 0215 	add.w	r2, r4, #21
 800c004:	4290      	cmp	r0, r2
 800c006:	bf38      	it	cc
 800c008:	2304      	movcc	r3, #4
 800c00a:	f841 c003 	str.w	ip, [r1, r3]
 800c00e:	f1bc 0f00 	cmp.w	ip, #0
 800c012:	d001      	beq.n	800c018 <__lshift+0xac>
 800c014:	f108 0602 	add.w	r6, r8, #2
 800c018:	3e01      	subs	r6, #1
 800c01a:	4638      	mov	r0, r7
 800c01c:	612e      	str	r6, [r5, #16]
 800c01e:	4621      	mov	r1, r4
 800c020:	f7ff fdd2 	bl	800bbc8 <_Bfree>
 800c024:	4628      	mov	r0, r5
 800c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c02e:	3301      	adds	r3, #1
 800c030:	e7c1      	b.n	800bfb6 <__lshift+0x4a>
 800c032:	3904      	subs	r1, #4
 800c034:	f853 2b04 	ldr.w	r2, [r3], #4
 800c038:	f841 2f04 	str.w	r2, [r1, #4]!
 800c03c:	4298      	cmp	r0, r3
 800c03e:	d8f9      	bhi.n	800c034 <__lshift+0xc8>
 800c040:	e7ea      	b.n	800c018 <__lshift+0xac>
 800c042:	bf00      	nop
 800c044:	08017033 	.word	0x08017033
 800c048:	08017044 	.word	0x08017044

0800c04c <__mcmp>:
 800c04c:	b530      	push	{r4, r5, lr}
 800c04e:	6902      	ldr	r2, [r0, #16]
 800c050:	690c      	ldr	r4, [r1, #16]
 800c052:	1b12      	subs	r2, r2, r4
 800c054:	d10e      	bne.n	800c074 <__mcmp+0x28>
 800c056:	f100 0314 	add.w	r3, r0, #20
 800c05a:	3114      	adds	r1, #20
 800c05c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c060:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c064:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c068:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c06c:	42a5      	cmp	r5, r4
 800c06e:	d003      	beq.n	800c078 <__mcmp+0x2c>
 800c070:	d305      	bcc.n	800c07e <__mcmp+0x32>
 800c072:	2201      	movs	r2, #1
 800c074:	4610      	mov	r0, r2
 800c076:	bd30      	pop	{r4, r5, pc}
 800c078:	4283      	cmp	r3, r0
 800c07a:	d3f3      	bcc.n	800c064 <__mcmp+0x18>
 800c07c:	e7fa      	b.n	800c074 <__mcmp+0x28>
 800c07e:	f04f 32ff 	mov.w	r2, #4294967295
 800c082:	e7f7      	b.n	800c074 <__mcmp+0x28>

0800c084 <__mdiff>:
 800c084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	460c      	mov	r4, r1
 800c08a:	4606      	mov	r6, r0
 800c08c:	4611      	mov	r1, r2
 800c08e:	4620      	mov	r0, r4
 800c090:	4690      	mov	r8, r2
 800c092:	f7ff ffdb 	bl	800c04c <__mcmp>
 800c096:	1e05      	subs	r5, r0, #0
 800c098:	d110      	bne.n	800c0bc <__mdiff+0x38>
 800c09a:	4629      	mov	r1, r5
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7ff fd53 	bl	800bb48 <_Balloc>
 800c0a2:	b930      	cbnz	r0, 800c0b2 <__mdiff+0x2e>
 800c0a4:	4b3a      	ldr	r3, [pc, #232]	; (800c190 <__mdiff+0x10c>)
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	f240 2132 	movw	r1, #562	; 0x232
 800c0ac:	4839      	ldr	r0, [pc, #228]	; (800c194 <__mdiff+0x110>)
 800c0ae:	f000 fb31 	bl	800c714 <__assert_func>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	bfa4      	itt	ge
 800c0be:	4643      	movge	r3, r8
 800c0c0:	46a0      	movge	r8, r4
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0c8:	bfa6      	itte	ge
 800c0ca:	461c      	movge	r4, r3
 800c0cc:	2500      	movge	r5, #0
 800c0ce:	2501      	movlt	r5, #1
 800c0d0:	f7ff fd3a 	bl	800bb48 <_Balloc>
 800c0d4:	b920      	cbnz	r0, 800c0e0 <__mdiff+0x5c>
 800c0d6:	4b2e      	ldr	r3, [pc, #184]	; (800c190 <__mdiff+0x10c>)
 800c0d8:	4602      	mov	r2, r0
 800c0da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0de:	e7e5      	b.n	800c0ac <__mdiff+0x28>
 800c0e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0e4:	6926      	ldr	r6, [r4, #16]
 800c0e6:	60c5      	str	r5, [r0, #12]
 800c0e8:	f104 0914 	add.w	r9, r4, #20
 800c0ec:	f108 0514 	add.w	r5, r8, #20
 800c0f0:	f100 0e14 	add.w	lr, r0, #20
 800c0f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0fc:	f108 0210 	add.w	r2, r8, #16
 800c100:	46f2      	mov	sl, lr
 800c102:	2100      	movs	r1, #0
 800c104:	f859 3b04 	ldr.w	r3, [r9], #4
 800c108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c10c:	fa1f f883 	uxth.w	r8, r3
 800c110:	fa11 f18b 	uxtah	r1, r1, fp
 800c114:	0c1b      	lsrs	r3, r3, #16
 800c116:	eba1 0808 	sub.w	r8, r1, r8
 800c11a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c11e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c122:	fa1f f888 	uxth.w	r8, r8
 800c126:	1419      	asrs	r1, r3, #16
 800c128:	454e      	cmp	r6, r9
 800c12a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c12e:	f84a 3b04 	str.w	r3, [sl], #4
 800c132:	d8e7      	bhi.n	800c104 <__mdiff+0x80>
 800c134:	1b33      	subs	r3, r6, r4
 800c136:	3b15      	subs	r3, #21
 800c138:	f023 0303 	bic.w	r3, r3, #3
 800c13c:	3304      	adds	r3, #4
 800c13e:	3415      	adds	r4, #21
 800c140:	42a6      	cmp	r6, r4
 800c142:	bf38      	it	cc
 800c144:	2304      	movcc	r3, #4
 800c146:	441d      	add	r5, r3
 800c148:	4473      	add	r3, lr
 800c14a:	469e      	mov	lr, r3
 800c14c:	462e      	mov	r6, r5
 800c14e:	4566      	cmp	r6, ip
 800c150:	d30e      	bcc.n	800c170 <__mdiff+0xec>
 800c152:	f10c 0203 	add.w	r2, ip, #3
 800c156:	1b52      	subs	r2, r2, r5
 800c158:	f022 0203 	bic.w	r2, r2, #3
 800c15c:	3d03      	subs	r5, #3
 800c15e:	45ac      	cmp	ip, r5
 800c160:	bf38      	it	cc
 800c162:	2200      	movcc	r2, #0
 800c164:	441a      	add	r2, r3
 800c166:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c16a:	b17b      	cbz	r3, 800c18c <__mdiff+0x108>
 800c16c:	6107      	str	r7, [r0, #16]
 800c16e:	e7a3      	b.n	800c0b8 <__mdiff+0x34>
 800c170:	f856 8b04 	ldr.w	r8, [r6], #4
 800c174:	fa11 f288 	uxtah	r2, r1, r8
 800c178:	1414      	asrs	r4, r2, #16
 800c17a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c17e:	b292      	uxth	r2, r2
 800c180:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c184:	f84e 2b04 	str.w	r2, [lr], #4
 800c188:	1421      	asrs	r1, r4, #16
 800c18a:	e7e0      	b.n	800c14e <__mdiff+0xca>
 800c18c:	3f01      	subs	r7, #1
 800c18e:	e7ea      	b.n	800c166 <__mdiff+0xe2>
 800c190:	08017033 	.word	0x08017033
 800c194:	08017044 	.word	0x08017044

0800c198 <__d2b>:
 800c198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c19c:	4689      	mov	r9, r1
 800c19e:	2101      	movs	r1, #1
 800c1a0:	ec57 6b10 	vmov	r6, r7, d0
 800c1a4:	4690      	mov	r8, r2
 800c1a6:	f7ff fccf 	bl	800bb48 <_Balloc>
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	b930      	cbnz	r0, 800c1bc <__d2b+0x24>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	4b25      	ldr	r3, [pc, #148]	; (800c248 <__d2b+0xb0>)
 800c1b2:	4826      	ldr	r0, [pc, #152]	; (800c24c <__d2b+0xb4>)
 800c1b4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1b8:	f000 faac 	bl	800c714 <__assert_func>
 800c1bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1c4:	bb35      	cbnz	r5, 800c214 <__d2b+0x7c>
 800c1c6:	2e00      	cmp	r6, #0
 800c1c8:	9301      	str	r3, [sp, #4]
 800c1ca:	d028      	beq.n	800c21e <__d2b+0x86>
 800c1cc:	4668      	mov	r0, sp
 800c1ce:	9600      	str	r6, [sp, #0]
 800c1d0:	f7ff fd82 	bl	800bcd8 <__lo0bits>
 800c1d4:	9900      	ldr	r1, [sp, #0]
 800c1d6:	b300      	cbz	r0, 800c21a <__d2b+0x82>
 800c1d8:	9a01      	ldr	r2, [sp, #4]
 800c1da:	f1c0 0320 	rsb	r3, r0, #32
 800c1de:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	40c2      	lsrs	r2, r0
 800c1e6:	6163      	str	r3, [r4, #20]
 800c1e8:	9201      	str	r2, [sp, #4]
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	61a3      	str	r3, [r4, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	bf14      	ite	ne
 800c1f2:	2202      	movne	r2, #2
 800c1f4:	2201      	moveq	r2, #1
 800c1f6:	6122      	str	r2, [r4, #16]
 800c1f8:	b1d5      	cbz	r5, 800c230 <__d2b+0x98>
 800c1fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1fe:	4405      	add	r5, r0
 800c200:	f8c9 5000 	str.w	r5, [r9]
 800c204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c208:	f8c8 0000 	str.w	r0, [r8]
 800c20c:	4620      	mov	r0, r4
 800c20e:	b003      	add	sp, #12
 800c210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c218:	e7d5      	b.n	800c1c6 <__d2b+0x2e>
 800c21a:	6161      	str	r1, [r4, #20]
 800c21c:	e7e5      	b.n	800c1ea <__d2b+0x52>
 800c21e:	a801      	add	r0, sp, #4
 800c220:	f7ff fd5a 	bl	800bcd8 <__lo0bits>
 800c224:	9b01      	ldr	r3, [sp, #4]
 800c226:	6163      	str	r3, [r4, #20]
 800c228:	2201      	movs	r2, #1
 800c22a:	6122      	str	r2, [r4, #16]
 800c22c:	3020      	adds	r0, #32
 800c22e:	e7e3      	b.n	800c1f8 <__d2b+0x60>
 800c230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c238:	f8c9 0000 	str.w	r0, [r9]
 800c23c:	6918      	ldr	r0, [r3, #16]
 800c23e:	f7ff fd2b 	bl	800bc98 <__hi0bits>
 800c242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c246:	e7df      	b.n	800c208 <__d2b+0x70>
 800c248:	08017033 	.word	0x08017033
 800c24c:	08017044 	.word	0x08017044

0800c250 <_calloc_r>:
 800c250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c252:	fba1 2402 	umull	r2, r4, r1, r2
 800c256:	b94c      	cbnz	r4, 800c26c <_calloc_r+0x1c>
 800c258:	4611      	mov	r1, r2
 800c25a:	9201      	str	r2, [sp, #4]
 800c25c:	f000 f87a 	bl	800c354 <_malloc_r>
 800c260:	9a01      	ldr	r2, [sp, #4]
 800c262:	4605      	mov	r5, r0
 800c264:	b930      	cbnz	r0, 800c274 <_calloc_r+0x24>
 800c266:	4628      	mov	r0, r5
 800c268:	b003      	add	sp, #12
 800c26a:	bd30      	pop	{r4, r5, pc}
 800c26c:	220c      	movs	r2, #12
 800c26e:	6002      	str	r2, [r0, #0]
 800c270:	2500      	movs	r5, #0
 800c272:	e7f8      	b.n	800c266 <_calloc_r+0x16>
 800c274:	4621      	mov	r1, r4
 800c276:	f7fe f93f 	bl	800a4f8 <memset>
 800c27a:	e7f4      	b.n	800c266 <_calloc_r+0x16>

0800c27c <_free_r>:
 800c27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c27e:	2900      	cmp	r1, #0
 800c280:	d044      	beq.n	800c30c <_free_r+0x90>
 800c282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c286:	9001      	str	r0, [sp, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f1a1 0404 	sub.w	r4, r1, #4
 800c28e:	bfb8      	it	lt
 800c290:	18e4      	addlt	r4, r4, r3
 800c292:	f000 fa9b 	bl	800c7cc <__malloc_lock>
 800c296:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <_free_r+0x94>)
 800c298:	9801      	ldr	r0, [sp, #4]
 800c29a:	6813      	ldr	r3, [r2, #0]
 800c29c:	b933      	cbnz	r3, 800c2ac <_free_r+0x30>
 800c29e:	6063      	str	r3, [r4, #4]
 800c2a0:	6014      	str	r4, [r2, #0]
 800c2a2:	b003      	add	sp, #12
 800c2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2a8:	f000 ba96 	b.w	800c7d8 <__malloc_unlock>
 800c2ac:	42a3      	cmp	r3, r4
 800c2ae:	d908      	bls.n	800c2c2 <_free_r+0x46>
 800c2b0:	6825      	ldr	r5, [r4, #0]
 800c2b2:	1961      	adds	r1, r4, r5
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf01      	itttt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	1949      	addeq	r1, r1, r5
 800c2be:	6021      	streq	r1, [r4, #0]
 800c2c0:	e7ed      	b.n	800c29e <_free_r+0x22>
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	b10b      	cbz	r3, 800c2cc <_free_r+0x50>
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	d9fa      	bls.n	800c2c2 <_free_r+0x46>
 800c2cc:	6811      	ldr	r1, [r2, #0]
 800c2ce:	1855      	adds	r5, r2, r1
 800c2d0:	42a5      	cmp	r5, r4
 800c2d2:	d10b      	bne.n	800c2ec <_free_r+0x70>
 800c2d4:	6824      	ldr	r4, [r4, #0]
 800c2d6:	4421      	add	r1, r4
 800c2d8:	1854      	adds	r4, r2, r1
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	6011      	str	r1, [r2, #0]
 800c2de:	d1e0      	bne.n	800c2a2 <_free_r+0x26>
 800c2e0:	681c      	ldr	r4, [r3, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	6053      	str	r3, [r2, #4]
 800c2e6:	4421      	add	r1, r4
 800c2e8:	6011      	str	r1, [r2, #0]
 800c2ea:	e7da      	b.n	800c2a2 <_free_r+0x26>
 800c2ec:	d902      	bls.n	800c2f4 <_free_r+0x78>
 800c2ee:	230c      	movs	r3, #12
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	e7d6      	b.n	800c2a2 <_free_r+0x26>
 800c2f4:	6825      	ldr	r5, [r4, #0]
 800c2f6:	1961      	adds	r1, r4, r5
 800c2f8:	428b      	cmp	r3, r1
 800c2fa:	bf04      	itt	eq
 800c2fc:	6819      	ldreq	r1, [r3, #0]
 800c2fe:	685b      	ldreq	r3, [r3, #4]
 800c300:	6063      	str	r3, [r4, #4]
 800c302:	bf04      	itt	eq
 800c304:	1949      	addeq	r1, r1, r5
 800c306:	6021      	streq	r1, [r4, #0]
 800c308:	6054      	str	r4, [r2, #4]
 800c30a:	e7ca      	b.n	800c2a2 <_free_r+0x26>
 800c30c:	b003      	add	sp, #12
 800c30e:	bd30      	pop	{r4, r5, pc}
 800c310:	2000061c 	.word	0x2000061c

0800c314 <sbrk_aligned>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	4e0e      	ldr	r6, [pc, #56]	; (800c350 <sbrk_aligned+0x3c>)
 800c318:	460c      	mov	r4, r1
 800c31a:	6831      	ldr	r1, [r6, #0]
 800c31c:	4605      	mov	r5, r0
 800c31e:	b911      	cbnz	r1, 800c326 <sbrk_aligned+0x12>
 800c320:	f000 f9e8 	bl	800c6f4 <_sbrk_r>
 800c324:	6030      	str	r0, [r6, #0]
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 f9e3 	bl	800c6f4 <_sbrk_r>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	d00a      	beq.n	800c348 <sbrk_aligned+0x34>
 800c332:	1cc4      	adds	r4, r0, #3
 800c334:	f024 0403 	bic.w	r4, r4, #3
 800c338:	42a0      	cmp	r0, r4
 800c33a:	d007      	beq.n	800c34c <sbrk_aligned+0x38>
 800c33c:	1a21      	subs	r1, r4, r0
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 f9d8 	bl	800c6f4 <_sbrk_r>
 800c344:	3001      	adds	r0, #1
 800c346:	d101      	bne.n	800c34c <sbrk_aligned+0x38>
 800c348:	f04f 34ff 	mov.w	r4, #4294967295
 800c34c:	4620      	mov	r0, r4
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	20000620 	.word	0x20000620

0800c354 <_malloc_r>:
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	1ccd      	adds	r5, r1, #3
 800c35a:	f025 0503 	bic.w	r5, r5, #3
 800c35e:	3508      	adds	r5, #8
 800c360:	2d0c      	cmp	r5, #12
 800c362:	bf38      	it	cc
 800c364:	250c      	movcc	r5, #12
 800c366:	2d00      	cmp	r5, #0
 800c368:	4607      	mov	r7, r0
 800c36a:	db01      	blt.n	800c370 <_malloc_r+0x1c>
 800c36c:	42a9      	cmp	r1, r5
 800c36e:	d905      	bls.n	800c37c <_malloc_r+0x28>
 800c370:	230c      	movs	r3, #12
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	2600      	movs	r6, #0
 800c376:	4630      	mov	r0, r6
 800c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c37c:	4e2e      	ldr	r6, [pc, #184]	; (800c438 <_malloc_r+0xe4>)
 800c37e:	f000 fa25 	bl	800c7cc <__malloc_lock>
 800c382:	6833      	ldr	r3, [r6, #0]
 800c384:	461c      	mov	r4, r3
 800c386:	bb34      	cbnz	r4, 800c3d6 <_malloc_r+0x82>
 800c388:	4629      	mov	r1, r5
 800c38a:	4638      	mov	r0, r7
 800c38c:	f7ff ffc2 	bl	800c314 <sbrk_aligned>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	4604      	mov	r4, r0
 800c394:	d14d      	bne.n	800c432 <_malloc_r+0xde>
 800c396:	6834      	ldr	r4, [r6, #0]
 800c398:	4626      	mov	r6, r4
 800c39a:	2e00      	cmp	r6, #0
 800c39c:	d140      	bne.n	800c420 <_malloc_r+0xcc>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	eb04 0803 	add.w	r8, r4, r3
 800c3a8:	f000 f9a4 	bl	800c6f4 <_sbrk_r>
 800c3ac:	4580      	cmp	r8, r0
 800c3ae:	d13a      	bne.n	800c426 <_malloc_r+0xd2>
 800c3b0:	6821      	ldr	r1, [r4, #0]
 800c3b2:	3503      	adds	r5, #3
 800c3b4:	1a6d      	subs	r5, r5, r1
 800c3b6:	f025 0503 	bic.w	r5, r5, #3
 800c3ba:	3508      	adds	r5, #8
 800c3bc:	2d0c      	cmp	r5, #12
 800c3be:	bf38      	it	cc
 800c3c0:	250c      	movcc	r5, #12
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7ff ffa5 	bl	800c314 <sbrk_aligned>
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	d02b      	beq.n	800c426 <_malloc_r+0xd2>
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	442b      	add	r3, r5
 800c3d2:	6023      	str	r3, [r4, #0]
 800c3d4:	e00e      	b.n	800c3f4 <_malloc_r+0xa0>
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	1b52      	subs	r2, r2, r5
 800c3da:	d41e      	bmi.n	800c41a <_malloc_r+0xc6>
 800c3dc:	2a0b      	cmp	r2, #11
 800c3de:	d916      	bls.n	800c40e <_malloc_r+0xba>
 800c3e0:	1961      	adds	r1, r4, r5
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	6025      	str	r5, [r4, #0]
 800c3e6:	bf18      	it	ne
 800c3e8:	6059      	strne	r1, [r3, #4]
 800c3ea:	6863      	ldr	r3, [r4, #4]
 800c3ec:	bf08      	it	eq
 800c3ee:	6031      	streq	r1, [r6, #0]
 800c3f0:	5162      	str	r2, [r4, r5]
 800c3f2:	604b      	str	r3, [r1, #4]
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f104 060b 	add.w	r6, r4, #11
 800c3fa:	f000 f9ed 	bl	800c7d8 <__malloc_unlock>
 800c3fe:	f026 0607 	bic.w	r6, r6, #7
 800c402:	1d23      	adds	r3, r4, #4
 800c404:	1af2      	subs	r2, r6, r3
 800c406:	d0b6      	beq.n	800c376 <_malloc_r+0x22>
 800c408:	1b9b      	subs	r3, r3, r6
 800c40a:	50a3      	str	r3, [r4, r2]
 800c40c:	e7b3      	b.n	800c376 <_malloc_r+0x22>
 800c40e:	6862      	ldr	r2, [r4, #4]
 800c410:	42a3      	cmp	r3, r4
 800c412:	bf0c      	ite	eq
 800c414:	6032      	streq	r2, [r6, #0]
 800c416:	605a      	strne	r2, [r3, #4]
 800c418:	e7ec      	b.n	800c3f4 <_malloc_r+0xa0>
 800c41a:	4623      	mov	r3, r4
 800c41c:	6864      	ldr	r4, [r4, #4]
 800c41e:	e7b2      	b.n	800c386 <_malloc_r+0x32>
 800c420:	4634      	mov	r4, r6
 800c422:	6876      	ldr	r6, [r6, #4]
 800c424:	e7b9      	b.n	800c39a <_malloc_r+0x46>
 800c426:	230c      	movs	r3, #12
 800c428:	603b      	str	r3, [r7, #0]
 800c42a:	4638      	mov	r0, r7
 800c42c:	f000 f9d4 	bl	800c7d8 <__malloc_unlock>
 800c430:	e7a1      	b.n	800c376 <_malloc_r+0x22>
 800c432:	6025      	str	r5, [r4, #0]
 800c434:	e7de      	b.n	800c3f4 <_malloc_r+0xa0>
 800c436:	bf00      	nop
 800c438:	2000061c 	.word	0x2000061c

0800c43c <__ssputs_r>:
 800c43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c440:	688e      	ldr	r6, [r1, #8]
 800c442:	429e      	cmp	r6, r3
 800c444:	4682      	mov	sl, r0
 800c446:	460c      	mov	r4, r1
 800c448:	4690      	mov	r8, r2
 800c44a:	461f      	mov	r7, r3
 800c44c:	d838      	bhi.n	800c4c0 <__ssputs_r+0x84>
 800c44e:	898a      	ldrh	r2, [r1, #12]
 800c450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c454:	d032      	beq.n	800c4bc <__ssputs_r+0x80>
 800c456:	6825      	ldr	r5, [r4, #0]
 800c458:	6909      	ldr	r1, [r1, #16]
 800c45a:	eba5 0901 	sub.w	r9, r5, r1
 800c45e:	6965      	ldr	r5, [r4, #20]
 800c460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c468:	3301      	adds	r3, #1
 800c46a:	444b      	add	r3, r9
 800c46c:	106d      	asrs	r5, r5, #1
 800c46e:	429d      	cmp	r5, r3
 800c470:	bf38      	it	cc
 800c472:	461d      	movcc	r5, r3
 800c474:	0553      	lsls	r3, r2, #21
 800c476:	d531      	bpl.n	800c4dc <__ssputs_r+0xa0>
 800c478:	4629      	mov	r1, r5
 800c47a:	f7ff ff6b 	bl	800c354 <_malloc_r>
 800c47e:	4606      	mov	r6, r0
 800c480:	b950      	cbnz	r0, 800c498 <__ssputs_r+0x5c>
 800c482:	230c      	movs	r3, #12
 800c484:	f8ca 3000 	str.w	r3, [sl]
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c498:	6921      	ldr	r1, [r4, #16]
 800c49a:	464a      	mov	r2, r9
 800c49c:	f7ff fb46 	bl	800bb2c <memcpy>
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	6126      	str	r6, [r4, #16]
 800c4ae:	6165      	str	r5, [r4, #20]
 800c4b0:	444e      	add	r6, r9
 800c4b2:	eba5 0509 	sub.w	r5, r5, r9
 800c4b6:	6026      	str	r6, [r4, #0]
 800c4b8:	60a5      	str	r5, [r4, #8]
 800c4ba:	463e      	mov	r6, r7
 800c4bc:	42be      	cmp	r6, r7
 800c4be:	d900      	bls.n	800c4c2 <__ssputs_r+0x86>
 800c4c0:	463e      	mov	r6, r7
 800c4c2:	6820      	ldr	r0, [r4, #0]
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	4641      	mov	r1, r8
 800c4c8:	f000 f966 	bl	800c798 <memmove>
 800c4cc:	68a3      	ldr	r3, [r4, #8]
 800c4ce:	1b9b      	subs	r3, r3, r6
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	4433      	add	r3, r6
 800c4d6:	6023      	str	r3, [r4, #0]
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e7db      	b.n	800c494 <__ssputs_r+0x58>
 800c4dc:	462a      	mov	r2, r5
 800c4de:	f000 f981 	bl	800c7e4 <_realloc_r>
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d1e1      	bne.n	800c4ac <__ssputs_r+0x70>
 800c4e8:	6921      	ldr	r1, [r4, #16]
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	f7ff fec6 	bl	800c27c <_free_r>
 800c4f0:	e7c7      	b.n	800c482 <__ssputs_r+0x46>
	...

0800c4f4 <_svfiprintf_r>:
 800c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f8:	4698      	mov	r8, r3
 800c4fa:	898b      	ldrh	r3, [r1, #12]
 800c4fc:	061b      	lsls	r3, r3, #24
 800c4fe:	b09d      	sub	sp, #116	; 0x74
 800c500:	4607      	mov	r7, r0
 800c502:	460d      	mov	r5, r1
 800c504:	4614      	mov	r4, r2
 800c506:	d50e      	bpl.n	800c526 <_svfiprintf_r+0x32>
 800c508:	690b      	ldr	r3, [r1, #16]
 800c50a:	b963      	cbnz	r3, 800c526 <_svfiprintf_r+0x32>
 800c50c:	2140      	movs	r1, #64	; 0x40
 800c50e:	f7ff ff21 	bl	800c354 <_malloc_r>
 800c512:	6028      	str	r0, [r5, #0]
 800c514:	6128      	str	r0, [r5, #16]
 800c516:	b920      	cbnz	r0, 800c522 <_svfiprintf_r+0x2e>
 800c518:	230c      	movs	r3, #12
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	e0d1      	b.n	800c6c6 <_svfiprintf_r+0x1d2>
 800c522:	2340      	movs	r3, #64	; 0x40
 800c524:	616b      	str	r3, [r5, #20]
 800c526:	2300      	movs	r3, #0
 800c528:	9309      	str	r3, [sp, #36]	; 0x24
 800c52a:	2320      	movs	r3, #32
 800c52c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c530:	f8cd 800c 	str.w	r8, [sp, #12]
 800c534:	2330      	movs	r3, #48	; 0x30
 800c536:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6e0 <_svfiprintf_r+0x1ec>
 800c53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c53e:	f04f 0901 	mov.w	r9, #1
 800c542:	4623      	mov	r3, r4
 800c544:	469a      	mov	sl, r3
 800c546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54a:	b10a      	cbz	r2, 800c550 <_svfiprintf_r+0x5c>
 800c54c:	2a25      	cmp	r2, #37	; 0x25
 800c54e:	d1f9      	bne.n	800c544 <_svfiprintf_r+0x50>
 800c550:	ebba 0b04 	subs.w	fp, sl, r4
 800c554:	d00b      	beq.n	800c56e <_svfiprintf_r+0x7a>
 800c556:	465b      	mov	r3, fp
 800c558:	4622      	mov	r2, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7ff ff6d 	bl	800c43c <__ssputs_r>
 800c562:	3001      	adds	r0, #1
 800c564:	f000 80aa 	beq.w	800c6bc <_svfiprintf_r+0x1c8>
 800c568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c56a:	445a      	add	r2, fp
 800c56c:	9209      	str	r2, [sp, #36]	; 0x24
 800c56e:	f89a 3000 	ldrb.w	r3, [sl]
 800c572:	2b00      	cmp	r3, #0
 800c574:	f000 80a2 	beq.w	800c6bc <_svfiprintf_r+0x1c8>
 800c578:	2300      	movs	r3, #0
 800c57a:	f04f 32ff 	mov.w	r2, #4294967295
 800c57e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c582:	f10a 0a01 	add.w	sl, sl, #1
 800c586:	9304      	str	r3, [sp, #16]
 800c588:	9307      	str	r3, [sp, #28]
 800c58a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c58e:	931a      	str	r3, [sp, #104]	; 0x68
 800c590:	4654      	mov	r4, sl
 800c592:	2205      	movs	r2, #5
 800c594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c598:	4851      	ldr	r0, [pc, #324]	; (800c6e0 <_svfiprintf_r+0x1ec>)
 800c59a:	f7f3 fe29 	bl	80001f0 <memchr>
 800c59e:	9a04      	ldr	r2, [sp, #16]
 800c5a0:	b9d8      	cbnz	r0, 800c5da <_svfiprintf_r+0xe6>
 800c5a2:	06d0      	lsls	r0, r2, #27
 800c5a4:	bf44      	itt	mi
 800c5a6:	2320      	movmi	r3, #32
 800c5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ac:	0711      	lsls	r1, r2, #28
 800c5ae:	bf44      	itt	mi
 800c5b0:	232b      	movmi	r3, #43	; 0x2b
 800c5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c5bc:	d015      	beq.n	800c5ea <_svfiprintf_r+0xf6>
 800c5be:	9a07      	ldr	r2, [sp, #28]
 800c5c0:	4654      	mov	r4, sl
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	f04f 0c0a 	mov.w	ip, #10
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ce:	3b30      	subs	r3, #48	; 0x30
 800c5d0:	2b09      	cmp	r3, #9
 800c5d2:	d94e      	bls.n	800c672 <_svfiprintf_r+0x17e>
 800c5d4:	b1b0      	cbz	r0, 800c604 <_svfiprintf_r+0x110>
 800c5d6:	9207      	str	r2, [sp, #28]
 800c5d8:	e014      	b.n	800c604 <_svfiprintf_r+0x110>
 800c5da:	eba0 0308 	sub.w	r3, r0, r8
 800c5de:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	9304      	str	r3, [sp, #16]
 800c5e6:	46a2      	mov	sl, r4
 800c5e8:	e7d2      	b.n	800c590 <_svfiprintf_r+0x9c>
 800c5ea:	9b03      	ldr	r3, [sp, #12]
 800c5ec:	1d19      	adds	r1, r3, #4
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	9103      	str	r1, [sp, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	bfbb      	ittet	lt
 800c5f6:	425b      	neglt	r3, r3
 800c5f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fc:	9307      	strge	r3, [sp, #28]
 800c5fe:	9307      	strlt	r3, [sp, #28]
 800c600:	bfb8      	it	lt
 800c602:	9204      	strlt	r2, [sp, #16]
 800c604:	7823      	ldrb	r3, [r4, #0]
 800c606:	2b2e      	cmp	r3, #46	; 0x2e
 800c608:	d10c      	bne.n	800c624 <_svfiprintf_r+0x130>
 800c60a:	7863      	ldrb	r3, [r4, #1]
 800c60c:	2b2a      	cmp	r3, #42	; 0x2a
 800c60e:	d135      	bne.n	800c67c <_svfiprintf_r+0x188>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	1d1a      	adds	r2, r3, #4
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	9203      	str	r2, [sp, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfb8      	it	lt
 800c61c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c620:	3402      	adds	r4, #2
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6f0 <_svfiprintf_r+0x1fc>
 800c628:	7821      	ldrb	r1, [r4, #0]
 800c62a:	2203      	movs	r2, #3
 800c62c:	4650      	mov	r0, sl
 800c62e:	f7f3 fddf 	bl	80001f0 <memchr>
 800c632:	b140      	cbz	r0, 800c646 <_svfiprintf_r+0x152>
 800c634:	2340      	movs	r3, #64	; 0x40
 800c636:	eba0 000a 	sub.w	r0, r0, sl
 800c63a:	fa03 f000 	lsl.w	r0, r3, r0
 800c63e:	9b04      	ldr	r3, [sp, #16]
 800c640:	4303      	orrs	r3, r0
 800c642:	3401      	adds	r4, #1
 800c644:	9304      	str	r3, [sp, #16]
 800c646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64a:	4826      	ldr	r0, [pc, #152]	; (800c6e4 <_svfiprintf_r+0x1f0>)
 800c64c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c650:	2206      	movs	r2, #6
 800c652:	f7f3 fdcd 	bl	80001f0 <memchr>
 800c656:	2800      	cmp	r0, #0
 800c658:	d038      	beq.n	800c6cc <_svfiprintf_r+0x1d8>
 800c65a:	4b23      	ldr	r3, [pc, #140]	; (800c6e8 <_svfiprintf_r+0x1f4>)
 800c65c:	bb1b      	cbnz	r3, 800c6a6 <_svfiprintf_r+0x1b2>
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	3307      	adds	r3, #7
 800c662:	f023 0307 	bic.w	r3, r3, #7
 800c666:	3308      	adds	r3, #8
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66c:	4433      	add	r3, r6
 800c66e:	9309      	str	r3, [sp, #36]	; 0x24
 800c670:	e767      	b.n	800c542 <_svfiprintf_r+0x4e>
 800c672:	fb0c 3202 	mla	r2, ip, r2, r3
 800c676:	460c      	mov	r4, r1
 800c678:	2001      	movs	r0, #1
 800c67a:	e7a5      	b.n	800c5c8 <_svfiprintf_r+0xd4>
 800c67c:	2300      	movs	r3, #0
 800c67e:	3401      	adds	r4, #1
 800c680:	9305      	str	r3, [sp, #20]
 800c682:	4619      	mov	r1, r3
 800c684:	f04f 0c0a 	mov.w	ip, #10
 800c688:	4620      	mov	r0, r4
 800c68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c68e:	3a30      	subs	r2, #48	; 0x30
 800c690:	2a09      	cmp	r2, #9
 800c692:	d903      	bls.n	800c69c <_svfiprintf_r+0x1a8>
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0c5      	beq.n	800c624 <_svfiprintf_r+0x130>
 800c698:	9105      	str	r1, [sp, #20]
 800c69a:	e7c3      	b.n	800c624 <_svfiprintf_r+0x130>
 800c69c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e7f0      	b.n	800c688 <_svfiprintf_r+0x194>
 800c6a6:	ab03      	add	r3, sp, #12
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	4b0f      	ldr	r3, [pc, #60]	; (800c6ec <_svfiprintf_r+0x1f8>)
 800c6ae:	a904      	add	r1, sp, #16
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7fd ffc9 	bl	800a648 <_printf_float>
 800c6b6:	1c42      	adds	r2, r0, #1
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	d1d6      	bne.n	800c66a <_svfiprintf_r+0x176>
 800c6bc:	89ab      	ldrh	r3, [r5, #12]
 800c6be:	065b      	lsls	r3, r3, #25
 800c6c0:	f53f af2c 	bmi.w	800c51c <_svfiprintf_r+0x28>
 800c6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6c6:	b01d      	add	sp, #116	; 0x74
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	ab03      	add	r3, sp, #12
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	462a      	mov	r2, r5
 800c6d2:	4b06      	ldr	r3, [pc, #24]	; (800c6ec <_svfiprintf_r+0x1f8>)
 800c6d4:	a904      	add	r1, sp, #16
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f7fe fa5a 	bl	800ab90 <_printf_i>
 800c6dc:	e7eb      	b.n	800c6b6 <_svfiprintf_r+0x1c2>
 800c6de:	bf00      	nop
 800c6e0:	0801719c 	.word	0x0801719c
 800c6e4:	080171a6 	.word	0x080171a6
 800c6e8:	0800a649 	.word	0x0800a649
 800c6ec:	0800c43d 	.word	0x0800c43d
 800c6f0:	080171a2 	.word	0x080171a2

0800c6f4 <_sbrk_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d06      	ldr	r5, [pc, #24]	; (800c710 <_sbrk_r+0x1c>)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4608      	mov	r0, r1
 800c6fe:	602b      	str	r3, [r5, #0]
 800c700:	f7f6 fca2 	bl	8003048 <_sbrk>
 800c704:	1c43      	adds	r3, r0, #1
 800c706:	d102      	bne.n	800c70e <_sbrk_r+0x1a>
 800c708:	682b      	ldr	r3, [r5, #0]
 800c70a:	b103      	cbz	r3, 800c70e <_sbrk_r+0x1a>
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	20000624 	.word	0x20000624

0800c714 <__assert_func>:
 800c714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c716:	4614      	mov	r4, r2
 800c718:	461a      	mov	r2, r3
 800c71a:	4b09      	ldr	r3, [pc, #36]	; (800c740 <__assert_func+0x2c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4605      	mov	r5, r0
 800c720:	68d8      	ldr	r0, [r3, #12]
 800c722:	b14c      	cbz	r4, 800c738 <__assert_func+0x24>
 800c724:	4b07      	ldr	r3, [pc, #28]	; (800c744 <__assert_func+0x30>)
 800c726:	9100      	str	r1, [sp, #0]
 800c728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c72c:	4906      	ldr	r1, [pc, #24]	; (800c748 <__assert_func+0x34>)
 800c72e:	462b      	mov	r3, r5
 800c730:	f000 f80e 	bl	800c750 <fiprintf>
 800c734:	f000 faac 	bl	800cc90 <abort>
 800c738:	4b04      	ldr	r3, [pc, #16]	; (800c74c <__assert_func+0x38>)
 800c73a:	461c      	mov	r4, r3
 800c73c:	e7f3      	b.n	800c726 <__assert_func+0x12>
 800c73e:	bf00      	nop
 800c740:	20000040 	.word	0x20000040
 800c744:	080171ad 	.word	0x080171ad
 800c748:	080171ba 	.word	0x080171ba
 800c74c:	080171e8 	.word	0x080171e8

0800c750 <fiprintf>:
 800c750:	b40e      	push	{r1, r2, r3}
 800c752:	b503      	push	{r0, r1, lr}
 800c754:	4601      	mov	r1, r0
 800c756:	ab03      	add	r3, sp, #12
 800c758:	4805      	ldr	r0, [pc, #20]	; (800c770 <fiprintf+0x20>)
 800c75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c75e:	6800      	ldr	r0, [r0, #0]
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	f000 f897 	bl	800c894 <_vfiprintf_r>
 800c766:	b002      	add	sp, #8
 800c768:	f85d eb04 	ldr.w	lr, [sp], #4
 800c76c:	b003      	add	sp, #12
 800c76e:	4770      	bx	lr
 800c770:	20000040 	.word	0x20000040

0800c774 <__ascii_mbtowc>:
 800c774:	b082      	sub	sp, #8
 800c776:	b901      	cbnz	r1, 800c77a <__ascii_mbtowc+0x6>
 800c778:	a901      	add	r1, sp, #4
 800c77a:	b142      	cbz	r2, 800c78e <__ascii_mbtowc+0x1a>
 800c77c:	b14b      	cbz	r3, 800c792 <__ascii_mbtowc+0x1e>
 800c77e:	7813      	ldrb	r3, [r2, #0]
 800c780:	600b      	str	r3, [r1, #0]
 800c782:	7812      	ldrb	r2, [r2, #0]
 800c784:	1e10      	subs	r0, r2, #0
 800c786:	bf18      	it	ne
 800c788:	2001      	movne	r0, #1
 800c78a:	b002      	add	sp, #8
 800c78c:	4770      	bx	lr
 800c78e:	4610      	mov	r0, r2
 800c790:	e7fb      	b.n	800c78a <__ascii_mbtowc+0x16>
 800c792:	f06f 0001 	mvn.w	r0, #1
 800c796:	e7f8      	b.n	800c78a <__ascii_mbtowc+0x16>

0800c798 <memmove>:
 800c798:	4288      	cmp	r0, r1
 800c79a:	b510      	push	{r4, lr}
 800c79c:	eb01 0402 	add.w	r4, r1, r2
 800c7a0:	d902      	bls.n	800c7a8 <memmove+0x10>
 800c7a2:	4284      	cmp	r4, r0
 800c7a4:	4623      	mov	r3, r4
 800c7a6:	d807      	bhi.n	800c7b8 <memmove+0x20>
 800c7a8:	1e43      	subs	r3, r0, #1
 800c7aa:	42a1      	cmp	r1, r4
 800c7ac:	d008      	beq.n	800c7c0 <memmove+0x28>
 800c7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7b6:	e7f8      	b.n	800c7aa <memmove+0x12>
 800c7b8:	4402      	add	r2, r0
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	428a      	cmp	r2, r1
 800c7be:	d100      	bne.n	800c7c2 <memmove+0x2a>
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7ca:	e7f7      	b.n	800c7bc <memmove+0x24>

0800c7cc <__malloc_lock>:
 800c7cc:	4801      	ldr	r0, [pc, #4]	; (800c7d4 <__malloc_lock+0x8>)
 800c7ce:	f000 bc1f 	b.w	800d010 <__retarget_lock_acquire_recursive>
 800c7d2:	bf00      	nop
 800c7d4:	20000628 	.word	0x20000628

0800c7d8 <__malloc_unlock>:
 800c7d8:	4801      	ldr	r0, [pc, #4]	; (800c7e0 <__malloc_unlock+0x8>)
 800c7da:	f000 bc1a 	b.w	800d012 <__retarget_lock_release_recursive>
 800c7de:	bf00      	nop
 800c7e0:	20000628 	.word	0x20000628

0800c7e4 <_realloc_r>:
 800c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e8:	4680      	mov	r8, r0
 800c7ea:	4614      	mov	r4, r2
 800c7ec:	460e      	mov	r6, r1
 800c7ee:	b921      	cbnz	r1, 800c7fa <_realloc_r+0x16>
 800c7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	f7ff bdad 	b.w	800c354 <_malloc_r>
 800c7fa:	b92a      	cbnz	r2, 800c808 <_realloc_r+0x24>
 800c7fc:	f7ff fd3e 	bl	800c27c <_free_r>
 800c800:	4625      	mov	r5, r4
 800c802:	4628      	mov	r0, r5
 800c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c808:	f000 fc6a 	bl	800d0e0 <_malloc_usable_size_r>
 800c80c:	4284      	cmp	r4, r0
 800c80e:	4607      	mov	r7, r0
 800c810:	d802      	bhi.n	800c818 <_realloc_r+0x34>
 800c812:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c816:	d812      	bhi.n	800c83e <_realloc_r+0x5a>
 800c818:	4621      	mov	r1, r4
 800c81a:	4640      	mov	r0, r8
 800c81c:	f7ff fd9a 	bl	800c354 <_malloc_r>
 800c820:	4605      	mov	r5, r0
 800c822:	2800      	cmp	r0, #0
 800c824:	d0ed      	beq.n	800c802 <_realloc_r+0x1e>
 800c826:	42bc      	cmp	r4, r7
 800c828:	4622      	mov	r2, r4
 800c82a:	4631      	mov	r1, r6
 800c82c:	bf28      	it	cs
 800c82e:	463a      	movcs	r2, r7
 800c830:	f7ff f97c 	bl	800bb2c <memcpy>
 800c834:	4631      	mov	r1, r6
 800c836:	4640      	mov	r0, r8
 800c838:	f7ff fd20 	bl	800c27c <_free_r>
 800c83c:	e7e1      	b.n	800c802 <_realloc_r+0x1e>
 800c83e:	4635      	mov	r5, r6
 800c840:	e7df      	b.n	800c802 <_realloc_r+0x1e>

0800c842 <__sfputc_r>:
 800c842:	6893      	ldr	r3, [r2, #8]
 800c844:	3b01      	subs	r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	b410      	push	{r4}
 800c84a:	6093      	str	r3, [r2, #8]
 800c84c:	da08      	bge.n	800c860 <__sfputc_r+0x1e>
 800c84e:	6994      	ldr	r4, [r2, #24]
 800c850:	42a3      	cmp	r3, r4
 800c852:	db01      	blt.n	800c858 <__sfputc_r+0x16>
 800c854:	290a      	cmp	r1, #10
 800c856:	d103      	bne.n	800c860 <__sfputc_r+0x1e>
 800c858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c85c:	f000 b94a 	b.w	800caf4 <__swbuf_r>
 800c860:	6813      	ldr	r3, [r2, #0]
 800c862:	1c58      	adds	r0, r3, #1
 800c864:	6010      	str	r0, [r2, #0]
 800c866:	7019      	strb	r1, [r3, #0]
 800c868:	4608      	mov	r0, r1
 800c86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <__sfputs_r>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	4606      	mov	r6, r0
 800c874:	460f      	mov	r7, r1
 800c876:	4614      	mov	r4, r2
 800c878:	18d5      	adds	r5, r2, r3
 800c87a:	42ac      	cmp	r4, r5
 800c87c:	d101      	bne.n	800c882 <__sfputs_r+0x12>
 800c87e:	2000      	movs	r0, #0
 800c880:	e007      	b.n	800c892 <__sfputs_r+0x22>
 800c882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c886:	463a      	mov	r2, r7
 800c888:	4630      	mov	r0, r6
 800c88a:	f7ff ffda 	bl	800c842 <__sfputc_r>
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	d1f3      	bne.n	800c87a <__sfputs_r+0xa>
 800c892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c894 <_vfiprintf_r>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	460d      	mov	r5, r1
 800c89a:	b09d      	sub	sp, #116	; 0x74
 800c89c:	4614      	mov	r4, r2
 800c89e:	4698      	mov	r8, r3
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	b118      	cbz	r0, 800c8ac <_vfiprintf_r+0x18>
 800c8a4:	6983      	ldr	r3, [r0, #24]
 800c8a6:	b90b      	cbnz	r3, 800c8ac <_vfiprintf_r+0x18>
 800c8a8:	f000 fb14 	bl	800ced4 <__sinit>
 800c8ac:	4b89      	ldr	r3, [pc, #548]	; (800cad4 <_vfiprintf_r+0x240>)
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	d11b      	bne.n	800c8ea <_vfiprintf_r+0x56>
 800c8b2:	6875      	ldr	r5, [r6, #4]
 800c8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8b6:	07d9      	lsls	r1, r3, #31
 800c8b8:	d405      	bmi.n	800c8c6 <_vfiprintf_r+0x32>
 800c8ba:	89ab      	ldrh	r3, [r5, #12]
 800c8bc:	059a      	lsls	r2, r3, #22
 800c8be:	d402      	bmi.n	800c8c6 <_vfiprintf_r+0x32>
 800c8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8c2:	f000 fba5 	bl	800d010 <__retarget_lock_acquire_recursive>
 800c8c6:	89ab      	ldrh	r3, [r5, #12]
 800c8c8:	071b      	lsls	r3, r3, #28
 800c8ca:	d501      	bpl.n	800c8d0 <_vfiprintf_r+0x3c>
 800c8cc:	692b      	ldr	r3, [r5, #16]
 800c8ce:	b9eb      	cbnz	r3, 800c90c <_vfiprintf_r+0x78>
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f000 f96e 	bl	800cbb4 <__swsetup_r>
 800c8d8:	b1c0      	cbz	r0, 800c90c <_vfiprintf_r+0x78>
 800c8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8dc:	07dc      	lsls	r4, r3, #31
 800c8de:	d50e      	bpl.n	800c8fe <_vfiprintf_r+0x6a>
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	b01d      	add	sp, #116	; 0x74
 800c8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ea:	4b7b      	ldr	r3, [pc, #492]	; (800cad8 <_vfiprintf_r+0x244>)
 800c8ec:	429d      	cmp	r5, r3
 800c8ee:	d101      	bne.n	800c8f4 <_vfiprintf_r+0x60>
 800c8f0:	68b5      	ldr	r5, [r6, #8]
 800c8f2:	e7df      	b.n	800c8b4 <_vfiprintf_r+0x20>
 800c8f4:	4b79      	ldr	r3, [pc, #484]	; (800cadc <_vfiprintf_r+0x248>)
 800c8f6:	429d      	cmp	r5, r3
 800c8f8:	bf08      	it	eq
 800c8fa:	68f5      	ldreq	r5, [r6, #12]
 800c8fc:	e7da      	b.n	800c8b4 <_vfiprintf_r+0x20>
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	0598      	lsls	r0, r3, #22
 800c902:	d4ed      	bmi.n	800c8e0 <_vfiprintf_r+0x4c>
 800c904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c906:	f000 fb84 	bl	800d012 <__retarget_lock_release_recursive>
 800c90a:	e7e9      	b.n	800c8e0 <_vfiprintf_r+0x4c>
 800c90c:	2300      	movs	r3, #0
 800c90e:	9309      	str	r3, [sp, #36]	; 0x24
 800c910:	2320      	movs	r3, #32
 800c912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c916:	f8cd 800c 	str.w	r8, [sp, #12]
 800c91a:	2330      	movs	r3, #48	; 0x30
 800c91c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cae0 <_vfiprintf_r+0x24c>
 800c920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c924:	f04f 0901 	mov.w	r9, #1
 800c928:	4623      	mov	r3, r4
 800c92a:	469a      	mov	sl, r3
 800c92c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c930:	b10a      	cbz	r2, 800c936 <_vfiprintf_r+0xa2>
 800c932:	2a25      	cmp	r2, #37	; 0x25
 800c934:	d1f9      	bne.n	800c92a <_vfiprintf_r+0x96>
 800c936:	ebba 0b04 	subs.w	fp, sl, r4
 800c93a:	d00b      	beq.n	800c954 <_vfiprintf_r+0xc0>
 800c93c:	465b      	mov	r3, fp
 800c93e:	4622      	mov	r2, r4
 800c940:	4629      	mov	r1, r5
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff ff94 	bl	800c870 <__sfputs_r>
 800c948:	3001      	adds	r0, #1
 800c94a:	f000 80aa 	beq.w	800caa2 <_vfiprintf_r+0x20e>
 800c94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c950:	445a      	add	r2, fp
 800c952:	9209      	str	r2, [sp, #36]	; 0x24
 800c954:	f89a 3000 	ldrb.w	r3, [sl]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 80a2 	beq.w	800caa2 <_vfiprintf_r+0x20e>
 800c95e:	2300      	movs	r3, #0
 800c960:	f04f 32ff 	mov.w	r2, #4294967295
 800c964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c968:	f10a 0a01 	add.w	sl, sl, #1
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	9307      	str	r3, [sp, #28]
 800c970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c974:	931a      	str	r3, [sp, #104]	; 0x68
 800c976:	4654      	mov	r4, sl
 800c978:	2205      	movs	r2, #5
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	4858      	ldr	r0, [pc, #352]	; (800cae0 <_vfiprintf_r+0x24c>)
 800c980:	f7f3 fc36 	bl	80001f0 <memchr>
 800c984:	9a04      	ldr	r2, [sp, #16]
 800c986:	b9d8      	cbnz	r0, 800c9c0 <_vfiprintf_r+0x12c>
 800c988:	06d1      	lsls	r1, r2, #27
 800c98a:	bf44      	itt	mi
 800c98c:	2320      	movmi	r3, #32
 800c98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c992:	0713      	lsls	r3, r2, #28
 800c994:	bf44      	itt	mi
 800c996:	232b      	movmi	r3, #43	; 0x2b
 800c998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c99c:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a2:	d015      	beq.n	800c9d0 <_vfiprintf_r+0x13c>
 800c9a4:	9a07      	ldr	r2, [sp, #28]
 800c9a6:	4654      	mov	r4, sl
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	f04f 0c0a 	mov.w	ip, #10
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b4:	3b30      	subs	r3, #48	; 0x30
 800c9b6:	2b09      	cmp	r3, #9
 800c9b8:	d94e      	bls.n	800ca58 <_vfiprintf_r+0x1c4>
 800c9ba:	b1b0      	cbz	r0, 800c9ea <_vfiprintf_r+0x156>
 800c9bc:	9207      	str	r2, [sp, #28]
 800c9be:	e014      	b.n	800c9ea <_vfiprintf_r+0x156>
 800c9c0:	eba0 0308 	sub.w	r3, r0, r8
 800c9c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	46a2      	mov	sl, r4
 800c9ce:	e7d2      	b.n	800c976 <_vfiprintf_r+0xe2>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	1d19      	adds	r1, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	9103      	str	r1, [sp, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfbb      	ittet	lt
 800c9dc:	425b      	neglt	r3, r3
 800c9de:	f042 0202 	orrlt.w	r2, r2, #2
 800c9e2:	9307      	strge	r3, [sp, #28]
 800c9e4:	9307      	strlt	r3, [sp, #28]
 800c9e6:	bfb8      	it	lt
 800c9e8:	9204      	strlt	r2, [sp, #16]
 800c9ea:	7823      	ldrb	r3, [r4, #0]
 800c9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ee:	d10c      	bne.n	800ca0a <_vfiprintf_r+0x176>
 800c9f0:	7863      	ldrb	r3, [r4, #1]
 800c9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f4:	d135      	bne.n	800ca62 <_vfiprintf_r+0x1ce>
 800c9f6:	9b03      	ldr	r3, [sp, #12]
 800c9f8:	1d1a      	adds	r2, r3, #4
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	9203      	str	r2, [sp, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bfb8      	it	lt
 800ca02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca06:	3402      	adds	r4, #2
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800caf0 <_vfiprintf_r+0x25c>
 800ca0e:	7821      	ldrb	r1, [r4, #0]
 800ca10:	2203      	movs	r2, #3
 800ca12:	4650      	mov	r0, sl
 800ca14:	f7f3 fbec 	bl	80001f0 <memchr>
 800ca18:	b140      	cbz	r0, 800ca2c <_vfiprintf_r+0x198>
 800ca1a:	2340      	movs	r3, #64	; 0x40
 800ca1c:	eba0 000a 	sub.w	r0, r0, sl
 800ca20:	fa03 f000 	lsl.w	r0, r3, r0
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	4303      	orrs	r3, r0
 800ca28:	3401      	adds	r4, #1
 800ca2a:	9304      	str	r3, [sp, #16]
 800ca2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca30:	482c      	ldr	r0, [pc, #176]	; (800cae4 <_vfiprintf_r+0x250>)
 800ca32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca36:	2206      	movs	r2, #6
 800ca38:	f7f3 fbda 	bl	80001f0 <memchr>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d03f      	beq.n	800cac0 <_vfiprintf_r+0x22c>
 800ca40:	4b29      	ldr	r3, [pc, #164]	; (800cae8 <_vfiprintf_r+0x254>)
 800ca42:	bb1b      	cbnz	r3, 800ca8c <_vfiprintf_r+0x1f8>
 800ca44:	9b03      	ldr	r3, [sp, #12]
 800ca46:	3307      	adds	r3, #7
 800ca48:	f023 0307 	bic.w	r3, r3, #7
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca52:	443b      	add	r3, r7
 800ca54:	9309      	str	r3, [sp, #36]	; 0x24
 800ca56:	e767      	b.n	800c928 <_vfiprintf_r+0x94>
 800ca58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	2001      	movs	r0, #1
 800ca60:	e7a5      	b.n	800c9ae <_vfiprintf_r+0x11a>
 800ca62:	2300      	movs	r3, #0
 800ca64:	3401      	adds	r4, #1
 800ca66:	9305      	str	r3, [sp, #20]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f04f 0c0a 	mov.w	ip, #10
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca74:	3a30      	subs	r2, #48	; 0x30
 800ca76:	2a09      	cmp	r2, #9
 800ca78:	d903      	bls.n	800ca82 <_vfiprintf_r+0x1ee>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0c5      	beq.n	800ca0a <_vfiprintf_r+0x176>
 800ca7e:	9105      	str	r1, [sp, #20]
 800ca80:	e7c3      	b.n	800ca0a <_vfiprintf_r+0x176>
 800ca82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca86:	4604      	mov	r4, r0
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e7f0      	b.n	800ca6e <_vfiprintf_r+0x1da>
 800ca8c:	ab03      	add	r3, sp, #12
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	462a      	mov	r2, r5
 800ca92:	4b16      	ldr	r3, [pc, #88]	; (800caec <_vfiprintf_r+0x258>)
 800ca94:	a904      	add	r1, sp, #16
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7fd fdd6 	bl	800a648 <_printf_float>
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	1c78      	adds	r0, r7, #1
 800caa0:	d1d6      	bne.n	800ca50 <_vfiprintf_r+0x1bc>
 800caa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa4:	07d9      	lsls	r1, r3, #31
 800caa6:	d405      	bmi.n	800cab4 <_vfiprintf_r+0x220>
 800caa8:	89ab      	ldrh	r3, [r5, #12]
 800caaa:	059a      	lsls	r2, r3, #22
 800caac:	d402      	bmi.n	800cab4 <_vfiprintf_r+0x220>
 800caae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab0:	f000 faaf 	bl	800d012 <__retarget_lock_release_recursive>
 800cab4:	89ab      	ldrh	r3, [r5, #12]
 800cab6:	065b      	lsls	r3, r3, #25
 800cab8:	f53f af12 	bmi.w	800c8e0 <_vfiprintf_r+0x4c>
 800cabc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cabe:	e711      	b.n	800c8e4 <_vfiprintf_r+0x50>
 800cac0:	ab03      	add	r3, sp, #12
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	462a      	mov	r2, r5
 800cac6:	4b09      	ldr	r3, [pc, #36]	; (800caec <_vfiprintf_r+0x258>)
 800cac8:	a904      	add	r1, sp, #16
 800caca:	4630      	mov	r0, r6
 800cacc:	f7fe f860 	bl	800ab90 <_printf_i>
 800cad0:	e7e4      	b.n	800ca9c <_vfiprintf_r+0x208>
 800cad2:	bf00      	nop
 800cad4:	08017314 	.word	0x08017314
 800cad8:	08017334 	.word	0x08017334
 800cadc:	080172f4 	.word	0x080172f4
 800cae0:	0801719c 	.word	0x0801719c
 800cae4:	080171a6 	.word	0x080171a6
 800cae8:	0800a649 	.word	0x0800a649
 800caec:	0800c871 	.word	0x0800c871
 800caf0:	080171a2 	.word	0x080171a2

0800caf4 <__swbuf_r>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	460e      	mov	r6, r1
 800caf8:	4614      	mov	r4, r2
 800cafa:	4605      	mov	r5, r0
 800cafc:	b118      	cbz	r0, 800cb06 <__swbuf_r+0x12>
 800cafe:	6983      	ldr	r3, [r0, #24]
 800cb00:	b90b      	cbnz	r3, 800cb06 <__swbuf_r+0x12>
 800cb02:	f000 f9e7 	bl	800ced4 <__sinit>
 800cb06:	4b21      	ldr	r3, [pc, #132]	; (800cb8c <__swbuf_r+0x98>)
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	d12b      	bne.n	800cb64 <__swbuf_r+0x70>
 800cb0c:	686c      	ldr	r4, [r5, #4]
 800cb0e:	69a3      	ldr	r3, [r4, #24]
 800cb10:	60a3      	str	r3, [r4, #8]
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	071a      	lsls	r2, r3, #28
 800cb16:	d52f      	bpl.n	800cb78 <__swbuf_r+0x84>
 800cb18:	6923      	ldr	r3, [r4, #16]
 800cb1a:	b36b      	cbz	r3, 800cb78 <__swbuf_r+0x84>
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	6820      	ldr	r0, [r4, #0]
 800cb20:	1ac0      	subs	r0, r0, r3
 800cb22:	6963      	ldr	r3, [r4, #20]
 800cb24:	b2f6      	uxtb	r6, r6
 800cb26:	4283      	cmp	r3, r0
 800cb28:	4637      	mov	r7, r6
 800cb2a:	dc04      	bgt.n	800cb36 <__swbuf_r+0x42>
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f000 f93c 	bl	800cdac <_fflush_r>
 800cb34:	bb30      	cbnz	r0, 800cb84 <__swbuf_r+0x90>
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	6022      	str	r2, [r4, #0]
 800cb42:	701e      	strb	r6, [r3, #0]
 800cb44:	6963      	ldr	r3, [r4, #20]
 800cb46:	3001      	adds	r0, #1
 800cb48:	4283      	cmp	r3, r0
 800cb4a:	d004      	beq.n	800cb56 <__swbuf_r+0x62>
 800cb4c:	89a3      	ldrh	r3, [r4, #12]
 800cb4e:	07db      	lsls	r3, r3, #31
 800cb50:	d506      	bpl.n	800cb60 <__swbuf_r+0x6c>
 800cb52:	2e0a      	cmp	r6, #10
 800cb54:	d104      	bne.n	800cb60 <__swbuf_r+0x6c>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 f927 	bl	800cdac <_fflush_r>
 800cb5e:	b988      	cbnz	r0, 800cb84 <__swbuf_r+0x90>
 800cb60:	4638      	mov	r0, r7
 800cb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb64:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <__swbuf_r+0x9c>)
 800cb66:	429c      	cmp	r4, r3
 800cb68:	d101      	bne.n	800cb6e <__swbuf_r+0x7a>
 800cb6a:	68ac      	ldr	r4, [r5, #8]
 800cb6c:	e7cf      	b.n	800cb0e <__swbuf_r+0x1a>
 800cb6e:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <__swbuf_r+0xa0>)
 800cb70:	429c      	cmp	r4, r3
 800cb72:	bf08      	it	eq
 800cb74:	68ec      	ldreq	r4, [r5, #12]
 800cb76:	e7ca      	b.n	800cb0e <__swbuf_r+0x1a>
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f81a 	bl	800cbb4 <__swsetup_r>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d0cb      	beq.n	800cb1c <__swbuf_r+0x28>
 800cb84:	f04f 37ff 	mov.w	r7, #4294967295
 800cb88:	e7ea      	b.n	800cb60 <__swbuf_r+0x6c>
 800cb8a:	bf00      	nop
 800cb8c:	08017314 	.word	0x08017314
 800cb90:	08017334 	.word	0x08017334
 800cb94:	080172f4 	.word	0x080172f4

0800cb98 <__ascii_wctomb>:
 800cb98:	b149      	cbz	r1, 800cbae <__ascii_wctomb+0x16>
 800cb9a:	2aff      	cmp	r2, #255	; 0xff
 800cb9c:	bf85      	ittet	hi
 800cb9e:	238a      	movhi	r3, #138	; 0x8a
 800cba0:	6003      	strhi	r3, [r0, #0]
 800cba2:	700a      	strbls	r2, [r1, #0]
 800cba4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cba8:	bf98      	it	ls
 800cbaa:	2001      	movls	r0, #1
 800cbac:	4770      	bx	lr
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4770      	bx	lr
	...

0800cbb4 <__swsetup_r>:
 800cbb4:	4b32      	ldr	r3, [pc, #200]	; (800cc80 <__swsetup_r+0xcc>)
 800cbb6:	b570      	push	{r4, r5, r6, lr}
 800cbb8:	681d      	ldr	r5, [r3, #0]
 800cbba:	4606      	mov	r6, r0
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	b125      	cbz	r5, 800cbca <__swsetup_r+0x16>
 800cbc0:	69ab      	ldr	r3, [r5, #24]
 800cbc2:	b913      	cbnz	r3, 800cbca <__swsetup_r+0x16>
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f000 f985 	bl	800ced4 <__sinit>
 800cbca:	4b2e      	ldr	r3, [pc, #184]	; (800cc84 <__swsetup_r+0xd0>)
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	d10f      	bne.n	800cbf0 <__swsetup_r+0x3c>
 800cbd0:	686c      	ldr	r4, [r5, #4]
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd8:	0719      	lsls	r1, r3, #28
 800cbda:	d42c      	bmi.n	800cc36 <__swsetup_r+0x82>
 800cbdc:	06dd      	lsls	r5, r3, #27
 800cbde:	d411      	bmi.n	800cc04 <__swsetup_r+0x50>
 800cbe0:	2309      	movs	r3, #9
 800cbe2:	6033      	str	r3, [r6, #0]
 800cbe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	e03e      	b.n	800cc6e <__swsetup_r+0xba>
 800cbf0:	4b25      	ldr	r3, [pc, #148]	; (800cc88 <__swsetup_r+0xd4>)
 800cbf2:	429c      	cmp	r4, r3
 800cbf4:	d101      	bne.n	800cbfa <__swsetup_r+0x46>
 800cbf6:	68ac      	ldr	r4, [r5, #8]
 800cbf8:	e7eb      	b.n	800cbd2 <__swsetup_r+0x1e>
 800cbfa:	4b24      	ldr	r3, [pc, #144]	; (800cc8c <__swsetup_r+0xd8>)
 800cbfc:	429c      	cmp	r4, r3
 800cbfe:	bf08      	it	eq
 800cc00:	68ec      	ldreq	r4, [r5, #12]
 800cc02:	e7e6      	b.n	800cbd2 <__swsetup_r+0x1e>
 800cc04:	0758      	lsls	r0, r3, #29
 800cc06:	d512      	bpl.n	800cc2e <__swsetup_r+0x7a>
 800cc08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc0a:	b141      	cbz	r1, 800cc1e <__swsetup_r+0x6a>
 800cc0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc10:	4299      	cmp	r1, r3
 800cc12:	d002      	beq.n	800cc1a <__swsetup_r+0x66>
 800cc14:	4630      	mov	r0, r6
 800cc16:	f7ff fb31 	bl	800c27c <_free_r>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	6363      	str	r3, [r4, #52]	; 0x34
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	2300      	movs	r3, #0
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f043 0308 	orr.w	r3, r3, #8
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	6923      	ldr	r3, [r4, #16]
 800cc38:	b94b      	cbnz	r3, 800cc4e <__swsetup_r+0x9a>
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc44:	d003      	beq.n	800cc4e <__swsetup_r+0x9a>
 800cc46:	4621      	mov	r1, r4
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f000 fa09 	bl	800d060 <__smakebuf_r>
 800cc4e:	89a0      	ldrh	r0, [r4, #12]
 800cc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc54:	f010 0301 	ands.w	r3, r0, #1
 800cc58:	d00a      	beq.n	800cc70 <__swsetup_r+0xbc>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	60a3      	str	r3, [r4, #8]
 800cc5e:	6963      	ldr	r3, [r4, #20]
 800cc60:	425b      	negs	r3, r3
 800cc62:	61a3      	str	r3, [r4, #24]
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	b943      	cbnz	r3, 800cc7a <__swsetup_r+0xc6>
 800cc68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc6c:	d1ba      	bne.n	800cbe4 <__swsetup_r+0x30>
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	0781      	lsls	r1, r0, #30
 800cc72:	bf58      	it	pl
 800cc74:	6963      	ldrpl	r3, [r4, #20]
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	e7f4      	b.n	800cc64 <__swsetup_r+0xb0>
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	e7f7      	b.n	800cc6e <__swsetup_r+0xba>
 800cc7e:	bf00      	nop
 800cc80:	20000040 	.word	0x20000040
 800cc84:	08017314 	.word	0x08017314
 800cc88:	08017334 	.word	0x08017334
 800cc8c:	080172f4 	.word	0x080172f4

0800cc90 <abort>:
 800cc90:	b508      	push	{r3, lr}
 800cc92:	2006      	movs	r0, #6
 800cc94:	f000 fa54 	bl	800d140 <raise>
 800cc98:	2001      	movs	r0, #1
 800cc9a:	f7f6 f95d 	bl	8002f58 <_exit>
	...

0800cca0 <__sflush_r>:
 800cca0:	898a      	ldrh	r2, [r1, #12]
 800cca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca6:	4605      	mov	r5, r0
 800cca8:	0710      	lsls	r0, r2, #28
 800ccaa:	460c      	mov	r4, r1
 800ccac:	d458      	bmi.n	800cd60 <__sflush_r+0xc0>
 800ccae:	684b      	ldr	r3, [r1, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	dc05      	bgt.n	800ccc0 <__sflush_r+0x20>
 800ccb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	dc02      	bgt.n	800ccc0 <__sflush_r+0x20>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccc2:	2e00      	cmp	r6, #0
 800ccc4:	d0f9      	beq.n	800ccba <__sflush_r+0x1a>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cccc:	682f      	ldr	r7, [r5, #0]
 800ccce:	602b      	str	r3, [r5, #0]
 800ccd0:	d032      	beq.n	800cd38 <__sflush_r+0x98>
 800ccd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	075a      	lsls	r2, r3, #29
 800ccd8:	d505      	bpl.n	800cce6 <__sflush_r+0x46>
 800ccda:	6863      	ldr	r3, [r4, #4]
 800ccdc:	1ac0      	subs	r0, r0, r3
 800ccde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cce0:	b10b      	cbz	r3, 800cce6 <__sflush_r+0x46>
 800cce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cce4:	1ac0      	subs	r0, r0, r3
 800cce6:	2300      	movs	r3, #0
 800cce8:	4602      	mov	r2, r0
 800ccea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccec:	6a21      	ldr	r1, [r4, #32]
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b0      	blx	r6
 800ccf2:	1c43      	adds	r3, r0, #1
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	d106      	bne.n	800cd06 <__sflush_r+0x66>
 800ccf8:	6829      	ldr	r1, [r5, #0]
 800ccfa:	291d      	cmp	r1, #29
 800ccfc:	d82c      	bhi.n	800cd58 <__sflush_r+0xb8>
 800ccfe:	4a2a      	ldr	r2, [pc, #168]	; (800cda8 <__sflush_r+0x108>)
 800cd00:	40ca      	lsrs	r2, r1
 800cd02:	07d6      	lsls	r6, r2, #31
 800cd04:	d528      	bpl.n	800cd58 <__sflush_r+0xb8>
 800cd06:	2200      	movs	r2, #0
 800cd08:	6062      	str	r2, [r4, #4]
 800cd0a:	04d9      	lsls	r1, r3, #19
 800cd0c:	6922      	ldr	r2, [r4, #16]
 800cd0e:	6022      	str	r2, [r4, #0]
 800cd10:	d504      	bpl.n	800cd1c <__sflush_r+0x7c>
 800cd12:	1c42      	adds	r2, r0, #1
 800cd14:	d101      	bne.n	800cd1a <__sflush_r+0x7a>
 800cd16:	682b      	ldr	r3, [r5, #0]
 800cd18:	b903      	cbnz	r3, 800cd1c <__sflush_r+0x7c>
 800cd1a:	6560      	str	r0, [r4, #84]	; 0x54
 800cd1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd1e:	602f      	str	r7, [r5, #0]
 800cd20:	2900      	cmp	r1, #0
 800cd22:	d0ca      	beq.n	800ccba <__sflush_r+0x1a>
 800cd24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd28:	4299      	cmp	r1, r3
 800cd2a:	d002      	beq.n	800cd32 <__sflush_r+0x92>
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	f7ff faa5 	bl	800c27c <_free_r>
 800cd32:	2000      	movs	r0, #0
 800cd34:	6360      	str	r0, [r4, #52]	; 0x34
 800cd36:	e7c1      	b.n	800ccbc <__sflush_r+0x1c>
 800cd38:	6a21      	ldr	r1, [r4, #32]
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b0      	blx	r6
 800cd40:	1c41      	adds	r1, r0, #1
 800cd42:	d1c7      	bne.n	800ccd4 <__sflush_r+0x34>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d0c4      	beq.n	800ccd4 <__sflush_r+0x34>
 800cd4a:	2b1d      	cmp	r3, #29
 800cd4c:	d001      	beq.n	800cd52 <__sflush_r+0xb2>
 800cd4e:	2b16      	cmp	r3, #22
 800cd50:	d101      	bne.n	800cd56 <__sflush_r+0xb6>
 800cd52:	602f      	str	r7, [r5, #0]
 800cd54:	e7b1      	b.n	800ccba <__sflush_r+0x1a>
 800cd56:	89a3      	ldrh	r3, [r4, #12]
 800cd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd5c:	81a3      	strh	r3, [r4, #12]
 800cd5e:	e7ad      	b.n	800ccbc <__sflush_r+0x1c>
 800cd60:	690f      	ldr	r7, [r1, #16]
 800cd62:	2f00      	cmp	r7, #0
 800cd64:	d0a9      	beq.n	800ccba <__sflush_r+0x1a>
 800cd66:	0793      	lsls	r3, r2, #30
 800cd68:	680e      	ldr	r6, [r1, #0]
 800cd6a:	bf08      	it	eq
 800cd6c:	694b      	ldreq	r3, [r1, #20]
 800cd6e:	600f      	str	r7, [r1, #0]
 800cd70:	bf18      	it	ne
 800cd72:	2300      	movne	r3, #0
 800cd74:	eba6 0807 	sub.w	r8, r6, r7
 800cd78:	608b      	str	r3, [r1, #8]
 800cd7a:	f1b8 0f00 	cmp.w	r8, #0
 800cd7e:	dd9c      	ble.n	800ccba <__sflush_r+0x1a>
 800cd80:	6a21      	ldr	r1, [r4, #32]
 800cd82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd84:	4643      	mov	r3, r8
 800cd86:	463a      	mov	r2, r7
 800cd88:	4628      	mov	r0, r5
 800cd8a:	47b0      	blx	r6
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	dc06      	bgt.n	800cd9e <__sflush_r+0xfe>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	e78e      	b.n	800ccbc <__sflush_r+0x1c>
 800cd9e:	4407      	add	r7, r0
 800cda0:	eba8 0800 	sub.w	r8, r8, r0
 800cda4:	e7e9      	b.n	800cd7a <__sflush_r+0xda>
 800cda6:	bf00      	nop
 800cda8:	20400001 	.word	0x20400001

0800cdac <_fflush_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	690b      	ldr	r3, [r1, #16]
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	b913      	cbnz	r3, 800cdbc <_fflush_r+0x10>
 800cdb6:	2500      	movs	r5, #0
 800cdb8:	4628      	mov	r0, r5
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	b118      	cbz	r0, 800cdc6 <_fflush_r+0x1a>
 800cdbe:	6983      	ldr	r3, [r0, #24]
 800cdc0:	b90b      	cbnz	r3, 800cdc6 <_fflush_r+0x1a>
 800cdc2:	f000 f887 	bl	800ced4 <__sinit>
 800cdc6:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <_fflush_r+0x6c>)
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	d11b      	bne.n	800ce04 <_fflush_r+0x58>
 800cdcc:	686c      	ldr	r4, [r5, #4]
 800cdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0ef      	beq.n	800cdb6 <_fflush_r+0xa>
 800cdd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdd8:	07d0      	lsls	r0, r2, #31
 800cdda:	d404      	bmi.n	800cde6 <_fflush_r+0x3a>
 800cddc:	0599      	lsls	r1, r3, #22
 800cdde:	d402      	bmi.n	800cde6 <_fflush_r+0x3a>
 800cde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cde2:	f000 f915 	bl	800d010 <__retarget_lock_acquire_recursive>
 800cde6:	4628      	mov	r0, r5
 800cde8:	4621      	mov	r1, r4
 800cdea:	f7ff ff59 	bl	800cca0 <__sflush_r>
 800cdee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdf0:	07da      	lsls	r2, r3, #31
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	d4e0      	bmi.n	800cdb8 <_fflush_r+0xc>
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	059b      	lsls	r3, r3, #22
 800cdfa:	d4dd      	bmi.n	800cdb8 <_fflush_r+0xc>
 800cdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdfe:	f000 f908 	bl	800d012 <__retarget_lock_release_recursive>
 800ce02:	e7d9      	b.n	800cdb8 <_fflush_r+0xc>
 800ce04:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <_fflush_r+0x70>)
 800ce06:	429c      	cmp	r4, r3
 800ce08:	d101      	bne.n	800ce0e <_fflush_r+0x62>
 800ce0a:	68ac      	ldr	r4, [r5, #8]
 800ce0c:	e7df      	b.n	800cdce <_fflush_r+0x22>
 800ce0e:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <_fflush_r+0x74>)
 800ce10:	429c      	cmp	r4, r3
 800ce12:	bf08      	it	eq
 800ce14:	68ec      	ldreq	r4, [r5, #12]
 800ce16:	e7da      	b.n	800cdce <_fflush_r+0x22>
 800ce18:	08017314 	.word	0x08017314
 800ce1c:	08017334 	.word	0x08017334
 800ce20:	080172f4 	.word	0x080172f4

0800ce24 <std>:
 800ce24:	2300      	movs	r3, #0
 800ce26:	b510      	push	{r4, lr}
 800ce28:	4604      	mov	r4, r0
 800ce2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce32:	6083      	str	r3, [r0, #8]
 800ce34:	8181      	strh	r1, [r0, #12]
 800ce36:	6643      	str	r3, [r0, #100]	; 0x64
 800ce38:	81c2      	strh	r2, [r0, #14]
 800ce3a:	6183      	str	r3, [r0, #24]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	2208      	movs	r2, #8
 800ce40:	305c      	adds	r0, #92	; 0x5c
 800ce42:	f7fd fb59 	bl	800a4f8 <memset>
 800ce46:	4b05      	ldr	r3, [pc, #20]	; (800ce5c <std+0x38>)
 800ce48:	6263      	str	r3, [r4, #36]	; 0x24
 800ce4a:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <std+0x3c>)
 800ce4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce4e:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <std+0x40>)
 800ce50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce52:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <std+0x44>)
 800ce54:	6224      	str	r4, [r4, #32]
 800ce56:	6323      	str	r3, [r4, #48]	; 0x30
 800ce58:	bd10      	pop	{r4, pc}
 800ce5a:	bf00      	nop
 800ce5c:	0800d179 	.word	0x0800d179
 800ce60:	0800d19b 	.word	0x0800d19b
 800ce64:	0800d1d3 	.word	0x0800d1d3
 800ce68:	0800d1f7 	.word	0x0800d1f7

0800ce6c <_cleanup_r>:
 800ce6c:	4901      	ldr	r1, [pc, #4]	; (800ce74 <_cleanup_r+0x8>)
 800ce6e:	f000 b8af 	b.w	800cfd0 <_fwalk_reent>
 800ce72:	bf00      	nop
 800ce74:	0800cdad 	.word	0x0800cdad

0800ce78 <__sfmoreglue>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	2268      	movs	r2, #104	; 0x68
 800ce7c:	1e4d      	subs	r5, r1, #1
 800ce7e:	4355      	muls	r5, r2
 800ce80:	460e      	mov	r6, r1
 800ce82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce86:	f7ff fa65 	bl	800c354 <_malloc_r>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	b140      	cbz	r0, 800cea0 <__sfmoreglue+0x28>
 800ce8e:	2100      	movs	r1, #0
 800ce90:	e9c0 1600 	strd	r1, r6, [r0]
 800ce94:	300c      	adds	r0, #12
 800ce96:	60a0      	str	r0, [r4, #8]
 800ce98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce9c:	f7fd fb2c 	bl	800a4f8 <memset>
 800cea0:	4620      	mov	r0, r4
 800cea2:	bd70      	pop	{r4, r5, r6, pc}

0800cea4 <__sfp_lock_acquire>:
 800cea4:	4801      	ldr	r0, [pc, #4]	; (800ceac <__sfp_lock_acquire+0x8>)
 800cea6:	f000 b8b3 	b.w	800d010 <__retarget_lock_acquire_recursive>
 800ceaa:	bf00      	nop
 800ceac:	20000629 	.word	0x20000629

0800ceb0 <__sfp_lock_release>:
 800ceb0:	4801      	ldr	r0, [pc, #4]	; (800ceb8 <__sfp_lock_release+0x8>)
 800ceb2:	f000 b8ae 	b.w	800d012 <__retarget_lock_release_recursive>
 800ceb6:	bf00      	nop
 800ceb8:	20000629 	.word	0x20000629

0800cebc <__sinit_lock_acquire>:
 800cebc:	4801      	ldr	r0, [pc, #4]	; (800cec4 <__sinit_lock_acquire+0x8>)
 800cebe:	f000 b8a7 	b.w	800d010 <__retarget_lock_acquire_recursive>
 800cec2:	bf00      	nop
 800cec4:	2000062a 	.word	0x2000062a

0800cec8 <__sinit_lock_release>:
 800cec8:	4801      	ldr	r0, [pc, #4]	; (800ced0 <__sinit_lock_release+0x8>)
 800ceca:	f000 b8a2 	b.w	800d012 <__retarget_lock_release_recursive>
 800cece:	bf00      	nop
 800ced0:	2000062a 	.word	0x2000062a

0800ced4 <__sinit>:
 800ced4:	b510      	push	{r4, lr}
 800ced6:	4604      	mov	r4, r0
 800ced8:	f7ff fff0 	bl	800cebc <__sinit_lock_acquire>
 800cedc:	69a3      	ldr	r3, [r4, #24]
 800cede:	b11b      	cbz	r3, 800cee8 <__sinit+0x14>
 800cee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee4:	f7ff bff0 	b.w	800cec8 <__sinit_lock_release>
 800cee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ceec:	6523      	str	r3, [r4, #80]	; 0x50
 800ceee:	4b13      	ldr	r3, [pc, #76]	; (800cf3c <__sinit+0x68>)
 800cef0:	4a13      	ldr	r2, [pc, #76]	; (800cf40 <__sinit+0x6c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cef6:	42a3      	cmp	r3, r4
 800cef8:	bf04      	itt	eq
 800cefa:	2301      	moveq	r3, #1
 800cefc:	61a3      	streq	r3, [r4, #24]
 800cefe:	4620      	mov	r0, r4
 800cf00:	f000 f820 	bl	800cf44 <__sfp>
 800cf04:	6060      	str	r0, [r4, #4]
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 f81c 	bl	800cf44 <__sfp>
 800cf0c:	60a0      	str	r0, [r4, #8]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f000 f818 	bl	800cf44 <__sfp>
 800cf14:	2200      	movs	r2, #0
 800cf16:	60e0      	str	r0, [r4, #12]
 800cf18:	2104      	movs	r1, #4
 800cf1a:	6860      	ldr	r0, [r4, #4]
 800cf1c:	f7ff ff82 	bl	800ce24 <std>
 800cf20:	68a0      	ldr	r0, [r4, #8]
 800cf22:	2201      	movs	r2, #1
 800cf24:	2109      	movs	r1, #9
 800cf26:	f7ff ff7d 	bl	800ce24 <std>
 800cf2a:	68e0      	ldr	r0, [r4, #12]
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	2112      	movs	r1, #18
 800cf30:	f7ff ff78 	bl	800ce24 <std>
 800cf34:	2301      	movs	r3, #1
 800cf36:	61a3      	str	r3, [r4, #24]
 800cf38:	e7d2      	b.n	800cee0 <__sinit+0xc>
 800cf3a:	bf00      	nop
 800cf3c:	08016f7c 	.word	0x08016f7c
 800cf40:	0800ce6d 	.word	0x0800ce6d

0800cf44 <__sfp>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	4607      	mov	r7, r0
 800cf48:	f7ff ffac 	bl	800cea4 <__sfp_lock_acquire>
 800cf4c:	4b1e      	ldr	r3, [pc, #120]	; (800cfc8 <__sfp+0x84>)
 800cf4e:	681e      	ldr	r6, [r3, #0]
 800cf50:	69b3      	ldr	r3, [r6, #24]
 800cf52:	b913      	cbnz	r3, 800cf5a <__sfp+0x16>
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7ff ffbd 	bl	800ced4 <__sinit>
 800cf5a:	3648      	adds	r6, #72	; 0x48
 800cf5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	d503      	bpl.n	800cf6c <__sfp+0x28>
 800cf64:	6833      	ldr	r3, [r6, #0]
 800cf66:	b30b      	cbz	r3, 800cfac <__sfp+0x68>
 800cf68:	6836      	ldr	r6, [r6, #0]
 800cf6a:	e7f7      	b.n	800cf5c <__sfp+0x18>
 800cf6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf70:	b9d5      	cbnz	r5, 800cfa8 <__sfp+0x64>
 800cf72:	4b16      	ldr	r3, [pc, #88]	; (800cfcc <__sfp+0x88>)
 800cf74:	60e3      	str	r3, [r4, #12]
 800cf76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf7a:	6665      	str	r5, [r4, #100]	; 0x64
 800cf7c:	f000 f847 	bl	800d00e <__retarget_lock_init_recursive>
 800cf80:	f7ff ff96 	bl	800ceb0 <__sfp_lock_release>
 800cf84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf8c:	6025      	str	r5, [r4, #0]
 800cf8e:	61a5      	str	r5, [r4, #24]
 800cf90:	2208      	movs	r2, #8
 800cf92:	4629      	mov	r1, r5
 800cf94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf98:	f7fd faae 	bl	800a4f8 <memset>
 800cf9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cfa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa8:	3468      	adds	r4, #104	; 0x68
 800cfaa:	e7d9      	b.n	800cf60 <__sfp+0x1c>
 800cfac:	2104      	movs	r1, #4
 800cfae:	4638      	mov	r0, r7
 800cfb0:	f7ff ff62 	bl	800ce78 <__sfmoreglue>
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	6030      	str	r0, [r6, #0]
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d1d5      	bne.n	800cf68 <__sfp+0x24>
 800cfbc:	f7ff ff78 	bl	800ceb0 <__sfp_lock_release>
 800cfc0:	230c      	movs	r3, #12
 800cfc2:	603b      	str	r3, [r7, #0]
 800cfc4:	e7ee      	b.n	800cfa4 <__sfp+0x60>
 800cfc6:	bf00      	nop
 800cfc8:	08016f7c 	.word	0x08016f7c
 800cfcc:	ffff0001 	.word	0xffff0001

0800cfd0 <_fwalk_reent>:
 800cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	4688      	mov	r8, r1
 800cfd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfdc:	2700      	movs	r7, #0
 800cfde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfe2:	f1b9 0901 	subs.w	r9, r9, #1
 800cfe6:	d505      	bpl.n	800cff4 <_fwalk_reent+0x24>
 800cfe8:	6824      	ldr	r4, [r4, #0]
 800cfea:	2c00      	cmp	r4, #0
 800cfec:	d1f7      	bne.n	800cfde <_fwalk_reent+0xe>
 800cfee:	4638      	mov	r0, r7
 800cff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff4:	89ab      	ldrh	r3, [r5, #12]
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d907      	bls.n	800d00a <_fwalk_reent+0x3a>
 800cffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cffe:	3301      	adds	r3, #1
 800d000:	d003      	beq.n	800d00a <_fwalk_reent+0x3a>
 800d002:	4629      	mov	r1, r5
 800d004:	4630      	mov	r0, r6
 800d006:	47c0      	blx	r8
 800d008:	4307      	orrs	r7, r0
 800d00a:	3568      	adds	r5, #104	; 0x68
 800d00c:	e7e9      	b.n	800cfe2 <_fwalk_reent+0x12>

0800d00e <__retarget_lock_init_recursive>:
 800d00e:	4770      	bx	lr

0800d010 <__retarget_lock_acquire_recursive>:
 800d010:	4770      	bx	lr

0800d012 <__retarget_lock_release_recursive>:
 800d012:	4770      	bx	lr

0800d014 <__swhatbuf_r>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	460e      	mov	r6, r1
 800d018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d01c:	2900      	cmp	r1, #0
 800d01e:	b096      	sub	sp, #88	; 0x58
 800d020:	4614      	mov	r4, r2
 800d022:	461d      	mov	r5, r3
 800d024:	da08      	bge.n	800d038 <__swhatbuf_r+0x24>
 800d026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	602a      	str	r2, [r5, #0]
 800d02e:	061a      	lsls	r2, r3, #24
 800d030:	d410      	bmi.n	800d054 <__swhatbuf_r+0x40>
 800d032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d036:	e00e      	b.n	800d056 <__swhatbuf_r+0x42>
 800d038:	466a      	mov	r2, sp
 800d03a:	f000 f903 	bl	800d244 <_fstat_r>
 800d03e:	2800      	cmp	r0, #0
 800d040:	dbf1      	blt.n	800d026 <__swhatbuf_r+0x12>
 800d042:	9a01      	ldr	r2, [sp, #4]
 800d044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d04c:	425a      	negs	r2, r3
 800d04e:	415a      	adcs	r2, r3
 800d050:	602a      	str	r2, [r5, #0]
 800d052:	e7ee      	b.n	800d032 <__swhatbuf_r+0x1e>
 800d054:	2340      	movs	r3, #64	; 0x40
 800d056:	2000      	movs	r0, #0
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	b016      	add	sp, #88	; 0x58
 800d05c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d060 <__smakebuf_r>:
 800d060:	898b      	ldrh	r3, [r1, #12]
 800d062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d064:	079d      	lsls	r5, r3, #30
 800d066:	4606      	mov	r6, r0
 800d068:	460c      	mov	r4, r1
 800d06a:	d507      	bpl.n	800d07c <__smakebuf_r+0x1c>
 800d06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	6123      	str	r3, [r4, #16]
 800d074:	2301      	movs	r3, #1
 800d076:	6163      	str	r3, [r4, #20]
 800d078:	b002      	add	sp, #8
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	ab01      	add	r3, sp, #4
 800d07e:	466a      	mov	r2, sp
 800d080:	f7ff ffc8 	bl	800d014 <__swhatbuf_r>
 800d084:	9900      	ldr	r1, [sp, #0]
 800d086:	4605      	mov	r5, r0
 800d088:	4630      	mov	r0, r6
 800d08a:	f7ff f963 	bl	800c354 <_malloc_r>
 800d08e:	b948      	cbnz	r0, 800d0a4 <__smakebuf_r+0x44>
 800d090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d094:	059a      	lsls	r2, r3, #22
 800d096:	d4ef      	bmi.n	800d078 <__smakebuf_r+0x18>
 800d098:	f023 0303 	bic.w	r3, r3, #3
 800d09c:	f043 0302 	orr.w	r3, r3, #2
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	e7e3      	b.n	800d06c <__smakebuf_r+0xc>
 800d0a4:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <__smakebuf_r+0x7c>)
 800d0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	6020      	str	r0, [r4, #0]
 800d0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	9b00      	ldr	r3, [sp, #0]
 800d0b4:	6163      	str	r3, [r4, #20]
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	6120      	str	r0, [r4, #16]
 800d0ba:	b15b      	cbz	r3, 800d0d4 <__smakebuf_r+0x74>
 800d0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f000 f8d1 	bl	800d268 <_isatty_r>
 800d0c6:	b128      	cbz	r0, 800d0d4 <__smakebuf_r+0x74>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	f043 0301 	orr.w	r3, r3, #1
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	89a0      	ldrh	r0, [r4, #12]
 800d0d6:	4305      	orrs	r5, r0
 800d0d8:	81a5      	strh	r5, [r4, #12]
 800d0da:	e7cd      	b.n	800d078 <__smakebuf_r+0x18>
 800d0dc:	0800ce6d 	.word	0x0800ce6d

0800d0e0 <_malloc_usable_size_r>:
 800d0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0e4:	1f18      	subs	r0, r3, #4
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	bfbc      	itt	lt
 800d0ea:	580b      	ldrlt	r3, [r1, r0]
 800d0ec:	18c0      	addlt	r0, r0, r3
 800d0ee:	4770      	bx	lr

0800d0f0 <_raise_r>:
 800d0f0:	291f      	cmp	r1, #31
 800d0f2:	b538      	push	{r3, r4, r5, lr}
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	d904      	bls.n	800d104 <_raise_r+0x14>
 800d0fa:	2316      	movs	r3, #22
 800d0fc:	6003      	str	r3, [r0, #0]
 800d0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d106:	b112      	cbz	r2, 800d10e <_raise_r+0x1e>
 800d108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d10c:	b94b      	cbnz	r3, 800d122 <_raise_r+0x32>
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 f830 	bl	800d174 <_getpid_r>
 800d114:	462a      	mov	r2, r5
 800d116:	4601      	mov	r1, r0
 800d118:	4620      	mov	r0, r4
 800d11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d11e:	f000 b817 	b.w	800d150 <_kill_r>
 800d122:	2b01      	cmp	r3, #1
 800d124:	d00a      	beq.n	800d13c <_raise_r+0x4c>
 800d126:	1c59      	adds	r1, r3, #1
 800d128:	d103      	bne.n	800d132 <_raise_r+0x42>
 800d12a:	2316      	movs	r3, #22
 800d12c:	6003      	str	r3, [r0, #0]
 800d12e:	2001      	movs	r0, #1
 800d130:	e7e7      	b.n	800d102 <_raise_r+0x12>
 800d132:	2400      	movs	r4, #0
 800d134:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d138:	4628      	mov	r0, r5
 800d13a:	4798      	blx	r3
 800d13c:	2000      	movs	r0, #0
 800d13e:	e7e0      	b.n	800d102 <_raise_r+0x12>

0800d140 <raise>:
 800d140:	4b02      	ldr	r3, [pc, #8]	; (800d14c <raise+0xc>)
 800d142:	4601      	mov	r1, r0
 800d144:	6818      	ldr	r0, [r3, #0]
 800d146:	f7ff bfd3 	b.w	800d0f0 <_raise_r>
 800d14a:	bf00      	nop
 800d14c:	20000040 	.word	0x20000040

0800d150 <_kill_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d07      	ldr	r5, [pc, #28]	; (800d170 <_kill_r+0x20>)
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	4608      	mov	r0, r1
 800d15a:	4611      	mov	r1, r2
 800d15c:	602b      	str	r3, [r5, #0]
 800d15e:	f7f5 feeb 	bl	8002f38 <_kill>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	d102      	bne.n	800d16c <_kill_r+0x1c>
 800d166:	682b      	ldr	r3, [r5, #0]
 800d168:	b103      	cbz	r3, 800d16c <_kill_r+0x1c>
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	bd38      	pop	{r3, r4, r5, pc}
 800d16e:	bf00      	nop
 800d170:	20000624 	.word	0x20000624

0800d174 <_getpid_r>:
 800d174:	f7f5 bed8 	b.w	8002f28 <_getpid>

0800d178 <__sread>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	460c      	mov	r4, r1
 800d17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d180:	f000 f894 	bl	800d2ac <_read_r>
 800d184:	2800      	cmp	r0, #0
 800d186:	bfab      	itete	ge
 800d188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d18a:	89a3      	ldrhlt	r3, [r4, #12]
 800d18c:	181b      	addge	r3, r3, r0
 800d18e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d192:	bfac      	ite	ge
 800d194:	6563      	strge	r3, [r4, #84]	; 0x54
 800d196:	81a3      	strhlt	r3, [r4, #12]
 800d198:	bd10      	pop	{r4, pc}

0800d19a <__swrite>:
 800d19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19e:	461f      	mov	r7, r3
 800d1a0:	898b      	ldrh	r3, [r1, #12]
 800d1a2:	05db      	lsls	r3, r3, #23
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	4616      	mov	r6, r2
 800d1aa:	d505      	bpl.n	800d1b8 <__swrite+0x1e>
 800d1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f000 f868 	bl	800d288 <_lseek_r>
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1c2:	81a3      	strh	r3, [r4, #12]
 800d1c4:	4632      	mov	r2, r6
 800d1c6:	463b      	mov	r3, r7
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ce:	f000 b817 	b.w	800d200 <_write_r>

0800d1d2 <__sseek>:
 800d1d2:	b510      	push	{r4, lr}
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1da:	f000 f855 	bl	800d288 <_lseek_r>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	bf15      	itete	ne
 800d1e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1ee:	81a3      	strheq	r3, [r4, #12]
 800d1f0:	bf18      	it	ne
 800d1f2:	81a3      	strhne	r3, [r4, #12]
 800d1f4:	bd10      	pop	{r4, pc}

0800d1f6 <__sclose>:
 800d1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fa:	f000 b813 	b.w	800d224 <_close_r>
	...

0800d200 <_write_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_write_r+0x20>)
 800d204:	4604      	mov	r4, r0
 800d206:	4608      	mov	r0, r1
 800d208:	4611      	mov	r1, r2
 800d20a:	2200      	movs	r2, #0
 800d20c:	602a      	str	r2, [r5, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f7f5 fec9 	bl	8002fa6 <_write>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_write_r+0x1e>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_write_r+0x1e>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	20000624 	.word	0x20000624

0800d224 <_close_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d06      	ldr	r5, [pc, #24]	; (800d240 <_close_r+0x1c>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	f7f5 fed5 	bl	8002fde <_close>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_close_r+0x1a>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_close_r+0x1a>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	20000624 	.word	0x20000624

0800d244 <_fstat_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d07      	ldr	r5, [pc, #28]	; (800d264 <_fstat_r+0x20>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	4611      	mov	r1, r2
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f7f5 fed0 	bl	8002ff6 <_fstat>
 800d256:	1c43      	adds	r3, r0, #1
 800d258:	d102      	bne.n	800d260 <_fstat_r+0x1c>
 800d25a:	682b      	ldr	r3, [r5, #0]
 800d25c:	b103      	cbz	r3, 800d260 <_fstat_r+0x1c>
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	bf00      	nop
 800d264:	20000624 	.word	0x20000624

0800d268 <_isatty_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	; (800d284 <_isatty_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f5 fecf 	bl	8003016 <_isatty>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_isatty_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_isatty_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20000624 	.word	0x20000624

0800d288 <_lseek_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	; (800d2a8 <_lseek_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f5 fec8 	bl	800302c <_lseek>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_lseek_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_lseek_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20000624 	.word	0x20000624

0800d2ac <_read_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d07      	ldr	r5, [pc, #28]	; (800d2cc <_read_r+0x20>)
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f7f5 fe56 	bl	8002f6c <_read>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_read_r+0x1e>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_read_r+0x1e>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	20000624 	.word	0x20000624

0800d2d0 <trunc>:
 800d2d0:	ec51 0b10 	vmov	r0, r1, d0
 800d2d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d2d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d2dc:	2b13      	cmp	r3, #19
 800d2de:	b5d0      	push	{r4, r6, r7, lr}
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	dc10      	bgt.n	800d306 <trunc+0x36>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	bfa5      	ittet	ge
 800d2e8:	4a11      	ldrge	r2, [pc, #68]	; (800d330 <trunc+0x60>)
 800d2ea:	fa42 f303 	asrge.w	r3, r2, r3
 800d2ee:	2100      	movlt	r1, #0
 800d2f0:	2100      	movge	r1, #0
 800d2f2:	bfb9      	ittee	lt
 800d2f4:	2000      	movlt	r0, #0
 800d2f6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800d2fa:	2000      	movge	r0, #0
 800d2fc:	ea24 0103 	bicge.w	r1, r4, r3
 800d300:	ec41 0b10 	vmov	d0, r0, r1
 800d304:	bdd0      	pop	{r4, r6, r7, pc}
 800d306:	2b33      	cmp	r3, #51	; 0x33
 800d308:	dd08      	ble.n	800d31c <trunc+0x4c>
 800d30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d30e:	d1f7      	bne.n	800d300 <trunc+0x30>
 800d310:	ee10 2a10 	vmov	r2, s0
 800d314:	460b      	mov	r3, r1
 800d316:	f7f2 ffc1 	bl	800029c <__adddf3>
 800d31a:	e7f1      	b.n	800d300 <trunc+0x30>
 800d31c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d320:	f04f 33ff 	mov.w	r3, #4294967295
 800d324:	fa23 f202 	lsr.w	r2, r3, r2
 800d328:	ea20 0602 	bic.w	r6, r0, r2
 800d32c:	4630      	mov	r0, r6
 800d32e:	e7e7      	b.n	800d300 <trunc+0x30>
 800d330:	000fffff 	.word	0x000fffff

0800d334 <ceilf>:
 800d334:	ee10 3a10 	vmov	r3, s0
 800d338:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d33c:	3a7f      	subs	r2, #127	; 0x7f
 800d33e:	2a16      	cmp	r2, #22
 800d340:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d344:	dc2a      	bgt.n	800d39c <ceilf+0x68>
 800d346:	2a00      	cmp	r2, #0
 800d348:	da11      	bge.n	800d36e <ceilf+0x3a>
 800d34a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d3b0 <ceilf+0x7c>
 800d34e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d352:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35a:	dd05      	ble.n	800d368 <ceilf+0x34>
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	db23      	blt.n	800d3a8 <ceilf+0x74>
 800d360:	2900      	cmp	r1, #0
 800d362:	bf18      	it	ne
 800d364:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800d368:	ee00 3a10 	vmov	s0, r3
 800d36c:	4770      	bx	lr
 800d36e:	4911      	ldr	r1, [pc, #68]	; (800d3b4 <ceilf+0x80>)
 800d370:	4111      	asrs	r1, r2
 800d372:	420b      	tst	r3, r1
 800d374:	d0fa      	beq.n	800d36c <ceilf+0x38>
 800d376:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d3b0 <ceilf+0x7c>
 800d37a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d37e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	ddef      	ble.n	800d368 <ceilf+0x34>
 800d388:	2b00      	cmp	r3, #0
 800d38a:	bfc2      	ittt	gt
 800d38c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800d390:	fa40 f202 	asrgt.w	r2, r0, r2
 800d394:	189b      	addgt	r3, r3, r2
 800d396:	ea23 0301 	bic.w	r3, r3, r1
 800d39a:	e7e5      	b.n	800d368 <ceilf+0x34>
 800d39c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d3a0:	d3e4      	bcc.n	800d36c <ceilf+0x38>
 800d3a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3a6:	4770      	bx	lr
 800d3a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3ac:	e7dc      	b.n	800d368 <ceilf+0x34>
 800d3ae:	bf00      	nop
 800d3b0:	7149f2ca 	.word	0x7149f2ca
 800d3b4:	007fffff 	.word	0x007fffff

0800d3b8 <_init>:
 800d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ba:	bf00      	nop
 800d3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3be:	bc08      	pop	{r3}
 800d3c0:	469e      	mov	lr, r3
 800d3c2:	4770      	bx	lr

0800d3c4 <_fini>:
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	bf00      	nop
 800d3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ca:	bc08      	pop	{r3}
 800d3cc:	469e      	mov	lr, r3
 800d3ce:	4770      	bx	lr
