
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d714  0800fe68  0800fe68  0001fe68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d57c  0803d57c  00050420  2**0
                  CONTENTS
  4 .ARM          00000008  0803d57c  0803d57c  0004d57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d584  0803d584  00050420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d584  0803d584  0004d584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d588  0803d588  0004d588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0803d58c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000420  0803d9ac  00050420  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0803d9ac  000508d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b9b  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003376  00000000  00000000  00068feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0006c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0006d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a32a  00000000  00000000  0006ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e52  00000000  00000000  00089072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a453  00000000  00000000  000a2ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cfc  00000000  00000000  0013d368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000420 	.word	0x20000420
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe50 	.word	0x0800fe50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000424 	.word	0x20000424
 80001dc:	0800fe50 	.word	0x0800fe50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f006 fd8d 	bl	8007b30 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00e fe8e 	bl	800fd68 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00e fe69 	bl	800fd68 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f006 fd32 	bl	8007b30 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000440 	.word	0x20000440
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f006 fdfc 	bl	8007d24 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000043c 	.word	0x2000043c
 800114c:	2000043d 	.word	0x2000043d

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 fdd4 	bl	8007d24 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000043c 	.word	0x2000043c
 8001194:	2000043d 	.word	0x2000043d

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f006 fdb0 	bl	8007d24 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000043c 	.word	0x2000043c
 8001208:	2000043d 	.word	0x2000043d
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f006 fd74 	bl	8007d24 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	2000043c 	.word	0x2000043c
 800129c:	2000043d 	.word	0x2000043d
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f006 faa3 	bl	8007810 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f009 fca0 	bl	800ac1e <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f006 fa94 	bl	8007810 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
	//return adcbit * 0.001215; // 4.98/4096
	//return adcbit * 0.001225; // 5.02/4096
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 800135e:	4b74      	ldr	r3, [pc, #464]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	f040 80c5 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001370:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b52      	cmp	r3, #82	; 0x52
 800137e:	f040 80bc 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	f040 80b3 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001394:	2400      	movs	r4, #0
 8001396:	e009      	b.n	80013ac <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4423      	add	r3, r4
 800139e:	3303      	adds	r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013a8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013aa:	3401      	adds	r4, #1
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	ddf3      	ble.n	8001398 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e006      	b.n	80013c2 <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013b8:	5d1b      	ldrb	r3, [r3, r4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 80013c0:	3401      	adds	r4, #1
 80013c2:	2c04      	cmp	r4, #4
 80013c4:	ddf6      	ble.n	80013b4 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 808e 	bne.w	80014f6 <Rx_Verita_engine_callBak+0x1a6>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3309      	adds	r3, #9
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f2:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	0859      	lsrs	r1, r3, #1
 8001400:	460b      	mov	r3, r1
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800140c:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b20      	cmp	r3, #32
 800142c:	d808      	bhi.n	8001440 <Rx_Verita_engine_callBak+0xf0>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 800143c:	2391      	movs	r3, #145	; 0x91
 800143e:	e072      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b8f      	cmp	r3, #143	; 0x8f
 8001446:	d96c      	bls.n	8001522 <Rx_Verita_engine_callBak+0x1d2>
					switch(logger[0]){
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b91      	subs	r3, #145	; 0x91
 800144e:	2b13      	cmp	r3, #19
 8001450:	d82a      	bhi.n	80014a8 <Rx_Verita_engine_callBak+0x158>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <Rx_Verita_engine_callBak+0x108>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014ad 	.word	0x080014ad
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b5 	.word	0x080014b5
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014a9 	.word	0x080014a9
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014a9 	.word	0x080014a9
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014a9 	.word	0x080014a9
 800147c:	080014a9 	.word	0x080014a9
 8001480:	080014a9 	.word	0x080014a9
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014a9 	.word	0x080014a9
 800148c:	080014a9 	.word	0x080014a9
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014d3 	.word	0x080014d3
 80014a0:	080014df 	.word	0x080014df
 80014a4:	080014eb 	.word	0x080014eb
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80014a8:	2390      	movs	r3, #144	; 0x90
 80014aa:	e03c      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x91:
							return VRT_OK;
 80014ac:	2391      	movs	r3, #145	; 0x91
 80014ae:	e03a      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x92:
							return VRT_Busy;
 80014b0:	2392      	movs	r3, #146	; 0x92
 80014b2:	e038      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x93:
							return VRT_DataLoss;
 80014b4:	2393      	movs	r3, #147	; 0x93
 80014b6:	e036      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x94:
							return VRT_UnEnc;
 80014b8:	2394      	movs	r3, #148	; 0x94
 80014ba:	e034      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80014c2:	2391      	movs	r3, #145	; 0x91
 80014c4:	e02f      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_ger:
							regisk->Mark.Flag_ger = logu.U8[0];
 80014c6:	7a3a      	ldrb	r2, [r7, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80014ce:	2391      	movs	r3, #145	; 0x91
 80014d0:	e029      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Next:
							regisk->Mark.Flag_next = 0xFF; return VRC_Next;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80014da:	23a2      	movs	r3, #162	; 0xa2
 80014dc:	e023      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_aa:
							regisk->Mark.Flag_aa = logu.U8[0]; return VRC_Flag_aa;
 80014de:	7a3a      	ldrb	r2, [r7, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80014e6:	23a3      	movs	r3, #163	; 0xa3
 80014e8:	e01d      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_bb:
							regisk->Mark.Flag_bb = logu.U8[0]; return VRC_Flag_bb;
 80014ea:	7a3a      	ldrb	r2, [r7, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80014f2:	23a4      	movs	r3, #164	; 0xa4
 80014f4:	e017      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 80014f6:	2393      	movs	r3, #147	; 0x93
 80014f8:	e015      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3309      	adds	r3, #9
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001504:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 800150c:	fba3 1302 	umull	r1, r3, r3, r2
 8001510:	0859      	lsrs	r1, r3, #1
 8001512:	460b      	mov	r3, r1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <Rx_Verita_engine_callBak+0x1d4>
			if( chksum[1] == logger[5]){
 8001522:	bf00      	nop
		}


	return VRT_ERROR;
 8001524:	2390      	movs	r3, #144	; 0x90
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr
 8001530:	20000442 	.word	0x20000442
 8001534:	20000444 	.word	0x20000444
 8001538:	38e38e39 	.word	0x38e38e39

0800153c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d011      	beq.n	8001572 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f80b 	bl	800157c <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 8001572:	2391      	movs	r3, #145	; 0x91
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	460b      	mov	r3, r1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	2356      	movs	r3, #86	; 0x56
 800159a:	753b      	strb	r3, [r7, #20]
 800159c:	2352      	movs	r3, #82	; 0x52
 800159e:	757b      	strb	r3, [r7, #21]
 80015a0:	2354      	movs	r3, #84	; 0x54
 80015a2:	75bb      	strb	r3, [r7, #22]
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80015a8:	2304      	movs	r3, #4
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80015b8:	2404      	movs	r4, #4
 80015ba:	e00f      	b.n	80015dc <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80015bc:	1f23      	subs	r3, r4, #4
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015c6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80015da:	3401      	adds	r4, #1
 80015dc:	2c07      	cmp	r4, #7
 80015de:	dded      	ble.n	80015bc <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80015e0:	2403      	movs	r4, #3
 80015e2:	e00a      	b.n	80015fa <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80015e4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015e8:	443b      	add	r3, r7
 80015ea:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80015ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f2:	4413      	add	r3, r2
 80015f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80015f8:	3401      	adds	r4, #1
 80015fa:	2c07      	cmp	r4, #7
 80015fc:	ddf2      	ble.n	80015e4 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001602:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001606:	43d2      	mvns	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	f107 0114 	add.w	r1, r7, #20
 8001620:	2332      	movs	r3, #50	; 0x32
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f00a fa23 	bl	800ba6e <HAL_UART_Transmit>
}
 8001628:	bf00      	nop
 800162a:	372c      	adds	r7, #44	; 0x2c
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	2356      	movs	r3, #86	; 0x56
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	2352      	movs	r3, #82	; 0x52
 8001654:	737b      	strb	r3, [r7, #13]
 8001656:	2354      	movs	r3, #84	; 0x54
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	743b      	strb	r3, [r7, #16]
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	74bb      	strb	r3, [r7, #18]
 8001666:	23aa      	movs	r3, #170	; 0xaa
 8001668:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 800166e:	2403      	movs	r4, #3
 8001670:	e008      	b.n	8001684 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001672:	f104 0320 	add.w	r3, r4, #32
 8001676:	443b      	add	r3, r7
 8001678:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	4413      	add	r3, r2
 8001680:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001682:	3401      	adds	r4, #1
 8001684:	2c07      	cmp	r4, #7
 8001686:	ddf4      	ble.n	8001672 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	43db      	mvns	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	231e      	movs	r3, #30
 8001696:	2209      	movs	r2, #9
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f00a f9e8 	bl	800ba6e <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
	...

080016a8 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <BL_UART_Start+0x58>)
 80016bc:	f006 f8a8 	bl	8007810 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <BL_UART_Start+0x5c>)
 80016c6:	f006 f8a3 	bl	8007810 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016ca:	2014      	movs	r0, #20
 80016cc:	f005 f9be 	bl	8006a4c <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <BL_UART_Start+0x5c>)
 80016d6:	f006 f89b 	bl	8007810 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80016da:	2055      	movs	r0, #85	; 0x55
 80016dc:	f005 f9b6 	bl	8006a4c <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80016e0:	f107 010f 	add.w	r1, r7, #15
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f00a f9c0 	bl	800ba6e <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80016ee:	2114      	movs	r1, #20
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f999 	bl	8001a28 <BL_UART_wait_ACK>

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800

08001708 <BL_UART_Finish>:

void BL_UART_Finish(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f005 f99d 	bl	8006a4c <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <BL_UART_Finish+0x34>)
 800171a:	f006 f879 	bl	8007810 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <BL_UART_Finish+0x38>)
 8001724:	f006 f874 	bl	8007810 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001728:	2014      	movs	r0, #20
 800172a:	f005 f98f 	bl	8006a4c <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <BL_UART_Finish+0x38>)
 8001734:	f006 f86c 	bl	8007810 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	40020800 	.word	0x40020800

08001744 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0cb      	sub	sp, #300	; 0x12c
 8001748:	af00      	add	r7, sp, #0
 800174a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800174e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001758:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800175c:	6001      	str	r1, [r0, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001764:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001772:	460a      	mov	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 8001776:	f64c 6331 	movw	r3, #52785	; 0xce31
 800177a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001790:	2300      	movs	r3, #0
 8001792:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 8001796:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800179a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b fbe0 	bl	800cf70 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 80017b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <BL_UART_WriteMem+0x254>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d909      	bls.n	80017d4 <BL_UART_WriteMem+0x90>
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ce:	d201      	bcs.n	80017d4 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80017d0:	23bc      	movs	r3, #188	; 0xbc
 80017d2:	e0dc      	b.n	800198e <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80017d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017dc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80017e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80017f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001804:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001820:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001824:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001828:	4053      	eors	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001830:	4053      	eors	r3, r2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001838:	4053      	eors	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001840:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800184e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001852:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001856:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800185a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001862:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001866:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001870:	2400      	movs	r4, #0
 8001872:	e01c      	b.n	80018ae <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001874:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001878:	4621      	mov	r1, r4
 800187a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4053      	eors	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001890:	4622      	mov	r2, r4
 8001892:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	441a      	add	r2, r3
 800189e:	1c63      	adds	r3, r4, #1
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018a6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018aa:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 80018ac:	3401      	adds	r4, #1
 80018ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429c      	cmp	r4, r3
 80018ba:	dddb      	ble.n	8001874 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 80018bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3302      	adds	r3, #2
 80018c8:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80018cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018d0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018d4:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80018d6:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80018da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018de:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018e2:	230a      	movs	r3, #10
 80018e4:	2202      	movs	r2, #2
 80018e6:	6800      	ldr	r0, [r0, #0]
 80018e8:	f00a f8c1 	bl	800ba6e <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018f4:	210a      	movs	r1, #10
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f000 f896 	bl	8001a28 <BL_UART_wait_ACK>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001906:	2b79      	cmp	r3, #121	; 0x79
 8001908:	d140      	bne.n	800198c <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800190a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800190e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001912:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001916:	230f      	movs	r3, #15
 8001918:	2205      	movs	r2, #5
 800191a:	6800      	ldr	r0, [r0, #0]
 800191c:	f00a f8a7 	bl	800ba6e <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001920:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001928:	210a      	movs	r1, #10
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f000 f87c 	bl	8001a28 <BL_UART_wait_ACK>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800193a:	2b79      	cmp	r3, #121	; 0x79
 800193c:	d124      	bne.n	8001988 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800193e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	3303      	adds	r3, #3
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0114 	add.w	r1, r7, #20
 8001952:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001956:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	6800      	ldr	r0, [r0, #0]
 800195e:	f00a f886 	bl	800ba6e <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001962:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800196a:	210a      	movs	r1, #10
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f000 f85b 	bl	8001a28 <BL_UART_wait_ACK>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 8001978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800197c:	2b79      	cmp	r3, #121	; 0x79
 800197e:	d101      	bne.n	8001984 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001980:	2379      	movs	r3, #121	; 0x79
 8001982:	e004      	b.n	800198e <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001984:	231f      	movs	r3, #31
 8001986:	e002      	b.n	800198e <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 8001988:	231f      	movs	r3, #31
 800198a:	e000      	b.n	800198e <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 800198c:	231f      	movs	r3, #31

	return UB_NACK;
}
 800198e:	4618      	mov	r0, r3
 8001990:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	1ffeffff 	.word	0x1ffeffff

0800199c <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 80019a8:	f64b 3344 	movw	r3, #47940	; 0xbb44
 80019ac:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <BL_UART_ExtendEraseMem_SP+0x88>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	823b      	strh	r3, [r7, #16]
 80019b8:	2300      	movs	r3, #0
 80019ba:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 80019c8:	7b3a      	ldrb	r2, [r7, #12]
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	4053      	eors	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	230a      	movs	r3, #10
 80019d8:	2202      	movs	r2, #2
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f00a f847 	bl	800ba6e <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80019e0:	210a      	movs	r1, #10
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f820 	bl	8001a28 <BL_UART_wait_ACK>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b79      	cmp	r3, #121	; 0x79
 80019f0:	d113      	bne.n	8001a1a <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	230f      	movs	r3, #15
 80019f8:	2203      	movs	r2, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f00a f837 	bl	800ba6e <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 20);
 8001a00:	2114      	movs	r1, #20
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f810 	bl	8001a28 <BL_UART_wait_ACK>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b79      	cmp	r3, #121	; 0x79
 8001a10:	d101      	bne.n	8001a16 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001a12:	2379      	movs	r3, #121	; 0x79
 8001a14:	e002      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 8001a16:	231f      	movs	r3, #31
 8001a18:	e000      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 8001a1a:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800fe68 	.word	0x0800fe68

08001a28 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a3c:	f004 fffa 	bl	8006a34 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a48:	e018      	b.n	8001a7c <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a4a:	f107 010f 	add.w	r1, r7, #15
 8001a4e:	2302      	movs	r3, #2
 8001a50:	2201      	movs	r2, #1
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f00a f89d 	bl	800bb92 <HAL_UART_Receive>

		if(response == 0x79){
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b79      	cmp	r3, #121	; 0x79
 8001a5c:	d101      	bne.n	8001a62 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a5e:	2379      	movs	r3, #121	; 0x79
 8001a60:	e010      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b1f      	cmp	r3, #31
 8001a66:	d101      	bne.n	8001a6c <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	e00b      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001a6c:	f004 ffe2 	bl	8006a34 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d801      	bhi.n	8001a7c <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001a78:	23ab      	movs	r3, #171	; 0xab
 8001a7a:	e003      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e3      	bne.n	8001a4a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001a82:	231f      	movs	r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b09a      	sub	sp, #104	; 0x68
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f004 ff68 	bl	8006968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 fa3c 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fc1e 	bl	80022dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa0:	f000 fbfc 	bl	800229c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aa4:	f000 fba6 	bl	80021f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aa8:	f000 fa9c 	bl	8001fe4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001aac:	f000 fbcc 	bl	8002248 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001ab0:	f000 fac6 	bl	8002040 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001ab4:	f000 fb4e 	bl	8002154 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 fb70 	bl	800219c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001abc:	f000 faf6 	bl	80020ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001ac0:	487b      	ldr	r0, [pc, #492]	; (8001cb0 <main+0x224>)
 8001ac2:	f009 fb69 	bl	800b198 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	487a      	ldr	r0, [pc, #488]	; (8001cb4 <main+0x228>)
 8001aca:	f009 fc9c 	bl	800b406 <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001ace:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <main+0x22c>)
 8001ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad4:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001ad6:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <main+0x22c>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <main+0x230>)
 8001ade:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <main+0x234>)
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001ae6:	4a76      	ldr	r2, [pc, #472]	; (8001cc0 <main+0x234>)
 8001ae8:	23fa      	movs	r3, #250	; 0xfa
 8001aea:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001aec:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <main+0x234>)
 8001aee:	2364      	movs	r3, #100	; 0x64
 8001af0:	8093      	strh	r3, [r2, #4]
  buzzr.timestamp = 0;
 8001af2:	4a73      	ldr	r2, [pc, #460]	; (8001cc0 <main+0x234>)
 8001af4:	2300      	movs	r3, #0
 8001af6:	6093      	str	r3, [r2, #8]

  stboxp.flag_start = 0;
 8001af8:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <main+0x238>)
 8001afa:	2300      	movs	r3, #0
 8001afc:	7013      	strb	r3, [r2, #0]
  stboxp.choice_set = bpoxy_lobby;
 8001afe:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <main+0x238>)
 8001b00:	2301      	movs	r3, #1
 8001b02:	7053      	strb	r3, [r2, #1]
  stboxp.ch_is = 0;
 8001b04:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <main+0x238>)
 8001b06:	2300      	movs	r3, #0
 8001b08:	7093      	strb	r3, [r2, #2]

  gScr.counter_overcurrent = 0;
 8001b0a:	4a6f      	ldr	r2, [pc, #444]	; (8001cc8 <main+0x23c>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	7053      	strb	r3, [r2, #1]
  gScr.fullflag = 0;
 8001b10:	4a6d      	ldr	r2, [pc, #436]	; (8001cc8 <main+0x23c>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	7013      	strb	r3, [r2, #0]

  k_flag.cnt = 0; k_flag.dn = 0; k_flag.up = 0;
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <main+0x240>)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	7093      	strb	r3, [r2, #2]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <main+0x240>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	7053      	strb	r3, [r2, #1]
 8001b22:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <main+0x240>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	7013      	strb	r3, [r2, #0]

  //// make sure
  HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	4868      	ldr	r0, [pc, #416]	; (8001cd0 <main+0x244>)
 8001b2e:	f005 fe6f 	bl	8007810 <HAL_GPIO_WritePin>


  ili9341_Init();
 8001b32:	f003 fecf 	bl	80058d4 <ili9341_Init>
  ili9341_DisplayOn();
 8001b36:	f003 feb1 	bl	800589c <ili9341_DisplayOn>
//  ili9341_FillRect(50, 20, 50, 20, cl_RED);
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	4865      	ldr	r0, [pc, #404]	; (8001cd4 <main+0x248>)
 8001b3e:	f7ff fa2f 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001b42:	2188      	movs	r1, #136	; 0x88
 8001b44:	4863      	ldr	r0, [pc, #396]	; (8001cd4 <main+0x248>)
 8001b46:	f7ff fa2b 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <main+0x24c>)
 8001b4c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001b50:	461c      	mov	r4, r3
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fb38 	bl	80001e0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b78:	230a      	movs	r3, #10
 8001b7a:	4858      	ldr	r0, [pc, #352]	; (8001cdc <main+0x250>)
 8001b7c:	f009 ff77 	bl	800ba6e <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
   HAL_UART_Receive_DMA(&huart6, RxBufferMtCl, RxbufferSize_VRT);
 8001b80:	2209      	movs	r2, #9
 8001b82:	4957      	ldr	r1, [pc, #348]	; (8001ce0 <main+0x254>)
 8001b84:	4857      	ldr	r0, [pc, #348]	; (8001ce4 <main+0x258>)
 8001b86:	f00a f8a6 	bl	800bcd6 <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001b8a:	f000 fd55 	bl	8002638 <Button_machine>
	  //Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  Use callback instead
	  //Tx_Rq_Verita_engine(&huart6, &VRB_CL);
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001b8e:	f004 ff51 	bl	8006a34 <HAL_GetTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2200      	movs	r2, #0
 8001b96:	469a      	mov	sl, r3
 8001b98:	4693      	mov	fp, r2
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <main+0x25c>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	4592      	cmp	sl, r2
 8001ba2:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001ba6:	f0c0 80a5 	bcc.w	8001cf4 <main+0x268>
		timestamp_buzbtn += 20;
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <main+0x25c>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f112 0114 	adds.w	r1, r2, #20
 8001bb4:	6239      	str	r1, [r7, #32]
 8001bb6:	f143 0300 	adc.w	r3, r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <main+0x25c>)
 8001bbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bc2:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001bc6:	f000 fda5 	bl	8002714 <knob_rotter>
		//running_box();
		//if(stboxp.choice_set){

		switch (boxpoint_runner){
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <main+0x260>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d045      	beq.n	8001c5e <main+0x1d2>

		default:
		case a_wait:

			if(k_flag.up){
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <main+0x240>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <main+0x166>

				stboxp.ch_is++;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <main+0x238>)
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <main+0x238>)
 8001be4:	7093      	strb	r3, [r2, #2]

				k_flag.up = 0;
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <main+0x240>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	7013      	strb	r3, [r2, #0]
				boxpoint_runner = a_change;}
 8001bec:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <main+0x260>)
 8001bee:	2301      	movs	r3, #1
 8001bf0:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <main+0x240>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01d      	beq.n	8001c36 <main+0x1aa>
				//stboxp.ch_is--;
				//stboxp.ch_is = (stboxp.ch_is < 0) ? bposxy[stboxp.choice_set].n_s - 1 : stboxp.ch_is;
				//if(stboxp.ch_is  < 0){
				//	stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}

				if(stboxp.ch_is == 0){
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <main+0x238>)
 8001bfc:	789b      	ldrb	r3, [r3, #2]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <main+0x192>
						stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <main+0x238>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4a39      	ldr	r2, [pc, #228]	; (8001cf0 <main+0x264>)
 8001c0a:	232a      	movs	r3, #42	; 0x2a
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <main+0x238>)
 8001c1a:	7093      	strb	r3, [r2, #2]
 8001c1c:	e005      	b.n	8001c2a <main+0x19e>
				else{stboxp.ch_is--;}
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <main+0x238>)
 8001c20:	789b      	ldrb	r3, [r3, #2]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <main+0x238>)
 8001c28:	7093      	strb	r3, [r2, #2]

				 k_flag.dn = 0;
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <main+0x240>)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	7053      	strb	r3, [r2, #1]
				 boxpoint_runner = a_change;}
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <main+0x260>)
 8001c32:	2301      	movs	r3, #1
 8001c34:	7013      	strb	r3, [r2, #0]

			stboxp.ch_is %= bposxy[stboxp.choice_set].n_s; // don't be more than spec of Grandstate sub
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <main+0x238>)
 8001c38:	7898      	ldrb	r0, [r3, #2]
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <main+0x238>)
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <main+0x264>)
 8001c42:	232a      	movs	r3, #42	; 0x2a
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	fbb0 f3f2 	udiv	r3, r0, r2
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	1ac3      	subs	r3, r0, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <main+0x238>)
 8001c5a:	7093      	strb	r3, [r2, #2]

			break;
 8001c5c:	e04b      	b.n	8001cf6 <main+0x26a>

		case a_change:

			box_pointer(bposxy[stboxp.choice_set].x[stboxp.ch_is], bposxy[stboxp.choice_set].y[stboxp.ch_is]);
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <main+0x238>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	4618      	mov	r0, r3
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <main+0x238>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	461c      	mov	r4, r3
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <main+0x264>)
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	0052      	lsls	r2, r2, #1
 8001c70:	4402      	add	r2, r0
 8001c72:	00d3      	lsls	r3, r2, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	4423      	add	r3, r4
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	440b      	add	r3, r1
 8001c7c:	885d      	ldrh	r5, [r3, #2]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <main+0x238>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <main+0x238>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	4819      	ldr	r0, [pc, #100]	; (8001cf0 <main+0x264>)
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	0052      	lsls	r2, r2, #1
 8001c90:	440a      	add	r2, r1
 8001c92:	00d3      	lsls	r3, r2, #3
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	4423      	add	r3, r4
 8001c98:	3308      	adds	r3, #8
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4403      	add	r3, r0
 8001c9e:	88db      	ldrh	r3, [r3, #6]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f000 fc28 	bl	80024f8 <box_pointer>
			boxpoint_runner = a_wait;
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <main+0x260>)
 8001caa:	2300      	movs	r3, #0
 8001cac:	7013      	strb	r3, [r2, #0]
			break;
 8001cae:	e022      	b.n	8001cf6 <main+0x26a>
 8001cb0:	20000544 	.word	0x20000544
 8001cb4:	200004fc 	.word	0x200004fc
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	2000088c 	.word	0x2000088c
 8001cc0:	20000878 	.word	0x20000878
 8001cc4:	200008ac 	.word	0x200008ac
 8001cc8:	20000894 	.word	0x20000894
 8001ccc:	20000890 	.word	0x20000890
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	20000450 	.word	0x20000450
 8001cd8:	0800fe6c 	.word	0x0800fe6c
 8001cdc:	200005d0 	.word	0x200005d0
 8001ce0:	200007e8 	.word	0x200007e8
 8001ce4:	20000614 	.word	0x20000614
 8001ce8:	20000868 	.word	0x20000868
 8001cec:	200008a8 	.word	0x200008a8
 8001cf0:	2000017c 	.word	0x2000017c

			}
		//}


	  }// timestamp_dis
 8001cf4:	bf00      	nop


	  if (HAL_GetTick() >= timestamp_one){
 8001cf6:	f004 fe9d 	bl	8006a34 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	61fa      	str	r2, [r7, #28]
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <main+0x458>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	4291      	cmp	r1, r2
 8001d10:	4629      	mov	r1, r5
 8001d12:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d16:	d313      	bcc.n	8001d40 <main+0x2b4>
		  timestamp_one += 500;
 8001d18:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <main+0x458>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001d22:	6139      	str	r1, [r7, #16]
 8001d24:	f143 0300 	adc.w	r3, r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <main+0x458>)
 8001d2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d30:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d34:	2120      	movs	r1, #32
 8001d36:	486c      	ldr	r0, [pc, #432]	; (8001ee8 <main+0x45c>)
 8001d38:	f005 fd83 	bl	8007842 <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001d3c:	f000 fed4 	bl	8002ae8 <GrandState_Verita>

		  } // timestamp_one


	  if(HAL_GetTick() >= timestamp_sensors + 125){
 8001d40:	f004 fe78 	bl	8006a34 <HAL_GetTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2200      	movs	r2, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	4b67      	ldr	r3, [pc, #412]	; (8001eec <main+0x460>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f112 087d 	adds.w	r8, r2, #125	; 0x7d
 8001d56:	f143 0900 	adc.w	r9, r3, #0
 8001d5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4543      	cmp	r3, r8
 8001d62:	4613      	mov	r3, r2
 8001d64:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d68:	f4ff af0f 	bcc.w	8001b8a <main+0xfe>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001d6c:	f004 fe62 	bl	8006a34 <HAL_GetTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <main+0x460>)
 8001d7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d7e:	e9c3 1200 	strd	r1, r2, [r3]
		   *  - MCP3208 CH[0..7]
		   *  - Client's MCU temp rwquest
		   * */

		  //if(GrandState != pre_gpio_chk){
		  if(GrandState == monitor || GrandState == gpio_chk){
 8001d82:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <main+0x464>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d003      	beq.n	8001d92 <main+0x306>
 8001d8a:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <main+0x464>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b0e      	cmp	r3, #14
 8001d90:	d104      	bne.n	8001d9c <main+0x310>
			  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
 8001d92:	2211      	movs	r2, #17
 8001d94:	21a0      	movs	r1, #160	; 0xa0
 8001d96:	4857      	ldr	r0, [pc, #348]	; (8001ef4 <main+0x468>)
 8001d98:	f7ff fc4a 	bl	8001630 <Tx_UART_Verita_Command>
		  }


		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4856      	ldr	r0, [pc, #344]	; (8001ef8 <main+0x46c>)
 8001da0:	f7ff f9ae 	bl	8001100 <INA219Read_BusV>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a55      	ldr	r2, [pc, #340]	; (8001efc <main+0x470>)
 8001da8:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	4852      	ldr	r0, [pc, #328]	; (8001ef8 <main+0x46c>)
 8001dae:	f7ff f9cf 	bl	8001150 <INA219Read_Current>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4a51      	ldr	r2, [pc, #324]	; (8001efc <main+0x470>)
 8001db8:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	484e      	ldr	r0, [pc, #312]	; (8001ef8 <main+0x46c>)
 8001dbe:	f7ff fa27 	bl	8001210 <INA219Read_Power>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <main+0x470>)
 8001dc8:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	484a      	ldr	r0, [pc, #296]	; (8001ef8 <main+0x46c>)
 8001dd0:	f7ff f9e2 	bl	8001198 <INA219Read_ShuntV>
 8001dd4:	eef0 7a40 	vmov.f32	s15, s0
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <main+0x470>)
 8001dda:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001dde:	2188      	movs	r1, #136	; 0x88
 8001de0:	4845      	ldr	r0, [pc, #276]	; (8001ef8 <main+0x46c>)
 8001de2:	f7ff f98d 	bl	8001100 <INA219Read_BusV>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <main+0x474>)
 8001dea:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001dec:	2188      	movs	r1, #136	; 0x88
 8001dee:	4842      	ldr	r0, [pc, #264]	; (8001ef8 <main+0x46c>)
 8001df0:	f7ff f9ae 	bl	8001150 <INA219Read_Current>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <main+0x474>)
 8001dfa:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001dfc:	2188      	movs	r1, #136	; 0x88
 8001dfe:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <main+0x46c>)
 8001e00:	f7ff fa06 	bl	8001210 <INA219Read_Power>
 8001e04:	eef0 7a40 	vmov.f32	s15, s0
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <main+0x474>)
 8001e0a:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001e0e:	2188      	movs	r1, #136	; 0x88
 8001e10:	4839      	ldr	r0, [pc, #228]	; (8001ef8 <main+0x46c>)
 8001e12:	f7ff f9c1 	bl	8001198 <INA219Read_ShuntV>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <main+0x474>)
 8001e1c:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001e20:	2118      	movs	r1, #24
 8001e22:	4838      	ldr	r0, [pc, #224]	; (8001f04 <main+0x478>)
 8001e24:	f7ff fa3e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <main+0x47c>)
 8001e2c:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001e2e:	2119      	movs	r1, #25
 8001e30:	4834      	ldr	r0, [pc, #208]	; (8001f04 <main+0x478>)
 8001e32:	f7ff fa37 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <main+0x47c>)
 8001e3a:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001e3c:	211a      	movs	r1, #26
 8001e3e:	4831      	ldr	r0, [pc, #196]	; (8001f04 <main+0x478>)
 8001e40:	f7ff fa30 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <main+0x47c>)
 8001e48:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001e4a:	211b      	movs	r1, #27
 8001e4c:	482d      	ldr	r0, [pc, #180]	; (8001f04 <main+0x478>)
 8001e4e:	f7ff fa29 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <main+0x47c>)
 8001e56:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001e58:	211c      	movs	r1, #28
 8001e5a:	482a      	ldr	r0, [pc, #168]	; (8001f04 <main+0x478>)
 8001e5c:	f7ff fa22 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <main+0x47c>)
 8001e64:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001e66:	211d      	movs	r1, #29
 8001e68:	4826      	ldr	r0, [pc, #152]	; (8001f04 <main+0x478>)
 8001e6a:	f7ff fa1b 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <main+0x47c>)
 8001e72:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001e74:	211e      	movs	r1, #30
 8001e76:	4823      	ldr	r0, [pc, #140]	; (8001f04 <main+0x478>)
 8001e78:	f7ff fa14 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <main+0x47c>)
 8001e80:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001e82:	211f      	movs	r1, #31
 8001e84:	481f      	ldr	r0, [pc, #124]	; (8001f04 <main+0x478>)
 8001e86:	f7ff fa0d 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <main+0x47c>)
 8001e8e:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i <= 7;i++){
 8001e90:	2400      	movs	r4, #0
 8001e92:	e00e      	b.n	8001eb2 <main+0x426>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <main+0x47c>)
 8001e96:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fa38 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <main+0x47c>)
 8001ea6:	1d23      	adds	r3, r4, #4
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i <= 7;i++){
 8001eb0:	3401      	adds	r4, #1
 8001eb2:	2c07      	cmp	r4, #7
 8001eb4:	ddee      	ble.n	8001e94 <main+0x408>
		  }


		  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <main+0x480>)
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f84b 	bl	8004f58 <ADCTVolta>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	f003 f875 	bl	8004fb8 <TempEquat>
 8001ece:	eef0 7a40 	vmov.f32	s15, s0
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <main+0x484>)
 8001ed4:	edc3 7a00 	vstr	s15, [r3]


		  Protection_machine();
 8001ed8:	f000 fc6e 	bl	80027b8 <Protection_machine>
		  manual_relay();
 8001edc:	f000 fcb8 	bl	8002850 <manual_relay>
	  Button_machine();
 8001ee0:	e653      	b.n	8001b8a <main+0xfe>
 8001ee2:	bf00      	nop
 8001ee4:	20000858 	.word	0x20000858
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	20000860 	.word	0x20000860
 8001ef0:	20000006 	.word	0x20000006
 8001ef4:	20000614 	.word	0x20000614
 8001ef8:	20000450 	.word	0x20000450
 8001efc:	200007f8 	.word	0x200007f8
 8001f00:	20000810 	.word	0x20000810
 8001f04:	200004a4 	.word	0x200004a4
 8001f08:	20000828 	.word	0x20000828
 8001f0c:	20000784 	.word	0x20000784
 8001f10:	200007f4 	.word	0x200007f4

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	; 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00b f824 	bl	800cf70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f84:	2308      	movs	r3, #8
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f88:	2364      	movs	r3, #100	; 0x64
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f90:	2304      	movs	r3, #4
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f008 f91f 	bl	800a1dc <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fa4:	f003 f8e8 	bl	8005178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2103      	movs	r1, #3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f008 fb81 	bl	800a6cc <HAL_RCC_ClockConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fd0:	f003 f8d2 	bl	8005178 <Error_Handler>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	; 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_I2C1_Init+0x50>)
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <MX_I2C1_Init+0x54>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <MX_I2C1_Init+0x58>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_I2C1_Init+0x50>)
 8002002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <MX_I2C1_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_I2C1_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_I2C1_Init+0x50>)
 8002022:	f005 fc41 	bl	80078a8 <HAL_I2C_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800202c:	f003 f8a4 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000450 	.word	0x20000450
 8002038:	40005400 	.word	0x40005400
 800203c:	00061a80 	.word	0x00061a80

08002040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <MX_SPI3_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI3_Init+0x64>)
 800204c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_SPI3_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI3_Init+0x64>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002074:	2220      	movs	r2, #32
 8002076:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_SPI3_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI3_Init+0x64>)
 800208c:	220a      	movs	r2, #10
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002092:	f008 fd3b 	bl	800ab0c <HAL_SPI_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800209c:	f003 f86c 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200004a4 	.word	0x200004a4
 80020a8:	40003c00 	.word	0x40003c00

080020ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00a ff58 	bl	800cf70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <MX_TIM3_Init+0xa4>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d0:	2203      	movs	r2, #3
 80020d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d6:	2210      	movs	r2, #16
 80020d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_TIM3_Init+0xa0>)
 80020dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_TIM3_Init+0xa0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ee:	2303      	movs	r3, #3
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020f2:	2302      	movs	r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020fa:	2304      	movs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80020fe:	2308      	movs	r3, #8
 8002100:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 800210a:	2304      	movs	r3, #4
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800210e:	2308      	movs	r3, #8
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_TIM3_Init+0xa0>)
 800211a:	f009 f8ce 	bl	800b2ba <HAL_TIM_Encoder_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002124:	f003 f828 	bl	8005178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_TIM3_Init+0xa0>)
 8002136:	f009 fbcb 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002140:	f003 f81a 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200004fc 	.word	0x200004fc
 8002150:	40000400 	.word	0x40000400

08002154 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_TIM10_Init+0x40>)
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <MX_TIM10_Init+0x44>)
 800215c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <MX_TIM10_Init+0x40>)
 8002160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002164:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_TIM10_Init+0x40>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_TIM10_Init+0x40>)
 800216e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002172:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <MX_TIM10_Init+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_TIM10_Init+0x40>)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <MX_TIM10_Init+0x40>)
 8002182:	f008 ffb9 	bl	800b0f8 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800218c:	f002 fff4 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000544 	.word	0x20000544
 8002198:	40014400 	.word	0x40014400

0800219c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <MX_USART1_UART_Init+0x54>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021d8:	f009 fbfc 	bl	800b9d4 <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80021e2:	f002 ffc9 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000058c 	.word	0x2000058c
 80021f0:	40011000 	.word	0x40011000

080021f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_USART2_UART_Init+0x50>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800222c:	f009 fbd2 	bl	800b9d4 <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002236:	f002 ff9f 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200005d0 	.word	0x200005d0
 8002244:	40004400 	.word	0x40004400

08002248 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART6_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002280:	f009 fba8 	bl	800b9d4 <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f002 ff75 	bl	8005178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000614 	.word	0x20000614
 8002298:	40011400 	.word	0x40011400

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2039      	movs	r0, #57	; 0x39
 80022c4:	f004 fcc1 	bl	8006c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022c8:	2039      	movs	r0, #57	; 0x39
 80022ca:	f004 fcda 	bl	8006c82 <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <MX_GPIO_Init+0x208>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <MX_GPIO_Init+0x208>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <MX_GPIO_Init+0x208>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <MX_GPIO_Init+0x208>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <MX_GPIO_Init+0x208>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 800237e:	2200      	movs	r2, #0
 8002380:	f240 314b 	movw	r1, #843	; 0x34b
 8002384:	4858      	ldr	r0, [pc, #352]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002386:	f005 fa43 	bl	8007810 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|RelayClient_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002390:	4856      	ldr	r0, [pc, #344]	; (80024ec <MX_GPIO_Init+0x210>)
 8002392:	f005 fa3d 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	4855      	ldr	r0, [pc, #340]	; (80024f0 <MX_GPIO_Init+0x214>)
 800239c:	f005 fa38 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2104      	movs	r1, #4
 80023a4:	4853      	ldr	r0, [pc, #332]	; (80024f4 <MX_GPIO_Init+0x218>)
 80023a6:	f005 fa33 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4849      	ldr	r0, [pc, #292]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023c2:	f005 f889 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin
                           RelayClient_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin
 80023c6:	f240 3343 	movw	r3, #835	; 0x343
 80023ca:	617b      	str	r3, [r7, #20]
                          |RelayClient_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4842      	ldr	r0, [pc, #264]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023e0:	f005 f87a 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80023e4:	2304      	movs	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	483c      	ldr	r0, [pc, #240]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023f8:	f005 f86e 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80023fc:	2308      	movs	r3, #8
 80023fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002408:	2302      	movs	r3, #2
 800240a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4835      	ldr	r0, [pc, #212]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002414:	f005 f860 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8002418:	f44f 7398 	mov.w	r3, #304	; 0x130
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	482e      	ldr	r0, [pc, #184]	; (80024ec <MX_GPIO_Init+0x210>)
 8002432:	f005 f851 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002442:	2301      	movs	r3, #1
 8002444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4828      	ldr	r0, [pc, #160]	; (80024f0 <MX_GPIO_Init+0x214>)
 800244e:	f005 f843 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8002452:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4822      	ldr	r0, [pc, #136]	; (80024f0 <MX_GPIO_Init+0x214>)
 8002468:	f005 f836 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002476:	2301      	movs	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4819      	ldr	r0, [pc, #100]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002482:	f005 f829 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002486:	2304      	movs	r3, #4
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4815      	ldr	r0, [pc, #84]	; (80024f4 <MX_GPIO_Init+0x218>)
 800249e:	f005 f81b 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	480e      	ldr	r0, [pc, #56]	; (80024f0 <MX_GPIO_Init+0x214>)
 80024b6:	f005 f80f 	bl	80074d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2017      	movs	r0, #23
 80024c0:	f004 fbc3 	bl	8006c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024c4:	2017      	movs	r0, #23
 80024c6:	f004 fbdc 	bl	8006c82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2028      	movs	r0, #40	; 0x28
 80024d0:	f004 fbbb 	bl	8006c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f004 fbd4 	bl	8006c82 <HAL_NVIC_EnableIRQ>

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020c00 	.word	0x40020c00

080024f8 <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	80fb      	strh	r3, [r7, #6]
 8002504:	4613      	mov	r3, r2
 8002506:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <box_pointer+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <box_pointer+0x5c>)
 8002512:	8818      	ldrh	r0, [r3, #0]
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <box_pointer+0x5c>)
 8002516:	8859      	ldrh	r1, [r3, #2]
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	230f      	movs	r3, #15
 800251e:	220f      	movs	r2, #15
 8002520:	f003 fc06 	bl	8005d30 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002524:	88b9      	ldrh	r1, [r7, #4]
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	230f      	movs	r3, #15
 8002530:	220f      	movs	r2, #15
 8002532:	f003 fbfd 	bl	8005d30 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <box_pointer+0x5c>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 800253c:	4a05      	ldr	r2, [pc, #20]	; (8002554 <box_pointer+0x5c>)
 800253e:	88bb      	ldrh	r3, [r7, #4]
 8002540:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <box_pointer+0x58>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200008a7 	.word	0x200008a7
 8002554:	200008b0 	.word	0x200008b0

08002558 <simple_scr>:

void simple_scr(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %X %d",btn_read[1], btn_read[2], btn_read[3], btn_cnt);
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <simple_scr+0xb4>)
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	4619      	mov	r1, r3
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <simple_scr+0xb4>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	4618      	mov	r0, r3
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <simple_scr+0xb4>)
 800256c:	78db      	ldrb	r3, [r3, #3]
 800256e:	461a      	mov	r2, r3
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <simple_scr+0xb8>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	460a      	mov	r2, r1
 800257c:	4925      	ldr	r1, [pc, #148]	; (8002614 <simple_scr+0xbc>)
 800257e:	4826      	ldr	r0, [pc, #152]	; (8002618 <simple_scr+0xc0>)
 8002580:	f00b f968 	bl	800d854 <siprintf>
	  ili9341_WriteString(220, 185, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <simple_scr+0xc4>)
 8002586:	2200      	movs	r2, #0
 8002588:	9202      	str	r2, [sp, #8]
 800258a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800258e:	9201      	str	r2, [sp, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a20      	ldr	r2, [pc, #128]	; (8002618 <simple_scr+0xc0>)
 8002598:	21b9      	movs	r1, #185	; 0xb9
 800259a:	20dc      	movs	r0, #220	; 0xdc
 800259c:	f003 fd71 	bl	8006082 <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], k_flag.cnt, k_flag.up); //flag_k_up
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <simple_scr+0xc8>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <simple_scr+0xcc>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <simple_scr+0xcc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	460b      	mov	r3, r1
 80025b4:	491c      	ldr	r1, [pc, #112]	; (8002628 <simple_scr+0xd0>)
 80025b6:	4818      	ldr	r0, [pc, #96]	; (8002618 <simple_scr+0xc0>)
 80025b8:	f00b f94c 	bl	800d854 <siprintf>
	  ili9341_WriteString(220, 200, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <simple_scr+0xc4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	9202      	str	r2, [sp, #8]
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	9201      	str	r2, [sp, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	9200      	str	r2, [sp, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <simple_scr+0xc0>)
 80025d0:	21c8      	movs	r1, #200	; 0xc8
 80025d2:	20dc      	movs	r0, #220	; 0xdc
 80025d4:	f003 fd55 	bl	8006082 <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is); //state_box_choice_is
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <simple_scr+0xd4>)
 80025da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <simple_scr+0xd8>)
 80025de:	789b      	ldrb	r3, [r3, #2]
 80025e0:	4914      	ldr	r1, [pc, #80]	; (8002634 <simple_scr+0xdc>)
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <simple_scr+0xc0>)
 80025e4:	f00b f936 	bl	800d854 <siprintf>
	  ili9341_WriteString(250, 215, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <simple_scr+0xc4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	9202      	str	r2, [sp, #8]
 80025ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	9200      	str	r2, [sp, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <simple_scr+0xc0>)
 80025fc:	21d7      	movs	r1, #215	; 0xd7
 80025fe:	20fa      	movs	r0, #250	; 0xfa
 8002600:	f003 fd3f 	bl	8006082 <ili9341_WriteString>

}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000884 	.word	0x20000884
 8002610:	20000888 	.word	0x20000888
 8002614:	0800fea8 	.word	0x0800fea8
 8002618:	200006b8 	.word	0x200006b8
 800261c:	20000228 	.word	0x20000228
 8002620:	2000088c 	.word	0x2000088c
 8002624:	20000890 	.word	0x20000890
 8002628:	0800feb8 	.word	0x0800feb8
 800262c:	40000400 	.word	0x40000400
 8002630:	200008ac 	.word	0x200008ac
 8002634:	0800fec8 	.word	0x0800fec8

08002638 <Button_machine>:


void Button_machine(){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <Button_machine+0xbc>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <Button_machine+0xbc>)
 8002642:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <Button_machine+0xc0>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	0b1b      	lsrs	r3, r3, #12
 800264a:	b2db      	uxtb	r3, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <Button_machine+0xbc>)
 8002658:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <Button_machine+0xbc>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d030      	beq.n	80026c4 <Button_machine+0x8c>
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <Button_machine+0xbc>)
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12c      	bne.n	80026c4 <Button_machine+0x8c>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <Button_machine+0xbc>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <Button_machine+0xc4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <Button_machine+0xc4>)
 800267a:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <Button_machine+0xbc>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <Button_machine+0xbc>)
 8002682:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <Button_machine+0xbc>)
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <Button_machine+0xbc>)
 800268a:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try


			if(btn_read[2] == 0b0001){ // SW1
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <Button_machine+0xbc>)
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <Button_machine+0x62>
				flag_manual_relay = 1;
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <Button_machine+0xc8>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
			}
			if(btn_read[2] == 0b1000){ // SW2
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <Button_machine+0xbc>)
 800269c:	789b      	ldrb	r3, [r3, #2]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d106      	bne.n	80026b0 <Button_machine+0x78>
				if(GrandState != s_bootloader){
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <Button_machine+0xcc>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b0a      	cmp	r3, #10
 80026a8:	d002      	beq.n	80026b0 <Button_machine+0x78>
					GrandState = pre_lobby;
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <Button_machine+0xcc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
				}

			}
			if(btn_read[2] == 0b0100){ // SW3
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <Button_machine+0xbc>)
 80026b2:	789b      	ldrb	r3, [r3, #2]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d105      	bne.n	80026c4 <Button_machine+0x8c>
				k_flag.cnt++;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <Button_machine+0xd0>)
 80026ba:	789b      	ldrb	r3, [r3, #2]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <Button_machine+0xd0>)
 80026c2:	709a      	strb	r2, [r3, #2]
//			}

		}

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <Button_machine+0xd4>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d905      	bls.n	80026d8 <Button_machine+0xa0>
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <Button_machine+0xd4>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d907      	bls.n	80026e8 <Button_machine+0xb0>
			TIM3->CNT = 0x8000; // back to center
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <Button_machine+0xd8>)
 80026da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <Button_machine+0xd4>)
 80026e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e6:	801a      	strh	r2, [r3, #0]
//			btn_k_cnt++;
//		}

//		knob_rotter();

}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000884 	.word	0x20000884
 80026f8:	40020400 	.word	0x40020400
 80026fc:	20000888 	.word	0x20000888
 8002700:	20000874 	.word	0x20000874
 8002704:	20000006 	.word	0x20000006
 8002708:	20000890 	.word	0x20000890
 800270c:	2000088c 	.word	0x2000088c
 8002710:	40000400 	.word	0x40000400

08002714 <knob_rotter>:

void knob_rotter(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <knob_rotter+0x8c>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <knob_rotter+0x90>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d919      	bls.n	800275a <knob_rotter+0x46>
		//flag_k_up = 1;
		k_flag.up = 1;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <knob_rotter+0x94>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <knob_rotter+0x8c>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <knob_rotter+0x90>)
 8002734:	801a      	strh	r2, [r3, #0]
		//// debug
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <knob_rotter+0x90>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	491b      	ldr	r1, [pc, #108]	; (80027ac <knob_rotter+0x98>)
 800273e:	481c      	ldr	r0, [pc, #112]	; (80027b0 <knob_rotter+0x9c>)
 8002740:	f00b f888 	bl	800d854 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002744:	481a      	ldr	r0, [pc, #104]	; (80027b0 <knob_rotter+0x9c>)
 8002746:	f7fd fd4b 	bl	80001e0 <strlen>
 800274a:	4603      	mov	r3, r0
 800274c:	b29a      	uxth	r2, r3
 800274e:	230a      	movs	r3, #10
 8002750:	4917      	ldr	r1, [pc, #92]	; (80027b0 <knob_rotter+0x9c>)
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <knob_rotter+0xa0>)
 8002754:	f009 f98b 	bl	800ba6e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);

	}
	else{}

}
 8002758:	e01f      	b.n	800279a <knob_rotter+0x86>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <knob_rotter+0x8c>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <knob_rotter+0x90>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d218      	bcs.n	800279a <knob_rotter+0x86>
		k_flag.dn = 1;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <knob_rotter+0x94>)
 800276a:	2201      	movs	r2, #1
 800276c:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <knob_rotter+0x8c>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <knob_rotter+0x90>)
 8002776:	801a      	strh	r2, [r3, #0]
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <knob_rotter+0x90>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	490b      	ldr	r1, [pc, #44]	; (80027ac <knob_rotter+0x98>)
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <knob_rotter+0x9c>)
 8002782:	f00b f867 	bl	800d854 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002786:	480a      	ldr	r0, [pc, #40]	; (80027b0 <knob_rotter+0x9c>)
 8002788:	f7fd fd2a 	bl	80001e0 <strlen>
 800278c:	4603      	mov	r3, r0
 800278e:	b29a      	uxth	r2, r3
 8002790:	230a      	movs	r3, #10
 8002792:	4907      	ldr	r1, [pc, #28]	; (80027b0 <knob_rotter+0x9c>)
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <knob_rotter+0xa0>)
 8002796:	f009 f96a 	bl	800ba6e <HAL_UART_Transmit>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40000400 	.word	0x40000400
 80027a4:	2000088c 	.word	0x2000088c
 80027a8:	20000890 	.word	0x20000890
 80027ac:	0800fed0 	.word	0x0800fed0
 80027b0:	2000071c 	.word	0x2000071c
 80027b4:	200005d0 	.word	0x200005d0

080027b8 <Protection_machine>:

void Protection_machine(){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

	//// overcurrent
	if (inata.CURRENT >= Current_limit_mA || inatb.CURRENT >= Current_limit_mA){
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <Protection_machine+0x80>)
 80027be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80027c6:	da05      	bge.n	80027d4 <Protection_machine+0x1c>
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <Protection_machine+0x84>)
 80027ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80027d2:	db2a      	blt.n	800282a <Protection_machine+0x72>
		gScr.counter_overcurrent++;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <Protection_machine+0x88>)
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <Protection_machine+0x88>)
 80027de:	705a      	strb	r2, [r3, #1]

		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <Protection_machine+0x88>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d924      	bls.n	8002832 <Protection_machine+0x7a>
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <Protection_machine+0x8c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d020      	beq.n	8002832 <Protection_machine+0x7a>
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <Protection_machine+0x8c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d01c      	beq.n	8002832 <Protection_machine+0x7a>
			gScr.counter_overcurrent = 0;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <Protection_machine+0x88>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	705a      	strb	r2, [r3, #1]
			gScr.fullflag = 0;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <Protection_machine+0x88>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]

			////Relay_cut
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800280a:	480f      	ldr	r0, [pc, #60]	; (8002848 <Protection_machine+0x90>)
 800280c:	f005 f800 	bl	8007810 <HAL_GPIO_WritePin>

			//// Buzzer scream
			buzzr.flag = 3;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <Protection_machine+0x94>)
 8002812:	2203      	movs	r2, #3
 8002814:	701a      	strb	r2, [r3, #0]
			buzzr.priod_up = 1000;
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <Protection_machine+0x94>)
 8002818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281c:	805a      	strh	r2, [r3, #2]
			buzzer_scream_cnt();
 800281e:	f000 f8eb 	bl	80029f8 <buzzer_scream_cnt>
			//// interrupt, go to state Client error.
			GrandState = pre_danger;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <Protection_machine+0x8c>)
 8002824:	220f      	movs	r2, #15
 8002826:	701a      	strb	r2, [r3, #0]
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002828:	e003      	b.n	8002832 <Protection_machine+0x7a>
		}
	}else{gScr.counter_overcurrent = 0;}
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <Protection_machine+0x88>)
 800282c:	2200      	movs	r2, #0
 800282e:	705a      	strb	r2, [r3, #1]

}
 8002830:	e000      	b.n	8002834 <Protection_machine+0x7c>
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002832:	bf00      	nop
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200007f8 	.word	0x200007f8
 800283c:	20000810 	.word	0x20000810
 8002840:	20000894 	.word	0x20000894
 8002844:	20000006 	.word	0x20000006
 8002848:	40020800 	.word	0x40020800
 800284c:	20000878 	.word	0x20000878

08002850 <manual_relay>:

void manual_relay(){
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <manual_relay+0x28>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <manual_relay+0x24>

		if(GrandState == monitor){
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <manual_relay+0x2c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d104      	bne.n	800286e <manual_relay+0x1e>
			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 8002864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <manual_relay+0x30>)
 800286a:	f004 ffea 	bl	8007842 <HAL_GPIO_TogglePin>
		}
		flag_manual_relay = 0;
 800286e:	4b02      	ldr	r3, [pc, #8]	; (8002878 <manual_relay+0x28>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
	}
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000874 	.word	0x20000874
 800287c:	20000006 	.word	0x20000006
 8002880:	40020800 	.word	0x40020800

08002884 <Compare_pin_32>:


void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 80028a2:	2400      	movs	r4, #0
 80028a4:	e081      	b.n	80029aa <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 80028a6:	4623      	mov	r3, r4
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	2b13      	cmp	r3, #19
 80028b2:	d87e      	bhi.n	80029b2 <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 80028b4:	8bbb      	ldrh	r3, [r7, #28]
 80028b6:	4622      	mov	r2, r4
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	440a      	add	r2, r1
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	4113      	asrs	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 80028ca:	8b7b      	ldrh	r3, [r7, #26]
 80028cc:	4622      	mov	r2, r4
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	440a      	add	r2, r1
 80028d4:	8812      	ldrh	r2, [r2, #0]
 80028d6:	4113      	asrs	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 80028e0:	7e7a      	ldrb	r2, [r7, #25]
 80028e2:	7e3b      	ldrb	r3, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d15f      	bne.n	80029a8 <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 80028e8:	7ffb      	ldrb	r3, [r7, #31]
 80028ea:	3301      	adds	r3, #1
 80028ec:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00f      	beq.n	8002914 <Compare_pin_32+0x90>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d01b      	beq.n	8002930 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 80028f8:	4623      	mov	r3, r4
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4934      	ldr	r1, [pc, #208]	; (80029dc <Compare_pin_32+0x158>)
 800290c:	4618      	mov	r0, r3
 800290e:	f00a ffa1 	bl	800d854 <siprintf>
				 break;
 8002912:	e01b      	b.n	800294c <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 8002914:	4623      	mov	r3, r4
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	492e      	ldr	r1, [pc, #184]	; (80029e0 <Compare_pin_32+0x15c>)
 8002928:	4618      	mov	r0, r3
 800292a:	f00a ff93 	bl	800d854 <siprintf>
			 	 break;
 800292e:	e00d      	b.n	800294c <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8002930:	4623      	mov	r3, r4
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4928      	ldr	r1, [pc, #160]	; (80029e4 <Compare_pin_32+0x160>)
 8002944:	4618      	mov	r0, r3
 8002946:	f00a ff85 	bl	800d854 <siprintf>
			 	 break;
 800294a:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	2204      	movs	r2, #4
 8002952:	4619      	mov	r1, r3
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f00a ff9d 	bl	800d894 <strncat>

			 //// add High, Low
			 if(iaa == 1){
 800295a:	7e7b      	ldrb	r3, [r7, #25]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4920      	ldr	r1, [pc, #128]	; (80029e8 <Compare_pin_32+0x164>)
 8002966:	4618      	mov	r0, r3
 8002968:	f00a ff74 	bl	800d854 <siprintf>
 800296c:	e008      	b.n	8002980 <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 800296e:	7e7b      	ldrb	r3, [r7, #25]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	491c      	ldr	r1, [pc, #112]	; (80029ec <Compare_pin_32+0x168>)
 800297a:	4618      	mov	r0, r3
 800297c:	f00a ff6a 	bl	800d854 <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2202      	movs	r2, #2
 8002986:	4619      	mov	r1, r3
 8002988:	6838      	ldr	r0, [r7, #0]
 800298a:	f00a ff83 	bl	800d894 <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4917      	ldr	r1, [pc, #92]	; (80029f0 <Compare_pin_32+0x16c>)
 8002994:	4618      	mov	r0, r3
 8002996:	f00a ff5d 	bl	800d854 <siprintf>
			 strncat(outchar, aadd, 1);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	2201      	movs	r2, #1
 80029a0:	4619      	mov	r1, r3
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f00a ff76 	bl	800d894 <strncat>
	for(register int i = 0;i < 16;i++){
 80029a8:	3401      	adds	r4, #1
 80029aa:	2c0f      	cmp	r4, #15
 80029ac:	f77f af7b 	ble.w	80028a6 <Compare_pin_32+0x22>
 80029b0:	e000      	b.n	80029b4 <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 80029b2:	bf00      	nop
		 }
	}

	if(!cntr_w){
 80029b4:	7ffb      	ldrb	r3, [r7, #31]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <Compare_pin_32+0x170>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00a ff47 	bl	800d854 <siprintf>
		strncat(outchar, aadd, 7);
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	2207      	movs	r2, #7
 80029cc:	4619      	mov	r1, r3
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f00a ff60 	bl	800d894 <strncat>
	}
}
 80029d4:	bf00      	nop
 80029d6:	3724      	adds	r7, #36	; 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	0800fedc 	.word	0x0800fedc
 80029e0:	0800fee4 	.word	0x0800fee4
 80029e4:	0800feec 	.word	0x0800feec
 80029e8:	0800fef4 	.word	0x0800fef4
 80029ec:	0800fef8 	.word	0x0800fef8
 80029f0:	0800fefc 	.word	0x0800fefc
 80029f4:	0800ff00 	.word	0x0800ff00

080029f8 <buzzer_scream_cnt>:
	if(WR_B_OOD[9] == 95){cnt_allpass++;}
	if(WR_C_OOD[9] == 95){cnt_allpass++;}

}

void buzzer_scream_cnt(){
 80029f8:	b598      	push	{r3, r4, r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;

		switch(bz_st){
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <buzzer_scream_cnt+0xdc>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d039      	beq.n	8002a78 <buzzer_scream_cnt+0x80>
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d01d      	beq.n	8002a44 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002a10:	4832      	ldr	r0, [pc, #200]	; (8002adc <buzzer_scream_cnt+0xe4>)
 8002a12:	f008 fbc1 	bl	800b198 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a18:	885b      	ldrh	r3, [r3, #2]
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	f004 f80a 	bl	8006a34 <HAL_GetTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4423      	add	r3, r4
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a26:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002a28:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <buzzer_scream_cnt+0xdc>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a38:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002a3a:	e048      	b.n	8002ace <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002a3c:	4827      	ldr	r0, [pc, #156]	; (8002adc <buzzer_scream_cnt+0xe4>)
 8002a3e:	f008 fc0d 	bl	800b25c <HAL_TIM_Base_Stop_IT>
			break;
 8002a42:	e044      	b.n	8002ace <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4a:	4825      	ldr	r0, [pc, #148]	; (8002ae0 <buzzer_scream_cnt+0xe8>)
 8002a4c:	f004 fee0 	bl	8007810 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002a50:	f003 fff0 	bl	8006a34 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d334      	bcc.n	8002ac8 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a60:	889b      	ldrh	r3, [r3, #4]
 8002a62:	461c      	mov	r4, r3
 8002a64:	f003 ffe6 	bl	8006a34 <HAL_GetTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4423      	add	r3, r4
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a6e:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <buzzer_scream_cnt+0xdc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a76:	e027      	b.n	8002ac8 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7e:	4818      	ldr	r0, [pc, #96]	; (8002ae0 <buzzer_scream_cnt+0xe8>)
 8002a80:	f004 fec6 	bl	8007810 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002a84:	f003 ffd6 	bl	8006a34 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d31c      	bcc.n	8002acc <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d012      	beq.n	8002ac0 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002a9c:	885b      	ldrh	r3, [r3, #2]
 8002a9e:	461c      	mov	r4, r3
 8002aa0:	f003 ffc8 	bl	8006a34 <HAL_GetTick>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4423      	add	r3, r4
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002aaa:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <buzzer_scream_cnt+0xe0>)
 8002ab6:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <buzzer_scream_cnt+0xdc>)
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8002abe:	e005      	b.n	8002acc <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <buzzer_scream_cnt+0xdc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
			break;
 8002ac6:	e001      	b.n	8002acc <buzzer_scream_cnt+0xd4>
			break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <buzzer_scream_cnt+0xd6>
			break;
 8002acc:	bf00      	nop
		}

}
 8002ace:	bf00      	nop
 8002ad0:	bd98      	pop	{r3, r4, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200008b4 	.word	0x200008b4
 8002ad8:	20000878 	.word	0x20000878
 8002adc:	20000544 	.word	0x20000544
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <GrandState_Verita>:


void GrandState_Verita(){
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002aee:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <GrandState_Verita+0x278>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b16      	cmp	r3, #22
 8002af4:	f200 80d5 	bhi.w	8002ca2 <GrandState_Verita+0x1ba>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <GrandState_Verita+0x18>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002d3d 	.word	0x08002d3d
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002ca3 	.word	0x08002ca3
 8002b0c:	0800310d 	.word	0x0800310d
 8002b10:	0800335d 	.word	0x0800335d
 8002b14:	08002da9 	.word	0x08002da9
 8002b18:	08002e93 	.word	0x08002e93
 8002b1c:	08002ed1 	.word	0x08002ed1
 8002b20:	08003a09 	.word	0x08003a09
 8002b24:	08003b13 	.word	0x08003b13
 8002b28:	08003b39 	.word	0x08003b39
 8002b2c:	080042d9 	.word	0x080042d9
 8002b30:	080045ef 	.word	0x080045ef
 8002b34:	08003da5 	.word	0x08003da5
 8002b38:	080041a9 	.word	0x080041a9
 8002b3c:	080048a3 	.word	0x080048a3
 8002b40:	08004a6b 	.word	0x08004a6b
 8002b44:	08004ac9 	.word	0x08004ac9
 8002b48:	08004c1b 	.word	0x08004c1b
 8002b4c:	08004c45 	.word	0x08004c45
 8002b50:	08004d17 	.word	0x08004d17
 8002b54:	08004d91 	.word	0x08004d91
 8002b58:	08004ec3 	.word	0x08004ec3

	case pre_lobby:

		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002b5c:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <GrandState_Verita+0x27c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	23f0      	movs	r3, #240	; 0xf0
 8002b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f003 f8de 	bl	8005d30 <ili9341_FillRect>

		ili9341_FillRect(0, 0, 320, 32, cl_GRAY);
 8002b74:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b80:	2100      	movs	r1, #0
 8002b82:	2000      	movs	r0, #0
 8002b84:	f003 f8d4 	bl	8005d30 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Nucleo-F411RE Tester");
 8002b88:	4977      	ldr	r1, [pc, #476]	; (8002d68 <GrandState_Verita+0x280>)
 8002b8a:	4878      	ldr	r0, [pc, #480]	; (8002d6c <GrandState_Verita+0x284>)
 8002b8c:	f00a fe62 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(25, 10, TextDispBuffer, Font20, cl_BLACK);
 8002b90:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <GrandState_Verita+0x288>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	9201      	str	r2, [sp, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	9200      	str	r2, [sp, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a73      	ldr	r2, [pc, #460]	; (8002d6c <GrandState_Verita+0x284>)
 8002b9e:	210a      	movs	r1, #10
 8002ba0:	2019      	movs	r0, #25
 8002ba2:	f003 fabb 	bl	800611c <ili9341_WriteStringNoBG>
		ili9341_DrawHLine(cl_ORANGE, 0, 33, 320);
 8002ba6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002baa:	2221      	movs	r2, #33	; 0x21
 8002bac:	2100      	movs	r1, #0
 8002bae:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
 8002bb2:	f003 f80f 	bl	8005bd4 <ili9341_DrawHLine>

		sprintf(TextDispBuffer,"OWL's OFFICE");
 8002bb6:	496f      	ldr	r1, [pc, #444]	; (8002d74 <GrandState_Verita+0x28c>)
 8002bb8:	486c      	ldr	r0, [pc, #432]	; (8002d6c <GrandState_Verita+0x284>)
 8002bba:	f00a fe4b 	bl	800d854 <siprintf>
		ili9341_WriteString(185, 36, TextDispBuffer, Font16, cl_WHITE, cl_BLUE);
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	; (8002d78 <GrandState_Verita+0x290>)
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	9202      	str	r2, [sp, #8]
 8002bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc8:	9201      	str	r2, [sp, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a66      	ldr	r2, [pc, #408]	; (8002d6c <GrandState_Verita+0x284>)
 8002bd2:	2124      	movs	r1, #36	; 0x24
 8002bd4:	20b9      	movs	r0, #185	; 0xb9
 8002bd6:	f003 fa54 	bl	8006082 <ili9341_WriteString>

		//ili9341_FillRect(305, 0, 15, 240, cl_ORANGE);
		ili9341_FillRect(0, 0, 15, 240, cl_ORANGE);
 8002bda:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	23f0      	movs	r3, #240	; 0xf0
 8002be2:	220f      	movs	r2, #15
 8002be4:	2100      	movs	r1, #0
 8002be6:	2000      	movs	r0, #0
 8002be8:	f003 f8a2 	bl	8005d30 <ili9341_FillRect>
		ili9341_DrawVLine(cl_BLACK, 14, 0, 240);
 8002bec:	23f0      	movs	r3, #240	; 0xf0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	210e      	movs	r1, #14
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f003 f845 	bl	8005c82 <ili9341_DrawVLine>

		sprintf(TextDispBuffer,"Full-Script");
 8002bf8:	4960      	ldr	r1, [pc, #384]	; (8002d7c <GrandState_Verita+0x294>)
 8002bfa:	485c      	ldr	r0, [pc, #368]	; (8002d6c <GrandState_Verita+0x284>)
 8002bfc:	f00a fe2a 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 60, TextDispBuffer, Font16, cl_CYAN);
 8002c00:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <GrandState_Verita+0x290>)
 8002c02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c06:	9201      	str	r2, [sp, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	9200      	str	r2, [sp, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <GrandState_Verita+0x284>)
 8002c10:	213c      	movs	r1, #60	; 0x3c
 8002c12:	203c      	movs	r0, #60	; 0x3c
 8002c14:	f003 fa82 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Monitor-mode");
 8002c18:	4959      	ldr	r1, [pc, #356]	; (8002d80 <GrandState_Verita+0x298>)
 8002c1a:	4854      	ldr	r0, [pc, #336]	; (8002d6c <GrandState_Verita+0x284>)
 8002c1c:	f00a fe1a 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 90, TextDispBuffer, Font16, cl_CYAN);
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <GrandState_Verita+0x290>)
 8002c22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c26:	9201      	str	r2, [sp, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a4f      	ldr	r2, [pc, #316]	; (8002d6c <GrandState_Verita+0x284>)
 8002c30:	215a      	movs	r1, #90	; 0x5a
 8002c32:	203c      	movs	r0, #60	; 0x3c
 8002c34:	f003 fa72 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Hardware-mode");
 8002c38:	4952      	ldr	r1, [pc, #328]	; (8002d84 <GrandState_Verita+0x29c>)
 8002c3a:	484c      	ldr	r0, [pc, #304]	; (8002d6c <GrandState_Verita+0x284>)
 8002c3c:	f00a fe0a 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 120, TextDispBuffer, Font16, cl_CYAN);
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <GrandState_Verita+0x290>)
 8002c42:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c46:	9201      	str	r2, [sp, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	9200      	str	r2, [sp, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a47      	ldr	r2, [pc, #284]	; (8002d6c <GrandState_Verita+0x284>)
 8002c50:	2178      	movs	r1, #120	; 0x78
 8002c52:	203c      	movs	r0, #60	; 0x3c
 8002c54:	f003 fa62 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware-mode");
 8002c58:	494b      	ldr	r1, [pc, #300]	; (8002d88 <GrandState_Verita+0x2a0>)
 8002c5a:	4844      	ldr	r0, [pc, #272]	; (8002d6c <GrandState_Verita+0x284>)
 8002c5c:	f00a fdfa 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 150, TextDispBuffer, Font16, cl_CYAN);
 8002c60:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <GrandState_Verita+0x290>)
 8002c62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c66:	9201      	str	r2, [sp, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	9200      	str	r2, [sp, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <GrandState_Verita+0x284>)
 8002c70:	2196      	movs	r1, #150	; 0x96
 8002c72:	203c      	movs	r0, #60	; 0x3c
 8002c74:	f003 fa52 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"About Verita");
 8002c78:	4944      	ldr	r1, [pc, #272]	; (8002d8c <GrandState_Verita+0x2a4>)
 8002c7a:	483c      	ldr	r0, [pc, #240]	; (8002d6c <GrandState_Verita+0x284>)
 8002c7c:	f00a fdea 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 180, TextDispBuffer, Font16, cl_CYAN);
 8002c80:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <GrandState_Verita+0x290>)
 8002c82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c86:	9201      	str	r2, [sp, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	9200      	str	r2, [sp, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a37      	ldr	r2, [pc, #220]	; (8002d6c <GrandState_Verita+0x284>)
 8002c90:	21b4      	movs	r1, #180	; 0xb4
 8002c92:	203c      	movs	r0, #60	; 0x3c
 8002c94:	f003 fa42 	bl	800611c <ili9341_WriteStringNoBG>



		GrandState = lobby;
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <GrandState_Verita+0x278>)
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
		break; // pre-lobby
 8002c9e:	f002 b934 	b.w	8004f0a <GrandState_Verita+0x2422>

	default:
	case lobby:
		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002ca2:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <GrandState_Verita+0x27c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	705a      	strb	r2, [r3, #1]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is);
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <GrandState_Verita+0x2a8>)
 8002caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <GrandState_Verita+0x27c>)
 8002cae:	789b      	ldrb	r3, [r3, #2]
 8002cb0:	4938      	ldr	r1, [pc, #224]	; (8002d94 <GrandState_Verita+0x2ac>)
 8002cb2:	482e      	ldr	r0, [pc, #184]	; (8002d6c <GrandState_Verita+0x284>)
 8002cb4:	f00a fdce 	bl	800d854 <siprintf>
		ili9341_WriteString(240, 220, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <GrandState_Verita+0x2b0>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	9202      	str	r2, [sp, #8]
 8002cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <GrandState_Verita+0x284>)
 8002ccc:	21dc      	movs	r1, #220	; 0xdc
 8002cce:	20f0      	movs	r0, #240	; 0xf0
 8002cd0:	f003 f9d7 	bl	8006082 <ili9341_WriteString>
		//simple_scr();

		if(k_flag.cnt){
 8002cd4:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <GrandState_Verita+0x2b4>)
 8002cd6:	789b      	ldrb	r3, [r3, #2]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f002 8103 	beq.w	8004ee4 <GrandState_Verita+0x23fc>


			if (stboxp.ch_is == 1) {
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <GrandState_Verita+0x27c>)
 8002ce0:	789b      	ldrb	r3, [r3, #2]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d106      	bne.n	8002cf4 <GrandState_Verita+0x20c>
				gScr.fullflag = ff_runfull;
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <GrandState_Verita+0x2b8>)
 8002ce8:	2203      	movs	r2, #3
 8002cea:	701a      	strb	r2, [r3, #0]
				GrandState = pre_hw_chk;
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <GrandState_Verita+0x278>)
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e01e      	b.n	8002d32 <GrandState_Verita+0x24a>
			}
			else if (stboxp.ch_is == 2){GrandState = pre_monitor;}
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <GrandState_Verita+0x27c>)
 8002cf6:	789b      	ldrb	r3, [r3, #2]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d103      	bne.n	8002d04 <GrandState_Verita+0x21c>
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <GrandState_Verita+0x278>)
 8002cfe:	220b      	movs	r2, #11
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e016      	b.n	8002d32 <GrandState_Verita+0x24a>
			else if (stboxp.ch_is == 3){GrandState = pre_hw_chk;}
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <GrandState_Verita+0x27c>)
 8002d06:	789b      	ldrb	r3, [r3, #2]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d103      	bne.n	8002d14 <GrandState_Verita+0x22c>
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <GrandState_Verita+0x278>)
 8002d0e:	2203      	movs	r2, #3
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e00e      	b.n	8002d32 <GrandState_Verita+0x24a>
			else if (stboxp.ch_is == 4){GrandState = pre_fw_lob;}
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <GrandState_Verita+0x27c>)
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d103      	bne.n	8002d24 <GrandState_Verita+0x23c>
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <GrandState_Verita+0x278>)
 8002d1e:	2205      	movs	r2, #5
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e006      	b.n	8002d32 <GrandState_Verita+0x24a>
			else if (stboxp.ch_is == 5){GrandState = pre_about;}
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <GrandState_Verita+0x27c>)
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d102      	bne.n	8002d32 <GrandState_Verita+0x24a>
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <GrandState_Verita+0x278>)
 8002d2e:	2211      	movs	r2, #17
 8002d30:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <GrandState_Verita+0x2b4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	709a      	strb	r2, [r3, #2]
		}

		break; // lobby
 8002d38:	f002 b8d4 	b.w	8004ee4 <GrandState_Verita+0x23fc>

	case init:
		stboxp.choice_set = bpoxy_def;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <GrandState_Verita+0x27c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	705a      	strb	r2, [r3, #1]

		BL_UART_Start(&huart1);
 8002d42:	4818      	ldr	r0, [pc, #96]	; (8002da4 <GrandState_Verita+0x2bc>)
 8002d44:	f7fe fcb0 	bl	80016a8 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d4c:	4815      	ldr	r0, [pc, #84]	; (8002da4 <GrandState_Verita+0x2bc>)
 8002d4e:	f7fe fe25 	bl	800199c <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 8002d52:	f7fe fcd9 	bl	8001708 <BL_UART_Finish>

		GrandState = lobby;
 8002d56:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <GrandState_Verita+0x278>)
 8002d58:	2202      	movs	r2, #2
 8002d5a:	701a      	strb	r2, [r3, #0]
		break;
 8002d5c:	f002 b8d5 	b.w	8004f0a <GrandState_Verita+0x2422>
 8002d60:	20000006 	.word	0x20000006
 8002d64:	200008ac 	.word	0x200008ac
 8002d68:	0800ff08 	.word	0x0800ff08
 8002d6c:	200006b8 	.word	0x200006b8
 8002d70:	20000238 	.word	0x20000238
 8002d74:	0800ff20 	.word	0x0800ff20
 8002d78:	20000230 	.word	0x20000230
 8002d7c:	0800ff30 	.word	0x0800ff30
 8002d80:	0800ff3c 	.word	0x0800ff3c
 8002d84:	0800ff4c 	.word	0x0800ff4c
 8002d88:	0800ff5c 	.word	0x0800ff5c
 8002d8c:	0800ff6c 	.word	0x0800ff6c
 8002d90:	40000400 	.word	0x40000400
 8002d94:	0800fec8 	.word	0x0800fec8
 8002d98:	20000228 	.word	0x20000228
 8002d9c:	20000890 	.word	0x20000890
 8002da0:	20000894 	.word	0x20000894
 8002da4:	2000058c 	.word	0x2000058c

	case pre_fw_lob:
		stboxp.choice_set = bpoxy_lobfw;
 8002da8:	4b9d      	ldr	r3, [pc, #628]	; (8003020 <GrandState_Verita+0x538>)
 8002daa:	2202      	movs	r2, #2
 8002dac:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	23d2      	movs	r3, #210	; 0xd2
 8002db4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002db8:	211e      	movs	r1, #30
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f002 ffb8 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002dc0:	f647 030f 	movw	r3, #30735	; 0x780f
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	231e      	movs	r3, #30
 8002dc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f002 ffae 	bl	8005d30 <ili9341_FillRect>

		//// -------- client closed make sure --------
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dda:	4892      	ldr	r0, [pc, #584]	; (8003024 <GrandState_Verita+0x53c>)
 8002ddc:	f004 fd18 	bl	8007810 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"Firmware Mode");
 8002de0:	4991      	ldr	r1, [pc, #580]	; (8003028 <GrandState_Verita+0x540>)
 8002de2:	4892      	ldr	r0, [pc, #584]	; (800302c <GrandState_Verita+0x544>)
 8002de4:	f00a fd36 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8002de8:	4b91      	ldr	r3, [pc, #580]	; (8003030 <GrandState_Verita+0x548>)
 8002dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a8d      	ldr	r2, [pc, #564]	; (800302c <GrandState_Verita+0x544>)
 8002df8:	2105      	movs	r1, #5
 8002dfa:	203c      	movs	r0, #60	; 0x3c
 8002dfc:	f003 f98e 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware Upload");
 8002e00:	498c      	ldr	r1, [pc, #560]	; (8003034 <GrandState_Verita+0x54c>)
 8002e02:	488a      	ldr	r0, [pc, #552]	; (800302c <GrandState_Verita+0x544>)
 8002e04:	f00a fd26 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 8002e08:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <GrandState_Verita+0x550>)
 8002e0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e0e:	9201      	str	r2, [sp, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	9200      	str	r2, [sp, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a85      	ldr	r2, [pc, #532]	; (800302c <GrandState_Verita+0x544>)
 8002e18:	213c      	movs	r1, #60	; 0x3c
 8002e1a:	2032      	movs	r0, #50	; 0x32
 8002e1c:	f003 f97e 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"FW ver: %08X", client_bin_Ver);
 8002e20:	4a86      	ldr	r2, [pc, #536]	; (800303c <GrandState_Verita+0x554>)
 8002e22:	4987      	ldr	r1, [pc, #540]	; (8003040 <GrandState_Verita+0x558>)
 8002e24:	4881      	ldr	r0, [pc, #516]	; (800302c <GrandState_Verita+0x544>)
 8002e26:	f00a fd15 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(65, 80, TextDispBuffer, Font12, cl_WHITE);
 8002e2a:	4b86      	ldr	r3, [pc, #536]	; (8003044 <GrandState_Verita+0x55c>)
 8002e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e30:	9201      	str	r2, [sp, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	9200      	str	r2, [sp, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a7c      	ldr	r2, [pc, #496]	; (800302c <GrandState_Verita+0x544>)
 8002e3a:	2150      	movs	r1, #80	; 0x50
 8002e3c:	2041      	movs	r0, #65	; 0x41
 8002e3e:	f003 f96d 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Erase Flash");
 8002e42:	4981      	ldr	r1, [pc, #516]	; (8003048 <GrandState_Verita+0x560>)
 8002e44:	4879      	ldr	r0, [pc, #484]	; (800302c <GrandState_Verita+0x544>)
 8002e46:	f00a fd05 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(50, 100, TextDispBuffer, Font16, cl_CYAN);
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <GrandState_Verita+0x550>)
 8002e4c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a74      	ldr	r2, [pc, #464]	; (800302c <GrandState_Verita+0x544>)
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	2032      	movs	r0, #50	; 0x32
 8002e5e:	f003 f95d 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 8002e62:	497a      	ldr	r1, [pc, #488]	; (800304c <GrandState_Verita+0x564>)
 8002e64:	4871      	ldr	r0, [pc, #452]	; (800302c <GrandState_Verita+0x544>)
 8002e66:	f00a fcf5 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <GrandState_Verita+0x550>)
 8002e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e70:	9201      	str	r2, [sp, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	9200      	str	r2, [sp, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6c      	ldr	r2, [pc, #432]	; (800302c <GrandState_Verita+0x544>)
 8002e7a:	21dc      	movs	r1, #220	; 0xdc
 8002e7c:	201e      	movs	r0, #30
 8002e7e:	f003 f94d 	bl	800611c <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <GrandState_Verita+0x568>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	709a      	strb	r2, [r3, #2]
		GrandState = fw_lob;
 8002e88:	4b72      	ldr	r3, [pc, #456]	; (8003054 <GrandState_Verita+0x56c>)
 8002e8a:	2206      	movs	r2, #6
 8002e8c:	701a      	strb	r2, [r3, #0]
		break;
 8002e8e:	f002 b83c 	b.w	8004f0a <GrandState_Verita+0x2422>

	case fw_lob:

		if(k_flag.cnt){
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <GrandState_Verita+0x568>)
 8002e94:	789b      	ldrb	r3, [r3, #2]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f002 8026 	beq.w	8004ee8 <GrandState_Verita+0x2400>

			if(stboxp.ch_is == 1){GrandState = pre_bootloader;}
 8002e9c:	4b60      	ldr	r3, [pc, #384]	; (8003020 <GrandState_Verita+0x538>)
 8002e9e:	789b      	ldrb	r3, [r3, #2]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <GrandState_Verita+0x3c2>
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <GrandState_Verita+0x56c>)
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 2){GrandState = pre_fw_erase;}
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <GrandState_Verita+0x538>)
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d102      	bne.n	8002eb8 <GrandState_Verita+0x3d0>
 8002eb2:	4b68      	ldr	r3, [pc, #416]	; (8003054 <GrandState_Verita+0x56c>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 3){GrandState = pre_lobby;}
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <GrandState_Verita+0x538>)
 8002eba:	789b      	ldrb	r3, [r3, #2]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d102      	bne.n	8002ec6 <GrandState_Verita+0x3de>
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <GrandState_Verita+0x56c>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002ec6:	4b62      	ldr	r3, [pc, #392]	; (8003050 <GrandState_Verita+0x568>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	709a      	strb	r2, [r3, #2]
		}

		break;
 8002ecc:	f002 b80c 	b.w	8004ee8 <GrandState_Verita+0x2400>

	case pre_fw_erase:
			stboxp.choice_set = bpoxy_no;
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <GrandState_Verita+0x538>)
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	23d2      	movs	r3, #210	; 0xd2
 8002edc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ee0:	211e      	movs	r1, #30
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f002 ff24 	bl	8005d30 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002ee8:	f647 030f 	movw	r3, #30735	; 0x780f
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	231e      	movs	r3, #30
 8002ef0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f002 ff1a 	bl	8005d30 <ili9341_FillRect>

			sprintf(TextDispBuffer,"Firmware Mode");
 8002efc:	494a      	ldr	r1, [pc, #296]	; (8003028 <GrandState_Verita+0x540>)
 8002efe:	484b      	ldr	r0, [pc, #300]	; (800302c <GrandState_Verita+0x544>)
 8002f00:	f00a fca8 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <GrandState_Verita+0x548>)
 8002f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0a:	9201      	str	r2, [sp, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	9200      	str	r2, [sp, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a46      	ldr	r2, [pc, #280]	; (800302c <GrandState_Verita+0x544>)
 8002f14:	2105      	movs	r1, #5
 8002f16:	203c      	movs	r0, #60	; 0x3c
 8002f18:	f003 f900 	bl	800611c <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8002f1c:	4b4e      	ldr	r3, [pc, #312]	; (8003058 <GrandState_Verita+0x570>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d112      	bne.n	8002f4a <GrandState_Verita+0x462>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <GrandState_Verita+0x574>)
 8002f26:	4841      	ldr	r0, [pc, #260]	; (800302c <GrandState_Verita+0x544>)
 8002f28:	f00a fc94 	bl	800d854 <siprintf>
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <GrandState_Verita+0x548>)
 8002f2e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f32:	9202      	str	r2, [sp, #8]
 8002f34:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f38:	9201      	str	r2, [sp, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	9200      	str	r2, [sp, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3a      	ldr	r2, [pc, #232]	; (800302c <GrandState_Verita+0x544>)
 8002f42:	2105      	movs	r1, #5
 8002f44:	20fa      	movs	r0, #250	; 0xfa
 8002f46:	f003 f89c 	bl	8006082 <ili9341_WriteString>
			}

			sprintf(TextDispBuffer,"<-Back");
 8002f4a:	4940      	ldr	r1, [pc, #256]	; (800304c <GrandState_Verita+0x564>)
 8002f4c:	4837      	ldr	r0, [pc, #220]	; (800302c <GrandState_Verita+0x544>)
 8002f4e:	f00a fc81 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <GrandState_Verita+0x550>)
 8002f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a32      	ldr	r2, [pc, #200]	; (800302c <GrandState_Verita+0x544>)
 8002f62:	21dc      	movs	r1, #220	; 0xdc
 8002f64:	201e      	movs	r0, #30
 8002f66:	f003 f8d9 	bl	800611c <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Erase Flash ...");
 8002f6a:	493d      	ldr	r1, [pc, #244]	; (8003060 <GrandState_Verita+0x578>)
 8002f6c:	482f      	ldr	r0, [pc, #188]	; (800302c <GrandState_Verita+0x544>)
 8002f6e:	f00a fc71 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(70, 50, TextDispBuffer, Font20, cl_CYAN);
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <GrandState_Verita+0x548>)
 8002f74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f78:	9201      	str	r2, [sp, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	9200      	str	r2, [sp, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	; (800302c <GrandState_Verita+0x544>)
 8002f82:	2132      	movs	r1, #50	; 0x32
 8002f84:	2046      	movs	r0, #70	; 0x46
 8002f86:	f003 f8c9 	bl	800611c <ili9341_WriteStringNoBG>

			//// -- Open Client ----
			if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 8002f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f8e:	4825      	ldr	r0, [pc, #148]	; (8003024 <GrandState_Verita+0x53c>)
 8002f90:	f004 fc26 	bl	80077e0 <HAL_GPIO_ReadPin>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <GrandState_Verita+0x4ba>
				HAL_Delay(20);
 8002f9a:	2014      	movs	r0, #20
 8002f9c:	f003 fd56 	bl	8006a4c <HAL_Delay>
 8002fa0:	e009      	b.n	8002fb6 <GrandState_Verita+0x4ce>
			}else{
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fa8:	481e      	ldr	r0, [pc, #120]	; (8003024 <GrandState_Verita+0x53c>)
 8002faa:	f004 fc31 	bl	8007810 <HAL_GPIO_WritePin>
				HAL_Delay(2200);
 8002fae:	f640 0098 	movw	r0, #2200	; 0x898
 8002fb2:	f003 fd4b 	bl	8006a4c <HAL_Delay>
			}


			BL_UART_Start(&huart1);
 8002fb6:	482b      	ldr	r0, [pc, #172]	; (8003064 <GrandState_Verita+0x57c>)
 8002fb8:	f7fe fb76 	bl	80016a8 <BL_UART_Start>

			sprintf(TextDispBuffer,"...");
 8002fbc:	492a      	ldr	r1, [pc, #168]	; (8003068 <GrandState_Verita+0x580>)
 8002fbe:	481b      	ldr	r0, [pc, #108]	; (800302c <GrandState_Verita+0x544>)
 8002fc0:	f00a fc48 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(260, 50, TextDispBuffer, Font20, cl_CYAN);
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <GrandState_Verita+0x548>)
 8002fc6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002fca:	9201      	str	r2, [sp, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	9200      	str	r2, [sp, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <GrandState_Verita+0x544>)
 8002fd4:	2132      	movs	r1, #50	; 0x32
 8002fd6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002fda:	f003 f89f 	bl	800611c <ili9341_WriteStringNoBG>

			//// Flash Memory Erase ============,
			blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fe2:	4820      	ldr	r0, [pc, #128]	; (8003064 <GrandState_Verita+0x57c>)
 8002fe4:	f7fe fcda 	bl	800199c <BL_UART_ExtendEraseMem_SP>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <GrandState_Verita+0x584>)
 8002fee:	701a      	strb	r2, [r3, #0]

			//// display
			if(blrespo == UB_ACK){
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <GrandState_Verita+0x584>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b79      	cmp	r3, #121	; 0x79
 8002ff6:	d10f      	bne.n	8003018 <GrandState_Verita+0x530>
				sprintf(TextDispBuffer,"Mem erased");
 8002ff8:	491d      	ldr	r1, [pc, #116]	; (8003070 <GrandState_Verita+0x588>)
 8002ffa:	480c      	ldr	r0, [pc, #48]	; (800302c <GrandState_Verita+0x544>)
 8002ffc:	f00a fc2a 	bl	800d854 <siprintf>
				ili9341_WriteStringNoBG(70, 80, TextDispBuffer, Font20, cl_YELLOW);
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <GrandState_Verita+0x548>)
 8003002:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003006:	9201      	str	r2, [sp, #4]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	9200      	str	r2, [sp, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <GrandState_Verita+0x544>)
 8003010:	2150      	movs	r1, #80	; 0x50
 8003012:	2046      	movs	r0, #70	; 0x46
 8003014:	f003 f882 	bl	800611c <ili9341_WriteStringNoBG>
			}
			//// wait flash erasing for fullscript, about 5-6 sec
			//if(gScr.fullflag == ff_runfull){};
			for(int i = 0;i < 6; i++){
 8003018:	2300      	movs	r3, #0
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	e046      	b.n	80030ac <GrandState_Verita+0x5c4>
 800301e:	bf00      	nop
 8003020:	200008ac 	.word	0x200008ac
 8003024:	40020800 	.word	0x40020800
 8003028:	0800ff7c 	.word	0x0800ff7c
 800302c:	200006b8 	.word	0x200006b8
 8003030:	20000238 	.word	0x20000238
 8003034:	0800ff8c 	.word	0x0800ff8c
 8003038:	20000230 	.word	0x20000230
 800303c:	07010523 	.word	0x07010523
 8003040:	0800ff9c 	.word	0x0800ff9c
 8003044:	20000228 	.word	0x20000228
 8003048:	0800ffac 	.word	0x0800ffac
 800304c:	0800ffb8 	.word	0x0800ffb8
 8003050:	20000890 	.word	0x20000890
 8003054:	20000006 	.word	0x20000006
 8003058:	20000894 	.word	0x20000894
 800305c:	0800ffc0 	.word	0x0800ffc0
 8003060:	0800ffc8 	.word	0x0800ffc8
 8003064:	2000058c 	.word	0x2000058c
 8003068:	0800ffd8 	.word	0x0800ffd8
 800306c:	20000781 	.word	0x20000781
 8003070:	0800ffdc 	.word	0x0800ffdc
				ili9341_FillRect(155, 100, 10, 10, cl_WHITE);
 8003074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	230a      	movs	r3, #10
 800307c:	220a      	movs	r2, #10
 800307e:	2164      	movs	r1, #100	; 0x64
 8003080:	209b      	movs	r0, #155	; 0x9b
 8003082:	f002 fe55 	bl	8005d30 <ili9341_FillRect>
				HAL_Delay(500);
 8003086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800308a:	f003 fcdf 	bl	8006a4c <HAL_Delay>
				ili9341_FillRect(155, 100, 10, 10, cl_BLACK);
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	230a      	movs	r3, #10
 8003094:	220a      	movs	r2, #10
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	209b      	movs	r0, #155	; 0x9b
 800309a:	f002 fe49 	bl	8005d30 <ili9341_FillRect>
				HAL_Delay(500);
 800309e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030a2:	f003 fcd3 	bl	8006a4c <HAL_Delay>
			for(int i = 0;i < 6; i++){
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3301      	adds	r3, #1
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	dde0      	ble.n	8003074 <GrandState_Verita+0x58c>
			}


			BL_UART_Finish();
 80030b2:	f7fe fb29 	bl	8001708 <BL_UART_Finish>

			//HAL_Delay(3500);
			sprintf(TextDispBuffer,"Erased Finish");
 80030b6:	4996      	ldr	r1, [pc, #600]	; (8003310 <GrandState_Verita+0x828>)
 80030b8:	4896      	ldr	r0, [pc, #600]	; (8003314 <GrandState_Verita+0x82c>)
 80030ba:	f00a fbcb 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(70, 110, TextDispBuffer, Font20, cl_YELLOW);
 80030be:	4b96      	ldr	r3, [pc, #600]	; (8003318 <GrandState_Verita+0x830>)
 80030c0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80030c4:	9201      	str	r2, [sp, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a91      	ldr	r2, [pc, #580]	; (8003314 <GrandState_Verita+0x82c>)
 80030ce:	216e      	movs	r1, #110	; 0x6e
 80030d0:	2046      	movs	r0, #70	; 0x46
 80030d2:	f003 f823 	bl	800611c <ili9341_WriteStringNoBG>
			HAL_Delay(500);
 80030d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030da:	f003 fcb7 	bl	8006a4c <HAL_Delay>

			//// -- Close Client ----
			//if(gScr.fullflag != ff_runfull){
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80030de:	2200      	movs	r2, #0
 80030e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e4:	488d      	ldr	r0, [pc, #564]	; (800331c <GrandState_Verita+0x834>)
 80030e6:	f004 fb93 	bl	8007810 <HAL_GPIO_WritePin>
			//};


			k_flag.cnt = 0;
 80030ea:	4b8d      	ldr	r3, [pc, #564]	; (8003320 <GrandState_Verita+0x838>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	709a      	strb	r2, [r3, #2]
			if(gScr.fullflag == ff_runfull){
 80030f0:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <GrandState_Verita+0x83c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d104      	bne.n	8003102 <GrandState_Verita+0x61a>
				 GrandState = pre_bootloader;
 80030f8:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <GrandState_Verita+0x840>)
 80030fa:	2208      	movs	r2, #8
 80030fc:	701a      	strb	r2, [r3, #0]
			}else{
				GrandState = pre_fw_lob;
			}

			break;
 80030fe:	f001 bf04 	b.w	8004f0a <GrandState_Verita+0x2422>
				GrandState = pre_fw_lob;
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <GrandState_Verita+0x840>)
 8003104:	2205      	movs	r2, #5
 8003106:	701a      	strb	r2, [r3, #0]
			break;
 8003108:	f001 beff 	b.w	8004f0a <GrandState_Verita+0x2422>

	case pre_hw_chk:
		stboxp.choice_set = bpoxy_def;
 800310c:	4b87      	ldr	r3, [pc, #540]	; (800332c <GrandState_Verita+0x844>)
 800310e:	2200      	movs	r2, #0
 8003110:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003112:	2300      	movs	r3, #0
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	23d2      	movs	r3, #210	; 0xd2
 8003118:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800311c:	211e      	movs	r1, #30
 800311e:	2000      	movs	r0, #0
 8003120:	f002 fe06 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_ORANGE);
 8003124:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	231e      	movs	r3, #30
 800312c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003130:	2100      	movs	r1, #0
 8003132:	2000      	movs	r0, #0
 8003134:	f002 fdfc 	bl	8005d30 <ili9341_FillRect>

		if(gScr.fullflag == ff_runfull){
 8003138:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <GrandState_Verita+0x83c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d112      	bne.n	8003166 <GrandState_Verita+0x67e>
			sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003140:	497b      	ldr	r1, [pc, #492]	; (8003330 <GrandState_Verita+0x848>)
 8003142:	4874      	ldr	r0, [pc, #464]	; (8003314 <GrandState_Verita+0x82c>)
 8003144:	f00a fb86 	bl	800d854 <siprintf>
 8003148:	4b73      	ldr	r3, [pc, #460]	; (8003318 <GrandState_Verita+0x830>)
 800314a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800314e:	9202      	str	r2, [sp, #8]
 8003150:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003154:	9201      	str	r2, [sp, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	9200      	str	r2, [sp, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <GrandState_Verita+0x82c>)
 800315e:	2105      	movs	r1, #5
 8003160:	20fa      	movs	r0, #250	; 0xfa
 8003162:	f002 ff8e 	bl	8006082 <ili9341_WriteString>
		}


		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003166:	2201      	movs	r2, #1
 8003168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800316c:	486b      	ldr	r0, [pc, #428]	; (800331c <GrandState_Verita+0x834>)
 800316e:	f004 fb4f 	bl	8007810 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"Hardware_Chk");
 8003172:	4970      	ldr	r1, [pc, #448]	; (8003334 <GrandState_Verita+0x84c>)
 8003174:	4867      	ldr	r0, [pc, #412]	; (8003314 <GrandState_Verita+0x82c>)
 8003176:	f00a fb6d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_WHITE);
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <GrandState_Verita+0x830>)
 800317c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003180:	9201      	str	r2, [sp, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	9200      	str	r2, [sp, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a62      	ldr	r2, [pc, #392]	; (8003314 <GrandState_Verita+0x82c>)
 800318a:	2105      	movs	r1, #5
 800318c:	2050      	movs	r0, #80	; 0x50
 800318e:	f002 ffc5 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"5V:");
 8003192:	4969      	ldr	r1, [pc, #420]	; (8003338 <GrandState_Verita+0x850>)
 8003194:	485f      	ldr	r0, [pc, #380]	; (8003314 <GrandState_Verita+0x82c>)
 8003196:	f00a fb5d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 800319a:	4b68      	ldr	r3, [pc, #416]	; (800333c <GrandState_Verita+0x854>)
 800319c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a0:	9201      	str	r2, [sp, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	9200      	str	r2, [sp, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <GrandState_Verita+0x82c>)
 80031aa:	2132      	movs	r1, #50	; 0x32
 80031ac:	200f      	movs	r0, #15
 80031ae:	f002 ffb5 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 80031b2:	4963      	ldr	r1, [pc, #396]	; (8003340 <GrandState_Verita+0x858>)
 80031b4:	4857      	ldr	r0, [pc, #348]	; (8003314 <GrandState_Verita+0x82c>)
 80031b6:	f00a fb4d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 80031ba:	4b60      	ldr	r3, [pc, #384]	; (800333c <GrandState_Verita+0x854>)
 80031bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c0:	9201      	str	r2, [sp, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <GrandState_Verita+0x82c>)
 80031ca:	214b      	movs	r1, #75	; 0x4b
 80031cc:	200f      	movs	r0, #15
 80031ce:	f002 ffa5 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 80031d2:	495b      	ldr	r1, [pc, #364]	; (8003340 <GrandState_Verita+0x858>)
 80031d4:	484f      	ldr	r0, [pc, #316]	; (8003314 <GrandState_Verita+0x82c>)
 80031d6:	f00a fb3d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 95, TextDispBuffer, Font16, cl_WHITE);
 80031da:	4b58      	ldr	r3, [pc, #352]	; (800333c <GrandState_Verita+0x854>)
 80031dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e0:	9201      	str	r2, [sp, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	9200      	str	r2, [sp, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <GrandState_Verita+0x82c>)
 80031ea:	215f      	movs	r1, #95	; 0x5f
 80031ec:	200f      	movs	r0, #15
 80031ee:	f002 ff95 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"STLink");
 80031f2:	4954      	ldr	r1, [pc, #336]	; (8003344 <GrandState_Verita+0x85c>)
 80031f4:	4847      	ldr	r0, [pc, #284]	; (8003314 <GrandState_Verita+0x82c>)
 80031f6:	f00a fb2d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 106, TextDispBuffer, Font12, cl_WHITE);
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <GrandState_Verita+0x860>)
 80031fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003200:	9201      	str	r2, [sp, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	9200      	str	r2, [sp, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a42      	ldr	r2, [pc, #264]	; (8003314 <GrandState_Verita+0x82c>)
 800320a:	216a      	movs	r1, #106	; 0x6a
 800320c:	200f      	movs	r0, #15
 800320e:	f002 ff85 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 8003212:	494e      	ldr	r1, [pc, #312]	; (800334c <GrandState_Verita+0x864>)
 8003214:	483f      	ldr	r0, [pc, #252]	; (8003314 <GrandState_Verita+0x82c>)
 8003216:	f00a fb1d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 800321a:	4b48      	ldr	r3, [pc, #288]	; (800333c <GrandState_Verita+0x854>)
 800321c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003220:	9201      	str	r2, [sp, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <GrandState_Verita+0x82c>)
 800322a:	217d      	movs	r1, #125	; 0x7d
 800322c:	200f      	movs	r0, #15
 800322e:	f002 ff75 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 8003232:	4947      	ldr	r1, [pc, #284]	; (8003350 <GrandState_Verita+0x868>)
 8003234:	4837      	ldr	r0, [pc, #220]	; (8003314 <GrandState_Verita+0x82c>)
 8003236:	f00a fb0d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 800323a:	4b40      	ldr	r3, [pc, #256]	; (800333c <GrandState_Verita+0x854>)
 800323c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003240:	9201      	str	r2, [sp, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a32      	ldr	r2, [pc, #200]	; (8003314 <GrandState_Verita+0x82c>)
 800324a:	2196      	movs	r1, #150	; 0x96
 800324c:	200f      	movs	r0, #15
 800324e:	f002 ff65 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(165, 54, TextDispBuffer, Font12, cl_WHITE);
 8003252:	4940      	ldr	r1, [pc, #256]	; (8003354 <GrandState_Verita+0x86c>)
 8003254:	482f      	ldr	r0, [pc, #188]	; (8003314 <GrandState_Verita+0x82c>)
 8003256:	f00a fafd 	bl	800d854 <siprintf>
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <GrandState_Verita+0x860>)
 800325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003260:	9201      	str	r2, [sp, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <GrandState_Verita+0x82c>)
 800326a:	2136      	movs	r1, #54	; 0x36
 800326c:	20a5      	movs	r0, #165	; 0xa5
 800326e:	f002 ff55 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(165, 79, TextDispBuffer, Font12, cl_WHITE);
 8003272:	4938      	ldr	r1, [pc, #224]	; (8003354 <GrandState_Verita+0x86c>)
 8003274:	4827      	ldr	r0, [pc, #156]	; (8003314 <GrandState_Verita+0x82c>)
 8003276:	f00a faed 	bl	800d854 <siprintf>
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <GrandState_Verita+0x860>)
 800327c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003280:	9201      	str	r2, [sp, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	9200      	str	r2, [sp, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <GrandState_Verita+0x82c>)
 800328a:	214f      	movs	r1, #79	; 0x4f
 800328c:	20a5      	movs	r0, #165	; 0xa5
 800328e:	f002 ff45 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(165, 104, TextDispBuffer, Font12, cl_WHITE);
 8003292:	4930      	ldr	r1, [pc, #192]	; (8003354 <GrandState_Verita+0x86c>)
 8003294:	481f      	ldr	r0, [pc, #124]	; (8003314 <GrandState_Verita+0x82c>)
 8003296:	f00a fadd 	bl	800d854 <siprintf>
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <GrandState_Verita+0x860>)
 800329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a0:	9201      	str	r2, [sp, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <GrandState_Verita+0x82c>)
 80032aa:	2168      	movs	r1, #104	; 0x68
 80032ac:	20a5      	movs	r0, #165	; 0xa5
 80032ae:	f002 ff35 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(165, 129, TextDispBuffer, Font12, cl_WHITE);
 80032b2:	4929      	ldr	r1, [pc, #164]	; (8003358 <GrandState_Verita+0x870>)
 80032b4:	4817      	ldr	r0, [pc, #92]	; (8003314 <GrandState_Verita+0x82c>)
 80032b6:	f00a facd 	bl	800d854 <siprintf>
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <GrandState_Verita+0x860>)
 80032bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c0:	9201      	str	r2, [sp, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <GrandState_Verita+0x82c>)
 80032ca:	2181      	movs	r1, #129	; 0x81
 80032cc:	20a5      	movs	r0, #165	; 0xa5
 80032ce:	f002 ff25 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(165, 154, TextDispBuffer, Font12, cl_WHITE);
 80032d2:	4921      	ldr	r1, [pc, #132]	; (8003358 <GrandState_Verita+0x870>)
 80032d4:	480f      	ldr	r0, [pc, #60]	; (8003314 <GrandState_Verita+0x82c>)
 80032d6:	f00a fabd 	bl	800d854 <siprintf>
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <GrandState_Verita+0x860>)
 80032dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e0:	9201      	str	r2, [sp, #4]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	9200      	str	r2, [sp, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <GrandState_Verita+0x82c>)
 80032ea:	219a      	movs	r1, #154	; 0x9a
 80032ec:	20a5      	movs	r0, #165	; 0xa5
 80032ee:	f002 ff15 	bl	800611c <ili9341_WriteStringNoBG>


		gScr.timelog = HAL_GetTick() + 3500;
 80032f2:	f003 fb9f 	bl	8006a34 <HAL_GetTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <GrandState_Verita+0x83c>)
 80032fe:	6053      	str	r3, [r2, #4]

		k_flag.cnt = 0; //// prevent over state jump
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <GrandState_Verita+0x838>)
 8003302:	2200      	movs	r2, #0
 8003304:	709a      	strb	r2, [r3, #2]
		GrandState = hw_chk;
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <GrandState_Verita+0x840>)
 8003308:	2204      	movs	r2, #4
 800330a:	701a      	strb	r2, [r3, #0]
		break; //pre_hw_chk
 800330c:	f001 bdfd 	b.w	8004f0a <GrandState_Verita+0x2422>
 8003310:	0800ffe8 	.word	0x0800ffe8
 8003314:	200006b8 	.word	0x200006b8
 8003318:	20000238 	.word	0x20000238
 800331c:	40020800 	.word	0x40020800
 8003320:	20000890 	.word	0x20000890
 8003324:	20000894 	.word	0x20000894
 8003328:	20000006 	.word	0x20000006
 800332c:	200008ac 	.word	0x200008ac
 8003330:	0800ffc0 	.word	0x0800ffc0
 8003334:	0800fff8 	.word	0x0800fff8
 8003338:	08010008 	.word	0x08010008
 800333c:	20000230 	.word	0x20000230
 8003340:	0801000c 	.word	0x0801000c
 8003344:	08010014 	.word	0x08010014
 8003348:	20000228 	.word	0x20000228
 800334c:	0801001c 	.word	0x0801001c
 8003350:	08010024 	.word	0x08010024
 8003354:	0801002c 	.word	0x0801002c
 8003358:	08010030 	.word	0x08010030

	case hw_chk:
		stboxp.choice_set = bpoxy_def;
 800335c:	4bac      	ldr	r3, [pc, #688]	; (8003610 <GrandState_Verita+0xb28>)
 800335e:	2200      	movs	r2, #0
 8003360:	705a      	strb	r2, [r3, #1]

		//// 5V
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[1]*1000)); // inatb.inatb.Bus_V
 8003362:	4bac      	ldr	r3, [pc, #688]	; (8003614 <GrandState_Verita+0xb2c>)
 8003364:	edd3 7a05 	vldr	s15, [r3, #20]
 8003368:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8003618 <GrandState_Verita+0xb30>
 800336c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003374:	ee17 3a90 	vmov	r3, s15
 8003378:	b29b      	uxth	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	49a7      	ldr	r1, [pc, #668]	; (800361c <GrandState_Verita+0xb34>)
 800337e:	48a8      	ldr	r0, [pc, #672]	; (8003620 <GrandState_Verita+0xb38>)
 8003380:	f00a fa68 	bl	800d854 <siprintf>
		if(mcp_read.cv[1] <= 4.300){
 8003384:	4ba3      	ldr	r3, [pc, #652]	; (8003614 <GrandState_Verita+0xb2c>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8e5 	bl	8000558 <__aeabi_f2d>
 800338e:	a39c      	add	r3, pc, #624	; (adr r3, 8003600 <GrandState_Verita+0xb18>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd fbb4 	bl	8000b00 <__aeabi_dcmple>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d023      	beq.n	80033e6 <GrandState_Verita+0x8fe>
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800339e:	4ba1      	ldr	r3, [pc, #644]	; (8003624 <GrandState_Verita+0xb3c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	9202      	str	r2, [sp, #8]
 80033a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033a8:	9201      	str	r2, [sp, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	9200      	str	r2, [sp, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a9b      	ldr	r2, [pc, #620]	; (8003620 <GrandState_Verita+0xb38>)
 80033b2:	2132      	movs	r1, #50	; 0x32
 80033b4:	2064      	movs	r0, #100	; 0x64
 80033b6:	f002 fe64 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 50, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80033ba:	499b      	ldr	r1, [pc, #620]	; (8003628 <GrandState_Verita+0xb40>)
 80033bc:	4898      	ldr	r0, [pc, #608]	; (8003620 <GrandState_Verita+0xb38>)
 80033be:	f00a fa49 	bl	800d854 <siprintf>
 80033c2:	4b98      	ldr	r3, [pc, #608]	; (8003624 <GrandState_Verita+0xb3c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	9202      	str	r2, [sp, #8]
 80033c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033cc:	9201      	str	r2, [sp, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	9200      	str	r2, [sp, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a92      	ldr	r2, [pc, #584]	; (8003620 <GrandState_Verita+0xb38>)
 80033d6:	2132      	movs	r1, #50	; 0x32
 80033d8:	20dc      	movs	r0, #220	; 0xdc
 80033da:	f002 fe52 	bl	8006082 <ili9341_WriteString>
			hwscor.p5V = 0;
 80033de:	4b93      	ldr	r3, [pc, #588]	; (800362c <GrandState_Verita+0xb44>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e022      	b.n	800342c <GrandState_Verita+0x944>
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80033e6:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <GrandState_Verita+0xb3c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	9202      	str	r2, [sp, #8]
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	9201      	str	r2, [sp, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	9200      	str	r2, [sp, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a89      	ldr	r2, [pc, #548]	; (8003620 <GrandState_Verita+0xb38>)
 80033fa:	2132      	movs	r1, #50	; 0x32
 80033fc:	2064      	movs	r0, #100	; 0x64
 80033fe:	f002 fe40 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 50, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 8003402:	498b      	ldr	r1, [pc, #556]	; (8003630 <GrandState_Verita+0xb48>)
 8003404:	4886      	ldr	r0, [pc, #536]	; (8003620 <GrandState_Verita+0xb38>)
 8003406:	f00a fa25 	bl	800d854 <siprintf>
 800340a:	4b86      	ldr	r3, [pc, #536]	; (8003624 <GrandState_Verita+0xb3c>)
 800340c:	2200      	movs	r2, #0
 800340e:	9202      	str	r2, [sp, #8]
 8003410:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003414:	9201      	str	r2, [sp, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	9200      	str	r2, [sp, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a80      	ldr	r2, [pc, #512]	; (8003620 <GrandState_Verita+0xb38>)
 800341e:	2132      	movs	r1, #50	; 0x32
 8003420:	20dc      	movs	r0, #220	; 0xdc
 8003422:	f002 fe2e 	bl	8006082 <ili9341_WriteString>
			hwscor.p5V = 1;
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <GrandState_Verita+0xb44>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
		}
		//// 3V3
		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 800342c:	4b81      	ldr	r3, [pc, #516]	; (8003634 <GrandState_Verita+0xb4c>)
 800342e:	8a1b      	ldrh	r3, [r3, #16]
 8003430:	461a      	mov	r2, r3
 8003432:	497a      	ldr	r1, [pc, #488]	; (800361c <GrandState_Verita+0xb34>)
 8003434:	487a      	ldr	r0, [pc, #488]	; (8003620 <GrandState_Verita+0xb38>)
 8003436:	f00a fa0d 	bl	800d854 <siprintf>
		if(inata.Bus_V <= 2900){
 800343a:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <GrandState_Verita+0xb4c>)
 800343c:	8a1b      	ldrh	r3, [r3, #16]
 800343e:	f640 3254 	movw	r2, #2900	; 0xb54
 8003442:	4293      	cmp	r3, r2
 8003444:	d823      	bhi.n	800348e <GrandState_Verita+0x9a6>
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003446:	4b77      	ldr	r3, [pc, #476]	; (8003624 <GrandState_Verita+0xb3c>)
 8003448:	2200      	movs	r2, #0
 800344a:	9202      	str	r2, [sp, #8]
 800344c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003450:	9201      	str	r2, [sp, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	9200      	str	r2, [sp, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a71      	ldr	r2, [pc, #452]	; (8003620 <GrandState_Verita+0xb38>)
 800345a:	214b      	movs	r1, #75	; 0x4b
 800345c:	2064      	movs	r0, #100	; 0x64
 800345e:	f002 fe10 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 75, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003462:	4971      	ldr	r1, [pc, #452]	; (8003628 <GrandState_Verita+0xb40>)
 8003464:	486e      	ldr	r0, [pc, #440]	; (8003620 <GrandState_Verita+0xb38>)
 8003466:	f00a f9f5 	bl	800d854 <siprintf>
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <GrandState_Verita+0xb3c>)
 800346c:	2200      	movs	r2, #0
 800346e:	9202      	str	r2, [sp, #8]
 8003470:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003474:	9201      	str	r2, [sp, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	9200      	str	r2, [sp, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a68      	ldr	r2, [pc, #416]	; (8003620 <GrandState_Verita+0xb38>)
 800347e:	214b      	movs	r1, #75	; 0x4b
 8003480:	20dc      	movs	r0, #220	; 0xdc
 8003482:	f002 fdfe 	bl	8006082 <ili9341_WriteString>
			hwscor.p3V3 = 0;
 8003486:	4b69      	ldr	r3, [pc, #420]	; (800362c <GrandState_Verita+0xb44>)
 8003488:	2200      	movs	r2, #0
 800348a:	705a      	strb	r2, [r3, #1]
 800348c:	e022      	b.n	80034d4 <GrandState_Verita+0x9ec>
		}else{
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <GrandState_Verita+0xb3c>)
 8003490:	2200      	movs	r2, #0
 8003492:	9202      	str	r2, [sp, #8]
 8003494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003498:	9201      	str	r2, [sp, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	9200      	str	r2, [sp, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5f      	ldr	r2, [pc, #380]	; (8003620 <GrandState_Verita+0xb38>)
 80034a2:	214b      	movs	r1, #75	; 0x4b
 80034a4:	2064      	movs	r0, #100	; 0x64
 80034a6:	f002 fdec 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 75, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 80034aa:	4961      	ldr	r1, [pc, #388]	; (8003630 <GrandState_Verita+0xb48>)
 80034ac:	485c      	ldr	r0, [pc, #368]	; (8003620 <GrandState_Verita+0xb38>)
 80034ae:	f00a f9d1 	bl	800d854 <siprintf>
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <GrandState_Verita+0xb3c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80034bc:	9201      	str	r2, [sp, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	9200      	str	r2, [sp, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a56      	ldr	r2, [pc, #344]	; (8003620 <GrandState_Verita+0xb38>)
 80034c6:	214b      	movs	r1, #75	; 0x4b
 80034c8:	20dc      	movs	r0, #220	; 0xdc
 80034ca:	f002 fdda 	bl	8006082 <ili9341_WriteString>
			hwscor.p3V3 = 1;
 80034ce:	4b57      	ldr	r3, [pc, #348]	; (800362c <GrandState_Verita+0xb44>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	705a      	strb	r2, [r3, #1]
		}
		//// 3V3 STLink
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[0]*1000));
 80034d4:	4b4f      	ldr	r3, [pc, #316]	; (8003614 <GrandState_Verita+0xb2c>)
 80034d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80034da:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003618 <GrandState_Verita+0xb30>
 80034de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e6:	ee17 3a90 	vmov	r3, s15
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	494b      	ldr	r1, [pc, #300]	; (800361c <GrandState_Verita+0xb34>)
 80034f0:	484b      	ldr	r0, [pc, #300]	; (8003620 <GrandState_Verita+0xb38>)
 80034f2:	f00a f9af 	bl	800d854 <siprintf>
		if(mcp_read.cv[0] <= 2.90){
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <GrandState_Verita+0xb2c>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f82c 	bl	8000558 <__aeabi_f2d>
 8003500:	a341      	add	r3, pc, #260	; (adr r3, 8003608 <GrandState_Verita+0xb20>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd fafb 	bl	8000b00 <__aeabi_dcmple>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <GrandState_Verita+0xa70>
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003510:	4b44      	ldr	r3, [pc, #272]	; (8003624 <GrandState_Verita+0xb3c>)
 8003512:	2200      	movs	r2, #0
 8003514:	9202      	str	r2, [sp, #8]
 8003516:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800351a:	9201      	str	r2, [sp, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	9200      	str	r2, [sp, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3f      	ldr	r2, [pc, #252]	; (8003620 <GrandState_Verita+0xb38>)
 8003524:	2164      	movs	r1, #100	; 0x64
 8003526:	2064      	movs	r0, #100	; 0x64
 8003528:	f002 fdab 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800352c:	493e      	ldr	r1, [pc, #248]	; (8003628 <GrandState_Verita+0xb40>)
 800352e:	483c      	ldr	r0, [pc, #240]	; (8003620 <GrandState_Verita+0xb38>)
 8003530:	f00a f990 	bl	800d854 <siprintf>
 8003534:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <GrandState_Verita+0xb3c>)
 8003536:	2200      	movs	r2, #0
 8003538:	9202      	str	r2, [sp, #8]
 800353a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800353e:	9201      	str	r2, [sp, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	9200      	str	r2, [sp, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a36      	ldr	r2, [pc, #216]	; (8003620 <GrandState_Verita+0xb38>)
 8003548:	2164      	movs	r1, #100	; 0x64
 800354a:	20dc      	movs	r0, #220	; 0xdc
 800354c:	f002 fd99 	bl	8006082 <ili9341_WriteString>
			hwscor.p3VSTL = 0;
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <GrandState_Verita+0xb44>)
 8003552:	2200      	movs	r2, #0
 8003554:	709a      	strb	r2, [r3, #2]
 8003556:	e022      	b.n	800359e <GrandState_Verita+0xab6>
		}else{
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003558:	4b32      	ldr	r3, [pc, #200]	; (8003624 <GrandState_Verita+0xb3c>)
 800355a:	2200      	movs	r2, #0
 800355c:	9202      	str	r2, [sp, #8]
 800355e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003562:	9201      	str	r2, [sp, #4]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	9200      	str	r2, [sp, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <GrandState_Verita+0xb38>)
 800356c:	2164      	movs	r1, #100	; 0x64
 800356e:	2064      	movs	r0, #100	; 0x64
 8003570:	f002 fd87 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 100, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 8003574:	492e      	ldr	r1, [pc, #184]	; (8003630 <GrandState_Verita+0xb48>)
 8003576:	482a      	ldr	r0, [pc, #168]	; (8003620 <GrandState_Verita+0xb38>)
 8003578:	f00a f96c 	bl	800d854 <siprintf>
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <GrandState_Verita+0xb3c>)
 800357e:	2200      	movs	r2, #0
 8003580:	9202      	str	r2, [sp, #8]
 8003582:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003586:	9201      	str	r2, [sp, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	9200      	str	r2, [sp, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a24      	ldr	r2, [pc, #144]	; (8003620 <GrandState_Verita+0xb38>)
 8003590:	2164      	movs	r1, #100	; 0x64
 8003592:	20dc      	movs	r0, #220	; 0xdc
 8003594:	f002 fd75 	bl	8006082 <ili9341_WriteString>
			hwscor.p3VSTL = 1;
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <GrandState_Verita+0xb44>)
 800359a:	2201      	movs	r2, #1
 800359c:	709a      	strb	r2, [r3, #2]
		}
		 //// I Brd
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <GrandState_Verita+0xb50>)
 80035a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035a4:	461a      	mov	r2, r3
 80035a6:	491d      	ldr	r1, [pc, #116]	; (800361c <GrandState_Verita+0xb34>)
 80035a8:	481d      	ldr	r0, [pc, #116]	; (8003620 <GrandState_Verita+0xb38>)
 80035aa:	f00a f953 	bl	800d854 <siprintf>
		if(inatb.CURRENT >= Current_treash_mA){
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <GrandState_Verita+0xb50>)
 80035b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035b4:	2bf9      	cmp	r3, #249	; 0xf9
 80035b6:	dd41      	ble.n	800363c <GrandState_Verita+0xb54>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <GrandState_Verita+0xb3c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	9202      	str	r2, [sp, #8]
 80035be:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035c2:	9201      	str	r2, [sp, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	9200      	str	r2, [sp, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <GrandState_Verita+0xb38>)
 80035cc:	217d      	movs	r1, #125	; 0x7d
 80035ce:	2064      	movs	r0, #100	; 0x64
 80035d0:	f002 fd57 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 125, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80035d4:	4914      	ldr	r1, [pc, #80]	; (8003628 <GrandState_Verita+0xb40>)
 80035d6:	4812      	ldr	r0, [pc, #72]	; (8003620 <GrandState_Verita+0xb38>)
 80035d8:	f00a f93c 	bl	800d854 <siprintf>
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <GrandState_Verita+0xb3c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	9202      	str	r2, [sp, #8]
 80035e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035e6:	9201      	str	r2, [sp, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	9200      	str	r2, [sp, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <GrandState_Verita+0xb38>)
 80035f0:	217d      	movs	r1, #125	; 0x7d
 80035f2:	20dc      	movs	r0, #220	; 0xdc
 80035f4:	f002 fd45 	bl	8006082 <ili9341_WriteString>
			hwscor.pIbrd = 0;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <GrandState_Verita+0xb44>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	70da      	strb	r2, [r3, #3]
 80035fe:	e066      	b.n	80036ce <GrandState_Verita+0xbe6>
 8003600:	33333333 	.word	0x33333333
 8003604:	40113333 	.word	0x40113333
 8003608:	33333333 	.word	0x33333333
 800360c:	40073333 	.word	0x40073333
 8003610:	200008ac 	.word	0x200008ac
 8003614:	20000828 	.word	0x20000828
 8003618:	447a0000 	.word	0x447a0000
 800361c:	08010034 	.word	0x08010034
 8003620:	200006b8 	.word	0x200006b8
 8003624:	20000238 	.word	0x20000238
 8003628:	08010038 	.word	0x08010038
 800362c:	200008a0 	.word	0x200008a0
 8003630:	08010040 	.word	0x08010040
 8003634:	200007f8 	.word	0x200007f8
 8003638:	20000810 	.word	0x20000810
		}else if (inatb.CURRENT <= 1) { // 8
 800363c:	4ba5      	ldr	r3, [pc, #660]	; (80038d4 <GrandState_Verita+0xdec>)
 800363e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003642:	2b01      	cmp	r3, #1
 8003644:	dc20      	bgt.n	8003688 <GrandState_Verita+0xba0>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003646:	4ba4      	ldr	r3, [pc, #656]	; (80038d8 <GrandState_Verita+0xdf0>)
 8003648:	2200      	movs	r2, #0
 800364a:	9202      	str	r2, [sp, #8]
 800364c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003650:	9201      	str	r2, [sp, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4aa0      	ldr	r2, [pc, #640]	; (80038dc <GrandState_Verita+0xdf4>)
 800365a:	217d      	movs	r1, #125	; 0x7d
 800365c:	2064      	movs	r0, #100	; 0x64
 800365e:	f002 fd10 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"N/A"); ili9341_WriteString(220, 125, TextDispBuffer, Font20, cl_ORANGE, cl_BLACK);
 8003662:	499f      	ldr	r1, [pc, #636]	; (80038e0 <GrandState_Verita+0xdf8>)
 8003664:	489d      	ldr	r0, [pc, #628]	; (80038dc <GrandState_Verita+0xdf4>)
 8003666:	f00a f8f5 	bl	800d854 <siprintf>
 800366a:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <GrandState_Verita+0xdf0>)
 800366c:	2200      	movs	r2, #0
 800366e:	9202      	str	r2, [sp, #8]
 8003670:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003674:	9201      	str	r2, [sp, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	9200      	str	r2, [sp, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a97      	ldr	r2, [pc, #604]	; (80038dc <GrandState_Verita+0xdf4>)
 800367e:	217d      	movs	r1, #125	; 0x7d
 8003680:	20dc      	movs	r0, #220	; 0xdc
 8003682:	f002 fcfe 	bl	8006082 <ili9341_WriteString>
 8003686:	e022      	b.n	80036ce <GrandState_Verita+0xbe6>
		}
		else{
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003688:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <GrandState_Verita+0xdf0>)
 800368a:	2200      	movs	r2, #0
 800368c:	9202      	str	r2, [sp, #8]
 800368e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003692:	9201      	str	r2, [sp, #4]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	9200      	str	r2, [sp, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a90      	ldr	r2, [pc, #576]	; (80038dc <GrandState_Verita+0xdf4>)
 800369c:	217d      	movs	r1, #125	; 0x7d
 800369e:	2064      	movs	r0, #100	; 0x64
 80036a0:	f002 fcef 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 125, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 80036a4:	498f      	ldr	r1, [pc, #572]	; (80038e4 <GrandState_Verita+0xdfc>)
 80036a6:	488d      	ldr	r0, [pc, #564]	; (80038dc <GrandState_Verita+0xdf4>)
 80036a8:	f00a f8d4 	bl	800d854 <siprintf>
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <GrandState_Verita+0xdf0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	9202      	str	r2, [sp, #8]
 80036b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036b6:	9201      	str	r2, [sp, #4]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	9200      	str	r2, [sp, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a87      	ldr	r2, [pc, #540]	; (80038dc <GrandState_Verita+0xdf4>)
 80036c0:	217d      	movs	r1, #125	; 0x7d
 80036c2:	20dc      	movs	r0, #220	; 0xdc
 80036c4:	f002 fcdd 	bl	8006082 <ili9341_WriteString>
			hwscor.pIbrd = 1;
 80036c8:	4b87      	ldr	r3, [pc, #540]	; (80038e8 <GrandState_Verita+0xe00>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	70da      	strb	r2, [r3, #3]
		}

		//// I MCU
		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 80036ce:	4b87      	ldr	r3, [pc, #540]	; (80038ec <GrandState_Verita+0xe04>)
 80036d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4986      	ldr	r1, [pc, #536]	; (80038f0 <GrandState_Verita+0xe08>)
 80036d8:	4880      	ldr	r0, [pc, #512]	; (80038dc <GrandState_Verita+0xdf4>)
 80036da:	f00a f8bb 	bl	800d854 <siprintf>
		if(inata.CURRENT >= Current_treash_mA){
 80036de:	4b83      	ldr	r3, [pc, #524]	; (80038ec <GrandState_Verita+0xe04>)
 80036e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036e4:	2bf9      	cmp	r3, #249	; 0xf9
 80036e6:	dd23      	ble.n	8003730 <GrandState_Verita+0xc48>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80036e8:	4b7b      	ldr	r3, [pc, #492]	; (80038d8 <GrandState_Verita+0xdf0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	9202      	str	r2, [sp, #8]
 80036ee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036f2:	9201      	str	r2, [sp, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	9200      	str	r2, [sp, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a78      	ldr	r2, [pc, #480]	; (80038dc <GrandState_Verita+0xdf4>)
 80036fc:	2196      	movs	r1, #150	; 0x96
 80036fe:	2064      	movs	r0, #100	; 0x64
 8003700:	f002 fcbf 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 150, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003704:	497b      	ldr	r1, [pc, #492]	; (80038f4 <GrandState_Verita+0xe0c>)
 8003706:	4875      	ldr	r0, [pc, #468]	; (80038dc <GrandState_Verita+0xdf4>)
 8003708:	f00a f8a4 	bl	800d854 <siprintf>
 800370c:	4b72      	ldr	r3, [pc, #456]	; (80038d8 <GrandState_Verita+0xdf0>)
 800370e:	2200      	movs	r2, #0
 8003710:	9202      	str	r2, [sp, #8]
 8003712:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003716:	9201      	str	r2, [sp, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	9200      	str	r2, [sp, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6f      	ldr	r2, [pc, #444]	; (80038dc <GrandState_Verita+0xdf4>)
 8003720:	2196      	movs	r1, #150	; 0x96
 8003722:	20dc      	movs	r0, #220	; 0xdc
 8003724:	f002 fcad 	bl	8006082 <ili9341_WriteString>
			hwscor.pImcu = 0;
 8003728:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <GrandState_Verita+0xe00>)
 800372a:	2200      	movs	r2, #0
 800372c:	711a      	strb	r2, [r3, #4]
 800372e:	e07a      	b.n	8003826 <GrandState_Verita+0xd3e>
		}else if (inata.CURRENT <= 3) {
 8003730:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <GrandState_Verita+0xe04>)
 8003732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003736:	2b03      	cmp	r3, #3
 8003738:	dc49      	bgt.n	80037ce <GrandState_Verita+0xce6>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 800373a:	4b67      	ldr	r3, [pc, #412]	; (80038d8 <GrandState_Verita+0xdf0>)
 800373c:	2200      	movs	r2, #0
 800373e:	9202      	str	r2, [sp, #8]
 8003740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003744:	9201      	str	r2, [sp, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	9200      	str	r2, [sp, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a63      	ldr	r2, [pc, #396]	; (80038dc <GrandState_Verita+0xdf4>)
 800374e:	2196      	movs	r1, #150	; 0x96
 8003750:	2064      	movs	r0, #100	; 0x64
 8003752:	f002 fc96 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"N/A"); ili9341_WriteString(220, 150, TextDispBuffer, Font20, cl_ORANGE, cl_BLACK);
 8003756:	4962      	ldr	r1, [pc, #392]	; (80038e0 <GrandState_Verita+0xdf8>)
 8003758:	4860      	ldr	r0, [pc, #384]	; (80038dc <GrandState_Verita+0xdf4>)
 800375a:	f00a f87b 	bl	800d854 <siprintf>
 800375e:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <GrandState_Verita+0xdf0>)
 8003760:	2200      	movs	r2, #0
 8003762:	9202      	str	r2, [sp, #8]
 8003764:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003768:	9201      	str	r2, [sp, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	9200      	str	r2, [sp, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a5a      	ldr	r2, [pc, #360]	; (80038dc <GrandState_Verita+0xdf4>)
 8003772:	2196      	movs	r1, #150	; 0x96
 8003774:	20dc      	movs	r0, #220	; 0xdc
 8003776:	f002 fc84 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"Unplug"); ili9341_WriteString(275, 145, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 800377a:	495f      	ldr	r1, [pc, #380]	; (80038f8 <GrandState_Verita+0xe10>)
 800377c:	4857      	ldr	r0, [pc, #348]	; (80038dc <GrandState_Verita+0xdf4>)
 800377e:	f00a f869 	bl	800d854 <siprintf>
 8003782:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <GrandState_Verita+0xe14>)
 8003784:	2200      	movs	r2, #0
 8003786:	9202      	str	r2, [sp, #8]
 8003788:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 800378c:	9201      	str	r2, [sp, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	9200      	str	r2, [sp, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a51      	ldr	r2, [pc, #324]	; (80038dc <GrandState_Verita+0xdf4>)
 8003796:	2191      	movs	r1, #145	; 0x91
 8003798:	f240 1013 	movw	r0, #275	; 0x113
 800379c:	f002 fc71 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"JP6?"); ili9341_WriteString(275, 157, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 80037a0:	4957      	ldr	r1, [pc, #348]	; (8003900 <GrandState_Verita+0xe18>)
 80037a2:	484e      	ldr	r0, [pc, #312]	; (80038dc <GrandState_Verita+0xdf4>)
 80037a4:	f00a f856 	bl	800d854 <siprintf>
 80037a8:	4b54      	ldr	r3, [pc, #336]	; (80038fc <GrandState_Verita+0xe14>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	9202      	str	r2, [sp, #8]
 80037ae:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 80037b2:	9201      	str	r2, [sp, #4]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	9200      	str	r2, [sp, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a48      	ldr	r2, [pc, #288]	; (80038dc <GrandState_Verita+0xdf4>)
 80037bc:	219d      	movs	r1, #157	; 0x9d
 80037be:	f240 1013 	movw	r0, #275	; 0x113
 80037c2:	f002 fc5e 	bl	8006082 <ili9341_WriteString>
			hwscor.pImcu = 0;
 80037c6:	4b48      	ldr	r3, [pc, #288]	; (80038e8 <GrandState_Verita+0xe00>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	711a      	strb	r2, [r3, #4]
 80037cc:	e02b      	b.n	8003826 <GrandState_Verita+0xd3e>
		}else{
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80037ce:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <GrandState_Verita+0xdf0>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	9202      	str	r2, [sp, #8]
 80037d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d8:	9201      	str	r2, [sp, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	9200      	str	r2, [sp, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3e      	ldr	r2, [pc, #248]	; (80038dc <GrandState_Verita+0xdf4>)
 80037e2:	2196      	movs	r1, #150	; 0x96
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	f002 fc4c 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 150, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 80037ea:	493e      	ldr	r1, [pc, #248]	; (80038e4 <GrandState_Verita+0xdfc>)
 80037ec:	483b      	ldr	r0, [pc, #236]	; (80038dc <GrandState_Verita+0xdf4>)
 80037ee:	f00a f831 	bl	800d854 <siprintf>
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <GrandState_Verita+0xdf0>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	9202      	str	r2, [sp, #8]
 80037f8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80037fc:	9201      	str	r2, [sp, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	; (80038dc <GrandState_Verita+0xdf4>)
 8003806:	2196      	movs	r1, #150	; 0x96
 8003808:	20dc      	movs	r0, #220	; 0xdc
 800380a:	f002 fc3a 	bl	8006082 <ili9341_WriteString>
			ili9341_FillRect(275, 140, 45, 30, cl_BLACK);
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	231e      	movs	r3, #30
 8003814:	222d      	movs	r2, #45	; 0x2d
 8003816:	218c      	movs	r1, #140	; 0x8c
 8003818:	f240 1013 	movw	r0, #275	; 0x113
 800381c:	f002 fa88 	bl	8005d30 <ili9341_FillRect>
			hwscor.pImcu = 1;
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <GrandState_Verita+0xe00>)
 8003822:	2201      	movs	r2, #1
 8003824:	711a      	strb	r2, [r3, #4]
		}


		sprintf(TextDispBuffer,"<-Back");
 8003826:	4937      	ldr	r1, [pc, #220]	; (8003904 <GrandState_Verita+0xe1c>)
 8003828:	482c      	ldr	r0, [pc, #176]	; (80038dc <GrandState_Verita+0xdf4>)
 800382a:	f00a f813 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <GrandState_Verita+0xe20>)
 8003830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003834:	9201      	str	r2, [sp, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <GrandState_Verita+0xdf4>)
 800383e:	21dc      	movs	r1, #220	; 0xdc
 8003840:	201e      	movs	r0, #30
 8003842:	f002 fc6b 	bl	800611c <ili9341_WriteStringNoBG>
			 * 		if pressed or 3 sec pass -> go bootloader
			 * else force back lobby & turnoff relay.
			 * */

		//// wait for MCU Booting
		if(HAL_GetTick() >= gScr.timelog){
 8003846:	f003 f8f5 	bl	8006a34 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	4b2f      	ldr	r3, [pc, #188]	; (800390c <GrandState_Verita+0xe24>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	f0c0 80be 	bcc.w	80039d2 <GrandState_Verita+0xeea>

			//// All pass
			if(hwscor.p3V3 + hwscor.p3VSTL + hwscor.pIbrd + hwscor.pImcu + hwscor.p5V >= 5){
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <GrandState_Verita+0xe00>)
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	461a      	mov	r2, r3
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <GrandState_Verita+0xe00>)
 800385e:	789b      	ldrb	r3, [r3, #2]
 8003860:	4413      	add	r3, r2
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <GrandState_Verita+0xe00>)
 8003864:	78d2      	ldrb	r2, [r2, #3]
 8003866:	4413      	add	r3, r2
 8003868:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <GrandState_Verita+0xe00>)
 800386a:	7912      	ldrb	r2, [r2, #4]
 800386c:	4413      	add	r3, r2
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <GrandState_Verita+0xe00>)
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	4413      	add	r3, r2
 8003874:	2b04      	cmp	r3, #4
 8003876:	dd4f      	ble.n	8003918 <GrandState_Verita+0xe30>
				hwscor.ptime_scores++;
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <GrandState_Verita+0xe00>)
 800387a:	795b      	ldrb	r3, [r3, #5]
 800387c:	3301      	adds	r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <GrandState_Verita+0xe00>)
 8003882:	715a      	strb	r2, [r3, #5]
				//// make sure All really pass continuously
				if(hwscor.ptime_scores >= 2){
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <GrandState_Verita+0xe00>)
 8003886:	795b      	ldrb	r3, [r3, #5]
 8003888:	2b01      	cmp	r3, #1
 800388a:	f240 80a2 	bls.w	80039d2 <GrandState_Verita+0xeea>
					hwscor.ptime_scores = 0;
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <GrandState_Verita+0xe00>)
 8003890:	2200      	movs	r2, #0
 8003892:	715a      	strb	r2, [r3, #5]

					sprintf(TextDispBuffer,"ALL PASS"); ili9341_WriteString(220, 170, TextDispBuffer, Font16, cl_BLUE, cl_GREEN);
 8003894:	491e      	ldr	r1, [pc, #120]	; (8003910 <GrandState_Verita+0xe28>)
 8003896:	4811      	ldr	r0, [pc, #68]	; (80038dc <GrandState_Verita+0xdf4>)
 8003898:	f009 ffdc 	bl	800d854 <siprintf>
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <GrandState_Verita+0xe20>)
 800389e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80038a2:	9202      	str	r2, [sp, #8]
 80038a4:	221f      	movs	r2, #31
 80038a6:	9201      	str	r2, [sp, #4]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	9200      	str	r2, [sp, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <GrandState_Verita+0xdf4>)
 80038b0:	21aa      	movs	r1, #170	; 0xaa
 80038b2:	20dc      	movs	r0, #220	; 0xdc
 80038b4:	f002 fbe5 	bl	8006082 <ili9341_WriteString>
					HAL_Delay(500);
 80038b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038bc:	f003 f8c6 	bl	8006a4c <HAL_Delay>
					if(gScr.fullflag == ff_runfull){
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <GrandState_Verita+0xe24>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	f040 8084 	bne.w	80039d2 <GrandState_Verita+0xeea>
						//GrandState = pre_bootloader;
						GrandState = pre_fw_erase;
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <GrandState_Verita+0xe2c>)
 80038cc:	2207      	movs	r2, #7
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e07f      	b.n	80039d2 <GrandState_Verita+0xeea>
 80038d2:	bf00      	nop
 80038d4:	20000810 	.word	0x20000810
 80038d8:	20000238 	.word	0x20000238
 80038dc:	200006b8 	.word	0x200006b8
 80038e0:	08010048 	.word	0x08010048
 80038e4:	08010040 	.word	0x08010040
 80038e8:	200008a0 	.word	0x200008a0
 80038ec:	200007f8 	.word	0x200007f8
 80038f0:	08010034 	.word	0x08010034
 80038f4:	08010038 	.word	0x08010038
 80038f8:	0801004c 	.word	0x0801004c
 80038fc:	20000228 	.word	0x20000228
 8003900:	08010054 	.word	0x08010054
 8003904:	0800ffb8 	.word	0x0800ffb8
 8003908:	20000230 	.word	0x20000230
 800390c:	20000894 	.word	0x20000894
 8003910:	0801005c 	.word	0x0801005c
 8003914:	20000006 	.word	0x20000006
				}
			}
			//// Atleast fail
			else{

				hwscor.ptime_scores = 0;
 8003918:	4b9f      	ldr	r3, [pc, #636]	; (8003b98 <GrandState_Verita+0x10b0>)
 800391a:	2200      	movs	r2, #0
 800391c:	715a      	strb	r2, [r3, #5]

				if(inatb.CURRENT - inata.CURRENT >= 150 && inatb.CURRENT >= Current_treash_mA){
 800391e:	4b9f      	ldr	r3, [pc, #636]	; (8003b9c <GrandState_Verita+0x10b4>)
 8003920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003924:	461a      	mov	r2, r3
 8003926:	4b9e      	ldr	r3, [pc, #632]	; (8003ba0 <GrandState_Verita+0x10b8>)
 8003928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b95      	cmp	r3, #149	; 0x95
 8003930:	dd16      	ble.n	8003960 <GrandState_Verita+0xe78>
 8003932:	4b9a      	ldr	r3, [pc, #616]	; (8003b9c <GrandState_Verita+0x10b4>)
 8003934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003938:	2bf9      	cmp	r3, #249	; 0xf9
 800393a:	dd11      	ble.n	8003960 <GrandState_Verita+0xe78>
				//// board current bad
				sprintf(TextDispBuffer,"Board Bad"); ili9341_WriteString(110, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 800393c:	4999      	ldr	r1, [pc, #612]	; (8003ba4 <GrandState_Verita+0x10bc>)
 800393e:	489a      	ldr	r0, [pc, #616]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003940:	f009 ff88 	bl	800d854 <siprintf>
 8003944:	4b99      	ldr	r3, [pc, #612]	; (8003bac <GrandState_Verita+0x10c4>)
 8003946:	2200      	movs	r2, #0
 8003948:	9202      	str	r2, [sp, #8]
 800394a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	9200      	str	r2, [sp, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a94      	ldr	r2, [pc, #592]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003958:	21b4      	movs	r1, #180	; 0xb4
 800395a:	206e      	movs	r0, #110	; 0x6e
 800395c:	f002 fb91 	bl	8006082 <ili9341_WriteString>
				}
				if(inata.CURRENT >= Current_treash_mA){
 8003960:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <GrandState_Verita+0x10b8>)
 8003962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003966:	2bf9      	cmp	r3, #249	; 0xf9
 8003968:	dd11      	ble.n	800398e <GrandState_Verita+0xea6>
				//// Bad MCU
				sprintf(TextDispBuffer,"MCU Bad"); ili9341_WriteString(20, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 800396a:	4991      	ldr	r1, [pc, #580]	; (8003bb0 <GrandState_Verita+0x10c8>)
 800396c:	488e      	ldr	r0, [pc, #568]	; (8003ba8 <GrandState_Verita+0x10c0>)
 800396e:	f009 ff71 	bl	800d854 <siprintf>
 8003972:	4b8e      	ldr	r3, [pc, #568]	; (8003bac <GrandState_Verita+0x10c4>)
 8003974:	2200      	movs	r2, #0
 8003976:	9202      	str	r2, [sp, #8]
 8003978:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800397c:	9201      	str	r2, [sp, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	9200      	str	r2, [sp, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a88      	ldr	r2, [pc, #544]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003986:	21b4      	movs	r1, #180	; 0xb4
 8003988:	2014      	movs	r0, #20
 800398a:	f002 fb7a 	bl	8006082 <ili9341_WriteString>
				}

				sprintf(TextDispBuffer,"Unplug Client & Press back to lobby"); ili9341_WriteString(20, 205, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 800398e:	4989      	ldr	r1, [pc, #548]	; (8003bb4 <GrandState_Verita+0x10cc>)
 8003990:	4885      	ldr	r0, [pc, #532]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003992:	f009 ff5f 	bl	800d854 <siprintf>
 8003996:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <GrandState_Verita+0x10d0>)
 8003998:	2200      	movs	r2, #0
 800399a:	9202      	str	r2, [sp, #8]
 800399c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80039a0:	9201      	str	r2, [sp, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	9200      	str	r2, [sp, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a7f      	ldr	r2, [pc, #508]	; (8003ba8 <GrandState_Verita+0x10c0>)
 80039aa:	21cd      	movs	r1, #205	; 0xcd
 80039ac:	2014      	movs	r0, #20
 80039ae:	f002 fb68 	bl	8006082 <ili9341_WriteString>
				if(k_flag.cnt){
 80039b2:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <GrandState_Verita+0x10d4>)
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <GrandState_Verita+0xeea>
				k_flag.cnt = 0;
 80039ba:	4b80      	ldr	r3, [pc, #512]	; (8003bbc <GrandState_Verita+0x10d4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039c6:	487e      	ldr	r0, [pc, #504]	; (8003bc0 <GrandState_Verita+0x10d8>)
 80039c8:	f003 ff22 	bl	8007810 <HAL_GPIO_WritePin>
				GrandState = pre_lobby;
 80039cc:	4b7d      	ldr	r3, [pc, #500]	; (8003bc4 <GrandState_Verita+0x10dc>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
				}
			}

		}//// haltimelog

		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 80039d2:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <GrandState_Verita+0x10d4>)
 80039d4:	789b      	ldrb	r3, [r3, #2]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f001 8288 	beq.w	8004eec <GrandState_Verita+0x2404>
 80039dc:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <GrandState_Verita+0x10e0>)
 80039de:	789b      	ldrb	r3, [r3, #2]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f041 8283 	bne.w	8004eec <GrandState_Verita+0x2404>
			GrandState = pre_lobby;
 80039e6:	4b77      	ldr	r3, [pc, #476]	; (8003bc4 <GrandState_Verita+0x10dc>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 80039ec:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <GrandState_Verita+0x10d4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	709a      	strb	r2, [r3, #2]
			gScr.fullflag = 0;
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <GrandState_Verita+0x10e4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80039f8:	2200      	movs	r2, #0
 80039fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039fe:	4870      	ldr	r0, [pc, #448]	; (8003bc0 <GrandState_Verita+0x10d8>)
 8003a00:	f003 ff06 	bl	8007810 <HAL_GPIO_WritePin>
		}

		break; //hw_chk
 8003a04:	f001 ba72 	b.w	8004eec <GrandState_Verita+0x2404>

	case pre_bootloader:
		stboxp.choice_set = bpoxy_no;
 8003a08:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <GrandState_Verita+0x10e0>)
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	705a      	strb	r2, [r3, #1]

		ili9341_FillRect(0, 0, 320, 30, cl_YELLOW);
 8003a0e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	231e      	movs	r3, #30
 8003a16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f002 f987 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003a22:	2300      	movs	r3, #0
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	23d2      	movs	r3, #210	; 0xd2
 8003a28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a2c:	211e      	movs	r1, #30
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f002 f97e 	bl	8005d30 <ili9341_FillRect>

		sprintf(TextDispBuffer,"- BOOTLOADER -");
 8003a34:	4966      	ldr	r1, [pc, #408]	; (8003bd0 <GrandState_Verita+0x10e8>)
 8003a36:	485c      	ldr	r0, [pc, #368]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003a38:	f009 ff0c 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_BLACK);
 8003a3c:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <GrandState_Verita+0x10ec>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a57      	ldr	r2, [pc, #348]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003a4a:	2105      	movs	r1, #5
 8003a4c:	203c      	movs	r0, #60	; 0x3c
 8003a4e:	f002 fb65 	bl	800611c <ili9341_WriteStringNoBG>

		if(gScr.fullflag == ff_runfull){
 8003a52:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <GrandState_Verita+0x10e4>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d112      	bne.n	8003a80 <GrandState_Verita+0xf98>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003a5a:	495f      	ldr	r1, [pc, #380]	; (8003bd8 <GrandState_Verita+0x10f0>)
 8003a5c:	4852      	ldr	r0, [pc, #328]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003a5e:	f009 fef9 	bl	800d854 <siprintf>
 8003a62:	4b5c      	ldr	r3, [pc, #368]	; (8003bd4 <GrandState_Verita+0x10ec>)
 8003a64:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003a68:	9202      	str	r2, [sp, #8]
 8003a6a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a6e:	9201      	str	r2, [sp, #4]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	9200      	str	r2, [sp, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a4c      	ldr	r2, [pc, #304]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003a78:	2105      	movs	r1, #5
 8003a7a:	20fa      	movs	r0, #250	; 0xfa
 8003a7c:	f002 fb01 	bl	8006082 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer," .bin script is booting...");
 8003a80:	4956      	ldr	r1, [pc, #344]	; (8003bdc <GrandState_Verita+0x10f4>)
 8003a82:	4849      	ldr	r0, [pc, #292]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003a84:	f009 fee6 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 60, TextDispBuffer, Font16, cl_WHITE);
 8003a88:	4b48      	ldr	r3, [pc, #288]	; (8003bac <GrandState_Verita+0x10c4>)
 8003a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8e:	9201      	str	r2, [sp, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003a98:	213c      	movs	r1, #60	; 0x3c
 8003a9a:	2014      	movs	r0, #20
 8003a9c:	f002 fb3e 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware ver: %08X", client_bin_Ver);
 8003aa0:	4a4f      	ldr	r2, [pc, #316]	; (8003be0 <GrandState_Verita+0x10f8>)
 8003aa2:	4950      	ldr	r1, [pc, #320]	; (8003be4 <GrandState_Verita+0x10fc>)
 8003aa4:	4840      	ldr	r0, [pc, #256]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003aa6:	f009 fed5 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(40, 80, TextDispBuffer, Font16, cl_DARKGREY);
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <GrandState_Verita+0x10c4>)
 8003aac:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8003ab0:	9201      	str	r2, [sp, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003aba:	2150      	movs	r1, #80	; 0x50
 8003abc:	2028      	movs	r0, #40	; 0x28
 8003abe:	f002 fb2d 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Don't pluck  off");
 8003ac2:	4949      	ldr	r1, [pc, #292]	; (8003be8 <GrandState_Verita+0x1100>)
 8003ac4:	4838      	ldr	r0, [pc, #224]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003ac6:	f009 fec5 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(40, 110, TextDispBuffer, Font20, cl_WHITE);
 8003aca:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <GrandState_Verita+0x10ec>)
 8003acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad0:	9201      	str	r2, [sp, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	9200      	str	r2, [sp, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a33      	ldr	r2, [pc, #204]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003ada:	216e      	movs	r1, #110	; 0x6e
 8003adc:	2028      	movs	r0, #40	; 0x28
 8003ade:	f002 fb1d 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"the client board");
 8003ae2:	4942      	ldr	r1, [pc, #264]	; (8003bec <GrandState_Verita+0x1104>)
 8003ae4:	4830      	ldr	r0, [pc, #192]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003ae6:	f009 feb5 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(40, 135, TextDispBuffer, Font20, cl_ORANGE);
 8003aea:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <GrandState_Verita+0x10ec>)
 8003aec:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003af0:	9201      	str	r2, [sp, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	9200      	str	r2, [sp, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <GrandState_Verita+0x10c0>)
 8003afa:	2187      	movs	r1, #135	; 0x87
 8003afc:	2028      	movs	r0, #40	; 0x28
 8003afe:	f002 fb0d 	bl	800611c <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <GrandState_Verita+0x10d4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	709a      	strb	r2, [r3, #2]
		GrandState = s_bootloader;
 8003b08:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <GrandState_Verita+0x10dc>)
 8003b0a:	220a      	movs	r2, #10
 8003b0c:	701a      	strb	r2, [r3, #0]
		//GrandState = pnd_bootloader; gScr.timelog = HAL_GetTick() + 3500;
		break; // pre_bootloader
 8003b0e:	f001 b9fc 	b.w	8004f0a <GrandState_Verita+0x2422>

	case pnd_bootloader:
		//// -- Open Client make sure ----
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003b12:	2201      	movs	r2, #1
 8003b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b18:	4829      	ldr	r0, [pc, #164]	; (8003bc0 <GrandState_Verita+0x10d8>)
 8003b1a:	f003 fe79 	bl	8007810 <HAL_GPIO_WritePin>

		if(HAL_GetTick() >= gScr.timelog){
 8003b1e:	f002 ff89 	bl	8006a34 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <GrandState_Verita+0x10e4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	f0c1 81e1 	bcc.w	8004ef0 <GrandState_Verita+0x2408>
			GrandState = s_bootloader;
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <GrandState_Verita+0x10dc>)
 8003b30:	220a      	movs	r2, #10
 8003b32:	701a      	strb	r2, [r3, #0]
		}
		
		break;
 8003b34:	f001 b9dc 	b.w	8004ef0 <GrandState_Verita+0x2408>

	case s_bootloader:
		stboxp.choice_set = bpoxy_def;
 8003b38:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <GrandState_Verita+0x10e0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	705a      	strb	r2, [r3, #1]

		//// -- Open Client make sure ----
		if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 8003b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b42:	481f      	ldr	r0, [pc, #124]	; (8003bc0 <GrandState_Verita+0x10d8>)
 8003b44:	f003 fe4c 	bl	80077e0 <HAL_GPIO_ReadPin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <GrandState_Verita+0x106e>
			HAL_Delay(150);
 8003b4e:	2096      	movs	r0, #150	; 0x96
 8003b50:	f002 ff7c 	bl	8006a4c <HAL_Delay>
 8003b54:	e009      	b.n	8003b6a <GrandState_Verita+0x1082>
		}else{
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003b56:	2201      	movs	r2, #1
 8003b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b5c:	4818      	ldr	r0, [pc, #96]	; (8003bc0 <GrandState_Verita+0x10d8>)
 8003b5e:	f003 fe57 	bl	8007810 <HAL_GPIO_WritePin>
			HAL_Delay(3500);
 8003b62:	f640 50ac 	movw	r0, #3500	; 0xdac
 8003b66:	f002 ff71 	bl	8006a4c <HAL_Delay>

		//// enable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_activate();

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <GrandState_Verita+0x1108>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <GrandState_Verita+0x1108>)
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	2a00      	cmp	r2, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2201      	movne	r2, #1
 8003b82:	2200      	moveq	r2, #0
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	4413      	add	r3, r2
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <GrandState_Verita+0x110c>)
 8003b8c:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8003b8e:	481a      	ldr	r0, [pc, #104]	; (8003bf8 <GrandState_Verita+0x1110>)
 8003b90:	f7fd fd8a 	bl	80016a8 <BL_UART_Start>
			//blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);


		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003b94:	2400      	movs	r4, #0
 8003b96:	e089      	b.n	8003cac <GrandState_Verita+0x11c4>
 8003b98:	200008a0 	.word	0x200008a0
 8003b9c:	20000810 	.word	0x20000810
 8003ba0:	200007f8 	.word	0x200007f8
 8003ba4:	08010068 	.word	0x08010068
 8003ba8:	200006b8 	.word	0x200006b8
 8003bac:	20000230 	.word	0x20000230
 8003bb0:	08010074 	.word	0x08010074
 8003bb4:	0801007c 	.word	0x0801007c
 8003bb8:	20000228 	.word	0x20000228
 8003bbc:	20000890 	.word	0x20000890
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	20000006 	.word	0x20000006
 8003bc8:	200008ac 	.word	0x200008ac
 8003bcc:	20000894 	.word	0x20000894
 8003bd0:	080100a0 	.word	0x080100a0
 8003bd4:	20000238 	.word	0x20000238
 8003bd8:	0800ffc0 	.word	0x0800ffc0
 8003bdc:	080100b0 	.word	0x080100b0
 8003be0:	07010523 	.word	0x07010523
 8003be4:	080100cc 	.word	0x080100cc
 8003be8:	080100e0 	.word	0x080100e0
 8003bec:	080100f4 	.word	0x080100f4
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	20000780 	.word	0x20000780
 8003bf8:	2000058c 	.word	0x2000058c
			blrespo = BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8003bfc:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	4619      	mov	r1, r3
 8003c04:	0223      	lsls	r3, r4, #8
 8003c06:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <GrandState_Verita+0x127c>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	4856      	ldr	r0, [pc, #344]	; (8003d68 <GrandState_Verita+0x1280>)
 8003c0e:	f7fd fd99 	bl	8001744 <BL_UART_WriteMem>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <GrandState_Verita+0x1284>)
 8003c18:	701a      	strb	r2, [r3, #0]
			//// display ---------------
			if(blrespo == UB_ACK){
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <GrandState_Verita+0x1284>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b79      	cmp	r3, #121	; 0x79
 8003c20:	d112      	bne.n	8003c48 <GrandState_Verita+0x1160>
				sprintf(TextDispBuffer,"Wr");
 8003c22:	4953      	ldr	r1, [pc, #332]	; (8003d70 <GrandState_Verita+0x1288>)
 8003c24:	4853      	ldr	r0, [pc, #332]	; (8003d74 <GrandState_Verita+0x128c>)
 8003c26:	f009 fe15 	bl	800d854 <siprintf>
				ili9341_WriteString(40, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8003c2a:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <GrandState_Verita+0x1290>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	9202      	str	r2, [sp, #8]
 8003c30:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003c34:	9201      	str	r2, [sp, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <GrandState_Verita+0x128c>)
 8003c3e:	21b4      	movs	r1, #180	; 0xb4
 8003c40:	2028      	movs	r0, #40	; 0x28
 8003c42:	f002 fa1e 	bl	8006082 <ili9341_WriteString>
 8003c46:	e028      	b.n	8003c9a <GrandState_Verita+0x11b2>
			}else if(blrespo == UB_NACK){
 8003c48:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <GrandState_Verita+0x1284>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b1f      	cmp	r3, #31
 8003c4e:	d112      	bne.n	8003c76 <GrandState_Verita+0x118e>
				sprintf(TextDispBuffer,"B");
 8003c50:	494a      	ldr	r1, [pc, #296]	; (8003d7c <GrandState_Verita+0x1294>)
 8003c52:	4848      	ldr	r0, [pc, #288]	; (8003d74 <GrandState_Verita+0x128c>)
 8003c54:	f009 fdfe 	bl	800d854 <siprintf>
				ili9341_WriteString(40, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8003c58:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <GrandState_Verita+0x1290>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	9202      	str	r2, [sp, #8]
 8003c5e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <GrandState_Verita+0x128c>)
 8003c6c:	21b4      	movs	r1, #180	; 0xb4
 8003c6e:	2028      	movs	r0, #40	; 0x28
 8003c70:	f002 fa07 	bl	8006082 <ili9341_WriteString>
 8003c74:	e011      	b.n	8003c9a <GrandState_Verita+0x11b2>
			}
			else{
				sprintf(TextDispBuffer,"-");
 8003c76:	4942      	ldr	r1, [pc, #264]	; (8003d80 <GrandState_Verita+0x1298>)
 8003c78:	483e      	ldr	r0, [pc, #248]	; (8003d74 <GrandState_Verita+0x128c>)
 8003c7a:	f009 fdeb 	bl	800d854 <siprintf>
				ili9341_WriteString(40, 180, TextDispBuffer, Font16, cl_GRAY, cl_BLACK);
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <GrandState_Verita+0x1290>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	f645 22eb 	movw	r2, #23275	; 0x5aeb
 8003c88:	9201      	str	r2, [sp, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	9200      	str	r2, [sp, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a38      	ldr	r2, [pc, #224]	; (8003d74 <GrandState_Verita+0x128c>)
 8003c92:	21b4      	movs	r1, #180	; 0xb4
 8003c94:	2028      	movs	r0, #40	; 0x28
 8003c96:	f002 f9f4 	bl	8006082 <ili9341_WriteString>
			}
			ili9341_FillRect(40, 180, 15, 30, cl_BLACK);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	231e      	movs	r3, #30
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	21b4      	movs	r1, #180	; 0xb4
 8003ca4:	2028      	movs	r0, #40	; 0x28
 8003ca6:	f002 f843 	bl	8005d30 <ili9341_FillRect>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003caa:	3401      	adds	r4, #1
 8003cac:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <GrandState_Verita+0x129c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	dba2      	blt.n	8003bfc <GrandState_Verita+0x1114>
			//// display ---------------
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8003cb6:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <GrandState_Verita+0x129c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8003cbe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <GrandState_Verita+0x12a0>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <GrandState_Verita+0x129c>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	4923      	ldr	r1, [pc, #140]	; (8003d64 <GrandState_Verita+0x127c>)
 8003cd6:	440b      	add	r3, r1
 8003cd8:	4601      	mov	r1, r0
 8003cda:	4823      	ldr	r0, [pc, #140]	; (8003d68 <GrandState_Verita+0x1280>)
 8003cdc:	f7fd fd32 	bl	8001744 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8003ce0:	f7fd fd12 	bl	8001708 <BL_UART_Finish>
//		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
//		HAL_Delay(1000);
		//// Hard reset--------


		sprintf(TextDispBuffer,"Finish");
 8003ce4:	4929      	ldr	r1, [pc, #164]	; (8003d8c <GrandState_Verita+0x12a4>)
 8003ce6:	4823      	ldr	r0, [pc, #140]	; (8003d74 <GrandState_Verita+0x128c>)
 8003ce8:	f009 fdb4 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(140, 160, TextDispBuffer, Font24, cl_GREEN);
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <GrandState_Verita+0x12a8>)
 8003cee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003cf2:	9201      	str	r2, [sp, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	9200      	str	r2, [sp, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <GrandState_Verita+0x128c>)
 8003cfc:	21a0      	movs	r1, #160	; 0xa0
 8003cfe:	208c      	movs	r0, #140	; 0x8c
 8003d00:	f002 fa0c 	bl	800611c <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d08:	f002 fea0 	bl	8006a4c <HAL_Delay>

		sprintf(TextDispBuffer,"Start");
 8003d0c:	4921      	ldr	r1, [pc, #132]	; (8003d94 <GrandState_Verita+0x12ac>)
 8003d0e:	4819      	ldr	r0, [pc, #100]	; (8003d74 <GrandState_Verita+0x128c>)
 8003d10:	f009 fda0 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(140, 190, TextDispBuffer, Font24, cl_GREEN);
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <GrandState_Verita+0x12a8>)
 8003d16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	9200      	str	r2, [sp, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <GrandState_Verita+0x128c>)
 8003d24:	21be      	movs	r1, #190	; 0xbe
 8003d26:	208c      	movs	r0, #140	; 0x8c
 8003d28:	f002 f9f8 	bl	800611c <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d30:	f002 fe8c 	bl	8006a4c <HAL_Delay>

		//// disable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_Deactivate();

		k_flag.cnt = 0;//// prevent over state jump
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <GrandState_Verita+0x12b0>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	709a      	strb	r2, [r3, #2]
		if(gScr.fullflag == ff_runfull){
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <GrandState_Verita+0x12b4>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d10b      	bne.n	8003d5a <GrandState_Verita+0x1272>
			GrandState = pre_gpio_chk;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <GrandState_Verita+0x12b8>)
 8003d44:	220d      	movs	r2, #13
 8003d46:	701a      	strb	r2, [r3, #0]
			//// wait for gpio_chk before tomeout ////
			gScr.timelog = HAL_GetTick() + 3500;
 8003d48:	f002 fe74 	bl	8006a34 <HAL_GetTick>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <GrandState_Verita+0x12b4>)
 8003d54:	6053      	str	r3, [r2, #4]
		}else{
			GrandState = pre_fw_lob;
		}

		break; ////s_bootloader
 8003d56:	f001 b8d8 	b.w	8004f0a <GrandState_Verita+0x2422>
			GrandState = pre_fw_lob;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <GrandState_Verita+0x12b8>)
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	701a      	strb	r2, [r3, #0]
		break; ////s_bootloader
 8003d60:	f001 b8d3 	b.w	8004f0a <GrandState_Verita+0x2422>
 8003d64:	08030160 	.word	0x08030160
 8003d68:	2000058c 	.word	0x2000058c
 8003d6c:	20000781 	.word	0x20000781
 8003d70:	08010108 	.word	0x08010108
 8003d74:	200006b8 	.word	0x200006b8
 8003d78:	20000230 	.word	0x20000230
 8003d7c:	0801010c 	.word	0x0801010c
 8003d80:	08010110 	.word	0x08010110
 8003d84:	20000780 	.word	0x20000780
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	08010114 	.word	0x08010114
 8003d90:	20000240 	.word	0x20000240
 8003d94:	0801011c 	.word	0x0801011c
 8003d98:	20000890 	.word	0x20000890
 8003d9c:	20000894 	.word	0x20000894
 8003da0:	20000006 	.word	0x20000006

	case pre_gpio_chk:
			stboxp.choice_set = bpoxy_def;
 8003da4:	4bab      	ldr	r3, [pc, #684]	; (8004054 <GrandState_Verita+0x156c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	705a      	strb	r2, [r3, #1]
			//// Send CMD to client to run GPIO testscript
			Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8003daa:	2202      	movs	r2, #2
 8003dac:	21a1      	movs	r1, #161	; 0xa1
 8003dae:	48aa      	ldr	r0, [pc, #680]	; (8004058 <GrandState_Verita+0x1570>)
 8003db0:	f7fd fc3e 	bl	8001630 <Tx_UART_Verita_Command>

			//// Set UI
			ili9341_FillRect(0, 0, 320, 30, cl_DARKCYAN);
 8003db4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	231e      	movs	r3, #30
 8003dbc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f001 ffb4 	bl	8005d30 <ili9341_FillRect>
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	23d2      	movs	r3, #210	; 0xd2
 8003dce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dd2:	211e      	movs	r1, #30
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f001 ffab 	bl	8005d30 <ili9341_FillRect>

			sprintf(TextDispBuffer,"GPIO Selftest");
 8003dda:	49a0      	ldr	r1, [pc, #640]	; (800405c <GrandState_Verita+0x1574>)
 8003ddc:	48a0      	ldr	r0, [pc, #640]	; (8004060 <GrandState_Verita+0x1578>)
 8003dde:	f009 fd39 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8003de2:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <GrandState_Verita+0x157c>)
 8003de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de8:	9201      	str	r2, [sp, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	9200      	str	r2, [sp, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a9b      	ldr	r2, [pc, #620]	; (8004060 <GrandState_Verita+0x1578>)
 8003df2:	2105      	movs	r1, #5
 8003df4:	203c      	movs	r0, #60	; 0x3c
 8003df6:	f002 f991 	bl	800611c <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8003dfa:	4b9b      	ldr	r3, [pc, #620]	; (8004068 <GrandState_Verita+0x1580>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d112      	bne.n	8003e28 <GrandState_Verita+0x1340>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003e02:	499a      	ldr	r1, [pc, #616]	; (800406c <GrandState_Verita+0x1584>)
 8003e04:	4896      	ldr	r0, [pc, #600]	; (8004060 <GrandState_Verita+0x1578>)
 8003e06:	f009 fd25 	bl	800d854 <siprintf>
 8003e0a:	4b96      	ldr	r3, [pc, #600]	; (8004064 <GrandState_Verita+0x157c>)
 8003e0c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003e10:	9202      	str	r2, [sp, #8]
 8003e12:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003e16:	9201      	str	r2, [sp, #4]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	9200      	str	r2, [sp, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a90      	ldr	r2, [pc, #576]	; (8004060 <GrandState_Verita+0x1578>)
 8003e20:	2105      	movs	r1, #5
 8003e22:	20fa      	movs	r0, #250	; 0xfa
 8003e24:	f002 f92d 	bl	8006082 <ili9341_WriteString>
//			ili9341_WriteStringNoBG(15, 85, TextDispBuffer, Font20, cl_WHITE);
//
//			sprintf(TextDispBuffer,"OD:");
//			ili9341_WriteStringNoBG(15, 120, TextDispBuffer, Font20, cl_WHITE);

			sprintf(TextDispBuffer,"MCU Temp:");
 8003e28:	4991      	ldr	r1, [pc, #580]	; (8004070 <GrandState_Verita+0x1588>)
 8003e2a:	488d      	ldr	r0, [pc, #564]	; (8004060 <GrandState_Verita+0x1578>)
 8003e2c:	f009 fd12 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(250, 175, TextDispBuffer, Font12, cl_WHITE);
 8003e30:	4b90      	ldr	r3, [pc, #576]	; (8004074 <GrandState_Verita+0x158c>)
 8003e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e36:	9201      	str	r2, [sp, #4]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	9200      	str	r2, [sp, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a88      	ldr	r2, [pc, #544]	; (8004060 <GrandState_Verita+0x1578>)
 8003e40:	21af      	movs	r1, #175	; 0xaf
 8003e42:	20fa      	movs	r0, #250	; 0xfa
 8003e44:	f002 f96a 	bl	800611c <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"FWID:");
 8003e48:	498b      	ldr	r1, [pc, #556]	; (8004078 <GrandState_Verita+0x1590>)
 8003e4a:	4885      	ldr	r0, [pc, #532]	; (8004060 <GrandState_Verita+0x1578>)
 8003e4c:	f009 fd02 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(250, 210, TextDispBuffer, Font12, cl_WHITE);
 8003e50:	4b88      	ldr	r3, [pc, #544]	; (8004074 <GrandState_Verita+0x158c>)
 8003e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e56:	9201      	str	r2, [sp, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	9200      	str	r2, [sp, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a80      	ldr	r2, [pc, #512]	; (8004060 <GrandState_Verita+0x1578>)
 8003e60:	21d2      	movs	r1, #210	; 0xd2
 8003e62:	20fa      	movs	r0, #250	; 0xfa
 8003e64:	f002 f95a 	bl	800611c <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Finish >> ");
 8003e68:	4984      	ldr	r1, [pc, #528]	; (800407c <GrandState_Verita+0x1594>)
 8003e6a:	487d      	ldr	r0, [pc, #500]	; (8004060 <GrandState_Verita+0x1578>)
 8003e6c:	f009 fcf2 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_GREENYELLOW);
 8003e70:	4b83      	ldr	r3, [pc, #524]	; (8004080 <GrandState_Verita+0x1598>)
 8003e72:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8003e76:	9201      	str	r2, [sp, #4]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	9200      	str	r2, [sp, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a78      	ldr	r2, [pc, #480]	; (8004060 <GrandState_Verita+0x1578>)
 8003e80:	21dc      	movs	r1, #220	; 0xdc
 8003e82:	201e      	movs	r0, #30
 8003e84:	f002 f94a 	bl	800611c <ili9341_WriteStringNoBG>


			//// checkif GPIO test is finished ?  || HAL_GetTick() >= gScr.timelog
			if(VRB_CL.Mark.Flag_next){ // runalltest cplt
 8003e88:	4b7e      	ldr	r3, [pc, #504]	; (8004084 <GrandState_Verita+0x159c>)
 8003e8a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8153 	beq.w	800413a <GrandState_Verita+0x1652>
				Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_SendALLTestData);
 8003e94:	2204      	movs	r2, #4
 8003e96:	21a1      	movs	r1, #161	; 0xa1
 8003e98:	486f      	ldr	r0, [pc, #444]	; (8004058 <GrandState_Verita+0x1570>)
 8003e9a:	f7fd fbc9 	bl	8001630 <Tx_UART_Verita_Command>
				HAL_Delay(100);
 8003e9e:	2064      	movs	r0, #100	; 0x64
 8003ea0:	f002 fdd4 	bl	8006a4c <HAL_Delay>

				if(VRB_CL.Mark.Flag_ger == VRF_SendALLTestData){ //// 'll send this flag back after cplt
 8003ea4:	4b77      	ldr	r3, [pc, #476]	; (8004084 <GrandState_Verita+0x159c>)
 8003ea6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	f040 812a 	bne.w	8004104 <GrandState_Verita+0x161c>

					resetgpio_char();
 8003eb0:	f001 f8bc 	bl	800502c <resetgpio_char>

					Compare_pin_32(VRB_CL.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 8003eb4:	4b73      	ldr	r3, [pc, #460]	; (8004084 <GrandState_Verita+0x159c>)
 8003eb6:	6858      	ldr	r0, [r3, #4]
 8003eb8:	4b73      	ldr	r3, [pc, #460]	; (8004088 <GrandState_Verita+0x15a0>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4973      	ldr	r1, [pc, #460]	; (800408c <GrandState_Verita+0x15a4>)
 8003ebe:	f7fe fce1 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 8003ec2:	4b70      	ldr	r3, [pc, #448]	; (8004084 <GrandState_Verita+0x159c>)
 8003ec4:	6898      	ldr	r0, [r3, #8]
 8003ec6:	4b72      	ldr	r3, [pc, #456]	; (8004090 <GrandState_Verita+0x15a8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4970      	ldr	r1, [pc, #448]	; (800408c <GrandState_Verita+0x15a4>)
 8003ecc:	f7fe fcda 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 8003ed0:	4b6c      	ldr	r3, [pc, #432]	; (8004084 <GrandState_Verita+0x159c>)
 8003ed2:	68d8      	ldr	r0, [r3, #12]
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <GrandState_Verita+0x15ac>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	496c      	ldr	r1, [pc, #432]	; (800408c <GrandState_Verita+0x15a4>)
 8003eda:	f7fe fcd3 	bl	8002884 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8003ede:	4b69      	ldr	r3, [pc, #420]	; (8004084 <GrandState_Verita+0x159c>)
 8003ee0:	6918      	ldr	r0, [r3, #16]
 8003ee2:	4b6d      	ldr	r3, [pc, #436]	; (8004098 <GrandState_Verita+0x15b0>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	496d      	ldr	r1, [pc, #436]	; (800409c <GrandState_Verita+0x15b4>)
 8003ee8:	f7fe fccc 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8003eec:	4b65      	ldr	r3, [pc, #404]	; (8004084 <GrandState_Verita+0x159c>)
 8003eee:	6958      	ldr	r0, [r3, #20]
 8003ef0:	4b6b      	ldr	r3, [pc, #428]	; (80040a0 <GrandState_Verita+0x15b8>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4969      	ldr	r1, [pc, #420]	; (800409c <GrandState_Verita+0x15b4>)
 8003ef6:	f7fe fcc5 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 8003efa:	4b62      	ldr	r3, [pc, #392]	; (8004084 <GrandState_Verita+0x159c>)
 8003efc:	6998      	ldr	r0, [r3, #24]
 8003efe:	4b69      	ldr	r3, [pc, #420]	; (80040a4 <GrandState_Verita+0x15bc>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	4966      	ldr	r1, [pc, #408]	; (800409c <GrandState_Verita+0x15b4>)
 8003f04:	f7fe fcbe 	bl	8002884 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 8003f08:	4b5e      	ldr	r3, [pc, #376]	; (8004084 <GrandState_Verita+0x159c>)
 8003f0a:	69d8      	ldr	r0, [r3, #28]
 8003f0c:	4b66      	ldr	r3, [pc, #408]	; (80040a8 <GrandState_Verita+0x15c0>)
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4966      	ldr	r1, [pc, #408]	; (80040ac <GrandState_Verita+0x15c4>)
 8003f12:	f7fe fcb7 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8003f16:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <GrandState_Verita+0x159c>)
 8003f18:	6a18      	ldr	r0, [r3, #32]
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <GrandState_Verita+0x15c8>)
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4963      	ldr	r1, [pc, #396]	; (80040ac <GrandState_Verita+0x15c4>)
 8003f20:	f7fe fcb0 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8003f24:	4b57      	ldr	r3, [pc, #348]	; (8004084 <GrandState_Verita+0x159c>)
 8003f26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f28:	4b62      	ldr	r3, [pc, #392]	; (80040b4 <GrandState_Verita+0x15cc>)
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	495f      	ldr	r1, [pc, #380]	; (80040ac <GrandState_Verita+0x15c4>)
 8003f2e:	f7fe fca9 	bl	8002884 <Compare_pin_32>

					HAL_Delay(5);
 8003f32:	2005      	movs	r0, #5
 8003f34:	f002 fd8a 	bl	8006a4c <HAL_Delay>

					if(cnt_allpass >= 9){
 8003f38:	4b5f      	ldr	r3, [pc, #380]	; (80040b8 <GrandState_Verita+0x15d0>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d90f      	bls.n	8003f60 <GrandState_Verita+0x1478>
						  //// there're 9 pass
						  sprintf(TextDispBuffer, "ALL PASS");
 8003f40:	495e      	ldr	r1, [pc, #376]	; (80040bc <GrandState_Verita+0x15d4>)
 8003f42:	4847      	ldr	r0, [pc, #284]	; (8004060 <GrandState_Verita+0x1578>)
 8003f44:	f009 fc86 	bl	800d854 <siprintf>
						  ili9341_WriteStringNoBG(200, 100, TextDispBuffer, Font20, cl_GREEN);
 8003f48:	4b46      	ldr	r3, [pc, #280]	; (8004064 <GrandState_Verita+0x157c>)
 8003f4a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003f4e:	9201      	str	r2, [sp, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	9200      	str	r2, [sp, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a42      	ldr	r2, [pc, #264]	; (8004060 <GrandState_Verita+0x1578>)
 8003f58:	2164      	movs	r1, #100	; 0x64
 8003f5a:	20c8      	movs	r0, #200	; 0xc8
 8003f5c:	f002 f8de 	bl	800611c <ili9341_WriteStringNoBG>
					 }else{}

					 sprintf(TextDispBuffer, WR_A_PUPDR); ili9341_WriteStringNoBG(10, 35, TextDispBuffer, Font16, cl_WHITE);
 8003f60:	4949      	ldr	r1, [pc, #292]	; (8004088 <GrandState_Verita+0x15a0>)
 8003f62:	483f      	ldr	r0, [pc, #252]	; (8004060 <GrandState_Verita+0x1578>)
 8003f64:	f009 fc76 	bl	800d854 <siprintf>
 8003f68:	4b45      	ldr	r3, [pc, #276]	; (8004080 <GrandState_Verita+0x1598>)
 8003f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6e:	9201      	str	r2, [sp, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	9200      	str	r2, [sp, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <GrandState_Verita+0x1578>)
 8003f78:	2123      	movs	r1, #35	; 0x23
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	f002 f8ce 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_A_OPP); ili9341_WriteStringNoBG(10, 55, TextDispBuffer, Font16, cl_WHITE);
 8003f80:	4943      	ldr	r1, [pc, #268]	; (8004090 <GrandState_Verita+0x15a8>)
 8003f82:	4837      	ldr	r0, [pc, #220]	; (8004060 <GrandState_Verita+0x1578>)
 8003f84:	f009 fc66 	bl	800d854 <siprintf>
 8003f88:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <GrandState_Verita+0x1598>)
 8003f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8e:	9201      	str	r2, [sp, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	9200      	str	r2, [sp, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a32      	ldr	r2, [pc, #200]	; (8004060 <GrandState_Verita+0x1578>)
 8003f98:	2137      	movs	r1, #55	; 0x37
 8003f9a:	200a      	movs	r0, #10
 8003f9c:	f002 f8be 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_A_OOD); ili9341_WriteStringNoBG(10, 75, TextDispBuffer, Font16, cl_WHITE);
 8003fa0:	493c      	ldr	r1, [pc, #240]	; (8004094 <GrandState_Verita+0x15ac>)
 8003fa2:	482f      	ldr	r0, [pc, #188]	; (8004060 <GrandState_Verita+0x1578>)
 8003fa4:	f009 fc56 	bl	800d854 <siprintf>
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <GrandState_Verita+0x1598>)
 8003faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fae:	9201      	str	r2, [sp, #4]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	9200      	str	r2, [sp, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <GrandState_Verita+0x1578>)
 8003fb8:	214b      	movs	r1, #75	; 0x4b
 8003fba:	200a      	movs	r0, #10
 8003fbc:	f002 f8ae 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_PUPDR); ili9341_WriteStringNoBG(10, 95, TextDispBuffer, Font16, cl_WHITE);
 8003fc0:	4935      	ldr	r1, [pc, #212]	; (8004098 <GrandState_Verita+0x15b0>)
 8003fc2:	4827      	ldr	r0, [pc, #156]	; (8004060 <GrandState_Verita+0x1578>)
 8003fc4:	f009 fc46 	bl	800d854 <siprintf>
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <GrandState_Verita+0x1598>)
 8003fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fce:	9201      	str	r2, [sp, #4]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	9200      	str	r2, [sp, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a22      	ldr	r2, [pc, #136]	; (8004060 <GrandState_Verita+0x1578>)
 8003fd8:	215f      	movs	r1, #95	; 0x5f
 8003fda:	200a      	movs	r0, #10
 8003fdc:	f002 f89e 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_OPP); ili9341_WriteStringNoBG(10, 115, TextDispBuffer, Font16, cl_WHITE);
 8003fe0:	492f      	ldr	r1, [pc, #188]	; (80040a0 <GrandState_Verita+0x15b8>)
 8003fe2:	481f      	ldr	r0, [pc, #124]	; (8004060 <GrandState_Verita+0x1578>)
 8003fe4:	f009 fc36 	bl	800d854 <siprintf>
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <GrandState_Verita+0x1598>)
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	9201      	str	r2, [sp, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	9200      	str	r2, [sp, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <GrandState_Verita+0x1578>)
 8003ff8:	2173      	movs	r1, #115	; 0x73
 8003ffa:	200a      	movs	r0, #10
 8003ffc:	f002 f88e 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_OOD); ili9341_WriteStringNoBG(10, 135, TextDispBuffer, Font16, cl_WHITE);
 8004000:	4928      	ldr	r1, [pc, #160]	; (80040a4 <GrandState_Verita+0x15bc>)
 8004002:	4817      	ldr	r0, [pc, #92]	; (8004060 <GrandState_Verita+0x1578>)
 8004004:	f009 fc26 	bl	800d854 <siprintf>
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <GrandState_Verita+0x1598>)
 800400a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <GrandState_Verita+0x1578>)
 8004018:	2187      	movs	r1, #135	; 0x87
 800401a:	200a      	movs	r0, #10
 800401c:	f002 f87e 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_PUPDR); ili9341_WriteStringNoBG(10, 155, TextDispBuffer, Font16, cl_WHITE);
 8004020:	4921      	ldr	r1, [pc, #132]	; (80040a8 <GrandState_Verita+0x15c0>)
 8004022:	480f      	ldr	r0, [pc, #60]	; (8004060 <GrandState_Verita+0x1578>)
 8004024:	f009 fc16 	bl	800d854 <siprintf>
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <GrandState_Verita+0x1598>)
 800402a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402e:	9201      	str	r2, [sp, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	9200      	str	r2, [sp, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <GrandState_Verita+0x1578>)
 8004038:	219b      	movs	r1, #155	; 0x9b
 800403a:	200a      	movs	r0, #10
 800403c:	f002 f86e 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_OPP); ili9341_WriteStringNoBG(10, 175, TextDispBuffer, Font16, cl_WHITE);
 8004040:	491b      	ldr	r1, [pc, #108]	; (80040b0 <GrandState_Verita+0x15c8>)
 8004042:	4807      	ldr	r0, [pc, #28]	; (8004060 <GrandState_Verita+0x1578>)
 8004044:	f009 fc06 	bl	800d854 <siprintf>
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <GrandState_Verita+0x1598>)
 800404a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404e:	9201      	str	r2, [sp, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	e035      	b.n	80040c0 <GrandState_Verita+0x15d8>
 8004054:	200008ac 	.word	0x200008ac
 8004058:	20000614 	.word	0x20000614
 800405c:	08010124 	.word	0x08010124
 8004060:	200006b8 	.word	0x200006b8
 8004064:	20000238 	.word	0x20000238
 8004068:	20000894 	.word	0x20000894
 800406c:	0800ffc0 	.word	0x0800ffc0
 8004070:	08010134 	.word	0x08010134
 8004074:	20000228 	.word	0x20000228
 8004078:	08010140 	.word	0x08010140
 800407c:	08010148 	.word	0x08010148
 8004080:	20000230 	.word	0x20000230
 8004084:	20000784 	.word	0x20000784
 8004088:	2000005c 	.word	0x2000005c
 800408c:	20000008 	.word	0x20000008
 8004090:	200000bc 	.word	0x200000bc
 8004094:	2000011c 	.word	0x2000011c
 8004098:	2000007c 	.word	0x2000007c
 800409c:	2000001c 	.word	0x2000001c
 80040a0:	200000dc 	.word	0x200000dc
 80040a4:	2000013c 	.word	0x2000013c
 80040a8:	2000009c 	.word	0x2000009c
 80040ac:	2000003c 	.word	0x2000003c
 80040b0:	200000fc 	.word	0x200000fc
 80040b4:	2000015c 	.word	0x2000015c
 80040b8:	200008a6 	.word	0x200008a6
 80040bc:	0801005c 	.word	0x0801005c
 80040c0:	9200      	str	r2, [sp, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a72      	ldr	r2, [pc, #456]	; (8004290 <GrandState_Verita+0x17a8>)
 80040c6:	21af      	movs	r1, #175	; 0xaf
 80040c8:	200a      	movs	r0, #10
 80040ca:	f002 f827 	bl	800611c <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_OOD); ili9341_WriteStringNoBG(10, 195, TextDispBuffer, Font16, cl_WHITE);
 80040ce:	4971      	ldr	r1, [pc, #452]	; (8004294 <GrandState_Verita+0x17ac>)
 80040d0:	486f      	ldr	r0, [pc, #444]	; (8004290 <GrandState_Verita+0x17a8>)
 80040d2:	f009 fbbf 	bl	800d854 <siprintf>
 80040d6:	4b70      	ldr	r3, [pc, #448]	; (8004298 <GrandState_Verita+0x17b0>)
 80040d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040dc:	9201      	str	r2, [sp, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	9200      	str	r2, [sp, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6a      	ldr	r2, [pc, #424]	; (8004290 <GrandState_Verita+0x17a8>)
 80040e6:	21c3      	movs	r1, #195	; 0xc3
 80040e8:	200a      	movs	r0, #10
 80040ea:	f002 f817 	bl	800611c <ili9341_WriteStringNoBG>

					VRB_CL.Mark.Flag_ger = 0;
 80040ee:	4b6b      	ldr	r3, [pc, #428]	; (800429c <GrandState_Verita+0x17b4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					VRB_CL.Mark.Flag_next = 0;
 80040f6:	4b69      	ldr	r3, [pc, #420]	; (800429c <GrandState_Verita+0x17b4>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					GrandState = gpio_chk;
 80040fe:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <GrandState_Verita+0x17b8>)
 8004100:	220e      	movs	r2, #14
 8004102:	701a      	strb	r2, [r3, #0]
				}

				//// Buzzer scream
				buzzr.flag = 3;
 8004104:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <GrandState_Verita+0x17bc>)
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
				buzzr.priod_up = 300;
 800410a:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <GrandState_Verita+0x17bc>)
 800410c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004110:	805a      	strh	r2, [r3, #2]
				buzzer_scream_cnt();
 8004112:	f7fe fc71 	bl	80029f8 <buzzer_scream_cnt>

				////soft reset
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_SET);
 8004116:	2201      	movs	r2, #1
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	4863      	ldr	r0, [pc, #396]	; (80042a8 <GrandState_Verita+0x17c0>)
 800411c:	f003 fb78 	bl	8007810 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8004120:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004124:	f002 fc92 	bl	8006a4c <HAL_Delay>
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	485e      	ldr	r0, [pc, #376]	; (80042a8 <GrandState_Verita+0x17c0>)
 800412e:	f003 fb6f 	bl	8007810 <HAL_GPIO_WritePin>

				GrandState = gpio_chk;
 8004132:	4b5b      	ldr	r3, [pc, #364]	; (80042a0 <GrandState_Verita+0x17b8>)
 8004134:	220e      	movs	r2, #14
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e031      	b.n	800419e <GrandState_Verita+0x16b6>
			}
			else if(HAL_GetTick() >= gScr.timelog){ //timeout connection
 800413a:	f002 fc7b 	bl	8006a34 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <GrandState_Verita+0x17c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	d32a      	bcc.n	800419e <GrandState_Verita+0x16b6>

				sprintf(TextDispBuffer,"Connection");
 8004148:	4959      	ldr	r1, [pc, #356]	; (80042b0 <GrandState_Verita+0x17c8>)
 800414a:	4851      	ldr	r0, [pc, #324]	; (8004290 <GrandState_Verita+0x17a8>)
 800414c:	f009 fb82 	bl	800d854 <siprintf>
				ili9341_WriteStringNoBG(80, 50, TextDispBuffer, Font20, cl_WHITE);
 8004150:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <GrandState_Verita+0x17cc>)
 8004152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004156:	9201      	str	r2, [sp, #4]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	9200      	str	r2, [sp, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4c      	ldr	r2, [pc, #304]	; (8004290 <GrandState_Verita+0x17a8>)
 8004160:	2132      	movs	r1, #50	; 0x32
 8004162:	2050      	movs	r0, #80	; 0x50
 8004164:	f001 ffda 	bl	800611c <ili9341_WriteStringNoBG>
				sprintf(TextDispBuffer,"Timeout");
 8004168:	4953      	ldr	r1, [pc, #332]	; (80042b8 <GrandState_Verita+0x17d0>)
 800416a:	4849      	ldr	r0, [pc, #292]	; (8004290 <GrandState_Verita+0x17a8>)
 800416c:	f009 fb72 	bl	800d854 <siprintf>
				ili9341_WriteStringNoBG(95, 75, TextDispBuffer, Font20, cl_WHITE);
 8004170:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <GrandState_Verita+0x17cc>)
 8004172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004176:	9201      	str	r2, [sp, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	9200      	str	r2, [sp, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a44      	ldr	r2, [pc, #272]	; (8004290 <GrandState_Verita+0x17a8>)
 8004180:	214b      	movs	r1, #75	; 0x4b
 8004182:	205f      	movs	r0, #95	; 0x5f
 8004184:	f001 ffca 	bl	800611c <ili9341_WriteStringNoBG>
				VRB_CL.Mark.Flag_ger = 0;
 8004188:	4b44      	ldr	r3, [pc, #272]	; (800429c <GrandState_Verita+0x17b4>)
 800418a:	2200      	movs	r2, #0
 800418c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				VRB_CL.Mark.Flag_next = 0;
 8004190:	4b42      	ldr	r3, [pc, #264]	; (800429c <GrandState_Verita+0x17b4>)
 8004192:	2200      	movs	r2, #0
 8004194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				GrandState = gpio_chk;
 8004198:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <GrandState_Verita+0x17b8>)
 800419a:	220e      	movs	r2, #14
 800419c:	701a      	strb	r2, [r3, #0]
			}else{}

			k_flag.cnt = 0;
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <GrandState_Verita+0x17d4>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	709a      	strb	r2, [r3, #2]
			break; //// pre_gpio_chk
 80041a4:	f000 beb1 	b.w	8004f0a <GrandState_Verita+0x2422>

		case gpio_chk:
			stboxp.choice_set = bpoxy_def;
 80041a8:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <GrandState_Verita+0x17d8>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	705a      	strb	r2, [r3, #1]


			sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 80041ae:	4b45      	ldr	r3, [pc, #276]	; (80042c4 <GrandState_Verita+0x17dc>)
 80041b0:	edd3 7a00 	vldr	s15, [r3]
 80041b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	d504      	bpl.n	80041c8 <GrandState_Verita+0x16e0>
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e006      	b.n	80041d6 <GrandState_Verita+0x16ee>
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <GrandState_Verita+0x17dc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f9c3 	bl	8000558 <__aeabi_f2d>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	493c      	ldr	r1, [pc, #240]	; (80042c8 <GrandState_Verita+0x17e0>)
 80041d8:	482d      	ldr	r0, [pc, #180]	; (8004290 <GrandState_Verita+0x17a8>)
 80041da:	f009 fb3b 	bl	800d854 <siprintf>
			if(client_temp_mcuCC < MCUTemp_treash){
 80041de:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <GrandState_Verita+0x17dc>)
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80042cc <GrandState_Verita+0x17e4>
 80041e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	d50e      	bpl.n	8004210 <GrandState_Verita+0x1728>
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <GrandState_Verita+0x17b0>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	9202      	str	r2, [sp, #8]
 80041f8:	f24c 6218 	movw	r2, #50712	; 0xc618
 80041fc:	9201      	str	r2, [sp, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	9200      	str	r2, [sp, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <GrandState_Verita+0x17a8>)
 8004206:	21be      	movs	r1, #190	; 0xbe
 8004208:	20fa      	movs	r0, #250	; 0xfa
 800420a:	f001 ff3a 	bl	8006082 <ili9341_WriteString>
 800420e:	e00d      	b.n	800422c <GrandState_Verita+0x1744>
			}else{
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <GrandState_Verita+0x17b0>)
 8004212:	2200      	movs	r2, #0
 8004214:	9202      	str	r2, [sp, #8]
 8004216:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800421a:	9201      	str	r2, [sp, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	9200      	str	r2, [sp, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <GrandState_Verita+0x17a8>)
 8004224:	21be      	movs	r1, #190	; 0xbe
 8004226:	20fa      	movs	r0, #250	; 0xfa
 8004228:	f001 ff2b 	bl	8006082 <ili9341_WriteString>
			}

			sprintf(TextDispBuffer,"%08x", (uint)VRB_CL.Mark.FirmwareVer);
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <GrandState_Verita+0x17b4>)
 800422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004230:	461a      	mov	r2, r3
 8004232:	4927      	ldr	r1, [pc, #156]	; (80042d0 <GrandState_Verita+0x17e8>)
 8004234:	4816      	ldr	r0, [pc, #88]	; (8004290 <GrandState_Verita+0x17a8>)
 8004236:	f009 fb0d 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(250, 225, TextDispBuffer, Font12, cl_WHITE);
 800423a:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <GrandState_Verita+0x17ec>)
 800423c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004240:	9201      	str	r2, [sp, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	9200      	str	r2, [sp, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <GrandState_Verita+0x17a8>)
 800424a:	21e1      	movs	r1, #225	; 0xe1
 800424c:	20fa      	movs	r0, #250	; 0xfa
 800424e:	f001 ff65 	bl	800611c <ili9341_WriteStringNoBG>


			if(k_flag.cnt){ //// Back to lobby  // && stboxp.ch_is == 1
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <GrandState_Verita+0x17d4>)
 8004254:	789b      	ldrb	r3, [r3, #2]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 864c 	beq.w	8004ef4 <GrandState_Verita+0x240c>
				GrandState = pre_lobby;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <GrandState_Verita+0x17b8>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
				k_flag.cnt = 0;
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <GrandState_Verita+0x17d4>)
 8004264:	2200      	movs	r2, #0
 8004266:	709a      	strb	r2, [r3, #2]
				VRB_CL.Mark.FirmwareVer = 0x00; // clear if nextstep break
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <GrandState_Verita+0x17b4>)
 800426a:	2200      	movs	r2, #0
 800426c:	649a      	str	r2, [r3, #72]	; 0x48
				VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <GrandState_Verita+0x17b4>)
 8004270:	2200      	movs	r2, #0
 8004272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				resetgpio_char();
 8004276:	f000 fed9 	bl	800502c <resetgpio_char>
				gScr.fullflag = 0;
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <GrandState_Verita+0x17c4>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004280:	2200      	movs	r2, #0
 8004282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004286:	4808      	ldr	r0, [pc, #32]	; (80042a8 <GrandState_Verita+0x17c0>)
 8004288:	f003 fac2 	bl	8007810 <HAL_GPIO_WritePin>
				}
			break; //gpio_chk
 800428c:	f000 be32 	b.w	8004ef4 <GrandState_Verita+0x240c>
 8004290:	200006b8 	.word	0x200006b8
 8004294:	2000015c 	.word	0x2000015c
 8004298:	20000230 	.word	0x20000230
 800429c:	20000784 	.word	0x20000784
 80042a0:	20000006 	.word	0x20000006
 80042a4:	20000878 	.word	0x20000878
 80042a8:	40020800 	.word	0x40020800
 80042ac:	20000894 	.word	0x20000894
 80042b0:	08010154 	.word	0x08010154
 80042b4:	20000238 	.word	0x20000238
 80042b8:	08010160 	.word	0x08010160
 80042bc:	20000890 	.word	0x20000890
 80042c0:	200008ac 	.word	0x200008ac
 80042c4:	200007f4 	.word	0x200007f4
 80042c8:	08010168 	.word	0x08010168
 80042cc:	42700000 	.word	0x42700000
 80042d0:	08010170 	.word	0x08010170
 80042d4:	20000228 	.word	0x20000228

	case pre_monitor:
		stboxp.choice_set = bpoxy_def;
 80042d8:	4b96      	ldr	r3, [pc, #600]	; (8004534 <GrandState_Verita+0x1a4c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	23d2      	movs	r3, #210	; 0xd2
 80042e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042e8:	211e      	movs	r1, #30
 80042ea:	2000      	movs	r0, #0
 80042ec:	f001 fd20 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_BLUE);
 80042f0:	231f      	movs	r3, #31
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	231e      	movs	r3, #30
 80042f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042fa:	2100      	movs	r1, #0
 80042fc:	2000      	movs	r0, #0
 80042fe:	f001 fd17 	bl	8005d30 <ili9341_FillRect>

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8004302:	2201      	movs	r2, #1
 8004304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004308:	488b      	ldr	r0, [pc, #556]	; (8004538 <GrandState_Verita+0x1a50>)
 800430a:	f003 fa81 	bl	8007810 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"PWR_Monitor");
 800430e:	498b      	ldr	r1, [pc, #556]	; (800453c <GrandState_Verita+0x1a54>)
 8004310:	488b      	ldr	r0, [pc, #556]	; (8004540 <GrandState_Verita+0x1a58>)
 8004312:	f009 fa9f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_WHITE);
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <GrandState_Verita+0x1a5c>)
 8004318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800431c:	9201      	str	r2, [sp, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	9200      	str	r2, [sp, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a86      	ldr	r2, [pc, #536]	; (8004540 <GrandState_Verita+0x1a58>)
 8004326:	2105      	movs	r1, #5
 8004328:	2050      	movs	r0, #80	; 0x50
 800432a:	f001 fef7 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 800432e:	4986      	ldr	r1, [pc, #536]	; (8004548 <GrandState_Verita+0x1a60>)
 8004330:	4883      	ldr	r0, [pc, #524]	; (8004540 <GrandState_Verita+0x1a58>)
 8004332:	f009 fa8f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8004336:	4b85      	ldr	r3, [pc, #532]	; (800454c <GrandState_Verita+0x1a64>)
 8004338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7e      	ldr	r2, [pc, #504]	; (8004540 <GrandState_Verita+0x1a58>)
 8004346:	21dc      	movs	r1, #220	; 0xdc
 8004348:	201e      	movs	r0, #30
 800434a:	f001 fee7 	bl	800611c <ili9341_WriteStringNoBG>

		//sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
		//ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);

		sprintf(TextDispBuffer,"5Vin:");
 800434e:	4980      	ldr	r1, [pc, #512]	; (8004550 <GrandState_Verita+0x1a68>)
 8004350:	487b      	ldr	r0, [pc, #492]	; (8004540 <GrandState_Verita+0x1a58>)
 8004352:	f009 fa7f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 8004356:	4b7d      	ldr	r3, [pc, #500]	; (800454c <GrandState_Verita+0x1a64>)
 8004358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800435c:	9201      	str	r2, [sp, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	9200      	str	r2, [sp, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a76      	ldr	r2, [pc, #472]	; (8004540 <GrandState_Verita+0x1a58>)
 8004366:	2132      	movs	r1, #50	; 0x32
 8004368:	200f      	movs	r0, #15
 800436a:	f001 fed7 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 800436e:	4979      	ldr	r1, [pc, #484]	; (8004554 <GrandState_Verita+0x1a6c>)
 8004370:	4873      	ldr	r0, [pc, #460]	; (8004540 <GrandState_Verita+0x1a58>)
 8004372:	f009 fa6f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 8004376:	4b75      	ldr	r3, [pc, #468]	; (800454c <GrandState_Verita+0x1a64>)
 8004378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437c:	9201      	str	r2, [sp, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	9200      	str	r2, [sp, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <GrandState_Verita+0x1a58>)
 8004386:	214b      	movs	r1, #75	; 0x4b
 8004388:	200f      	movs	r0, #15
 800438a:	f001 fec7 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 800438e:	4972      	ldr	r1, [pc, #456]	; (8004558 <GrandState_Verita+0x1a70>)
 8004390:	486b      	ldr	r0, [pc, #428]	; (8004540 <GrandState_Verita+0x1a58>)
 8004392:	f009 fa5f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 100, TextDispBuffer, Font16, cl_WHITE);
 8004396:	4b6d      	ldr	r3, [pc, #436]	; (800454c <GrandState_Verita+0x1a64>)
 8004398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439c:	9201      	str	r2, [sp, #4]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a66      	ldr	r2, [pc, #408]	; (8004540 <GrandState_Verita+0x1a58>)
 80043a6:	2164      	movs	r1, #100	; 0x64
 80043a8:	200f      	movs	r0, #15
 80043aa:	f001 feb7 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 80043ae:	496b      	ldr	r1, [pc, #428]	; (800455c <GrandState_Verita+0x1a74>)
 80043b0:	4863      	ldr	r0, [pc, #396]	; (8004540 <GrandState_Verita+0x1a58>)
 80043b2:	f009 fa4f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 80043b6:	4b65      	ldr	r3, [pc, #404]	; (800454c <GrandState_Verita+0x1a64>)
 80043b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043bc:	9201      	str	r2, [sp, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	9200      	str	r2, [sp, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5e      	ldr	r2, [pc, #376]	; (8004540 <GrandState_Verita+0x1a58>)
 80043c6:	217d      	movs	r1, #125	; 0x7d
 80043c8:	200f      	movs	r0, #15
 80043ca:	f001 fea7 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR");
 80043ce:	4964      	ldr	r1, [pc, #400]	; (8004560 <GrandState_Verita+0x1a78>)
 80043d0:	485b      	ldr	r0, [pc, #364]	; (8004540 <GrandState_Verita+0x1a58>)
 80043d2:	f009 fa3f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <GrandState_Verita+0x1a64>)
 80043d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043dc:	9201      	str	r2, [sp, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	9200      	str	r2, [sp, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a56      	ldr	r2, [pc, #344]	; (8004540 <GrandState_Verita+0x1a58>)
 80043e6:	2196      	movs	r1, #150	; 0x96
 80043e8:	200f      	movs	r0, #15
 80043ea:	f001 fe97 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCU");
 80043ee:	495d      	ldr	r1, [pc, #372]	; (8004564 <GrandState_Verita+0x1a7c>)
 80043f0:	4853      	ldr	r0, [pc, #332]	; (8004540 <GrandState_Verita+0x1a58>)
 80043f2:	f009 fa2f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 150, TextDispBuffer, Font12, cl_WHITE);
 80043f6:	4b5c      	ldr	r3, [pc, #368]	; (8004568 <GrandState_Verita+0x1a80>)
 80043f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fc:	9201      	str	r2, [sp, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	9200      	str	r2, [sp, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <GrandState_Verita+0x1a58>)
 8004406:	2196      	movs	r1, #150	; 0x96
 8004408:	203c      	movs	r0, #60	; 0x3c
 800440a:	f001 fe87 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Brd");
 800440e:	4957      	ldr	r1, [pc, #348]	; (800456c <GrandState_Verita+0x1a84>)
 8004410:	484b      	ldr	r0, [pc, #300]	; (8004540 <GrandState_Verita+0x1a58>)
 8004412:	f009 fa1f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(60, 170, TextDispBuffer, Font12, cl_WHITE);
 8004416:	4b54      	ldr	r3, [pc, #336]	; (8004568 <GrandState_Verita+0x1a80>)
 8004418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a46      	ldr	r2, [pc, #280]	; (8004540 <GrandState_Verita+0x1a58>)
 8004426:	21aa      	movs	r1, #170	; 0xaa
 8004428:	203c      	movs	r0, #60	; 0x3c
 800442a:	f001 fe77 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCP3208");
 800442e:	4950      	ldr	r1, [pc, #320]	; (8004570 <GrandState_Verita+0x1a88>)
 8004430:	4843      	ldr	r0, [pc, #268]	; (8004540 <GrandState_Verita+0x1a58>)
 8004432:	f009 fa0f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(220, 40, TextDispBuffer, Font16, cl_WHITE);
 8004436:	4b45      	ldr	r3, [pc, #276]	; (800454c <GrandState_Verita+0x1a64>)
 8004438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800443c:	9201      	str	r2, [sp, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	9200      	str	r2, [sp, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3e      	ldr	r2, [pc, #248]	; (8004540 <GrandState_Verita+0x1a58>)
 8004446:	2128      	movs	r1, #40	; 0x28
 8004448:	20dc      	movs	r0, #220	; 0xdc
 800444a:	f001 fe67 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Read Volt V");
 800444e:	4949      	ldr	r1, [pc, #292]	; (8004574 <GrandState_Verita+0x1a8c>)
 8004450:	483b      	ldr	r0, [pc, #236]	; (8004540 <GrandState_Verita+0x1a58>)
 8004452:	f009 f9ff 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(220, 56, TextDispBuffer, Font12, cl_WHITE);
 8004456:	4b44      	ldr	r3, [pc, #272]	; (8004568 <GrandState_Verita+0x1a80>)
 8004458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445c:	9201      	str	r2, [sp, #4]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	9200      	str	r2, [sp, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a36      	ldr	r2, [pc, #216]	; (8004540 <GrandState_Verita+0x1a58>)
 8004466:	2138      	movs	r1, #56	; 0x38
 8004468:	20dc      	movs	r0, #220	; 0xdc
 800446a:	f001 fe57 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 54, TextDispBuffer, Font12, cl_WHITE);
 800446e:	4942      	ldr	r1, [pc, #264]	; (8004578 <GrandState_Verita+0x1a90>)
 8004470:	4833      	ldr	r0, [pc, #204]	; (8004540 <GrandState_Verita+0x1a58>)
 8004472:	f009 f9ef 	bl	800d854 <siprintf>
 8004476:	4b3c      	ldr	r3, [pc, #240]	; (8004568 <GrandState_Verita+0x1a80>)
 8004478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447c:	9201      	str	r2, [sp, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	9200      	str	r2, [sp, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <GrandState_Verita+0x1a58>)
 8004486:	2136      	movs	r1, #54	; 0x36
 8004488:	2096      	movs	r0, #150	; 0x96
 800448a:	f001 fe47 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 79, TextDispBuffer, Font12, cl_WHITE);
 800448e:	493a      	ldr	r1, [pc, #232]	; (8004578 <GrandState_Verita+0x1a90>)
 8004490:	482b      	ldr	r0, [pc, #172]	; (8004540 <GrandState_Verita+0x1a58>)
 8004492:	f009 f9df 	bl	800d854 <siprintf>
 8004496:	4b34      	ldr	r3, [pc, #208]	; (8004568 <GrandState_Verita+0x1a80>)
 8004498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800449c:	9201      	str	r2, [sp, #4]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <GrandState_Verita+0x1a58>)
 80044a6:	214f      	movs	r1, #79	; 0x4f
 80044a8:	2096      	movs	r0, #150	; 0x96
 80044aa:	f001 fe37 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 104, TextDispBuffer, Font12, cl_WHITE);
 80044ae:	4933      	ldr	r1, [pc, #204]	; (800457c <GrandState_Verita+0x1a94>)
 80044b0:	4823      	ldr	r0, [pc, #140]	; (8004540 <GrandState_Verita+0x1a58>)
 80044b2:	f009 f9cf 	bl	800d854 <siprintf>
 80044b6:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <GrandState_Verita+0x1a80>)
 80044b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044bc:	9201      	str	r2, [sp, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	9200      	str	r2, [sp, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <GrandState_Verita+0x1a58>)
 80044c6:	2168      	movs	r1, #104	; 0x68
 80044c8:	2096      	movs	r0, #150	; 0x96
 80044ca:	f001 fe27 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 129, TextDispBuffer, Font12, cl_WHITE);
 80044ce:	492b      	ldr	r1, [pc, #172]	; (800457c <GrandState_Verita+0x1a94>)
 80044d0:	481b      	ldr	r0, [pc, #108]	; (8004540 <GrandState_Verita+0x1a58>)
 80044d2:	f009 f9bf 	bl	800d854 <siprintf>
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <GrandState_Verita+0x1a80>)
 80044d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044dc:	9201      	str	r2, [sp, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	9200      	str	r2, [sp, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a16      	ldr	r2, [pc, #88]	; (8004540 <GrandState_Verita+0x1a58>)
 80044e6:	2181      	movs	r1, #129	; 0x81
 80044e8:	2096      	movs	r0, #150	; 0x96
 80044ea:	f001 fe17 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 154, TextDispBuffer, Font12, cl_WHITE);
 80044ee:	4924      	ldr	r1, [pc, #144]	; (8004580 <GrandState_Verita+0x1a98>)
 80044f0:	4813      	ldr	r0, [pc, #76]	; (8004540 <GrandState_Verita+0x1a58>)
 80044f2:	f009 f9af 	bl	800d854 <siprintf>
 80044f6:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <GrandState_Verita+0x1a80>)
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	9201      	str	r2, [sp, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	9200      	str	r2, [sp, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <GrandState_Verita+0x1a58>)
 8004506:	219a      	movs	r1, #154	; 0x9a
 8004508:	20aa      	movs	r0, #170	; 0xaa
 800450a:	f001 fe07 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 174, TextDispBuffer, Font12, cl_WHITE);
 800450e:	491c      	ldr	r1, [pc, #112]	; (8004580 <GrandState_Verita+0x1a98>)
 8004510:	480b      	ldr	r0, [pc, #44]	; (8004540 <GrandState_Verita+0x1a58>)
 8004512:	f009 f99f 	bl	800d854 <siprintf>
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <GrandState_Verita+0x1a80>)
 8004518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800451c:	9201      	str	r2, [sp, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	9200      	str	r2, [sp, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a06      	ldr	r2, [pc, #24]	; (8004540 <GrandState_Verita+0x1a58>)
 8004526:	21ae      	movs	r1, #174	; 0xae
 8004528:	20aa      	movs	r0, #170	; 0xaa
 800452a:	f001 fdf7 	bl	800611c <ili9341_WriteStringNoBG>

		for(register int t = 0; t <= 7; t++){
 800452e:	2400      	movs	r4, #0
 8004530:	e041      	b.n	80045b6 <GrandState_Verita+0x1ace>
 8004532:	bf00      	nop
 8004534:	200008ac 	.word	0x200008ac
 8004538:	40020800 	.word	0x40020800
 800453c:	08010178 	.word	0x08010178
 8004540:	200006b8 	.word	0x200006b8
 8004544:	20000238 	.word	0x20000238
 8004548:	0800ffb8 	.word	0x0800ffb8
 800454c:	20000230 	.word	0x20000230
 8004550:	08010184 	.word	0x08010184
 8004554:	0801000c 	.word	0x0801000c
 8004558:	08010024 	.word	0x08010024
 800455c:	0801001c 	.word	0x0801001c
 8004560:	0801018c 	.word	0x0801018c
 8004564:	08010190 	.word	0x08010190
 8004568:	20000228 	.word	0x20000228
 800456c:	08010194 	.word	0x08010194
 8004570:	08010198 	.word	0x08010198
 8004574:	080101a0 	.word	0x080101a0
 8004578:	0801002c 	.word	0x0801002c
 800457c:	08010030 	.word	0x08010030
 8004580:	080101ac 	.word	0x080101ac
			sprintf(TextDispBuffer,"CH%d",t);
 8004584:	4622      	mov	r2, r4
 8004586:	49a1      	ldr	r1, [pc, #644]	; (800480c <GrandState_Verita+0x1d24>)
 8004588:	48a1      	ldr	r0, [pc, #644]	; (8004810 <GrandState_Verita+0x1d28>)
 800458a:	f009 f963 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(220, 75 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 800458e:	b2a3      	uxth	r3, r4
 8004590:	461a      	mov	r2, r3
 8004592:	0052      	lsls	r2, r2, #1
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	b29b      	uxth	r3, r3
 800459a:	334b      	adds	r3, #75	; 0x4b
 800459c:	b299      	uxth	r1, r3
 800459e:	4b9d      	ldr	r3, [pc, #628]	; (8004814 <GrandState_Verita+0x1d2c>)
 80045a0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80045a4:	9201      	str	r2, [sp, #4]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a98      	ldr	r2, [pc, #608]	; (8004810 <GrandState_Verita+0x1d28>)
 80045ae:	20dc      	movs	r0, #220	; 0xdc
 80045b0:	f001 fdb4 	bl	800611c <ili9341_WriteStringNoBG>
		for(register int t = 0; t <= 7; t++){
 80045b4:	3401      	adds	r4, #1
 80045b6:	2c07      	cmp	r4, #7
 80045b8:	dde4      	ble.n	8004584 <GrandState_Verita+0x1a9c>
		}

		sprintf(TextDispBuffer,"MCU_Temp:");
 80045ba:	4997      	ldr	r1, [pc, #604]	; (8004818 <GrandState_Verita+0x1d30>)
 80045bc:	4894      	ldr	r0, [pc, #592]	; (8004810 <GrandState_Verita+0x1d28>)
 80045be:	f009 f949 	bl	800d854 <siprintf>
		ili9341_WriteString(20, 190, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80045c2:	4b94      	ldr	r3, [pc, #592]	; (8004814 <GrandState_Verita+0x1d2c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	9202      	str	r2, [sp, #8]
 80045c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045cc:	9201      	str	r2, [sp, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	9200      	str	r2, [sp, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a8e      	ldr	r2, [pc, #568]	; (8004810 <GrandState_Verita+0x1d28>)
 80045d6:	21be      	movs	r1, #190	; 0xbe
 80045d8:	2014      	movs	r0, #20
 80045da:	f001 fd52 	bl	8006082 <ili9341_WriteString>

		k_flag.cnt = 0; //// prevent over state jump
 80045de:	4b8f      	ldr	r3, [pc, #572]	; (800481c <GrandState_Verita+0x1d34>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	709a      	strb	r2, [r3, #2]
		GrandState = monitor;
 80045e4:	4b8e      	ldr	r3, [pc, #568]	; (8004820 <GrandState_Verita+0x1d38>)
 80045e6:	220c      	movs	r2, #12
 80045e8:	701a      	strb	r2, [r3, #0]
		break; //// pre monitor
 80045ea:	f000 bc8e 	b.w	8004f0a <GrandState_Verita+0x2422>


	case monitor:
		stboxp.choice_set = bpoxy_def;
 80045ee:	4b8d      	ldr	r3, [pc, #564]	; (8004824 <GrandState_Verita+0x1d3c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	705a      	strb	r2, [r3, #1]
		simple_scr();
 80045f4:	f7fd ffb0 	bl	8002558 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 80045f8:	4b8b      	ldr	r3, [pc, #556]	; (8004828 <GrandState_Verita+0x1d40>)
 80045fa:	8a1b      	ldrh	r3, [r3, #16]
 80045fc:	461a      	mov	r2, r3
 80045fe:	498b      	ldr	r1, [pc, #556]	; (800482c <GrandState_Verita+0x1d44>)
 8004600:	4883      	ldr	r0, [pc, #524]	; (8004810 <GrandState_Verita+0x1d28>)
 8004602:	f009 f927 	bl	800d854 <siprintf>
		if(inatb.Bus_V < 2000){
 8004606:	4b88      	ldr	r3, [pc, #544]	; (8004828 <GrandState_Verita+0x1d40>)
 8004608:	8a1b      	ldrh	r3, [r3, #16]
 800460a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800460e:	d20e      	bcs.n	800462e <GrandState_Verita+0x1b46>
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004610:	4b87      	ldr	r3, [pc, #540]	; (8004830 <GrandState_Verita+0x1d48>)
 8004612:	2200      	movs	r2, #0
 8004614:	9202      	str	r2, [sp, #8]
 8004616:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800461a:	9201      	str	r2, [sp, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	9200      	str	r2, [sp, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a7b      	ldr	r2, [pc, #492]	; (8004810 <GrandState_Verita+0x1d28>)
 8004624:	2132      	movs	r1, #50	; 0x32
 8004626:	205a      	movs	r0, #90	; 0x5a
 8004628:	f001 fd2b 	bl	8006082 <ili9341_WriteString>
 800462c:	e00d      	b.n	800464a <GrandState_Verita+0x1b62>
		}else{
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 800462e:	4b80      	ldr	r3, [pc, #512]	; (8004830 <GrandState_Verita+0x1d48>)
 8004630:	2200      	movs	r2, #0
 8004632:	9202      	str	r2, [sp, #8]
 8004634:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004638:	9201      	str	r2, [sp, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	9200      	str	r2, [sp, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a73      	ldr	r2, [pc, #460]	; (8004810 <GrandState_Verita+0x1d28>)
 8004642:	2132      	movs	r1, #50	; 0x32
 8004644:	205a      	movs	r0, #90	; 0x5a
 8004646:	f001 fd1c 	bl	8006082 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <GrandState_Verita+0x1d4c>)
 800464c:	8a1b      	ldrh	r3, [r3, #16]
 800464e:	461a      	mov	r2, r3
 8004650:	4976      	ldr	r1, [pc, #472]	; (800482c <GrandState_Verita+0x1d44>)
 8004652:	486f      	ldr	r0, [pc, #444]	; (8004810 <GrandState_Verita+0x1d28>)
 8004654:	f009 f8fe 	bl	800d854 <siprintf>
		if(inata.Bus_V < 2000){
 8004658:	4b76      	ldr	r3, [pc, #472]	; (8004834 <GrandState_Verita+0x1d4c>)
 800465a:	8a1b      	ldrh	r3, [r3, #16]
 800465c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004660:	d20e      	bcs.n	8004680 <GrandState_Verita+0x1b98>
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004662:	4b73      	ldr	r3, [pc, #460]	; (8004830 <GrandState_Verita+0x1d48>)
 8004664:	2200      	movs	r2, #0
 8004666:	9202      	str	r2, [sp, #8]
 8004668:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800466c:	9201      	str	r2, [sp, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	9200      	str	r2, [sp, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a66      	ldr	r2, [pc, #408]	; (8004810 <GrandState_Verita+0x1d28>)
 8004676:	214b      	movs	r1, #75	; 0x4b
 8004678:	205a      	movs	r0, #90	; 0x5a
 800467a:	f001 fd02 	bl	8006082 <ili9341_WriteString>
 800467e:	e00d      	b.n	800469c <GrandState_Verita+0x1bb4>
		}else{
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8004680:	4b6b      	ldr	r3, [pc, #428]	; (8004830 <GrandState_Verita+0x1d48>)
 8004682:	2200      	movs	r2, #0
 8004684:	9202      	str	r2, [sp, #8]
 8004686:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800468a:	9201      	str	r2, [sp, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	9200      	str	r2, [sp, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a5f      	ldr	r2, [pc, #380]	; (8004810 <GrandState_Verita+0x1d28>)
 8004694:	214b      	movs	r1, #75	; 0x4b
 8004696:	205a      	movs	r0, #90	; 0x5a
 8004698:	f001 fcf3 	bl	8006082 <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 800469c:	4b65      	ldr	r3, [pc, #404]	; (8004834 <GrandState_Verita+0x1d4c>)
 800469e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046a2:	461a      	mov	r2, r3
 80046a4:	4961      	ldr	r1, [pc, #388]	; (800482c <GrandState_Verita+0x1d44>)
 80046a6:	485a      	ldr	r0, [pc, #360]	; (8004810 <GrandState_Verita+0x1d28>)
 80046a8:	f009 f8d4 	bl	800d854 <siprintf>
		ili9341_WriteString(90, 100, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80046ac:	4b60      	ldr	r3, [pc, #384]	; (8004830 <GrandState_Verita+0x1d48>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	9202      	str	r2, [sp, #8]
 80046b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80046b6:	9201      	str	r2, [sp, #4]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	9200      	str	r2, [sp, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a54      	ldr	r2, [pc, #336]	; (8004810 <GrandState_Verita+0x1d28>)
 80046c0:	2164      	movs	r1, #100	; 0x64
 80046c2:	205a      	movs	r0, #90	; 0x5a
 80046c4:	f001 fcdd 	bl	8006082 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 80046c8:	4b57      	ldr	r3, [pc, #348]	; (8004828 <GrandState_Verita+0x1d40>)
 80046ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046ce:	461a      	mov	r2, r3
 80046d0:	4956      	ldr	r1, [pc, #344]	; (800482c <GrandState_Verita+0x1d44>)
 80046d2:	484f      	ldr	r0, [pc, #316]	; (8004810 <GrandState_Verita+0x1d28>)
 80046d4:	f009 f8be 	bl	800d854 <siprintf>
		ili9341_WriteString(90, 125, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80046d8:	4b55      	ldr	r3, [pc, #340]	; (8004830 <GrandState_Verita+0x1d48>)
 80046da:	2200      	movs	r2, #0
 80046dc:	9202      	str	r2, [sp, #8]
 80046de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80046e2:	9201      	str	r2, [sp, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	9200      	str	r2, [sp, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a49      	ldr	r2, [pc, #292]	; (8004810 <GrandState_Verita+0x1d28>)
 80046ec:	217d      	movs	r1, #125	; 0x7d
 80046ee:	205a      	movs	r0, #90	; 0x5a
 80046f0:	f001 fcc7 	bl	8006082 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4.1f", inata.POWER);
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <GrandState_Verita+0x1d4c>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fb ff2d 	bl	8000558 <__aeabi_f2d>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	494d      	ldr	r1, [pc, #308]	; (8004838 <GrandState_Verita+0x1d50>)
 8004704:	4842      	ldr	r0, [pc, #264]	; (8004810 <GrandState_Verita+0x1d28>)
 8004706:	f009 f8a5 	bl	800d854 <siprintf>
		ili9341_WriteString(95, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 800470a:	4b49      	ldr	r3, [pc, #292]	; (8004830 <GrandState_Verita+0x1d48>)
 800470c:	2200      	movs	r2, #0
 800470e:	9202      	str	r2, [sp, #8]
 8004710:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8004714:	9201      	str	r2, [sp, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a3c      	ldr	r2, [pc, #240]	; (8004810 <GrandState_Verita+0x1d28>)
 800471e:	2196      	movs	r1, #150	; 0x96
 8004720:	205f      	movs	r0, #95	; 0x5f
 8004722:	f001 fcae 	bl	8006082 <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4.1f", inatb.POWER);
 8004726:	4b40      	ldr	r3, [pc, #256]	; (8004828 <GrandState_Verita+0x1d40>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fb ff14 	bl	8000558 <__aeabi_f2d>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4940      	ldr	r1, [pc, #256]	; (8004838 <GrandState_Verita+0x1d50>)
 8004736:	4836      	ldr	r0, [pc, #216]	; (8004810 <GrandState_Verita+0x1d28>)
 8004738:	f009 f88c 	bl	800d854 <siprintf>
		ili9341_WriteString(95, 170, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 800473c:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <GrandState_Verita+0x1d48>)
 800473e:	2200      	movs	r2, #0
 8004740:	9202      	str	r2, [sp, #8]
 8004742:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8004746:	9201      	str	r2, [sp, #4]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	9200      	str	r2, [sp, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a30      	ldr	r2, [pc, #192]	; (8004810 <GrandState_Verita+0x1d28>)
 8004750:	21aa      	movs	r1, #170	; 0xaa
 8004752:	205f      	movs	r0, #95	; 0x5f
 8004754:	f001 fc95 	bl	8006082 <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		//ili9341_FillRect(250, 75, 30, 96, cl_BLACK);
		for(register int t = 0; t <= 7; t++){
 8004758:	2400      	movs	r4, #0
 800475a:	e023      	b.n	80047a4 <GrandState_Verita+0x1cbc>
			sprintf(TextDispBuffer,"%.2f",mcp_read.cv[t]);
 800475c:	4a37      	ldr	r2, [pc, #220]	; (800483c <GrandState_Verita+0x1d54>)
 800475e:	1d23      	adds	r3, r4, #4
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fb fef6 	bl	8000558 <__aeabi_f2d>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4933      	ldr	r1, [pc, #204]	; (8004840 <GrandState_Verita+0x1d58>)
 8004772:	4827      	ldr	r0, [pc, #156]	; (8004810 <GrandState_Verita+0x1d28>)
 8004774:	f009 f86e 	bl	800d854 <siprintf>
		//ili9341_WriteStringNoBG(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE);
		ili9341_WriteString(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8004778:	b2a3      	uxth	r3, r4
 800477a:	461a      	mov	r2, r3
 800477c:	0052      	lsls	r2, r2, #1
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	b29b      	uxth	r3, r3
 8004784:	334b      	adds	r3, #75	; 0x4b
 8004786:	b299      	uxth	r1, r3
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <GrandState_Verita+0x1d2c>)
 800478a:	2200      	movs	r2, #0
 800478c:	9202      	str	r2, [sp, #8]
 800478e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004792:	9201      	str	r2, [sp, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	9200      	str	r2, [sp, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <GrandState_Verita+0x1d28>)
 800479c:	20fa      	movs	r0, #250	; 0xfa
 800479e:	f001 fc70 	bl	8006082 <ili9341_WriteString>
		for(register int t = 0; t <= 7; t++){
 80047a2:	3401      	adds	r4, #1
 80047a4:	2c07      	cmp	r4, #7
 80047a6:	ddd9      	ble.n	800475c <GrandState_Verita+0x1c74>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 80047a8:	4b26      	ldr	r3, [pc, #152]	; (8004844 <GrandState_Verita+0x1d5c>)
 80047aa:	edd3 7a00 	vldr	s15, [r3]
 80047ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d504      	bpl.n	80047c2 <GrandState_Verita+0x1cda>
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e006      	b.n	80047d0 <GrandState_Verita+0x1ce8>
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <GrandState_Verita+0x1d5c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fb fec6 	bl	8000558 <__aeabi_f2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	491d      	ldr	r1, [pc, #116]	; (8004848 <GrandState_Verita+0x1d60>)
 80047d2:	480f      	ldr	r0, [pc, #60]	; (8004810 <GrandState_Verita+0x1d28>)
 80047d4:	f009 f83e 	bl	800d854 <siprintf>
		//sprintf(TextDispBuffer,"%2.1f C", client_temp_mcuCC);
			if(client_temp_mcuCC < MCUTemp_treash){
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <GrandState_Verita+0x1d5c>)
 80047da:	edd3 7a00 	vldr	s15, [r3]
 80047de:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800484c <GrandState_Verita+0x1d64>
 80047e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ea:	d531      	bpl.n	8004850 <GrandState_Verita+0x1d68>
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <GrandState_Verita+0x1d48>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	9202      	str	r2, [sp, #8]
 80047f2:	f24c 6218 	movw	r2, #50712	; 0xc618
 80047f6:	9201      	str	r2, [sp, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	9200      	str	r2, [sp, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <GrandState_Verita+0x1d28>)
 8004800:	21be      	movs	r1, #190	; 0xbe
 8004802:	2064      	movs	r0, #100	; 0x64
 8004804:	f001 fc3d 	bl	8006082 <ili9341_WriteString>
 8004808:	e030      	b.n	800486c <GrandState_Verita+0x1d84>
 800480a:	bf00      	nop
 800480c:	080101b0 	.word	0x080101b0
 8004810:	200006b8 	.word	0x200006b8
 8004814:	20000228 	.word	0x20000228
 8004818:	080101b8 	.word	0x080101b8
 800481c:	20000890 	.word	0x20000890
 8004820:	20000006 	.word	0x20000006
 8004824:	200008ac 	.word	0x200008ac
 8004828:	20000810 	.word	0x20000810
 800482c:	08010034 	.word	0x08010034
 8004830:	20000230 	.word	0x20000230
 8004834:	200007f8 	.word	0x200007f8
 8004838:	080101c4 	.word	0x080101c4
 800483c:	20000828 	.word	0x20000828
 8004840:	080101cc 	.word	0x080101cc
 8004844:	200007f4 	.word	0x200007f4
 8004848:	08010168 	.word	0x08010168
 800484c:	42700000 	.word	0x42700000
			}else{
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004850:	4b8c      	ldr	r3, [pc, #560]	; (8004a84 <GrandState_Verita+0x1f9c>)
 8004852:	2200      	movs	r2, #0
 8004854:	9202      	str	r2, [sp, #8]
 8004856:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	9200      	str	r2, [sp, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a89      	ldr	r2, [pc, #548]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004864:	21be      	movs	r1, #190	; 0xbe
 8004866:	2064      	movs	r0, #100	; 0x64
 8004868:	f001 fc0b 	bl	8006082 <ili9341_WriteString>
			}


		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 800486c:	4b87      	ldr	r3, [pc, #540]	; (8004a8c <GrandState_Verita+0x1fa4>)
 800486e:	789b      	ldrb	r3, [r3, #2]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8341 	beq.w	8004ef8 <GrandState_Verita+0x2410>
 8004876:	4b86      	ldr	r3, [pc, #536]	; (8004a90 <GrandState_Verita+0x1fa8>)
 8004878:	789b      	ldrb	r3, [r3, #2]
 800487a:	2b01      	cmp	r3, #1
 800487c:	f040 833c 	bne.w	8004ef8 <GrandState_Verita+0x2410>
			GrandState = pre_lobby;
 8004880:	4b84      	ldr	r3, [pc, #528]	; (8004a94 <GrandState_Verita+0x1fac>)
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
			VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 8004886:	4b84      	ldr	r3, [pc, #528]	; (8004a98 <GrandState_Verita+0x1fb0>)
 8004888:	2200      	movs	r2, #0
 800488a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 800488e:	2200      	movs	r2, #0
 8004890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004894:	4881      	ldr	r0, [pc, #516]	; (8004a9c <GrandState_Verita+0x1fb4>)
 8004896:	f002 ffbb 	bl	8007810 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 800489a:	4b7c      	ldr	r3, [pc, #496]	; (8004a8c <GrandState_Verita+0x1fa4>)
 800489c:	2200      	movs	r2, #0
 800489e:	709a      	strb	r2, [r3, #2]
			}
		break; // monitor
 80048a0:	e32a      	b.n	8004ef8 <GrandState_Verita+0x2410>


	case pre_danger:
		stboxp.choice_set = bpoxy_def;
 80048a2:	4b7b      	ldr	r3, [pc, #492]	; (8004a90 <GrandState_Verita+0x1fa8>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80048a8:	2300      	movs	r3, #0
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	23d2      	movs	r3, #210	; 0xd2
 80048ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80048b2:	211e      	movs	r1, #30
 80048b4:	2000      	movs	r0, #0
 80048b6:	f001 fa3b 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_RED);
 80048ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	231e      	movs	r3, #30
 80048c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80048c6:	2100      	movs	r1, #0
 80048c8:	2000      	movs	r0, #0
 80048ca:	f001 fa31 	bl	8005d30 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Danger!!!");
 80048ce:	4974      	ldr	r1, [pc, #464]	; (8004aa0 <GrandState_Verita+0x1fb8>)
 80048d0:	486d      	ldr	r0, [pc, #436]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80048d2:	f008 ffbf 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(105, 5, TextDispBuffer, Font20, cl_WHITE);
 80048d6:	4b73      	ldr	r3, [pc, #460]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 80048d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048dc:	9201      	str	r2, [sp, #4]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	9200      	str	r2, [sp, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a68      	ldr	r2, [pc, #416]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80048e6:	2105      	movs	r1, #5
 80048e8:	2069      	movs	r0, #105	; 0x69
 80048ea:	f001 fc17 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back to lobby");
 80048ee:	496e      	ldr	r1, [pc, #440]	; (8004aa8 <GrandState_Verita+0x1fc0>)
 80048f0:	4865      	ldr	r0, [pc, #404]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80048f2:	f008 ffaf 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <GrandState_Verita+0x1f9c>)
 80048f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048fc:	9201      	str	r2, [sp, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	9200      	str	r2, [sp, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a60      	ldr	r2, [pc, #384]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004906:	21dc      	movs	r1, #220	; 0xdc
 8004908:	201e      	movs	r0, #30
 800490a:	f001 fc07 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Overcurrent Detect!");
 800490e:	4967      	ldr	r1, [pc, #412]	; (8004aac <GrandState_Verita+0x1fc4>)
 8004910:	485d      	ldr	r0, [pc, #372]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004912:	f008 ff9f 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(40, 70, TextDispBuffer, Font20, cl_WHITE);
 8004916:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 8004918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800491c:	9201      	str	r2, [sp, #4]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	9200      	str	r2, [sp, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004926:	2146      	movs	r1, #70	; 0x46
 8004928:	2028      	movs	r0, #40	; 0x28
 800492a:	f001 fbf7 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 800492e:	4960      	ldr	r1, [pc, #384]	; (8004ab0 <GrandState_Verita+0x1fc8>)
 8004930:	4855      	ldr	r0, [pc, #340]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004932:	f008 ff8f 	bl	800d854 <siprintf>
		ili9341_WriteString(20, 100, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8004936:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <GrandState_Verita+0x1f9c>)
 8004938:	2200      	movs	r2, #0
 800493a:	9202      	str	r2, [sp, #8]
 800493c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004940:	9201      	str	r2, [sp, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	9200      	str	r2, [sp, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a4f      	ldr	r2, [pc, #316]	; (8004a88 <GrandState_Verita+0x1fa0>)
 800494a:	2164      	movs	r1, #100	; 0x64
 800494c:	2014      	movs	r0, #20
 800494e:	f001 fb98 	bl	8006082 <ili9341_WriteString>

		sprintf(TextDispBuffer,"I Brd:");
 8004952:	4958      	ldr	r1, [pc, #352]	; (8004ab4 <GrandState_Verita+0x1fcc>)
 8004954:	484c      	ldr	r0, [pc, #304]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004956:	f008 ff7d 	bl	800d854 <siprintf>
		ili9341_WriteString(20, 130, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 800495a:	4b4a      	ldr	r3, [pc, #296]	; (8004a84 <GrandState_Verita+0x1f9c>)
 800495c:	2200      	movs	r2, #0
 800495e:	9202      	str	r2, [sp, #8]
 8004960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004964:	9201      	str	r2, [sp, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	9200      	str	r2, [sp, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a46      	ldr	r2, [pc, #280]	; (8004a88 <GrandState_Verita+0x1fa0>)
 800496e:	2182      	movs	r1, #130	; 0x82
 8004970:	2014      	movs	r0, #20
 8004972:	f001 fb86 	bl	8006082 <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8004976:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <GrandState_Verita+0x1fd0>)
 8004978:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800497c:	461a      	mov	r2, r3
 800497e:	494f      	ldr	r1, [pc, #316]	; (8004abc <GrandState_Verita+0x1fd4>)
 8004980:	4841      	ldr	r0, [pc, #260]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004982:	f008 ff67 	bl	800d854 <siprintf>
		if(inata.CURRENT >= Current_limit_mA){
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <GrandState_Verita+0x1fd0>)
 8004988:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800498c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004990:	db1e      	blt.n	80049d0 <GrandState_Verita+0x1ee8>
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8004992:	4b44      	ldr	r3, [pc, #272]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 8004994:	2200      	movs	r2, #0
 8004996:	9202      	str	r2, [sp, #8]
 8004998:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800499c:	9201      	str	r2, [sp, #4]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	9200      	str	r2, [sp, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a38      	ldr	r2, [pc, #224]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80049a6:	2164      	movs	r1, #100	; 0x64
 80049a8:	2078      	movs	r0, #120	; 0x78
 80049aa:	f001 fb6a 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteStringNoBG(220, 100, TextDispBuffer, Font20, cl_RED);
 80049ae:	4944      	ldr	r1, [pc, #272]	; (8004ac0 <GrandState_Verita+0x1fd8>)
 80049b0:	4835      	ldr	r0, [pc, #212]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80049b2:	f008 ff4f 	bl	800d854 <siprintf>
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 80049b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80049bc:	9201      	str	r2, [sp, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	9200      	str	r2, [sp, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a30      	ldr	r2, [pc, #192]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	20dc      	movs	r0, #220	; 0xdc
 80049ca:	f001 fba7 	bl	800611c <ili9341_WriteStringNoBG>
 80049ce:	e00d      	b.n	80049ec <GrandState_Verita+0x1f04>
		}else{
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80049d0:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	9202      	str	r2, [sp, #8]
 80049d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80049e4:	2164      	movs	r1, #100	; 0x64
 80049e6:	2078      	movs	r0, #120	; 0x78
 80049e8:	f001 fb4b 	bl	8006082 <ili9341_WriteString>
			}

		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 80049ec:	4b35      	ldr	r3, [pc, #212]	; (8004ac4 <GrandState_Verita+0x1fdc>)
 80049ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049f2:	461a      	mov	r2, r3
 80049f4:	4931      	ldr	r1, [pc, #196]	; (8004abc <GrandState_Verita+0x1fd4>)
 80049f6:	4824      	ldr	r0, [pc, #144]	; (8004a88 <GrandState_Verita+0x1fa0>)
 80049f8:	f008 ff2c 	bl	800d854 <siprintf>
		if(inatb.CURRENT >= Current_limit_mA){
 80049fc:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <GrandState_Verita+0x1fdc>)
 80049fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a02:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004a06:	db1e      	blt.n	8004a46 <GrandState_Verita+0x1f5e>
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8004a08:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	9202      	str	r2, [sp, #8]
 8004a0e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004a12:	9201      	str	r2, [sp, #4]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	9200      	str	r2, [sp, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004a1c:	2182      	movs	r1, #130	; 0x82
 8004a1e:	2078      	movs	r0, #120	; 0x78
 8004a20:	f001 fb2f 	bl	8006082 <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteStringNoBG(220, 130, TextDispBuffer, Font20, cl_RED);
 8004a24:	4926      	ldr	r1, [pc, #152]	; (8004ac0 <GrandState_Verita+0x1fd8>)
 8004a26:	4818      	ldr	r0, [pc, #96]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004a28:	f008 ff14 	bl	800d854 <siprintf>
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 8004a2e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	9200      	str	r2, [sp, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004a3c:	2182      	movs	r1, #130	; 0x82
 8004a3e:	20dc      	movs	r0, #220	; 0xdc
 8004a40:	f001 fb6c 	bl	800611c <ili9341_WriteStringNoBG>
 8004a44:	e00d      	b.n	8004a62 <GrandState_Verita+0x1f7a>
		}else{
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8004a46:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <GrandState_Verita+0x1fbc>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	9202      	str	r2, [sp, #8]
 8004a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a50:	9201      	str	r2, [sp, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	9200      	str	r2, [sp, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0b      	ldr	r2, [pc, #44]	; (8004a88 <GrandState_Verita+0x1fa0>)
 8004a5a:	2182      	movs	r1, #130	; 0x82
 8004a5c:	2078      	movs	r0, #120	; 0x78
 8004a5e:	f001 fb10 	bl	8006082 <ili9341_WriteString>
			}

		GrandState = danger;
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <GrandState_Verita+0x1fac>)
 8004a64:	2210      	movs	r2, #16
 8004a66:	701a      	strb	r2, [r3, #0]
		break;
 8004a68:	e24f      	b.n	8004f0a <GrandState_Verita+0x2422>

	case danger:

		if(k_flag.cnt){ //// Back to lobby
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <GrandState_Verita+0x1fa4>)
 8004a6c:	789b      	ldrb	r3, [r3, #2]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8244 	beq.w	8004efc <GrandState_Verita+0x2414>
			GrandState = pre_lobby;
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <GrandState_Verita+0x1fac>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <GrandState_Verita+0x1fa4>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	709a      	strb	r2, [r3, #2]
			}
		break;
 8004a80:	e23c      	b.n	8004efc <GrandState_Verita+0x2414>
 8004a82:	bf00      	nop
 8004a84:	20000230 	.word	0x20000230
 8004a88:	200006b8 	.word	0x200006b8
 8004a8c:	20000890 	.word	0x20000890
 8004a90:	200008ac 	.word	0x200008ac
 8004a94:	20000006 	.word	0x20000006
 8004a98:	20000784 	.word	0x20000784
 8004a9c:	40020800 	.word	0x40020800
 8004aa0:	080101d4 	.word	0x080101d4
 8004aa4:	20000238 	.word	0x20000238
 8004aa8:	080101e0 	.word	0x080101e0
 8004aac:	080101f0 	.word	0x080101f0
 8004ab0:	08010024 	.word	0x08010024
 8004ab4:	0801001c 	.word	0x0801001c
 8004ab8:	200007f8 	.word	0x200007f8
 8004abc:	08010034 	.word	0x08010034
 8004ac0:	08010038 	.word	0x08010038
 8004ac4:	20000810 	.word	0x20000810

	case pre_about:
		stboxp.choice_set = bpoxy_no;
 8004ac8:	4b99      	ldr	r3, [pc, #612]	; (8004d30 <GrandState_Verita+0x2248>)
 8004aca:	2203      	movs	r2, #3
 8004acc:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	23d2      	movs	r3, #210	; 0xd2
 8004ad4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ad8:	211e      	movs	r1, #30
 8004ada:	2000      	movs	r0, #0
 8004adc:	f001 f928 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004ae0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	231e      	movs	r3, #30
 8004ae8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004aec:	2100      	movs	r1, #0
 8004aee:	2000      	movs	r0, #0
 8004af0:	f001 f91e 	bl	8005d30 <ili9341_FillRect>

		sprintf(TextDispBuffer,"About Verita");
 8004af4:	498f      	ldr	r1, [pc, #572]	; (8004d34 <GrandState_Verita+0x224c>)
 8004af6:	4890      	ldr	r0, [pc, #576]	; (8004d38 <GrandState_Verita+0x2250>)
 8004af8:	f008 feac 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_BLACK);
 8004afc:	4b8f      	ldr	r3, [pc, #572]	; (8004d3c <GrandState_Verita+0x2254>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	9201      	str	r2, [sp, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a8b      	ldr	r2, [pc, #556]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b0a:	2105      	movs	r1, #5
 8004b0c:	2050      	movs	r0, #80	; 0x50
 8004b0e:	f001 fb05 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Next->");
 8004b12:	498b      	ldr	r1, [pc, #556]	; (8004d40 <GrandState_Verita+0x2258>)
 8004b14:	4888      	ldr	r0, [pc, #544]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b16:	f008 fe9d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8004b1a:	4b8a      	ldr	r3, [pc, #552]	; (8004d44 <GrandState_Verita+0x225c>)
 8004b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b20:	9201      	str	r2, [sp, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	9200      	str	r2, [sp, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a83      	ldr	r2, [pc, #524]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b2a:	21dc      	movs	r1, #220	; 0xdc
 8004b2c:	201e      	movs	r0, #30
 8004b2e:	f001 faf5 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Verita's Mission is to help the user to check NUCLEO boards' health.");
 8004b32:	4985      	ldr	r1, [pc, #532]	; (8004d48 <GrandState_Verita+0x2260>)
 8004b34:	4880      	ldr	r0, [pc, #512]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b36:	f008 fe8d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 35, TextDispBuffer, Font16, cl_WHITE);
 8004b3a:	4b82      	ldr	r3, [pc, #520]	; (8004d44 <GrandState_Verita+0x225c>)
 8004b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b40:	9201      	str	r2, [sp, #4]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	9200      	str	r2, [sp, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a7b      	ldr	r2, [pc, #492]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b4a:	2123      	movs	r1, #35	; 0x23
 8004b4c:	2014      	movs	r0, #20
 8004b4e:	f001 fae5 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Visit more at:");
 8004b52:	497e      	ldr	r1, [pc, #504]	; (8004d4c <GrandState_Verita+0x2264>)
 8004b54:	4878      	ldr	r0, [pc, #480]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b56:	f008 fe7d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 100, TextDispBuffer, Font16, cl_WHITE);
 8004b5a:	4b7a      	ldr	r3, [pc, #488]	; (8004d44 <GrandState_Verita+0x225c>)
 8004b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	9200      	str	r2, [sp, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a73      	ldr	r2, [pc, #460]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b6a:	2164      	movs	r1, #100	; 0x64
 8004b6c:	2014      	movs	r0, #20
 8004b6e:	f001 fad5 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"https://");
 8004b72:	4977      	ldr	r1, [pc, #476]	; (8004d50 <GrandState_Verita+0x2268>)
 8004b74:	4870      	ldr	r0, [pc, #448]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b76:	f008 fe6d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 125, TextDispBuffer, Font16, cl_CYAN);
 8004b7a:	4b72      	ldr	r3, [pc, #456]	; (8004d44 <GrandState_Verita+0x225c>)
 8004b7c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b80:	9201      	str	r2, [sp, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	9200      	str	r2, [sp, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6b      	ldr	r2, [pc, #428]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b8a:	217d      	movs	r1, #125	; 0x7d
 8004b8c:	2014      	movs	r0, #20
 8004b8e:	f001 fac5 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"kmutt.me/owlsoffice.verita");
 8004b92:	4970      	ldr	r1, [pc, #448]	; (8004d54 <GrandState_Verita+0x226c>)
 8004b94:	4868      	ldr	r0, [pc, #416]	; (8004d38 <GrandState_Verita+0x2250>)
 8004b96:	f008 fe5d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 140, TextDispBuffer, Font16, cl_CYAN);
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <GrandState_Verita+0x225c>)
 8004b9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004ba0:	9201      	str	r2, [sp, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	9200      	str	r2, [sp, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a63      	ldr	r2, [pc, #396]	; (8004d38 <GrandState_Verita+0x2250>)
 8004baa:	218c      	movs	r1, #140	; 0x8c
 8004bac:	2014      	movs	r0, #20
 8004bae:	f001 fab5 	bl	800611c <ili9341_WriteStringNoBG>
		//owlhor/Verita_NucleoF411RETester
		sprintf(TextDispBuffer,"github.com/owlhor/");
 8004bb2:	4969      	ldr	r1, [pc, #420]	; (8004d58 <GrandState_Verita+0x2270>)
 8004bb4:	4860      	ldr	r0, [pc, #384]	; (8004d38 <GrandState_Verita+0x2250>)
 8004bb6:	f008 fe4d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 165, TextDispBuffer, Font16, cl_CYAN);
 8004bba:	4b62      	ldr	r3, [pc, #392]	; (8004d44 <GrandState_Verita+0x225c>)
 8004bbc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004bc0:	9201      	str	r2, [sp, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	9200      	str	r2, [sp, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5b      	ldr	r2, [pc, #364]	; (8004d38 <GrandState_Verita+0x2250>)
 8004bca:	21a5      	movs	r1, #165	; 0xa5
 8004bcc:	2014      	movs	r0, #20
 8004bce:	f001 faa5 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Verita_NucleoF411RETester");
 8004bd2:	4962      	ldr	r1, [pc, #392]	; (8004d5c <GrandState_Verita+0x2274>)
 8004bd4:	4858      	ldr	r0, [pc, #352]	; (8004d38 <GrandState_Verita+0x2250>)
 8004bd6:	f008 fe3d 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(20, 180, TextDispBuffer, Font16, cl_CYAN);
 8004bda:	4b5a      	ldr	r3, [pc, #360]	; (8004d44 <GrandState_Verita+0x225c>)
 8004bdc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004be0:	9201      	str	r2, [sp, #4]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	9200      	str	r2, [sp, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a53      	ldr	r2, [pc, #332]	; (8004d38 <GrandState_Verita+0x2250>)
 8004bea:	21b4      	movs	r1, #180	; 0xb4
 8004bec:	2014      	movs	r0, #20
 8004bee:	f001 fa95 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Program Version: %08X", FW_Master_Ver);
 8004bf2:	4a5b      	ldr	r2, [pc, #364]	; (8004d60 <GrandState_Verita+0x2278>)
 8004bf4:	495b      	ldr	r1, [pc, #364]	; (8004d64 <GrandState_Verita+0x227c>)
 8004bf6:	4850      	ldr	r0, [pc, #320]	; (8004d38 <GrandState_Verita+0x2250>)
 8004bf8:	f008 fe2c 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(135, 215, TextDispBuffer, Font12, cl_NAVY);
 8004bfc:	4b5a      	ldr	r3, [pc, #360]	; (8004d68 <GrandState_Verita+0x2280>)
 8004bfe:	220f      	movs	r2, #15
 8004c00:	9201      	str	r2, [sp, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	9200      	str	r2, [sp, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <GrandState_Verita+0x2250>)
 8004c0a:	21d7      	movs	r1, #215	; 0xd7
 8004c0c:	2087      	movs	r0, #135	; 0x87
 8004c0e:	f001 fa85 	bl	800611c <ili9341_WriteStringNoBG>

		GrandState = about;
 8004c12:	4b56      	ldr	r3, [pc, #344]	; (8004d6c <GrandState_Verita+0x2284>)
 8004c14:	2212      	movs	r2, #18
 8004c16:	701a      	strb	r2, [r3, #0]
		break; ////pre_about
 8004c18:	e177      	b.n	8004f0a <GrandState_Verita+0x2422>

	case about:
		stboxp.choice_set = bpoxy_def;
 8004c1a:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <GrandState_Verita+0x2248>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	705a      	strb	r2, [r3, #1]

		if(k_flag.cnt){ //// Back to lobby
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <GrandState_Verita+0x2288>)
 8004c22:	789b      	ldrb	r3, [r3, #2]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 816b 	beq.w	8004f00 <GrandState_Verita+0x2418>
			GrandState = pre_author;
 8004c2a:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <GrandState_Verita+0x2284>)
 8004c2c:	2213      	movs	r2, #19
 8004c2e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c36:	484f      	ldr	r0, [pc, #316]	; (8004d74 <GrandState_Verita+0x228c>)
 8004c38:	f002 fdea 	bl	8007810 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <GrandState_Verita+0x2288>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	709a      	strb	r2, [r3, #2]
			}
		break; ////about
 8004c42:	e15d      	b.n	8004f00 <GrandState_Verita+0x2418>

	case pre_author:
			stboxp.choice_set = bpoxy_def;
 8004c44:	4b3a      	ldr	r3, [pc, #232]	; (8004d30 <GrandState_Verita+0x2248>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	23d2      	movs	r3, #210	; 0xd2
 8004c50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c54:	211e      	movs	r1, #30
 8004c56:	2000      	movs	r0, #0
 8004c58:	f001 f86a 	bl	8005d30 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004c5c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	231e      	movs	r3, #30
 8004c64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f001 f860 	bl	8005d30 <ili9341_FillRect>

			sprintf(TextDispBuffer,"Authors");
 8004c70:	4941      	ldr	r1, [pc, #260]	; (8004d78 <GrandState_Verita+0x2290>)
 8004c72:	4831      	ldr	r0, [pc, #196]	; (8004d38 <GrandState_Verita+0x2250>)
 8004c74:	f008 fdee 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(100, 5, TextDispBuffer, Font20, cl_BLACK);
 8004c78:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <GrandState_Verita+0x2254>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	9201      	str	r2, [sp, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <GrandState_Verita+0x2250>)
 8004c86:	2105      	movs	r1, #5
 8004c88:	2064      	movs	r0, #100	; 0x64
 8004c8a:	f001 fa47 	bl	800611c <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Wipop Panyatipsakul");
 8004c8e:	493b      	ldr	r1, [pc, #236]	; (8004d7c <GrandState_Verita+0x2294>)
 8004c90:	4829      	ldr	r0, [pc, #164]	; (8004d38 <GrandState_Verita+0x2250>)
 8004c92:	f008 fddf 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(25, 35, TextDispBuffer, Font16, cl_WHITE);
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <GrandState_Verita+0x225c>)
 8004c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9c:	9201      	str	r2, [sp, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	9200      	str	r2, [sp, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <GrandState_Verita+0x2250>)
 8004ca6:	2123      	movs	r1, #35	; 0x23
 8004ca8:	2019      	movs	r0, #25
 8004caa:	f001 fa37 	bl	800611c <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"owl_hor | FRAB#7 FIBO");
 8004cae:	4934      	ldr	r1, [pc, #208]	; (8004d80 <GrandState_Verita+0x2298>)
 8004cb0:	4821      	ldr	r0, [pc, #132]	; (8004d38 <GrandState_Verita+0x2250>)
 8004cb2:	f008 fdcf 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(25, 55, TextDispBuffer, Font16, cl_WHITE);
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <GrandState_Verita+0x225c>)
 8004cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cbc:	9201      	str	r2, [sp, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	9200      	str	r2, [sp, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <GrandState_Verita+0x2250>)
 8004cc6:	2137      	movs	r1, #55	; 0x37
 8004cc8:	2019      	movs	r0, #25
 8004cca:	f001 fa27 	bl	800611c <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Press Knob to continue");
 8004cce:	492d      	ldr	r1, [pc, #180]	; (8004d84 <GrandState_Verita+0x229c>)
 8004cd0:	4819      	ldr	r0, [pc, #100]	; (8004d38 <GrandState_Verita+0x2250>)
 8004cd2:	f008 fdbf 	bl	800d854 <siprintf>
			ili9341_WriteStringNoBG(40, 220, TextDispBuffer, Font12, cl_WHITE);
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <GrandState_Verita+0x2280>)
 8004cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cdc:	9201      	str	r2, [sp, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	9200      	str	r2, [sp, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <GrandState_Verita+0x2250>)
 8004ce6:	21dc      	movs	r1, #220	; 0xdc
 8004ce8:	2028      	movs	r0, #40	; 0x28
 8004cea:	f001 fa17 	bl	800611c <ili9341_WriteStringNoBG>


			ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px4_PIC_owlhor_VI_b);
 8004cee:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <GrandState_Verita+0x22a0>)
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	215a      	movs	r1, #90	; 0x5a
 8004cf8:	2014      	movs	r0, #20
 8004cfa:	f001 f87c 	bl	8005df6 <ili9341_DrawRGBImage>
			ili9341_DrawRGBImage(170, 90, 128, 128, (uint16_t*)px3_PIC_wipop_sc);
 8004cfe:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <GrandState_Verita+0x22a4>)
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	215a      	movs	r1, #90	; 0x5a
 8004d08:	20aa      	movs	r0, #170	; 0xaa
 8004d0a:	f001 f874 	bl	8005df6 <ili9341_DrawRGBImage>

			GrandState = author;
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <GrandState_Verita+0x2284>)
 8004d10:	2214      	movs	r2, #20
 8004d12:	701a      	strb	r2, [r3, #0]
			break; ////pre_author
 8004d14:	e0f9      	b.n	8004f0a <GrandState_Verita+0x2422>

	case author:

			if(k_flag.cnt){ //// Back to lobby
 8004d16:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <GrandState_Verita+0x2288>)
 8004d18:	789b      	ldrb	r3, [r3, #2]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80f2 	beq.w	8004f04 <GrandState_Verita+0x241c>
			GrandState = pre_ppun;
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <GrandState_Verita+0x2284>)
 8004d22:	2215      	movs	r2, #21
 8004d24:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <GrandState_Verita+0x2288>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	709a      	strb	r2, [r3, #2]
			}
			break; ////author
 8004d2c:	e0ea      	b.n	8004f04 <GrandState_Verita+0x241c>
 8004d2e:	bf00      	nop
 8004d30:	200008ac 	.word	0x200008ac
 8004d34:	0800ff6c 	.word	0x0800ff6c
 8004d38:	200006b8 	.word	0x200006b8
 8004d3c:	20000238 	.word	0x20000238
 8004d40:	08010204 	.word	0x08010204
 8004d44:	20000230 	.word	0x20000230
 8004d48:	0801020c 	.word	0x0801020c
 8004d4c:	08010254 	.word	0x08010254
 8004d50:	08010264 	.word	0x08010264
 8004d54:	08010270 	.word	0x08010270
 8004d58:	0801028c 	.word	0x0801028c
 8004d5c:	080102a0 	.word	0x080102a0
 8004d60:	10260523 	.word	0x10260523
 8004d64:	080102bc 	.word	0x080102bc
 8004d68:	20000228 	.word	0x20000228
 8004d6c:	20000006 	.word	0x20000006
 8004d70:	20000890 	.word	0x20000890
 8004d74:	40020800 	.word	0x40020800
 8004d78:	080102d4 	.word	0x080102d4
 8004d7c:	080102dc 	.word	0x080102dc
 8004d80:	080102f0 	.word	0x080102f0
 8004d84:	08010308 	.word	0x08010308
 8004d88:	08028160 	.word	0x08028160
 8004d8c:	08020160 	.word	0x08020160

	case pre_ppun:
		stboxp.choice_set = bpoxy_no;
 8004d90:	4b60      	ldr	r3, [pc, #384]	; (8004f14 <GrandState_Verita+0x242c>)
 8004d92:	2203      	movs	r2, #3
 8004d94:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004d96:	2300      	movs	r3, #0
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	23d2      	movs	r3, #210	; 0xd2
 8004d9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004da0:	211e      	movs	r1, #30
 8004da2:	2000      	movs	r0, #0
 8004da4:	f000 ffc4 	bl	8005d30 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004da8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	231e      	movs	r3, #30
 8004db0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004db4:	2100      	movs	r1, #0
 8004db6:	2000      	movs	r0, #0
 8004db8:	f000 ffba 	bl	8005d30 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Advisors");
 8004dbc:	4956      	ldr	r1, [pc, #344]	; (8004f18 <GrandState_Verita+0x2430>)
 8004dbe:	4857      	ldr	r0, [pc, #348]	; (8004f1c <GrandState_Verita+0x2434>)
 8004dc0:	f008 fd48 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(100, 5, TextDispBuffer, Font20, cl_BLACK);
 8004dc4:	4b56      	ldr	r3, [pc, #344]	; (8004f20 <GrandState_Verita+0x2438>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	9201      	str	r2, [sp, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	9200      	str	r2, [sp, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a52      	ldr	r2, [pc, #328]	; (8004f1c <GrandState_Verita+0x2434>)
 8004dd2:	2105      	movs	r1, #5
 8004dd4:	2064      	movs	r0, #100	; 0x64
 8004dd6:	f001 f9a1 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"#include");
 8004dda:	4952      	ldr	r1, [pc, #328]	; (8004f24 <GrandState_Verita+0x243c>)
 8004ddc:	484f      	ldr	r0, [pc, #316]	; (8004f1c <GrandState_Verita+0x2434>)
 8004dde:	f008 fd39 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(10, 35, TextDispBuffer, Font12, cl_CYAN);
 8004de2:	4b51      	ldr	r3, [pc, #324]	; (8004f28 <GrandState_Verita+0x2440>)
 8004de4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004de8:	9201      	str	r2, [sp, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	9200      	str	r2, [sp, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <GrandState_Verita+0x2434>)
 8004df2:	2123      	movs	r1, #35	; 0x23
 8004df4:	200a      	movs	r0, #10
 8004df6:	f001 f991 	bl	800611c <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"#include");
 8004dfa:	494a      	ldr	r1, [pc, #296]	; (8004f24 <GrandState_Verita+0x243c>)
 8004dfc:	4847      	ldr	r0, [pc, #284]	; (8004f1c <GrandState_Verita+0x2434>)
 8004dfe:	f008 fd29 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(10, 52, TextDispBuffer, Font12, cl_CYAN);
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <GrandState_Verita+0x2440>)
 8004e04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e08:	9201      	str	r2, [sp, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	9200      	str	r2, [sp, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e12:	2134      	movs	r1, #52	; 0x34
 8004e14:	200a      	movs	r0, #10
 8004e16:	f001 f981 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Aj PI Pitiwut Teerakittikul");
 8004e1a:	4944      	ldr	r1, [pc, #272]	; (8004f2c <GrandState_Verita+0x2444>)
 8004e1c:	483f      	ldr	r0, [pc, #252]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e1e:	f008 fd19 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(75, 35, TextDispBuffer, Font12, cl_WHITE);
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <GrandState_Verita+0x2440>)
 8004e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e28:	9201      	str	r2, [sp, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e32:	2123      	movs	r1, #35	; 0x23
 8004e34:	204b      	movs	r0, #75	; 0x4b
 8004e36:	f001 f971 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"P PUN Puttinart Archeewawanich");
 8004e3a:	493d      	ldr	r1, [pc, #244]	; (8004f30 <GrandState_Verita+0x2448>)
 8004e3c:	4837      	ldr	r0, [pc, #220]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e3e:	f008 fd09 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(75, 52, TextDispBuffer, Font12, cl_WHITE);
 8004e42:	4b39      	ldr	r3, [pc, #228]	; (8004f28 <GrandState_Verita+0x2440>)
 8004e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e48:	9201      	str	r2, [sp, #4]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	9200      	str	r2, [sp, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a32      	ldr	r2, [pc, #200]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e52:	2134      	movs	r1, #52	; 0x34
 8004e54:	204b      	movs	r0, #75	; 0x4b
 8004e56:	f001 f961 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Press Knob & Back to lobby");
 8004e5a:	4936      	ldr	r1, [pc, #216]	; (8004f34 <GrandState_Verita+0x244c>)
 8004e5c:	482f      	ldr	r0, [pc, #188]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e5e:	f008 fcf9 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(40, 220, TextDispBuffer, Font12, cl_WHITE);
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <GrandState_Verita+0x2440>)
 8004e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e68:	9201      	str	r2, [sp, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	9200      	str	r2, [sp, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e72:	21dc      	movs	r1, #220	; 0xdc
 8004e74:	2028      	movs	r0, #40	; 0x28
 8004e76:	f001 f951 	bl	800611c <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Positive Aura: No crash");
 8004e7a:	492f      	ldr	r1, [pc, #188]	; (8004f38 <GrandState_Verita+0x2450>)
 8004e7c:	4827      	ldr	r0, [pc, #156]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e7e:	f008 fce9 	bl	800d854 <siprintf>
		ili9341_WriteStringNoBG(30, 70, TextDispBuffer, Font16, cl_GREENYELLOW);
 8004e82:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <GrandState_Verita+0x2454>)
 8004e84:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8004e88:	9201      	str	r2, [sp, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	9200      	str	r2, [sp, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <GrandState_Verita+0x2434>)
 8004e92:	2146      	movs	r1, #70	; 0x46
 8004e94:	201e      	movs	r0, #30
 8004e96:	f001 f941 	bl	800611c <ili9341_WriteStringNoBG>

		ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px0_PIC_ajpi);
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <GrandState_Verita+0x2458>)
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	2280      	movs	r2, #128	; 0x80
 8004ea2:	215a      	movs	r1, #90	; 0x5a
 8004ea4:	2014      	movs	r0, #20
 8004ea6:	f000 ffa6 	bl	8005df6 <ili9341_DrawRGBImage>
		ili9341_DrawRGBImage(170, 90, 126, 127, (uint16_t*)px1_PIC_ppun);
 8004eaa:	4b26      	ldr	r3, [pc, #152]	; (8004f44 <GrandState_Verita+0x245c>)
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	237f      	movs	r3, #127	; 0x7f
 8004eb0:	227e      	movs	r2, #126	; 0x7e
 8004eb2:	215a      	movs	r1, #90	; 0x5a
 8004eb4:	20aa      	movs	r0, #170	; 0xaa
 8004eb6:	f000 ff9e 	bl	8005df6 <ili9341_DrawRGBImage>

		GrandState = ppun;
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <GrandState_Verita+0x2460>)
 8004ebc:	2216      	movs	r2, #22
 8004ebe:	701a      	strb	r2, [r3, #0]
		break; ////pre_ppun
 8004ec0:	e023      	b.n	8004f0a <GrandState_Verita+0x2422>

	case ppun:

		if(k_flag.cnt){ //// Back to lobby
 8004ec2:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <GrandState_Verita+0x2464>)
 8004ec4:	789b      	ldrb	r3, [r3, #2]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01e      	beq.n	8004f08 <GrandState_Verita+0x2420>
		GrandState = pre_lobby;
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <GrandState_Verita+0x2460>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ed6:	481e      	ldr	r0, [pc, #120]	; (8004f50 <GrandState_Verita+0x2468>)
 8004ed8:	f002 fc9a 	bl	8007810 <HAL_GPIO_WritePin>
		k_flag.cnt = 0;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <GrandState_Verita+0x2464>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	709a      	strb	r2, [r3, #2]
		}
		break; ////ppun
 8004ee2:	e011      	b.n	8004f08 <GrandState_Verita+0x2420>
		break; // lobby
 8004ee4:	bf00      	nop
 8004ee6:	e010      	b.n	8004f0a <GrandState_Verita+0x2422>
		break;
 8004ee8:	bf00      	nop
 8004eea:	e00e      	b.n	8004f0a <GrandState_Verita+0x2422>
		break; //hw_chk
 8004eec:	bf00      	nop
 8004eee:	e00c      	b.n	8004f0a <GrandState_Verita+0x2422>
		break;
 8004ef0:	bf00      	nop
 8004ef2:	e00a      	b.n	8004f0a <GrandState_Verita+0x2422>
			break; //gpio_chk
 8004ef4:	bf00      	nop
 8004ef6:	e008      	b.n	8004f0a <GrandState_Verita+0x2422>
		break; // monitor
 8004ef8:	bf00      	nop
 8004efa:	e006      	b.n	8004f0a <GrandState_Verita+0x2422>
		break;
 8004efc:	bf00      	nop
 8004efe:	e004      	b.n	8004f0a <GrandState_Verita+0x2422>
		break; ////about
 8004f00:	bf00      	nop
 8004f02:	e002      	b.n	8004f0a <GrandState_Verita+0x2422>
			break; ////author
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <GrandState_Verita+0x2422>
		break; ////ppun
 8004f08:	bf00      	nop
	}
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	bf00      	nop
 8004f14:	200008ac 	.word	0x200008ac
 8004f18:	08010320 	.word	0x08010320
 8004f1c:	200006b8 	.word	0x200006b8
 8004f20:	20000238 	.word	0x20000238
 8004f24:	0801032c 	.word	0x0801032c
 8004f28:	20000228 	.word	0x20000228
 8004f2c:	08010338 	.word	0x08010338
 8004f30:	08010354 	.word	0x08010354
 8004f34:	08010374 	.word	0x08010374
 8004f38:	08010390 	.word	0x08010390
 8004f3c:	20000230 	.word	0x20000230
 8004f40:	0801045c 	.word	0x0801045c
 8004f44:	0801845c 	.word	0x0801845c
 8004f48:	20000006 	.word	0x20000006
 8004f4c:	20000890 	.word	0x20000890
 8004f50:	40020800 	.word	0x40020800
 8004f54:	00000000 	.word	0x00000000

08004f58 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80fb      	strh	r3, [r7, #6]
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb fae5 	bl	8000534 <__aeabi_i2d>
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <ADCTVolta+0x58>)
 8004f70:	f7fb fc74 	bl	800085c <__aeabi_ddiv>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	a30a      	add	r3, pc, #40	; (adr r3, 8004fa8 <ADCTVolta+0x50>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb fb41 	bl	8000608 <__aeabi_dmul>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f7fb fe33 	bl	8000bf8 <__aeabi_d2f>
 8004f92:	4603      	mov	r3, r0
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eeb0 0a67 	vmov.f32	s0, s15
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	66666666 	.word	0x66666666
 8004fac:	400a6666 	.word	0x400a6666
 8004fb0:	40b00000 	.word	0x40b00000
 8004fb4:	00000000 	.word	0x00000000

08004fb8 <TempEquat>:
float TempEquat(float Vs){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fb fac8 	bl	8000558 <__aeabi_f2d>
 8004fc8:	a314      	add	r3, pc, #80	; (adr r3, 800501c <TempEquat+0x64>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb f963 	bl	8000298 <__aeabi_dsub>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	a312      	add	r3, pc, #72	; (adr r3, 8005024 <TempEquat+0x6c>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb fc3c 	bl	800085c <__aeabi_ddiv>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <TempEquat+0x60>)
 8004ff2:	f7fb f953 	bl	800029c <__adddf3>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f7fb fdfb 	bl	8000bf8 <__aeabi_d2f>
 8005002:	4603      	mov	r3, r0
 8005004:	ee07 3a90 	vmov	s15, r3
}
 8005008:	eeb0 0a67 	vmov.f32	s0, s15
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	f3af 8000 	nop.w
 8005018:	40390000 	.word	0x40390000
 800501c:	851eb852 	.word	0x851eb852
 8005020:	3fe851eb 	.word	0x3fe851eb
 8005024:	47ae147b 	.word	0x47ae147b
 8005028:	3f647ae1 	.word	0x3f647ae1

0800502c <resetgpio_char>:
		 tyyy |= ( GPIO_NOPULL << (9 * 2U));
		 tyyy |= ( GPIO_NOPULL << (10 * 2U));
		 GPIOA->PUPDR = tyyy;
}

void resetgpio_char(){
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "A_PUR: ");
 8005030:	4912      	ldr	r1, [pc, #72]	; (800507c <resetgpio_char+0x50>)
 8005032:	4813      	ldr	r0, [pc, #76]	; (8005080 <resetgpio_char+0x54>)
 8005034:	f008 fc0e 	bl	800d854 <siprintf>
	sprintf(WR_B_PUPDR, "B_PUR: ");
 8005038:	4912      	ldr	r1, [pc, #72]	; (8005084 <resetgpio_char+0x58>)
 800503a:	4813      	ldr	r0, [pc, #76]	; (8005088 <resetgpio_char+0x5c>)
 800503c:	f008 fc0a 	bl	800d854 <siprintf>
	sprintf(WR_C_PUPDR, "C_PUR: ");
 8005040:	4912      	ldr	r1, [pc, #72]	; (800508c <resetgpio_char+0x60>)
 8005042:	4813      	ldr	r0, [pc, #76]	; (8005090 <resetgpio_char+0x64>)
 8005044:	f008 fc06 	bl	800d854 <siprintf>

	sprintf(WR_A_OPP, "A_OPP: ");
 8005048:	4912      	ldr	r1, [pc, #72]	; (8005094 <resetgpio_char+0x68>)
 800504a:	4813      	ldr	r0, [pc, #76]	; (8005098 <resetgpio_char+0x6c>)
 800504c:	f008 fc02 	bl	800d854 <siprintf>
	sprintf(WR_B_OPP, "B_OPP: ");
 8005050:	4912      	ldr	r1, [pc, #72]	; (800509c <resetgpio_char+0x70>)
 8005052:	4813      	ldr	r0, [pc, #76]	; (80050a0 <resetgpio_char+0x74>)
 8005054:	f008 fbfe 	bl	800d854 <siprintf>
	sprintf(WR_C_OPP, "C_OPP: ");
 8005058:	4912      	ldr	r1, [pc, #72]	; (80050a4 <resetgpio_char+0x78>)
 800505a:	4813      	ldr	r0, [pc, #76]	; (80050a8 <resetgpio_char+0x7c>)
 800505c:	f008 fbfa 	bl	800d854 <siprintf>

	sprintf(WR_A_OOD, "A_OOD: ");
 8005060:	4912      	ldr	r1, [pc, #72]	; (80050ac <resetgpio_char+0x80>)
 8005062:	4813      	ldr	r0, [pc, #76]	; (80050b0 <resetgpio_char+0x84>)
 8005064:	f008 fbf6 	bl	800d854 <siprintf>
	sprintf(WR_B_OOD, "B_OOD: ");
 8005068:	4912      	ldr	r1, [pc, #72]	; (80050b4 <resetgpio_char+0x88>)
 800506a:	4813      	ldr	r0, [pc, #76]	; (80050b8 <resetgpio_char+0x8c>)
 800506c:	f008 fbf2 	bl	800d854 <siprintf>
	sprintf(WR_C_OOD, "C_OOD: ");
 8005070:	4912      	ldr	r1, [pc, #72]	; (80050bc <resetgpio_char+0x90>)
 8005072:	4813      	ldr	r0, [pc, #76]	; (80050c0 <resetgpio_char+0x94>)
 8005074:	f008 fbee 	bl	800d854 <siprintf>
}
 8005078:	bf00      	nop
 800507a:	bd80      	pop	{r7, pc}
 800507c:	080103a8 	.word	0x080103a8
 8005080:	2000005c 	.word	0x2000005c
 8005084:	080103b0 	.word	0x080103b0
 8005088:	2000007c 	.word	0x2000007c
 800508c:	080103b8 	.word	0x080103b8
 8005090:	2000009c 	.word	0x2000009c
 8005094:	080103c0 	.word	0x080103c0
 8005098:	200000bc 	.word	0x200000bc
 800509c:	080103c8 	.word	0x080103c8
 80050a0:	200000dc 	.word	0x200000dc
 80050a4:	080103d0 	.word	0x080103d0
 80050a8:	200000fc 	.word	0x200000fc
 80050ac:	080103d8 	.word	0x080103d8
 80050b0:	2000011c 	.word	0x2000011c
 80050b4:	080103e0 	.word	0x080103e0
 80050b8:	2000013c 	.word	0x2000013c
 80050bc:	080103e8 	.word	0x080103e8
 80050c0:	2000015c 	.word	0x2000015c

080050c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d10f      	bne.n	80050f6 <HAL_GPIO_EXTI_Callback+0x32>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 80050d6:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <HAL_GPIO_EXTI_Callback+0x4c>)
 80050d8:	2208      	movs	r2, #8
 80050da:	701a      	strb	r2, [r3, #0]
		buzzr.priod_up = 250;
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_GPIO_EXTI_Callback+0x4c>)
 80050de:	22fa      	movs	r2, #250	; 0xfa
 80050e0:	805a      	strh	r2, [r3, #2]
		buzzr.priod_dn = 100;
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_GPIO_EXTI_Callback+0x4c>)
 80050e4:	2264      	movs	r2, #100	; 0x64
 80050e6:	809a      	strh	r2, [r3, #4]
		buzzer_scream_cnt();
 80050e8:	f7fd fc86 	bl	80029f8 <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 80050ec:	2202      	movs	r2, #2
 80050ee:	21a1      	movs	r1, #161	; 0xa1
 80050f0:	4808      	ldr	r0, [pc, #32]	; (8005114 <HAL_GPIO_EXTI_Callback+0x50>)
 80050f2:	f7fc fa9d 	bl	8001630 <Tx_UART_Verita_Command>
		//Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);

		}

	//// knob rotter button pressed
	if(GPIO_Pin == GPIO_PIN_7){
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d105      	bne.n	8005108 <HAL_GPIO_EXTI_Callback+0x44>
		k_flag.cnt++;
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_GPIO_EXTI_Callback+0x54>)
 80050fe:	789b      	ldrb	r3, [r3, #2]
 8005100:	3301      	adds	r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_GPIO_EXTI_Callback+0x54>)
 8005106:	709a      	strb	r2, [r3, #2]
	}
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000878 	.word	0x20000878
 8005114:	20000614 	.word	0x20000614
 8005118:	20000890 	.word	0x20000890

0800511c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a07      	ldr	r2, [pc, #28]	; (8005144 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d106      	bne.n	800513a <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a05      	ldr	r2, [pc, #20]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005134:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 8005136:	f7fd fc5f 	bl	80029f8 <buzzer_scream_cnt>
	}
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000544 	.word	0x20000544
 8005148:	20000870 	.word	0x20000870

0800514c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VRB_CL); //// try using only 1 slot 9 Buffer
 8005154:	4905      	ldr	r1, [pc, #20]	; (800516c <HAL_UART_RxCpltCallback+0x20>)
 8005156:	4806      	ldr	r0, [pc, #24]	; (8005170 <HAL_UART_RxCpltCallback+0x24>)
 8005158:	f7fc f8fa 	bl	8001350 <Rx_Verita_engine_callBak>
	Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 800515c:	4903      	ldr	r1, [pc, #12]	; (800516c <HAL_UART_RxCpltCallback+0x20>)
 800515e:	4805      	ldr	r0, [pc, #20]	; (8005174 <HAL_UART_RxCpltCallback+0x28>)
 8005160:	f7fc f9ec 	bl	800153c <Tx_Rq_Verita_engine>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000784 	.word	0x20000784
 8005170:	200007e8 	.word	0x200007e8
 8005174:	20000614 	.word	0x20000614

08005178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800517c:	b672      	cpsid	i
}
 800517e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005180:	e7fe      	b.n	8005180 <Error_Handler+0x8>
	...

08005184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <HAL_MspInit+0x4c>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	4a0f      	ldr	r2, [pc, #60]	; (80051d0 <HAL_MspInit+0x4c>)
 8005194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005198:	6453      	str	r3, [r2, #68]	; 0x44
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_MspInit+0x4c>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_MspInit+0x4c>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <HAL_MspInit+0x4c>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6413      	str	r3, [r2, #64]	; 0x40
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_MspInit+0x4c>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80051c2:	2007      	movs	r0, #7
 80051c4:	f001 fd36 	bl	8006c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a21      	ldr	r2, [pc, #132]	; (8005278 <HAL_I2C_MspInit+0xa4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d13c      	bne.n	8005270 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <HAL_I2C_MspInit+0xa8>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	4a1f      	ldr	r2, [pc, #124]	; (800527c <HAL_I2C_MspInit+0xa8>)
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	6313      	str	r3, [r2, #48]	; 0x30
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_I2C_MspInit+0xa8>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005218:	2312      	movs	r3, #18
 800521a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005220:	2303      	movs	r3, #3
 8005222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005224:	2304      	movs	r3, #4
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005228:	f107 0314 	add.w	r3, r7, #20
 800522c:	4619      	mov	r1, r3
 800522e:	4814      	ldr	r0, [pc, #80]	; (8005280 <HAL_I2C_MspInit+0xac>)
 8005230:	f002 f952 	bl	80074d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_I2C_MspInit+0xa8>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	4a0f      	ldr	r2, [pc, #60]	; (800527c <HAL_I2C_MspInit+0xa8>)
 800523e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005242:	6413      	str	r3, [r2, #64]	; 0x40
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_I2C_MspInit+0xa8>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005250:	2200      	movs	r2, #0
 8005252:	2100      	movs	r1, #0
 8005254:	201f      	movs	r0, #31
 8005256:	f001 fcf8 	bl	8006c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800525a:	201f      	movs	r0, #31
 800525c:	f001 fd11 	bl	8006c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005260:	2200      	movs	r2, #0
 8005262:	2100      	movs	r1, #0
 8005264:	2020      	movs	r0, #32
 8005266:	f001 fcf0 	bl	8006c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800526a:	2020      	movs	r0, #32
 800526c:	f001 fd09 	bl	8006c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005270:	bf00      	nop
 8005272:	3728      	adds	r7, #40	; 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40005400 	.word	0x40005400
 800527c:	40023800 	.word	0x40023800
 8005280:	40020400 	.word	0x40020400

08005284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	; 0x28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 0314 	add.w	r3, r7, #20
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <HAL_SPI_MspInit+0x84>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d12c      	bne.n	8005300 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <HAL_SPI_MspInit+0x88>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <HAL_SPI_MspInit+0x88>)
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b4:	6413      	str	r3, [r2, #64]	; 0x40
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <HAL_SPI_MspInit+0x88>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_SPI_MspInit+0x88>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <HAL_SPI_MspInit+0x88>)
 80052cc:	f043 0304 	orr.w	r3, r3, #4
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b0e      	ldr	r3, [pc, #56]	; (800530c <HAL_SPI_MspInit+0x88>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80052de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80052e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80052f0:	2306      	movs	r3, #6
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	4619      	mov	r1, r3
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <HAL_SPI_MspInit+0x8c>)
 80052fc:	f002 f8ec 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005300:	bf00      	nop
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40003c00 	.word	0x40003c00
 800530c:	40023800 	.word	0x40023800
 8005310:	40020800 	.word	0x40020800

08005314 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_TIM_Encoder_MspInit+0x84>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d12b      	bne.n	800538e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_TIM_Encoder_MspInit+0x88>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_TIM_Encoder_MspInit+0x88>)
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <HAL_TIM_Encoder_MspInit+0x88>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	4b11      	ldr	r3, [pc, #68]	; (800539c <HAL_TIM_Encoder_MspInit+0x88>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <HAL_TIM_Encoder_MspInit+0x88>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	6313      	str	r3, [r2, #48]	; 0x30
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_TIM_Encoder_MspInit+0x88>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800536e:	23c0      	movs	r3, #192	; 0xc0
 8005370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005372:	2302      	movs	r3, #2
 8005374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537a:	2300      	movs	r3, #0
 800537c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800537e:	2302      	movs	r3, #2
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	4619      	mov	r1, r3
 8005388:	4805      	ldr	r0, [pc, #20]	; (80053a0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800538a:	f002 f8a5 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800538e:	bf00      	nop
 8005390:	3728      	adds	r7, #40	; 0x28
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40000400 	.word	0x40000400
 800539c:	40023800 	.word	0x40023800
 80053a0:	40020000 	.word	0x40020000

080053a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <HAL_TIM_Base_MspInit+0x48>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d115      	bne.n	80053e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <HAL_TIM_Base_MspInit+0x4c>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	4a0c      	ldr	r2, [pc, #48]	; (80053f0 <HAL_TIM_Base_MspInit+0x4c>)
 80053c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c4:	6453      	str	r3, [r2, #68]	; 0x44
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <HAL_TIM_Base_MspInit+0x4c>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80053d2:	2200      	movs	r2, #0
 80053d4:	2100      	movs	r1, #0
 80053d6:	2019      	movs	r0, #25
 80053d8:	f001 fc37 	bl	8006c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80053dc:	2019      	movs	r0, #25
 80053de:	f001 fc50 	bl	8006c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40023800 	.word	0x40023800

080053f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08e      	sub	sp, #56	; 0x38
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a74      	ldr	r2, [pc, #464]	; (80055e4 <HAL_UART_MspInit+0x1f0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d135      	bne.n	8005482 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	4b73      	ldr	r3, [pc, #460]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	4a72      	ldr	r2, [pc, #456]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005420:	f043 0310 	orr.w	r3, r3, #16
 8005424:	6453      	str	r3, [r2, #68]	; 0x44
 8005426:	4b70      	ldr	r3, [pc, #448]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	4b6c      	ldr	r3, [pc, #432]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4a6b      	ldr	r2, [pc, #428]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6313      	str	r3, [r2, #48]	; 0x30
 8005442:	4b69      	ldr	r3, [pc, #420]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800544e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005454:	2302      	movs	r3, #2
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005458:	2300      	movs	r3, #0
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800545c:	2303      	movs	r3, #3
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005460:	2307      	movs	r3, #7
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005468:	4619      	mov	r1, r3
 800546a:	4860      	ldr	r0, [pc, #384]	; (80055ec <HAL_UART_MspInit+0x1f8>)
 800546c:	f002 f834 	bl	80074d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005470:	2200      	movs	r2, #0
 8005472:	2100      	movs	r1, #0
 8005474:	2025      	movs	r0, #37	; 0x25
 8005476:	f001 fbe8 	bl	8006c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800547a:	2025      	movs	r0, #37	; 0x25
 800547c:	f001 fc01 	bl	8006c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005480:	e0ab      	b.n	80055da <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a5a      	ldr	r2, [pc, #360]	; (80055f0 <HAL_UART_MspInit+0x1fc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d12c      	bne.n	80054e6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	4b55      	ldr	r3, [pc, #340]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	4a54      	ldr	r2, [pc, #336]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549a:	6413      	str	r3, [r2, #64]	; 0x40
 800549c:	4b52      	ldr	r3, [pc, #328]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4a4d      	ldr	r2, [pc, #308]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6313      	str	r3, [r2, #48]	; 0x30
 80054b8:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80054c4:	230c      	movs	r3, #12
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	2302      	movs	r3, #2
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d0:	2303      	movs	r3, #3
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054d4:	2307      	movs	r3, #7
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054dc:	4619      	mov	r1, r3
 80054de:	4843      	ldr	r0, [pc, #268]	; (80055ec <HAL_UART_MspInit+0x1f8>)
 80054e0:	f001 fffa 	bl	80074d8 <HAL_GPIO_Init>
}
 80054e4:	e079      	b.n	80055da <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a42      	ldr	r2, [pc, #264]	; (80055f4 <HAL_UART_MspInit+0x200>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d174      	bne.n	80055da <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 80054f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f8:	4a3b      	ldr	r2, [pc, #236]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 80054fa:	f043 0320 	orr.w	r3, r3, #32
 80054fe:	6453      	str	r3, [r2, #68]	; 0x44
 8005500:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	6313      	str	r3, [r2, #48]	; 0x30
 800551c:	4b32      	ldr	r3, [pc, #200]	; (80055e8 <HAL_UART_MspInit+0x1f4>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552e:	2302      	movs	r3, #2
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005536:	2303      	movs	r3, #3
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800553a:	2308      	movs	r3, #8
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800553e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005542:	4619      	mov	r1, r3
 8005544:	4829      	ldr	r0, [pc, #164]	; (80055ec <HAL_UART_MspInit+0x1f8>)
 8005546:	f001 ffc7 	bl	80074d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800554a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005550:	2302      	movs	r3, #2
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005554:	2301      	movs	r3, #1
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005558:	2303      	movs	r3, #3
 800555a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800555c:	2308      	movs	r3, #8
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005564:	4619      	mov	r1, r3
 8005566:	4821      	ldr	r0, [pc, #132]	; (80055ec <HAL_UART_MspInit+0x1f8>)
 8005568:	f001 ffb6 	bl	80074d8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800556c:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_UART_MspInit+0x204>)
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_UART_MspInit+0x208>)
 8005570:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005572:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <HAL_UART_MspInit+0x204>)
 8005574:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005578:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <HAL_UART_MspInit+0x204>)
 800557c:	2200      	movs	r2, #0
 800557e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <HAL_UART_MspInit+0x204>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005586:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <HAL_UART_MspInit+0x204>)
 8005588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_UART_MspInit+0x204>)
 8005590:	2200      	movs	r2, #0
 8005592:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005594:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <HAL_UART_MspInit+0x204>)
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_UART_MspInit+0x204>)
 800559c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <HAL_UART_MspInit+0x204>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <HAL_UART_MspInit+0x204>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80055ae:	4812      	ldr	r0, [pc, #72]	; (80055f8 <HAL_UART_MspInit+0x204>)
 80055b0:	f001 fb82 	bl	8006cb8 <HAL_DMA_Init>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80055ba:	f7ff fddd 	bl	8005178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <HAL_UART_MspInit+0x204>)
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <HAL_UART_MspInit+0x204>)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2100      	movs	r1, #0
 80055ce:	2047      	movs	r0, #71	; 0x47
 80055d0:	f001 fb3b 	bl	8006c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80055d4:	2047      	movs	r0, #71	; 0x47
 80055d6:	f001 fb54 	bl	8006c82 <HAL_NVIC_EnableIRQ>
}
 80055da:	bf00      	nop
 80055dc:	3738      	adds	r7, #56	; 0x38
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40020000 	.word	0x40020000
 80055f0:	40004400 	.word	0x40004400
 80055f4:	40011400 	.word	0x40011400
 80055f8:	20000658 	.word	0x20000658
 80055fc:	40026428 	.word	0x40026428

08005600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005604:	e7fe      	b.n	8005604 <NMI_Handler+0x4>

08005606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800560a:	e7fe      	b.n	800560a <HardFault_Handler+0x4>

0800560c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005610:	e7fe      	b.n	8005610 <MemManage_Handler+0x4>

08005612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005616:	e7fe      	b.n	8005616 <BusFault_Handler+0x4>

08005618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800561c:	e7fe      	b.n	800561c <UsageFault_Handler+0x4>

0800561e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800564c:	f001 f9de 	bl	8006a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}

08005654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005658:	2080      	movs	r0, #128	; 0x80
 800565a:	f002 f90d 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800566a:	f005 ff5a 	bl	800b522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000544 	.word	0x20000544

08005678 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800567c:	4802      	ldr	r0, [pc, #8]	; (8005688 <I2C1_EV_IRQHandler+0x10>)
 800567e:	f002 fd77 	bl	8008170 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000450 	.word	0x20000450

0800568c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005690:	4802      	ldr	r0, [pc, #8]	; (800569c <I2C1_ER_IRQHandler+0x10>)
 8005692:	f002 fede 	bl	8008452 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000450 	.word	0x20000450

080056a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <USART1_IRQHandler+0x10>)
 80056a6:	f006 fb47 	bl	800bd38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	2000058c 	.word	0x2000058c

080056b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80056b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056bc:	f002 f8dc 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056c0:	bf00      	nop
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <DMA2_Stream1_IRQHandler+0x10>)
 80056ca:	f001 fc8d 	bl	8006fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000658 	.word	0x20000658

080056d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80056dc:	4802      	ldr	r0, [pc, #8]	; (80056e8 <USART6_IRQHandler+0x10>)
 80056de:	f006 fb2b 	bl	800bd38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000614 	.word	0x20000614

080056ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
	return 1;
 80056f0:	2301      	movs	r3, #1
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <_kill>:

int _kill(int pid, int sig)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005706:	f007 fc09 	bl	800cf1c <__errno>
 800570a:	4603      	mov	r3, r0
 800570c:	2216      	movs	r2, #22
 800570e:	601a      	str	r2, [r3, #0]
	return -1;
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <_exit>:

void _exit (int status)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005724:	f04f 31ff 	mov.w	r1, #4294967295
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ffe7 	bl	80056fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800572e:	e7fe      	b.n	800572e <_exit+0x12>

08005730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00a      	b.n	8005758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005742:	f3af 8000 	nop.w
 8005746:	4601      	mov	r1, r0
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	60ba      	str	r2, [r7, #8]
 800574e:	b2ca      	uxtb	r2, r1
 8005750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3301      	adds	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	dbf0      	blt.n	8005742 <_read+0x12>
	}

return len;
 8005760:	687b      	ldr	r3, [r7, #4]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e009      	b.n	8005790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	60ba      	str	r2, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	dbf1      	blt.n	800577c <_write+0x12>
	}
	return len;
 8005798:	687b      	ldr	r3, [r7, #4]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_close>:

int _close(int file)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
	return -1;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ca:	605a      	str	r2, [r3, #4]
	return 0;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <_isatty>:

int _isatty(int file)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
	return 1;
 80057e2:	2301      	movs	r3, #1
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	return 0;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005814:	4a14      	ldr	r2, [pc, #80]	; (8005868 <_sbrk+0x5c>)
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <_sbrk+0x60>)
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <_sbrk+0x64>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <_sbrk+0x64>)
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <_sbrk+0x68>)
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <_sbrk+0x64>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d207      	bcs.n	800584c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800583c:	f007 fb6e 	bl	800cf1c <__errno>
 8005840:	4603      	mov	r3, r0
 8005842:	220c      	movs	r2, #12
 8005844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295
 800584a:	e009      	b.n	8005860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <_sbrk+0x64>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <_sbrk+0x64>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <_sbrk+0x64>)
 800585c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20020000 	.word	0x20020000
 800586c:	00000400 	.word	0x00000400
 8005870:	200008b8 	.word	0x200008b8
 8005874:	200008d8 	.word	0x200008d8

08005878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <SystemInit+0x20>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <SystemInit+0x20>)
 8005884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f000 fefe 	bl	80066a2 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80058a6:	2011      	movs	r0, #17
 80058a8:	f000 ff82 	bl	80067b0 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80058b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80058c6:	23f0      	movs	r3, #240	; 0xf0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80058da:	4b52      	ldr	r3, [pc, #328]	; (8005a24 <ili9341_Init+0x150>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d115      	bne.n	8005912 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80058e6:	4b4f      	ldr	r3, [pc, #316]	; (8005a24 <ili9341_Init+0x150>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	4b4c      	ldr	r3, [pc, #304]	; (8005a24 <ili9341_Init+0x150>)
 80058f2:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80058f4:	4b4b      	ldr	r3, [pc, #300]	; (8005a24 <ili9341_Init+0x150>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <ili9341_Init+0x30>
      LCD_IO_Init();
 8005900:	f000 feda 	bl	80066b8 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8005904:	4b47      	ldr	r3, [pc, #284]	; (8005a24 <ili9341_Init+0x150>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f043 0302 	orr.w	r3, r3, #2
 800590c:	b2da      	uxtb	r2, r3
 800590e:	4b45      	ldr	r3, [pc, #276]	; (8005a24 <ili9341_Init+0x150>)
 8005910:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8005912:	200a      	movs	r0, #10
 8005914:	f000 feba 	bl	800668c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8005918:	2001      	movs	r0, #1
 800591a:	f000 ff49 	bl	80067b0 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800591e:	200a      	movs	r0, #10
 8005920:	f000 feb4 	bl	800668c <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8005924:	2203      	movs	r2, #3
 8005926:	4940      	ldr	r1, [pc, #256]	; (8005a28 <ili9341_Init+0x154>)
 8005928:	20ef      	movs	r0, #239	; 0xef
 800592a:	f000 ffaf 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800592e:	2203      	movs	r2, #3
 8005930:	493e      	ldr	r1, [pc, #248]	; (8005a2c <ili9341_Init+0x158>)
 8005932:	20cf      	movs	r0, #207	; 0xcf
 8005934:	f000 ffaa 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8005938:	2204      	movs	r2, #4
 800593a:	493d      	ldr	r1, [pc, #244]	; (8005a30 <ili9341_Init+0x15c>)
 800593c:	20ed      	movs	r0, #237	; 0xed
 800593e:	f000 ffa5 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8005942:	2203      	movs	r2, #3
 8005944:	493b      	ldr	r1, [pc, #236]	; (8005a34 <ili9341_Init+0x160>)
 8005946:	20e8      	movs	r0, #232	; 0xe8
 8005948:	f000 ffa0 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800594c:	2205      	movs	r2, #5
 800594e:	493a      	ldr	r1, [pc, #232]	; (8005a38 <ili9341_Init+0x164>)
 8005950:	20cb      	movs	r0, #203	; 0xcb
 8005952:	f000 ff9b 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8005956:	2201      	movs	r2, #1
 8005958:	4938      	ldr	r1, [pc, #224]	; (8005a3c <ili9341_Init+0x168>)
 800595a:	20f7      	movs	r0, #247	; 0xf7
 800595c:	f000 ff96 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8005960:	2202      	movs	r2, #2
 8005962:	4937      	ldr	r1, [pc, #220]	; (8005a40 <ili9341_Init+0x16c>)
 8005964:	20ea      	movs	r0, #234	; 0xea
 8005966:	f000 ff91 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800596a:	2201      	movs	r2, #1
 800596c:	4935      	ldr	r1, [pc, #212]	; (8005a44 <ili9341_Init+0x170>)
 800596e:	20c0      	movs	r0, #192	; 0xc0
 8005970:	f000 ff8c 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8005974:	2201      	movs	r2, #1
 8005976:	4934      	ldr	r1, [pc, #208]	; (8005a48 <ili9341_Init+0x174>)
 8005978:	20c1      	movs	r0, #193	; 0xc1
 800597a:	f000 ff87 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800597e:	2202      	movs	r2, #2
 8005980:	4932      	ldr	r1, [pc, #200]	; (8005a4c <ili9341_Init+0x178>)
 8005982:	20c5      	movs	r0, #197	; 0xc5
 8005984:	f000 ff82 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8005988:	2201      	movs	r2, #1
 800598a:	4931      	ldr	r1, [pc, #196]	; (8005a50 <ili9341_Init+0x17c>)
 800598c:	20c7      	movs	r0, #199	; 0xc7
 800598e:	f000 ff7d 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8005992:	2201      	movs	r2, #1
 8005994:	492f      	ldr	r1, [pc, #188]	; (8005a54 <ili9341_Init+0x180>)
 8005996:	2037      	movs	r0, #55	; 0x37
 8005998:	f000 ff78 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800599c:	2201      	movs	r2, #1
 800599e:	492e      	ldr	r1, [pc, #184]	; (8005a58 <ili9341_Init+0x184>)
 80059a0:	203a      	movs	r0, #58	; 0x3a
 80059a2:	f000 ff73 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80059a6:	2202      	movs	r2, #2
 80059a8:	492c      	ldr	r1, [pc, #176]	; (8005a5c <ili9341_Init+0x188>)
 80059aa:	20b1      	movs	r0, #177	; 0xb1
 80059ac:	f000 ff6e 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80059b0:	2203      	movs	r2, #3
 80059b2:	492b      	ldr	r1, [pc, #172]	; (8005a60 <ili9341_Init+0x18c>)
 80059b4:	20b6      	movs	r0, #182	; 0xb6
 80059b6:	f000 ff69 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80059ba:	2201      	movs	r2, #1
 80059bc:	4925      	ldr	r1, [pc, #148]	; (8005a54 <ili9341_Init+0x180>)
 80059be:	20f2      	movs	r0, #242	; 0xf2
 80059c0:	f000 ff64 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80059c4:	2201      	movs	r2, #1
 80059c6:	4927      	ldr	r1, [pc, #156]	; (8005a64 <ili9341_Init+0x190>)
 80059c8:	2026      	movs	r0, #38	; 0x26
 80059ca:	f000 ff5f 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80059ce:	220f      	movs	r2, #15
 80059d0:	4925      	ldr	r1, [pc, #148]	; (8005a68 <ili9341_Init+0x194>)
 80059d2:	20e0      	movs	r0, #224	; 0xe0
 80059d4:	f000 ff5a 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80059d8:	220f      	movs	r2, #15
 80059da:	4924      	ldr	r1, [pc, #144]	; (8005a6c <ili9341_Init+0x198>)
 80059dc:	20e1      	movs	r0, #225	; 0xe1
 80059de:	f000 ff55 	bl	800688c <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80059e2:	2036      	movs	r0, #54	; 0x36
 80059e4:	f000 fee4 	bl	80067b0 <LCD_IO_WriteCmd8>
 80059e8:	2028      	movs	r0, #40	; 0x28
 80059ea:	f000 feff 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80059ee:	2011      	movs	r0, #17
 80059f0:	f000 fede 	bl	80067b0 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80059f4:	200a      	movs	r0, #10
 80059f6:	f000 fe49 	bl	800668c <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80059fa:	2300      	movs	r3, #0
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	23f0      	movs	r3, #240	; 0xf0
 8005a00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005a04:	2100      	movs	r1, #0
 8005a06:	2000      	movs	r0, #0
 8005a08:	f000 f992 	bl	8005d30 <ili9341_FillRect>
  LCD_Delay(10);
 8005a0c:	200a      	movs	r0, #10
 8005a0e:	f000 fe3d 	bl	800668c <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8005a12:	2029      	movs	r0, #41	; 0x29
 8005a14:	f000 fecc 	bl	80067b0 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8005a18:	200a      	movs	r0, #10
 8005a1a:	f000 fe37 	bl	800668c <LCD_Delay>
}
 8005a1e:	bf00      	nop
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200008bc 	.word	0x200008bc
 8005a28:	080103f0 	.word	0x080103f0
 8005a2c:	080103f4 	.word	0x080103f4
 8005a30:	080103f8 	.word	0x080103f8
 8005a34:	08010400 	.word	0x08010400
 8005a38:	08010404 	.word	0x08010404
 8005a3c:	0801040c 	.word	0x0801040c
 8005a40:	08010410 	.word	0x08010410
 8005a44:	08010414 	.word	0x08010414
 8005a48:	08010418 	.word	0x08010418
 8005a4c:	0801041c 	.word	0x0801041c
 8005a50:	08010420 	.word	0x08010420
 8005a54:	08010424 	.word	0x08010424
 8005a58:	08010428 	.word	0x08010428
 8005a5c:	0801042c 	.word	0x0801042c
 8005a60:	08010430 	.word	0x08010430
 8005a64:	08010434 	.word	0x08010434
 8005a68:	08010438 	.word	0x08010438
 8005a6c:	08010448 	.word	0x08010448

08005a70 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	80fb      	strh	r3, [r7, #6]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	80bb      	strh	r3, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8005a82:	202a      	movs	r0, #42	; 0x2a
 8005a84:	f000 fe94 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 feab 	bl	80067ec <LCD_IO_WriteData8>
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fea6 	bl	80067ec <LCD_IO_WriteData8>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe9f 	bl	80067ec <LCD_IO_WriteData8>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fe9a 	bl	80067ec <LCD_IO_WriteData8>
 8005ab8:	202b      	movs	r0, #43	; 0x2b
 8005aba:	f000 fe79 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005abe:	88bb      	ldrh	r3, [r7, #4]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fe90 	bl	80067ec <LCD_IO_WriteData8>
 8005acc:	88bb      	ldrh	r3, [r7, #4]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fe8b 	bl	80067ec <LCD_IO_WriteData8>
 8005ad6:	88bb      	ldrh	r3, [r7, #4]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fe84 	bl	80067ec <LCD_IO_WriteData8>
 8005ae4:	88bb      	ldrh	r3, [r7, #4]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fe7f 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8005aee:	202c      	movs	r0, #44	; 0x2c
 8005af0:	f000 fe5e 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005af4:	887b      	ldrh	r3, [r7, #2]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fe8e 	bl	8006818 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	80fb      	strh	r3, [r7, #6]
 8005b16:	4603      	mov	r3, r0
 8005b18:	80bb      	strh	r3, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	807b      	strh	r3, [r7, #2]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8005b22:	4a2a      	ldr	r2, [pc, #168]	; (8005bcc <ili9341_SetDisplayWindow+0xc8>)
 8005b24:	88bb      	ldrh	r3, [r7, #4]
 8005b26:	8013      	strh	r3, [r2, #0]
 8005b28:	88ba      	ldrh	r2, [r7, #4]
 8005b2a:	883b      	ldrh	r3, [r7, #0]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <ili9341_SetDisplayWindow+0xcc>)
 8005b36:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8005b38:	202a      	movs	r0, #42	; 0x2a
 8005b3a:	f000 fe39 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fe50 	bl	80067ec <LCD_IO_WriteData8>
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fe4b 	bl	80067ec <LCD_IO_WriteData8>
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	121b      	asrs	r3, r3, #8
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fe42 	bl	80067ec <LCD_IO_WriteData8>
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	887b      	ldrh	r3, [r7, #2]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fe37 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8005b7e:	202b      	movs	r0, #43	; 0x2b
 8005b80:	f000 fe16 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005b84:	88bb      	ldrh	r3, [r7, #4]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fe2d 	bl	80067ec <LCD_IO_WriteData8>
 8005b92:	88bb      	ldrh	r3, [r7, #4]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fe28 	bl	80067ec <LCD_IO_WriteData8>
 8005b9c:	88ba      	ldrh	r2, [r7, #4]
 8005b9e:	883b      	ldrh	r3, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	121b      	asrs	r3, r3, #8
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fe1f 	bl	80067ec <LCD_IO_WriteData8>
 8005bae:	88bb      	ldrh	r3, [r7, #4]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	883b      	ldrh	r3, [r7, #0]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fe14 	bl	80067ec <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd90      	pop	{r4, r7, pc}
 8005bcc:	200008be 	.word	0x200008be
 8005bd0:	200008c0 	.word	0x200008c0

08005bd4 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4623      	mov	r3, r4
 8005be4:	80fb      	strh	r3, [r7, #6]
 8005be6:	4603      	mov	r3, r0
 8005be8:	80bb      	strh	r3, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	807b      	strh	r3, [r7, #2]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8005bf2:	202a      	movs	r0, #42	; 0x2a
 8005bf4:	f000 fddc 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005bf8:	88bb      	ldrh	r3, [r7, #4]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fdf3 	bl	80067ec <LCD_IO_WriteData8>
 8005c06:	88bb      	ldrh	r3, [r7, #4]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fdee 	bl	80067ec <LCD_IO_WriteData8>
 8005c10:	88ba      	ldrh	r2, [r7, #4]
 8005c12:	883b      	ldrh	r3, [r7, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	3b01      	subs	r3, #1
 8005c18:	121b      	asrs	r3, r3, #8
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fde5 	bl	80067ec <LCD_IO_WriteData8>
 8005c22:	88bb      	ldrh	r3, [r7, #4]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	883b      	ldrh	r3, [r7, #0]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fdda 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8005c38:	202b      	movs	r0, #43	; 0x2b
 8005c3a:	f000 fdb9 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fdd0 	bl	80067ec <LCD_IO_WriteData8>
 8005c4c:	887b      	ldrh	r3, [r7, #2]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fdcb 	bl	80067ec <LCD_IO_WriteData8>
 8005c56:	887b      	ldrh	r3, [r7, #2]
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fdc4 	bl	80067ec <LCD_IO_WriteData8>
 8005c64:	887b      	ldrh	r3, [r7, #2]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fdbf 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005c6e:	883a      	ldrh	r2, [r7, #0]
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	4619      	mov	r1, r3
 8005c74:	202c      	movs	r0, #44	; 0x2c
 8005c76:	f000 fde5 	bl	8006844 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}

08005c82 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005c82:	b590      	push	{r4, r7, lr}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4623      	mov	r3, r4
 8005c92:	80fb      	strh	r3, [r7, #6]
 8005c94:	4603      	mov	r3, r0
 8005c96:	80bb      	strh	r3, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8005ca0:	202a      	movs	r0, #42	; 0x2a
 8005ca2:	f000 fd85 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005ca6:	88bb      	ldrh	r3, [r7, #4]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fd9c 	bl	80067ec <LCD_IO_WriteData8>
 8005cb4:	88bb      	ldrh	r3, [r7, #4]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fd97 	bl	80067ec <LCD_IO_WriteData8>
 8005cbe:	88bb      	ldrh	r3, [r7, #4]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fd90 	bl	80067ec <LCD_IO_WriteData8>
 8005ccc:	88bb      	ldrh	r3, [r7, #4]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fd8b 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8005cd6:	202b      	movs	r0, #43	; 0x2b
 8005cd8:	f000 fd6a 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005cdc:	887b      	ldrh	r3, [r7, #2]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fd81 	bl	80067ec <LCD_IO_WriteData8>
 8005cea:	887b      	ldrh	r3, [r7, #2]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fd7c 	bl	80067ec <LCD_IO_WriteData8>
 8005cf4:	887a      	ldrh	r2, [r7, #2]
 8005cf6:	883b      	ldrh	r3, [r7, #0]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	121b      	asrs	r3, r3, #8
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fd73 	bl	80067ec <LCD_IO_WriteData8>
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	883b      	ldrh	r3, [r7, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	4413      	add	r3, r2
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fd68 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005d1c:	883a      	ldrh	r2, [r7, #0]
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	4619      	mov	r1, r3
 8005d22:	202c      	movs	r0, #44	; 0x2c
 8005d24:	f000 fd8e 	bl	8006844 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}

08005d30 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4623      	mov	r3, r4
 8005d40:	80fb      	strh	r3, [r7, #6]
 8005d42:	4603      	mov	r3, r0
 8005d44:	80bb      	strh	r3, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	807b      	strh	r3, [r7, #2]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8005d4e:	202a      	movs	r0, #42	; 0x2a
 8005d50:	f000 fd2e 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	0a1b      	lsrs	r3, r3, #8
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fd45 	bl	80067ec <LCD_IO_WriteData8>
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fd40 	bl	80067ec <LCD_IO_WriteData8>
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	4413      	add	r3, r2
 8005d72:	3b01      	subs	r3, #1
 8005d74:	121b      	asrs	r3, r3, #8
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fd37 	bl	80067ec <LCD_IO_WriteData8>
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fd2c 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8005d94:	202b      	movs	r0, #43	; 0x2b
 8005d96:	f000 fd0b 	bl	80067b0 <LCD_IO_WriteCmd8>
 8005d9a:	88bb      	ldrh	r3, [r7, #4]
 8005d9c:	0a1b      	lsrs	r3, r3, #8
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd22 	bl	80067ec <LCD_IO_WriteData8>
 8005da8:	88bb      	ldrh	r3, [r7, #4]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd1d 	bl	80067ec <LCD_IO_WriteData8>
 8005db2:	88ba      	ldrh	r2, [r7, #4]
 8005db4:	883b      	ldrh	r3, [r7, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	3b01      	subs	r3, #1
 8005dba:	121b      	asrs	r3, r3, #8
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fd14 	bl	80067ec <LCD_IO_WriteData8>
 8005dc4:	88bb      	ldrh	r3, [r7, #4]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	883b      	ldrh	r3, [r7, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fd09 	bl	80067ec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	883a      	ldrh	r2, [r7, #0]
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	8b3b      	ldrh	r3, [r7, #24]
 8005de6:	4619      	mov	r1, r3
 8005de8:	202c      	movs	r0, #44	; 0x2c
 8005dea:	f000 fd2b 	bl	8006844 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd90      	pop	{r4, r7, pc}

08005df6 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8005df6:	b590      	push	{r4, r7, lr}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	461a      	mov	r2, r3
 8005e04:	4623      	mov	r3, r4
 8005e06:	80fb      	strh	r3, [r7, #6]
 8005e08:	4603      	mov	r3, r0
 8005e0a:	80bb      	strh	r3, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]
 8005e10:	4613      	mov	r3, r2
 8005e12:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8005e14:	883b      	ldrh	r3, [r7, #0]
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	88b9      	ldrh	r1, [r7, #4]
 8005e1a:	88f8      	ldrh	r0, [r7, #6]
 8005e1c:	f7ff fe72 	bl	8005b04 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8005e20:	887b      	ldrh	r3, [r7, #2]
 8005e22:	883a      	ldrh	r2, [r7, #0]
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	69b9      	ldr	r1, [r7, #24]
 8005e2c:	202c      	movs	r0, #44	; 0x2c
 8005e2e:	f000 fd4f 	bl	80068d0 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd90      	pop	{r4, r7, pc}

08005e3a <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	603a      	str	r2, [r7, #0]
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	4603      	mov	r3, r0
 8005e48:	80fb      	strh	r3, [r7, #6]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005e56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005e64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e68:	eeb0 0a47 	vmov.f32	s0, s14
 8005e6c:	f009 ffae 	bl	800fdcc <ceilf>
 8005e70:	eef0 7a40 	vmov.f32	s15, s0
 8005e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e78:	ee17 3a90 	vmov	r3, s15
 8005e7c:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	2280      	movs	r2, #128	; 0x80
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	623b      	str	r3, [r7, #32]
 8005e90:	e060      	b.n	8005f54 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e024      	b.n	8005ee6 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	3a20      	subs	r2, #32
 8005ea4:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005ea6:	fb01 f202 	mul.w	r2, r1, r2
 8005eaa:	6979      	ldr	r1, [r7, #20]
 8005eac:	fb02 f101 	mul.w	r1, r2, r1
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	6978      	ldr	r0, [r7, #20]
 8005eb4:	fb00 f202 	mul.w	r2, r0, r2
 8005eb8:	4411      	add	r1, r2
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	4413      	add	r3, r2
 8005ec0:	7819      	ldrb	r1, [r3, #0]
 8005ec2:	f107 020c 	add.w	r2, r7, #12
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	460a      	mov	r2, r1
 8005ecc:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	f107 010c 	add.w	r1, r7, #12
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	dbd6      	blt.n	8005e9c <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e027      	b.n	8005f44 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	409a      	lsls	r2, r3
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4013      	ands	r3, r2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	4413      	add	r3, r2
 8005f0a:	b298      	uxth	r0, r3
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	88bb      	ldrh	r3, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f7ff fda9 	bl	8005a70 <ili9341_WritePixel>
 8005f1e:	e00e      	b.n	8005f3e <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	4413      	add	r3, r2
 8005f28:	b298      	uxth	r0, r3
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	88bb      	ldrh	r3, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7ff fd99 	bl	8005a70 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	3301      	adds	r3, #1
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f46:	461a      	mov	r2, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	dbd2      	blt.n	8005ef4 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	3301      	adds	r3, #1
 8005f52:	623b      	str	r3, [r7, #32]
 8005f54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f56:	461a      	mov	r2, r3
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	db99      	blt.n	8005e92 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f6a:	b002      	add	sp, #8
 8005f6c:	4770      	bx	lr

08005f6e <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 8005f6e:	b082      	sub	sp, #8
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	603a      	str	r2, [r7, #0]
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	80fb      	strh	r3, [r7, #6]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005f8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f94:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005f98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8005fa0:	f009 ff14 	bl	800fdcc <ceilf>
 8005fa4:	eef0 7a40 	vmov.f32	s15, s0
 8005fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fac:	ee17 3a90 	vmov	r3, s15
 8005fb0:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	e050      	b.n	8006068 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e024      	b.n	800601a <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	3a20      	subs	r2, #32
 8005fd8:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005fda:	fb01 f202 	mul.w	r2, r1, r2
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	fb02 f101 	mul.w	r1, r2, r1
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	6978      	ldr	r0, [r7, #20]
 8005fe8:	fb00 f202 	mul.w	r2, r0, r2
 8005fec:	4411      	add	r1, r2
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	7819      	ldrb	r1, [r3, #0]
 8005ff6:	f107 020c 	add.w	r2, r7, #12
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	460a      	mov	r2, r1
 8006000:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	f107 010c 	add.w	r1, r7, #12
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	4413      	add	r3, r2
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	dbd6      	blt.n	8005fd0 <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e017      	b.n	8006058 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8006028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	409a      	lsls	r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	b29a      	uxth	r2, r3
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	4413      	add	r3, r2
 800603e:	b298      	uxth	r0, r3
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	b29a      	uxth	r2, r3
 8006044:	88bb      	ldrh	r3, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800604c:	4619      	mov	r1, r3
 800604e:	f7ff fd0f 	bl	8005a70 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3301      	adds	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800605a:	461a      	mov	r2, r3
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	4293      	cmp	r3, r2
 8006060:	dbe2      	blt.n	8006028 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	3301      	adds	r3, #1
 8006066:	623b      	str	r3, [r7, #32]
 8006068:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800606a:	461a      	mov	r2, r3
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	4293      	cmp	r3, r2
 8006070:	dba9      	blt.n	8005fc6 <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	3728      	adds	r7, #40	; 0x28
 8006078:	46bd      	mov	sp, r7
 800607a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800607e:	b002      	add	sp, #8
 8006080:	4770      	bx	lr

08006082 <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8006082:	b082      	sub	sp, #8
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af04      	add	r7, sp, #16
 800608a:	603a      	str	r2, [r7, #0]
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	4603      	mov	r3, r0
 8006090:	80fb      	strh	r3, [r7, #6]
 8006092:	460b      	mov	r3, r1
 8006094:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8006096:	f7ff fc14 	bl	80058c2 <ili9341_GetLcdPixelHeight>
 800609a:	4603      	mov	r3, r0
 800609c:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 800609e:	f7ff fc07 	bl	80058b0 <ili9341_GetLcdPixelWidth>
 80060a2:	4603      	mov	r3, r0
 80060a4:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 80060a6:	e02c      	b.n	8006102 <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	8c3a      	ldrh	r2, [r7, #32]
 80060ac:	441a      	add	r2, r3
 80060ae:	89bb      	ldrh	r3, [r7, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	db13      	blt.n	80060dc <ili9341_WriteString+0x5a>
			Xpo = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 80060b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80060ba:	88bb      	ldrh	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 80060c0:	88bb      	ldrh	r3, [r7, #4]
 80060c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80060c4:	441a      	add	r2, r3
 80060c6:	89fb      	ldrh	r3, [r7, #14]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	da1f      	bge.n	800610c <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d103      	bne.n	80060dc <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	603b      	str	r3, [r7, #0]
				continue;
 80060da:	e012      	b.n	8006102 <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 80060dc:	88b9      	ldrh	r1, [r7, #4]
 80060de:	88f8      	ldrh	r0, [r7, #6]
 80060e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060e2:	9302      	str	r3, [sp, #8]
 80060e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	f7ff fea3 	bl	8005e3a <ili9341_WriteChar>
		Xpo += fonto.Width;
 80060f4:	8c3a      	ldrh	r2, [r7, #32]
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	4413      	add	r3, r2
 80060fa:	80fb      	strh	r3, [r7, #6]
		strr++;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	603b      	str	r3, [r7, #0]
	while(*strr){
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1ce      	bne.n	80060a8 <ili9341_WriteString+0x26>
	}
}
 800610a:	e000      	b.n	800610e <ili9341_WriteString+0x8c>
				break;
 800610c:	bf00      	nop
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006118:	b002      	add	sp, #8
 800611a:	4770      	bx	lr

0800611c <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 800611c:	b082      	sub	sp, #8
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af02      	add	r7, sp, #8
 8006124:	603a      	str	r2, [r7, #0]
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	4603      	mov	r3, r0
 800612a:	80fb      	strh	r3, [r7, #6]
 800612c:	460b      	mov	r3, r1
 800612e:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8006130:	f7ff fbc7 	bl	80058c2 <ili9341_GetLcdPixelHeight>
 8006134:	4603      	mov	r3, r0
 8006136:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8006138:	f7ff fbba 	bl	80058b0 <ili9341_GetLcdPixelWidth>
 800613c:	4603      	mov	r3, r0
 800613e:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8006140:	e02a      	b.n	8006198 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	8c3a      	ldrh	r2, [r7, #32]
 8006146:	441a      	add	r2, r3
 8006148:	89bb      	ldrh	r3, [r7, #12]
 800614a:	429a      	cmp	r2, r3
 800614c:	db13      	blt.n	8006176 <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8006152:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006154:	88bb      	ldrh	r3, [r7, #4]
 8006156:	4413      	add	r3, r2
 8006158:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 800615a:	88bb      	ldrh	r3, [r7, #4]
 800615c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800615e:	441a      	add	r2, r3
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	429a      	cmp	r2, r3
 8006164:	da1d      	bge.n	80061a2 <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d103      	bne.n	8006176 <ili9341_WriteStringNoBG+0x5a>
				strr++;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	603b      	str	r3, [r7, #0]
				continue;
 8006174:	e010      	b.n	8006198 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8006176:	88b9      	ldrh	r1, [r7, #4]
 8006178:	88f8      	ldrh	r0, [r7, #6]
 800617a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	f7ff fef2 	bl	8005f6e <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 800618a:	8c3a      	ldrh	r2, [r7, #32]
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	4413      	add	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
		strr++;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	603b      	str	r3, [r7, #0]
	while(*strr){
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1d0      	bne.n	8006142 <ili9341_WriteStringNoBG+0x26>
	}
}
 80061a0:	e000      	b.n	80061a4 <ili9341_WriteStringNoBG+0x88>
				break;
 80061a2:	bf00      	nop
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ae:	b002      	add	sp, #8
 80061b0:	4770      	bx	lr
	...

080061b4 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061c4:	1dfb      	adds	r3, r7, #7
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061cc:	f023 031f 	bic.w	r3, r3, #31
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80061d6:	331c      	adds	r3, #28
 80061d8:	4a53      	ldr	r2, [pc, #332]	; (8006328 <LcdWrite8+0x174>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80061de:	4b53      	ldr	r3, [pc, #332]	; (800632c <LcdWrite8+0x178>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	4b51      	ldr	r3, [pc, #324]	; (800632c <LcdWrite8+0x178>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 80061ea:	1dfb      	adds	r3, r7, #7
 80061ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061f0:	1dfb      	adds	r3, r7, #7
 80061f2:	015b      	lsls	r3, r3, #5
 80061f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061f8:	f023 031f 	bic.w	r3, r3, #31
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006202:	3318      	adds	r3, #24
 8006204:	4a48      	ldr	r2, [pc, #288]	; (8006328 <LcdWrite8+0x174>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800620a:	4b48      	ldr	r3, [pc, #288]	; (800632c <LcdWrite8+0x178>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	4b46      	ldr	r3, [pc, #280]	; (800632c <LcdWrite8+0x178>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8006216:	1dfb      	adds	r3, r7, #7
 8006218:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800621c:	1dfb      	adds	r3, r7, #7
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006224:	f023 031f 	bic.w	r3, r3, #31
 8006228:	4313      	orrs	r3, r2
 800622a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800622e:	3314      	adds	r3, #20
 8006230:	4a3d      	ldr	r2, [pc, #244]	; (8006328 <LcdWrite8+0x174>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006236:	4b3d      	ldr	r3, [pc, #244]	; (800632c <LcdWrite8+0x178>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <LcdWrite8+0x178>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8006242:	1dfb      	adds	r3, r7, #7
 8006244:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006248:	1dfb      	adds	r3, r7, #7
 800624a:	015b      	lsls	r3, r3, #5
 800624c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006250:	f023 031f 	bic.w	r3, r3, #31
 8006254:	4313      	orrs	r3, r2
 8006256:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800625a:	3310      	adds	r3, #16
 800625c:	4a32      	ldr	r2, [pc, #200]	; (8006328 <LcdWrite8+0x174>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006262:	4b32      	ldr	r3, [pc, #200]	; (800632c <LcdWrite8+0x178>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	4b30      	ldr	r3, [pc, #192]	; (800632c <LcdWrite8+0x178>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 800626e:	1dfb      	adds	r3, r7, #7
 8006270:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	015b      	lsls	r3, r3, #5
 8006278:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800627c:	f023 031f 	bic.w	r3, r3, #31
 8006280:	4313      	orrs	r3, r2
 8006282:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006286:	330c      	adds	r3, #12
 8006288:	4a27      	ldr	r2, [pc, #156]	; (8006328 <LcdWrite8+0x174>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800628e:	4b27      	ldr	r3, [pc, #156]	; (800632c <LcdWrite8+0x178>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <LcdWrite8+0x178>)
 8006296:	2201      	movs	r2, #1
 8006298:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 800629a:	1dfb      	adds	r3, r7, #7
 800629c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062a0:	1dfb      	adds	r3, r7, #7
 80062a2:	015b      	lsls	r3, r3, #5
 80062a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062a8:	f023 031f 	bic.w	r3, r3, #31
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062b2:	3308      	adds	r3, #8
 80062b4:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <LcdWrite8+0x174>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062ba:	4b1c      	ldr	r3, [pc, #112]	; (800632c <LcdWrite8+0x178>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <LcdWrite8+0x178>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 80062c6:	1dfb      	adds	r3, r7, #7
 80062c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062cc:	1dfb      	adds	r3, r7, #7
 80062ce:	015b      	lsls	r3, r3, #5
 80062d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062d4:	f023 031f 	bic.w	r3, r3, #31
 80062d8:	4313      	orrs	r3, r2
 80062da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062de:	3304      	adds	r3, #4
 80062e0:	4a11      	ldr	r2, [pc, #68]	; (8006328 <LcdWrite8+0x174>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <LcdWrite8+0x178>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <LcdWrite8+0x178>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 80062f2:	1dfb      	adds	r3, r7, #7
 80062f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062f8:	1dfb      	adds	r3, r7, #7
 80062fa:	015b      	lsls	r3, r3, #5
 80062fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006300:	f023 031f 	bic.w	r3, r3, #31
 8006304:	4313      	orrs	r3, r2
 8006306:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800630a:	4a07      	ldr	r2, [pc, #28]	; (8006328 <LcdWrite8+0x174>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <LcdWrite8+0x178>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <LcdWrite8+0x178>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	4241028c 	.word	0x4241028c
 800632c:	42408280 	.word	0x42408280

08006330 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 800633a:	1dbb      	adds	r3, r7, #6
 800633c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006340:	1dbb      	adds	r3, r7, #6
 8006342:	015b      	lsls	r3, r3, #5
 8006344:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006348:	f023 031f 	bic.w	r3, r3, #31
 800634c:	4313      	orrs	r3, r2
 800634e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006352:	333c      	adds	r3, #60	; 0x3c
 8006354:	4aab      	ldr	r2, [pc, #684]	; (8006604 <LcdWrite16+0x2d4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800635a:	4bab      	ldr	r3, [pc, #684]	; (8006608 <LcdWrite16+0x2d8>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	4ba9      	ldr	r3, [pc, #676]	; (8006608 <LcdWrite16+0x2d8>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8006366:	1dbb      	adds	r3, r7, #6
 8006368:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	015b      	lsls	r3, r3, #5
 8006370:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006374:	f023 031f 	bic.w	r3, r3, #31
 8006378:	4313      	orrs	r3, r2
 800637a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800637e:	3338      	adds	r3, #56	; 0x38
 8006380:	4aa0      	ldr	r2, [pc, #640]	; (8006604 <LcdWrite16+0x2d4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006386:	4ba0      	ldr	r3, [pc, #640]	; (8006608 <LcdWrite16+0x2d8>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4b9e      	ldr	r3, [pc, #632]	; (8006608 <LcdWrite16+0x2d8>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8006392:	1dbb      	adds	r3, r7, #6
 8006394:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006398:	1dbb      	adds	r3, r7, #6
 800639a:	015b      	lsls	r3, r3, #5
 800639c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063a0:	f023 031f 	bic.w	r3, r3, #31
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063aa:	3334      	adds	r3, #52	; 0x34
 80063ac:	4a95      	ldr	r2, [pc, #596]	; (8006604 <LcdWrite16+0x2d4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063b2:	4b95      	ldr	r3, [pc, #596]	; (8006608 <LcdWrite16+0x2d8>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	4b93      	ldr	r3, [pc, #588]	; (8006608 <LcdWrite16+0x2d8>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 80063be:	1dbb      	adds	r3, r7, #6
 80063c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063c4:	1dbb      	adds	r3, r7, #6
 80063c6:	015b      	lsls	r3, r3, #5
 80063c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063cc:	f023 031f 	bic.w	r3, r3, #31
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063d6:	3330      	adds	r3, #48	; 0x30
 80063d8:	4a8a      	ldr	r2, [pc, #552]	; (8006604 <LcdWrite16+0x2d4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063de:	4b8a      	ldr	r3, [pc, #552]	; (8006608 <LcdWrite16+0x2d8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	4b88      	ldr	r3, [pc, #544]	; (8006608 <LcdWrite16+0x2d8>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063f0:	1dbb      	adds	r3, r7, #6
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063f8:	f023 031f 	bic.w	r3, r3, #31
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006402:	332c      	adds	r3, #44	; 0x2c
 8006404:	4a7f      	ldr	r2, [pc, #508]	; (8006604 <LcdWrite16+0x2d4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <LcdWrite16+0x2d8>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	4b7d      	ldr	r3, [pc, #500]	; (8006608 <LcdWrite16+0x2d8>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800641c:	1dbb      	adds	r3, r7, #6
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006424:	f023 031f 	bic.w	r3, r3, #31
 8006428:	4313      	orrs	r3, r2
 800642a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800642e:	3328      	adds	r3, #40	; 0x28
 8006430:	4a74      	ldr	r2, [pc, #464]	; (8006604 <LcdWrite16+0x2d4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006436:	4b74      	ldr	r3, [pc, #464]	; (8006608 <LcdWrite16+0x2d8>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	4b72      	ldr	r3, [pc, #456]	; (8006608 <LcdWrite16+0x2d8>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8006442:	1dbb      	adds	r3, r7, #6
 8006444:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006448:	1dbb      	adds	r3, r7, #6
 800644a:	015b      	lsls	r3, r3, #5
 800644c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006450:	f023 031f 	bic.w	r3, r3, #31
 8006454:	4313      	orrs	r3, r2
 8006456:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800645a:	3324      	adds	r3, #36	; 0x24
 800645c:	4a69      	ldr	r2, [pc, #420]	; (8006604 <LcdWrite16+0x2d4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006462:	4b69      	ldr	r3, [pc, #420]	; (8006608 <LcdWrite16+0x2d8>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	4b67      	ldr	r3, [pc, #412]	; (8006608 <LcdWrite16+0x2d8>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 800646e:	1dbb      	adds	r3, r7, #6
 8006470:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006474:	1dbb      	adds	r3, r7, #6
 8006476:	015b      	lsls	r3, r3, #5
 8006478:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800647c:	f023 031f 	bic.w	r3, r3, #31
 8006480:	4313      	orrs	r3, r2
 8006482:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006486:	3320      	adds	r3, #32
 8006488:	4a5e      	ldr	r2, [pc, #376]	; (8006604 <LcdWrite16+0x2d4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800648e:	4b5e      	ldr	r3, [pc, #376]	; (8006608 <LcdWrite16+0x2d8>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	4b5c      	ldr	r3, [pc, #368]	; (8006608 <LcdWrite16+0x2d8>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 800649a:	1dbb      	adds	r3, r7, #6
 800649c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064a0:	1dbb      	adds	r3, r7, #6
 80064a2:	015b      	lsls	r3, r3, #5
 80064a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064a8:	f023 031f 	bic.w	r3, r3, #31
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064b2:	331c      	adds	r3, #28
 80064b4:	4a53      	ldr	r2, [pc, #332]	; (8006604 <LcdWrite16+0x2d4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064ba:	4b53      	ldr	r3, [pc, #332]	; (8006608 <LcdWrite16+0x2d8>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	4b51      	ldr	r3, [pc, #324]	; (8006608 <LcdWrite16+0x2d8>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 80064c6:	1dbb      	adds	r3, r7, #6
 80064c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064cc:	1dbb      	adds	r3, r7, #6
 80064ce:	015b      	lsls	r3, r3, #5
 80064d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064d4:	f023 031f 	bic.w	r3, r3, #31
 80064d8:	4313      	orrs	r3, r2
 80064da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064de:	3318      	adds	r3, #24
 80064e0:	4a48      	ldr	r2, [pc, #288]	; (8006604 <LcdWrite16+0x2d4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064e6:	4b48      	ldr	r3, [pc, #288]	; (8006608 <LcdWrite16+0x2d8>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	4b46      	ldr	r3, [pc, #280]	; (8006608 <LcdWrite16+0x2d8>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 80064f2:	1dbb      	adds	r3, r7, #6
 80064f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064f8:	1dbb      	adds	r3, r7, #6
 80064fa:	015b      	lsls	r3, r3, #5
 80064fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006500:	f023 031f 	bic.w	r3, r3, #31
 8006504:	4313      	orrs	r3, r2
 8006506:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800650a:	3314      	adds	r3, #20
 800650c:	4a3d      	ldr	r2, [pc, #244]	; (8006604 <LcdWrite16+0x2d4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006512:	4b3d      	ldr	r3, [pc, #244]	; (8006608 <LcdWrite16+0x2d8>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	4b3b      	ldr	r3, [pc, #236]	; (8006608 <LcdWrite16+0x2d8>)
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 800651e:	1dbb      	adds	r3, r7, #6
 8006520:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006524:	1dbb      	adds	r3, r7, #6
 8006526:	015b      	lsls	r3, r3, #5
 8006528:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800652c:	f023 031f 	bic.w	r3, r3, #31
 8006530:	4313      	orrs	r3, r2
 8006532:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006536:	3310      	adds	r3, #16
 8006538:	4a32      	ldr	r2, [pc, #200]	; (8006604 <LcdWrite16+0x2d4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800653e:	4b32      	ldr	r3, [pc, #200]	; (8006608 <LcdWrite16+0x2d8>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	4b30      	ldr	r3, [pc, #192]	; (8006608 <LcdWrite16+0x2d8>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 800654a:	1dbb      	adds	r3, r7, #6
 800654c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006550:	1dbb      	adds	r3, r7, #6
 8006552:	015b      	lsls	r3, r3, #5
 8006554:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006558:	f023 031f 	bic.w	r3, r3, #31
 800655c:	4313      	orrs	r3, r2
 800655e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006562:	330c      	adds	r3, #12
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <LcdWrite16+0x2d4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800656a:	4b27      	ldr	r3, [pc, #156]	; (8006608 <LcdWrite16+0x2d8>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	4b25      	ldr	r3, [pc, #148]	; (8006608 <LcdWrite16+0x2d8>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8006576:	1dbb      	adds	r3, r7, #6
 8006578:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	015b      	lsls	r3, r3, #5
 8006580:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006584:	f023 031f 	bic.w	r3, r3, #31
 8006588:	4313      	orrs	r3, r2
 800658a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800658e:	3308      	adds	r3, #8
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <LcdWrite16+0x2d4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006596:	4b1c      	ldr	r3, [pc, #112]	; (8006608 <LcdWrite16+0x2d8>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	4b1a      	ldr	r3, [pc, #104]	; (8006608 <LcdWrite16+0x2d8>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 80065a2:	1dbb      	adds	r3, r7, #6
 80065a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065a8:	1dbb      	adds	r3, r7, #6
 80065aa:	015b      	lsls	r3, r3, #5
 80065ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80065b0:	f023 031f 	bic.w	r3, r3, #31
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80065ba:	3304      	adds	r3, #4
 80065bc:	4a11      	ldr	r2, [pc, #68]	; (8006604 <LcdWrite16+0x2d4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80065c2:	4b11      	ldr	r3, [pc, #68]	; (8006608 <LcdWrite16+0x2d8>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <LcdWrite16+0x2d8>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 80065ce:	1dbb      	adds	r3, r7, #6
 80065d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065d4:	1dbb      	adds	r3, r7, #6
 80065d6:	015b      	lsls	r3, r3, #5
 80065d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80065dc:	f023 031f 	bic.w	r3, r3, #31
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80065e6:	4a07      	ldr	r2, [pc, #28]	; (8006604 <LcdWrite16+0x2d4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <LcdWrite16+0x2d8>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <LcdWrite16+0x2d8>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	4241028c 	.word	0x4241028c
 8006608:	42408280 	.word	0x42408280

0800660c <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  while(Size--)
 8006618:	e00a      	b.n	8006630 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fdc8 	bl	80061b4 <LcdWrite8>
    if(dinc)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1e5a      	subs	r2, r3, #1
 8006634:	60ba      	str	r2, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1ef      	bne.n	800661a <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <LCD_IO_WriteMultiData8+0x3c>)
 800663c:	2201      	movs	r2, #1
 800663e:	601a      	str	r2, [r3, #0]
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	42410284 	.word	0x42410284

0800664c <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  while(Size--)
 8006658:	e00a      	b.n	8006670 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fe66 	bl	8006330 <LcdWrite16>
    if(dinc)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3302      	adds	r3, #2
 800666e:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	60ba      	str	r2, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1ef      	bne.n	800665a <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <LCD_IO_WriteMultiData16+0x3c>)
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	42410284 	.word	0x42410284

0800668c <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f9d9 	bl	8006a4c <HAL_Delay>
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	4603      	mov	r3, r0
 80066aa:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80066bc:	4b34      	ldr	r3, [pc, #208]	; (8006790 <LCD_IO_Init+0xd8>)
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4a33      	ldr	r2, [pc, #204]	; (8006790 <LCD_IO_Init+0xd8>)
 80066c2:	f043 0307 	orr.w	r3, r3, #7
 80066c6:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80066c8:	4b32      	ldr	r3, [pc, #200]	; (8006794 <LCD_IO_Init+0xdc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d0:	4a30      	ldr	r2, [pc, #192]	; (8006794 <LCD_IO_Init+0xdc>)
 80066d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d6:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80066d8:	4b2e      	ldr	r3, [pc, #184]	; (8006794 <LCD_IO_Init+0xdc>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <LCD_IO_Init+0xdc>)
 80066de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e2:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80066e4:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <LCD_IO_Init+0xe0>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80066ea:	4b2c      	ldr	r3, [pc, #176]	; (800679c <LCD_IO_Init+0xe4>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80066f0:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <LCD_IO_Init+0xe8>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80066f6:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <LCD_IO_Init+0xec>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <LCD_IO_Init+0xec>)
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <LCD_IO_Init+0xec>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 030c 	bic.w	r3, r3, #12
 800670e:	4a25      	ldr	r2, [pc, #148]	; (80067a4 <LCD_IO_Init+0xec>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8006716:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <LCD_IO_Init+0xec>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <LCD_IO_Init+0xec>)
 800671c:	f043 0303 	orr.w	r3, r3, #3
 8006720:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8006722:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <LCD_IO_Init+0xec>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <LCD_IO_Init+0xec>)
 8006728:	f043 030c 	orr.w	r3, r3, #12
 800672c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800672e:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <LCD_IO_Init+0xf0>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <LCD_IO_Init+0xf0>)
 8006734:	f043 0303 	orr.w	r3, r3, #3
 8006738:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800673a:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <LCD_IO_Init+0xec>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <LCD_IO_Init+0xec>)
 8006740:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006744:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8006746:	4b19      	ldr	r3, [pc, #100]	; (80067ac <LCD_IO_Init+0xf4>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 800674c:	4b16      	ldr	r3, [pc, #88]	; (80067a8 <LCD_IO_Init+0xf0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <LCD_IO_Init+0xf0>)
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <LCD_IO_Init+0xec>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006764:	4a0f      	ldr	r2, [pc, #60]	; (80067a4 <LCD_IO_Init+0xec>)
 8006766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676a:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 800676c:	200a      	movs	r0, #10
 800676e:	f7ff ff8d 	bl	800668c <LCD_Delay>
  LCD_RST_ON;
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <LCD_IO_Init+0xe0>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8006778:	200a      	movs	r0, #10
 800677a:	f7ff ff87 	bl	800668c <LCD_Delay>
  LCD_RST_OFF;
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <LCD_IO_Init+0xe0>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8006784:	200a      	movs	r0, #10
 8006786:	f7ff ff81 	bl	800668c <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	40020000 	.word	0x40020000
 8006798:	42400290 	.word	0x42400290
 800679c:	42410280 	.word	0x42410280
 80067a0:	42410284 	.word	0x42410284
 80067a4:	40020800 	.word	0x40020800
 80067a8:	40020400 	.word	0x40020400
 80067ac:	42408280 	.word	0x42408280

080067b0 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <LCD_IO_WriteCmd8+0x34>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <LCD_IO_WriteCmd8+0x38>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fcf3 	bl	80061b4 <LcdWrite8>
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <LCD_IO_WriteCmd8+0x38>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80067d4:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <LCD_IO_WriteCmd8+0x34>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	42410284 	.word	0x42410284
 80067e8:	42410280 	.word	0x42410280

080067ec <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <LCD_IO_WriteData8+0x28>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fcd8 	bl	80061b4 <LcdWrite8>
  LCD_CS_OFF;
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <LCD_IO_WriteData8+0x28>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	42410284 	.word	0x42410284

08006818 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <LCD_IO_WriteData16+0x28>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fd80 	bl	8006330 <LcdWrite16>
  LCD_CS_OFF;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <LCD_IO_WriteData16+0x28>)
 8006832:	2201      	movs	r2, #1
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	42410284 	.word	0x42410284

08006844 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	603a      	str	r2, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
 8006850:	460b      	mov	r3, r1
 8006852:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fca6 	bl	80061b4 <LcdWrite8>
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <LCD_IO_WriteCmd8DataFill16+0x44>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	2200      	movs	r2, #0
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fee9 	bl	800664c <LCD_IO_WriteMultiData16>
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	42410284 	.word	0x42410284
 8006888:	42410280 	.word	0x42410280

0800688c <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fc83 	bl	80061b4 <LcdWrite8>
 80068ae:	4b07      	ldr	r3, [pc, #28]	; (80068cc <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80068b4:	2201      	movs	r2, #1
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68b8      	ldr	r0, [r7, #8]
 80068ba:	f7ff fea7 	bl	800660c <LCD_IO_WriteMultiData8>
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	42410284 	.word	0x42410284
 80068cc:	42410280 	.word	0x42410280

080068d0 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80068e4:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fc61 	bl	80061b4 <LcdWrite8>
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(pData, Size, 1);
 80068f8:	2201      	movs	r2, #1
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	68b8      	ldr	r0, [r7, #8]
 80068fe:	f7ff fea5 	bl	800664c <LCD_IO_WriteMultiData16>
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	42410284 	.word	0x42410284
 8006910:	42410280 	.word	0x42410280

08006914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800694c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006918:	480d      	ldr	r0, [pc, #52]	; (8006950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800691a:	490e      	ldr	r1, [pc, #56]	; (8006954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800691c:	4a0e      	ldr	r2, [pc, #56]	; (8006958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800691e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006920:	e002      	b.n	8006928 <LoopCopyDataInit>

08006922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006926:	3304      	adds	r3, #4

08006928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800692a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800692c:	d3f9      	bcc.n	8006922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800692e:	4a0b      	ldr	r2, [pc, #44]	; (800695c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006930:	4c0b      	ldr	r4, [pc, #44]	; (8006960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006934:	e001      	b.n	800693a <LoopFillZerobss>

08006936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006938:	3204      	adds	r2, #4

0800693a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800693a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800693c:	d3fb      	bcc.n	8006936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800693e:	f7fe ff9b 	bl	8005878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006942:	f006 faf1 	bl	800cf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006946:	f7fb f8a1 	bl	8001a8c <main>
  bx  lr    
 800694a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800694c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006954:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8006958:	0803d58c 	.word	0x0803d58c
  ldr r2, =_sbss
 800695c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8006960:	200008d8 	.word	0x200008d8

08006964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006964:	e7fe      	b.n	8006964 <ADC_IRQHandler>
	...

08006968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <HAL_Init+0x40>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <HAL_Init+0x40>)
 8006972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_Init+0x40>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <HAL_Init+0x40>)
 800697e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006984:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <HAL_Init+0x40>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a07      	ldr	r2, [pc, #28]	; (80069a8 <HAL_Init+0x40>)
 800698a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006990:	2003      	movs	r0, #3
 8006992:	f000 f94f 	bl	8006c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006996:	2000      	movs	r0, #0
 8006998:	f000 f808 	bl	80069ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800699c:	f7fe fbf2 	bl	8005184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40023c00 	.word	0x40023c00

080069ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069b4:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <HAL_InitTick+0x54>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_InitTick+0x58>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 f967 	bl	8006c9e <HAL_SYSTICK_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e00e      	b.n	80069f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b0f      	cmp	r3, #15
 80069de:	d80a      	bhi.n	80069f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069e0:	2200      	movs	r2, #0
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	f000 f92f 	bl	8006c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069ec:	4a06      	ldr	r2, [pc, #24]	; (8006a08 <HAL_InitTick+0x5c>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000224 	.word	0x20000224
 8006a04:	2000024c 	.word	0x2000024c
 8006a08:	20000248 	.word	0x20000248

08006a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <HAL_IncTick+0x20>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <HAL_IncTick+0x24>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <HAL_IncTick+0x24>)
 8006a1e:	6013      	str	r3, [r2, #0]
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	2000024c 	.word	0x2000024c
 8006a30:	200008c4 	.word	0x200008c4

08006a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  return uwTick;
 8006a38:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <HAL_GetTick+0x14>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	200008c4 	.word	0x200008c4

08006a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a54:	f7ff ffee 	bl	8006a34 <HAL_GetTick>
 8006a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d005      	beq.n	8006a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_Delay+0x44>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a72:	bf00      	nop
 8006a74:	f7ff ffde 	bl	8006a34 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d8f7      	bhi.n	8006a74 <HAL_Delay+0x28>
  {
  }
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	2000024c 	.word	0x2000024c

08006a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ac6:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	60d3      	str	r3, [r2, #12]
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	e000ed00 	.word	0xe000ed00

08006adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	0a1b      	lsrs	r3, r3, #8
 8006ae6:	f003 0307 	and.w	r3, r3, #7
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	e000ed00 	.word	0xe000ed00

08006af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	db0b      	blt.n	8006b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	f003 021f 	and.w	r2, r3, #31
 8006b10:	4907      	ldr	r1, [pc, #28]	; (8006b30 <__NVIC_EnableIRQ+0x38>)
 8006b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	2001      	movs	r0, #1
 8006b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e100 	.word	0xe000e100

08006b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db0a      	blt.n	8006b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	490c      	ldr	r1, [pc, #48]	; (8006b80 <__NVIC_SetPriority+0x4c>)
 8006b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b52:	0112      	lsls	r2, r2, #4
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	440b      	add	r3, r1
 8006b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b5c:	e00a      	b.n	8006b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	4908      	ldr	r1, [pc, #32]	; (8006b84 <__NVIC_SetPriority+0x50>)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	3b04      	subs	r3, #4
 8006b6c:	0112      	lsls	r2, r2, #4
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	440b      	add	r3, r1
 8006b72:	761a      	strb	r2, [r3, #24]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	e000e100 	.word	0xe000e100
 8006b84:	e000ed00 	.word	0xe000ed00

08006b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	bf28      	it	cs
 8006ba6:	2304      	movcs	r3, #4
 8006ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3304      	adds	r3, #4
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d902      	bls.n	8006bb8 <NVIC_EncodePriority+0x30>
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3b03      	subs	r3, #3
 8006bb6:	e000      	b.n	8006bba <NVIC_EncodePriority+0x32>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	43da      	mvns	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	401a      	ands	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bda:	43d9      	mvns	r1, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006be0:	4313      	orrs	r3, r2
         );
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3724      	adds	r7, #36	; 0x24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c00:	d301      	bcc.n	8006c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c02:	2301      	movs	r3, #1
 8006c04:	e00f      	b.n	8006c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c06:	4a0a      	ldr	r2, [pc, #40]	; (8006c30 <SysTick_Config+0x40>)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c0e:	210f      	movs	r1, #15
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	f7ff ff8e 	bl	8006b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c18:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <SysTick_Config+0x40>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c1e:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <SysTick_Config+0x40>)
 8006c20:	2207      	movs	r2, #7
 8006c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	e000e010 	.word	0xe000e010

08006c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff29 	bl	8006a94 <__NVIC_SetPriorityGrouping>
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4603      	mov	r3, r0
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c5c:	f7ff ff3e 	bl	8006adc <__NVIC_GetPriorityGrouping>
 8006c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	6978      	ldr	r0, [r7, #20]
 8006c68:	f7ff ff8e 	bl	8006b88 <NVIC_EncodePriority>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff ff5d 	bl	8006b34 <__NVIC_SetPriority>
}
 8006c7a:	bf00      	nop
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	4603      	mov	r3, r0
 8006c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ff31 	bl	8006af8 <__NVIC_EnableIRQ>
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ffa2 	bl	8006bf0 <SysTick_Config>
 8006cac:	4603      	mov	r3, r0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006cc4:	f7ff feb6 	bl	8006a34 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e099      	b.n	8006e08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cf4:	e00f      	b.n	8006d16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cf6:	f7ff fe9d 	bl	8006a34 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b05      	cmp	r3, #5
 8006d02:	d908      	bls.n	8006d16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e078      	b.n	8006e08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e8      	bne.n	8006cf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4b38      	ldr	r3, [pc, #224]	; (8006e10 <HAL_DMA_Init+0x158>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d107      	bne.n	8006d80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d117      	bne.n	8006dda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00e      	beq.n	8006dda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fb0f 	bl	80073e0 <DMA_CheckFifoParam>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2240      	movs	r2, #64	; 0x40
 8006dcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e016      	b.n	8006e08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fac6 	bl	8007374 <DMA_CalcBaseAndBitshift>
 8006de8:	4603      	mov	r3, r0
 8006dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	223f      	movs	r2, #63	; 0x3f
 8006df2:	409a      	lsls	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	f010803f 	.word	0xf010803f

08006e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_DMA_Start_IT+0x26>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e040      	b.n	8006ebc <HAL_DMA_Start_IT+0xa8>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d12f      	bne.n	8006eae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa58 	bl	8007318 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6c:	223f      	movs	r2, #63	; 0x3f
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0216 	orr.w	r2, r2, #22
 8006e82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0201 	orr.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	e005      	b.n	8006eba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ed2:	f7ff fdaf 	bl	8006a34 <HAL_GetTick>
 8006ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d008      	beq.n	8006ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2280      	movs	r2, #128	; 0x80
 8006ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e052      	b.n	8006f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0216 	bic.w	r2, r2, #22
 8006f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_DMA_Abort+0x62>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0208 	bic.w	r2, r2, #8
 8006f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f46:	e013      	b.n	8006f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f48:	f7ff fd74 	bl	8006a34 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d90c      	bls.n	8006f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e015      	b.n	8006f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e4      	bne.n	8006f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f82:	223f      	movs	r2, #63	; 0x3f
 8006f84:	409a      	lsls	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2280      	movs	r2, #128	; 0x80
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e00c      	b.n	8006fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ff4:	4b8e      	ldr	r3, [pc, #568]	; (8007230 <HAL_DMA_IRQHandler+0x248>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a8e      	ldr	r2, [pc, #568]	; (8007234 <HAL_DMA_IRQHandler+0x24c>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	0a9b      	lsrs	r3, r3, #10
 8007000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007012:	2208      	movs	r2, #8
 8007014:	409a      	lsls	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4013      	ands	r3, r2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01a      	beq.n	8007054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d013      	beq.n	8007054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0204 	bic.w	r2, r2, #4
 800703a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007040:	2208      	movs	r2, #8
 8007042:	409a      	lsls	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	f043 0201 	orr.w	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	2201      	movs	r2, #1
 800705a:	409a      	lsls	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	2201      	movs	r2, #1
 8007078:	409a      	lsls	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	f043 0202 	orr.w	r2, r3, #2
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708e:	2204      	movs	r2, #4
 8007090:	409a      	lsls	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d012      	beq.n	80070c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ac:	2204      	movs	r2, #4
 80070ae:	409a      	lsls	r2, r3
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	f043 0204 	orr.w	r2, r3, #4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	2210      	movs	r2, #16
 80070c6:	409a      	lsls	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d043      	beq.n	8007158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d03c      	beq.n	8007158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	2210      	movs	r2, #16
 80070e4:	409a      	lsls	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d018      	beq.n	800712a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d108      	bne.n	8007118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d024      	beq.n	8007158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
 8007116:	e01f      	b.n	8007158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01b      	beq.n	8007158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
 8007128:	e016      	b.n	8007158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0208 	bic.w	r2, r2, #8
 8007146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715c:	2220      	movs	r2, #32
 800715e:	409a      	lsls	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4013      	ands	r3, r2
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 808f 	beq.w	8007288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8087 	beq.w	8007288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717e:	2220      	movs	r2, #32
 8007180:	409a      	lsls	r2, r3
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b05      	cmp	r3, #5
 8007190:	d136      	bne.n	8007200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0216 	bic.w	r2, r2, #22
 80071a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_DMA_IRQHandler+0x1da>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0208 	bic.w	r2, r2, #8
 80071d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d6:	223f      	movs	r2, #63	; 0x3f
 80071d8:	409a      	lsls	r2, r3
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d07e      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
        }
        return;
 80071fe:	e079      	b.n	80072f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01d      	beq.n	800724a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	2b00      	cmp	r3, #0
 8007222:	d031      	beq.n	8007288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	4798      	blx	r3
 800722c:	e02c      	b.n	8007288 <HAL_DMA_IRQHandler+0x2a0>
 800722e:	bf00      	nop
 8007230:	20000224 	.word	0x20000224
 8007234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d023      	beq.n	8007288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
 8007248:	e01e      	b.n	8007288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10f      	bne.n	8007278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0210 	bic.w	r2, r2, #16
 8007266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	2b00      	cmp	r3, #0
 800728e:	d032      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d022      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2205      	movs	r2, #5
 80072a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d307      	bcc.n	80072d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f2      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x2cc>
 80072ce:	e000      	b.n	80072d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80072d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
 80072f2:	e000      	b.n	80072f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80072f4:	bf00      	nop
    }
  }
}
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800730a:	b2db      	uxtb	r3, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007334:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d108      	bne.n	8007358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007356:	e007      	b.n	8007368 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3b10      	subs	r3, #16
 8007384:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <DMA_CalcBaseAndBitshift+0x64>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800738e:	4a13      	ldr	r2, [pc, #76]	; (80073dc <DMA_CalcBaseAndBitshift+0x68>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d909      	bls.n	80073b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	659a      	str	r2, [r3, #88]	; 0x58
 80073b4:	e007      	b.n	80073c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	aaaaaaab 	.word	0xaaaaaaab
 80073dc:	0803d19c 	.word	0x0803d19c

080073e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d11f      	bne.n	800743a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d856      	bhi.n	80074ae <DMA_CheckFifoParam+0xce>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <DMA_CheckFifoParam+0x28>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007419 	.word	0x08007419
 800740c:	0800742b 	.word	0x0800742b
 8007410:	08007419 	.word	0x08007419
 8007414:	080074af 	.word	0x080074af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d046      	beq.n	80074b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007428:	e043      	b.n	80074b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007432:	d140      	bne.n	80074b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007438:	e03d      	b.n	80074b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007442:	d121      	bne.n	8007488 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d837      	bhi.n	80074ba <DMA_CheckFifoParam+0xda>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <DMA_CheckFifoParam+0x70>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007461 	.word	0x08007461
 8007454:	08007467 	.word	0x08007467
 8007458:	08007461 	.word	0x08007461
 800745c:	08007479 	.word	0x08007479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
      break;
 8007464:	e030      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d025      	beq.n	80074be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007476:	e022      	b.n	80074be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007480:	d11f      	bne.n	80074c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007486:	e01c      	b.n	80074c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d903      	bls.n	8007496 <DMA_CheckFifoParam+0xb6>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b03      	cmp	r3, #3
 8007492:	d003      	beq.n	800749c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007494:	e018      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
      break;
 800749a:	e015      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00e      	beq.n	80074c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
      break;
 80074ac:	e00b      	b.n	80074c6 <DMA_CheckFifoParam+0xe6>
      break;
 80074ae:	bf00      	nop
 80074b0:	e00a      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      break;
 80074b2:	bf00      	nop
 80074b4:	e008      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      break;
 80074b6:	bf00      	nop
 80074b8:	e006      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      break;
 80074ba:	bf00      	nop
 80074bc:	e004      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      break;
 80074be:	bf00      	nop
 80074c0:	e002      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80074c2:	bf00      	nop
 80074c4:	e000      	b.n	80074c8 <DMA_CheckFifoParam+0xe8>
      break;
 80074c6:	bf00      	nop
    }
  } 
  
  return status; 
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop

080074d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	e159      	b.n	80077a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074f4:	2201      	movs	r2, #1
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4013      	ands	r3, r2
 8007506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	429a      	cmp	r2, r3
 800750e:	f040 8148 	bne.w	80077a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b01      	cmp	r3, #1
 800751c:	d005      	beq.n	800752a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007526:	2b02      	cmp	r3, #2
 8007528:	d130      	bne.n	800758c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	2203      	movs	r2, #3
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4313      	orrs	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007560:	2201      	movs	r2, #1
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	43db      	mvns	r3, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4013      	ands	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	f003 0201 	and.w	r2, r3, #1
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4313      	orrs	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	2b03      	cmp	r3, #3
 8007596:	d017      	beq.n	80075c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	2203      	movs	r2, #3
 80075a4:	fa02 f303 	lsl.w	r3, r2, r3
 80075a8:	43db      	mvns	r3, r3
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	4013      	ands	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4313      	orrs	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d123      	bne.n	800761c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	08da      	lsrs	r2, r3, #3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3208      	adds	r2, #8
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	220f      	movs	r2, #15
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	43db      	mvns	r3, r3
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4313      	orrs	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	08da      	lsrs	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3208      	adds	r2, #8
 8007616:	69b9      	ldr	r1, [r7, #24]
 8007618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	2203      	movs	r2, #3
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	43db      	mvns	r3, r3
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	4013      	ands	r3, r2
 8007632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f003 0203 	and.w	r2, r3, #3
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	4313      	orrs	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80a2 	beq.w	80077a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	4b57      	ldr	r3, [pc, #348]	; (80077c0 <HAL_GPIO_Init+0x2e8>)
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	4a56      	ldr	r2, [pc, #344]	; (80077c0 <HAL_GPIO_Init+0x2e8>)
 8007668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800766c:	6453      	str	r3, [r2, #68]	; 0x44
 800766e:	4b54      	ldr	r3, [pc, #336]	; (80077c0 <HAL_GPIO_Init+0x2e8>)
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800767a:	4a52      	ldr	r2, [pc, #328]	; (80077c4 <HAL_GPIO_Init+0x2ec>)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	089b      	lsrs	r3, r3, #2
 8007680:	3302      	adds	r3, #2
 8007682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	220f      	movs	r2, #15
 8007692:	fa02 f303 	lsl.w	r3, r2, r3
 8007696:	43db      	mvns	r3, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4013      	ands	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a49      	ldr	r2, [pc, #292]	; (80077c8 <HAL_GPIO_Init+0x2f0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d019      	beq.n	80076da <HAL_GPIO_Init+0x202>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a48      	ldr	r2, [pc, #288]	; (80077cc <HAL_GPIO_Init+0x2f4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <HAL_GPIO_Init+0x1fe>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a47      	ldr	r2, [pc, #284]	; (80077d0 <HAL_GPIO_Init+0x2f8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00d      	beq.n	80076d2 <HAL_GPIO_Init+0x1fa>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <HAL_GPIO_Init+0x2fc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <HAL_GPIO_Init+0x1f6>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a45      	ldr	r2, [pc, #276]	; (80077d8 <HAL_GPIO_Init+0x300>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d101      	bne.n	80076ca <HAL_GPIO_Init+0x1f2>
 80076c6:	2304      	movs	r3, #4
 80076c8:	e008      	b.n	80076dc <HAL_GPIO_Init+0x204>
 80076ca:	2307      	movs	r3, #7
 80076cc:	e006      	b.n	80076dc <HAL_GPIO_Init+0x204>
 80076ce:	2303      	movs	r3, #3
 80076d0:	e004      	b.n	80076dc <HAL_GPIO_Init+0x204>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e002      	b.n	80076dc <HAL_GPIO_Init+0x204>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <HAL_GPIO_Init+0x204>
 80076da:	2300      	movs	r3, #0
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	f002 0203 	and.w	r2, r2, #3
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	4093      	lsls	r3, r2
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076ec:	4935      	ldr	r1, [pc, #212]	; (80077c4 <HAL_GPIO_Init+0x2ec>)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	089b      	lsrs	r3, r3, #2
 80076f2:	3302      	adds	r3, #2
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076fa:	4b38      	ldr	r3, [pc, #224]	; (80077dc <HAL_GPIO_Init+0x304>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	43db      	mvns	r3, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800771e:	4a2f      	ldr	r2, [pc, #188]	; (80077dc <HAL_GPIO_Init+0x304>)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007724:	4b2d      	ldr	r3, [pc, #180]	; (80077dc <HAL_GPIO_Init+0x304>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	43db      	mvns	r3, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4013      	ands	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007748:	4a24      	ldr	r2, [pc, #144]	; (80077dc <HAL_GPIO_Init+0x304>)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800774e:	4b23      	ldr	r3, [pc, #140]	; (80077dc <HAL_GPIO_Init+0x304>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	43db      	mvns	r3, r3
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	4013      	ands	r3, r2
 800775c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007772:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <HAL_GPIO_Init+0x304>)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007778:	4b18      	ldr	r3, [pc, #96]	; (80077dc <HAL_GPIO_Init+0x304>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	43db      	mvns	r3, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4013      	ands	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800779c:	4a0f      	ldr	r2, [pc, #60]	; (80077dc <HAL_GPIO_Init+0x304>)
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3301      	adds	r3, #1
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	f67f aea2 	bls.w	80074f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	3724      	adds	r7, #36	; 0x24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	40023800 	.word	0x40023800
 80077c4:	40013800 	.word	0x40013800
 80077c8:	40020000 	.word	0x40020000
 80077cc:	40020400 	.word	0x40020400
 80077d0:	40020800 	.word	0x40020800
 80077d4:	40020c00 	.word	0x40020c00
 80077d8:	40021000 	.word	0x40021000
 80077dc:	40013c00 	.word	0x40013c00

080077e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	887b      	ldrh	r3, [r7, #2]
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	e001      	b.n	8007802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	807b      	strh	r3, [r7, #2]
 800781c:	4613      	mov	r3, r2
 800781e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007820:	787b      	ldrb	r3, [r7, #1]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007826:	887a      	ldrh	r2, [r7, #2]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800782c:	e003      	b.n	8007836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	041a      	lsls	r2, r3, #16
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	619a      	str	r2, [r3, #24]
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007854:	887a      	ldrh	r2, [r7, #2]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4013      	ands	r3, r2
 800785a:	041a      	lsls	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	43d9      	mvns	r1, r3
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	400b      	ands	r3, r1
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	619a      	str	r2, [r3, #24]
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800788e:	4a05      	ldr	r2, [pc, #20]	; (80078a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	4618      	mov	r0, r3
 8007898:	f7fd fc14 	bl	80050c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40013c00 	.word	0x40013c00

080078a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e12b      	b.n	8007b12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fd fc80 	bl	80051d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2224      	movs	r2, #36	; 0x24
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800790a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800790c:	f003 f8d6 	bl	800aabc <HAL_RCC_GetPCLK1Freq>
 8007910:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4a81      	ldr	r2, [pc, #516]	; (8007b1c <HAL_I2C_Init+0x274>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d807      	bhi.n	800792c <HAL_I2C_Init+0x84>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a80      	ldr	r2, [pc, #512]	; (8007b20 <HAL_I2C_Init+0x278>)
 8007920:	4293      	cmp	r3, r2
 8007922:	bf94      	ite	ls
 8007924:	2301      	movls	r3, #1
 8007926:	2300      	movhi	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e006      	b.n	800793a <HAL_I2C_Init+0x92>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a7d      	ldr	r2, [pc, #500]	; (8007b24 <HAL_I2C_Init+0x27c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	bf94      	ite	ls
 8007934:	2301      	movls	r3, #1
 8007936:	2300      	movhi	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0e7      	b.n	8007b12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a78      	ldr	r2, [pc, #480]	; (8007b28 <HAL_I2C_Init+0x280>)
 8007946:	fba2 2303 	umull	r2, r3, r2, r3
 800794a:	0c9b      	lsrs	r3, r3, #18
 800794c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a6a      	ldr	r2, [pc, #424]	; (8007b1c <HAL_I2C_Init+0x274>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d802      	bhi.n	800797c <HAL_I2C_Init+0xd4>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3301      	adds	r3, #1
 800797a:	e009      	b.n	8007990 <HAL_I2C_Init+0xe8>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	4a69      	ldr	r2, [pc, #420]	; (8007b2c <HAL_I2C_Init+0x284>)
 8007988:	fba2 2303 	umull	r2, r3, r2, r3
 800798c:	099b      	lsrs	r3, r3, #6
 800798e:	3301      	adds	r3, #1
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	430b      	orrs	r3, r1
 8007996:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80079a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	495c      	ldr	r1, [pc, #368]	; (8007b1c <HAL_I2C_Init+0x274>)
 80079ac:	428b      	cmp	r3, r1
 80079ae:	d819      	bhi.n	80079e4 <HAL_I2C_Init+0x13c>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	1e59      	subs	r1, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80079be:	1c59      	adds	r1, r3, #1
 80079c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079c4:	400b      	ands	r3, r1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_I2C_Init+0x138>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	1e59      	subs	r1, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d8:	3301      	adds	r3, #1
 80079da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079de:	e051      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 80079e0:	2304      	movs	r3, #4
 80079e2:	e04f      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d111      	bne.n	8007a10 <HAL_I2C_Init+0x168>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	1e58      	subs	r0, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	440b      	add	r3, r1
 80079fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fe:	3301      	adds	r3, #1
 8007a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bf0c      	ite	eq
 8007a08:	2301      	moveq	r3, #1
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e012      	b.n	8007a36 <HAL_I2C_Init+0x18e>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	1e58      	subs	r0, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6859      	ldr	r1, [r3, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	0099      	lsls	r1, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a26:	3301      	adds	r3, #1
 8007a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_I2C_Init+0x196>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e022      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10e      	bne.n	8007a64 <HAL_I2C_Init+0x1bc>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1e58      	subs	r0, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	440b      	add	r3, r1
 8007a54:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a62:	e00f      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	1e58      	subs	r0, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6859      	ldr	r1, [r3, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	0099      	lsls	r1, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	6809      	ldr	r1, [r1, #0]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6911      	ldr	r1, [r2, #16]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	4311      	orrs	r1, r2
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	000186a0 	.word	0x000186a0
 8007b20:	001e847f 	.word	0x001e847f
 8007b24:	003d08ff 	.word	0x003d08ff
 8007b28:	431bde83 	.word	0x431bde83
 8007b2c:	10624dd3 	.word	0x10624dd3

08007b30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	817b      	strh	r3, [r7, #10]
 8007b42:	460b      	mov	r3, r1
 8007b44:	813b      	strh	r3, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b4a:	f7fe ff73 	bl	8006a34 <HAL_GetTick>
 8007b4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	f040 80d9 	bne.w	8007d10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	2319      	movs	r3, #25
 8007b64:	2201      	movs	r2, #1
 8007b66:	496d      	ldr	r1, [pc, #436]	; (8007d1c <HAL_I2C_Mem_Write+0x1ec>)
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f002 f90d 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
 8007b76:	e0cc      	b.n	8007d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_I2C_Mem_Write+0x56>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e0c5      	b.n	8007d12 <HAL_I2C_Mem_Write+0x1e2>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d007      	beq.n	8007bac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2221      	movs	r2, #33	; 0x21
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2240      	movs	r2, #64	; 0x40
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a4d      	ldr	r2, [pc, #308]	; (8007d20 <HAL_I2C_Mem_Write+0x1f0>)
 8007bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bee:	88f8      	ldrh	r0, [r7, #6]
 8007bf0:	893a      	ldrh	r2, [r7, #8]
 8007bf2:	8979      	ldrh	r1, [r7, #10]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f001 fe9c 	bl	800993c <I2C_RequestMemoryWrite>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d052      	beq.n	8007cb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e081      	b.n	8007d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f002 f98e 	bl	8009f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00d      	beq.n	8007c3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d107      	bne.n	8007c36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e06b      	b.n	8007d12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d11b      	bne.n	8007cb0 <HAL_I2C_Mem_Write+0x180>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d017      	beq.n	8007cb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1aa      	bne.n	8007c0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f002 f97a 	bl	8009fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d107      	bne.n	8007ce0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e016      	b.n	8007d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e000      	b.n	8007d12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d10:	2302      	movs	r3, #2
  }
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	00100002 	.word	0x00100002
 8007d20:	ffff0000 	.word	0xffff0000

08007d24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08c      	sub	sp, #48	; 0x30
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	4611      	mov	r1, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	817b      	strh	r3, [r7, #10]
 8007d36:	460b      	mov	r3, r1
 8007d38:	813b      	strh	r3, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d3e:	f7fe fe79 	bl	8006a34 <HAL_GetTick>
 8007d42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	f040 8208 	bne.w	8008162 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2319      	movs	r3, #25
 8007d58:	2201      	movs	r2, #1
 8007d5a:	497b      	ldr	r1, [pc, #492]	; (8007f48 <HAL_I2C_Mem_Read+0x224>)
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f002 f813 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e1fb      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_I2C_Mem_Read+0x56>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e1f4      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d007      	beq.n	8007da0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2222      	movs	r2, #34	; 0x22
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a5b      	ldr	r2, [pc, #364]	; (8007f4c <HAL_I2C_Mem_Read+0x228>)
 8007de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007de2:	88f8      	ldrh	r0, [r7, #6]
 8007de4:	893a      	ldrh	r2, [r7, #8]
 8007de6:	8979      	ldrh	r1, [r7, #10]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4603      	mov	r3, r0
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f001 fe38 	bl	8009a68 <I2C_RequestMemoryRead>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e1b0      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d113      	bne.n	8007e32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	623b      	str	r3, [r7, #32]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	623b      	str	r3, [r7, #32]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	623b      	str	r3, [r7, #32]
 8007e1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	e184      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d11b      	bne.n	8007e72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	61fb      	str	r3, [r7, #28]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	e164      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d11b      	bne.n	8007eb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	e144      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ec8:	e138      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	f200 80f1 	bhi.w	80080b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d123      	bne.n	8007f24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f002 f8db 	bl	800a09c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e139      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f22:	e10b      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d14e      	bne.n	8007fca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	2200      	movs	r2, #0
 8007f34:	4906      	ldr	r1, [pc, #24]	; (8007f50 <HAL_I2C_Mem_Read+0x22c>)
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f001 ff26 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e10e      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
 8007f46:	bf00      	nop
 8007f48:	00100002 	.word	0x00100002
 8007f4c:	ffff0000 	.word	0xffff0000
 8007f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fc8:	e0b8      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4966      	ldr	r1, [pc, #408]	; (800816c <HAL_I2C_Mem_Read+0x448>)
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f001 fed7 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0bf      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	2200      	movs	r2, #0
 800802e:	494f      	ldr	r1, [pc, #316]	; (800816c <HAL_I2C_Mem_Read+0x448>)
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f001 fea9 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e091      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800804e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691a      	ldr	r2, [r3, #16]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806c:	3b01      	subs	r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080b4:	e042      	b.n	800813c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f001 ffee 	bl	800a09c <I2C_WaitOnRXNEFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e04c      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b04      	cmp	r3, #4
 8008108:	d118      	bne.n	800813c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008140:	2b00      	cmp	r3, #0
 8008142:	f47f aec2 	bne.w	8007eca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e000      	b.n	8008164 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
  }
}
 8008164:	4618      	mov	r0, r3
 8008166:	3728      	adds	r7, #40	; 0x28
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	00010004 	.word	0x00010004

08008170 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008190:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008198:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	2b10      	cmp	r3, #16
 800819e:	d003      	beq.n	80081a8 <HAL_I2C_EV_IRQHandler+0x38>
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	f040 80c1 	bne.w	800832a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10d      	bne.n	80081de <HAL_I2C_EV_IRQHandler+0x6e>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80081c8:	d003      	beq.n	80081d2 <HAL_I2C_EV_IRQHandler+0x62>
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081d0:	d101      	bne.n	80081d6 <HAL_I2C_EV_IRQHandler+0x66>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <HAL_I2C_EV_IRQHandler+0x68>
 80081d6:	2300      	movs	r3, #0
 80081d8:	2b01      	cmp	r3, #1
 80081da:	f000 8132 	beq.w	8008442 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <HAL_I2C_EV_IRQHandler+0x92>
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	0a5b      	lsrs	r3, r3, #9
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 ffd6 	bl	800a1a6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fd83 	bl	8008d06 <I2C_Master_SB>
 8008200:	e092      	b.n	8008328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <HAL_I2C_EV_IRQHandler+0xb2>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	0a5b      	lsrs	r3, r3, #9
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fdf9 	bl	8008e12 <I2C_Master_ADD10>
 8008220:	e082      	b.n	8008328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <HAL_I2C_EV_IRQHandler+0xd2>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	0a5b      	lsrs	r3, r3, #9
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fe13 	bl	8008e66 <I2C_Master_ADDR>
 8008240:	e072      	b.n	8008328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	089b      	lsrs	r3, r3, #2
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d03b      	beq.n	80082c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800825c:	f000 80f3 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	09db      	lsrs	r3, r3, #7
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00f      	beq.n	800828c <HAL_I2C_EV_IRQHandler+0x11c>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	0a9b      	lsrs	r3, r3, #10
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <HAL_I2C_EV_IRQHandler+0x11c>
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d103      	bne.n	800828c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9f3 	bl	8008670 <I2C_MasterTransmit_TXE>
 800828a:	e04d      	b.n	8008328 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	089b      	lsrs	r3, r3, #2
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 80d6 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	0a5b      	lsrs	r3, r3, #9
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80cf 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b21      	cmp	r3, #33	; 0x21
 80082ac:	d103      	bne.n	80082b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa7a 	bl	80087a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082b4:	e0c7      	b.n	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	2b40      	cmp	r3, #64	; 0x40
 80082ba:	f040 80c4 	bne.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fae8 	bl	8008894 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082c4:	e0bf      	b.n	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d4:	f000 80b7 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	099b      	lsrs	r3, r3, #6
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00f      	beq.n	8008304 <HAL_I2C_EV_IRQHandler+0x194>
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	0a9b      	lsrs	r3, r3, #10
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <HAL_I2C_EV_IRQHandler+0x194>
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	089b      	lsrs	r3, r3, #2
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fb5d 	bl	80089bc <I2C_MasterReceive_RXNE>
 8008302:	e011      	b.n	8008328 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 809a 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	0a5b      	lsrs	r3, r3, #9
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8093 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc06 	bl	8008b32 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008326:	e08e      	b.n	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008328:	e08d      	b.n	8008446 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	e007      	b.n	800834c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d012      	beq.n	800837e <HAL_I2C_EV_IRQHandler+0x20e>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	0a5b      	lsrs	r3, r3, #9
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00c      	beq.n	800837e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 ffc4 	bl	8009304 <I2C_Slave_ADDR>
 800837c:	e066      	b.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	091b      	lsrs	r3, r3, #4
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <HAL_I2C_EV_IRQHandler+0x22e>
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	0a5b      	lsrs	r3, r3, #9
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fffe 	bl	8009398 <I2C_Slave_STOPF>
 800839c:	e056      	b.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b21      	cmp	r3, #33	; 0x21
 80083a2:	d002      	beq.n	80083aa <HAL_I2C_EV_IRQHandler+0x23a>
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	2b29      	cmp	r3, #41	; 0x29
 80083a8:	d125      	bne.n	80083f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	09db      	lsrs	r3, r3, #7
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00f      	beq.n	80083d6 <HAL_I2C_EV_IRQHandler+0x266>
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	0a9b      	lsrs	r3, r3, #10
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <HAL_I2C_EV_IRQHandler+0x266>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	089b      	lsrs	r3, r3, #2
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 feda 	bl	8009188 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083d4:	e039      	b.n	800844a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	089b      	lsrs	r3, r3, #2
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d033      	beq.n	800844a <HAL_I2C_EV_IRQHandler+0x2da>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	0a5b      	lsrs	r3, r3, #9
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02d      	beq.n	800844a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 ff07 	bl	8009202 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083f4:	e029      	b.n	800844a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	099b      	lsrs	r3, r3, #6
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00f      	beq.n	8008422 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	0a9b      	lsrs	r3, r3, #10
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <HAL_I2C_EV_IRQHandler+0x2b2>
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	089b      	lsrs	r3, r3, #2
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d103      	bne.n	8008422 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 ff12 	bl	8009244 <I2C_SlaveReceive_RXNE>
 8008420:	e014      	b.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	089b      	lsrs	r3, r3, #2
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00e      	beq.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	0a5b      	lsrs	r3, r3, #9
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 ff40 	bl	80092c0 <I2C_SlaveReceive_BTF>
 8008440:	e004      	b.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008442:	bf00      	nop
 8008444:	e002      	b.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008446:	bf00      	nop
 8008448:	e000      	b.n	800844c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800844a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b08a      	sub	sp, #40	; 0x28
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008474:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00e      	beq.n	80084a0 <HAL_I2C_ER_IRQHandler+0x4e>
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	0a1b      	lsrs	r3, r3, #8
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800849e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	0a5b      	lsrs	r3, r3, #9
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <HAL_I2C_ER_IRQHandler+0x78>
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80084c8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	0a9b      	lsrs	r3, r3, #10
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03f      	beq.n	8008556 <HAL_I2C_ER_IRQHandler+0x104>
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d039      	beq.n	8008556 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80084e2:	7efb      	ldrb	r3, [r7, #27]
 80084e4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80084fc:	7ebb      	ldrb	r3, [r7, #26]
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d112      	bne.n	8008528 <HAL_I2C_ER_IRQHandler+0xd6>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10f      	bne.n	8008528 <HAL_I2C_ER_IRQHandler+0xd6>
 8008508:	7cfb      	ldrb	r3, [r7, #19]
 800850a:	2b21      	cmp	r3, #33	; 0x21
 800850c:	d008      	beq.n	8008520 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800850e:	7cfb      	ldrb	r3, [r7, #19]
 8008510:	2b29      	cmp	r3, #41	; 0x29
 8008512:	d005      	beq.n	8008520 <HAL_I2C_ER_IRQHandler+0xce>
 8008514:	7cfb      	ldrb	r3, [r7, #19]
 8008516:	2b28      	cmp	r3, #40	; 0x28
 8008518:	d106      	bne.n	8008528 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b21      	cmp	r3, #33	; 0x21
 800851e:	d103      	bne.n	8008528 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 f869 	bl	80095f8 <I2C_Slave_AF>
 8008526:	e016      	b.n	8008556 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008530:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	f043 0304 	orr.w	r3, r3, #4
 8008538:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800853a:	7efb      	ldrb	r3, [r7, #27]
 800853c:	2b10      	cmp	r3, #16
 800853e:	d002      	beq.n	8008546 <HAL_I2C_ER_IRQHandler+0xf4>
 8008540:	7efb      	ldrb	r3, [r7, #27]
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d107      	bne.n	8008556 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008554:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	0adb      	lsrs	r3, r3, #11
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00e      	beq.n	8008580 <HAL_I2C_ER_IRQHandler+0x12e>
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	f043 0308 	orr.w	r3, r3, #8
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800857e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 f8a0 	bl	80096d8 <I2C_ITError>
  }
}
 8008598:	bf00      	nop
 800859a:	3728      	adds	r7, #40	; 0x28
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
 80085fc:	4613      	mov	r3, r2
 80085fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800867e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008686:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d150      	bne.n	8008738 <I2C_MasterTransmit_TXE+0xc8>
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b21      	cmp	r3, #33	; 0x21
 800869a:	d14d      	bne.n	8008738 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b08      	cmp	r3, #8
 80086a0:	d01d      	beq.n	80086de <I2C_MasterTransmit_TXE+0x6e>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d01a      	beq.n	80086de <I2C_MasterTransmit_TXE+0x6e>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086ae:	d016      	beq.n	80086de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2211      	movs	r2, #17
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff ff62 	bl	80085a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086dc:	e060      	b.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b40      	cmp	r3, #64	; 0x40
 8008716:	d107      	bne.n	8008728 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff ff7d 	bl	8008620 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008726:	e03b      	b.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ff35 	bl	80085a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008736:	e033      	b.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	2b21      	cmp	r3, #33	; 0x21
 800873c:	d005      	beq.n	800874a <I2C_MasterTransmit_TXE+0xda>
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b40      	cmp	r3, #64	; 0x40
 8008742:	d12d      	bne.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	2b22      	cmp	r3, #34	; 0x22
 8008748:	d12a      	bne.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008762:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008764:	e01c      	b.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b40      	cmp	r3, #64	; 0x40
 8008770:	d103      	bne.n	800877a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f88e 	bl	8008894 <I2C_MemoryTransmit_TXE_BTF>
}
 8008778:	e012      	b.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008794:	b29b      	uxth	r3, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800879e:	e7ff      	b.n	80087a0 <I2C_MasterTransmit_TXE+0x130>
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b21      	cmp	r3, #33	; 0x21
 80087c0:	d164      	bne.n	800888c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d012      	beq.n	80087f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80087f0:	e04c      	b.n	800888c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d01d      	beq.n	8008834 <I2C_MasterTransmit_BTF+0x8c>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d01a      	beq.n	8008834 <I2C_MasterTransmit_BTF+0x8c>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008804:	d016      	beq.n	8008834 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008814:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2211      	movs	r2, #17
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff feb7 	bl	80085a0 <HAL_I2C_MasterTxCpltCallback>
}
 8008832:	e02b      	b.n	800888c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008842:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008852:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b40      	cmp	r3, #64	; 0x40
 800886c:	d107      	bne.n	800887e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fed2 	bl	8008620 <HAL_I2C_MemTxCpltCallback>
}
 800887c:	e006      	b.n	800888c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff fe8a 	bl	80085a0 <HAL_I2C_MasterTxCpltCallback>
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d11d      	bne.n	80088e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d10b      	bne.n	80088cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c4:	1c9a      	adds	r2, r3, #2
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80088ca:	e073      	b.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	121b      	asrs	r3, r3, #8
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80088e6:	e065      	b.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10b      	bne.n	8008908 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008906:	e055      	b.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890c:	2b02      	cmp	r3, #2
 800890e:	d151      	bne.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	2b22      	cmp	r3, #34	; 0x22
 8008914:	d10d      	bne.n	8008932 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008924:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008930:	e040      	b.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d015      	beq.n	8008968 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b21      	cmp	r3, #33	; 0x21
 8008940:	d112      	bne.n	8008968 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008966:	e025      	b.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d120      	bne.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b21      	cmp	r3, #33	; 0x21
 8008976:	d11d      	bne.n	80089b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008986:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008996:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff fe36 	bl	8008620 <HAL_I2C_MemTxCpltCallback>
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b22      	cmp	r3, #34	; 0x22
 80089ce:	f040 80ac 	bne.w	8008b2a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d921      	bls.n	8008a24 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	f040 808c 	bne.w	8008b2a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a20:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008a22:	e082      	b.n	8008b2a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d075      	beq.n	8008b18 <I2C_MasterReceive_RXNE+0x15c>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d002      	beq.n	8008a38 <I2C_MasterReceive_RXNE+0x7c>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d16f      	bne.n	8008b18 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 fafd 	bl	800a038 <I2C_WaitOnSTOPRequestThroughIT>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d142      	bne.n	8008aca <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a52:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691a      	ldr	r2, [r3, #16]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d10a      	bne.n	8008ab4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff fdc1 	bl	8008634 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ab2:	e03a      	b.n	8008b2a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2212      	movs	r2, #18
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff fd76 	bl	80085b4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008ac8:	e02f      	b.n	8008b2a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ad8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691a      	ldr	r2, [r3, #16]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff fd99 	bl	8008648 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008b16:	e008      	b.n	8008b2a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b26:	605a      	str	r2, [r3, #4]
}
 8008b28:	e7ff      	b.n	8008b2a <I2C_MasterReceive_RXNE+0x16e>
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d11b      	bne.n	8008b82 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b58:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008b80:	e0bd      	b.n	8008cfe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d129      	bne.n	8008be0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b9a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d00a      	beq.n	8008bb8 <I2C_MasterReceive_BTF+0x86>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d007      	beq.n	8008bb8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008bde:	e08e      	b.n	8008cfe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d176      	bne.n	8008cd8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d002      	beq.n	8008bf6 <I2C_MasterReceive_BTF+0xc4>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d108      	bne.n	8008c08 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	e019      	b.n	8008c3c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d002      	beq.n	8008c14 <I2C_MasterReceive_BTF+0xe2>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d108      	bne.n	8008c26 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e00a      	b.n	8008c3c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d007      	beq.n	8008c3c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008c96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d10a      	bne.n	8008cc2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fcba 	bl	8008634 <HAL_I2C_MemRxCpltCallback>
}
 8008cc0:	e01d      	b.n	8008cfe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2212      	movs	r2, #18
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fc6f 	bl	80085b4 <HAL_I2C_MasterRxCpltCallback>
}
 8008cd6:	e012      	b.n	8008cfe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d117      	bne.n	8008d4a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d32:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008d34:	e067      	b.n	8008e06 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	611a      	str	r2, [r3, #16]
}
 8008d48:	e05d      	b.n	8008e06 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d52:	d133      	bne.n	8008dbc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b21      	cmp	r3, #33	; 0x21
 8008d5e:	d109      	bne.n	8008d74 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d70:	611a      	str	r2, [r3, #16]
 8008d72:	e008      	b.n	8008d86 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f043 0301 	orr.w	r3, r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <I2C_Master_SB+0x92>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d108      	bne.n	8008daa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d032      	beq.n	8008e06 <I2C_Master_SB+0x100>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d02d      	beq.n	8008e06 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008db8:	605a      	str	r2, [r3, #4]
}
 8008dba:	e024      	b.n	8008e06 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10e      	bne.n	8008de2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	11db      	asrs	r3, r3, #7
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0306 	and.w	r3, r3, #6
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f063 030f 	orn	r3, r3, #15
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	611a      	str	r2, [r3, #16]
}
 8008de0:	e011      	b.n	8008e06 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10d      	bne.n	8008e06 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	11db      	asrs	r3, r3, #7
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0306 	and.w	r3, r3, #6
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f063 030e 	orn	r3, r3, #14
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	611a      	str	r2, [r3, #16]
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <I2C_Master_ADD10+0x26>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d108      	bne.n	8008e4a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00c      	beq.n	8008e5a <I2C_Master_ADD10+0x48>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d007      	beq.n	8008e5a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e58:	605a      	str	r2, [r3, #4]
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b091      	sub	sp, #68	; 0x44
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b22      	cmp	r3, #34	; 0x22
 8008e8e:	f040 8169 	bne.w	8009164 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10f      	bne.n	8008eba <I2C_Master_ADDR+0x54>
 8008e9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e9e:	2b40      	cmp	r3, #64	; 0x40
 8008ea0:	d10b      	bne.n	8008eba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	633b      	str	r3, [r7, #48]	; 0x30
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	e160      	b.n	800917c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d11d      	bne.n	8008efe <I2C_Master_ADDR+0x98>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008eca:	d118      	bne.n	8008efe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ecc:	2300      	movs	r3, #0
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ef0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	651a      	str	r2, [r3, #80]	; 0x50
 8008efc:	e13e      	b.n	800917c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d113      	bne.n	8008f30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	e115      	b.n	800915c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	f040 808a 	bne.w	8009050 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f42:	d137      	bne.n	8008fb4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f62:	d113      	bne.n	8008f8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f74:	2300      	movs	r3, #0
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	e0e7      	b.n	800915c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	623b      	str	r3, [r7, #32]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	623b      	str	r3, [r7, #32]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	623b      	str	r3, [r7, #32]
 8008fa0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	e0d3      	b.n	800915c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d02e      	beq.n	8009018 <I2C_Master_ADDR+0x1b2>
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d02b      	beq.n	8009018 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	2b12      	cmp	r3, #18
 8008fc4:	d102      	bne.n	8008fcc <I2C_Master_ADDR+0x166>
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d125      	bne.n	8009018 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d00e      	beq.n	8008ff0 <I2C_Master_ADDR+0x18a>
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d00b      	beq.n	8008ff0 <I2C_Master_ADDR+0x18a>
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	2b10      	cmp	r3, #16
 8008fdc:	d008      	beq.n	8008ff0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e007      	b.n	8009000 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ffe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	61fb      	str	r3, [r7, #28]
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	e0a1      	b.n	800915c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009026:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	61bb      	str	r3, [r7, #24]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e085      	b.n	800915c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d14d      	bne.n	80090f6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	2b04      	cmp	r3, #4
 800905e:	d016      	beq.n	800908e <I2C_Master_ADDR+0x228>
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	2b02      	cmp	r3, #2
 8009064:	d013      	beq.n	800908e <I2C_Master_ADDR+0x228>
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	2b10      	cmp	r3, #16
 800906a:	d010      	beq.n	800908e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e007      	b.n	800909e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800909c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ac:	d117      	bne.n	80090de <I2C_Master_ADDR+0x278>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090b4:	d00b      	beq.n	80090ce <I2C_Master_ADDR+0x268>
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d008      	beq.n	80090ce <I2C_Master_ADDR+0x268>
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d005      	beq.n	80090ce <I2C_Master_ADDR+0x268>
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	d002      	beq.n	80090ce <I2C_Master_ADDR+0x268>
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	d107      	bne.n	80090de <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	e032      	b.n	800915c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009104:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009114:	d117      	bne.n	8009146 <I2C_Master_ADDR+0x2e0>
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800911c:	d00b      	beq.n	8009136 <I2C_Master_ADDR+0x2d0>
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	2b01      	cmp	r3, #1
 8009122:	d008      	beq.n	8009136 <I2C_Master_ADDR+0x2d0>
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	2b08      	cmp	r3, #8
 8009128:	d005      	beq.n	8009136 <I2C_Master_ADDR+0x2d0>
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	2b10      	cmp	r3, #16
 800912e:	d002      	beq.n	8009136 <I2C_Master_ADDR+0x2d0>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	2b20      	cmp	r3, #32
 8009134:	d107      	bne.n	8009146 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009144:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009162:	e00b      	b.n	800917c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
}
 800917a:	e7ff      	b.n	800917c <I2C_Master_ADDR+0x316>
 800917c:	bf00      	nop
 800917e:	3744      	adds	r7, #68	; 0x44
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009196:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02b      	beq.n	80091fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	781a      	ldrb	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d114      	bne.n	80091fa <I2C_SlaveTransmit_TXE+0x72>
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	2b29      	cmp	r3, #41	; 0x29
 80091d4:	d111      	bne.n	80091fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2221      	movs	r2, #33	; 0x21
 80091ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2228      	movs	r2, #40	; 0x28
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff f9e7 	bl	80085c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d011      	beq.n	8009238 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	781a      	ldrb	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922e:	b29b      	uxth	r3, r3
 8009230:	3b01      	subs	r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009252:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d02c      	beq.n	80092b8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d114      	bne.n	80092b8 <I2C_SlaveReceive_RXNE+0x74>
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	2b2a      	cmp	r3, #42	; 0x2a
 8009292:	d111      	bne.n	80092b8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2222      	movs	r2, #34	; 0x22
 80092a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2228      	movs	r2, #40	; 0x28
 80092ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff f992 	bl	80085dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d012      	beq.n	80092f8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	b2d2      	uxtb	r2, r2
 80092de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800931e:	2b28      	cmp	r3, #40	; 0x28
 8009320:	d127      	bne.n	8009372 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009330:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	089b      	lsrs	r3, r3, #2
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	09db      	lsrs	r3, r3, #7
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	81bb      	strh	r3, [r7, #12]
 8009354:	e002      	b.n	800935c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009364:	89ba      	ldrh	r2, [r7, #12]
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff f940 	bl	80085f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009370:	e00e      	b.n	8009390 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009372:	2300      	movs	r3, #0
 8009374:	60bb      	str	r3, [r7, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	60bb      	str	r3, [r7, #8]
 8009386:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80093b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80093b8:	2300      	movs	r3, #0
 80093ba:	60bb      	str	r3, [r7, #8]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	60bb      	str	r3, [r7, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093f4:	d172      	bne.n	80094dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b22      	cmp	r3, #34	; 0x22
 80093fa:	d002      	beq.n	8009402 <I2C_Slave_STOPF+0x6a>
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009400:	d135      	bne.n	800946e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	b29a      	uxth	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	f043 0204 	orr.w	r2, r3, #4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009434:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	4618      	mov	r0, r3
 800943c:	f7fd ff5e 	bl	80072fc <HAL_DMA_GetState>
 8009440:	4603      	mov	r3, r0
 8009442:	2b01      	cmp	r3, #1
 8009444:	d049      	beq.n	80094da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	4a69      	ldr	r2, [pc, #420]	; (80095f0 <I2C_Slave_STOPF+0x258>)
 800944c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	4618      	mov	r0, r3
 8009454:	f7fd fda6 	bl	8006fa4 <HAL_DMA_Abort_IT>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d03d      	beq.n	80094da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800946c:	e035      	b.n	80094da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	f043 0204 	orr.w	r2, r3, #4
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fd ff28 	bl	80072fc <HAL_DMA_GetState>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d014      	beq.n	80094dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b6:	4a4e      	ldr	r2, [pc, #312]	; (80095f0 <I2C_Slave_STOPF+0x258>)
 80094b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd fd70 	bl	8006fa4 <HAL_DMA_Abort_IT>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d008      	beq.n	80094dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
 80094d8:	e000      	b.n	80094dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80094da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d03e      	beq.n	8009564 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d112      	bne.n	800951a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691a      	ldr	r2, [r3, #16]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d112      	bne.n	800954e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	f043 0204 	orr.w	r2, r3, #4
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f8b3 	bl	80096d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009572:	e039      	b.n	80095e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	2b2a      	cmp	r3, #42	; 0x2a
 8009578:	d109      	bne.n	800958e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2228      	movs	r2, #40	; 0x28
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff f827 	bl	80085dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b28      	cmp	r3, #40	; 0x28
 8009598:	d111      	bne.n	80095be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a15      	ldr	r2, [pc, #84]	; (80095f4 <I2C_Slave_STOPF+0x25c>)
 800959e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff f828 	bl	800860c <HAL_I2C_ListenCpltCallback>
}
 80095bc:	e014      	b.n	80095e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c2:	2b22      	cmp	r3, #34	; 0x22
 80095c4:	d002      	beq.n	80095cc <I2C_Slave_STOPF+0x234>
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	2b22      	cmp	r3, #34	; 0x22
 80095ca:	d10d      	bne.n	80095e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fe fffa 	bl	80085dc <HAL_I2C_SlaveRxCpltCallback>
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	08009c39 	.word	0x08009c39
 80095f4:	ffff0000 	.word	0xffff0000

080095f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009606:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b08      	cmp	r3, #8
 8009612:	d002      	beq.n	800961a <I2C_Slave_AF+0x22>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b20      	cmp	r3, #32
 8009618:	d129      	bne.n	800966e <I2C_Slave_AF+0x76>
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b28      	cmp	r3, #40	; 0x28
 800961e:	d126      	bne.n	800966e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a2c      	ldr	r2, [pc, #176]	; (80096d4 <I2C_Slave_AF+0xdc>)
 8009624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009634:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800963e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800964e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fe ffd0 	bl	800860c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800966c:	e02e      	b.n	80096cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b21      	cmp	r3, #33	; 0x21
 8009672:	d126      	bne.n	80096c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <I2C_Slave_AF+0xdc>)
 8009678:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2221      	movs	r2, #33	; 0x21
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800969e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fe ff84 	bl	80085c8 <HAL_I2C_SlaveTxCpltCallback>
}
 80096c0:	e004      	b.n	80096cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096ca:	615a      	str	r2, [r3, #20]
}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	ffff0000 	.word	0xffff0000

080096d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d002      	beq.n	80096fc <I2C_ITError+0x24>
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b40      	cmp	r3, #64	; 0x40
 80096fa:	d10a      	bne.n	8009712 <I2C_ITError+0x3a>
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	2b22      	cmp	r3, #34	; 0x22
 8009700:	d107      	bne.n	8009712 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009710:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009718:	2b28      	cmp	r3, #40	; 0x28
 800971a:	d107      	bne.n	800972c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2228      	movs	r2, #40	; 0x28
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800972a:	e015      	b.n	8009758 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800973a:	d00a      	beq.n	8009752 <I2C_ITError+0x7a>
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	2b60      	cmp	r3, #96	; 0x60
 8009740:	d007      	beq.n	8009752 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009766:	d162      	bne.n	800982e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009776:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b01      	cmp	r3, #1
 8009784:	d020      	beq.n	80097c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	4a6a      	ldr	r2, [pc, #424]	; (8009934 <I2C_ITError+0x25c>)
 800978c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	4618      	mov	r0, r3
 8009794:	f7fd fc06 	bl	8006fa4 <HAL_DMA_Abort_IT>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 8089 	beq.w	80098b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0201 	bic.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097c2:	4610      	mov	r0, r2
 80097c4:	4798      	blx	r3
 80097c6:	e074      	b.n	80098b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	4a59      	ldr	r2, [pc, #356]	; (8009934 <I2C_ITError+0x25c>)
 80097ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fd fbe5 	bl	8006fa4 <HAL_DMA_Abort_IT>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d068      	beq.n	80098b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ea:	2b40      	cmp	r3, #64	; 0x40
 80097ec:	d10b      	bne.n	8009806 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	691a      	ldr	r2, [r3, #16]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 0201 	bic.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2220      	movs	r2, #32
 800981a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009828:	4610      	mov	r0, r2
 800982a:	4798      	blx	r3
 800982c:	e041      	b.n	80098b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b60      	cmp	r3, #96	; 0x60
 8009838:	d125      	bne.n	8009886 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009852:	2b40      	cmp	r3, #64	; 0x40
 8009854:	d10b      	bne.n	800986e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 0201 	bic.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7fe feec 	bl	800865c <HAL_I2C_AbortCpltCallback>
 8009884:	e015      	b.n	80098b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d10b      	bne.n	80098ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fe fecb 	bl	8008648 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10e      	bne.n	80098e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d109      	bne.n	80098e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d104      	bne.n	80098e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d007      	beq.n	80098f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80098ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b04      	cmp	r3, #4
 8009902:	d113      	bne.n	800992c <I2C_ITError+0x254>
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	2b28      	cmp	r3, #40	; 0x28
 8009908:	d110      	bne.n	800992c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <I2C_ITError+0x260>)
 800990e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2220      	movs	r2, #32
 800991a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fe fe70 	bl	800860c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	08009c39 	.word	0x08009c39
 8009938:	ffff0000 	.word	0xffff0000

0800993c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	461a      	mov	r2, r3
 800994a:	4603      	mov	r3, r0
 800994c:	817b      	strh	r3, [r7, #10]
 800994e:	460b      	mov	r3, r1
 8009950:	813b      	strh	r3, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	2200      	movs	r2, #0
 800996e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fa08 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800998c:	d103      	bne.n	8009996 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e05f      	b.n	8009a5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800999a:	897b      	ldrh	r3, [r7, #10]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	461a      	mov	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	6a3a      	ldr	r2, [r7, #32]
 80099ae:	492d      	ldr	r1, [pc, #180]	; (8009a64 <I2C_RequestMemoryWrite+0x128>)
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fa40 	bl	8009e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e04c      	b.n	8009a5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	617b      	str	r3, [r7, #20]
 80099d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d8:	6a39      	ldr	r1, [r7, #32]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 faaa 	bl	8009f34 <I2C_WaitOnTXEFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00d      	beq.n	8009a02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d107      	bne.n	80099fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e02b      	b.n	8009a5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d105      	bne.n	8009a14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a08:	893b      	ldrh	r3, [r7, #8]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	611a      	str	r2, [r3, #16]
 8009a12:	e021      	b.n	8009a58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a14:	893b      	ldrh	r3, [r7, #8]
 8009a16:	0a1b      	lsrs	r3, r3, #8
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a24:	6a39      	ldr	r1, [r7, #32]
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 fa84 	bl	8009f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00d      	beq.n	8009a4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d107      	bne.n	8009a4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e005      	b.n	8009a5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a4e:	893b      	ldrh	r3, [r7, #8]
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	00010002 	.word	0x00010002

08009a68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af02      	add	r7, sp, #8
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	4608      	mov	r0, r1
 8009a72:	4611      	mov	r1, r2
 8009a74:	461a      	mov	r2, r3
 8009a76:	4603      	mov	r3, r0
 8009a78:	817b      	strh	r3, [r7, #10]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	813b      	strh	r3, [r7, #8]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f96a 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00d      	beq.n	8009ad6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac8:	d103      	bne.n	8009ad2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e0aa      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ad6:	897b      	ldrh	r3, [r7, #10]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	6a3a      	ldr	r2, [r7, #32]
 8009aea:	4952      	ldr	r1, [pc, #328]	; (8009c34 <I2C_RequestMemoryRead+0x1cc>)
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f9a2 	bl	8009e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e097      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b14:	6a39      	ldr	r1, [r7, #32]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 fa0c 	bl	8009f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00d      	beq.n	8009b3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d107      	bne.n	8009b3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e076      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b3e:	88fb      	ldrh	r3, [r7, #6]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d105      	bne.n	8009b50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b44:	893b      	ldrh	r3, [r7, #8]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	611a      	str	r2, [r3, #16]
 8009b4e:	e021      	b.n	8009b94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b50:	893b      	ldrh	r3, [r7, #8]
 8009b52:	0a1b      	lsrs	r3, r3, #8
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b60:	6a39      	ldr	r1, [r7, #32]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f9e6 	bl	8009f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00d      	beq.n	8009b8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d107      	bne.n	8009b86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e050      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b8a:	893b      	ldrh	r3, [r7, #8]
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b96:	6a39      	ldr	r1, [r7, #32]
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 f9cb 	bl	8009f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00d      	beq.n	8009bc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	d107      	bne.n	8009bbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e035      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f8d3 	bl	8009d88 <I2C_WaitOnFlagUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00d      	beq.n	8009c04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf6:	d103      	bne.n	8009c00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e013      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c04:	897b      	ldrh	r3, [r7, #10]
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	f043 0301 	orr.w	r3, r3, #1
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	6a3a      	ldr	r2, [r7, #32]
 8009c18:	4906      	ldr	r1, [pc, #24]	; (8009c34 <I2C_RequestMemoryRead+0x1cc>)
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 f90b 	bl	8009e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	00010002 	.word	0x00010002

08009c38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c52:	4b4b      	ldr	r3, [pc, #300]	; (8009d80 <I2C_DMAAbort+0x148>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	08db      	lsrs	r3, r3, #3
 8009c58:	4a4a      	ldr	r2, [pc, #296]	; (8009d84 <I2C_DMAAbort+0x14c>)
 8009c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5e:	0a1a      	lsrs	r2, r3, #8
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	00da      	lsls	r2, r3, #3
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	f043 0220 	orr.w	r2, r3, #32
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009c7e:	e00a      	b.n	8009c96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c94:	d0ea      	beq.n	8009c6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	2200      	movs	r2, #0
 8009cda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce8:	2200      	movs	r2, #0
 8009cea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0201 	bic.w	r2, r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b60      	cmp	r3, #96	; 0x60
 8009d06:	d10e      	bne.n	8009d26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009d1e:	6978      	ldr	r0, [r7, #20]
 8009d20:	f7fe fc9c 	bl	800865c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d24:	e027      	b.n	8009d76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d26:	7cfb      	ldrb	r3, [r7, #19]
 8009d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d2c:	2b28      	cmp	r3, #40	; 0x28
 8009d2e:	d117      	bne.n	8009d60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	2200      	movs	r2, #0
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2228      	movs	r2, #40	; 0x28
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d5e:	e007      	b.n	8009d70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009d70:	6978      	ldr	r0, [r7, #20]
 8009d72:	f7fe fc69 	bl	8008648 <HAL_I2C_ErrorCallback>
}
 8009d76:	bf00      	nop
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000224 	.word	0x20000224
 8009d84:	14f8b589 	.word	0x14f8b589

08009d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d98:	e025      	b.n	8009de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d021      	beq.n	8009de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da2:	f7fc fe47 	bl	8006a34 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d302      	bcc.n	8009db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d116      	bne.n	8009de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	f043 0220 	orr.w	r2, r3, #32
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e023      	b.n	8009e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	0c1b      	lsrs	r3, r3, #16
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d10d      	bne.n	8009e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	43da      	mvns	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf0c      	ite	eq
 8009e02:	2301      	moveq	r3, #1
 8009e04:	2300      	movne	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	e00c      	b.n	8009e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	43da      	mvns	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4013      	ands	r3, r2
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	bf0c      	ite	eq
 8009e1e:	2301      	moveq	r3, #1
 8009e20:	2300      	movne	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d0b6      	beq.n	8009d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e44:	e051      	b.n	8009eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e54:	d123      	bne.n	8009e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	f043 0204 	orr.w	r2, r3, #4
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e046      	b.n	8009f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea4:	d021      	beq.n	8009eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea6:	f7fc fdc5 	bl	8006a34 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d302      	bcc.n	8009ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d116      	bne.n	8009eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	f043 0220 	orr.w	r2, r3, #32
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e020      	b.n	8009f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d10c      	bne.n	8009f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	43da      	mvns	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4013      	ands	r3, r2
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bf14      	ite	ne
 8009f06:	2301      	movne	r3, #1
 8009f08:	2300      	moveq	r3, #0
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	e00b      	b.n	8009f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	43da      	mvns	r2, r3
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4013      	ands	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bf14      	ite	ne
 8009f20:	2301      	movne	r3, #1
 8009f22:	2300      	moveq	r3, #0
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d18d      	bne.n	8009e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f40:	e02d      	b.n	8009f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f900 	bl	800a148 <I2C_IsAcknowledgeFailed>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e02d      	b.n	8009fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f58:	d021      	beq.n	8009f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f5a:	f7fc fd6b 	bl	8006a34 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d302      	bcc.n	8009f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d116      	bne.n	8009f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f043 0220 	orr.w	r2, r3, #32
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e007      	b.n	8009fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa8:	2b80      	cmp	r3, #128	; 0x80
 8009faa:	d1ca      	bne.n	8009f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fc2:	e02d      	b.n	800a020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f8bf 	bl	800a148 <I2C_IsAcknowledgeFailed>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e02d      	b.n	800a030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d021      	beq.n	800a020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fdc:	f7fc fd2a 	bl	8006a34 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d302      	bcc.n	8009ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d116      	bne.n	800a020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00c:	f043 0220 	orr.w	r2, r3, #32
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e007      	b.n	800a030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	f003 0304 	and.w	r3, r3, #4
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d1ca      	bne.n	8009fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a044:	4b13      	ldr	r3, [pc, #76]	; (800a094 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	08db      	lsrs	r3, r3, #3
 800a04a:	4a13      	ldr	r2, [pc, #76]	; (800a098 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a04c:	fba2 2303 	umull	r2, r3, r2, r3
 800a050:	0a1a      	lsrs	r2, r3, #8
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d107      	bne.n	800a076 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	f043 0220 	orr.w	r2, r3, #32
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e008      	b.n	800a088 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a084:	d0e9      	beq.n	800a05a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3714      	adds	r7, #20
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	20000224 	.word	0x20000224
 800a098:	14f8b589 	.word	0x14f8b589

0800a09c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0a8:	e042      	b.n	800a130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b10      	cmp	r3, #16
 800a0b6:	d119      	bne.n	800a0ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f06f 0210 	mvn.w	r2, #16
 800a0c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e029      	b.n	800a140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ec:	f7fc fca2 	bl	8006a34 <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d302      	bcc.n	800a102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d116      	bne.n	800a130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11c:	f043 0220 	orr.w	r2, r3, #32
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e007      	b.n	800a140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13a:	2b40      	cmp	r3, #64	; 0x40
 800a13c:	d1b5      	bne.n	800a0aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a15a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a15e:	d11b      	bne.n	800a198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a184:	f043 0204 	orr.w	r2, r3, #4
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e000      	b.n	800a19a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a1b6:	d103      	bne.n	800a1c0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1be:	e007      	b.n	800a1d0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a1c8:	d102      	bne.n	800a1d0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e267      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d075      	beq.n	800a2e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1fa:	4b88      	ldr	r3, [pc, #544]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 030c 	and.w	r3, r3, #12
 800a202:	2b04      	cmp	r3, #4
 800a204:	d00c      	beq.n	800a220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a206:	4b85      	ldr	r3, [pc, #532]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d112      	bne.n	800a238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a212:	4b82      	ldr	r3, [pc, #520]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a21a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a21e:	d10b      	bne.n	800a238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a220:	4b7e      	ldr	r3, [pc, #504]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d05b      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x108>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d157      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e242      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a240:	d106      	bne.n	800a250 <HAL_RCC_OscConfig+0x74>
 800a242:	4b76      	ldr	r3, [pc, #472]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a75      	ldr	r2, [pc, #468]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	e01d      	b.n	800a28c <HAL_RCC_OscConfig+0xb0>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a258:	d10c      	bne.n	800a274 <HAL_RCC_OscConfig+0x98>
 800a25a:	4b70      	ldr	r3, [pc, #448]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a6f      	ldr	r2, [pc, #444]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	4b6d      	ldr	r3, [pc, #436]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a6c      	ldr	r2, [pc, #432]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a26c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e00b      	b.n	800a28c <HAL_RCC_OscConfig+0xb0>
 800a274:	4b69      	ldr	r3, [pc, #420]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a68      	ldr	r2, [pc, #416]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a27a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	4b66      	ldr	r3, [pc, #408]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a65      	ldr	r2, [pc, #404]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a28a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d013      	beq.n	800a2bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a294:	f7fc fbce 	bl	8006a34 <HAL_GetTick>
 800a298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a29c:	f7fc fbca 	bl	8006a34 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b64      	cmp	r3, #100	; 0x64
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e207      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ae:	4b5b      	ldr	r3, [pc, #364]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f0      	beq.n	800a29c <HAL_RCC_OscConfig+0xc0>
 800a2ba:	e014      	b.n	800a2e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2bc:	f7fc fbba 	bl	8006a34 <HAL_GetTick>
 800a2c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2c4:	f7fc fbb6 	bl	8006a34 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b64      	cmp	r3, #100	; 0x64
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e1f3      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2d6:	4b51      	ldr	r3, [pc, #324]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1f0      	bne.n	800a2c4 <HAL_RCC_OscConfig+0xe8>
 800a2e2:	e000      	b.n	800a2e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d063      	beq.n	800a3ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2f2:	4b4a      	ldr	r3, [pc, #296]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f003 030c 	and.w	r3, r3, #12
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2fe:	4b47      	ldr	r3, [pc, #284]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a306:	2b08      	cmp	r3, #8
 800a308:	d11c      	bne.n	800a344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a30a:	4b44      	ldr	r3, [pc, #272]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d116      	bne.n	800a344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a316:	4b41      	ldr	r3, [pc, #260]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <HAL_RCC_OscConfig+0x152>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d001      	beq.n	800a32e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e1c7      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32e:	4b3b      	ldr	r3, [pc, #236]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4937      	ldr	r1, [pc, #220]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a342:	e03a      	b.n	800a3ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d020      	beq.n	800a38e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a34c:	4b34      	ldr	r3, [pc, #208]	; (800a420 <HAL_RCC_OscConfig+0x244>)
 800a34e:	2201      	movs	r2, #1
 800a350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a352:	f7fc fb6f 	bl	8006a34 <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a358:	e008      	b.n	800a36c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a35a:	f7fc fb6b 	bl	8006a34 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e1a8      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a36c:	4b2b      	ldr	r3, [pc, #172]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0f0      	beq.n	800a35a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a378:	4b28      	ldr	r3, [pc, #160]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	4925      	ldr	r1, [pc, #148]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	600b      	str	r3, [r1, #0]
 800a38c:	e015      	b.n	800a3ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <HAL_RCC_OscConfig+0x244>)
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a394:	f7fc fb4e 	bl	8006a34 <HAL_GetTick>
 800a398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a39a:	e008      	b.n	800a3ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a39c:	f7fc fb4a 	bl	8006a34 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d901      	bls.n	800a3ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e187      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0302 	and.w	r3, r3, #2
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1f0      	bne.n	800a39c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d036      	beq.n	800a434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d016      	beq.n	800a3fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3ce:	4b15      	ldr	r3, [pc, #84]	; (800a424 <HAL_RCC_OscConfig+0x248>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d4:	f7fc fb2e 	bl	8006a34 <HAL_GetTick>
 800a3d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3da:	e008      	b.n	800a3ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3dc:	f7fc fb2a 	bl	8006a34 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e167      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3ee:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <HAL_RCC_OscConfig+0x240>)
 800a3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0f0      	beq.n	800a3dc <HAL_RCC_OscConfig+0x200>
 800a3fa:	e01b      	b.n	800a434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <HAL_RCC_OscConfig+0x248>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a402:	f7fc fb17 	bl	8006a34 <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a408:	e00e      	b.n	800a428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a40a:	f7fc fb13 	bl	8006a34 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d907      	bls.n	800a428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e150      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
 800a41c:	40023800 	.word	0x40023800
 800a420:	42470000 	.word	0x42470000
 800a424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a428:	4b88      	ldr	r3, [pc, #544]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1ea      	bne.n	800a40a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8097 	beq.w	800a570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a442:	2300      	movs	r3, #0
 800a444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a446:	4b81      	ldr	r3, [pc, #516]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10f      	bne.n	800a472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a452:	2300      	movs	r3, #0
 800a454:	60bb      	str	r3, [r7, #8]
 800a456:	4b7d      	ldr	r3, [pc, #500]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	4a7c      	ldr	r2, [pc, #496]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a460:	6413      	str	r3, [r2, #64]	; 0x40
 800a462:	4b7a      	ldr	r3, [pc, #488]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a46a:	60bb      	str	r3, [r7, #8]
 800a46c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a472:	4b77      	ldr	r3, [pc, #476]	; (800a650 <HAL_RCC_OscConfig+0x474>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d118      	bne.n	800a4b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a47e:	4b74      	ldr	r3, [pc, #464]	; (800a650 <HAL_RCC_OscConfig+0x474>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a73      	ldr	r2, [pc, #460]	; (800a650 <HAL_RCC_OscConfig+0x474>)
 800a484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a48a:	f7fc fad3 	bl	8006a34 <HAL_GetTick>
 800a48e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a490:	e008      	b.n	800a4a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a492:	f7fc facf 	bl	8006a34 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d901      	bls.n	800a4a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e10c      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4a4:	4b6a      	ldr	r3, [pc, #424]	; (800a650 <HAL_RCC_OscConfig+0x474>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0f0      	beq.n	800a492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d106      	bne.n	800a4c6 <HAL_RCC_OscConfig+0x2ea>
 800a4b8:	4b64      	ldr	r3, [pc, #400]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a63      	ldr	r2, [pc, #396]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	e01c      	b.n	800a500 <HAL_RCC_OscConfig+0x324>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d10c      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x30c>
 800a4ce:	4b5f      	ldr	r3, [pc, #380]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	4a5e      	ldr	r2, [pc, #376]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4d4:	f043 0304 	orr.w	r3, r3, #4
 800a4d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4da:	4b5c      	ldr	r3, [pc, #368]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	4a5b      	ldr	r2, [pc, #364]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e6:	e00b      	b.n	800a500 <HAL_RCC_OscConfig+0x324>
 800a4e8:	4b58      	ldr	r3, [pc, #352]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	4a57      	ldr	r2, [pc, #348]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f4:	4b55      	ldr	r3, [pc, #340]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f8:	4a54      	ldr	r2, [pc, #336]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a4fa:	f023 0304 	bic.w	r3, r3, #4
 800a4fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d015      	beq.n	800a534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a508:	f7fc fa94 	bl	8006a34 <HAL_GetTick>
 800a50c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a50e:	e00a      	b.n	800a526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a510:	f7fc fa90 	bl	8006a34 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51e:	4293      	cmp	r3, r2
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e0cb      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a526:	4b49      	ldr	r3, [pc, #292]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ee      	beq.n	800a510 <HAL_RCC_OscConfig+0x334>
 800a532:	e014      	b.n	800a55e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a534:	f7fc fa7e 	bl	8006a34 <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a53a:	e00a      	b.n	800a552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a53c:	f7fc fa7a 	bl	8006a34 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e0b5      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a552:	4b3e      	ldr	r3, [pc, #248]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1ee      	bne.n	800a53c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d105      	bne.n	800a570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a564:	4b39      	ldr	r3, [pc, #228]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	4a38      	ldr	r2, [pc, #224]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a56a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a56e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80a1 	beq.w	800a6bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a57a:	4b34      	ldr	r3, [pc, #208]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f003 030c 	and.w	r3, r3, #12
 800a582:	2b08      	cmp	r3, #8
 800a584:	d05c      	beq.n	800a640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d141      	bne.n	800a612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a58e:	4b31      	ldr	r3, [pc, #196]	; (800a654 <HAL_RCC_OscConfig+0x478>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a594:	f7fc fa4e 	bl	8006a34 <HAL_GetTick>
 800a598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a59c:	f7fc fa4a 	bl	8006a34 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e087      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5ae:	4b27      	ldr	r3, [pc, #156]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69da      	ldr	r2, [r3, #28]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	019b      	lsls	r3, r3, #6
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	085b      	lsrs	r3, r3, #1
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	041b      	lsls	r3, r3, #16
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	061b      	lsls	r3, r3, #24
 800a5de:	491b      	ldr	r1, [pc, #108]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5e4:	4b1b      	ldr	r3, [pc, #108]	; (800a654 <HAL_RCC_OscConfig+0x478>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ea:	f7fc fa23 	bl	8006a34 <HAL_GetTick>
 800a5ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5f0:	e008      	b.n	800a604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5f2:	f7fc fa1f 	bl	8006a34 <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d901      	bls.n	800a604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e05c      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a604:	4b11      	ldr	r3, [pc, #68]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d0f0      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x416>
 800a610:	e054      	b.n	800a6bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a612:	4b10      	ldr	r3, [pc, #64]	; (800a654 <HAL_RCC_OscConfig+0x478>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a618:	f7fc fa0c 	bl	8006a34 <HAL_GetTick>
 800a61c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a61e:	e008      	b.n	800a632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a620:	f7fc fa08 	bl	8006a34 <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e045      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <HAL_RCC_OscConfig+0x470>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1f0      	bne.n	800a620 <HAL_RCC_OscConfig+0x444>
 800a63e:	e03d      	b.n	800a6bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d107      	bne.n	800a658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e038      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
 800a64c:	40023800 	.word	0x40023800
 800a650:	40007000 	.word	0x40007000
 800a654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a658:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <HAL_RCC_OscConfig+0x4ec>)
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d028      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a670:	429a      	cmp	r2, r3
 800a672:	d121      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a67e:	429a      	cmp	r2, r3
 800a680:	d11a      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a688:	4013      	ands	r3, r2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a68e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a690:	4293      	cmp	r3, r2
 800a692:	d111      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69e:	085b      	lsrs	r3, r3, #1
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d107      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d001      	beq.n	800a6bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e000      	b.n	800a6be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40023800 	.word	0x40023800

0800a6cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e0cc      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6e0:	4b68      	ldr	r3, [pc, #416]	; (800a884 <HAL_RCC_ClockConfig+0x1b8>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d90c      	bls.n	800a708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ee:	4b65      	ldr	r3, [pc, #404]	; (800a884 <HAL_RCC_ClockConfig+0x1b8>)
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	b2d2      	uxtb	r2, r2
 800a6f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f6:	4b63      	ldr	r3, [pc, #396]	; (800a884 <HAL_RCC_ClockConfig+0x1b8>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	d001      	beq.n	800a708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e0b8      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0302 	and.w	r3, r3, #2
 800a710:	2b00      	cmp	r3, #0
 800a712:	d020      	beq.n	800a756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d005      	beq.n	800a72c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a720:	4b59      	ldr	r3, [pc, #356]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	4a58      	ldr	r2, [pc, #352]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a72a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0308 	and.w	r3, r3, #8
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a738:	4b53      	ldr	r3, [pc, #332]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	4a52      	ldr	r2, [pc, #328]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a73e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a744:	4b50      	ldr	r3, [pc, #320]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	494d      	ldr	r1, [pc, #308]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a752:	4313      	orrs	r3, r2
 800a754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d044      	beq.n	800a7ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d107      	bne.n	800a77a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a76a:	4b47      	ldr	r3, [pc, #284]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d119      	bne.n	800a7aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e07f      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d003      	beq.n	800a78a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a786:	2b03      	cmp	r3, #3
 800a788:	d107      	bne.n	800a79a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a78a:	4b3f      	ldr	r3, [pc, #252]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e06f      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a79a:	4b3b      	ldr	r3, [pc, #236]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e067      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7aa:	4b37      	ldr	r3, [pc, #220]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f023 0203 	bic.w	r2, r3, #3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	4934      	ldr	r1, [pc, #208]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a7bc:	f7fc f93a 	bl	8006a34 <HAL_GetTick>
 800a7c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7c2:	e00a      	b.n	800a7da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7c4:	f7fc f936 	bl	8006a34 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d901      	bls.n	800a7da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e04f      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7da:	4b2b      	ldr	r3, [pc, #172]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 020c 	and.w	r2, r3, #12
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d1eb      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7ec:	4b25      	ldr	r3, [pc, #148]	; (800a884 <HAL_RCC_ClockConfig+0x1b8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d20c      	bcs.n	800a814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7fa:	4b22      	ldr	r3, [pc, #136]	; (800a884 <HAL_RCC_ClockConfig+0x1b8>)
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	b2d2      	uxtb	r2, r2
 800a800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a802:	4b20      	ldr	r3, [pc, #128]	; (800a884 <HAL_RCC_ClockConfig+0x1b8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d001      	beq.n	800a814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e032      	b.n	800a87a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d008      	beq.n	800a832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a820:	4b19      	ldr	r3, [pc, #100]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	4916      	ldr	r1, [pc, #88]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0308 	and.w	r3, r3, #8
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	490e      	ldr	r1, [pc, #56]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a852:	f000 f821 	bl	800a898 <HAL_RCC_GetSysClockFreq>
 800a856:	4602      	mov	r2, r0
 800a858:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <HAL_RCC_ClockConfig+0x1bc>)
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	091b      	lsrs	r3, r3, #4
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	490a      	ldr	r1, [pc, #40]	; (800a88c <HAL_RCC_ClockConfig+0x1c0>)
 800a864:	5ccb      	ldrb	r3, [r1, r3]
 800a866:	fa22 f303 	lsr.w	r3, r2, r3
 800a86a:	4a09      	ldr	r2, [pc, #36]	; (800a890 <HAL_RCC_ClockConfig+0x1c4>)
 800a86c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <HAL_RCC_ClockConfig+0x1c8>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f7fc f89a 	bl	80069ac <HAL_InitTick>

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	40023c00 	.word	0x40023c00
 800a888:	40023800 	.word	0x40023800
 800a88c:	08039758 	.word	0x08039758
 800a890:	20000224 	.word	0x20000224
 800a894:	20000248 	.word	0x20000248

0800a898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a89c:	b094      	sub	sp, #80	; 0x50
 800a89e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8b0:	4b79      	ldr	r3, [pc, #484]	; (800aa98 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f003 030c 	and.w	r3, r3, #12
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d00d      	beq.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x40>
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	f200 80e1 	bhi.w	800aa84 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_RCC_GetSysClockFreq+0x34>
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d003      	beq.n	800a8d2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a8ca:	e0db      	b.n	800aa84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8cc:	4b73      	ldr	r3, [pc, #460]	; (800aa9c <HAL_RCC_GetSysClockFreq+0x204>)
 800a8ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a8d0:	e0db      	b.n	800aa8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8d2:	4b73      	ldr	r3, [pc, #460]	; (800aaa0 <HAL_RCC_GetSysClockFreq+0x208>)
 800a8d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a8d6:	e0d8      	b.n	800aa8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8d8:	4b6f      	ldr	r3, [pc, #444]	; (800aa98 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8e2:	4b6d      	ldr	r3, [pc, #436]	; (800aa98 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d063      	beq.n	800a9b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8ee:	4b6a      	ldr	r3, [pc, #424]	; (800aa98 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	099b      	lsrs	r3, r3, #6
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a900:	633b      	str	r3, [r7, #48]	; 0x30
 800a902:	2300      	movs	r3, #0
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
 800a906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a90a:	4622      	mov	r2, r4
 800a90c:	462b      	mov	r3, r5
 800a90e:	f04f 0000 	mov.w	r0, #0
 800a912:	f04f 0100 	mov.w	r1, #0
 800a916:	0159      	lsls	r1, r3, #5
 800a918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a91c:	0150      	lsls	r0, r2, #5
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4621      	mov	r1, r4
 800a924:	1a51      	subs	r1, r2, r1
 800a926:	6139      	str	r1, [r7, #16]
 800a928:	4629      	mov	r1, r5
 800a92a:	eb63 0301 	sbc.w	r3, r3, r1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	f04f 0300 	mov.w	r3, #0
 800a938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a93c:	4659      	mov	r1, fp
 800a93e:	018b      	lsls	r3, r1, #6
 800a940:	4651      	mov	r1, sl
 800a942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a946:	4651      	mov	r1, sl
 800a948:	018a      	lsls	r2, r1, #6
 800a94a:	4651      	mov	r1, sl
 800a94c:	ebb2 0801 	subs.w	r8, r2, r1
 800a950:	4659      	mov	r1, fp
 800a952:	eb63 0901 	sbc.w	r9, r3, r1
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	f04f 0300 	mov.w	r3, #0
 800a95e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a96a:	4690      	mov	r8, r2
 800a96c:	4699      	mov	r9, r3
 800a96e:	4623      	mov	r3, r4
 800a970:	eb18 0303 	adds.w	r3, r8, r3
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	462b      	mov	r3, r5
 800a978:	eb49 0303 	adc.w	r3, r9, r3
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	f04f 0300 	mov.w	r3, #0
 800a986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a98a:	4629      	mov	r1, r5
 800a98c:	024b      	lsls	r3, r1, #9
 800a98e:	4621      	mov	r1, r4
 800a990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a994:	4621      	mov	r1, r4
 800a996:	024a      	lsls	r2, r1, #9
 800a998:	4610      	mov	r0, r2
 800a99a:	4619      	mov	r1, r3
 800a99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a99e:	2200      	movs	r2, #0
 800a9a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a9a8:	f7f6 f976 	bl	8000c98 <__aeabi_uldivmod>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9b4:	e058      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9b6:	4b38      	ldr	r3, [pc, #224]	; (800aa98 <HAL_RCC_GetSysClockFreq+0x200>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	099b      	lsrs	r3, r3, #6
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a9c6:	623b      	str	r3, [r7, #32]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a9cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	464b      	mov	r3, r9
 800a9d4:	f04f 0000 	mov.w	r0, #0
 800a9d8:	f04f 0100 	mov.w	r1, #0
 800a9dc:	0159      	lsls	r1, r3, #5
 800a9de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a9e2:	0150      	lsls	r0, r2, #5
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4641      	mov	r1, r8
 800a9ea:	ebb2 0a01 	subs.w	sl, r2, r1
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	eb63 0b01 	sbc.w	fp, r3, r1
 800a9f4:	f04f 0200 	mov.w	r2, #0
 800a9f8:	f04f 0300 	mov.w	r3, #0
 800a9fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aa00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aa04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aa08:	ebb2 040a 	subs.w	r4, r2, sl
 800aa0c:	eb63 050b 	sbc.w	r5, r3, fp
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	f04f 0300 	mov.w	r3, #0
 800aa18:	00eb      	lsls	r3, r5, #3
 800aa1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa1e:	00e2      	lsls	r2, r4, #3
 800aa20:	4614      	mov	r4, r2
 800aa22:	461d      	mov	r5, r3
 800aa24:	4643      	mov	r3, r8
 800aa26:	18e3      	adds	r3, r4, r3
 800aa28:	603b      	str	r3, [r7, #0]
 800aa2a:	464b      	mov	r3, r9
 800aa2c:	eb45 0303 	adc.w	r3, r5, r3
 800aa30:	607b      	str	r3, [r7, #4]
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aa3e:	4629      	mov	r1, r5
 800aa40:	028b      	lsls	r3, r1, #10
 800aa42:	4621      	mov	r1, r4
 800aa44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa48:	4621      	mov	r1, r4
 800aa4a:	028a      	lsls	r2, r1, #10
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa52:	2200      	movs	r2, #0
 800aa54:	61bb      	str	r3, [r7, #24]
 800aa56:	61fa      	str	r2, [r7, #28]
 800aa58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa5c:	f7f6 f91c 	bl	8000c98 <__aeabi_uldivmod>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4613      	mov	r3, r2
 800aa66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aa68:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <HAL_RCC_GetSysClockFreq+0x200>)
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	0c1b      	lsrs	r3, r3, #16
 800aa6e:	f003 0303 	and.w	r3, r3, #3
 800aa72:	3301      	adds	r3, #1
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800aa78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aa82:	e002      	b.n	800aa8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa84:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <HAL_RCC_GetSysClockFreq+0x204>)
 800aa86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aa88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3750      	adds	r7, #80	; 0x50
 800aa90:	46bd      	mov	sp, r7
 800aa92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa96:	bf00      	nop
 800aa98:	40023800 	.word	0x40023800
 800aa9c:	00f42400 	.word	0x00f42400
 800aaa0:	007a1200 	.word	0x007a1200

0800aaa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aaa8:	4b03      	ldr	r3, [pc, #12]	; (800aab8 <HAL_RCC_GetHCLKFreq+0x14>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20000224 	.word	0x20000224

0800aabc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aac0:	f7ff fff0 	bl	800aaa4 <HAL_RCC_GetHCLKFreq>
 800aac4:	4602      	mov	r2, r0
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <HAL_RCC_GetPCLK1Freq+0x20>)
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	0a9b      	lsrs	r3, r3, #10
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	4903      	ldr	r1, [pc, #12]	; (800aae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aad2:	5ccb      	ldrb	r3, [r1, r3]
 800aad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aad8:	4618      	mov	r0, r3
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	40023800 	.word	0x40023800
 800aae0:	08039768 	.word	0x08039768

0800aae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aae8:	f7ff ffdc 	bl	800aaa4 <HAL_RCC_GetHCLKFreq>
 800aaec:	4602      	mov	r2, r0
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	0b5b      	lsrs	r3, r3, #13
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	4903      	ldr	r1, [pc, #12]	; (800ab08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aafa:	5ccb      	ldrb	r3, [r1, r3]
 800aafc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	40023800 	.word	0x40023800
 800ab08:	08039768 	.word	0x08039768

0800ab0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e07b      	b.n	800ac16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d108      	bne.n	800ab38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab2e:	d009      	beq.n	800ab44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	61da      	str	r2, [r3, #28]
 800ab36:	e005      	b.n	800ab44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fa fb90 	bl	8005284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab96:	431a      	orrs	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	431a      	orrs	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abb4:	431a      	orrs	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abbe:	431a      	orrs	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc8:	ea42 0103 	orr.w	r1, r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	0c1b      	lsrs	r3, r3, #16
 800abe2:	f003 0104 	and.w	r1, r3, #4
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abea:	f003 0210 	and.w	r2, r3, #16
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	69da      	ldr	r2, [r3, #28]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b08c      	sub	sp, #48	; 0x30
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d101      	bne.n	800ac44 <HAL_SPI_TransmitReceive+0x26>
 800ac40:	2302      	movs	r3, #2
 800ac42:	e18a      	b.n	800af5a <HAL_SPI_TransmitReceive+0x33c>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac4c:	f7fb fef2 	bl	8006a34 <HAL_GetTick>
 800ac50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ac62:	887b      	ldrh	r3, [r7, #2]
 800ac64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d00f      	beq.n	800ac8e <HAL_SPI_TransmitReceive+0x70>
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac74:	d107      	bne.n	800ac86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d103      	bne.n	800ac86 <HAL_SPI_TransmitReceive+0x68>
 800ac7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d003      	beq.n	800ac8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ac86:	2302      	movs	r3, #2
 800ac88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac8c:	e15b      	b.n	800af46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <HAL_SPI_TransmitReceive+0x82>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <HAL_SPI_TransmitReceive+0x82>
 800ac9a:	887b      	ldrh	r3, [r7, #2]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aca6:	e14e      	b.n	800af46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d003      	beq.n	800acbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2205      	movs	r2, #5
 800acb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	887a      	ldrh	r2, [r7, #2]
 800accc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	887a      	ldrh	r2, [r7, #2]
 800acd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	887a      	ldrh	r2, [r7, #2]
 800acde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	887a      	ldrh	r2, [r7, #2]
 800ace4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfc:	2b40      	cmp	r3, #64	; 0x40
 800acfe:	d007      	beq.n	800ad10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad18:	d178      	bne.n	800ae0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <HAL_SPI_TransmitReceive+0x10a>
 800ad22:	8b7b      	ldrh	r3, [r7, #26]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d166      	bne.n	800adf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2c:	881a      	ldrh	r2, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad38:	1c9a      	adds	r2, r3, #2
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad4c:	e053      	b.n	800adf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d11b      	bne.n	800ad94 <HAL_SPI_TransmitReceive+0x176>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d016      	beq.n	800ad94 <HAL_SPI_TransmitReceive+0x176>
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d113      	bne.n	800ad94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad70:	881a      	ldrh	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7c:	1c9a      	adds	r2, r3, #2
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d119      	bne.n	800add6 <HAL_SPI_TransmitReceive+0x1b8>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d014      	beq.n	800add6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb6:	b292      	uxth	r2, r2
 800adb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbe:	1c9a      	adds	r2, r3, #2
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3b01      	subs	r3, #1
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800add2:	2301      	movs	r3, #1
 800add4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800add6:	f7fb fe2d 	bl	8006a34 <HAL_GetTick>
 800adda:	4602      	mov	r2, r0
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d807      	bhi.n	800adf6 <HAL_SPI_TransmitReceive+0x1d8>
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adec:	d003      	beq.n	800adf6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800adf4:	e0a7      	b.n	800af46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1a6      	bne.n	800ad4e <HAL_SPI_TransmitReceive+0x130>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1a1      	bne.n	800ad4e <HAL_SPI_TransmitReceive+0x130>
 800ae0a:	e07c      	b.n	800af06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <HAL_SPI_TransmitReceive+0x1fc>
 800ae14:	8b7b      	ldrh	r3, [r7, #26]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d16b      	bne.n	800aef2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	330c      	adds	r3, #12
 800ae24:	7812      	ldrb	r2, [r2, #0]
 800ae26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae40:	e057      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f003 0302 	and.w	r3, r3, #2
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d11c      	bne.n	800ae8a <HAL_SPI_TransmitReceive+0x26c>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d017      	beq.n	800ae8a <HAL_SPI_TransmitReceive+0x26c>
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d114      	bne.n	800ae8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	330c      	adds	r3, #12
 800ae6a:	7812      	ldrb	r2, [r2, #0]
 800ae6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d119      	bne.n	800aecc <HAL_SPI_TransmitReceive+0x2ae>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d014      	beq.n	800aecc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeac:	b2d2      	uxtb	r2, r2
 800aeae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aec8:	2301      	movs	r3, #1
 800aeca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aecc:	f7fb fdb2 	bl	8006a34 <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d803      	bhi.n	800aee4 <HAL_SPI_TransmitReceive+0x2c6>
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee2:	d102      	bne.n	800aeea <HAL_SPI_TransmitReceive+0x2cc>
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d103      	bne.n	800aef2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aef0:	e029      	b.n	800af46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1a2      	bne.n	800ae42 <HAL_SPI_TransmitReceive+0x224>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af00:	b29b      	uxth	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d19d      	bne.n	800ae42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 f8b2 	bl	800b074 <SPI_EndRxTxTransaction>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d006      	beq.n	800af24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2220      	movs	r2, #32
 800af20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800af22:	e010      	b.n	800af46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10b      	bne.n	800af44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af2c:	2300      	movs	r3, #0
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	e000      	b.n	800af46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800af44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3730      	adds	r7, #48	; 0x30
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
	...

0800af64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	4613      	mov	r3, r2
 800af72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af74:	f7fb fd5e 	bl	8006a34 <HAL_GetTick>
 800af78:	4602      	mov	r2, r0
 800af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7c:	1a9b      	subs	r3, r3, r2
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	4413      	add	r3, r2
 800af82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af84:	f7fb fd56 	bl	8006a34 <HAL_GetTick>
 800af88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af8a:	4b39      	ldr	r3, [pc, #228]	; (800b070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	015b      	lsls	r3, r3, #5
 800af90:	0d1b      	lsrs	r3, r3, #20
 800af92:	69fa      	ldr	r2, [r7, #28]
 800af94:	fb02 f303 	mul.w	r3, r2, r3
 800af98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af9a:	e054      	b.n	800b046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d050      	beq.n	800b046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afa4:	f7fb fd46 	bl	8006a34 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	69fa      	ldr	r2, [r7, #28]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d902      	bls.n	800afba <SPI_WaitFlagStateUntilTimeout+0x56>
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d13d      	bne.n	800b036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afd2:	d111      	bne.n	800aff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afdc:	d004      	beq.n	800afe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe6:	d107      	bne.n	800aff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b000:	d10f      	bne.n	800b022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e017      	b.n	800b066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	3b01      	subs	r3, #1
 800b044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4013      	ands	r3, r2
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	429a      	cmp	r2, r3
 800b054:	bf0c      	ite	eq
 800b056:	2301      	moveq	r3, #1
 800b058:	2300      	movne	r3, #0
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	461a      	mov	r2, r3
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	429a      	cmp	r2, r3
 800b062:	d19b      	bne.n	800af9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20000224 	.word	0x20000224

0800b074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af02      	add	r7, sp, #8
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b080:	4b1b      	ldr	r3, [pc, #108]	; (800b0f0 <SPI_EndRxTxTransaction+0x7c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a1b      	ldr	r2, [pc, #108]	; (800b0f4 <SPI_EndRxTxTransaction+0x80>)
 800b086:	fba2 2303 	umull	r2, r3, r2, r3
 800b08a:	0d5b      	lsrs	r3, r3, #21
 800b08c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b090:	fb02 f303 	mul.w	r3, r2, r3
 800b094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b09e:	d112      	bne.n	800b0c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	2180      	movs	r1, #128	; 0x80
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff ff5a 	bl	800af64 <SPI_WaitFlagStateUntilTimeout>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d016      	beq.n	800b0e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ba:	f043 0220 	orr.w	r2, r3, #32
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e00f      	b.n	800b0e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0dc:	2b80      	cmp	r3, #128	; 0x80
 800b0de:	d0f2      	beq.n	800b0c6 <SPI_EndRxTxTransaction+0x52>
 800b0e0:	e000      	b.n	800b0e4 <SPI_EndRxTxTransaction+0x70>
        break;
 800b0e2:	bf00      	nop
  }

  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3718      	adds	r7, #24
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000224 	.word	0x20000224
 800b0f4:	165e9f81 	.word	0x165e9f81

0800b0f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e041      	b.n	800b18e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7fa f940 	bl	80053a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2202      	movs	r2, #2
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3304      	adds	r3, #4
 800b134:	4619      	mov	r1, r3
 800b136:	4610      	mov	r0, r2
 800b138:	f000 fb24 	bl	800b784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d001      	beq.n	800b1b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e044      	b.n	800b23a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f042 0201 	orr.w	r2, r2, #1
 800b1c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <HAL_TIM_Base_Start_IT+0xb0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d018      	beq.n	800b204 <HAL_TIM_Base_Start_IT+0x6c>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1da:	d013      	beq.n	800b204 <HAL_TIM_Base_Start_IT+0x6c>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a1a      	ldr	r2, [pc, #104]	; (800b24c <HAL_TIM_Base_Start_IT+0xb4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d00e      	beq.n	800b204 <HAL_TIM_Base_Start_IT+0x6c>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a19      	ldr	r2, [pc, #100]	; (800b250 <HAL_TIM_Base_Start_IT+0xb8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d009      	beq.n	800b204 <HAL_TIM_Base_Start_IT+0x6c>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a17      	ldr	r2, [pc, #92]	; (800b254 <HAL_TIM_Base_Start_IT+0xbc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d004      	beq.n	800b204 <HAL_TIM_Base_Start_IT+0x6c>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a16      	ldr	r2, [pc, #88]	; (800b258 <HAL_TIM_Base_Start_IT+0xc0>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d111      	bne.n	800b228 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2b06      	cmp	r3, #6
 800b214:	d010      	beq.n	800b238 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0201 	orr.w	r2, r2, #1
 800b224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b226:	e007      	b.n	800b238 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0201 	orr.w	r2, r2, #1
 800b236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	40010000 	.word	0x40010000
 800b24c:	40000400 	.word	0x40000400
 800b250:	40000800 	.word	0x40000800
 800b254:	40000c00 	.word	0x40000c00
 800b258:	40014000 	.word	0x40014000

0800b25c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68da      	ldr	r2, [r3, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0201 	bic.w	r2, r2, #1
 800b272:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6a1a      	ldr	r2, [r3, #32]
 800b27a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b27e:	4013      	ands	r3, r2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10f      	bne.n	800b2a4 <HAL_TIM_Base_Stop_IT+0x48>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6a1a      	ldr	r2, [r3, #32]
 800b28a:	f240 4344 	movw	r3, #1092	; 0x444
 800b28e:	4013      	ands	r3, r2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d107      	bne.n	800b2a4 <HAL_TIM_Base_Stop_IT+0x48>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 0201 	bic.w	r2, r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b086      	sub	sp, #24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e097      	b.n	800b3fe <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7fa f816 	bl	8005314 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2fe:	f023 0307 	bic.w	r3, r3, #7
 800b302:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f000 fa38 	bl	800b784 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	4313      	orrs	r3, r2
 800b334:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	021b      	lsls	r3, r3, #8
 800b34c:	4313      	orrs	r3, r2
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b35a:	f023 030c 	bic.w	r3, r3, #12
 800b35e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	68da      	ldr	r2, [r3, #12]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	69db      	ldr	r3, [r3, #28]
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	4313      	orrs	r3, r2
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	011a      	lsls	r2, r3, #4
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	031b      	lsls	r3, r3, #12
 800b38a:	4313      	orrs	r3, r2
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	4313      	orrs	r3, r2
 800b390:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b398:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b3a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	011b      	lsls	r3, r3, #4
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b416:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b41e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b426:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b42e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d110      	bne.n	800b458 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d102      	bne.n	800b442 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b43c:	7b7b      	ldrb	r3, [r7, #13]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d001      	beq.n	800b446 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e069      	b.n	800b51a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2202      	movs	r2, #2
 800b44a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b456:	e031      	b.n	800b4bc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	d110      	bne.n	800b480 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d102      	bne.n	800b46a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b464:	7b3b      	ldrb	r3, [r7, #12]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d001      	beq.n	800b46e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e055      	b.n	800b51a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2202      	movs	r2, #2
 800b472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2202      	movs	r2, #2
 800b47a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b47e:	e01d      	b.n	800b4bc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d108      	bne.n	800b498 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d105      	bne.n	800b498 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b48c:	7b7b      	ldrb	r3, [r7, #13]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d102      	bne.n	800b498 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b492:	7b3b      	ldrb	r3, [r7, #12]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d001      	beq.n	800b49c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e03e      	b.n	800b51a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2202      	movs	r2, #2
 800b4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <HAL_TIM_Encoder_Start+0xc4>
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b04      	cmp	r3, #4
 800b4c6:	d008      	beq.n	800b4da <HAL_TIM_Encoder_Start+0xd4>
 800b4c8:	e00f      	b.n	800b4ea <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 f9d6 	bl	800b884 <TIM_CCxChannelCmd>
      break;
 800b4d8:	e016      	b.n	800b508 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	2104      	movs	r1, #4
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 f9ce 	bl	800b884 <TIM_CCxChannelCmd>
      break;
 800b4e8:	e00e      	b.n	800b508 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 f9c6 	bl	800b884 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	2104      	movs	r1, #4
 800b500:	4618      	mov	r0, r3
 800b502:	f000 f9bf 	bl	800b884 <TIM_CCxChannelCmd>
      break;
 800b506:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f042 0201 	orr.w	r2, r2, #1
 800b516:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b02      	cmp	r3, #2
 800b536:	d122      	bne.n	800b57e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b02      	cmp	r3, #2
 800b544:	d11b      	bne.n	800b57e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f06f 0202 	mvn.w	r2, #2
 800b54e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	f003 0303 	and.w	r3, r3, #3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f8ee 	bl	800b746 <HAL_TIM_IC_CaptureCallback>
 800b56a:	e005      	b.n	800b578 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f8e0 	bl	800b732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f8f1 	bl	800b75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d122      	bne.n	800b5d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	f003 0304 	and.w	r3, r3, #4
 800b596:	2b04      	cmp	r3, #4
 800b598:	d11b      	bne.n	800b5d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f06f 0204 	mvn.w	r2, #4
 800b5a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f8c4 	bl	800b746 <HAL_TIM_IC_CaptureCallback>
 800b5be:	e005      	b.n	800b5cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f8b6 	bl	800b732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f8c7 	bl	800b75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d122      	bne.n	800b626 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f003 0308 	and.w	r3, r3, #8
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d11b      	bne.n	800b626 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f06f 0208 	mvn.w	r2, #8
 800b5f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	f003 0303 	and.w	r3, r3, #3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f89a 	bl	800b746 <HAL_TIM_IC_CaptureCallback>
 800b612:	e005      	b.n	800b620 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f88c 	bl	800b732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f89d 	bl	800b75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b10      	cmp	r3, #16
 800b632:	d122      	bne.n	800b67a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f003 0310 	and.w	r3, r3, #16
 800b63e:	2b10      	cmp	r3, #16
 800b640:	d11b      	bne.n	800b67a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f06f 0210 	mvn.w	r2, #16
 800b64a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2208      	movs	r2, #8
 800b650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f870 	bl	800b746 <HAL_TIM_IC_CaptureCallback>
 800b666:	e005      	b.n	800b674 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f862 	bl	800b732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f873 	bl	800b75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b01      	cmp	r3, #1
 800b686:	d10e      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b01      	cmp	r3, #1
 800b694:	d107      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f06f 0201 	mvn.w	r2, #1
 800b69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7f9 fd3b 	bl	800511c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b0:	2b80      	cmp	r3, #128	; 0x80
 800b6b2:	d10e      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6be:	2b80      	cmp	r3, #128	; 0x80
 800b6c0:	d107      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f977 	bl	800b9c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6dc:	2b40      	cmp	r3, #64	; 0x40
 800b6de:	d10e      	bne.n	800b6fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ea:	2b40      	cmp	r3, #64	; 0x40
 800b6ec:	d107      	bne.n	800b6fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f838 	bl	800b76e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	f003 0320 	and.w	r3, r3, #32
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d10e      	bne.n	800b72a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f003 0320 	and.w	r3, r3, #32
 800b716:	2b20      	cmp	r3, #32
 800b718:	d107      	bne.n	800b72a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f06f 0220 	mvn.w	r2, #32
 800b722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f941 	bl	800b9ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b746:	b480      	push	{r7}
 800b748:	b083      	sub	sp, #12
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b74e:	bf00      	nop
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b762:	bf00      	nop
 800b764:	370c      	adds	r7, #12
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b76e:	b480      	push	{r7}
 800b770:	b083      	sub	sp, #12
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
	...

0800b784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a34      	ldr	r2, [pc, #208]	; (800b868 <TIM_Base_SetConfig+0xe4>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d00f      	beq.n	800b7bc <TIM_Base_SetConfig+0x38>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a2:	d00b      	beq.n	800b7bc <TIM_Base_SetConfig+0x38>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a31      	ldr	r2, [pc, #196]	; (800b86c <TIM_Base_SetConfig+0xe8>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d007      	beq.n	800b7bc <TIM_Base_SetConfig+0x38>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a30      	ldr	r2, [pc, #192]	; (800b870 <TIM_Base_SetConfig+0xec>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d003      	beq.n	800b7bc <TIM_Base_SetConfig+0x38>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a2f      	ldr	r2, [pc, #188]	; (800b874 <TIM_Base_SetConfig+0xf0>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d108      	bne.n	800b7ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a25      	ldr	r2, [pc, #148]	; (800b868 <TIM_Base_SetConfig+0xe4>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d01b      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7dc:	d017      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a22      	ldr	r2, [pc, #136]	; (800b86c <TIM_Base_SetConfig+0xe8>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d013      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a21      	ldr	r2, [pc, #132]	; (800b870 <TIM_Base_SetConfig+0xec>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d00f      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a20      	ldr	r2, [pc, #128]	; (800b874 <TIM_Base_SetConfig+0xf0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d00b      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a1f      	ldr	r2, [pc, #124]	; (800b878 <TIM_Base_SetConfig+0xf4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d007      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a1e      	ldr	r2, [pc, #120]	; (800b87c <TIM_Base_SetConfig+0xf8>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d003      	beq.n	800b80e <TIM_Base_SetConfig+0x8a>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a1d      	ldr	r2, [pc, #116]	; (800b880 <TIM_Base_SetConfig+0xfc>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d108      	bne.n	800b820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a08      	ldr	r2, [pc, #32]	; (800b868 <TIM_Base_SetConfig+0xe4>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d103      	bne.n	800b854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	691a      	ldr	r2, [r3, #16]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	615a      	str	r2, [r3, #20]
}
 800b85a:	bf00      	nop
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	40010000 	.word	0x40010000
 800b86c:	40000400 	.word	0x40000400
 800b870:	40000800 	.word	0x40000800
 800b874:	40000c00 	.word	0x40000c00
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800

0800b884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f003 031f 	and.w	r3, r3, #31
 800b896:	2201      	movs	r2, #1
 800b898:	fa02 f303 	lsl.w	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a1a      	ldr	r2, [r3, #32]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	43db      	mvns	r3, r3
 800b8a6:	401a      	ands	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a1a      	ldr	r2, [r3, #32]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f003 031f 	and.w	r3, r3, #31
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	621a      	str	r2, [r3, #32]
}
 800b8c2:	bf00      	nop
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d101      	bne.n	800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e050      	b.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b90e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a1c      	ldr	r2, [pc, #112]	; (800b998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d018      	beq.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b934:	d013      	beq.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a18      	ldr	r2, [pc, #96]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d00e      	beq.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a16      	ldr	r2, [pc, #88]	; (800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d009      	beq.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d004      	beq.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a13      	ldr	r2, [pc, #76]	; (800b9a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d10c      	bne.n	800b978 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	40010000 	.word	0x40010000
 800b99c:	40000400 	.word	0x40000400
 800b9a0:	40000800 	.word	0x40000800
 800b9a4:	40000c00 	.word	0x40000c00
 800b9a8:	40014000 	.word	0x40014000

0800b9ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e03f      	b.n	800ba66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7f9 fcfa 	bl	80053f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2224      	movs	r2, #36	; 0x24
 800ba04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 f80b 	bl	800ca34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	691a      	ldr	r2, [r3, #16]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	695a      	ldr	r2, [r3, #20]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b08a      	sub	sp, #40	; 0x28
 800ba72:	af02      	add	r7, sp, #8
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	603b      	str	r3, [r7, #0]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	d17c      	bne.n	800bb88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <HAL_UART_Transmit+0x2c>
 800ba94:	88fb      	ldrh	r3, [r7, #6]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e075      	b.n	800bb8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d101      	bne.n	800baac <HAL_UART_Transmit+0x3e>
 800baa8:	2302      	movs	r3, #2
 800baaa:	e06e      	b.n	800bb8a <HAL_UART_Transmit+0x11c>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2221      	movs	r2, #33	; 0x21
 800babe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bac2:	f7fa ffb7 	bl	8006a34 <HAL_GetTick>
 800bac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	88fa      	ldrh	r2, [r7, #6]
 800bacc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	88fa      	ldrh	r2, [r7, #6]
 800bad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800badc:	d108      	bne.n	800baf0 <HAL_UART_Transmit+0x82>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d104      	bne.n	800baf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bae6:	2300      	movs	r3, #0
 800bae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	61bb      	str	r3, [r7, #24]
 800baee:	e003      	b.n	800baf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bb00:	e02a      	b.n	800bb58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2180      	movs	r1, #128	; 0x80
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 fcc3 	bl	800c498 <UART_WaitOnFlagUntilTimeout>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e036      	b.n	800bb8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10b      	bne.n	800bb3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	3302      	adds	r3, #2
 800bb36:	61bb      	str	r3, [r7, #24]
 800bb38:	e007      	b.n	800bb4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	781a      	ldrb	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	3301      	adds	r3, #1
 800bb48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1cf      	bne.n	800bb02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2140      	movs	r1, #64	; 0x40
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 fc93 	bl	800c498 <UART_WaitOnFlagUntilTimeout>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e006      	b.n	800bb8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2220      	movs	r2, #32
 800bb80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	e000      	b.n	800bb8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bb88:	2302      	movs	r3, #2
  }
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3720      	adds	r7, #32
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b08a      	sub	sp, #40	; 0x28
 800bb96:	af02      	add	r7, sp, #8
 800bb98:	60f8      	str	r0, [r7, #12]
 800bb9a:	60b9      	str	r1, [r7, #8]
 800bb9c:	603b      	str	r3, [r7, #0]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b20      	cmp	r3, #32
 800bbb0:	f040 808c 	bne.w	800bccc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <HAL_UART_Receive+0x2e>
 800bbba:	88fb      	ldrh	r3, [r7, #6]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e084      	b.n	800bcce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d101      	bne.n	800bbd2 <HAL_UART_Receive+0x40>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	e07d      	b.n	800bcce <HAL_UART_Receive+0x13c>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2222      	movs	r2, #34	; 0x22
 800bbe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbee:	f7fa ff21 	bl	8006a34 <HAL_GetTick>
 800bbf2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	88fa      	ldrh	r2, [r7, #6]
 800bbf8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	88fa      	ldrh	r2, [r7, #6]
 800bbfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc08:	d108      	bne.n	800bc1c <HAL_UART_Receive+0x8a>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d104      	bne.n	800bc1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	61bb      	str	r3, [r7, #24]
 800bc1a:	e003      	b.n	800bc24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bc2c:	e043      	b.n	800bcb6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2200      	movs	r2, #0
 800bc36:	2120      	movs	r1, #32
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 fc2d 	bl	800c498 <UART_WaitOnFlagUntilTimeout>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e042      	b.n	800bcce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10c      	bne.n	800bc68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	3302      	adds	r3, #2
 800bc64:	61bb      	str	r3, [r7, #24]
 800bc66:	e01f      	b.n	800bca8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc70:	d007      	beq.n	800bc82 <HAL_UART_Receive+0xf0>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <HAL_UART_Receive+0xfe>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d106      	bne.n	800bc90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e008      	b.n	800bca2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	3301      	adds	r3, #1
 800bca6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1b6      	bne.n	800bc2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e000      	b.n	800bcce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800bccc:	2302      	movs	r3, #2
  }
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3720      	adds	r7, #32
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	60b9      	str	r1, [r7, #8]
 800bce0:	4613      	mov	r3, r2
 800bce2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d11d      	bne.n	800bd2c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <HAL_UART_Receive_DMA+0x26>
 800bcf6:	88fb      	ldrh	r3, [r7, #6]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e016      	b.n	800bd2e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d101      	bne.n	800bd0e <HAL_UART_Receive_DMA+0x38>
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	e00f      	b.n	800bd2e <HAL_UART_Receive_DMA+0x58>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	68b9      	ldr	r1, [r7, #8]
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 fc26 	bl	800c574 <UART_Start_Receive_DMA>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	e000      	b.n	800bd2e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bd2c:	2302      	movs	r3, #2
  }
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b0ba      	sub	sp, #232	; 0xe8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bd64:	2300      	movs	r3, #0
 800bd66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd6e:	f003 030f 	and.w	r3, r3, #15
 800bd72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bd76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10f      	bne.n	800bd9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d009      	beq.n	800bd9e <HAL_UART_IRQHandler+0x66>
 800bd8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd8e:	f003 0320 	and.w	r3, r3, #32
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d003      	beq.n	800bd9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fd91 	bl	800c8be <UART_Receive_IT>
      return;
 800bd9c:	e256      	b.n	800c24c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 80de 	beq.w	800bf64 <HAL_UART_IRQHandler+0x22c>
 800bda8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 80d1 	beq.w	800bf64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bdc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00b      	beq.n	800bde6 <HAL_UART_IRQHandler+0xae>
 800bdce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d005      	beq.n	800bde6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	f043 0201 	orr.w	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <HAL_UART_IRQHandler+0xd2>
 800bdf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d005      	beq.n	800be0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be02:	f043 0202 	orr.w	r2, r3, #2
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <HAL_UART_IRQHandler+0xf6>
 800be16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	f043 0204 	orr.w	r2, r3, #4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be32:	f003 0308 	and.w	r3, r3, #8
 800be36:	2b00      	cmp	r3, #0
 800be38:	d011      	beq.n	800be5e <HAL_UART_IRQHandler+0x126>
 800be3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be3e:	f003 0320 	and.w	r3, r3, #32
 800be42:	2b00      	cmp	r3, #0
 800be44:	d105      	bne.n	800be52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d005      	beq.n	800be5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	f043 0208 	orr.w	r2, r3, #8
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 81ed 	beq.w	800c242 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6c:	f003 0320 	and.w	r3, r3, #32
 800be70:	2b00      	cmp	r3, #0
 800be72:	d008      	beq.n	800be86 <HAL_UART_IRQHandler+0x14e>
 800be74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fd1c 	bl	800c8be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be90:	2b40      	cmp	r3, #64	; 0x40
 800be92:	bf0c      	ite	eq
 800be94:	2301      	moveq	r3, #1
 800be96:	2300      	movne	r3, #0
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea2:	f003 0308 	and.w	r3, r3, #8
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d103      	bne.n	800beb2 <HAL_UART_IRQHandler+0x17a>
 800beaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d04f      	beq.n	800bf52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fc24 	bl	800c700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec2:	2b40      	cmp	r3, #64	; 0x40
 800bec4:	d141      	bne.n	800bf4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3314      	adds	r3, #20
 800becc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bed4:	e853 3f00 	ldrex	r3, [r3]
 800bed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3314      	adds	r3, #20
 800beee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800befe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1d9      	bne.n	800bec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d013      	beq.n	800bf42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1e:	4a7d      	ldr	r2, [pc, #500]	; (800c114 <HAL_UART_IRQHandler+0x3dc>)
 800bf20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fb f83c 	bl	8006fa4 <HAL_DMA_Abort_IT>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d016      	beq.n	800bf60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf40:	e00e      	b.n	800bf60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f99a 	bl	800c27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf48:	e00a      	b.n	800bf60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f996 	bl	800c27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf50:	e006      	b.n	800bf60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f992 	bl	800c27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bf5e:	e170      	b.n	800c242 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf60:	bf00      	nop
    return;
 800bf62:	e16e      	b.n	800c242 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	f040 814a 	bne.w	800c202 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf72:	f003 0310 	and.w	r3, r3, #16
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 8143 	beq.w	800c202 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf80:	f003 0310 	and.w	r3, r3, #16
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 813c 	beq.w	800c202 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60bb      	str	r3, [r7, #8]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	60bb      	str	r3, [r7, #8]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	60bb      	str	r3, [r7, #8]
 800bf9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfaa:	2b40      	cmp	r3, #64	; 0x40
 800bfac:	f040 80b4 	bne.w	800c118 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 8140 	beq.w	800c246 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f080 8139 	bcs.w	800c246 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe6:	f000 8088 	beq.w	800c0fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	330c      	adds	r3, #12
 800bff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bff8:	e853 3f00 	ldrex	r3, [r3]
 800bffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	330c      	adds	r3, #12
 800c012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c01a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c02e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1d9      	bne.n	800bfea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3314      	adds	r3, #20
 800c03c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c048:	f023 0301 	bic.w	r3, r3, #1
 800c04c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3314      	adds	r3, #20
 800c056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c05a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c05e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e1      	bne.n	800c036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3314      	adds	r3, #20
 800c078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3314      	adds	r3, #20
 800c092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c096:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c09c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c09e:	e841 2300 	strex	r3, r2, [r1]
 800c0a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1e3      	bne.n	800c072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	330c      	adds	r3, #12
 800c0be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0c2:	e853 3f00 	ldrex	r3, [r3]
 800c0c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ca:	f023 0310 	bic.w	r3, r3, #16
 800c0ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	330c      	adds	r3, #12
 800c0d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c0dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800c0de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0e4:	e841 2300 	strex	r3, r2, [r1]
 800c0e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1e3      	bne.n	800c0b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fa fee5 	bl	8006ec4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c102:	b29b      	uxth	r3, r3
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	b29b      	uxth	r3, r3
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f8c0 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c110:	e099      	b.n	800c246 <HAL_UART_IRQHandler+0x50e>
 800c112:	bf00      	nop
 800c114:	0800c7c7 	.word	0x0800c7c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c120:	b29b      	uxth	r3, r3
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 808b 	beq.w	800c24a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 8086 	beq.w	800c24a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	330c      	adds	r3, #12
 800c144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	330c      	adds	r3, #12
 800c15e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c162:	647a      	str	r2, [r7, #68]	; 0x44
 800c164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e3      	bne.n	800c13e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3314      	adds	r3, #20
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	e853 3f00 	ldrex	r3, [r3]
 800c184:	623b      	str	r3, [r7, #32]
   return(result);
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	f023 0301 	bic.w	r3, r3, #1
 800c18c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3314      	adds	r3, #20
 800c196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c19a:	633a      	str	r2, [r7, #48]	; 0x30
 800c19c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a2:	e841 2300 	strex	r3, r2, [r1]
 800c1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e3      	bne.n	800c176 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	330c      	adds	r3, #12
 800c1c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	e853 3f00 	ldrex	r3, [r3]
 800c1ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f023 0310 	bic.w	r3, r3, #16
 800c1d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	330c      	adds	r3, #12
 800c1dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c1e0:	61fa      	str	r2, [r7, #28]
 800c1e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e4:	69b9      	ldr	r1, [r7, #24]
 800c1e6:	69fa      	ldr	r2, [r7, #28]
 800c1e8:	e841 2300 	strex	r3, r2, [r1]
 800c1ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1e3      	bne.n	800c1bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f848 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c200:	e023      	b.n	800c24a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <HAL_UART_IRQHandler+0x4ea>
 800c20e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fae7 	bl	800c7ee <UART_Transmit_IT>
    return;
 800c220:	e014      	b.n	800c24c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00e      	beq.n	800c24c <HAL_UART_IRQHandler+0x514>
 800c22e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c236:	2b00      	cmp	r3, #0
 800c238:	d008      	beq.n	800c24c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fb27 	bl	800c88e <UART_EndTransmit_IT>
    return;
 800c240:	e004      	b.n	800c24c <HAL_UART_IRQHandler+0x514>
    return;
 800c242:	bf00      	nop
 800c244:	e002      	b.n	800c24c <HAL_UART_IRQHandler+0x514>
      return;
 800c246:	bf00      	nop
 800c248:	e000      	b.n	800c24c <HAL_UART_IRQHandler+0x514>
      return;
 800c24a:	bf00      	nop
  }
}
 800c24c:	37e8      	adds	r7, #232	; 0xe8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop

0800c254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b09c      	sub	sp, #112	; 0x70
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d172      	bne.n	800c3aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	330c      	adds	r3, #12
 800c2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d4:	e853 3f00 	ldrex	r3, [r3]
 800c2d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	330c      	adds	r3, #12
 800c2e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2ea:	65ba      	str	r2, [r7, #88]	; 0x58
 800c2ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e5      	bne.n	800c2ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3314      	adds	r3, #20
 800c304:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c310:	f023 0301 	bic.w	r3, r3, #1
 800c314:	667b      	str	r3, [r7, #100]	; 0x64
 800c316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3314      	adds	r3, #20
 800c31c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c31e:	647a      	str	r2, [r7, #68]	; 0x44
 800c320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e5      	bne.n	800c2fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3314      	adds	r3, #20
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	623b      	str	r3, [r7, #32]
   return(result);
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c348:	663b      	str	r3, [r7, #96]	; 0x60
 800c34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3314      	adds	r3, #20
 800c350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c352:	633a      	str	r2, [r7, #48]	; 0x30
 800c354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35a:	e841 2300 	strex	r3, r2, [r1]
 800c35e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e5      	bne.n	800c332 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c368:	2220      	movs	r2, #32
 800c36a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c372:	2b01      	cmp	r3, #1
 800c374:	d119      	bne.n	800c3aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	330c      	adds	r3, #12
 800c37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	e853 3f00 	ldrex	r3, [r3]
 800c384:	60fb      	str	r3, [r7, #12]
   return(result);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f023 0310 	bic.w	r3, r3, #16
 800c38c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	330c      	adds	r3, #12
 800c394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c396:	61fa      	str	r2, [r7, #28]
 800c398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39a:	69b9      	ldr	r1, [r7, #24]
 800c39c:	69fa      	ldr	r2, [r7, #28]
 800c39e:	e841 2300 	strex	r3, r2, [r1]
 800c3a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1e5      	bne.n	800c376 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d106      	bne.n	800c3c0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c3ba:	f7ff ff69 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3be:	e002      	b.n	800c3c6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c3c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c3c2:	f7f8 fec3 	bl	800514c <HAL_UART_RxCpltCallback>
}
 800c3c6:	bf00      	nop
 800c3c8:	3770      	adds	r7, #112	; 0x70
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d108      	bne.n	800c3f6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff ff4e 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3f4:	e002      	b.n	800c3fc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7ff ff36 	bl	800c268 <HAL_UART_RxHalfCpltCallback>
}
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c420:	2b80      	cmp	r3, #128	; 0x80
 800c422:	bf0c      	ite	eq
 800c424:	2301      	moveq	r3, #1
 800c426:	2300      	movne	r3, #0
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b21      	cmp	r3, #33	; 0x21
 800c436:	d108      	bne.n	800c44a <UART_DMAError+0x46>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d005      	beq.n	800c44a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2200      	movs	r2, #0
 800c442:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c444:	68b8      	ldr	r0, [r7, #8]
 800c446:	f000 f933 	bl	800c6b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c454:	2b40      	cmp	r3, #64	; 0x40
 800c456:	bf0c      	ite	eq
 800c458:	2301      	moveq	r3, #1
 800c45a:	2300      	movne	r3, #0
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b22      	cmp	r3, #34	; 0x22
 800c46a:	d108      	bne.n	800c47e <UART_DMAError+0x7a>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2200      	movs	r2, #0
 800c476:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c478:	68b8      	ldr	r0, [r7, #8]
 800c47a:	f000 f941 	bl	800c700 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c482:	f043 0210 	orr.w	r2, r3, #16
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c48a:	68b8      	ldr	r0, [r7, #8]
 800c48c:	f7ff fef6 	bl	800c27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c490:	bf00      	nop
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b090      	sub	sp, #64	; 0x40
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4a8:	e050      	b.n	800c54c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b0:	d04c      	beq.n	800c54c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d007      	beq.n	800c4c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4b8:	f7fa fabc 	bl	8006a34 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d241      	bcs.n	800c54c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	330c      	adds	r3, #12
 800c4ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	e853 3f00 	ldrex	r3, [r3]
 800c4d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	330c      	adds	r3, #12
 800c4e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4e8:	637a      	str	r2, [r7, #52]	; 0x34
 800c4ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f0:	e841 2300 	strex	r3, r2, [r1]
 800c4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e5      	bne.n	800c4c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3314      	adds	r3, #20
 800c502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	613b      	str	r3, [r7, #16]
   return(result);
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	f023 0301 	bic.w	r3, r3, #1
 800c512:	63bb      	str	r3, [r7, #56]	; 0x38
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3314      	adds	r3, #20
 800c51a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c51c:	623a      	str	r2, [r7, #32]
 800c51e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	69f9      	ldr	r1, [r7, #28]
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	e841 2300 	strex	r3, r2, [r1]
 800c528:	61bb      	str	r3, [r7, #24]
   return(result);
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e5      	bne.n	800c4fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2220      	movs	r2, #32
 800c534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e00f      	b.n	800c56c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	4013      	ands	r3, r2
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	429a      	cmp	r2, r3
 800c55a:	bf0c      	ite	eq
 800c55c:	2301      	moveq	r3, #1
 800c55e:	2300      	movne	r3, #0
 800c560:	b2db      	uxtb	r3, r3
 800c562:	461a      	mov	r2, r3
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	429a      	cmp	r2, r3
 800c568:	d09f      	beq.n	800c4aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3740      	adds	r7, #64	; 0x40
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b098      	sub	sp, #96	; 0x60
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	4613      	mov	r3, r2
 800c580:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	88fa      	ldrh	r2, [r7, #6]
 800c58c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2222      	movs	r2, #34	; 0x22
 800c598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	4a40      	ldr	r2, [pc, #256]	; (800c6a4 <UART_Start_Receive_DMA+0x130>)
 800c5a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a8:	4a3f      	ldr	r2, [pc, #252]	; (800c6a8 <UART_Start_Receive_DMA+0x134>)
 800c5aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b0:	4a3e      	ldr	r2, [pc, #248]	; (800c6ac <UART_Start_Receive_DMA+0x138>)
 800c5b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	88fb      	ldrh	r3, [r7, #6]
 800c5d4:	f7fa fc1e 	bl	8006e14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c5d8:	2300      	movs	r3, #0
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	613b      	str	r3, [r7, #16]
 800c5ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d019      	beq.n	800c632 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	330c      	adds	r3, #12
 800c604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c608:	e853 3f00 	ldrex	r3, [r3]
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c614:	65bb      	str	r3, [r7, #88]	; 0x58
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	330c      	adds	r3, #12
 800c61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c61e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c620:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c622:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c626:	e841 2300 	strex	r3, r2, [r1]
 800c62a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1e5      	bne.n	800c5fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3314      	adds	r3, #20
 800c638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	e853 3f00 	ldrex	r3, [r3]
 800c640:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	657b      	str	r3, [r7, #84]	; 0x54
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3314      	adds	r3, #20
 800c650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c652:	63ba      	str	r2, [r7, #56]	; 0x38
 800c654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c65a:	e841 2300 	strex	r3, r2, [r1]
 800c65e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1e5      	bne.n	800c632 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3314      	adds	r3, #20
 800c66c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	e853 3f00 	ldrex	r3, [r3]
 800c674:	617b      	str	r3, [r7, #20]
   return(result);
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c67c:	653b      	str	r3, [r7, #80]	; 0x50
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3314      	adds	r3, #20
 800c684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c686:	627a      	str	r2, [r7, #36]	; 0x24
 800c688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6a39      	ldr	r1, [r7, #32]
 800c68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	61fb      	str	r3, [r7, #28]
   return(result);
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e5      	bne.n	800c666 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3760      	adds	r7, #96	; 0x60
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	0800c2a9 	.word	0x0800c2a9
 800c6a8:	0800c3cf 	.word	0x0800c3cf
 800c6ac:	0800c405 	.word	0x0800c405

0800c6b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b089      	sub	sp, #36	; 0x24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	330c      	adds	r3, #12
 800c6be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	e853 3f00 	ldrex	r3, [r3]
 800c6c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c6ce:	61fb      	str	r3, [r7, #28]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	330c      	adds	r3, #12
 800c6d6:	69fa      	ldr	r2, [r7, #28]
 800c6d8:	61ba      	str	r2, [r7, #24]
 800c6da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	6979      	ldr	r1, [r7, #20]
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	e841 2300 	strex	r3, r2, [r1]
 800c6e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1e5      	bne.n	800c6b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c6f4:	bf00      	nop
 800c6f6:	3724      	adds	r7, #36	; 0x24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c700:	b480      	push	{r7}
 800c702:	b095      	sub	sp, #84	; 0x54
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	330c      	adds	r3, #12
 800c70e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	330c      	adds	r3, #12
 800c726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c728:	643a      	str	r2, [r7, #64]	; 0x40
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c72e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c730:	e841 2300 	strex	r3, r2, [r1]
 800c734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e5      	bne.n	800c708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3314      	adds	r3, #20
 800c742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	e853 3f00 	ldrex	r3, [r3]
 800c74a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	f023 0301 	bic.w	r3, r3, #1
 800c752:	64bb      	str	r3, [r7, #72]	; 0x48
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3314      	adds	r3, #20
 800c75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c75c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c764:	e841 2300 	strex	r3, r2, [r1]
 800c768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e5      	bne.n	800c73c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c774:	2b01      	cmp	r3, #1
 800c776:	d119      	bne.n	800c7ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	330c      	adds	r3, #12
 800c77e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	e853 3f00 	ldrex	r3, [r3]
 800c786:	60bb      	str	r3, [r7, #8]
   return(result);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f023 0310 	bic.w	r3, r3, #16
 800c78e:	647b      	str	r3, [r7, #68]	; 0x44
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	330c      	adds	r3, #12
 800c796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c798:	61ba      	str	r2, [r7, #24]
 800c79a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79c:	6979      	ldr	r1, [r7, #20]
 800c79e:	69ba      	ldr	r2, [r7, #24]
 800c7a0:	e841 2300 	strex	r3, r2, [r1]
 800c7a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1e5      	bne.n	800c778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c7ba:	bf00      	nop
 800c7bc:	3754      	adds	r7, #84	; 0x54
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff fd4b 	bl	800c27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7e6:	bf00      	nop
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b085      	sub	sp, #20
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	2b21      	cmp	r3, #33	; 0x21
 800c800:	d13e      	bne.n	800c880 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c80a:	d114      	bne.n	800c836 <UART_Transmit_IT+0x48>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d110      	bne.n	800c836 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a1b      	ldr	r3, [r3, #32]
 800c818:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c828:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	1c9a      	adds	r2, r3, #2
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	621a      	str	r2, [r3, #32]
 800c834:	e008      	b.n	800c848 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	1c59      	adds	r1, r3, #1
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	6211      	str	r1, [r2, #32]
 800c840:	781a      	ldrb	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	3b01      	subs	r3, #1
 800c850:	b29b      	uxth	r3, r3
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	4619      	mov	r1, r3
 800c856:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10f      	bne.n	800c87c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68da      	ldr	r2, [r3, #12]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c86a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c87a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	e000      	b.n	800c882 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c880:	2302      	movs	r3, #2
  }
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2220      	movs	r2, #32
 800c8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff fcd0 	bl	800c254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b08c      	sub	sp, #48	; 0x30
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b22      	cmp	r3, #34	; 0x22
 800c8d0:	f040 80ab 	bne.w	800ca2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8dc:	d117      	bne.n	800c90e <UART_Receive_IT+0x50>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d113      	bne.n	800c90e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c906:	1c9a      	adds	r2, r3, #2
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	629a      	str	r2, [r3, #40]	; 0x28
 800c90c:	e026      	b.n	800c95c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c912:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c914:	2300      	movs	r3, #0
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c920:	d007      	beq.n	800c932 <UART_Receive_IT+0x74>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <UART_Receive_IT+0x82>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	e008      	b.n	800c952 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c950:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c960:	b29b      	uxth	r3, r3
 800c962:	3b01      	subs	r3, #1
 800c964:	b29b      	uxth	r3, r3
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	4619      	mov	r1, r3
 800c96a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d15a      	bne.n	800ca26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f022 0220 	bic.w	r2, r2, #32
 800c97e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c98e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	695a      	ldr	r2, [r3, #20]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f022 0201 	bic.w	r2, r2, #1
 800c99e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d135      	bne.n	800ca1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	330c      	adds	r3, #12
 800c9bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	f023 0310 	bic.w	r3, r3, #16
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	330c      	adds	r3, #12
 800c9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9d6:	623a      	str	r2, [r7, #32]
 800c9d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9da:	69f9      	ldr	r1, [r7, #28]
 800c9dc:	6a3a      	ldr	r2, [r7, #32]
 800c9de:	e841 2300 	strex	r3, r2, [r1]
 800c9e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e5      	bne.n	800c9b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0310 	and.w	r3, r3, #16
 800c9f4:	2b10      	cmp	r3, #16
 800c9f6:	d10a      	bne.n	800ca0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7ff fc3b 	bl	800c290 <HAL_UARTEx_RxEventCallback>
 800ca1a:	e002      	b.n	800ca22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7f8 fb95 	bl	800514c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ca22:	2300      	movs	r3, #0
 800ca24:	e002      	b.n	800ca2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	e000      	b.n	800ca2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ca2a:	2302      	movs	r3, #2
  }
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3730      	adds	r7, #48	; 0x30
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca38:	b0c0      	sub	sp, #256	; 0x100
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ca4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca50:	68d9      	ldr	r1, [r3, #12]
 800ca52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	ea40 0301 	orr.w	r3, r0, r1
 800ca5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ca5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca62:	689a      	ldr	r2, [r3, #8]
 800ca64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca78:	69db      	ldr	r3, [r3, #28]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ca80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ca8c:	f021 010c 	bic.w	r1, r1, #12
 800ca90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca9a:	430b      	orrs	r3, r1
 800ca9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800caaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caae:	6999      	ldr	r1, [r3, #24]
 800cab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	ea40 0301 	orr.w	r3, r0, r1
 800caba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	4b8f      	ldr	r3, [pc, #572]	; (800cd00 <UART_SetConfig+0x2cc>)
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d005      	beq.n	800cad4 <UART_SetConfig+0xa0>
 800cac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	4b8d      	ldr	r3, [pc, #564]	; (800cd04 <UART_SetConfig+0x2d0>)
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d104      	bne.n	800cade <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cad4:	f7fe f806 	bl	800aae4 <HAL_RCC_GetPCLK2Freq>
 800cad8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cadc:	e003      	b.n	800cae6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cade:	f7fd ffed 	bl	800aabc <HAL_RCC_GetPCLK1Freq>
 800cae2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf0:	f040 810c 	bne.w	800cd0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800caf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caf8:	2200      	movs	r2, #0
 800cafa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cafe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cb02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cb06:	4622      	mov	r2, r4
 800cb08:	462b      	mov	r3, r5
 800cb0a:	1891      	adds	r1, r2, r2
 800cb0c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cb0e:	415b      	adcs	r3, r3
 800cb10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cb16:	4621      	mov	r1, r4
 800cb18:	eb12 0801 	adds.w	r8, r2, r1
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	eb43 0901 	adc.w	r9, r3, r1
 800cb22:	f04f 0200 	mov.w	r2, #0
 800cb26:	f04f 0300 	mov.w	r3, #0
 800cb2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb36:	4690      	mov	r8, r2
 800cb38:	4699      	mov	r9, r3
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	eb18 0303 	adds.w	r3, r8, r3
 800cb40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cb44:	462b      	mov	r3, r5
 800cb46:	eb49 0303 	adc.w	r3, r9, r3
 800cb4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cb5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cb62:	460b      	mov	r3, r1
 800cb64:	18db      	adds	r3, r3, r3
 800cb66:	653b      	str	r3, [r7, #80]	; 0x50
 800cb68:	4613      	mov	r3, r2
 800cb6a:	eb42 0303 	adc.w	r3, r2, r3
 800cb6e:	657b      	str	r3, [r7, #84]	; 0x54
 800cb70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cb74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cb78:	f7f4 f88e 	bl	8000c98 <__aeabi_uldivmod>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4b61      	ldr	r3, [pc, #388]	; (800cd08 <UART_SetConfig+0x2d4>)
 800cb82:	fba3 2302 	umull	r2, r3, r3, r2
 800cb86:	095b      	lsrs	r3, r3, #5
 800cb88:	011c      	lsls	r4, r3, #4
 800cb8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cb98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cb9c:	4642      	mov	r2, r8
 800cb9e:	464b      	mov	r3, r9
 800cba0:	1891      	adds	r1, r2, r2
 800cba2:	64b9      	str	r1, [r7, #72]	; 0x48
 800cba4:	415b      	adcs	r3, r3
 800cba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cbac:	4641      	mov	r1, r8
 800cbae:	eb12 0a01 	adds.w	sl, r2, r1
 800cbb2:	4649      	mov	r1, r9
 800cbb4:	eb43 0b01 	adc.w	fp, r3, r1
 800cbb8:	f04f 0200 	mov.w	r2, #0
 800cbbc:	f04f 0300 	mov.w	r3, #0
 800cbc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cbc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cbc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbcc:	4692      	mov	sl, r2
 800cbce:	469b      	mov	fp, r3
 800cbd0:	4643      	mov	r3, r8
 800cbd2:	eb1a 0303 	adds.w	r3, sl, r3
 800cbd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cbda:	464b      	mov	r3, r9
 800cbdc:	eb4b 0303 	adc.w	r3, fp, r3
 800cbe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cbf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cbf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	18db      	adds	r3, r3, r3
 800cbfc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbfe:	4613      	mov	r3, r2
 800cc00:	eb42 0303 	adc.w	r3, r2, r3
 800cc04:	647b      	str	r3, [r7, #68]	; 0x44
 800cc06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cc0e:	f7f4 f843 	bl	8000c98 <__aeabi_uldivmod>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4611      	mov	r1, r2
 800cc18:	4b3b      	ldr	r3, [pc, #236]	; (800cd08 <UART_SetConfig+0x2d4>)
 800cc1a:	fba3 2301 	umull	r2, r3, r3, r1
 800cc1e:	095b      	lsrs	r3, r3, #5
 800cc20:	2264      	movs	r2, #100	; 0x64
 800cc22:	fb02 f303 	mul.w	r3, r2, r3
 800cc26:	1acb      	subs	r3, r1, r3
 800cc28:	00db      	lsls	r3, r3, #3
 800cc2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cc2e:	4b36      	ldr	r3, [pc, #216]	; (800cd08 <UART_SetConfig+0x2d4>)
 800cc30:	fba3 2302 	umull	r2, r3, r3, r2
 800cc34:	095b      	lsrs	r3, r3, #5
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc3c:	441c      	add	r4, r3
 800cc3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cc4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cc50:	4642      	mov	r2, r8
 800cc52:	464b      	mov	r3, r9
 800cc54:	1891      	adds	r1, r2, r2
 800cc56:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc58:	415b      	adcs	r3, r3
 800cc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc60:	4641      	mov	r1, r8
 800cc62:	1851      	adds	r1, r2, r1
 800cc64:	6339      	str	r1, [r7, #48]	; 0x30
 800cc66:	4649      	mov	r1, r9
 800cc68:	414b      	adcs	r3, r1
 800cc6a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc6c:	f04f 0200 	mov.w	r2, #0
 800cc70:	f04f 0300 	mov.w	r3, #0
 800cc74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cc78:	4659      	mov	r1, fp
 800cc7a:	00cb      	lsls	r3, r1, #3
 800cc7c:	4651      	mov	r1, sl
 800cc7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc82:	4651      	mov	r1, sl
 800cc84:	00ca      	lsls	r2, r1, #3
 800cc86:	4610      	mov	r0, r2
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	4642      	mov	r2, r8
 800cc8e:	189b      	adds	r3, r3, r2
 800cc90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc94:	464b      	mov	r3, r9
 800cc96:	460a      	mov	r2, r1
 800cc98:	eb42 0303 	adc.w	r3, r2, r3
 800cc9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ccac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ccb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	18db      	adds	r3, r3, r3
 800ccb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccba:	4613      	mov	r3, r2
 800ccbc:	eb42 0303 	adc.w	r3, r2, r3
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ccc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ccca:	f7f3 ffe5 	bl	8000c98 <__aeabi_uldivmod>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	; (800cd08 <UART_SetConfig+0x2d4>)
 800ccd4:	fba3 1302 	umull	r1, r3, r3, r2
 800ccd8:	095b      	lsrs	r3, r3, #5
 800ccda:	2164      	movs	r1, #100	; 0x64
 800ccdc:	fb01 f303 	mul.w	r3, r1, r3
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	3332      	adds	r3, #50	; 0x32
 800cce6:	4a08      	ldr	r2, [pc, #32]	; (800cd08 <UART_SetConfig+0x2d4>)
 800cce8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccec:	095b      	lsrs	r3, r3, #5
 800ccee:	f003 0207 	and.w	r2, r3, #7
 800ccf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4422      	add	r2, r4
 800ccfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ccfc:	e105      	b.n	800cf0a <UART_SetConfig+0x4d6>
 800ccfe:	bf00      	nop
 800cd00:	40011000 	.word	0x40011000
 800cd04:	40011400 	.word	0x40011400
 800cd08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd10:	2200      	movs	r2, #0
 800cd12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cd1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cd1e:	4642      	mov	r2, r8
 800cd20:	464b      	mov	r3, r9
 800cd22:	1891      	adds	r1, r2, r2
 800cd24:	6239      	str	r1, [r7, #32]
 800cd26:	415b      	adcs	r3, r3
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24
 800cd2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd2e:	4641      	mov	r1, r8
 800cd30:	1854      	adds	r4, r2, r1
 800cd32:	4649      	mov	r1, r9
 800cd34:	eb43 0501 	adc.w	r5, r3, r1
 800cd38:	f04f 0200 	mov.w	r2, #0
 800cd3c:	f04f 0300 	mov.w	r3, #0
 800cd40:	00eb      	lsls	r3, r5, #3
 800cd42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd46:	00e2      	lsls	r2, r4, #3
 800cd48:	4614      	mov	r4, r2
 800cd4a:	461d      	mov	r5, r3
 800cd4c:	4643      	mov	r3, r8
 800cd4e:	18e3      	adds	r3, r4, r3
 800cd50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd54:	464b      	mov	r3, r9
 800cd56:	eb45 0303 	adc.w	r3, r5, r3
 800cd5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd6e:	f04f 0200 	mov.w	r2, #0
 800cd72:	f04f 0300 	mov.w	r3, #0
 800cd76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	008b      	lsls	r3, r1, #2
 800cd7e:	4621      	mov	r1, r4
 800cd80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd84:	4621      	mov	r1, r4
 800cd86:	008a      	lsls	r2, r1, #2
 800cd88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cd8c:	f7f3 ff84 	bl	8000c98 <__aeabi_uldivmod>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4b60      	ldr	r3, [pc, #384]	; (800cf18 <UART_SetConfig+0x4e4>)
 800cd96:	fba3 2302 	umull	r2, r3, r3, r2
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	011c      	lsls	r4, r3, #4
 800cd9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cda2:	2200      	movs	r2, #0
 800cda4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cda8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cdac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	1891      	adds	r1, r2, r2
 800cdb6:	61b9      	str	r1, [r7, #24]
 800cdb8:	415b      	adcs	r3, r3
 800cdba:	61fb      	str	r3, [r7, #28]
 800cdbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cdc0:	4641      	mov	r1, r8
 800cdc2:	1851      	adds	r1, r2, r1
 800cdc4:	6139      	str	r1, [r7, #16]
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	414b      	adcs	r3, r1
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cdd8:	4659      	mov	r1, fp
 800cdda:	00cb      	lsls	r3, r1, #3
 800cddc:	4651      	mov	r1, sl
 800cdde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cde2:	4651      	mov	r1, sl
 800cde4:	00ca      	lsls	r2, r1, #3
 800cde6:	4610      	mov	r0, r2
 800cde8:	4619      	mov	r1, r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	4642      	mov	r2, r8
 800cdee:	189b      	adds	r3, r3, r2
 800cdf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdf4:	464b      	mov	r3, r9
 800cdf6:	460a      	mov	r2, r1
 800cdf8:	eb42 0303 	adc.w	r3, r2, r3
 800cdfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ce0c:	f04f 0200 	mov.w	r2, #0
 800ce10:	f04f 0300 	mov.w	r3, #0
 800ce14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ce18:	4649      	mov	r1, r9
 800ce1a:	008b      	lsls	r3, r1, #2
 800ce1c:	4641      	mov	r1, r8
 800ce1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce22:	4641      	mov	r1, r8
 800ce24:	008a      	lsls	r2, r1, #2
 800ce26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ce2a:	f7f3 ff35 	bl	8000c98 <__aeabi_uldivmod>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4b39      	ldr	r3, [pc, #228]	; (800cf18 <UART_SetConfig+0x4e4>)
 800ce34:	fba3 1302 	umull	r1, r3, r3, r2
 800ce38:	095b      	lsrs	r3, r3, #5
 800ce3a:	2164      	movs	r1, #100	; 0x64
 800ce3c:	fb01 f303 	mul.w	r3, r1, r3
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	011b      	lsls	r3, r3, #4
 800ce44:	3332      	adds	r3, #50	; 0x32
 800ce46:	4a34      	ldr	r2, [pc, #208]	; (800cf18 <UART_SetConfig+0x4e4>)
 800ce48:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4c:	095b      	lsrs	r3, r3, #5
 800ce4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce52:	441c      	add	r4, r3
 800ce54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce58:	2200      	movs	r2, #0
 800ce5a:	673b      	str	r3, [r7, #112]	; 0x70
 800ce5c:	677a      	str	r2, [r7, #116]	; 0x74
 800ce5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ce62:	4642      	mov	r2, r8
 800ce64:	464b      	mov	r3, r9
 800ce66:	1891      	adds	r1, r2, r2
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	415b      	adcs	r3, r3
 800ce6c:	60fb      	str	r3, [r7, #12]
 800ce6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce72:	4641      	mov	r1, r8
 800ce74:	1851      	adds	r1, r2, r1
 800ce76:	6039      	str	r1, [r7, #0]
 800ce78:	4649      	mov	r1, r9
 800ce7a:	414b      	adcs	r3, r1
 800ce7c:	607b      	str	r3, [r7, #4]
 800ce7e:	f04f 0200 	mov.w	r2, #0
 800ce82:	f04f 0300 	mov.w	r3, #0
 800ce86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce8a:	4659      	mov	r1, fp
 800ce8c:	00cb      	lsls	r3, r1, #3
 800ce8e:	4651      	mov	r1, sl
 800ce90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce94:	4651      	mov	r1, sl
 800ce96:	00ca      	lsls	r2, r1, #3
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	4642      	mov	r2, r8
 800cea0:	189b      	adds	r3, r3, r2
 800cea2:	66bb      	str	r3, [r7, #104]	; 0x68
 800cea4:	464b      	mov	r3, r9
 800cea6:	460a      	mov	r2, r1
 800cea8:	eb42 0303 	adc.w	r3, r2, r3
 800ceac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ceae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	663b      	str	r3, [r7, #96]	; 0x60
 800ceb8:	667a      	str	r2, [r7, #100]	; 0x64
 800ceba:	f04f 0200 	mov.w	r2, #0
 800cebe:	f04f 0300 	mov.w	r3, #0
 800cec2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cec6:	4649      	mov	r1, r9
 800cec8:	008b      	lsls	r3, r1, #2
 800ceca:	4641      	mov	r1, r8
 800cecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ced0:	4641      	mov	r1, r8
 800ced2:	008a      	lsls	r2, r1, #2
 800ced4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ced8:	f7f3 fede 	bl	8000c98 <__aeabi_uldivmod>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	4b0d      	ldr	r3, [pc, #52]	; (800cf18 <UART_SetConfig+0x4e4>)
 800cee2:	fba3 1302 	umull	r1, r3, r3, r2
 800cee6:	095b      	lsrs	r3, r3, #5
 800cee8:	2164      	movs	r1, #100	; 0x64
 800ceea:	fb01 f303 	mul.w	r3, r1, r3
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	011b      	lsls	r3, r3, #4
 800cef2:	3332      	adds	r3, #50	; 0x32
 800cef4:	4a08      	ldr	r2, [pc, #32]	; (800cf18 <UART_SetConfig+0x4e4>)
 800cef6:	fba2 2303 	umull	r2, r3, r2, r3
 800cefa:	095b      	lsrs	r3, r3, #5
 800cefc:	f003 020f 	and.w	r2, r3, #15
 800cf00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4422      	add	r2, r4
 800cf08:	609a      	str	r2, [r3, #8]
}
 800cf0a:	bf00      	nop
 800cf0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cf10:	46bd      	mov	sp, r7
 800cf12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf16:	bf00      	nop
 800cf18:	51eb851f 	.word	0x51eb851f

0800cf1c <__errno>:
 800cf1c:	4b01      	ldr	r3, [pc, #4]	; (800cf24 <__errno+0x8>)
 800cf1e:	6818      	ldr	r0, [r3, #0]
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	20000250 	.word	0x20000250

0800cf28 <__libc_init_array>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	4d0d      	ldr	r5, [pc, #52]	; (800cf60 <__libc_init_array+0x38>)
 800cf2c:	4c0d      	ldr	r4, [pc, #52]	; (800cf64 <__libc_init_array+0x3c>)
 800cf2e:	1b64      	subs	r4, r4, r5
 800cf30:	10a4      	asrs	r4, r4, #2
 800cf32:	2600      	movs	r6, #0
 800cf34:	42a6      	cmp	r6, r4
 800cf36:	d109      	bne.n	800cf4c <__libc_init_array+0x24>
 800cf38:	4d0b      	ldr	r5, [pc, #44]	; (800cf68 <__libc_init_array+0x40>)
 800cf3a:	4c0c      	ldr	r4, [pc, #48]	; (800cf6c <__libc_init_array+0x44>)
 800cf3c:	f002 ff88 	bl	800fe50 <_init>
 800cf40:	1b64      	subs	r4, r4, r5
 800cf42:	10a4      	asrs	r4, r4, #2
 800cf44:	2600      	movs	r6, #0
 800cf46:	42a6      	cmp	r6, r4
 800cf48:	d105      	bne.n	800cf56 <__libc_init_array+0x2e>
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf50:	4798      	blx	r3
 800cf52:	3601      	adds	r6, #1
 800cf54:	e7ee      	b.n	800cf34 <__libc_init_array+0xc>
 800cf56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5a:	4798      	blx	r3
 800cf5c:	3601      	adds	r6, #1
 800cf5e:	e7f2      	b.n	800cf46 <__libc_init_array+0x1e>
 800cf60:	0803d584 	.word	0x0803d584
 800cf64:	0803d584 	.word	0x0803d584
 800cf68:	0803d584 	.word	0x0803d584
 800cf6c:	0803d588 	.word	0x0803d588

0800cf70 <memset>:
 800cf70:	4402      	add	r2, r0
 800cf72:	4603      	mov	r3, r0
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d100      	bne.n	800cf7a <memset+0xa>
 800cf78:	4770      	bx	lr
 800cf7a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf7e:	e7f9      	b.n	800cf74 <memset+0x4>

0800cf80 <__cvt>:
 800cf80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf84:	ec55 4b10 	vmov	r4, r5, d0
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	460e      	mov	r6, r1
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	462b      	mov	r3, r5
 800cf90:	bfbb      	ittet	lt
 800cf92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cf96:	461d      	movlt	r5, r3
 800cf98:	2300      	movge	r3, #0
 800cf9a:	232d      	movlt	r3, #45	; 0x2d
 800cf9c:	700b      	strb	r3, [r1, #0]
 800cf9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cfa4:	4691      	mov	r9, r2
 800cfa6:	f023 0820 	bic.w	r8, r3, #32
 800cfaa:	bfbc      	itt	lt
 800cfac:	4622      	movlt	r2, r4
 800cfae:	4614      	movlt	r4, r2
 800cfb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfb4:	d005      	beq.n	800cfc2 <__cvt+0x42>
 800cfb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cfba:	d100      	bne.n	800cfbe <__cvt+0x3e>
 800cfbc:	3601      	adds	r6, #1
 800cfbe:	2102      	movs	r1, #2
 800cfc0:	e000      	b.n	800cfc4 <__cvt+0x44>
 800cfc2:	2103      	movs	r1, #3
 800cfc4:	ab03      	add	r3, sp, #12
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	ab02      	add	r3, sp, #8
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	ec45 4b10 	vmov	d0, r4, r5
 800cfd0:	4653      	mov	r3, sl
 800cfd2:	4632      	mov	r2, r6
 800cfd4:	f000 fcfc 	bl	800d9d0 <_dtoa_r>
 800cfd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cfdc:	4607      	mov	r7, r0
 800cfde:	d102      	bne.n	800cfe6 <__cvt+0x66>
 800cfe0:	f019 0f01 	tst.w	r9, #1
 800cfe4:	d022      	beq.n	800d02c <__cvt+0xac>
 800cfe6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfea:	eb07 0906 	add.w	r9, r7, r6
 800cfee:	d110      	bne.n	800d012 <__cvt+0x92>
 800cff0:	783b      	ldrb	r3, [r7, #0]
 800cff2:	2b30      	cmp	r3, #48	; 0x30
 800cff4:	d10a      	bne.n	800d00c <__cvt+0x8c>
 800cff6:	2200      	movs	r2, #0
 800cff8:	2300      	movs	r3, #0
 800cffa:	4620      	mov	r0, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7f3 fd6b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d002:	b918      	cbnz	r0, 800d00c <__cvt+0x8c>
 800d004:	f1c6 0601 	rsb	r6, r6, #1
 800d008:	f8ca 6000 	str.w	r6, [sl]
 800d00c:	f8da 3000 	ldr.w	r3, [sl]
 800d010:	4499      	add	r9, r3
 800d012:	2200      	movs	r2, #0
 800d014:	2300      	movs	r3, #0
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d01e:	b108      	cbz	r0, 800d024 <__cvt+0xa4>
 800d020:	f8cd 900c 	str.w	r9, [sp, #12]
 800d024:	2230      	movs	r2, #48	; 0x30
 800d026:	9b03      	ldr	r3, [sp, #12]
 800d028:	454b      	cmp	r3, r9
 800d02a:	d307      	bcc.n	800d03c <__cvt+0xbc>
 800d02c:	9b03      	ldr	r3, [sp, #12]
 800d02e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d030:	1bdb      	subs	r3, r3, r7
 800d032:	4638      	mov	r0, r7
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	b004      	add	sp, #16
 800d038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d03c:	1c59      	adds	r1, r3, #1
 800d03e:	9103      	str	r1, [sp, #12]
 800d040:	701a      	strb	r2, [r3, #0]
 800d042:	e7f0      	b.n	800d026 <__cvt+0xa6>

0800d044 <__exponent>:
 800d044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d046:	4603      	mov	r3, r0
 800d048:	2900      	cmp	r1, #0
 800d04a:	bfb8      	it	lt
 800d04c:	4249      	neglt	r1, r1
 800d04e:	f803 2b02 	strb.w	r2, [r3], #2
 800d052:	bfb4      	ite	lt
 800d054:	222d      	movlt	r2, #45	; 0x2d
 800d056:	222b      	movge	r2, #43	; 0x2b
 800d058:	2909      	cmp	r1, #9
 800d05a:	7042      	strb	r2, [r0, #1]
 800d05c:	dd2a      	ble.n	800d0b4 <__exponent+0x70>
 800d05e:	f10d 0407 	add.w	r4, sp, #7
 800d062:	46a4      	mov	ip, r4
 800d064:	270a      	movs	r7, #10
 800d066:	46a6      	mov	lr, r4
 800d068:	460a      	mov	r2, r1
 800d06a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d06e:	fb07 1516 	mls	r5, r7, r6, r1
 800d072:	3530      	adds	r5, #48	; 0x30
 800d074:	2a63      	cmp	r2, #99	; 0x63
 800d076:	f104 34ff 	add.w	r4, r4, #4294967295
 800d07a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d07e:	4631      	mov	r1, r6
 800d080:	dcf1      	bgt.n	800d066 <__exponent+0x22>
 800d082:	3130      	adds	r1, #48	; 0x30
 800d084:	f1ae 0502 	sub.w	r5, lr, #2
 800d088:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d08c:	1c44      	adds	r4, r0, #1
 800d08e:	4629      	mov	r1, r5
 800d090:	4561      	cmp	r1, ip
 800d092:	d30a      	bcc.n	800d0aa <__exponent+0x66>
 800d094:	f10d 0209 	add.w	r2, sp, #9
 800d098:	eba2 020e 	sub.w	r2, r2, lr
 800d09c:	4565      	cmp	r5, ip
 800d09e:	bf88      	it	hi
 800d0a0:	2200      	movhi	r2, #0
 800d0a2:	4413      	add	r3, r2
 800d0a4:	1a18      	subs	r0, r3, r0
 800d0a6:	b003      	add	sp, #12
 800d0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d0b2:	e7ed      	b.n	800d090 <__exponent+0x4c>
 800d0b4:	2330      	movs	r3, #48	; 0x30
 800d0b6:	3130      	adds	r1, #48	; 0x30
 800d0b8:	7083      	strb	r3, [r0, #2]
 800d0ba:	70c1      	strb	r1, [r0, #3]
 800d0bc:	1d03      	adds	r3, r0, #4
 800d0be:	e7f1      	b.n	800d0a4 <__exponent+0x60>

0800d0c0 <_printf_float>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	ed2d 8b02 	vpush	{d8}
 800d0c8:	b08d      	sub	sp, #52	; 0x34
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d0d0:	4616      	mov	r6, r2
 800d0d2:	461f      	mov	r7, r3
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	f001 fa69 	bl	800e5ac <_localeconv_r>
 800d0da:	f8d0 a000 	ldr.w	sl, [r0]
 800d0de:	4650      	mov	r0, sl
 800d0e0:	f7f3 f87e 	bl	80001e0 <strlen>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	9305      	str	r3, [sp, #20]
 800d0ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d0f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d0f4:	3307      	adds	r3, #7
 800d0f6:	f023 0307 	bic.w	r3, r3, #7
 800d0fa:	f103 0208 	add.w	r2, r3, #8
 800d0fe:	f8c8 2000 	str.w	r2, [r8]
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d10a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d10e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d112:	9307      	str	r3, [sp, #28]
 800d114:	f8cd 8018 	str.w	r8, [sp, #24]
 800d118:	ee08 0a10 	vmov	s16, r0
 800d11c:	4b9f      	ldr	r3, [pc, #636]	; (800d39c <_printf_float+0x2dc>)
 800d11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d122:	f04f 32ff 	mov.w	r2, #4294967295
 800d126:	f7f3 fd09 	bl	8000b3c <__aeabi_dcmpun>
 800d12a:	bb88      	cbnz	r0, 800d190 <_printf_float+0xd0>
 800d12c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d130:	4b9a      	ldr	r3, [pc, #616]	; (800d39c <_printf_float+0x2dc>)
 800d132:	f04f 32ff 	mov.w	r2, #4294967295
 800d136:	f7f3 fce3 	bl	8000b00 <__aeabi_dcmple>
 800d13a:	bb48      	cbnz	r0, 800d190 <_printf_float+0xd0>
 800d13c:	2200      	movs	r2, #0
 800d13e:	2300      	movs	r3, #0
 800d140:	4640      	mov	r0, r8
 800d142:	4649      	mov	r1, r9
 800d144:	f7f3 fcd2 	bl	8000aec <__aeabi_dcmplt>
 800d148:	b110      	cbz	r0, 800d150 <_printf_float+0x90>
 800d14a:	232d      	movs	r3, #45	; 0x2d
 800d14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d150:	4b93      	ldr	r3, [pc, #588]	; (800d3a0 <_printf_float+0x2e0>)
 800d152:	4894      	ldr	r0, [pc, #592]	; (800d3a4 <_printf_float+0x2e4>)
 800d154:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d158:	bf94      	ite	ls
 800d15a:	4698      	movls	r8, r3
 800d15c:	4680      	movhi	r8, r0
 800d15e:	2303      	movs	r3, #3
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	9b05      	ldr	r3, [sp, #20]
 800d164:	f023 0204 	bic.w	r2, r3, #4
 800d168:	6022      	str	r2, [r4, #0]
 800d16a:	f04f 0900 	mov.w	r9, #0
 800d16e:	9700      	str	r7, [sp, #0]
 800d170:	4633      	mov	r3, r6
 800d172:	aa0b      	add	r2, sp, #44	; 0x2c
 800d174:	4621      	mov	r1, r4
 800d176:	4628      	mov	r0, r5
 800d178:	f000 f9d8 	bl	800d52c <_printf_common>
 800d17c:	3001      	adds	r0, #1
 800d17e:	f040 8090 	bne.w	800d2a2 <_printf_float+0x1e2>
 800d182:	f04f 30ff 	mov.w	r0, #4294967295
 800d186:	b00d      	add	sp, #52	; 0x34
 800d188:	ecbd 8b02 	vpop	{d8}
 800d18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d190:	4642      	mov	r2, r8
 800d192:	464b      	mov	r3, r9
 800d194:	4640      	mov	r0, r8
 800d196:	4649      	mov	r1, r9
 800d198:	f7f3 fcd0 	bl	8000b3c <__aeabi_dcmpun>
 800d19c:	b140      	cbz	r0, 800d1b0 <_printf_float+0xf0>
 800d19e:	464b      	mov	r3, r9
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bfbc      	itt	lt
 800d1a4:	232d      	movlt	r3, #45	; 0x2d
 800d1a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d1aa:	487f      	ldr	r0, [pc, #508]	; (800d3a8 <_printf_float+0x2e8>)
 800d1ac:	4b7f      	ldr	r3, [pc, #508]	; (800d3ac <_printf_float+0x2ec>)
 800d1ae:	e7d1      	b.n	800d154 <_printf_float+0x94>
 800d1b0:	6863      	ldr	r3, [r4, #4]
 800d1b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d1b6:	9206      	str	r2, [sp, #24]
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	d13f      	bne.n	800d23c <_printf_float+0x17c>
 800d1bc:	2306      	movs	r3, #6
 800d1be:	6063      	str	r3, [r4, #4]
 800d1c0:	9b05      	ldr	r3, [sp, #20]
 800d1c2:	6861      	ldr	r1, [r4, #4]
 800d1c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9303      	str	r3, [sp, #12]
 800d1cc:	ab0a      	add	r3, sp, #40	; 0x28
 800d1ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d1d2:	ab09      	add	r3, sp, #36	; 0x24
 800d1d4:	ec49 8b10 	vmov	d0, r8, r9
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	6022      	str	r2, [r4, #0]
 800d1dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f7ff fecd 	bl	800cf80 <__cvt>
 800d1e6:	9b06      	ldr	r3, [sp, #24]
 800d1e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1ea:	2b47      	cmp	r3, #71	; 0x47
 800d1ec:	4680      	mov	r8, r0
 800d1ee:	d108      	bne.n	800d202 <_printf_float+0x142>
 800d1f0:	1cc8      	adds	r0, r1, #3
 800d1f2:	db02      	blt.n	800d1fa <_printf_float+0x13a>
 800d1f4:	6863      	ldr	r3, [r4, #4]
 800d1f6:	4299      	cmp	r1, r3
 800d1f8:	dd41      	ble.n	800d27e <_printf_float+0x1be>
 800d1fa:	f1ab 0b02 	sub.w	fp, fp, #2
 800d1fe:	fa5f fb8b 	uxtb.w	fp, fp
 800d202:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d206:	d820      	bhi.n	800d24a <_printf_float+0x18a>
 800d208:	3901      	subs	r1, #1
 800d20a:	465a      	mov	r2, fp
 800d20c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d210:	9109      	str	r1, [sp, #36]	; 0x24
 800d212:	f7ff ff17 	bl	800d044 <__exponent>
 800d216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d218:	1813      	adds	r3, r2, r0
 800d21a:	2a01      	cmp	r2, #1
 800d21c:	4681      	mov	r9, r0
 800d21e:	6123      	str	r3, [r4, #16]
 800d220:	dc02      	bgt.n	800d228 <_printf_float+0x168>
 800d222:	6822      	ldr	r2, [r4, #0]
 800d224:	07d2      	lsls	r2, r2, #31
 800d226:	d501      	bpl.n	800d22c <_printf_float+0x16c>
 800d228:	3301      	adds	r3, #1
 800d22a:	6123      	str	r3, [r4, #16]
 800d22c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d230:	2b00      	cmp	r3, #0
 800d232:	d09c      	beq.n	800d16e <_printf_float+0xae>
 800d234:	232d      	movs	r3, #45	; 0x2d
 800d236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d23a:	e798      	b.n	800d16e <_printf_float+0xae>
 800d23c:	9a06      	ldr	r2, [sp, #24]
 800d23e:	2a47      	cmp	r2, #71	; 0x47
 800d240:	d1be      	bne.n	800d1c0 <_printf_float+0x100>
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1bc      	bne.n	800d1c0 <_printf_float+0x100>
 800d246:	2301      	movs	r3, #1
 800d248:	e7b9      	b.n	800d1be <_printf_float+0xfe>
 800d24a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d24e:	d118      	bne.n	800d282 <_printf_float+0x1c2>
 800d250:	2900      	cmp	r1, #0
 800d252:	6863      	ldr	r3, [r4, #4]
 800d254:	dd0b      	ble.n	800d26e <_printf_float+0x1ae>
 800d256:	6121      	str	r1, [r4, #16]
 800d258:	b913      	cbnz	r3, 800d260 <_printf_float+0x1a0>
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	07d0      	lsls	r0, r2, #31
 800d25e:	d502      	bpl.n	800d266 <_printf_float+0x1a6>
 800d260:	3301      	adds	r3, #1
 800d262:	440b      	add	r3, r1
 800d264:	6123      	str	r3, [r4, #16]
 800d266:	65a1      	str	r1, [r4, #88]	; 0x58
 800d268:	f04f 0900 	mov.w	r9, #0
 800d26c:	e7de      	b.n	800d22c <_printf_float+0x16c>
 800d26e:	b913      	cbnz	r3, 800d276 <_printf_float+0x1b6>
 800d270:	6822      	ldr	r2, [r4, #0]
 800d272:	07d2      	lsls	r2, r2, #31
 800d274:	d501      	bpl.n	800d27a <_printf_float+0x1ba>
 800d276:	3302      	adds	r3, #2
 800d278:	e7f4      	b.n	800d264 <_printf_float+0x1a4>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e7f2      	b.n	800d264 <_printf_float+0x1a4>
 800d27e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d284:	4299      	cmp	r1, r3
 800d286:	db05      	blt.n	800d294 <_printf_float+0x1d4>
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	6121      	str	r1, [r4, #16]
 800d28c:	07d8      	lsls	r0, r3, #31
 800d28e:	d5ea      	bpl.n	800d266 <_printf_float+0x1a6>
 800d290:	1c4b      	adds	r3, r1, #1
 800d292:	e7e7      	b.n	800d264 <_printf_float+0x1a4>
 800d294:	2900      	cmp	r1, #0
 800d296:	bfd4      	ite	le
 800d298:	f1c1 0202 	rsble	r2, r1, #2
 800d29c:	2201      	movgt	r2, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	e7e0      	b.n	800d264 <_printf_float+0x1a4>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	055a      	lsls	r2, r3, #21
 800d2a6:	d407      	bmi.n	800d2b8 <_printf_float+0x1f8>
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	4642      	mov	r2, r8
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b8      	blx	r7
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	d12c      	bne.n	800d310 <_printf_float+0x250>
 800d2b6:	e764      	b.n	800d182 <_printf_float+0xc2>
 800d2b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d2bc:	f240 80e0 	bls.w	800d480 <_printf_float+0x3c0>
 800d2c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f7f3 fc06 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d034      	beq.n	800d33a <_printf_float+0x27a>
 800d2d0:	4a37      	ldr	r2, [pc, #220]	; (800d3b0 <_printf_float+0x2f0>)
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	47b8      	blx	r7
 800d2da:	3001      	adds	r0, #1
 800d2dc:	f43f af51 	beq.w	800d182 <_printf_float+0xc2>
 800d2e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	db02      	blt.n	800d2ee <_printf_float+0x22e>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	07d8      	lsls	r0, r3, #31
 800d2ec:	d510      	bpl.n	800d310 <_printf_float+0x250>
 800d2ee:	ee18 3a10 	vmov	r3, s16
 800d2f2:	4652      	mov	r2, sl
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	47b8      	blx	r7
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	f43f af41 	beq.w	800d182 <_printf_float+0xc2>
 800d300:	f04f 0800 	mov.w	r8, #0
 800d304:	f104 091a 	add.w	r9, r4, #26
 800d308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d30a:	3b01      	subs	r3, #1
 800d30c:	4543      	cmp	r3, r8
 800d30e:	dc09      	bgt.n	800d324 <_printf_float+0x264>
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	079b      	lsls	r3, r3, #30
 800d314:	f100 8105 	bmi.w	800d522 <_printf_float+0x462>
 800d318:	68e0      	ldr	r0, [r4, #12]
 800d31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d31c:	4298      	cmp	r0, r3
 800d31e:	bfb8      	it	lt
 800d320:	4618      	movlt	r0, r3
 800d322:	e730      	b.n	800d186 <_printf_float+0xc6>
 800d324:	2301      	movs	r3, #1
 800d326:	464a      	mov	r2, r9
 800d328:	4631      	mov	r1, r6
 800d32a:	4628      	mov	r0, r5
 800d32c:	47b8      	blx	r7
 800d32e:	3001      	adds	r0, #1
 800d330:	f43f af27 	beq.w	800d182 <_printf_float+0xc2>
 800d334:	f108 0801 	add.w	r8, r8, #1
 800d338:	e7e6      	b.n	800d308 <_printf_float+0x248>
 800d33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc39      	bgt.n	800d3b4 <_printf_float+0x2f4>
 800d340:	4a1b      	ldr	r2, [pc, #108]	; (800d3b0 <_printf_float+0x2f0>)
 800d342:	2301      	movs	r3, #1
 800d344:	4631      	mov	r1, r6
 800d346:	4628      	mov	r0, r5
 800d348:	47b8      	blx	r7
 800d34a:	3001      	adds	r0, #1
 800d34c:	f43f af19 	beq.w	800d182 <_printf_float+0xc2>
 800d350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d354:	4313      	orrs	r3, r2
 800d356:	d102      	bne.n	800d35e <_printf_float+0x29e>
 800d358:	6823      	ldr	r3, [r4, #0]
 800d35a:	07d9      	lsls	r1, r3, #31
 800d35c:	d5d8      	bpl.n	800d310 <_printf_float+0x250>
 800d35e:	ee18 3a10 	vmov	r3, s16
 800d362:	4652      	mov	r2, sl
 800d364:	4631      	mov	r1, r6
 800d366:	4628      	mov	r0, r5
 800d368:	47b8      	blx	r7
 800d36a:	3001      	adds	r0, #1
 800d36c:	f43f af09 	beq.w	800d182 <_printf_float+0xc2>
 800d370:	f04f 0900 	mov.w	r9, #0
 800d374:	f104 0a1a 	add.w	sl, r4, #26
 800d378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d37a:	425b      	negs	r3, r3
 800d37c:	454b      	cmp	r3, r9
 800d37e:	dc01      	bgt.n	800d384 <_printf_float+0x2c4>
 800d380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d382:	e792      	b.n	800d2aa <_printf_float+0x1ea>
 800d384:	2301      	movs	r3, #1
 800d386:	4652      	mov	r2, sl
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b8      	blx	r7
 800d38e:	3001      	adds	r0, #1
 800d390:	f43f aef7 	beq.w	800d182 <_printf_float+0xc2>
 800d394:	f109 0901 	add.w	r9, r9, #1
 800d398:	e7ee      	b.n	800d378 <_printf_float+0x2b8>
 800d39a:	bf00      	nop
 800d39c:	7fefffff 	.word	0x7fefffff
 800d3a0:	0803d1a8 	.word	0x0803d1a8
 800d3a4:	0803d1ac 	.word	0x0803d1ac
 800d3a8:	0803d1b4 	.word	0x0803d1b4
 800d3ac:	0803d1b0 	.word	0x0803d1b0
 800d3b0:	0803d1b8 	.word	0x0803d1b8
 800d3b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	bfa8      	it	ge
 800d3bc:	461a      	movge	r2, r3
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	4691      	mov	r9, r2
 800d3c2:	dc37      	bgt.n	800d434 <_printf_float+0x374>
 800d3c4:	f04f 0b00 	mov.w	fp, #0
 800d3c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3cc:	f104 021a 	add.w	r2, r4, #26
 800d3d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3d2:	9305      	str	r3, [sp, #20]
 800d3d4:	eba3 0309 	sub.w	r3, r3, r9
 800d3d8:	455b      	cmp	r3, fp
 800d3da:	dc33      	bgt.n	800d444 <_printf_float+0x384>
 800d3dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	db3b      	blt.n	800d45c <_printf_float+0x39c>
 800d3e4:	6823      	ldr	r3, [r4, #0]
 800d3e6:	07da      	lsls	r2, r3, #31
 800d3e8:	d438      	bmi.n	800d45c <_printf_float+0x39c>
 800d3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ec:	9a05      	ldr	r2, [sp, #20]
 800d3ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3f0:	1a9a      	subs	r2, r3, r2
 800d3f2:	eba3 0901 	sub.w	r9, r3, r1
 800d3f6:	4591      	cmp	r9, r2
 800d3f8:	bfa8      	it	ge
 800d3fa:	4691      	movge	r9, r2
 800d3fc:	f1b9 0f00 	cmp.w	r9, #0
 800d400:	dc35      	bgt.n	800d46e <_printf_float+0x3ae>
 800d402:	f04f 0800 	mov.w	r8, #0
 800d406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d40a:	f104 0a1a 	add.w	sl, r4, #26
 800d40e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d412:	1a9b      	subs	r3, r3, r2
 800d414:	eba3 0309 	sub.w	r3, r3, r9
 800d418:	4543      	cmp	r3, r8
 800d41a:	f77f af79 	ble.w	800d310 <_printf_float+0x250>
 800d41e:	2301      	movs	r3, #1
 800d420:	4652      	mov	r2, sl
 800d422:	4631      	mov	r1, r6
 800d424:	4628      	mov	r0, r5
 800d426:	47b8      	blx	r7
 800d428:	3001      	adds	r0, #1
 800d42a:	f43f aeaa 	beq.w	800d182 <_printf_float+0xc2>
 800d42e:	f108 0801 	add.w	r8, r8, #1
 800d432:	e7ec      	b.n	800d40e <_printf_float+0x34e>
 800d434:	4613      	mov	r3, r2
 800d436:	4631      	mov	r1, r6
 800d438:	4642      	mov	r2, r8
 800d43a:	4628      	mov	r0, r5
 800d43c:	47b8      	blx	r7
 800d43e:	3001      	adds	r0, #1
 800d440:	d1c0      	bne.n	800d3c4 <_printf_float+0x304>
 800d442:	e69e      	b.n	800d182 <_printf_float+0xc2>
 800d444:	2301      	movs	r3, #1
 800d446:	4631      	mov	r1, r6
 800d448:	4628      	mov	r0, r5
 800d44a:	9205      	str	r2, [sp, #20]
 800d44c:	47b8      	blx	r7
 800d44e:	3001      	adds	r0, #1
 800d450:	f43f ae97 	beq.w	800d182 <_printf_float+0xc2>
 800d454:	9a05      	ldr	r2, [sp, #20]
 800d456:	f10b 0b01 	add.w	fp, fp, #1
 800d45a:	e7b9      	b.n	800d3d0 <_printf_float+0x310>
 800d45c:	ee18 3a10 	vmov	r3, s16
 800d460:	4652      	mov	r2, sl
 800d462:	4631      	mov	r1, r6
 800d464:	4628      	mov	r0, r5
 800d466:	47b8      	blx	r7
 800d468:	3001      	adds	r0, #1
 800d46a:	d1be      	bne.n	800d3ea <_printf_float+0x32a>
 800d46c:	e689      	b.n	800d182 <_printf_float+0xc2>
 800d46e:	9a05      	ldr	r2, [sp, #20]
 800d470:	464b      	mov	r3, r9
 800d472:	4442      	add	r2, r8
 800d474:	4631      	mov	r1, r6
 800d476:	4628      	mov	r0, r5
 800d478:	47b8      	blx	r7
 800d47a:	3001      	adds	r0, #1
 800d47c:	d1c1      	bne.n	800d402 <_printf_float+0x342>
 800d47e:	e680      	b.n	800d182 <_printf_float+0xc2>
 800d480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d482:	2a01      	cmp	r2, #1
 800d484:	dc01      	bgt.n	800d48a <_printf_float+0x3ca>
 800d486:	07db      	lsls	r3, r3, #31
 800d488:	d538      	bpl.n	800d4fc <_printf_float+0x43c>
 800d48a:	2301      	movs	r3, #1
 800d48c:	4642      	mov	r2, r8
 800d48e:	4631      	mov	r1, r6
 800d490:	4628      	mov	r0, r5
 800d492:	47b8      	blx	r7
 800d494:	3001      	adds	r0, #1
 800d496:	f43f ae74 	beq.w	800d182 <_printf_float+0xc2>
 800d49a:	ee18 3a10 	vmov	r3, s16
 800d49e:	4652      	mov	r2, sl
 800d4a0:	4631      	mov	r1, r6
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	47b8      	blx	r7
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	f43f ae6b 	beq.w	800d182 <_printf_float+0xc2>
 800d4ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f7f3 fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4b8:	b9d8      	cbnz	r0, 800d4f2 <_printf_float+0x432>
 800d4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4bc:	f108 0201 	add.w	r2, r8, #1
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	47b8      	blx	r7
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	d10e      	bne.n	800d4ea <_printf_float+0x42a>
 800d4cc:	e659      	b.n	800d182 <_printf_float+0xc2>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	47b8      	blx	r7
 800d4d8:	3001      	adds	r0, #1
 800d4da:	f43f ae52 	beq.w	800d182 <_printf_float+0xc2>
 800d4de:	f108 0801 	add.w	r8, r8, #1
 800d4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4543      	cmp	r3, r8
 800d4e8:	dcf1      	bgt.n	800d4ce <_printf_float+0x40e>
 800d4ea:	464b      	mov	r3, r9
 800d4ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d4f0:	e6dc      	b.n	800d2ac <_printf_float+0x1ec>
 800d4f2:	f04f 0800 	mov.w	r8, #0
 800d4f6:	f104 0a1a 	add.w	sl, r4, #26
 800d4fa:	e7f2      	b.n	800d4e2 <_printf_float+0x422>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	4642      	mov	r2, r8
 800d500:	e7df      	b.n	800d4c2 <_printf_float+0x402>
 800d502:	2301      	movs	r3, #1
 800d504:	464a      	mov	r2, r9
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	47b8      	blx	r7
 800d50c:	3001      	adds	r0, #1
 800d50e:	f43f ae38 	beq.w	800d182 <_printf_float+0xc2>
 800d512:	f108 0801 	add.w	r8, r8, #1
 800d516:	68e3      	ldr	r3, [r4, #12]
 800d518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d51a:	1a5b      	subs	r3, r3, r1
 800d51c:	4543      	cmp	r3, r8
 800d51e:	dcf0      	bgt.n	800d502 <_printf_float+0x442>
 800d520:	e6fa      	b.n	800d318 <_printf_float+0x258>
 800d522:	f04f 0800 	mov.w	r8, #0
 800d526:	f104 0919 	add.w	r9, r4, #25
 800d52a:	e7f4      	b.n	800d516 <_printf_float+0x456>

0800d52c <_printf_common>:
 800d52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d530:	4616      	mov	r6, r2
 800d532:	4699      	mov	r9, r3
 800d534:	688a      	ldr	r2, [r1, #8]
 800d536:	690b      	ldr	r3, [r1, #16]
 800d538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d53c:	4293      	cmp	r3, r2
 800d53e:	bfb8      	it	lt
 800d540:	4613      	movlt	r3, r2
 800d542:	6033      	str	r3, [r6, #0]
 800d544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d548:	4607      	mov	r7, r0
 800d54a:	460c      	mov	r4, r1
 800d54c:	b10a      	cbz	r2, 800d552 <_printf_common+0x26>
 800d54e:	3301      	adds	r3, #1
 800d550:	6033      	str	r3, [r6, #0]
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	0699      	lsls	r1, r3, #26
 800d556:	bf42      	ittt	mi
 800d558:	6833      	ldrmi	r3, [r6, #0]
 800d55a:	3302      	addmi	r3, #2
 800d55c:	6033      	strmi	r3, [r6, #0]
 800d55e:	6825      	ldr	r5, [r4, #0]
 800d560:	f015 0506 	ands.w	r5, r5, #6
 800d564:	d106      	bne.n	800d574 <_printf_common+0x48>
 800d566:	f104 0a19 	add.w	sl, r4, #25
 800d56a:	68e3      	ldr	r3, [r4, #12]
 800d56c:	6832      	ldr	r2, [r6, #0]
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	42ab      	cmp	r3, r5
 800d572:	dc26      	bgt.n	800d5c2 <_printf_common+0x96>
 800d574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d578:	1e13      	subs	r3, r2, #0
 800d57a:	6822      	ldr	r2, [r4, #0]
 800d57c:	bf18      	it	ne
 800d57e:	2301      	movne	r3, #1
 800d580:	0692      	lsls	r2, r2, #26
 800d582:	d42b      	bmi.n	800d5dc <_printf_common+0xb0>
 800d584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d588:	4649      	mov	r1, r9
 800d58a:	4638      	mov	r0, r7
 800d58c:	47c0      	blx	r8
 800d58e:	3001      	adds	r0, #1
 800d590:	d01e      	beq.n	800d5d0 <_printf_common+0xa4>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	68e5      	ldr	r5, [r4, #12]
 800d596:	6832      	ldr	r2, [r6, #0]
 800d598:	f003 0306 	and.w	r3, r3, #6
 800d59c:	2b04      	cmp	r3, #4
 800d59e:	bf08      	it	eq
 800d5a0:	1aad      	subeq	r5, r5, r2
 800d5a2:	68a3      	ldr	r3, [r4, #8]
 800d5a4:	6922      	ldr	r2, [r4, #16]
 800d5a6:	bf0c      	ite	eq
 800d5a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5ac:	2500      	movne	r5, #0
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	bfc4      	itt	gt
 800d5b2:	1a9b      	subgt	r3, r3, r2
 800d5b4:	18ed      	addgt	r5, r5, r3
 800d5b6:	2600      	movs	r6, #0
 800d5b8:	341a      	adds	r4, #26
 800d5ba:	42b5      	cmp	r5, r6
 800d5bc:	d11a      	bne.n	800d5f4 <_printf_common+0xc8>
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e008      	b.n	800d5d4 <_printf_common+0xa8>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	4652      	mov	r2, sl
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	47c0      	blx	r8
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	d103      	bne.n	800d5d8 <_printf_common+0xac>
 800d5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d8:	3501      	adds	r5, #1
 800d5da:	e7c6      	b.n	800d56a <_printf_common+0x3e>
 800d5dc:	18e1      	adds	r1, r4, r3
 800d5de:	1c5a      	adds	r2, r3, #1
 800d5e0:	2030      	movs	r0, #48	; 0x30
 800d5e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5e6:	4422      	add	r2, r4
 800d5e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5f0:	3302      	adds	r3, #2
 800d5f2:	e7c7      	b.n	800d584 <_printf_common+0x58>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	47c0      	blx	r8
 800d5fe:	3001      	adds	r0, #1
 800d600:	d0e6      	beq.n	800d5d0 <_printf_common+0xa4>
 800d602:	3601      	adds	r6, #1
 800d604:	e7d9      	b.n	800d5ba <_printf_common+0x8e>
	...

0800d608 <_printf_i>:
 800d608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d60c:	7e0f      	ldrb	r7, [r1, #24]
 800d60e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d610:	2f78      	cmp	r7, #120	; 0x78
 800d612:	4691      	mov	r9, r2
 800d614:	4680      	mov	r8, r0
 800d616:	460c      	mov	r4, r1
 800d618:	469a      	mov	sl, r3
 800d61a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d61e:	d807      	bhi.n	800d630 <_printf_i+0x28>
 800d620:	2f62      	cmp	r7, #98	; 0x62
 800d622:	d80a      	bhi.n	800d63a <_printf_i+0x32>
 800d624:	2f00      	cmp	r7, #0
 800d626:	f000 80d8 	beq.w	800d7da <_printf_i+0x1d2>
 800d62a:	2f58      	cmp	r7, #88	; 0x58
 800d62c:	f000 80a3 	beq.w	800d776 <_printf_i+0x16e>
 800d630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d638:	e03a      	b.n	800d6b0 <_printf_i+0xa8>
 800d63a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d63e:	2b15      	cmp	r3, #21
 800d640:	d8f6      	bhi.n	800d630 <_printf_i+0x28>
 800d642:	a101      	add	r1, pc, #4	; (adr r1, 800d648 <_printf_i+0x40>)
 800d644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d648:	0800d6a1 	.word	0x0800d6a1
 800d64c:	0800d6b5 	.word	0x0800d6b5
 800d650:	0800d631 	.word	0x0800d631
 800d654:	0800d631 	.word	0x0800d631
 800d658:	0800d631 	.word	0x0800d631
 800d65c:	0800d631 	.word	0x0800d631
 800d660:	0800d6b5 	.word	0x0800d6b5
 800d664:	0800d631 	.word	0x0800d631
 800d668:	0800d631 	.word	0x0800d631
 800d66c:	0800d631 	.word	0x0800d631
 800d670:	0800d631 	.word	0x0800d631
 800d674:	0800d7c1 	.word	0x0800d7c1
 800d678:	0800d6e5 	.word	0x0800d6e5
 800d67c:	0800d7a3 	.word	0x0800d7a3
 800d680:	0800d631 	.word	0x0800d631
 800d684:	0800d631 	.word	0x0800d631
 800d688:	0800d7e3 	.word	0x0800d7e3
 800d68c:	0800d631 	.word	0x0800d631
 800d690:	0800d6e5 	.word	0x0800d6e5
 800d694:	0800d631 	.word	0x0800d631
 800d698:	0800d631 	.word	0x0800d631
 800d69c:	0800d7ab 	.word	0x0800d7ab
 800d6a0:	682b      	ldr	r3, [r5, #0]
 800d6a2:	1d1a      	adds	r2, r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	602a      	str	r2, [r5, #0]
 800d6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e0a3      	b.n	800d7fc <_printf_i+0x1f4>
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	6829      	ldr	r1, [r5, #0]
 800d6b8:	0606      	lsls	r6, r0, #24
 800d6ba:	f101 0304 	add.w	r3, r1, #4
 800d6be:	d50a      	bpl.n	800d6d6 <_printf_i+0xce>
 800d6c0:	680e      	ldr	r6, [r1, #0]
 800d6c2:	602b      	str	r3, [r5, #0]
 800d6c4:	2e00      	cmp	r6, #0
 800d6c6:	da03      	bge.n	800d6d0 <_printf_i+0xc8>
 800d6c8:	232d      	movs	r3, #45	; 0x2d
 800d6ca:	4276      	negs	r6, r6
 800d6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6d0:	485e      	ldr	r0, [pc, #376]	; (800d84c <_printf_i+0x244>)
 800d6d2:	230a      	movs	r3, #10
 800d6d4:	e019      	b.n	800d70a <_printf_i+0x102>
 800d6d6:	680e      	ldr	r6, [r1, #0]
 800d6d8:	602b      	str	r3, [r5, #0]
 800d6da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6de:	bf18      	it	ne
 800d6e0:	b236      	sxthne	r6, r6
 800d6e2:	e7ef      	b.n	800d6c4 <_printf_i+0xbc>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	1d19      	adds	r1, r3, #4
 800d6ea:	6029      	str	r1, [r5, #0]
 800d6ec:	0601      	lsls	r1, r0, #24
 800d6ee:	d501      	bpl.n	800d6f4 <_printf_i+0xec>
 800d6f0:	681e      	ldr	r6, [r3, #0]
 800d6f2:	e002      	b.n	800d6fa <_printf_i+0xf2>
 800d6f4:	0646      	lsls	r6, r0, #25
 800d6f6:	d5fb      	bpl.n	800d6f0 <_printf_i+0xe8>
 800d6f8:	881e      	ldrh	r6, [r3, #0]
 800d6fa:	4854      	ldr	r0, [pc, #336]	; (800d84c <_printf_i+0x244>)
 800d6fc:	2f6f      	cmp	r7, #111	; 0x6f
 800d6fe:	bf0c      	ite	eq
 800d700:	2308      	moveq	r3, #8
 800d702:	230a      	movne	r3, #10
 800d704:	2100      	movs	r1, #0
 800d706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d70a:	6865      	ldr	r5, [r4, #4]
 800d70c:	60a5      	str	r5, [r4, #8]
 800d70e:	2d00      	cmp	r5, #0
 800d710:	bfa2      	ittt	ge
 800d712:	6821      	ldrge	r1, [r4, #0]
 800d714:	f021 0104 	bicge.w	r1, r1, #4
 800d718:	6021      	strge	r1, [r4, #0]
 800d71a:	b90e      	cbnz	r6, 800d720 <_printf_i+0x118>
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	d04d      	beq.n	800d7bc <_printf_i+0x1b4>
 800d720:	4615      	mov	r5, r2
 800d722:	fbb6 f1f3 	udiv	r1, r6, r3
 800d726:	fb03 6711 	mls	r7, r3, r1, r6
 800d72a:	5dc7      	ldrb	r7, [r0, r7]
 800d72c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d730:	4637      	mov	r7, r6
 800d732:	42bb      	cmp	r3, r7
 800d734:	460e      	mov	r6, r1
 800d736:	d9f4      	bls.n	800d722 <_printf_i+0x11a>
 800d738:	2b08      	cmp	r3, #8
 800d73a:	d10b      	bne.n	800d754 <_printf_i+0x14c>
 800d73c:	6823      	ldr	r3, [r4, #0]
 800d73e:	07de      	lsls	r6, r3, #31
 800d740:	d508      	bpl.n	800d754 <_printf_i+0x14c>
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	6861      	ldr	r1, [r4, #4]
 800d746:	4299      	cmp	r1, r3
 800d748:	bfde      	ittt	le
 800d74a:	2330      	movle	r3, #48	; 0x30
 800d74c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d750:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d754:	1b52      	subs	r2, r2, r5
 800d756:	6122      	str	r2, [r4, #16]
 800d758:	f8cd a000 	str.w	sl, [sp]
 800d75c:	464b      	mov	r3, r9
 800d75e:	aa03      	add	r2, sp, #12
 800d760:	4621      	mov	r1, r4
 800d762:	4640      	mov	r0, r8
 800d764:	f7ff fee2 	bl	800d52c <_printf_common>
 800d768:	3001      	adds	r0, #1
 800d76a:	d14c      	bne.n	800d806 <_printf_i+0x1fe>
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295
 800d770:	b004      	add	sp, #16
 800d772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d776:	4835      	ldr	r0, [pc, #212]	; (800d84c <_printf_i+0x244>)
 800d778:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d77c:	6829      	ldr	r1, [r5, #0]
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	f851 6b04 	ldr.w	r6, [r1], #4
 800d784:	6029      	str	r1, [r5, #0]
 800d786:	061d      	lsls	r5, r3, #24
 800d788:	d514      	bpl.n	800d7b4 <_printf_i+0x1ac>
 800d78a:	07df      	lsls	r7, r3, #31
 800d78c:	bf44      	itt	mi
 800d78e:	f043 0320 	orrmi.w	r3, r3, #32
 800d792:	6023      	strmi	r3, [r4, #0]
 800d794:	b91e      	cbnz	r6, 800d79e <_printf_i+0x196>
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	f023 0320 	bic.w	r3, r3, #32
 800d79c:	6023      	str	r3, [r4, #0]
 800d79e:	2310      	movs	r3, #16
 800d7a0:	e7b0      	b.n	800d704 <_printf_i+0xfc>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	f043 0320 	orr.w	r3, r3, #32
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	2378      	movs	r3, #120	; 0x78
 800d7ac:	4828      	ldr	r0, [pc, #160]	; (800d850 <_printf_i+0x248>)
 800d7ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7b2:	e7e3      	b.n	800d77c <_printf_i+0x174>
 800d7b4:	0659      	lsls	r1, r3, #25
 800d7b6:	bf48      	it	mi
 800d7b8:	b2b6      	uxthmi	r6, r6
 800d7ba:	e7e6      	b.n	800d78a <_printf_i+0x182>
 800d7bc:	4615      	mov	r5, r2
 800d7be:	e7bb      	b.n	800d738 <_printf_i+0x130>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	6826      	ldr	r6, [r4, #0]
 800d7c4:	6961      	ldr	r1, [r4, #20]
 800d7c6:	1d18      	adds	r0, r3, #4
 800d7c8:	6028      	str	r0, [r5, #0]
 800d7ca:	0635      	lsls	r5, r6, #24
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	d501      	bpl.n	800d7d4 <_printf_i+0x1cc>
 800d7d0:	6019      	str	r1, [r3, #0]
 800d7d2:	e002      	b.n	800d7da <_printf_i+0x1d2>
 800d7d4:	0670      	lsls	r0, r6, #25
 800d7d6:	d5fb      	bpl.n	800d7d0 <_printf_i+0x1c8>
 800d7d8:	8019      	strh	r1, [r3, #0]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	6123      	str	r3, [r4, #16]
 800d7de:	4615      	mov	r5, r2
 800d7e0:	e7ba      	b.n	800d758 <_printf_i+0x150>
 800d7e2:	682b      	ldr	r3, [r5, #0]
 800d7e4:	1d1a      	adds	r2, r3, #4
 800d7e6:	602a      	str	r2, [r5, #0]
 800d7e8:	681d      	ldr	r5, [r3, #0]
 800d7ea:	6862      	ldr	r2, [r4, #4]
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f7f2 fcfe 	bl	80001f0 <memchr>
 800d7f4:	b108      	cbz	r0, 800d7fa <_printf_i+0x1f2>
 800d7f6:	1b40      	subs	r0, r0, r5
 800d7f8:	6060      	str	r0, [r4, #4]
 800d7fa:	6863      	ldr	r3, [r4, #4]
 800d7fc:	6123      	str	r3, [r4, #16]
 800d7fe:	2300      	movs	r3, #0
 800d800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d804:	e7a8      	b.n	800d758 <_printf_i+0x150>
 800d806:	6923      	ldr	r3, [r4, #16]
 800d808:	462a      	mov	r2, r5
 800d80a:	4649      	mov	r1, r9
 800d80c:	4640      	mov	r0, r8
 800d80e:	47d0      	blx	sl
 800d810:	3001      	adds	r0, #1
 800d812:	d0ab      	beq.n	800d76c <_printf_i+0x164>
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	079b      	lsls	r3, r3, #30
 800d818:	d413      	bmi.n	800d842 <_printf_i+0x23a>
 800d81a:	68e0      	ldr	r0, [r4, #12]
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	4298      	cmp	r0, r3
 800d820:	bfb8      	it	lt
 800d822:	4618      	movlt	r0, r3
 800d824:	e7a4      	b.n	800d770 <_printf_i+0x168>
 800d826:	2301      	movs	r3, #1
 800d828:	4632      	mov	r2, r6
 800d82a:	4649      	mov	r1, r9
 800d82c:	4640      	mov	r0, r8
 800d82e:	47d0      	blx	sl
 800d830:	3001      	adds	r0, #1
 800d832:	d09b      	beq.n	800d76c <_printf_i+0x164>
 800d834:	3501      	adds	r5, #1
 800d836:	68e3      	ldr	r3, [r4, #12]
 800d838:	9903      	ldr	r1, [sp, #12]
 800d83a:	1a5b      	subs	r3, r3, r1
 800d83c:	42ab      	cmp	r3, r5
 800d83e:	dcf2      	bgt.n	800d826 <_printf_i+0x21e>
 800d840:	e7eb      	b.n	800d81a <_printf_i+0x212>
 800d842:	2500      	movs	r5, #0
 800d844:	f104 0619 	add.w	r6, r4, #25
 800d848:	e7f5      	b.n	800d836 <_printf_i+0x22e>
 800d84a:	bf00      	nop
 800d84c:	0803d1ba 	.word	0x0803d1ba
 800d850:	0803d1cb 	.word	0x0803d1cb

0800d854 <siprintf>:
 800d854:	b40e      	push	{r1, r2, r3}
 800d856:	b500      	push	{lr}
 800d858:	b09c      	sub	sp, #112	; 0x70
 800d85a:	ab1d      	add	r3, sp, #116	; 0x74
 800d85c:	9002      	str	r0, [sp, #8]
 800d85e:	9006      	str	r0, [sp, #24]
 800d860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d864:	4809      	ldr	r0, [pc, #36]	; (800d88c <siprintf+0x38>)
 800d866:	9107      	str	r1, [sp, #28]
 800d868:	9104      	str	r1, [sp, #16]
 800d86a:	4909      	ldr	r1, [pc, #36]	; (800d890 <siprintf+0x3c>)
 800d86c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d870:	9105      	str	r1, [sp, #20]
 800d872:	6800      	ldr	r0, [r0, #0]
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	a902      	add	r1, sp, #8
 800d878:	f001 fb88 	bl	800ef8c <_svfiprintf_r>
 800d87c:	9b02      	ldr	r3, [sp, #8]
 800d87e:	2200      	movs	r2, #0
 800d880:	701a      	strb	r2, [r3, #0]
 800d882:	b01c      	add	sp, #112	; 0x70
 800d884:	f85d eb04 	ldr.w	lr, [sp], #4
 800d888:	b003      	add	sp, #12
 800d88a:	4770      	bx	lr
 800d88c:	20000250 	.word	0x20000250
 800d890:	ffff0208 	.word	0xffff0208

0800d894 <strncat>:
 800d894:	b530      	push	{r4, r5, lr}
 800d896:	4604      	mov	r4, r0
 800d898:	7825      	ldrb	r5, [r4, #0]
 800d89a:	4623      	mov	r3, r4
 800d89c:	3401      	adds	r4, #1
 800d89e:	2d00      	cmp	r5, #0
 800d8a0:	d1fa      	bne.n	800d898 <strncat+0x4>
 800d8a2:	3a01      	subs	r2, #1
 800d8a4:	d304      	bcc.n	800d8b0 <strncat+0x1c>
 800d8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8aa:	f803 4b01 	strb.w	r4, [r3], #1
 800d8ae:	b904      	cbnz	r4, 800d8b2 <strncat+0x1e>
 800d8b0:	bd30      	pop	{r4, r5, pc}
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	d1f5      	bne.n	800d8a2 <strncat+0xe>
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	e7f3      	b.n	800d8a2 <strncat+0xe>

0800d8ba <quorem>:
 800d8ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8be:	6903      	ldr	r3, [r0, #16]
 800d8c0:	690c      	ldr	r4, [r1, #16]
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	f2c0 8081 	blt.w	800d9cc <quorem+0x112>
 800d8ca:	3c01      	subs	r4, #1
 800d8cc:	f101 0814 	add.w	r8, r1, #20
 800d8d0:	f100 0514 	add.w	r5, r0, #20
 800d8d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8f2:	d331      	bcc.n	800d958 <quorem+0x9e>
 800d8f4:	f04f 0e00 	mov.w	lr, #0
 800d8f8:	4640      	mov	r0, r8
 800d8fa:	46ac      	mov	ip, r5
 800d8fc:	46f2      	mov	sl, lr
 800d8fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800d902:	b293      	uxth	r3, r2
 800d904:	fb06 e303 	mla	r3, r6, r3, lr
 800d908:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	ebaa 0303 	sub.w	r3, sl, r3
 800d912:	f8dc a000 	ldr.w	sl, [ip]
 800d916:	0c12      	lsrs	r2, r2, #16
 800d918:	fa13 f38a 	uxtah	r3, r3, sl
 800d91c:	fb06 e202 	mla	r2, r6, r2, lr
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	9b00      	ldr	r3, [sp, #0]
 800d924:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d928:	b292      	uxth	r2, r2
 800d92a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d92e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d932:	f8bd 3000 	ldrh.w	r3, [sp]
 800d936:	4581      	cmp	r9, r0
 800d938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d93c:	f84c 3b04 	str.w	r3, [ip], #4
 800d940:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d944:	d2db      	bcs.n	800d8fe <quorem+0x44>
 800d946:	f855 300b 	ldr.w	r3, [r5, fp]
 800d94a:	b92b      	cbnz	r3, 800d958 <quorem+0x9e>
 800d94c:	9b01      	ldr	r3, [sp, #4]
 800d94e:	3b04      	subs	r3, #4
 800d950:	429d      	cmp	r5, r3
 800d952:	461a      	mov	r2, r3
 800d954:	d32e      	bcc.n	800d9b4 <quorem+0xfa>
 800d956:	613c      	str	r4, [r7, #16]
 800d958:	4638      	mov	r0, r7
 800d95a:	f001 f8c3 	bl	800eae4 <__mcmp>
 800d95e:	2800      	cmp	r0, #0
 800d960:	db24      	blt.n	800d9ac <quorem+0xf2>
 800d962:	3601      	adds	r6, #1
 800d964:	4628      	mov	r0, r5
 800d966:	f04f 0c00 	mov.w	ip, #0
 800d96a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d96e:	f8d0 e000 	ldr.w	lr, [r0]
 800d972:	b293      	uxth	r3, r2
 800d974:	ebac 0303 	sub.w	r3, ip, r3
 800d978:	0c12      	lsrs	r2, r2, #16
 800d97a:	fa13 f38e 	uxtah	r3, r3, lr
 800d97e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d982:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d986:	b29b      	uxth	r3, r3
 800d988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d98c:	45c1      	cmp	r9, r8
 800d98e:	f840 3b04 	str.w	r3, [r0], #4
 800d992:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d996:	d2e8      	bcs.n	800d96a <quorem+0xb0>
 800d998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d99c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9a0:	b922      	cbnz	r2, 800d9ac <quorem+0xf2>
 800d9a2:	3b04      	subs	r3, #4
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	d30a      	bcc.n	800d9c0 <quorem+0x106>
 800d9aa:	613c      	str	r4, [r7, #16]
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	b003      	add	sp, #12
 800d9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b4:	6812      	ldr	r2, [r2, #0]
 800d9b6:	3b04      	subs	r3, #4
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	d1cc      	bne.n	800d956 <quorem+0x9c>
 800d9bc:	3c01      	subs	r4, #1
 800d9be:	e7c7      	b.n	800d950 <quorem+0x96>
 800d9c0:	6812      	ldr	r2, [r2, #0]
 800d9c2:	3b04      	subs	r3, #4
 800d9c4:	2a00      	cmp	r2, #0
 800d9c6:	d1f0      	bne.n	800d9aa <quorem+0xf0>
 800d9c8:	3c01      	subs	r4, #1
 800d9ca:	e7eb      	b.n	800d9a4 <quorem+0xea>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7ee      	b.n	800d9ae <quorem+0xf4>

0800d9d0 <_dtoa_r>:
 800d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	ed2d 8b04 	vpush	{d8-d9}
 800d9d8:	ec57 6b10 	vmov	r6, r7, d0
 800d9dc:	b093      	sub	sp, #76	; 0x4c
 800d9de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9e4:	9106      	str	r1, [sp, #24]
 800d9e6:	ee10 aa10 	vmov	sl, s0
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d9f0:	46bb      	mov	fp, r7
 800d9f2:	b975      	cbnz	r5, 800da12 <_dtoa_r+0x42>
 800d9f4:	2010      	movs	r0, #16
 800d9f6:	f000 fddd 	bl	800e5b4 <malloc>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	6260      	str	r0, [r4, #36]	; 0x24
 800d9fe:	b920      	cbnz	r0, 800da0a <_dtoa_r+0x3a>
 800da00:	4ba7      	ldr	r3, [pc, #668]	; (800dca0 <_dtoa_r+0x2d0>)
 800da02:	21ea      	movs	r1, #234	; 0xea
 800da04:	48a7      	ldr	r0, [pc, #668]	; (800dca4 <_dtoa_r+0x2d4>)
 800da06:	f001 fbd1 	bl	800f1ac <__assert_func>
 800da0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da0e:	6005      	str	r5, [r0, #0]
 800da10:	60c5      	str	r5, [r0, #12]
 800da12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da14:	6819      	ldr	r1, [r3, #0]
 800da16:	b151      	cbz	r1, 800da2e <_dtoa_r+0x5e>
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	604a      	str	r2, [r1, #4]
 800da1c:	2301      	movs	r3, #1
 800da1e:	4093      	lsls	r3, r2
 800da20:	608b      	str	r3, [r1, #8]
 800da22:	4620      	mov	r0, r4
 800da24:	f000 fe1c 	bl	800e660 <_Bfree>
 800da28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da2a:	2200      	movs	r2, #0
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	1e3b      	subs	r3, r7, #0
 800da30:	bfaa      	itet	ge
 800da32:	2300      	movge	r3, #0
 800da34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800da38:	f8c8 3000 	strge.w	r3, [r8]
 800da3c:	4b9a      	ldr	r3, [pc, #616]	; (800dca8 <_dtoa_r+0x2d8>)
 800da3e:	bfbc      	itt	lt
 800da40:	2201      	movlt	r2, #1
 800da42:	f8c8 2000 	strlt.w	r2, [r8]
 800da46:	ea33 030b 	bics.w	r3, r3, fp
 800da4a:	d11b      	bne.n	800da84 <_dtoa_r+0xb4>
 800da4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800da52:	6013      	str	r3, [r2, #0]
 800da54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da58:	4333      	orrs	r3, r6
 800da5a:	f000 8592 	beq.w	800e582 <_dtoa_r+0xbb2>
 800da5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da60:	b963      	cbnz	r3, 800da7c <_dtoa_r+0xac>
 800da62:	4b92      	ldr	r3, [pc, #584]	; (800dcac <_dtoa_r+0x2dc>)
 800da64:	e022      	b.n	800daac <_dtoa_r+0xdc>
 800da66:	4b92      	ldr	r3, [pc, #584]	; (800dcb0 <_dtoa_r+0x2e0>)
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	3308      	adds	r3, #8
 800da6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	9801      	ldr	r0, [sp, #4]
 800da72:	b013      	add	sp, #76	; 0x4c
 800da74:	ecbd 8b04 	vpop	{d8-d9}
 800da78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7c:	4b8b      	ldr	r3, [pc, #556]	; (800dcac <_dtoa_r+0x2dc>)
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	3303      	adds	r3, #3
 800da82:	e7f3      	b.n	800da6c <_dtoa_r+0x9c>
 800da84:	2200      	movs	r2, #0
 800da86:	2300      	movs	r3, #0
 800da88:	4650      	mov	r0, sl
 800da8a:	4659      	mov	r1, fp
 800da8c:	f7f3 f824 	bl	8000ad8 <__aeabi_dcmpeq>
 800da90:	ec4b ab19 	vmov	d9, sl, fp
 800da94:	4680      	mov	r8, r0
 800da96:	b158      	cbz	r0, 800dab0 <_dtoa_r+0xe0>
 800da98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da9a:	2301      	movs	r3, #1
 800da9c:	6013      	str	r3, [r2, #0]
 800da9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 856b 	beq.w	800e57c <_dtoa_r+0xbac>
 800daa6:	4883      	ldr	r0, [pc, #524]	; (800dcb4 <_dtoa_r+0x2e4>)
 800daa8:	6018      	str	r0, [r3, #0]
 800daaa:	1e43      	subs	r3, r0, #1
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	e7df      	b.n	800da70 <_dtoa_r+0xa0>
 800dab0:	ec4b ab10 	vmov	d0, sl, fp
 800dab4:	aa10      	add	r2, sp, #64	; 0x40
 800dab6:	a911      	add	r1, sp, #68	; 0x44
 800dab8:	4620      	mov	r0, r4
 800daba:	f001 f8b9 	bl	800ec30 <__d2b>
 800dabe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dac2:	ee08 0a10 	vmov	s16, r0
 800dac6:	2d00      	cmp	r5, #0
 800dac8:	f000 8084 	beq.w	800dbd4 <_dtoa_r+0x204>
 800dacc:	ee19 3a90 	vmov	r3, s19
 800dad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dad4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dad8:	4656      	mov	r6, sl
 800dada:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dae2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dae6:	4b74      	ldr	r3, [pc, #464]	; (800dcb8 <_dtoa_r+0x2e8>)
 800dae8:	2200      	movs	r2, #0
 800daea:	4630      	mov	r0, r6
 800daec:	4639      	mov	r1, r7
 800daee:	f7f2 fbd3 	bl	8000298 <__aeabi_dsub>
 800daf2:	a365      	add	r3, pc, #404	; (adr r3, 800dc88 <_dtoa_r+0x2b8>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7f2 fd86 	bl	8000608 <__aeabi_dmul>
 800dafc:	a364      	add	r3, pc, #400	; (adr r3, 800dc90 <_dtoa_r+0x2c0>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	f7f2 fbcb 	bl	800029c <__adddf3>
 800db06:	4606      	mov	r6, r0
 800db08:	4628      	mov	r0, r5
 800db0a:	460f      	mov	r7, r1
 800db0c:	f7f2 fd12 	bl	8000534 <__aeabi_i2d>
 800db10:	a361      	add	r3, pc, #388	; (adr r3, 800dc98 <_dtoa_r+0x2c8>)
 800db12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db16:	f7f2 fd77 	bl	8000608 <__aeabi_dmul>
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4630      	mov	r0, r6
 800db20:	4639      	mov	r1, r7
 800db22:	f7f2 fbbb 	bl	800029c <__adddf3>
 800db26:	4606      	mov	r6, r0
 800db28:	460f      	mov	r7, r1
 800db2a:	f7f3 f81d 	bl	8000b68 <__aeabi_d2iz>
 800db2e:	2200      	movs	r2, #0
 800db30:	9000      	str	r0, [sp, #0]
 800db32:	2300      	movs	r3, #0
 800db34:	4630      	mov	r0, r6
 800db36:	4639      	mov	r1, r7
 800db38:	f7f2 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800db3c:	b150      	cbz	r0, 800db54 <_dtoa_r+0x184>
 800db3e:	9800      	ldr	r0, [sp, #0]
 800db40:	f7f2 fcf8 	bl	8000534 <__aeabi_i2d>
 800db44:	4632      	mov	r2, r6
 800db46:	463b      	mov	r3, r7
 800db48:	f7f2 ffc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800db4c:	b910      	cbnz	r0, 800db54 <_dtoa_r+0x184>
 800db4e:	9b00      	ldr	r3, [sp, #0]
 800db50:	3b01      	subs	r3, #1
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	9b00      	ldr	r3, [sp, #0]
 800db56:	2b16      	cmp	r3, #22
 800db58:	d85a      	bhi.n	800dc10 <_dtoa_r+0x240>
 800db5a:	9a00      	ldr	r2, [sp, #0]
 800db5c:	4b57      	ldr	r3, [pc, #348]	; (800dcbc <_dtoa_r+0x2ec>)
 800db5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	ec51 0b19 	vmov	r0, r1, d9
 800db6a:	f7f2 ffbf 	bl	8000aec <__aeabi_dcmplt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d050      	beq.n	800dc14 <_dtoa_r+0x244>
 800db72:	9b00      	ldr	r3, [sp, #0]
 800db74:	3b01      	subs	r3, #1
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	2300      	movs	r3, #0
 800db7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db7e:	1b5d      	subs	r5, r3, r5
 800db80:	1e6b      	subs	r3, r5, #1
 800db82:	9305      	str	r3, [sp, #20]
 800db84:	bf45      	ittet	mi
 800db86:	f1c5 0301 	rsbmi	r3, r5, #1
 800db8a:	9304      	strmi	r3, [sp, #16]
 800db8c:	2300      	movpl	r3, #0
 800db8e:	2300      	movmi	r3, #0
 800db90:	bf4c      	ite	mi
 800db92:	9305      	strmi	r3, [sp, #20]
 800db94:	9304      	strpl	r3, [sp, #16]
 800db96:	9b00      	ldr	r3, [sp, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	db3d      	blt.n	800dc18 <_dtoa_r+0x248>
 800db9c:	9b05      	ldr	r3, [sp, #20]
 800db9e:	9a00      	ldr	r2, [sp, #0]
 800dba0:	920a      	str	r2, [sp, #40]	; 0x28
 800dba2:	4413      	add	r3, r2
 800dba4:	9305      	str	r3, [sp, #20]
 800dba6:	2300      	movs	r3, #0
 800dba8:	9307      	str	r3, [sp, #28]
 800dbaa:	9b06      	ldr	r3, [sp, #24]
 800dbac:	2b09      	cmp	r3, #9
 800dbae:	f200 8089 	bhi.w	800dcc4 <_dtoa_r+0x2f4>
 800dbb2:	2b05      	cmp	r3, #5
 800dbb4:	bfc4      	itt	gt
 800dbb6:	3b04      	subgt	r3, #4
 800dbb8:	9306      	strgt	r3, [sp, #24]
 800dbba:	9b06      	ldr	r3, [sp, #24]
 800dbbc:	f1a3 0302 	sub.w	r3, r3, #2
 800dbc0:	bfcc      	ite	gt
 800dbc2:	2500      	movgt	r5, #0
 800dbc4:	2501      	movle	r5, #1
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	f200 8087 	bhi.w	800dcda <_dtoa_r+0x30a>
 800dbcc:	e8df f003 	tbb	[pc, r3]
 800dbd0:	59383a2d 	.word	0x59383a2d
 800dbd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dbd8:	441d      	add	r5, r3
 800dbda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dbde:	2b20      	cmp	r3, #32
 800dbe0:	bfc1      	itttt	gt
 800dbe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dbea:	fa0b f303 	lslgt.w	r3, fp, r3
 800dbee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dbf2:	bfda      	itte	le
 800dbf4:	f1c3 0320 	rsble	r3, r3, #32
 800dbf8:	fa06 f003 	lslle.w	r0, r6, r3
 800dbfc:	4318      	orrgt	r0, r3
 800dbfe:	f7f2 fc89 	bl	8000514 <__aeabi_ui2d>
 800dc02:	2301      	movs	r3, #1
 800dc04:	4606      	mov	r6, r0
 800dc06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc0a:	3d01      	subs	r5, #1
 800dc0c:	930e      	str	r3, [sp, #56]	; 0x38
 800dc0e:	e76a      	b.n	800dae6 <_dtoa_r+0x116>
 800dc10:	2301      	movs	r3, #1
 800dc12:	e7b2      	b.n	800db7a <_dtoa_r+0x1aa>
 800dc14:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc16:	e7b1      	b.n	800db7c <_dtoa_r+0x1ac>
 800dc18:	9b04      	ldr	r3, [sp, #16]
 800dc1a:	9a00      	ldr	r2, [sp, #0]
 800dc1c:	1a9b      	subs	r3, r3, r2
 800dc1e:	9304      	str	r3, [sp, #16]
 800dc20:	4253      	negs	r3, r2
 800dc22:	9307      	str	r3, [sp, #28]
 800dc24:	2300      	movs	r3, #0
 800dc26:	930a      	str	r3, [sp, #40]	; 0x28
 800dc28:	e7bf      	b.n	800dbaa <_dtoa_r+0x1da>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	9308      	str	r3, [sp, #32]
 800dc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dc55      	bgt.n	800dce0 <_dtoa_r+0x310>
 800dc34:	2301      	movs	r3, #1
 800dc36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc3e:	e00c      	b.n	800dc5a <_dtoa_r+0x28a>
 800dc40:	2301      	movs	r3, #1
 800dc42:	e7f3      	b.n	800dc2c <_dtoa_r+0x25c>
 800dc44:	2300      	movs	r3, #0
 800dc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc48:	9308      	str	r3, [sp, #32]
 800dc4a:	9b00      	ldr	r3, [sp, #0]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	9302      	str	r3, [sp, #8]
 800dc50:	3301      	adds	r3, #1
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	9303      	str	r3, [sp, #12]
 800dc56:	bfb8      	it	lt
 800dc58:	2301      	movlt	r3, #1
 800dc5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	6042      	str	r2, [r0, #4]
 800dc60:	2204      	movs	r2, #4
 800dc62:	f102 0614 	add.w	r6, r2, #20
 800dc66:	429e      	cmp	r6, r3
 800dc68:	6841      	ldr	r1, [r0, #4]
 800dc6a:	d93d      	bls.n	800dce8 <_dtoa_r+0x318>
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f000 fcb7 	bl	800e5e0 <_Balloc>
 800dc72:	9001      	str	r0, [sp, #4]
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d13b      	bne.n	800dcf0 <_dtoa_r+0x320>
 800dc78:	4b11      	ldr	r3, [pc, #68]	; (800dcc0 <_dtoa_r+0x2f0>)
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc80:	e6c0      	b.n	800da04 <_dtoa_r+0x34>
 800dc82:	2301      	movs	r3, #1
 800dc84:	e7df      	b.n	800dc46 <_dtoa_r+0x276>
 800dc86:	bf00      	nop
 800dc88:	636f4361 	.word	0x636f4361
 800dc8c:	3fd287a7 	.word	0x3fd287a7
 800dc90:	8b60c8b3 	.word	0x8b60c8b3
 800dc94:	3fc68a28 	.word	0x3fc68a28
 800dc98:	509f79fb 	.word	0x509f79fb
 800dc9c:	3fd34413 	.word	0x3fd34413
 800dca0:	0803d1e9 	.word	0x0803d1e9
 800dca4:	0803d200 	.word	0x0803d200
 800dca8:	7ff00000 	.word	0x7ff00000
 800dcac:	0803d1e5 	.word	0x0803d1e5
 800dcb0:	0803d1dc 	.word	0x0803d1dc
 800dcb4:	0803d1b9 	.word	0x0803d1b9
 800dcb8:	3ff80000 	.word	0x3ff80000
 800dcbc:	0803d2f0 	.word	0x0803d2f0
 800dcc0:	0803d25b 	.word	0x0803d25b
 800dcc4:	2501      	movs	r5, #1
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9306      	str	r3, [sp, #24]
 800dcca:	9508      	str	r5, [sp, #32]
 800dccc:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2312      	movs	r3, #18
 800dcd8:	e7b0      	b.n	800dc3c <_dtoa_r+0x26c>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	9308      	str	r3, [sp, #32]
 800dcde:	e7f5      	b.n	800dccc <_dtoa_r+0x2fc>
 800dce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dce6:	e7b8      	b.n	800dc5a <_dtoa_r+0x28a>
 800dce8:	3101      	adds	r1, #1
 800dcea:	6041      	str	r1, [r0, #4]
 800dcec:	0052      	lsls	r2, r2, #1
 800dcee:	e7b8      	b.n	800dc62 <_dtoa_r+0x292>
 800dcf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcf2:	9a01      	ldr	r2, [sp, #4]
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	2b0e      	cmp	r3, #14
 800dcfa:	f200 809d 	bhi.w	800de38 <_dtoa_r+0x468>
 800dcfe:	2d00      	cmp	r5, #0
 800dd00:	f000 809a 	beq.w	800de38 <_dtoa_r+0x468>
 800dd04:	9b00      	ldr	r3, [sp, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	dd32      	ble.n	800dd70 <_dtoa_r+0x3a0>
 800dd0a:	4ab7      	ldr	r2, [pc, #732]	; (800dfe8 <_dtoa_r+0x618>)
 800dd0c:	f003 030f 	and.w	r3, r3, #15
 800dd10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd18:	9b00      	ldr	r3, [sp, #0]
 800dd1a:	05d8      	lsls	r0, r3, #23
 800dd1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dd20:	d516      	bpl.n	800dd50 <_dtoa_r+0x380>
 800dd22:	4bb2      	ldr	r3, [pc, #712]	; (800dfec <_dtoa_r+0x61c>)
 800dd24:	ec51 0b19 	vmov	r0, r1, d9
 800dd28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd2c:	f7f2 fd96 	bl	800085c <__aeabi_ddiv>
 800dd30:	f007 070f 	and.w	r7, r7, #15
 800dd34:	4682      	mov	sl, r0
 800dd36:	468b      	mov	fp, r1
 800dd38:	2503      	movs	r5, #3
 800dd3a:	4eac      	ldr	r6, [pc, #688]	; (800dfec <_dtoa_r+0x61c>)
 800dd3c:	b957      	cbnz	r7, 800dd54 <_dtoa_r+0x384>
 800dd3e:	4642      	mov	r2, r8
 800dd40:	464b      	mov	r3, r9
 800dd42:	4650      	mov	r0, sl
 800dd44:	4659      	mov	r1, fp
 800dd46:	f7f2 fd89 	bl	800085c <__aeabi_ddiv>
 800dd4a:	4682      	mov	sl, r0
 800dd4c:	468b      	mov	fp, r1
 800dd4e:	e028      	b.n	800dda2 <_dtoa_r+0x3d2>
 800dd50:	2502      	movs	r5, #2
 800dd52:	e7f2      	b.n	800dd3a <_dtoa_r+0x36a>
 800dd54:	07f9      	lsls	r1, r7, #31
 800dd56:	d508      	bpl.n	800dd6a <_dtoa_r+0x39a>
 800dd58:	4640      	mov	r0, r8
 800dd5a:	4649      	mov	r1, r9
 800dd5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd60:	f7f2 fc52 	bl	8000608 <__aeabi_dmul>
 800dd64:	3501      	adds	r5, #1
 800dd66:	4680      	mov	r8, r0
 800dd68:	4689      	mov	r9, r1
 800dd6a:	107f      	asrs	r7, r7, #1
 800dd6c:	3608      	adds	r6, #8
 800dd6e:	e7e5      	b.n	800dd3c <_dtoa_r+0x36c>
 800dd70:	f000 809b 	beq.w	800deaa <_dtoa_r+0x4da>
 800dd74:	9b00      	ldr	r3, [sp, #0]
 800dd76:	4f9d      	ldr	r7, [pc, #628]	; (800dfec <_dtoa_r+0x61c>)
 800dd78:	425e      	negs	r6, r3
 800dd7a:	4b9b      	ldr	r3, [pc, #620]	; (800dfe8 <_dtoa_r+0x618>)
 800dd7c:	f006 020f 	and.w	r2, r6, #15
 800dd80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	ec51 0b19 	vmov	r0, r1, d9
 800dd8c:	f7f2 fc3c 	bl	8000608 <__aeabi_dmul>
 800dd90:	1136      	asrs	r6, r6, #4
 800dd92:	4682      	mov	sl, r0
 800dd94:	468b      	mov	fp, r1
 800dd96:	2300      	movs	r3, #0
 800dd98:	2502      	movs	r5, #2
 800dd9a:	2e00      	cmp	r6, #0
 800dd9c:	d17a      	bne.n	800de94 <_dtoa_r+0x4c4>
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1d3      	bne.n	800dd4a <_dtoa_r+0x37a>
 800dda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 8082 	beq.w	800deae <_dtoa_r+0x4de>
 800ddaa:	4b91      	ldr	r3, [pc, #580]	; (800dff0 <_dtoa_r+0x620>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	4650      	mov	r0, sl
 800ddb0:	4659      	mov	r1, fp
 800ddb2:	f7f2 fe9b 	bl	8000aec <__aeabi_dcmplt>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d079      	beq.n	800deae <_dtoa_r+0x4de>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d076      	beq.n	800deae <_dtoa_r+0x4de>
 800ddc0:	9b02      	ldr	r3, [sp, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	dd36      	ble.n	800de34 <_dtoa_r+0x464>
 800ddc6:	9b00      	ldr	r3, [sp, #0]
 800ddc8:	4650      	mov	r0, sl
 800ddca:	4659      	mov	r1, fp
 800ddcc:	1e5f      	subs	r7, r3, #1
 800ddce:	2200      	movs	r2, #0
 800ddd0:	4b88      	ldr	r3, [pc, #544]	; (800dff4 <_dtoa_r+0x624>)
 800ddd2:	f7f2 fc19 	bl	8000608 <__aeabi_dmul>
 800ddd6:	9e02      	ldr	r6, [sp, #8]
 800ddd8:	4682      	mov	sl, r0
 800ddda:	468b      	mov	fp, r1
 800dddc:	3501      	adds	r5, #1
 800ddde:	4628      	mov	r0, r5
 800dde0:	f7f2 fba8 	bl	8000534 <__aeabi_i2d>
 800dde4:	4652      	mov	r2, sl
 800dde6:	465b      	mov	r3, fp
 800dde8:	f7f2 fc0e 	bl	8000608 <__aeabi_dmul>
 800ddec:	4b82      	ldr	r3, [pc, #520]	; (800dff8 <_dtoa_r+0x628>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f7f2 fa54 	bl	800029c <__adddf3>
 800ddf4:	46d0      	mov	r8, sl
 800ddf6:	46d9      	mov	r9, fp
 800ddf8:	4682      	mov	sl, r0
 800ddfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	d158      	bne.n	800deb4 <_dtoa_r+0x4e4>
 800de02:	4b7e      	ldr	r3, [pc, #504]	; (800dffc <_dtoa_r+0x62c>)
 800de04:	2200      	movs	r2, #0
 800de06:	4640      	mov	r0, r8
 800de08:	4649      	mov	r1, r9
 800de0a:	f7f2 fa45 	bl	8000298 <__aeabi_dsub>
 800de0e:	4652      	mov	r2, sl
 800de10:	465b      	mov	r3, fp
 800de12:	4680      	mov	r8, r0
 800de14:	4689      	mov	r9, r1
 800de16:	f7f2 fe87 	bl	8000b28 <__aeabi_dcmpgt>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	f040 8295 	bne.w	800e34a <_dtoa_r+0x97a>
 800de20:	4652      	mov	r2, sl
 800de22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800de26:	4640      	mov	r0, r8
 800de28:	4649      	mov	r1, r9
 800de2a:	f7f2 fe5f 	bl	8000aec <__aeabi_dcmplt>
 800de2e:	2800      	cmp	r0, #0
 800de30:	f040 8289 	bne.w	800e346 <_dtoa_r+0x976>
 800de34:	ec5b ab19 	vmov	sl, fp, d9
 800de38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f2c0 8148 	blt.w	800e0d0 <_dtoa_r+0x700>
 800de40:	9a00      	ldr	r2, [sp, #0]
 800de42:	2a0e      	cmp	r2, #14
 800de44:	f300 8144 	bgt.w	800e0d0 <_dtoa_r+0x700>
 800de48:	4b67      	ldr	r3, [pc, #412]	; (800dfe8 <_dtoa_r+0x618>)
 800de4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de54:	2b00      	cmp	r3, #0
 800de56:	f280 80d5 	bge.w	800e004 <_dtoa_r+0x634>
 800de5a:	9b03      	ldr	r3, [sp, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f300 80d1 	bgt.w	800e004 <_dtoa_r+0x634>
 800de62:	f040 826f 	bne.w	800e344 <_dtoa_r+0x974>
 800de66:	4b65      	ldr	r3, [pc, #404]	; (800dffc <_dtoa_r+0x62c>)
 800de68:	2200      	movs	r2, #0
 800de6a:	4640      	mov	r0, r8
 800de6c:	4649      	mov	r1, r9
 800de6e:	f7f2 fbcb 	bl	8000608 <__aeabi_dmul>
 800de72:	4652      	mov	r2, sl
 800de74:	465b      	mov	r3, fp
 800de76:	f7f2 fe4d 	bl	8000b14 <__aeabi_dcmpge>
 800de7a:	9e03      	ldr	r6, [sp, #12]
 800de7c:	4637      	mov	r7, r6
 800de7e:	2800      	cmp	r0, #0
 800de80:	f040 8245 	bne.w	800e30e <_dtoa_r+0x93e>
 800de84:	9d01      	ldr	r5, [sp, #4]
 800de86:	2331      	movs	r3, #49	; 0x31
 800de88:	f805 3b01 	strb.w	r3, [r5], #1
 800de8c:	9b00      	ldr	r3, [sp, #0]
 800de8e:	3301      	adds	r3, #1
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	e240      	b.n	800e316 <_dtoa_r+0x946>
 800de94:	07f2      	lsls	r2, r6, #31
 800de96:	d505      	bpl.n	800dea4 <_dtoa_r+0x4d4>
 800de98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de9c:	f7f2 fbb4 	bl	8000608 <__aeabi_dmul>
 800dea0:	3501      	adds	r5, #1
 800dea2:	2301      	movs	r3, #1
 800dea4:	1076      	asrs	r6, r6, #1
 800dea6:	3708      	adds	r7, #8
 800dea8:	e777      	b.n	800dd9a <_dtoa_r+0x3ca>
 800deaa:	2502      	movs	r5, #2
 800deac:	e779      	b.n	800dda2 <_dtoa_r+0x3d2>
 800deae:	9f00      	ldr	r7, [sp, #0]
 800deb0:	9e03      	ldr	r6, [sp, #12]
 800deb2:	e794      	b.n	800ddde <_dtoa_r+0x40e>
 800deb4:	9901      	ldr	r1, [sp, #4]
 800deb6:	4b4c      	ldr	r3, [pc, #304]	; (800dfe8 <_dtoa_r+0x618>)
 800deb8:	4431      	add	r1, r6
 800deba:	910d      	str	r1, [sp, #52]	; 0x34
 800debc:	9908      	ldr	r1, [sp, #32]
 800debe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dec6:	2900      	cmp	r1, #0
 800dec8:	d043      	beq.n	800df52 <_dtoa_r+0x582>
 800deca:	494d      	ldr	r1, [pc, #308]	; (800e000 <_dtoa_r+0x630>)
 800decc:	2000      	movs	r0, #0
 800dece:	f7f2 fcc5 	bl	800085c <__aeabi_ddiv>
 800ded2:	4652      	mov	r2, sl
 800ded4:	465b      	mov	r3, fp
 800ded6:	f7f2 f9df 	bl	8000298 <__aeabi_dsub>
 800deda:	9d01      	ldr	r5, [sp, #4]
 800dedc:	4682      	mov	sl, r0
 800dede:	468b      	mov	fp, r1
 800dee0:	4649      	mov	r1, r9
 800dee2:	4640      	mov	r0, r8
 800dee4:	f7f2 fe40 	bl	8000b68 <__aeabi_d2iz>
 800dee8:	4606      	mov	r6, r0
 800deea:	f7f2 fb23 	bl	8000534 <__aeabi_i2d>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 f9cf 	bl	8000298 <__aeabi_dsub>
 800defa:	3630      	adds	r6, #48	; 0x30
 800defc:	f805 6b01 	strb.w	r6, [r5], #1
 800df00:	4652      	mov	r2, sl
 800df02:	465b      	mov	r3, fp
 800df04:	4680      	mov	r8, r0
 800df06:	4689      	mov	r9, r1
 800df08:	f7f2 fdf0 	bl	8000aec <__aeabi_dcmplt>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d163      	bne.n	800dfd8 <_dtoa_r+0x608>
 800df10:	4642      	mov	r2, r8
 800df12:	464b      	mov	r3, r9
 800df14:	4936      	ldr	r1, [pc, #216]	; (800dff0 <_dtoa_r+0x620>)
 800df16:	2000      	movs	r0, #0
 800df18:	f7f2 f9be 	bl	8000298 <__aeabi_dsub>
 800df1c:	4652      	mov	r2, sl
 800df1e:	465b      	mov	r3, fp
 800df20:	f7f2 fde4 	bl	8000aec <__aeabi_dcmplt>
 800df24:	2800      	cmp	r0, #0
 800df26:	f040 80b5 	bne.w	800e094 <_dtoa_r+0x6c4>
 800df2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df2c:	429d      	cmp	r5, r3
 800df2e:	d081      	beq.n	800de34 <_dtoa_r+0x464>
 800df30:	4b30      	ldr	r3, [pc, #192]	; (800dff4 <_dtoa_r+0x624>)
 800df32:	2200      	movs	r2, #0
 800df34:	4650      	mov	r0, sl
 800df36:	4659      	mov	r1, fp
 800df38:	f7f2 fb66 	bl	8000608 <__aeabi_dmul>
 800df3c:	4b2d      	ldr	r3, [pc, #180]	; (800dff4 <_dtoa_r+0x624>)
 800df3e:	4682      	mov	sl, r0
 800df40:	468b      	mov	fp, r1
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	2200      	movs	r2, #0
 800df48:	f7f2 fb5e 	bl	8000608 <__aeabi_dmul>
 800df4c:	4680      	mov	r8, r0
 800df4e:	4689      	mov	r9, r1
 800df50:	e7c6      	b.n	800dee0 <_dtoa_r+0x510>
 800df52:	4650      	mov	r0, sl
 800df54:	4659      	mov	r1, fp
 800df56:	f7f2 fb57 	bl	8000608 <__aeabi_dmul>
 800df5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df5c:	9d01      	ldr	r5, [sp, #4]
 800df5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df60:	4682      	mov	sl, r0
 800df62:	468b      	mov	fp, r1
 800df64:	4649      	mov	r1, r9
 800df66:	4640      	mov	r0, r8
 800df68:	f7f2 fdfe 	bl	8000b68 <__aeabi_d2iz>
 800df6c:	4606      	mov	r6, r0
 800df6e:	f7f2 fae1 	bl	8000534 <__aeabi_i2d>
 800df72:	3630      	adds	r6, #48	; 0x30
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	4640      	mov	r0, r8
 800df7a:	4649      	mov	r1, r9
 800df7c:	f7f2 f98c 	bl	8000298 <__aeabi_dsub>
 800df80:	f805 6b01 	strb.w	r6, [r5], #1
 800df84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df86:	429d      	cmp	r5, r3
 800df88:	4680      	mov	r8, r0
 800df8a:	4689      	mov	r9, r1
 800df8c:	f04f 0200 	mov.w	r2, #0
 800df90:	d124      	bne.n	800dfdc <_dtoa_r+0x60c>
 800df92:	4b1b      	ldr	r3, [pc, #108]	; (800e000 <_dtoa_r+0x630>)
 800df94:	4650      	mov	r0, sl
 800df96:	4659      	mov	r1, fp
 800df98:	f7f2 f980 	bl	800029c <__adddf3>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	f7f2 fdc0 	bl	8000b28 <__aeabi_dcmpgt>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d173      	bne.n	800e094 <_dtoa_r+0x6c4>
 800dfac:	4652      	mov	r2, sl
 800dfae:	465b      	mov	r3, fp
 800dfb0:	4913      	ldr	r1, [pc, #76]	; (800e000 <_dtoa_r+0x630>)
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	f7f2 f970 	bl	8000298 <__aeabi_dsub>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	f7f2 fd94 	bl	8000aec <__aeabi_dcmplt>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	f43f af35 	beq.w	800de34 <_dtoa_r+0x464>
 800dfca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dfcc:	1e6b      	subs	r3, r5, #1
 800dfce:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dfd4:	2b30      	cmp	r3, #48	; 0x30
 800dfd6:	d0f8      	beq.n	800dfca <_dtoa_r+0x5fa>
 800dfd8:	9700      	str	r7, [sp, #0]
 800dfda:	e049      	b.n	800e070 <_dtoa_r+0x6a0>
 800dfdc:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <_dtoa_r+0x624>)
 800dfde:	f7f2 fb13 	bl	8000608 <__aeabi_dmul>
 800dfe2:	4680      	mov	r8, r0
 800dfe4:	4689      	mov	r9, r1
 800dfe6:	e7bd      	b.n	800df64 <_dtoa_r+0x594>
 800dfe8:	0803d2f0 	.word	0x0803d2f0
 800dfec:	0803d2c8 	.word	0x0803d2c8
 800dff0:	3ff00000 	.word	0x3ff00000
 800dff4:	40240000 	.word	0x40240000
 800dff8:	401c0000 	.word	0x401c0000
 800dffc:	40140000 	.word	0x40140000
 800e000:	3fe00000 	.word	0x3fe00000
 800e004:	9d01      	ldr	r5, [sp, #4]
 800e006:	4656      	mov	r6, sl
 800e008:	465f      	mov	r7, fp
 800e00a:	4642      	mov	r2, r8
 800e00c:	464b      	mov	r3, r9
 800e00e:	4630      	mov	r0, r6
 800e010:	4639      	mov	r1, r7
 800e012:	f7f2 fc23 	bl	800085c <__aeabi_ddiv>
 800e016:	f7f2 fda7 	bl	8000b68 <__aeabi_d2iz>
 800e01a:	4682      	mov	sl, r0
 800e01c:	f7f2 fa8a 	bl	8000534 <__aeabi_i2d>
 800e020:	4642      	mov	r2, r8
 800e022:	464b      	mov	r3, r9
 800e024:	f7f2 faf0 	bl	8000608 <__aeabi_dmul>
 800e028:	4602      	mov	r2, r0
 800e02a:	460b      	mov	r3, r1
 800e02c:	4630      	mov	r0, r6
 800e02e:	4639      	mov	r1, r7
 800e030:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e034:	f7f2 f930 	bl	8000298 <__aeabi_dsub>
 800e038:	f805 6b01 	strb.w	r6, [r5], #1
 800e03c:	9e01      	ldr	r6, [sp, #4]
 800e03e:	9f03      	ldr	r7, [sp, #12]
 800e040:	1bae      	subs	r6, r5, r6
 800e042:	42b7      	cmp	r7, r6
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	d135      	bne.n	800e0b6 <_dtoa_r+0x6e6>
 800e04a:	f7f2 f927 	bl	800029c <__adddf3>
 800e04e:	4642      	mov	r2, r8
 800e050:	464b      	mov	r3, r9
 800e052:	4606      	mov	r6, r0
 800e054:	460f      	mov	r7, r1
 800e056:	f7f2 fd67 	bl	8000b28 <__aeabi_dcmpgt>
 800e05a:	b9d0      	cbnz	r0, 800e092 <_dtoa_r+0x6c2>
 800e05c:	4642      	mov	r2, r8
 800e05e:	464b      	mov	r3, r9
 800e060:	4630      	mov	r0, r6
 800e062:	4639      	mov	r1, r7
 800e064:	f7f2 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 800e068:	b110      	cbz	r0, 800e070 <_dtoa_r+0x6a0>
 800e06a:	f01a 0f01 	tst.w	sl, #1
 800e06e:	d110      	bne.n	800e092 <_dtoa_r+0x6c2>
 800e070:	4620      	mov	r0, r4
 800e072:	ee18 1a10 	vmov	r1, s16
 800e076:	f000 faf3 	bl	800e660 <_Bfree>
 800e07a:	2300      	movs	r3, #0
 800e07c:	9800      	ldr	r0, [sp, #0]
 800e07e:	702b      	strb	r3, [r5, #0]
 800e080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e082:	3001      	adds	r0, #1
 800e084:	6018      	str	r0, [r3, #0]
 800e086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f43f acf1 	beq.w	800da70 <_dtoa_r+0xa0>
 800e08e:	601d      	str	r5, [r3, #0]
 800e090:	e4ee      	b.n	800da70 <_dtoa_r+0xa0>
 800e092:	9f00      	ldr	r7, [sp, #0]
 800e094:	462b      	mov	r3, r5
 800e096:	461d      	mov	r5, r3
 800e098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e09c:	2a39      	cmp	r2, #57	; 0x39
 800e09e:	d106      	bne.n	800e0ae <_dtoa_r+0x6de>
 800e0a0:	9a01      	ldr	r2, [sp, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d1f7      	bne.n	800e096 <_dtoa_r+0x6c6>
 800e0a6:	9901      	ldr	r1, [sp, #4]
 800e0a8:	2230      	movs	r2, #48	; 0x30
 800e0aa:	3701      	adds	r7, #1
 800e0ac:	700a      	strb	r2, [r1, #0]
 800e0ae:	781a      	ldrb	r2, [r3, #0]
 800e0b0:	3201      	adds	r2, #1
 800e0b2:	701a      	strb	r2, [r3, #0]
 800e0b4:	e790      	b.n	800dfd8 <_dtoa_r+0x608>
 800e0b6:	4ba6      	ldr	r3, [pc, #664]	; (800e350 <_dtoa_r+0x980>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f7f2 faa5 	bl	8000608 <__aeabi_dmul>
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	460f      	mov	r7, r1
 800e0c6:	f7f2 fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d09d      	beq.n	800e00a <_dtoa_r+0x63a>
 800e0ce:	e7cf      	b.n	800e070 <_dtoa_r+0x6a0>
 800e0d0:	9a08      	ldr	r2, [sp, #32]
 800e0d2:	2a00      	cmp	r2, #0
 800e0d4:	f000 80d7 	beq.w	800e286 <_dtoa_r+0x8b6>
 800e0d8:	9a06      	ldr	r2, [sp, #24]
 800e0da:	2a01      	cmp	r2, #1
 800e0dc:	f300 80ba 	bgt.w	800e254 <_dtoa_r+0x884>
 800e0e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0e2:	2a00      	cmp	r2, #0
 800e0e4:	f000 80b2 	beq.w	800e24c <_dtoa_r+0x87c>
 800e0e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e0ec:	9e07      	ldr	r6, [sp, #28]
 800e0ee:	9d04      	ldr	r5, [sp, #16]
 800e0f0:	9a04      	ldr	r2, [sp, #16]
 800e0f2:	441a      	add	r2, r3
 800e0f4:	9204      	str	r2, [sp, #16]
 800e0f6:	9a05      	ldr	r2, [sp, #20]
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	441a      	add	r2, r3
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	9205      	str	r2, [sp, #20]
 800e100:	f000 fb66 	bl	800e7d0 <__i2b>
 800e104:	4607      	mov	r7, r0
 800e106:	2d00      	cmp	r5, #0
 800e108:	dd0c      	ble.n	800e124 <_dtoa_r+0x754>
 800e10a:	9b05      	ldr	r3, [sp, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	dd09      	ble.n	800e124 <_dtoa_r+0x754>
 800e110:	42ab      	cmp	r3, r5
 800e112:	9a04      	ldr	r2, [sp, #16]
 800e114:	bfa8      	it	ge
 800e116:	462b      	movge	r3, r5
 800e118:	1ad2      	subs	r2, r2, r3
 800e11a:	9204      	str	r2, [sp, #16]
 800e11c:	9a05      	ldr	r2, [sp, #20]
 800e11e:	1aed      	subs	r5, r5, r3
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	9305      	str	r3, [sp, #20]
 800e124:	9b07      	ldr	r3, [sp, #28]
 800e126:	b31b      	cbz	r3, 800e170 <_dtoa_r+0x7a0>
 800e128:	9b08      	ldr	r3, [sp, #32]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 80af 	beq.w	800e28e <_dtoa_r+0x8be>
 800e130:	2e00      	cmp	r6, #0
 800e132:	dd13      	ble.n	800e15c <_dtoa_r+0x78c>
 800e134:	4639      	mov	r1, r7
 800e136:	4632      	mov	r2, r6
 800e138:	4620      	mov	r0, r4
 800e13a:	f000 fc09 	bl	800e950 <__pow5mult>
 800e13e:	ee18 2a10 	vmov	r2, s16
 800e142:	4601      	mov	r1, r0
 800e144:	4607      	mov	r7, r0
 800e146:	4620      	mov	r0, r4
 800e148:	f000 fb58 	bl	800e7fc <__multiply>
 800e14c:	ee18 1a10 	vmov	r1, s16
 800e150:	4680      	mov	r8, r0
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fa84 	bl	800e660 <_Bfree>
 800e158:	ee08 8a10 	vmov	s16, r8
 800e15c:	9b07      	ldr	r3, [sp, #28]
 800e15e:	1b9a      	subs	r2, r3, r6
 800e160:	d006      	beq.n	800e170 <_dtoa_r+0x7a0>
 800e162:	ee18 1a10 	vmov	r1, s16
 800e166:	4620      	mov	r0, r4
 800e168:	f000 fbf2 	bl	800e950 <__pow5mult>
 800e16c:	ee08 0a10 	vmov	s16, r0
 800e170:	2101      	movs	r1, #1
 800e172:	4620      	mov	r0, r4
 800e174:	f000 fb2c 	bl	800e7d0 <__i2b>
 800e178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	4606      	mov	r6, r0
 800e17e:	f340 8088 	ble.w	800e292 <_dtoa_r+0x8c2>
 800e182:	461a      	mov	r2, r3
 800e184:	4601      	mov	r1, r0
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fbe2 	bl	800e950 <__pow5mult>
 800e18c:	9b06      	ldr	r3, [sp, #24]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	4606      	mov	r6, r0
 800e192:	f340 8081 	ble.w	800e298 <_dtoa_r+0x8c8>
 800e196:	f04f 0800 	mov.w	r8, #0
 800e19a:	6933      	ldr	r3, [r6, #16]
 800e19c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e1a0:	6918      	ldr	r0, [r3, #16]
 800e1a2:	f000 fac5 	bl	800e730 <__hi0bits>
 800e1a6:	f1c0 0020 	rsb	r0, r0, #32
 800e1aa:	9b05      	ldr	r3, [sp, #20]
 800e1ac:	4418      	add	r0, r3
 800e1ae:	f010 001f 	ands.w	r0, r0, #31
 800e1b2:	f000 8092 	beq.w	800e2da <_dtoa_r+0x90a>
 800e1b6:	f1c0 0320 	rsb	r3, r0, #32
 800e1ba:	2b04      	cmp	r3, #4
 800e1bc:	f340 808a 	ble.w	800e2d4 <_dtoa_r+0x904>
 800e1c0:	f1c0 001c 	rsb	r0, r0, #28
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	4403      	add	r3, r0
 800e1c8:	9304      	str	r3, [sp, #16]
 800e1ca:	9b05      	ldr	r3, [sp, #20]
 800e1cc:	4403      	add	r3, r0
 800e1ce:	4405      	add	r5, r0
 800e1d0:	9305      	str	r3, [sp, #20]
 800e1d2:	9b04      	ldr	r3, [sp, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	dd07      	ble.n	800e1e8 <_dtoa_r+0x818>
 800e1d8:	ee18 1a10 	vmov	r1, s16
 800e1dc:	461a      	mov	r2, r3
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f000 fc10 	bl	800ea04 <__lshift>
 800e1e4:	ee08 0a10 	vmov	s16, r0
 800e1e8:	9b05      	ldr	r3, [sp, #20]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	dd05      	ble.n	800e1fa <_dtoa_r+0x82a>
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f000 fc06 	bl	800ea04 <__lshift>
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d06e      	beq.n	800e2de <_dtoa_r+0x90e>
 800e200:	ee18 0a10 	vmov	r0, s16
 800e204:	4631      	mov	r1, r6
 800e206:	f000 fc6d 	bl	800eae4 <__mcmp>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	da67      	bge.n	800e2de <_dtoa_r+0x90e>
 800e20e:	9b00      	ldr	r3, [sp, #0]
 800e210:	3b01      	subs	r3, #1
 800e212:	ee18 1a10 	vmov	r1, s16
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	220a      	movs	r2, #10
 800e21a:	2300      	movs	r3, #0
 800e21c:	4620      	mov	r0, r4
 800e21e:	f000 fa41 	bl	800e6a4 <__multadd>
 800e222:	9b08      	ldr	r3, [sp, #32]
 800e224:	ee08 0a10 	vmov	s16, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 81b1 	beq.w	800e590 <_dtoa_r+0xbc0>
 800e22e:	2300      	movs	r3, #0
 800e230:	4639      	mov	r1, r7
 800e232:	220a      	movs	r2, #10
 800e234:	4620      	mov	r0, r4
 800e236:	f000 fa35 	bl	800e6a4 <__multadd>
 800e23a:	9b02      	ldr	r3, [sp, #8]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	4607      	mov	r7, r0
 800e240:	f300 808e 	bgt.w	800e360 <_dtoa_r+0x990>
 800e244:	9b06      	ldr	r3, [sp, #24]
 800e246:	2b02      	cmp	r3, #2
 800e248:	dc51      	bgt.n	800e2ee <_dtoa_r+0x91e>
 800e24a:	e089      	b.n	800e360 <_dtoa_r+0x990>
 800e24c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e24e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e252:	e74b      	b.n	800e0ec <_dtoa_r+0x71c>
 800e254:	9b03      	ldr	r3, [sp, #12]
 800e256:	1e5e      	subs	r6, r3, #1
 800e258:	9b07      	ldr	r3, [sp, #28]
 800e25a:	42b3      	cmp	r3, r6
 800e25c:	bfbf      	itttt	lt
 800e25e:	9b07      	ldrlt	r3, [sp, #28]
 800e260:	9607      	strlt	r6, [sp, #28]
 800e262:	1af2      	sublt	r2, r6, r3
 800e264:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e266:	bfb6      	itet	lt
 800e268:	189b      	addlt	r3, r3, r2
 800e26a:	1b9e      	subge	r6, r3, r6
 800e26c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e26e:	9b03      	ldr	r3, [sp, #12]
 800e270:	bfb8      	it	lt
 800e272:	2600      	movlt	r6, #0
 800e274:	2b00      	cmp	r3, #0
 800e276:	bfb7      	itett	lt
 800e278:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e27c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e280:	1a9d      	sublt	r5, r3, r2
 800e282:	2300      	movlt	r3, #0
 800e284:	e734      	b.n	800e0f0 <_dtoa_r+0x720>
 800e286:	9e07      	ldr	r6, [sp, #28]
 800e288:	9d04      	ldr	r5, [sp, #16]
 800e28a:	9f08      	ldr	r7, [sp, #32]
 800e28c:	e73b      	b.n	800e106 <_dtoa_r+0x736>
 800e28e:	9a07      	ldr	r2, [sp, #28]
 800e290:	e767      	b.n	800e162 <_dtoa_r+0x792>
 800e292:	9b06      	ldr	r3, [sp, #24]
 800e294:	2b01      	cmp	r3, #1
 800e296:	dc18      	bgt.n	800e2ca <_dtoa_r+0x8fa>
 800e298:	f1ba 0f00 	cmp.w	sl, #0
 800e29c:	d115      	bne.n	800e2ca <_dtoa_r+0x8fa>
 800e29e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2a2:	b993      	cbnz	r3, 800e2ca <_dtoa_r+0x8fa>
 800e2a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2a8:	0d1b      	lsrs	r3, r3, #20
 800e2aa:	051b      	lsls	r3, r3, #20
 800e2ac:	b183      	cbz	r3, 800e2d0 <_dtoa_r+0x900>
 800e2ae:	9b04      	ldr	r3, [sp, #16]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	9b05      	ldr	r3, [sp, #20]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	9305      	str	r3, [sp, #20]
 800e2ba:	f04f 0801 	mov.w	r8, #1
 800e2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f47f af6a 	bne.w	800e19a <_dtoa_r+0x7ca>
 800e2c6:	2001      	movs	r0, #1
 800e2c8:	e76f      	b.n	800e1aa <_dtoa_r+0x7da>
 800e2ca:	f04f 0800 	mov.w	r8, #0
 800e2ce:	e7f6      	b.n	800e2be <_dtoa_r+0x8ee>
 800e2d0:	4698      	mov	r8, r3
 800e2d2:	e7f4      	b.n	800e2be <_dtoa_r+0x8ee>
 800e2d4:	f43f af7d 	beq.w	800e1d2 <_dtoa_r+0x802>
 800e2d8:	4618      	mov	r0, r3
 800e2da:	301c      	adds	r0, #28
 800e2dc:	e772      	b.n	800e1c4 <_dtoa_r+0x7f4>
 800e2de:	9b03      	ldr	r3, [sp, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dc37      	bgt.n	800e354 <_dtoa_r+0x984>
 800e2e4:	9b06      	ldr	r3, [sp, #24]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	dd34      	ble.n	800e354 <_dtoa_r+0x984>
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	9302      	str	r3, [sp, #8]
 800e2ee:	9b02      	ldr	r3, [sp, #8]
 800e2f0:	b96b      	cbnz	r3, 800e30e <_dtoa_r+0x93e>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	2205      	movs	r2, #5
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 f9d4 	bl	800e6a4 <__multadd>
 800e2fc:	4601      	mov	r1, r0
 800e2fe:	4606      	mov	r6, r0
 800e300:	ee18 0a10 	vmov	r0, s16
 800e304:	f000 fbee 	bl	800eae4 <__mcmp>
 800e308:	2800      	cmp	r0, #0
 800e30a:	f73f adbb 	bgt.w	800de84 <_dtoa_r+0x4b4>
 800e30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e310:	9d01      	ldr	r5, [sp, #4]
 800e312:	43db      	mvns	r3, r3
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	f04f 0800 	mov.w	r8, #0
 800e31a:	4631      	mov	r1, r6
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 f99f 	bl	800e660 <_Bfree>
 800e322:	2f00      	cmp	r7, #0
 800e324:	f43f aea4 	beq.w	800e070 <_dtoa_r+0x6a0>
 800e328:	f1b8 0f00 	cmp.w	r8, #0
 800e32c:	d005      	beq.n	800e33a <_dtoa_r+0x96a>
 800e32e:	45b8      	cmp	r8, r7
 800e330:	d003      	beq.n	800e33a <_dtoa_r+0x96a>
 800e332:	4641      	mov	r1, r8
 800e334:	4620      	mov	r0, r4
 800e336:	f000 f993 	bl	800e660 <_Bfree>
 800e33a:	4639      	mov	r1, r7
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 f98f 	bl	800e660 <_Bfree>
 800e342:	e695      	b.n	800e070 <_dtoa_r+0x6a0>
 800e344:	2600      	movs	r6, #0
 800e346:	4637      	mov	r7, r6
 800e348:	e7e1      	b.n	800e30e <_dtoa_r+0x93e>
 800e34a:	9700      	str	r7, [sp, #0]
 800e34c:	4637      	mov	r7, r6
 800e34e:	e599      	b.n	800de84 <_dtoa_r+0x4b4>
 800e350:	40240000 	.word	0x40240000
 800e354:	9b08      	ldr	r3, [sp, #32]
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 80ca 	beq.w	800e4f0 <_dtoa_r+0xb20>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	9302      	str	r3, [sp, #8]
 800e360:	2d00      	cmp	r5, #0
 800e362:	dd05      	ble.n	800e370 <_dtoa_r+0x9a0>
 800e364:	4639      	mov	r1, r7
 800e366:	462a      	mov	r2, r5
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 fb4b 	bl	800ea04 <__lshift>
 800e36e:	4607      	mov	r7, r0
 800e370:	f1b8 0f00 	cmp.w	r8, #0
 800e374:	d05b      	beq.n	800e42e <_dtoa_r+0xa5e>
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4620      	mov	r0, r4
 800e37a:	f000 f931 	bl	800e5e0 <_Balloc>
 800e37e:	4605      	mov	r5, r0
 800e380:	b928      	cbnz	r0, 800e38e <_dtoa_r+0x9be>
 800e382:	4b87      	ldr	r3, [pc, #540]	; (800e5a0 <_dtoa_r+0xbd0>)
 800e384:	4602      	mov	r2, r0
 800e386:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e38a:	f7ff bb3b 	b.w	800da04 <_dtoa_r+0x34>
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	3202      	adds	r2, #2
 800e392:	0092      	lsls	r2, r2, #2
 800e394:	f107 010c 	add.w	r1, r7, #12
 800e398:	300c      	adds	r0, #12
 800e39a:	f000 f913 	bl	800e5c4 <memcpy>
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 fb2e 	bl	800ea04 <__lshift>
 800e3a8:	9b01      	ldr	r3, [sp, #4]
 800e3aa:	f103 0901 	add.w	r9, r3, #1
 800e3ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	9305      	str	r3, [sp, #20]
 800e3b6:	f00a 0301 	and.w	r3, sl, #1
 800e3ba:	46b8      	mov	r8, r7
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	4607      	mov	r7, r0
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	ee18 0a10 	vmov	r0, s16
 800e3c6:	f7ff fa78 	bl	800d8ba <quorem>
 800e3ca:	4641      	mov	r1, r8
 800e3cc:	9002      	str	r0, [sp, #8]
 800e3ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e3d2:	ee18 0a10 	vmov	r0, s16
 800e3d6:	f000 fb85 	bl	800eae4 <__mcmp>
 800e3da:	463a      	mov	r2, r7
 800e3dc:	9003      	str	r0, [sp, #12]
 800e3de:	4631      	mov	r1, r6
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 fb9b 	bl	800eb1c <__mdiff>
 800e3e6:	68c2      	ldr	r2, [r0, #12]
 800e3e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	bb02      	cbnz	r2, 800e432 <_dtoa_r+0xa62>
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	ee18 0a10 	vmov	r0, s16
 800e3f6:	f000 fb75 	bl	800eae4 <__mcmp>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4620      	mov	r0, r4
 800e400:	9207      	str	r2, [sp, #28]
 800e402:	f000 f92d 	bl	800e660 <_Bfree>
 800e406:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e40a:	ea43 0102 	orr.w	r1, r3, r2
 800e40e:	9b04      	ldr	r3, [sp, #16]
 800e410:	430b      	orrs	r3, r1
 800e412:	464d      	mov	r5, r9
 800e414:	d10f      	bne.n	800e436 <_dtoa_r+0xa66>
 800e416:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e41a:	d02a      	beq.n	800e472 <_dtoa_r+0xaa2>
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dd02      	ble.n	800e428 <_dtoa_r+0xa58>
 800e422:	9b02      	ldr	r3, [sp, #8]
 800e424:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e428:	f88b a000 	strb.w	sl, [fp]
 800e42c:	e775      	b.n	800e31a <_dtoa_r+0x94a>
 800e42e:	4638      	mov	r0, r7
 800e430:	e7ba      	b.n	800e3a8 <_dtoa_r+0x9d8>
 800e432:	2201      	movs	r2, #1
 800e434:	e7e2      	b.n	800e3fc <_dtoa_r+0xa2c>
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	db04      	blt.n	800e446 <_dtoa_r+0xa76>
 800e43c:	9906      	ldr	r1, [sp, #24]
 800e43e:	430b      	orrs	r3, r1
 800e440:	9904      	ldr	r1, [sp, #16]
 800e442:	430b      	orrs	r3, r1
 800e444:	d122      	bne.n	800e48c <_dtoa_r+0xabc>
 800e446:	2a00      	cmp	r2, #0
 800e448:	ddee      	ble.n	800e428 <_dtoa_r+0xa58>
 800e44a:	ee18 1a10 	vmov	r1, s16
 800e44e:	2201      	movs	r2, #1
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fad7 	bl	800ea04 <__lshift>
 800e456:	4631      	mov	r1, r6
 800e458:	ee08 0a10 	vmov	s16, r0
 800e45c:	f000 fb42 	bl	800eae4 <__mcmp>
 800e460:	2800      	cmp	r0, #0
 800e462:	dc03      	bgt.n	800e46c <_dtoa_r+0xa9c>
 800e464:	d1e0      	bne.n	800e428 <_dtoa_r+0xa58>
 800e466:	f01a 0f01 	tst.w	sl, #1
 800e46a:	d0dd      	beq.n	800e428 <_dtoa_r+0xa58>
 800e46c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e470:	d1d7      	bne.n	800e422 <_dtoa_r+0xa52>
 800e472:	2339      	movs	r3, #57	; 0x39
 800e474:	f88b 3000 	strb.w	r3, [fp]
 800e478:	462b      	mov	r3, r5
 800e47a:	461d      	mov	r5, r3
 800e47c:	3b01      	subs	r3, #1
 800e47e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e482:	2a39      	cmp	r2, #57	; 0x39
 800e484:	d071      	beq.n	800e56a <_dtoa_r+0xb9a>
 800e486:	3201      	adds	r2, #1
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	e746      	b.n	800e31a <_dtoa_r+0x94a>
 800e48c:	2a00      	cmp	r2, #0
 800e48e:	dd07      	ble.n	800e4a0 <_dtoa_r+0xad0>
 800e490:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e494:	d0ed      	beq.n	800e472 <_dtoa_r+0xaa2>
 800e496:	f10a 0301 	add.w	r3, sl, #1
 800e49a:	f88b 3000 	strb.w	r3, [fp]
 800e49e:	e73c      	b.n	800e31a <_dtoa_r+0x94a>
 800e4a0:	9b05      	ldr	r3, [sp, #20]
 800e4a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e4a6:	4599      	cmp	r9, r3
 800e4a8:	d047      	beq.n	800e53a <_dtoa_r+0xb6a>
 800e4aa:	ee18 1a10 	vmov	r1, s16
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	220a      	movs	r2, #10
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	f000 f8f6 	bl	800e6a4 <__multadd>
 800e4b8:	45b8      	cmp	r8, r7
 800e4ba:	ee08 0a10 	vmov	s16, r0
 800e4be:	f04f 0300 	mov.w	r3, #0
 800e4c2:	f04f 020a 	mov.w	r2, #10
 800e4c6:	4641      	mov	r1, r8
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	d106      	bne.n	800e4da <_dtoa_r+0xb0a>
 800e4cc:	f000 f8ea 	bl	800e6a4 <__multadd>
 800e4d0:	4680      	mov	r8, r0
 800e4d2:	4607      	mov	r7, r0
 800e4d4:	f109 0901 	add.w	r9, r9, #1
 800e4d8:	e772      	b.n	800e3c0 <_dtoa_r+0x9f0>
 800e4da:	f000 f8e3 	bl	800e6a4 <__multadd>
 800e4de:	4639      	mov	r1, r7
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	220a      	movs	r2, #10
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f000 f8dc 	bl	800e6a4 <__multadd>
 800e4ec:	4607      	mov	r7, r0
 800e4ee:	e7f1      	b.n	800e4d4 <_dtoa_r+0xb04>
 800e4f0:	9b03      	ldr	r3, [sp, #12]
 800e4f2:	9302      	str	r3, [sp, #8]
 800e4f4:	9d01      	ldr	r5, [sp, #4]
 800e4f6:	ee18 0a10 	vmov	r0, s16
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	f7ff f9dd 	bl	800d8ba <quorem>
 800e500:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	f805 ab01 	strb.w	sl, [r5], #1
 800e50a:	1aea      	subs	r2, r5, r3
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	4293      	cmp	r3, r2
 800e510:	dd09      	ble.n	800e526 <_dtoa_r+0xb56>
 800e512:	ee18 1a10 	vmov	r1, s16
 800e516:	2300      	movs	r3, #0
 800e518:	220a      	movs	r2, #10
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 f8c2 	bl	800e6a4 <__multadd>
 800e520:	ee08 0a10 	vmov	s16, r0
 800e524:	e7e7      	b.n	800e4f6 <_dtoa_r+0xb26>
 800e526:	9b02      	ldr	r3, [sp, #8]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	bfc8      	it	gt
 800e52c:	461d      	movgt	r5, r3
 800e52e:	9b01      	ldr	r3, [sp, #4]
 800e530:	bfd8      	it	le
 800e532:	2501      	movle	r5, #1
 800e534:	441d      	add	r5, r3
 800e536:	f04f 0800 	mov.w	r8, #0
 800e53a:	ee18 1a10 	vmov	r1, s16
 800e53e:	2201      	movs	r2, #1
 800e540:	4620      	mov	r0, r4
 800e542:	f000 fa5f 	bl	800ea04 <__lshift>
 800e546:	4631      	mov	r1, r6
 800e548:	ee08 0a10 	vmov	s16, r0
 800e54c:	f000 faca 	bl	800eae4 <__mcmp>
 800e550:	2800      	cmp	r0, #0
 800e552:	dc91      	bgt.n	800e478 <_dtoa_r+0xaa8>
 800e554:	d102      	bne.n	800e55c <_dtoa_r+0xb8c>
 800e556:	f01a 0f01 	tst.w	sl, #1
 800e55a:	d18d      	bne.n	800e478 <_dtoa_r+0xaa8>
 800e55c:	462b      	mov	r3, r5
 800e55e:	461d      	mov	r5, r3
 800e560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e564:	2a30      	cmp	r2, #48	; 0x30
 800e566:	d0fa      	beq.n	800e55e <_dtoa_r+0xb8e>
 800e568:	e6d7      	b.n	800e31a <_dtoa_r+0x94a>
 800e56a:	9a01      	ldr	r2, [sp, #4]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d184      	bne.n	800e47a <_dtoa_r+0xaaa>
 800e570:	9b00      	ldr	r3, [sp, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	2331      	movs	r3, #49	; 0x31
 800e578:	7013      	strb	r3, [r2, #0]
 800e57a:	e6ce      	b.n	800e31a <_dtoa_r+0x94a>
 800e57c:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <_dtoa_r+0xbd4>)
 800e57e:	f7ff ba95 	b.w	800daac <_dtoa_r+0xdc>
 800e582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e584:	2b00      	cmp	r3, #0
 800e586:	f47f aa6e 	bne.w	800da66 <_dtoa_r+0x96>
 800e58a:	4b07      	ldr	r3, [pc, #28]	; (800e5a8 <_dtoa_r+0xbd8>)
 800e58c:	f7ff ba8e 	b.w	800daac <_dtoa_r+0xdc>
 800e590:	9b02      	ldr	r3, [sp, #8]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dcae      	bgt.n	800e4f4 <_dtoa_r+0xb24>
 800e596:	9b06      	ldr	r3, [sp, #24]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	f73f aea8 	bgt.w	800e2ee <_dtoa_r+0x91e>
 800e59e:	e7a9      	b.n	800e4f4 <_dtoa_r+0xb24>
 800e5a0:	0803d25b 	.word	0x0803d25b
 800e5a4:	0803d1b8 	.word	0x0803d1b8
 800e5a8:	0803d1dc 	.word	0x0803d1dc

0800e5ac <_localeconv_r>:
 800e5ac:	4800      	ldr	r0, [pc, #0]	; (800e5b0 <_localeconv_r+0x4>)
 800e5ae:	4770      	bx	lr
 800e5b0:	200003a4 	.word	0x200003a4

0800e5b4 <malloc>:
 800e5b4:	4b02      	ldr	r3, [pc, #8]	; (800e5c0 <malloc+0xc>)
 800e5b6:	4601      	mov	r1, r0
 800e5b8:	6818      	ldr	r0, [r3, #0]
 800e5ba:	f000 bc17 	b.w	800edec <_malloc_r>
 800e5be:	bf00      	nop
 800e5c0:	20000250 	.word	0x20000250

0800e5c4 <memcpy>:
 800e5c4:	440a      	add	r2, r1
 800e5c6:	4291      	cmp	r1, r2
 800e5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5cc:	d100      	bne.n	800e5d0 <memcpy+0xc>
 800e5ce:	4770      	bx	lr
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5da:	4291      	cmp	r1, r2
 800e5dc:	d1f9      	bne.n	800e5d2 <memcpy+0xe>
 800e5de:	bd10      	pop	{r4, pc}

0800e5e0 <_Balloc>:
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	460d      	mov	r5, r1
 800e5e8:	b976      	cbnz	r6, 800e608 <_Balloc+0x28>
 800e5ea:	2010      	movs	r0, #16
 800e5ec:	f7ff ffe2 	bl	800e5b4 <malloc>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	6260      	str	r0, [r4, #36]	; 0x24
 800e5f4:	b920      	cbnz	r0, 800e600 <_Balloc+0x20>
 800e5f6:	4b18      	ldr	r3, [pc, #96]	; (800e658 <_Balloc+0x78>)
 800e5f8:	4818      	ldr	r0, [pc, #96]	; (800e65c <_Balloc+0x7c>)
 800e5fa:	2166      	movs	r1, #102	; 0x66
 800e5fc:	f000 fdd6 	bl	800f1ac <__assert_func>
 800e600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e604:	6006      	str	r6, [r0, #0]
 800e606:	60c6      	str	r6, [r0, #12]
 800e608:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e60a:	68f3      	ldr	r3, [r6, #12]
 800e60c:	b183      	cbz	r3, 800e630 <_Balloc+0x50>
 800e60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e616:	b9b8      	cbnz	r0, 800e648 <_Balloc+0x68>
 800e618:	2101      	movs	r1, #1
 800e61a:	fa01 f605 	lsl.w	r6, r1, r5
 800e61e:	1d72      	adds	r2, r6, #5
 800e620:	0092      	lsls	r2, r2, #2
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fb60 	bl	800ece8 <_calloc_r>
 800e628:	b160      	cbz	r0, 800e644 <_Balloc+0x64>
 800e62a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e62e:	e00e      	b.n	800e64e <_Balloc+0x6e>
 800e630:	2221      	movs	r2, #33	; 0x21
 800e632:	2104      	movs	r1, #4
 800e634:	4620      	mov	r0, r4
 800e636:	f000 fb57 	bl	800ece8 <_calloc_r>
 800e63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e63c:	60f0      	str	r0, [r6, #12]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1e4      	bne.n	800e60e <_Balloc+0x2e>
 800e644:	2000      	movs	r0, #0
 800e646:	bd70      	pop	{r4, r5, r6, pc}
 800e648:	6802      	ldr	r2, [r0, #0]
 800e64a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e64e:	2300      	movs	r3, #0
 800e650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e654:	e7f7      	b.n	800e646 <_Balloc+0x66>
 800e656:	bf00      	nop
 800e658:	0803d1e9 	.word	0x0803d1e9
 800e65c:	0803d26c 	.word	0x0803d26c

0800e660 <_Bfree>:
 800e660:	b570      	push	{r4, r5, r6, lr}
 800e662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e664:	4605      	mov	r5, r0
 800e666:	460c      	mov	r4, r1
 800e668:	b976      	cbnz	r6, 800e688 <_Bfree+0x28>
 800e66a:	2010      	movs	r0, #16
 800e66c:	f7ff ffa2 	bl	800e5b4 <malloc>
 800e670:	4602      	mov	r2, r0
 800e672:	6268      	str	r0, [r5, #36]	; 0x24
 800e674:	b920      	cbnz	r0, 800e680 <_Bfree+0x20>
 800e676:	4b09      	ldr	r3, [pc, #36]	; (800e69c <_Bfree+0x3c>)
 800e678:	4809      	ldr	r0, [pc, #36]	; (800e6a0 <_Bfree+0x40>)
 800e67a:	218a      	movs	r1, #138	; 0x8a
 800e67c:	f000 fd96 	bl	800f1ac <__assert_func>
 800e680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e684:	6006      	str	r6, [r0, #0]
 800e686:	60c6      	str	r6, [r0, #12]
 800e688:	b13c      	cbz	r4, 800e69a <_Bfree+0x3a>
 800e68a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e68c:	6862      	ldr	r2, [r4, #4]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e694:	6021      	str	r1, [r4, #0]
 800e696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
 800e69c:	0803d1e9 	.word	0x0803d1e9
 800e6a0:	0803d26c 	.word	0x0803d26c

0800e6a4 <__multadd>:
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	690d      	ldr	r5, [r1, #16]
 800e6aa:	4607      	mov	r7, r0
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	461e      	mov	r6, r3
 800e6b0:	f101 0c14 	add.w	ip, r1, #20
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	f8dc 3000 	ldr.w	r3, [ip]
 800e6ba:	b299      	uxth	r1, r3
 800e6bc:	fb02 6101 	mla	r1, r2, r1, r6
 800e6c0:	0c1e      	lsrs	r6, r3, #16
 800e6c2:	0c0b      	lsrs	r3, r1, #16
 800e6c4:	fb02 3306 	mla	r3, r2, r6, r3
 800e6c8:	b289      	uxth	r1, r1
 800e6ca:	3001      	adds	r0, #1
 800e6cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e6d0:	4285      	cmp	r5, r0
 800e6d2:	f84c 1b04 	str.w	r1, [ip], #4
 800e6d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e6da:	dcec      	bgt.n	800e6b6 <__multadd+0x12>
 800e6dc:	b30e      	cbz	r6, 800e722 <__multadd+0x7e>
 800e6de:	68a3      	ldr	r3, [r4, #8]
 800e6e0:	42ab      	cmp	r3, r5
 800e6e2:	dc19      	bgt.n	800e718 <__multadd+0x74>
 800e6e4:	6861      	ldr	r1, [r4, #4]
 800e6e6:	4638      	mov	r0, r7
 800e6e8:	3101      	adds	r1, #1
 800e6ea:	f7ff ff79 	bl	800e5e0 <_Balloc>
 800e6ee:	4680      	mov	r8, r0
 800e6f0:	b928      	cbnz	r0, 800e6fe <__multadd+0x5a>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <__multadd+0x84>)
 800e6f6:	480d      	ldr	r0, [pc, #52]	; (800e72c <__multadd+0x88>)
 800e6f8:	21b5      	movs	r1, #181	; 0xb5
 800e6fa:	f000 fd57 	bl	800f1ac <__assert_func>
 800e6fe:	6922      	ldr	r2, [r4, #16]
 800e700:	3202      	adds	r2, #2
 800e702:	f104 010c 	add.w	r1, r4, #12
 800e706:	0092      	lsls	r2, r2, #2
 800e708:	300c      	adds	r0, #12
 800e70a:	f7ff ff5b 	bl	800e5c4 <memcpy>
 800e70e:	4621      	mov	r1, r4
 800e710:	4638      	mov	r0, r7
 800e712:	f7ff ffa5 	bl	800e660 <_Bfree>
 800e716:	4644      	mov	r4, r8
 800e718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e71c:	3501      	adds	r5, #1
 800e71e:	615e      	str	r6, [r3, #20]
 800e720:	6125      	str	r5, [r4, #16]
 800e722:	4620      	mov	r0, r4
 800e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e728:	0803d25b 	.word	0x0803d25b
 800e72c:	0803d26c 	.word	0x0803d26c

0800e730 <__hi0bits>:
 800e730:	0c03      	lsrs	r3, r0, #16
 800e732:	041b      	lsls	r3, r3, #16
 800e734:	b9d3      	cbnz	r3, 800e76c <__hi0bits+0x3c>
 800e736:	0400      	lsls	r0, r0, #16
 800e738:	2310      	movs	r3, #16
 800e73a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e73e:	bf04      	itt	eq
 800e740:	0200      	lsleq	r0, r0, #8
 800e742:	3308      	addeq	r3, #8
 800e744:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e748:	bf04      	itt	eq
 800e74a:	0100      	lsleq	r0, r0, #4
 800e74c:	3304      	addeq	r3, #4
 800e74e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e752:	bf04      	itt	eq
 800e754:	0080      	lsleq	r0, r0, #2
 800e756:	3302      	addeq	r3, #2
 800e758:	2800      	cmp	r0, #0
 800e75a:	db05      	blt.n	800e768 <__hi0bits+0x38>
 800e75c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e760:	f103 0301 	add.w	r3, r3, #1
 800e764:	bf08      	it	eq
 800e766:	2320      	moveq	r3, #32
 800e768:	4618      	mov	r0, r3
 800e76a:	4770      	bx	lr
 800e76c:	2300      	movs	r3, #0
 800e76e:	e7e4      	b.n	800e73a <__hi0bits+0xa>

0800e770 <__lo0bits>:
 800e770:	6803      	ldr	r3, [r0, #0]
 800e772:	f013 0207 	ands.w	r2, r3, #7
 800e776:	4601      	mov	r1, r0
 800e778:	d00b      	beq.n	800e792 <__lo0bits+0x22>
 800e77a:	07da      	lsls	r2, r3, #31
 800e77c:	d423      	bmi.n	800e7c6 <__lo0bits+0x56>
 800e77e:	0798      	lsls	r0, r3, #30
 800e780:	bf49      	itett	mi
 800e782:	085b      	lsrmi	r3, r3, #1
 800e784:	089b      	lsrpl	r3, r3, #2
 800e786:	2001      	movmi	r0, #1
 800e788:	600b      	strmi	r3, [r1, #0]
 800e78a:	bf5c      	itt	pl
 800e78c:	600b      	strpl	r3, [r1, #0]
 800e78e:	2002      	movpl	r0, #2
 800e790:	4770      	bx	lr
 800e792:	b298      	uxth	r0, r3
 800e794:	b9a8      	cbnz	r0, 800e7c2 <__lo0bits+0x52>
 800e796:	0c1b      	lsrs	r3, r3, #16
 800e798:	2010      	movs	r0, #16
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	b90a      	cbnz	r2, 800e7a2 <__lo0bits+0x32>
 800e79e:	3008      	adds	r0, #8
 800e7a0:	0a1b      	lsrs	r3, r3, #8
 800e7a2:	071a      	lsls	r2, r3, #28
 800e7a4:	bf04      	itt	eq
 800e7a6:	091b      	lsreq	r3, r3, #4
 800e7a8:	3004      	addeq	r0, #4
 800e7aa:	079a      	lsls	r2, r3, #30
 800e7ac:	bf04      	itt	eq
 800e7ae:	089b      	lsreq	r3, r3, #2
 800e7b0:	3002      	addeq	r0, #2
 800e7b2:	07da      	lsls	r2, r3, #31
 800e7b4:	d403      	bmi.n	800e7be <__lo0bits+0x4e>
 800e7b6:	085b      	lsrs	r3, r3, #1
 800e7b8:	f100 0001 	add.w	r0, r0, #1
 800e7bc:	d005      	beq.n	800e7ca <__lo0bits+0x5a>
 800e7be:	600b      	str	r3, [r1, #0]
 800e7c0:	4770      	bx	lr
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	e7e9      	b.n	800e79a <__lo0bits+0x2a>
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	4770      	bx	lr
 800e7ca:	2020      	movs	r0, #32
 800e7cc:	4770      	bx	lr
	...

0800e7d0 <__i2b>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	f7ff ff03 	bl	800e5e0 <_Balloc>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	b928      	cbnz	r0, 800e7ea <__i2b+0x1a>
 800e7de:	4b05      	ldr	r3, [pc, #20]	; (800e7f4 <__i2b+0x24>)
 800e7e0:	4805      	ldr	r0, [pc, #20]	; (800e7f8 <__i2b+0x28>)
 800e7e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e7e6:	f000 fce1 	bl	800f1ac <__assert_func>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	6144      	str	r4, [r0, #20]
 800e7ee:	6103      	str	r3, [r0, #16]
 800e7f0:	bd10      	pop	{r4, pc}
 800e7f2:	bf00      	nop
 800e7f4:	0803d25b 	.word	0x0803d25b
 800e7f8:	0803d26c 	.word	0x0803d26c

0800e7fc <__multiply>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	4691      	mov	r9, r2
 800e802:	690a      	ldr	r2, [r1, #16]
 800e804:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e808:	429a      	cmp	r2, r3
 800e80a:	bfb8      	it	lt
 800e80c:	460b      	movlt	r3, r1
 800e80e:	460c      	mov	r4, r1
 800e810:	bfbc      	itt	lt
 800e812:	464c      	movlt	r4, r9
 800e814:	4699      	movlt	r9, r3
 800e816:	6927      	ldr	r7, [r4, #16]
 800e818:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e81c:	68a3      	ldr	r3, [r4, #8]
 800e81e:	6861      	ldr	r1, [r4, #4]
 800e820:	eb07 060a 	add.w	r6, r7, sl
 800e824:	42b3      	cmp	r3, r6
 800e826:	b085      	sub	sp, #20
 800e828:	bfb8      	it	lt
 800e82a:	3101      	addlt	r1, #1
 800e82c:	f7ff fed8 	bl	800e5e0 <_Balloc>
 800e830:	b930      	cbnz	r0, 800e840 <__multiply+0x44>
 800e832:	4602      	mov	r2, r0
 800e834:	4b44      	ldr	r3, [pc, #272]	; (800e948 <__multiply+0x14c>)
 800e836:	4845      	ldr	r0, [pc, #276]	; (800e94c <__multiply+0x150>)
 800e838:	f240 115d 	movw	r1, #349	; 0x15d
 800e83c:	f000 fcb6 	bl	800f1ac <__assert_func>
 800e840:	f100 0514 	add.w	r5, r0, #20
 800e844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e848:	462b      	mov	r3, r5
 800e84a:	2200      	movs	r2, #0
 800e84c:	4543      	cmp	r3, r8
 800e84e:	d321      	bcc.n	800e894 <__multiply+0x98>
 800e850:	f104 0314 	add.w	r3, r4, #20
 800e854:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e858:	f109 0314 	add.w	r3, r9, #20
 800e85c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e860:	9202      	str	r2, [sp, #8]
 800e862:	1b3a      	subs	r2, r7, r4
 800e864:	3a15      	subs	r2, #21
 800e866:	f022 0203 	bic.w	r2, r2, #3
 800e86a:	3204      	adds	r2, #4
 800e86c:	f104 0115 	add.w	r1, r4, #21
 800e870:	428f      	cmp	r7, r1
 800e872:	bf38      	it	cc
 800e874:	2204      	movcc	r2, #4
 800e876:	9201      	str	r2, [sp, #4]
 800e878:	9a02      	ldr	r2, [sp, #8]
 800e87a:	9303      	str	r3, [sp, #12]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d80c      	bhi.n	800e89a <__multiply+0x9e>
 800e880:	2e00      	cmp	r6, #0
 800e882:	dd03      	ble.n	800e88c <__multiply+0x90>
 800e884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d05a      	beq.n	800e942 <__multiply+0x146>
 800e88c:	6106      	str	r6, [r0, #16]
 800e88e:	b005      	add	sp, #20
 800e890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e894:	f843 2b04 	str.w	r2, [r3], #4
 800e898:	e7d8      	b.n	800e84c <__multiply+0x50>
 800e89a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e89e:	f1ba 0f00 	cmp.w	sl, #0
 800e8a2:	d024      	beq.n	800e8ee <__multiply+0xf2>
 800e8a4:	f104 0e14 	add.w	lr, r4, #20
 800e8a8:	46a9      	mov	r9, r5
 800e8aa:	f04f 0c00 	mov.w	ip, #0
 800e8ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8b2:	f8d9 1000 	ldr.w	r1, [r9]
 800e8b6:	fa1f fb82 	uxth.w	fp, r2
 800e8ba:	b289      	uxth	r1, r1
 800e8bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8c4:	f8d9 2000 	ldr.w	r2, [r9]
 800e8c8:	4461      	add	r1, ip
 800e8ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800e8d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e8d6:	b289      	uxth	r1, r1
 800e8d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e8dc:	4577      	cmp	r7, lr
 800e8de:	f849 1b04 	str.w	r1, [r9], #4
 800e8e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8e6:	d8e2      	bhi.n	800e8ae <__multiply+0xb2>
 800e8e8:	9a01      	ldr	r2, [sp, #4]
 800e8ea:	f845 c002 	str.w	ip, [r5, r2]
 800e8ee:	9a03      	ldr	r2, [sp, #12]
 800e8f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	f1b9 0f00 	cmp.w	r9, #0
 800e8fa:	d020      	beq.n	800e93e <__multiply+0x142>
 800e8fc:	6829      	ldr	r1, [r5, #0]
 800e8fe:	f104 0c14 	add.w	ip, r4, #20
 800e902:	46ae      	mov	lr, r5
 800e904:	f04f 0a00 	mov.w	sl, #0
 800e908:	f8bc b000 	ldrh.w	fp, [ip]
 800e90c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e910:	fb09 220b 	mla	r2, r9, fp, r2
 800e914:	4492      	add	sl, r2
 800e916:	b289      	uxth	r1, r1
 800e918:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e91c:	f84e 1b04 	str.w	r1, [lr], #4
 800e920:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e924:	f8be 1000 	ldrh.w	r1, [lr]
 800e928:	0c12      	lsrs	r2, r2, #16
 800e92a:	fb09 1102 	mla	r1, r9, r2, r1
 800e92e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e932:	4567      	cmp	r7, ip
 800e934:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e938:	d8e6      	bhi.n	800e908 <__multiply+0x10c>
 800e93a:	9a01      	ldr	r2, [sp, #4]
 800e93c:	50a9      	str	r1, [r5, r2]
 800e93e:	3504      	adds	r5, #4
 800e940:	e79a      	b.n	800e878 <__multiply+0x7c>
 800e942:	3e01      	subs	r6, #1
 800e944:	e79c      	b.n	800e880 <__multiply+0x84>
 800e946:	bf00      	nop
 800e948:	0803d25b 	.word	0x0803d25b
 800e94c:	0803d26c 	.word	0x0803d26c

0800e950 <__pow5mult>:
 800e950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e954:	4615      	mov	r5, r2
 800e956:	f012 0203 	ands.w	r2, r2, #3
 800e95a:	4606      	mov	r6, r0
 800e95c:	460f      	mov	r7, r1
 800e95e:	d007      	beq.n	800e970 <__pow5mult+0x20>
 800e960:	4c25      	ldr	r4, [pc, #148]	; (800e9f8 <__pow5mult+0xa8>)
 800e962:	3a01      	subs	r2, #1
 800e964:	2300      	movs	r3, #0
 800e966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e96a:	f7ff fe9b 	bl	800e6a4 <__multadd>
 800e96e:	4607      	mov	r7, r0
 800e970:	10ad      	asrs	r5, r5, #2
 800e972:	d03d      	beq.n	800e9f0 <__pow5mult+0xa0>
 800e974:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e976:	b97c      	cbnz	r4, 800e998 <__pow5mult+0x48>
 800e978:	2010      	movs	r0, #16
 800e97a:	f7ff fe1b 	bl	800e5b4 <malloc>
 800e97e:	4602      	mov	r2, r0
 800e980:	6270      	str	r0, [r6, #36]	; 0x24
 800e982:	b928      	cbnz	r0, 800e990 <__pow5mult+0x40>
 800e984:	4b1d      	ldr	r3, [pc, #116]	; (800e9fc <__pow5mult+0xac>)
 800e986:	481e      	ldr	r0, [pc, #120]	; (800ea00 <__pow5mult+0xb0>)
 800e988:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e98c:	f000 fc0e 	bl	800f1ac <__assert_func>
 800e990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e994:	6004      	str	r4, [r0, #0]
 800e996:	60c4      	str	r4, [r0, #12]
 800e998:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e99c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9a0:	b94c      	cbnz	r4, 800e9b6 <__pow5mult+0x66>
 800e9a2:	f240 2171 	movw	r1, #625	; 0x271
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f7ff ff12 	bl	800e7d0 <__i2b>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	6003      	str	r3, [r0, #0]
 800e9b6:	f04f 0900 	mov.w	r9, #0
 800e9ba:	07eb      	lsls	r3, r5, #31
 800e9bc:	d50a      	bpl.n	800e9d4 <__pow5mult+0x84>
 800e9be:	4639      	mov	r1, r7
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f7ff ff1a 	bl	800e7fc <__multiply>
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	4680      	mov	r8, r0
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7ff fe47 	bl	800e660 <_Bfree>
 800e9d2:	4647      	mov	r7, r8
 800e9d4:	106d      	asrs	r5, r5, #1
 800e9d6:	d00b      	beq.n	800e9f0 <__pow5mult+0xa0>
 800e9d8:	6820      	ldr	r0, [r4, #0]
 800e9da:	b938      	cbnz	r0, 800e9ec <__pow5mult+0x9c>
 800e9dc:	4622      	mov	r2, r4
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	f7ff ff0b 	bl	800e7fc <__multiply>
 800e9e6:	6020      	str	r0, [r4, #0]
 800e9e8:	f8c0 9000 	str.w	r9, [r0]
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	e7e4      	b.n	800e9ba <__pow5mult+0x6a>
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0803d3b8 	.word	0x0803d3b8
 800e9fc:	0803d1e9 	.word	0x0803d1e9
 800ea00:	0803d26c 	.word	0x0803d26c

0800ea04 <__lshift>:
 800ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	460c      	mov	r4, r1
 800ea0a:	6849      	ldr	r1, [r1, #4]
 800ea0c:	6923      	ldr	r3, [r4, #16]
 800ea0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	4607      	mov	r7, r0
 800ea16:	4691      	mov	r9, r2
 800ea18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea1c:	f108 0601 	add.w	r6, r8, #1
 800ea20:	42b3      	cmp	r3, r6
 800ea22:	db0b      	blt.n	800ea3c <__lshift+0x38>
 800ea24:	4638      	mov	r0, r7
 800ea26:	f7ff fddb 	bl	800e5e0 <_Balloc>
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	b948      	cbnz	r0, 800ea42 <__lshift+0x3e>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	4b2a      	ldr	r3, [pc, #168]	; (800eadc <__lshift+0xd8>)
 800ea32:	482b      	ldr	r0, [pc, #172]	; (800eae0 <__lshift+0xdc>)
 800ea34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea38:	f000 fbb8 	bl	800f1ac <__assert_func>
 800ea3c:	3101      	adds	r1, #1
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	e7ee      	b.n	800ea20 <__lshift+0x1c>
 800ea42:	2300      	movs	r3, #0
 800ea44:	f100 0114 	add.w	r1, r0, #20
 800ea48:	f100 0210 	add.w	r2, r0, #16
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	4553      	cmp	r3, sl
 800ea50:	db37      	blt.n	800eac2 <__lshift+0xbe>
 800ea52:	6920      	ldr	r0, [r4, #16]
 800ea54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea58:	f104 0314 	add.w	r3, r4, #20
 800ea5c:	f019 091f 	ands.w	r9, r9, #31
 800ea60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea68:	d02f      	beq.n	800eaca <__lshift+0xc6>
 800ea6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ea6e:	468a      	mov	sl, r1
 800ea70:	f04f 0c00 	mov.w	ip, #0
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	fa02 f209 	lsl.w	r2, r2, r9
 800ea7a:	ea42 020c 	orr.w	r2, r2, ip
 800ea7e:	f84a 2b04 	str.w	r2, [sl], #4
 800ea82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea86:	4298      	cmp	r0, r3
 800ea88:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ea8c:	d8f2      	bhi.n	800ea74 <__lshift+0x70>
 800ea8e:	1b03      	subs	r3, r0, r4
 800ea90:	3b15      	subs	r3, #21
 800ea92:	f023 0303 	bic.w	r3, r3, #3
 800ea96:	3304      	adds	r3, #4
 800ea98:	f104 0215 	add.w	r2, r4, #21
 800ea9c:	4290      	cmp	r0, r2
 800ea9e:	bf38      	it	cc
 800eaa0:	2304      	movcc	r3, #4
 800eaa2:	f841 c003 	str.w	ip, [r1, r3]
 800eaa6:	f1bc 0f00 	cmp.w	ip, #0
 800eaaa:	d001      	beq.n	800eab0 <__lshift+0xac>
 800eaac:	f108 0602 	add.w	r6, r8, #2
 800eab0:	3e01      	subs	r6, #1
 800eab2:	4638      	mov	r0, r7
 800eab4:	612e      	str	r6, [r5, #16]
 800eab6:	4621      	mov	r1, r4
 800eab8:	f7ff fdd2 	bl	800e660 <_Bfree>
 800eabc:	4628      	mov	r0, r5
 800eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac2:	f842 0f04 	str.w	r0, [r2, #4]!
 800eac6:	3301      	adds	r3, #1
 800eac8:	e7c1      	b.n	800ea4e <__lshift+0x4a>
 800eaca:	3904      	subs	r1, #4
 800eacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ead4:	4298      	cmp	r0, r3
 800ead6:	d8f9      	bhi.n	800eacc <__lshift+0xc8>
 800ead8:	e7ea      	b.n	800eab0 <__lshift+0xac>
 800eada:	bf00      	nop
 800eadc:	0803d25b 	.word	0x0803d25b
 800eae0:	0803d26c 	.word	0x0803d26c

0800eae4 <__mcmp>:
 800eae4:	b530      	push	{r4, r5, lr}
 800eae6:	6902      	ldr	r2, [r0, #16]
 800eae8:	690c      	ldr	r4, [r1, #16]
 800eaea:	1b12      	subs	r2, r2, r4
 800eaec:	d10e      	bne.n	800eb0c <__mcmp+0x28>
 800eaee:	f100 0314 	add.w	r3, r0, #20
 800eaf2:	3114      	adds	r1, #20
 800eaf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eaf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eafc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb04:	42a5      	cmp	r5, r4
 800eb06:	d003      	beq.n	800eb10 <__mcmp+0x2c>
 800eb08:	d305      	bcc.n	800eb16 <__mcmp+0x32>
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	bd30      	pop	{r4, r5, pc}
 800eb10:	4283      	cmp	r3, r0
 800eb12:	d3f3      	bcc.n	800eafc <__mcmp+0x18>
 800eb14:	e7fa      	b.n	800eb0c <__mcmp+0x28>
 800eb16:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1a:	e7f7      	b.n	800eb0c <__mcmp+0x28>

0800eb1c <__mdiff>:
 800eb1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	460c      	mov	r4, r1
 800eb22:	4606      	mov	r6, r0
 800eb24:	4611      	mov	r1, r2
 800eb26:	4620      	mov	r0, r4
 800eb28:	4690      	mov	r8, r2
 800eb2a:	f7ff ffdb 	bl	800eae4 <__mcmp>
 800eb2e:	1e05      	subs	r5, r0, #0
 800eb30:	d110      	bne.n	800eb54 <__mdiff+0x38>
 800eb32:	4629      	mov	r1, r5
 800eb34:	4630      	mov	r0, r6
 800eb36:	f7ff fd53 	bl	800e5e0 <_Balloc>
 800eb3a:	b930      	cbnz	r0, 800eb4a <__mdiff+0x2e>
 800eb3c:	4b3a      	ldr	r3, [pc, #232]	; (800ec28 <__mdiff+0x10c>)
 800eb3e:	4602      	mov	r2, r0
 800eb40:	f240 2132 	movw	r1, #562	; 0x232
 800eb44:	4839      	ldr	r0, [pc, #228]	; (800ec2c <__mdiff+0x110>)
 800eb46:	f000 fb31 	bl	800f1ac <__assert_func>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	bfa4      	itt	ge
 800eb56:	4643      	movge	r3, r8
 800eb58:	46a0      	movge	r8, r4
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb60:	bfa6      	itte	ge
 800eb62:	461c      	movge	r4, r3
 800eb64:	2500      	movge	r5, #0
 800eb66:	2501      	movlt	r5, #1
 800eb68:	f7ff fd3a 	bl	800e5e0 <_Balloc>
 800eb6c:	b920      	cbnz	r0, 800eb78 <__mdiff+0x5c>
 800eb6e:	4b2e      	ldr	r3, [pc, #184]	; (800ec28 <__mdiff+0x10c>)
 800eb70:	4602      	mov	r2, r0
 800eb72:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb76:	e7e5      	b.n	800eb44 <__mdiff+0x28>
 800eb78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb7c:	6926      	ldr	r6, [r4, #16]
 800eb7e:	60c5      	str	r5, [r0, #12]
 800eb80:	f104 0914 	add.w	r9, r4, #20
 800eb84:	f108 0514 	add.w	r5, r8, #20
 800eb88:	f100 0e14 	add.w	lr, r0, #20
 800eb8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb94:	f108 0210 	add.w	r2, r8, #16
 800eb98:	46f2      	mov	sl, lr
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800eba0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eba4:	fa1f f883 	uxth.w	r8, r3
 800eba8:	fa11 f18b 	uxtah	r1, r1, fp
 800ebac:	0c1b      	lsrs	r3, r3, #16
 800ebae:	eba1 0808 	sub.w	r8, r1, r8
 800ebb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebba:	fa1f f888 	uxth.w	r8, r8
 800ebbe:	1419      	asrs	r1, r3, #16
 800ebc0:	454e      	cmp	r6, r9
 800ebc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebc6:	f84a 3b04 	str.w	r3, [sl], #4
 800ebca:	d8e7      	bhi.n	800eb9c <__mdiff+0x80>
 800ebcc:	1b33      	subs	r3, r6, r4
 800ebce:	3b15      	subs	r3, #21
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	3415      	adds	r4, #21
 800ebd8:	42a6      	cmp	r6, r4
 800ebda:	bf38      	it	cc
 800ebdc:	2304      	movcc	r3, #4
 800ebde:	441d      	add	r5, r3
 800ebe0:	4473      	add	r3, lr
 800ebe2:	469e      	mov	lr, r3
 800ebe4:	462e      	mov	r6, r5
 800ebe6:	4566      	cmp	r6, ip
 800ebe8:	d30e      	bcc.n	800ec08 <__mdiff+0xec>
 800ebea:	f10c 0203 	add.w	r2, ip, #3
 800ebee:	1b52      	subs	r2, r2, r5
 800ebf0:	f022 0203 	bic.w	r2, r2, #3
 800ebf4:	3d03      	subs	r5, #3
 800ebf6:	45ac      	cmp	ip, r5
 800ebf8:	bf38      	it	cc
 800ebfa:	2200      	movcc	r2, #0
 800ebfc:	441a      	add	r2, r3
 800ebfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec02:	b17b      	cbz	r3, 800ec24 <__mdiff+0x108>
 800ec04:	6107      	str	r7, [r0, #16]
 800ec06:	e7a3      	b.n	800eb50 <__mdiff+0x34>
 800ec08:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec0c:	fa11 f288 	uxtah	r2, r1, r8
 800ec10:	1414      	asrs	r4, r2, #16
 800ec12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec16:	b292      	uxth	r2, r2
 800ec18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec1c:	f84e 2b04 	str.w	r2, [lr], #4
 800ec20:	1421      	asrs	r1, r4, #16
 800ec22:	e7e0      	b.n	800ebe6 <__mdiff+0xca>
 800ec24:	3f01      	subs	r7, #1
 800ec26:	e7ea      	b.n	800ebfe <__mdiff+0xe2>
 800ec28:	0803d25b 	.word	0x0803d25b
 800ec2c:	0803d26c 	.word	0x0803d26c

0800ec30 <__d2b>:
 800ec30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec34:	4689      	mov	r9, r1
 800ec36:	2101      	movs	r1, #1
 800ec38:	ec57 6b10 	vmov	r6, r7, d0
 800ec3c:	4690      	mov	r8, r2
 800ec3e:	f7ff fccf 	bl	800e5e0 <_Balloc>
 800ec42:	4604      	mov	r4, r0
 800ec44:	b930      	cbnz	r0, 800ec54 <__d2b+0x24>
 800ec46:	4602      	mov	r2, r0
 800ec48:	4b25      	ldr	r3, [pc, #148]	; (800ece0 <__d2b+0xb0>)
 800ec4a:	4826      	ldr	r0, [pc, #152]	; (800ece4 <__d2b+0xb4>)
 800ec4c:	f240 310a 	movw	r1, #778	; 0x30a
 800ec50:	f000 faac 	bl	800f1ac <__assert_func>
 800ec54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec5c:	bb35      	cbnz	r5, 800ecac <__d2b+0x7c>
 800ec5e:	2e00      	cmp	r6, #0
 800ec60:	9301      	str	r3, [sp, #4]
 800ec62:	d028      	beq.n	800ecb6 <__d2b+0x86>
 800ec64:	4668      	mov	r0, sp
 800ec66:	9600      	str	r6, [sp, #0]
 800ec68:	f7ff fd82 	bl	800e770 <__lo0bits>
 800ec6c:	9900      	ldr	r1, [sp, #0]
 800ec6e:	b300      	cbz	r0, 800ecb2 <__d2b+0x82>
 800ec70:	9a01      	ldr	r2, [sp, #4]
 800ec72:	f1c0 0320 	rsb	r3, r0, #32
 800ec76:	fa02 f303 	lsl.w	r3, r2, r3
 800ec7a:	430b      	orrs	r3, r1
 800ec7c:	40c2      	lsrs	r2, r0
 800ec7e:	6163      	str	r3, [r4, #20]
 800ec80:	9201      	str	r2, [sp, #4]
 800ec82:	9b01      	ldr	r3, [sp, #4]
 800ec84:	61a3      	str	r3, [r4, #24]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	bf14      	ite	ne
 800ec8a:	2202      	movne	r2, #2
 800ec8c:	2201      	moveq	r2, #1
 800ec8e:	6122      	str	r2, [r4, #16]
 800ec90:	b1d5      	cbz	r5, 800ecc8 <__d2b+0x98>
 800ec92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec96:	4405      	add	r5, r0
 800ec98:	f8c9 5000 	str.w	r5, [r9]
 800ec9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eca0:	f8c8 0000 	str.w	r0, [r8]
 800eca4:	4620      	mov	r0, r4
 800eca6:	b003      	add	sp, #12
 800eca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecb0:	e7d5      	b.n	800ec5e <__d2b+0x2e>
 800ecb2:	6161      	str	r1, [r4, #20]
 800ecb4:	e7e5      	b.n	800ec82 <__d2b+0x52>
 800ecb6:	a801      	add	r0, sp, #4
 800ecb8:	f7ff fd5a 	bl	800e770 <__lo0bits>
 800ecbc:	9b01      	ldr	r3, [sp, #4]
 800ecbe:	6163      	str	r3, [r4, #20]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	6122      	str	r2, [r4, #16]
 800ecc4:	3020      	adds	r0, #32
 800ecc6:	e7e3      	b.n	800ec90 <__d2b+0x60>
 800ecc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eccc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecd0:	f8c9 0000 	str.w	r0, [r9]
 800ecd4:	6918      	ldr	r0, [r3, #16]
 800ecd6:	f7ff fd2b 	bl	800e730 <__hi0bits>
 800ecda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecde:	e7df      	b.n	800eca0 <__d2b+0x70>
 800ece0:	0803d25b 	.word	0x0803d25b
 800ece4:	0803d26c 	.word	0x0803d26c

0800ece8 <_calloc_r>:
 800ece8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecea:	fba1 2402 	umull	r2, r4, r1, r2
 800ecee:	b94c      	cbnz	r4, 800ed04 <_calloc_r+0x1c>
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	9201      	str	r2, [sp, #4]
 800ecf4:	f000 f87a 	bl	800edec <_malloc_r>
 800ecf8:	9a01      	ldr	r2, [sp, #4]
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	b930      	cbnz	r0, 800ed0c <_calloc_r+0x24>
 800ecfe:	4628      	mov	r0, r5
 800ed00:	b003      	add	sp, #12
 800ed02:	bd30      	pop	{r4, r5, pc}
 800ed04:	220c      	movs	r2, #12
 800ed06:	6002      	str	r2, [r0, #0]
 800ed08:	2500      	movs	r5, #0
 800ed0a:	e7f8      	b.n	800ecfe <_calloc_r+0x16>
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f7fe f92f 	bl	800cf70 <memset>
 800ed12:	e7f4      	b.n	800ecfe <_calloc_r+0x16>

0800ed14 <_free_r>:
 800ed14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed16:	2900      	cmp	r1, #0
 800ed18:	d044      	beq.n	800eda4 <_free_r+0x90>
 800ed1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed1e:	9001      	str	r0, [sp, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f1a1 0404 	sub.w	r4, r1, #4
 800ed26:	bfb8      	it	lt
 800ed28:	18e4      	addlt	r4, r4, r3
 800ed2a:	f000 fa9b 	bl	800f264 <__malloc_lock>
 800ed2e:	4a1e      	ldr	r2, [pc, #120]	; (800eda8 <_free_r+0x94>)
 800ed30:	9801      	ldr	r0, [sp, #4]
 800ed32:	6813      	ldr	r3, [r2, #0]
 800ed34:	b933      	cbnz	r3, 800ed44 <_free_r+0x30>
 800ed36:	6063      	str	r3, [r4, #4]
 800ed38:	6014      	str	r4, [r2, #0]
 800ed3a:	b003      	add	sp, #12
 800ed3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed40:	f000 ba96 	b.w	800f270 <__malloc_unlock>
 800ed44:	42a3      	cmp	r3, r4
 800ed46:	d908      	bls.n	800ed5a <_free_r+0x46>
 800ed48:	6825      	ldr	r5, [r4, #0]
 800ed4a:	1961      	adds	r1, r4, r5
 800ed4c:	428b      	cmp	r3, r1
 800ed4e:	bf01      	itttt	eq
 800ed50:	6819      	ldreq	r1, [r3, #0]
 800ed52:	685b      	ldreq	r3, [r3, #4]
 800ed54:	1949      	addeq	r1, r1, r5
 800ed56:	6021      	streq	r1, [r4, #0]
 800ed58:	e7ed      	b.n	800ed36 <_free_r+0x22>
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	b10b      	cbz	r3, 800ed64 <_free_r+0x50>
 800ed60:	42a3      	cmp	r3, r4
 800ed62:	d9fa      	bls.n	800ed5a <_free_r+0x46>
 800ed64:	6811      	ldr	r1, [r2, #0]
 800ed66:	1855      	adds	r5, r2, r1
 800ed68:	42a5      	cmp	r5, r4
 800ed6a:	d10b      	bne.n	800ed84 <_free_r+0x70>
 800ed6c:	6824      	ldr	r4, [r4, #0]
 800ed6e:	4421      	add	r1, r4
 800ed70:	1854      	adds	r4, r2, r1
 800ed72:	42a3      	cmp	r3, r4
 800ed74:	6011      	str	r1, [r2, #0]
 800ed76:	d1e0      	bne.n	800ed3a <_free_r+0x26>
 800ed78:	681c      	ldr	r4, [r3, #0]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	6053      	str	r3, [r2, #4]
 800ed7e:	4421      	add	r1, r4
 800ed80:	6011      	str	r1, [r2, #0]
 800ed82:	e7da      	b.n	800ed3a <_free_r+0x26>
 800ed84:	d902      	bls.n	800ed8c <_free_r+0x78>
 800ed86:	230c      	movs	r3, #12
 800ed88:	6003      	str	r3, [r0, #0]
 800ed8a:	e7d6      	b.n	800ed3a <_free_r+0x26>
 800ed8c:	6825      	ldr	r5, [r4, #0]
 800ed8e:	1961      	adds	r1, r4, r5
 800ed90:	428b      	cmp	r3, r1
 800ed92:	bf04      	itt	eq
 800ed94:	6819      	ldreq	r1, [r3, #0]
 800ed96:	685b      	ldreq	r3, [r3, #4]
 800ed98:	6063      	str	r3, [r4, #4]
 800ed9a:	bf04      	itt	eq
 800ed9c:	1949      	addeq	r1, r1, r5
 800ed9e:	6021      	streq	r1, [r4, #0]
 800eda0:	6054      	str	r4, [r2, #4]
 800eda2:	e7ca      	b.n	800ed3a <_free_r+0x26>
 800eda4:	b003      	add	sp, #12
 800eda6:	bd30      	pop	{r4, r5, pc}
 800eda8:	200008c8 	.word	0x200008c8

0800edac <sbrk_aligned>:
 800edac:	b570      	push	{r4, r5, r6, lr}
 800edae:	4e0e      	ldr	r6, [pc, #56]	; (800ede8 <sbrk_aligned+0x3c>)
 800edb0:	460c      	mov	r4, r1
 800edb2:	6831      	ldr	r1, [r6, #0]
 800edb4:	4605      	mov	r5, r0
 800edb6:	b911      	cbnz	r1, 800edbe <sbrk_aligned+0x12>
 800edb8:	f000 f9e8 	bl	800f18c <_sbrk_r>
 800edbc:	6030      	str	r0, [r6, #0]
 800edbe:	4621      	mov	r1, r4
 800edc0:	4628      	mov	r0, r5
 800edc2:	f000 f9e3 	bl	800f18c <_sbrk_r>
 800edc6:	1c43      	adds	r3, r0, #1
 800edc8:	d00a      	beq.n	800ede0 <sbrk_aligned+0x34>
 800edca:	1cc4      	adds	r4, r0, #3
 800edcc:	f024 0403 	bic.w	r4, r4, #3
 800edd0:	42a0      	cmp	r0, r4
 800edd2:	d007      	beq.n	800ede4 <sbrk_aligned+0x38>
 800edd4:	1a21      	subs	r1, r4, r0
 800edd6:	4628      	mov	r0, r5
 800edd8:	f000 f9d8 	bl	800f18c <_sbrk_r>
 800eddc:	3001      	adds	r0, #1
 800edde:	d101      	bne.n	800ede4 <sbrk_aligned+0x38>
 800ede0:	f04f 34ff 	mov.w	r4, #4294967295
 800ede4:	4620      	mov	r0, r4
 800ede6:	bd70      	pop	{r4, r5, r6, pc}
 800ede8:	200008cc 	.word	0x200008cc

0800edec <_malloc_r>:
 800edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf0:	1ccd      	adds	r5, r1, #3
 800edf2:	f025 0503 	bic.w	r5, r5, #3
 800edf6:	3508      	adds	r5, #8
 800edf8:	2d0c      	cmp	r5, #12
 800edfa:	bf38      	it	cc
 800edfc:	250c      	movcc	r5, #12
 800edfe:	2d00      	cmp	r5, #0
 800ee00:	4607      	mov	r7, r0
 800ee02:	db01      	blt.n	800ee08 <_malloc_r+0x1c>
 800ee04:	42a9      	cmp	r1, r5
 800ee06:	d905      	bls.n	800ee14 <_malloc_r+0x28>
 800ee08:	230c      	movs	r3, #12
 800ee0a:	603b      	str	r3, [r7, #0]
 800ee0c:	2600      	movs	r6, #0
 800ee0e:	4630      	mov	r0, r6
 800ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee14:	4e2e      	ldr	r6, [pc, #184]	; (800eed0 <_malloc_r+0xe4>)
 800ee16:	f000 fa25 	bl	800f264 <__malloc_lock>
 800ee1a:	6833      	ldr	r3, [r6, #0]
 800ee1c:	461c      	mov	r4, r3
 800ee1e:	bb34      	cbnz	r4, 800ee6e <_malloc_r+0x82>
 800ee20:	4629      	mov	r1, r5
 800ee22:	4638      	mov	r0, r7
 800ee24:	f7ff ffc2 	bl	800edac <sbrk_aligned>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	d14d      	bne.n	800eeca <_malloc_r+0xde>
 800ee2e:	6834      	ldr	r4, [r6, #0]
 800ee30:	4626      	mov	r6, r4
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d140      	bne.n	800eeb8 <_malloc_r+0xcc>
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	4631      	mov	r1, r6
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	eb04 0803 	add.w	r8, r4, r3
 800ee40:	f000 f9a4 	bl	800f18c <_sbrk_r>
 800ee44:	4580      	cmp	r8, r0
 800ee46:	d13a      	bne.n	800eebe <_malloc_r+0xd2>
 800ee48:	6821      	ldr	r1, [r4, #0]
 800ee4a:	3503      	adds	r5, #3
 800ee4c:	1a6d      	subs	r5, r5, r1
 800ee4e:	f025 0503 	bic.w	r5, r5, #3
 800ee52:	3508      	adds	r5, #8
 800ee54:	2d0c      	cmp	r5, #12
 800ee56:	bf38      	it	cc
 800ee58:	250c      	movcc	r5, #12
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	4638      	mov	r0, r7
 800ee5e:	f7ff ffa5 	bl	800edac <sbrk_aligned>
 800ee62:	3001      	adds	r0, #1
 800ee64:	d02b      	beq.n	800eebe <_malloc_r+0xd2>
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	442b      	add	r3, r5
 800ee6a:	6023      	str	r3, [r4, #0]
 800ee6c:	e00e      	b.n	800ee8c <_malloc_r+0xa0>
 800ee6e:	6822      	ldr	r2, [r4, #0]
 800ee70:	1b52      	subs	r2, r2, r5
 800ee72:	d41e      	bmi.n	800eeb2 <_malloc_r+0xc6>
 800ee74:	2a0b      	cmp	r2, #11
 800ee76:	d916      	bls.n	800eea6 <_malloc_r+0xba>
 800ee78:	1961      	adds	r1, r4, r5
 800ee7a:	42a3      	cmp	r3, r4
 800ee7c:	6025      	str	r5, [r4, #0]
 800ee7e:	bf18      	it	ne
 800ee80:	6059      	strne	r1, [r3, #4]
 800ee82:	6863      	ldr	r3, [r4, #4]
 800ee84:	bf08      	it	eq
 800ee86:	6031      	streq	r1, [r6, #0]
 800ee88:	5162      	str	r2, [r4, r5]
 800ee8a:	604b      	str	r3, [r1, #4]
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	f104 060b 	add.w	r6, r4, #11
 800ee92:	f000 f9ed 	bl	800f270 <__malloc_unlock>
 800ee96:	f026 0607 	bic.w	r6, r6, #7
 800ee9a:	1d23      	adds	r3, r4, #4
 800ee9c:	1af2      	subs	r2, r6, r3
 800ee9e:	d0b6      	beq.n	800ee0e <_malloc_r+0x22>
 800eea0:	1b9b      	subs	r3, r3, r6
 800eea2:	50a3      	str	r3, [r4, r2]
 800eea4:	e7b3      	b.n	800ee0e <_malloc_r+0x22>
 800eea6:	6862      	ldr	r2, [r4, #4]
 800eea8:	42a3      	cmp	r3, r4
 800eeaa:	bf0c      	ite	eq
 800eeac:	6032      	streq	r2, [r6, #0]
 800eeae:	605a      	strne	r2, [r3, #4]
 800eeb0:	e7ec      	b.n	800ee8c <_malloc_r+0xa0>
 800eeb2:	4623      	mov	r3, r4
 800eeb4:	6864      	ldr	r4, [r4, #4]
 800eeb6:	e7b2      	b.n	800ee1e <_malloc_r+0x32>
 800eeb8:	4634      	mov	r4, r6
 800eeba:	6876      	ldr	r6, [r6, #4]
 800eebc:	e7b9      	b.n	800ee32 <_malloc_r+0x46>
 800eebe:	230c      	movs	r3, #12
 800eec0:	603b      	str	r3, [r7, #0]
 800eec2:	4638      	mov	r0, r7
 800eec4:	f000 f9d4 	bl	800f270 <__malloc_unlock>
 800eec8:	e7a1      	b.n	800ee0e <_malloc_r+0x22>
 800eeca:	6025      	str	r5, [r4, #0]
 800eecc:	e7de      	b.n	800ee8c <_malloc_r+0xa0>
 800eece:	bf00      	nop
 800eed0:	200008c8 	.word	0x200008c8

0800eed4 <__ssputs_r>:
 800eed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eed8:	688e      	ldr	r6, [r1, #8]
 800eeda:	429e      	cmp	r6, r3
 800eedc:	4682      	mov	sl, r0
 800eede:	460c      	mov	r4, r1
 800eee0:	4690      	mov	r8, r2
 800eee2:	461f      	mov	r7, r3
 800eee4:	d838      	bhi.n	800ef58 <__ssputs_r+0x84>
 800eee6:	898a      	ldrh	r2, [r1, #12]
 800eee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eeec:	d032      	beq.n	800ef54 <__ssputs_r+0x80>
 800eeee:	6825      	ldr	r5, [r4, #0]
 800eef0:	6909      	ldr	r1, [r1, #16]
 800eef2:	eba5 0901 	sub.w	r9, r5, r1
 800eef6:	6965      	ldr	r5, [r4, #20]
 800eef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eefc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef00:	3301      	adds	r3, #1
 800ef02:	444b      	add	r3, r9
 800ef04:	106d      	asrs	r5, r5, #1
 800ef06:	429d      	cmp	r5, r3
 800ef08:	bf38      	it	cc
 800ef0a:	461d      	movcc	r5, r3
 800ef0c:	0553      	lsls	r3, r2, #21
 800ef0e:	d531      	bpl.n	800ef74 <__ssputs_r+0xa0>
 800ef10:	4629      	mov	r1, r5
 800ef12:	f7ff ff6b 	bl	800edec <_malloc_r>
 800ef16:	4606      	mov	r6, r0
 800ef18:	b950      	cbnz	r0, 800ef30 <__ssputs_r+0x5c>
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	f8ca 3000 	str.w	r3, [sl]
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef26:	81a3      	strh	r3, [r4, #12]
 800ef28:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef30:	6921      	ldr	r1, [r4, #16]
 800ef32:	464a      	mov	r2, r9
 800ef34:	f7ff fb46 	bl	800e5c4 <memcpy>
 800ef38:	89a3      	ldrh	r3, [r4, #12]
 800ef3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef42:	81a3      	strh	r3, [r4, #12]
 800ef44:	6126      	str	r6, [r4, #16]
 800ef46:	6165      	str	r5, [r4, #20]
 800ef48:	444e      	add	r6, r9
 800ef4a:	eba5 0509 	sub.w	r5, r5, r9
 800ef4e:	6026      	str	r6, [r4, #0]
 800ef50:	60a5      	str	r5, [r4, #8]
 800ef52:	463e      	mov	r6, r7
 800ef54:	42be      	cmp	r6, r7
 800ef56:	d900      	bls.n	800ef5a <__ssputs_r+0x86>
 800ef58:	463e      	mov	r6, r7
 800ef5a:	6820      	ldr	r0, [r4, #0]
 800ef5c:	4632      	mov	r2, r6
 800ef5e:	4641      	mov	r1, r8
 800ef60:	f000 f966 	bl	800f230 <memmove>
 800ef64:	68a3      	ldr	r3, [r4, #8]
 800ef66:	1b9b      	subs	r3, r3, r6
 800ef68:	60a3      	str	r3, [r4, #8]
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	4433      	add	r3, r6
 800ef6e:	6023      	str	r3, [r4, #0]
 800ef70:	2000      	movs	r0, #0
 800ef72:	e7db      	b.n	800ef2c <__ssputs_r+0x58>
 800ef74:	462a      	mov	r2, r5
 800ef76:	f000 f981 	bl	800f27c <_realloc_r>
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d1e1      	bne.n	800ef44 <__ssputs_r+0x70>
 800ef80:	6921      	ldr	r1, [r4, #16]
 800ef82:	4650      	mov	r0, sl
 800ef84:	f7ff fec6 	bl	800ed14 <_free_r>
 800ef88:	e7c7      	b.n	800ef1a <__ssputs_r+0x46>
	...

0800ef8c <_svfiprintf_r>:
 800ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef90:	4698      	mov	r8, r3
 800ef92:	898b      	ldrh	r3, [r1, #12]
 800ef94:	061b      	lsls	r3, r3, #24
 800ef96:	b09d      	sub	sp, #116	; 0x74
 800ef98:	4607      	mov	r7, r0
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	4614      	mov	r4, r2
 800ef9e:	d50e      	bpl.n	800efbe <_svfiprintf_r+0x32>
 800efa0:	690b      	ldr	r3, [r1, #16]
 800efa2:	b963      	cbnz	r3, 800efbe <_svfiprintf_r+0x32>
 800efa4:	2140      	movs	r1, #64	; 0x40
 800efa6:	f7ff ff21 	bl	800edec <_malloc_r>
 800efaa:	6028      	str	r0, [r5, #0]
 800efac:	6128      	str	r0, [r5, #16]
 800efae:	b920      	cbnz	r0, 800efba <_svfiprintf_r+0x2e>
 800efb0:	230c      	movs	r3, #12
 800efb2:	603b      	str	r3, [r7, #0]
 800efb4:	f04f 30ff 	mov.w	r0, #4294967295
 800efb8:	e0d1      	b.n	800f15e <_svfiprintf_r+0x1d2>
 800efba:	2340      	movs	r3, #64	; 0x40
 800efbc:	616b      	str	r3, [r5, #20]
 800efbe:	2300      	movs	r3, #0
 800efc0:	9309      	str	r3, [sp, #36]	; 0x24
 800efc2:	2320      	movs	r3, #32
 800efc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800efcc:	2330      	movs	r3, #48	; 0x30
 800efce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f178 <_svfiprintf_r+0x1ec>
 800efd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efd6:	f04f 0901 	mov.w	r9, #1
 800efda:	4623      	mov	r3, r4
 800efdc:	469a      	mov	sl, r3
 800efde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efe2:	b10a      	cbz	r2, 800efe8 <_svfiprintf_r+0x5c>
 800efe4:	2a25      	cmp	r2, #37	; 0x25
 800efe6:	d1f9      	bne.n	800efdc <_svfiprintf_r+0x50>
 800efe8:	ebba 0b04 	subs.w	fp, sl, r4
 800efec:	d00b      	beq.n	800f006 <_svfiprintf_r+0x7a>
 800efee:	465b      	mov	r3, fp
 800eff0:	4622      	mov	r2, r4
 800eff2:	4629      	mov	r1, r5
 800eff4:	4638      	mov	r0, r7
 800eff6:	f7ff ff6d 	bl	800eed4 <__ssputs_r>
 800effa:	3001      	adds	r0, #1
 800effc:	f000 80aa 	beq.w	800f154 <_svfiprintf_r+0x1c8>
 800f000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f002:	445a      	add	r2, fp
 800f004:	9209      	str	r2, [sp, #36]	; 0x24
 800f006:	f89a 3000 	ldrb.w	r3, [sl]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 80a2 	beq.w	800f154 <_svfiprintf_r+0x1c8>
 800f010:	2300      	movs	r3, #0
 800f012:	f04f 32ff 	mov.w	r2, #4294967295
 800f016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f01a:	f10a 0a01 	add.w	sl, sl, #1
 800f01e:	9304      	str	r3, [sp, #16]
 800f020:	9307      	str	r3, [sp, #28]
 800f022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f026:	931a      	str	r3, [sp, #104]	; 0x68
 800f028:	4654      	mov	r4, sl
 800f02a:	2205      	movs	r2, #5
 800f02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f030:	4851      	ldr	r0, [pc, #324]	; (800f178 <_svfiprintf_r+0x1ec>)
 800f032:	f7f1 f8dd 	bl	80001f0 <memchr>
 800f036:	9a04      	ldr	r2, [sp, #16]
 800f038:	b9d8      	cbnz	r0, 800f072 <_svfiprintf_r+0xe6>
 800f03a:	06d0      	lsls	r0, r2, #27
 800f03c:	bf44      	itt	mi
 800f03e:	2320      	movmi	r3, #32
 800f040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f044:	0711      	lsls	r1, r2, #28
 800f046:	bf44      	itt	mi
 800f048:	232b      	movmi	r3, #43	; 0x2b
 800f04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f04e:	f89a 3000 	ldrb.w	r3, [sl]
 800f052:	2b2a      	cmp	r3, #42	; 0x2a
 800f054:	d015      	beq.n	800f082 <_svfiprintf_r+0xf6>
 800f056:	9a07      	ldr	r2, [sp, #28]
 800f058:	4654      	mov	r4, sl
 800f05a:	2000      	movs	r0, #0
 800f05c:	f04f 0c0a 	mov.w	ip, #10
 800f060:	4621      	mov	r1, r4
 800f062:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f066:	3b30      	subs	r3, #48	; 0x30
 800f068:	2b09      	cmp	r3, #9
 800f06a:	d94e      	bls.n	800f10a <_svfiprintf_r+0x17e>
 800f06c:	b1b0      	cbz	r0, 800f09c <_svfiprintf_r+0x110>
 800f06e:	9207      	str	r2, [sp, #28]
 800f070:	e014      	b.n	800f09c <_svfiprintf_r+0x110>
 800f072:	eba0 0308 	sub.w	r3, r0, r8
 800f076:	fa09 f303 	lsl.w	r3, r9, r3
 800f07a:	4313      	orrs	r3, r2
 800f07c:	9304      	str	r3, [sp, #16]
 800f07e:	46a2      	mov	sl, r4
 800f080:	e7d2      	b.n	800f028 <_svfiprintf_r+0x9c>
 800f082:	9b03      	ldr	r3, [sp, #12]
 800f084:	1d19      	adds	r1, r3, #4
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	9103      	str	r1, [sp, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	bfbb      	ittet	lt
 800f08e:	425b      	neglt	r3, r3
 800f090:	f042 0202 	orrlt.w	r2, r2, #2
 800f094:	9307      	strge	r3, [sp, #28]
 800f096:	9307      	strlt	r3, [sp, #28]
 800f098:	bfb8      	it	lt
 800f09a:	9204      	strlt	r2, [sp, #16]
 800f09c:	7823      	ldrb	r3, [r4, #0]
 800f09e:	2b2e      	cmp	r3, #46	; 0x2e
 800f0a0:	d10c      	bne.n	800f0bc <_svfiprintf_r+0x130>
 800f0a2:	7863      	ldrb	r3, [r4, #1]
 800f0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f0a6:	d135      	bne.n	800f114 <_svfiprintf_r+0x188>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	1d1a      	adds	r2, r3, #4
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	9203      	str	r2, [sp, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	bfb8      	it	lt
 800f0b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0b8:	3402      	adds	r4, #2
 800f0ba:	9305      	str	r3, [sp, #20]
 800f0bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f188 <_svfiprintf_r+0x1fc>
 800f0c0:	7821      	ldrb	r1, [r4, #0]
 800f0c2:	2203      	movs	r2, #3
 800f0c4:	4650      	mov	r0, sl
 800f0c6:	f7f1 f893 	bl	80001f0 <memchr>
 800f0ca:	b140      	cbz	r0, 800f0de <_svfiprintf_r+0x152>
 800f0cc:	2340      	movs	r3, #64	; 0x40
 800f0ce:	eba0 000a 	sub.w	r0, r0, sl
 800f0d2:	fa03 f000 	lsl.w	r0, r3, r0
 800f0d6:	9b04      	ldr	r3, [sp, #16]
 800f0d8:	4303      	orrs	r3, r0
 800f0da:	3401      	adds	r4, #1
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e2:	4826      	ldr	r0, [pc, #152]	; (800f17c <_svfiprintf_r+0x1f0>)
 800f0e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0e8:	2206      	movs	r2, #6
 800f0ea:	f7f1 f881 	bl	80001f0 <memchr>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d038      	beq.n	800f164 <_svfiprintf_r+0x1d8>
 800f0f2:	4b23      	ldr	r3, [pc, #140]	; (800f180 <_svfiprintf_r+0x1f4>)
 800f0f4:	bb1b      	cbnz	r3, 800f13e <_svfiprintf_r+0x1b2>
 800f0f6:	9b03      	ldr	r3, [sp, #12]
 800f0f8:	3307      	adds	r3, #7
 800f0fa:	f023 0307 	bic.w	r3, r3, #7
 800f0fe:	3308      	adds	r3, #8
 800f100:	9303      	str	r3, [sp, #12]
 800f102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f104:	4433      	add	r3, r6
 800f106:	9309      	str	r3, [sp, #36]	; 0x24
 800f108:	e767      	b.n	800efda <_svfiprintf_r+0x4e>
 800f10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f10e:	460c      	mov	r4, r1
 800f110:	2001      	movs	r0, #1
 800f112:	e7a5      	b.n	800f060 <_svfiprintf_r+0xd4>
 800f114:	2300      	movs	r3, #0
 800f116:	3401      	adds	r4, #1
 800f118:	9305      	str	r3, [sp, #20]
 800f11a:	4619      	mov	r1, r3
 800f11c:	f04f 0c0a 	mov.w	ip, #10
 800f120:	4620      	mov	r0, r4
 800f122:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f126:	3a30      	subs	r2, #48	; 0x30
 800f128:	2a09      	cmp	r2, #9
 800f12a:	d903      	bls.n	800f134 <_svfiprintf_r+0x1a8>
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0c5      	beq.n	800f0bc <_svfiprintf_r+0x130>
 800f130:	9105      	str	r1, [sp, #20]
 800f132:	e7c3      	b.n	800f0bc <_svfiprintf_r+0x130>
 800f134:	fb0c 2101 	mla	r1, ip, r1, r2
 800f138:	4604      	mov	r4, r0
 800f13a:	2301      	movs	r3, #1
 800f13c:	e7f0      	b.n	800f120 <_svfiprintf_r+0x194>
 800f13e:	ab03      	add	r3, sp, #12
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	462a      	mov	r2, r5
 800f144:	4b0f      	ldr	r3, [pc, #60]	; (800f184 <_svfiprintf_r+0x1f8>)
 800f146:	a904      	add	r1, sp, #16
 800f148:	4638      	mov	r0, r7
 800f14a:	f7fd ffb9 	bl	800d0c0 <_printf_float>
 800f14e:	1c42      	adds	r2, r0, #1
 800f150:	4606      	mov	r6, r0
 800f152:	d1d6      	bne.n	800f102 <_svfiprintf_r+0x176>
 800f154:	89ab      	ldrh	r3, [r5, #12]
 800f156:	065b      	lsls	r3, r3, #25
 800f158:	f53f af2c 	bmi.w	800efb4 <_svfiprintf_r+0x28>
 800f15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f15e:	b01d      	add	sp, #116	; 0x74
 800f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f164:	ab03      	add	r3, sp, #12
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	462a      	mov	r2, r5
 800f16a:	4b06      	ldr	r3, [pc, #24]	; (800f184 <_svfiprintf_r+0x1f8>)
 800f16c:	a904      	add	r1, sp, #16
 800f16e:	4638      	mov	r0, r7
 800f170:	f7fe fa4a 	bl	800d608 <_printf_i>
 800f174:	e7eb      	b.n	800f14e <_svfiprintf_r+0x1c2>
 800f176:	bf00      	nop
 800f178:	0803d3c4 	.word	0x0803d3c4
 800f17c:	0803d3ce 	.word	0x0803d3ce
 800f180:	0800d0c1 	.word	0x0800d0c1
 800f184:	0800eed5 	.word	0x0800eed5
 800f188:	0803d3ca 	.word	0x0803d3ca

0800f18c <_sbrk_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4d06      	ldr	r5, [pc, #24]	; (800f1a8 <_sbrk_r+0x1c>)
 800f190:	2300      	movs	r3, #0
 800f192:	4604      	mov	r4, r0
 800f194:	4608      	mov	r0, r1
 800f196:	602b      	str	r3, [r5, #0]
 800f198:	f7f6 fb38 	bl	800580c <_sbrk>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_sbrk_r+0x1a>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_sbrk_r+0x1a>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	200008d0 	.word	0x200008d0

0800f1ac <__assert_func>:
 800f1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1ae:	4614      	mov	r4, r2
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4b09      	ldr	r3, [pc, #36]	; (800f1d8 <__assert_func+0x2c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	68d8      	ldr	r0, [r3, #12]
 800f1ba:	b14c      	cbz	r4, 800f1d0 <__assert_func+0x24>
 800f1bc:	4b07      	ldr	r3, [pc, #28]	; (800f1dc <__assert_func+0x30>)
 800f1be:	9100      	str	r1, [sp, #0]
 800f1c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1c4:	4906      	ldr	r1, [pc, #24]	; (800f1e0 <__assert_func+0x34>)
 800f1c6:	462b      	mov	r3, r5
 800f1c8:	f000 f80e 	bl	800f1e8 <fiprintf>
 800f1cc:	f000 faac 	bl	800f728 <abort>
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <__assert_func+0x38>)
 800f1d2:	461c      	mov	r4, r3
 800f1d4:	e7f3      	b.n	800f1be <__assert_func+0x12>
 800f1d6:	bf00      	nop
 800f1d8:	20000250 	.word	0x20000250
 800f1dc:	0803d3d5 	.word	0x0803d3d5
 800f1e0:	0803d3e2 	.word	0x0803d3e2
 800f1e4:	0803d410 	.word	0x0803d410

0800f1e8 <fiprintf>:
 800f1e8:	b40e      	push	{r1, r2, r3}
 800f1ea:	b503      	push	{r0, r1, lr}
 800f1ec:	4601      	mov	r1, r0
 800f1ee:	ab03      	add	r3, sp, #12
 800f1f0:	4805      	ldr	r0, [pc, #20]	; (800f208 <fiprintf+0x20>)
 800f1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f6:	6800      	ldr	r0, [r0, #0]
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	f000 f897 	bl	800f32c <_vfiprintf_r>
 800f1fe:	b002      	add	sp, #8
 800f200:	f85d eb04 	ldr.w	lr, [sp], #4
 800f204:	b003      	add	sp, #12
 800f206:	4770      	bx	lr
 800f208:	20000250 	.word	0x20000250

0800f20c <__ascii_mbtowc>:
 800f20c:	b082      	sub	sp, #8
 800f20e:	b901      	cbnz	r1, 800f212 <__ascii_mbtowc+0x6>
 800f210:	a901      	add	r1, sp, #4
 800f212:	b142      	cbz	r2, 800f226 <__ascii_mbtowc+0x1a>
 800f214:	b14b      	cbz	r3, 800f22a <__ascii_mbtowc+0x1e>
 800f216:	7813      	ldrb	r3, [r2, #0]
 800f218:	600b      	str	r3, [r1, #0]
 800f21a:	7812      	ldrb	r2, [r2, #0]
 800f21c:	1e10      	subs	r0, r2, #0
 800f21e:	bf18      	it	ne
 800f220:	2001      	movne	r0, #1
 800f222:	b002      	add	sp, #8
 800f224:	4770      	bx	lr
 800f226:	4610      	mov	r0, r2
 800f228:	e7fb      	b.n	800f222 <__ascii_mbtowc+0x16>
 800f22a:	f06f 0001 	mvn.w	r0, #1
 800f22e:	e7f8      	b.n	800f222 <__ascii_mbtowc+0x16>

0800f230 <memmove>:
 800f230:	4288      	cmp	r0, r1
 800f232:	b510      	push	{r4, lr}
 800f234:	eb01 0402 	add.w	r4, r1, r2
 800f238:	d902      	bls.n	800f240 <memmove+0x10>
 800f23a:	4284      	cmp	r4, r0
 800f23c:	4623      	mov	r3, r4
 800f23e:	d807      	bhi.n	800f250 <memmove+0x20>
 800f240:	1e43      	subs	r3, r0, #1
 800f242:	42a1      	cmp	r1, r4
 800f244:	d008      	beq.n	800f258 <memmove+0x28>
 800f246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f24e:	e7f8      	b.n	800f242 <memmove+0x12>
 800f250:	4402      	add	r2, r0
 800f252:	4601      	mov	r1, r0
 800f254:	428a      	cmp	r2, r1
 800f256:	d100      	bne.n	800f25a <memmove+0x2a>
 800f258:	bd10      	pop	{r4, pc}
 800f25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f262:	e7f7      	b.n	800f254 <memmove+0x24>

0800f264 <__malloc_lock>:
 800f264:	4801      	ldr	r0, [pc, #4]	; (800f26c <__malloc_lock+0x8>)
 800f266:	f000 bc1f 	b.w	800faa8 <__retarget_lock_acquire_recursive>
 800f26a:	bf00      	nop
 800f26c:	200008d4 	.word	0x200008d4

0800f270 <__malloc_unlock>:
 800f270:	4801      	ldr	r0, [pc, #4]	; (800f278 <__malloc_unlock+0x8>)
 800f272:	f000 bc1a 	b.w	800faaa <__retarget_lock_release_recursive>
 800f276:	bf00      	nop
 800f278:	200008d4 	.word	0x200008d4

0800f27c <_realloc_r>:
 800f27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f280:	4680      	mov	r8, r0
 800f282:	4614      	mov	r4, r2
 800f284:	460e      	mov	r6, r1
 800f286:	b921      	cbnz	r1, 800f292 <_realloc_r+0x16>
 800f288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f28c:	4611      	mov	r1, r2
 800f28e:	f7ff bdad 	b.w	800edec <_malloc_r>
 800f292:	b92a      	cbnz	r2, 800f2a0 <_realloc_r+0x24>
 800f294:	f7ff fd3e 	bl	800ed14 <_free_r>
 800f298:	4625      	mov	r5, r4
 800f29a:	4628      	mov	r0, r5
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	f000 fc6a 	bl	800fb78 <_malloc_usable_size_r>
 800f2a4:	4284      	cmp	r4, r0
 800f2a6:	4607      	mov	r7, r0
 800f2a8:	d802      	bhi.n	800f2b0 <_realloc_r+0x34>
 800f2aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2ae:	d812      	bhi.n	800f2d6 <_realloc_r+0x5a>
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	4640      	mov	r0, r8
 800f2b4:	f7ff fd9a 	bl	800edec <_malloc_r>
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d0ed      	beq.n	800f29a <_realloc_r+0x1e>
 800f2be:	42bc      	cmp	r4, r7
 800f2c0:	4622      	mov	r2, r4
 800f2c2:	4631      	mov	r1, r6
 800f2c4:	bf28      	it	cs
 800f2c6:	463a      	movcs	r2, r7
 800f2c8:	f7ff f97c 	bl	800e5c4 <memcpy>
 800f2cc:	4631      	mov	r1, r6
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	f7ff fd20 	bl	800ed14 <_free_r>
 800f2d4:	e7e1      	b.n	800f29a <_realloc_r+0x1e>
 800f2d6:	4635      	mov	r5, r6
 800f2d8:	e7df      	b.n	800f29a <_realloc_r+0x1e>

0800f2da <__sfputc_r>:
 800f2da:	6893      	ldr	r3, [r2, #8]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	b410      	push	{r4}
 800f2e2:	6093      	str	r3, [r2, #8]
 800f2e4:	da08      	bge.n	800f2f8 <__sfputc_r+0x1e>
 800f2e6:	6994      	ldr	r4, [r2, #24]
 800f2e8:	42a3      	cmp	r3, r4
 800f2ea:	db01      	blt.n	800f2f0 <__sfputc_r+0x16>
 800f2ec:	290a      	cmp	r1, #10
 800f2ee:	d103      	bne.n	800f2f8 <__sfputc_r+0x1e>
 800f2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f4:	f000 b94a 	b.w	800f58c <__swbuf_r>
 800f2f8:	6813      	ldr	r3, [r2, #0]
 800f2fa:	1c58      	adds	r0, r3, #1
 800f2fc:	6010      	str	r0, [r2, #0]
 800f2fe:	7019      	strb	r1, [r3, #0]
 800f300:	4608      	mov	r0, r1
 800f302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <__sfputs_r>:
 800f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30a:	4606      	mov	r6, r0
 800f30c:	460f      	mov	r7, r1
 800f30e:	4614      	mov	r4, r2
 800f310:	18d5      	adds	r5, r2, r3
 800f312:	42ac      	cmp	r4, r5
 800f314:	d101      	bne.n	800f31a <__sfputs_r+0x12>
 800f316:	2000      	movs	r0, #0
 800f318:	e007      	b.n	800f32a <__sfputs_r+0x22>
 800f31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f31e:	463a      	mov	r2, r7
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff ffda 	bl	800f2da <__sfputc_r>
 800f326:	1c43      	adds	r3, r0, #1
 800f328:	d1f3      	bne.n	800f312 <__sfputs_r+0xa>
 800f32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f32c <_vfiprintf_r>:
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	460d      	mov	r5, r1
 800f332:	b09d      	sub	sp, #116	; 0x74
 800f334:	4614      	mov	r4, r2
 800f336:	4698      	mov	r8, r3
 800f338:	4606      	mov	r6, r0
 800f33a:	b118      	cbz	r0, 800f344 <_vfiprintf_r+0x18>
 800f33c:	6983      	ldr	r3, [r0, #24]
 800f33e:	b90b      	cbnz	r3, 800f344 <_vfiprintf_r+0x18>
 800f340:	f000 fb14 	bl	800f96c <__sinit>
 800f344:	4b89      	ldr	r3, [pc, #548]	; (800f56c <_vfiprintf_r+0x240>)
 800f346:	429d      	cmp	r5, r3
 800f348:	d11b      	bne.n	800f382 <_vfiprintf_r+0x56>
 800f34a:	6875      	ldr	r5, [r6, #4]
 800f34c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f34e:	07d9      	lsls	r1, r3, #31
 800f350:	d405      	bmi.n	800f35e <_vfiprintf_r+0x32>
 800f352:	89ab      	ldrh	r3, [r5, #12]
 800f354:	059a      	lsls	r2, r3, #22
 800f356:	d402      	bmi.n	800f35e <_vfiprintf_r+0x32>
 800f358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f35a:	f000 fba5 	bl	800faa8 <__retarget_lock_acquire_recursive>
 800f35e:	89ab      	ldrh	r3, [r5, #12]
 800f360:	071b      	lsls	r3, r3, #28
 800f362:	d501      	bpl.n	800f368 <_vfiprintf_r+0x3c>
 800f364:	692b      	ldr	r3, [r5, #16]
 800f366:	b9eb      	cbnz	r3, 800f3a4 <_vfiprintf_r+0x78>
 800f368:	4629      	mov	r1, r5
 800f36a:	4630      	mov	r0, r6
 800f36c:	f000 f96e 	bl	800f64c <__swsetup_r>
 800f370:	b1c0      	cbz	r0, 800f3a4 <_vfiprintf_r+0x78>
 800f372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f374:	07dc      	lsls	r4, r3, #31
 800f376:	d50e      	bpl.n	800f396 <_vfiprintf_r+0x6a>
 800f378:	f04f 30ff 	mov.w	r0, #4294967295
 800f37c:	b01d      	add	sp, #116	; 0x74
 800f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f382:	4b7b      	ldr	r3, [pc, #492]	; (800f570 <_vfiprintf_r+0x244>)
 800f384:	429d      	cmp	r5, r3
 800f386:	d101      	bne.n	800f38c <_vfiprintf_r+0x60>
 800f388:	68b5      	ldr	r5, [r6, #8]
 800f38a:	e7df      	b.n	800f34c <_vfiprintf_r+0x20>
 800f38c:	4b79      	ldr	r3, [pc, #484]	; (800f574 <_vfiprintf_r+0x248>)
 800f38e:	429d      	cmp	r5, r3
 800f390:	bf08      	it	eq
 800f392:	68f5      	ldreq	r5, [r6, #12]
 800f394:	e7da      	b.n	800f34c <_vfiprintf_r+0x20>
 800f396:	89ab      	ldrh	r3, [r5, #12]
 800f398:	0598      	lsls	r0, r3, #22
 800f39a:	d4ed      	bmi.n	800f378 <_vfiprintf_r+0x4c>
 800f39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f39e:	f000 fb84 	bl	800faaa <__retarget_lock_release_recursive>
 800f3a2:	e7e9      	b.n	800f378 <_vfiprintf_r+0x4c>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a8:	2320      	movs	r3, #32
 800f3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3b2:	2330      	movs	r3, #48	; 0x30
 800f3b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f578 <_vfiprintf_r+0x24c>
 800f3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3bc:	f04f 0901 	mov.w	r9, #1
 800f3c0:	4623      	mov	r3, r4
 800f3c2:	469a      	mov	sl, r3
 800f3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3c8:	b10a      	cbz	r2, 800f3ce <_vfiprintf_r+0xa2>
 800f3ca:	2a25      	cmp	r2, #37	; 0x25
 800f3cc:	d1f9      	bne.n	800f3c2 <_vfiprintf_r+0x96>
 800f3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f3d2:	d00b      	beq.n	800f3ec <_vfiprintf_r+0xc0>
 800f3d4:	465b      	mov	r3, fp
 800f3d6:	4622      	mov	r2, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f7ff ff94 	bl	800f308 <__sfputs_r>
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	f000 80aa 	beq.w	800f53a <_vfiprintf_r+0x20e>
 800f3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3e8:	445a      	add	r2, fp
 800f3ea:	9209      	str	r2, [sp, #36]	; 0x24
 800f3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f000 80a2 	beq.w	800f53a <_vfiprintf_r+0x20e>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f400:	f10a 0a01 	add.w	sl, sl, #1
 800f404:	9304      	str	r3, [sp, #16]
 800f406:	9307      	str	r3, [sp, #28]
 800f408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f40c:	931a      	str	r3, [sp, #104]	; 0x68
 800f40e:	4654      	mov	r4, sl
 800f410:	2205      	movs	r2, #5
 800f412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f416:	4858      	ldr	r0, [pc, #352]	; (800f578 <_vfiprintf_r+0x24c>)
 800f418:	f7f0 feea 	bl	80001f0 <memchr>
 800f41c:	9a04      	ldr	r2, [sp, #16]
 800f41e:	b9d8      	cbnz	r0, 800f458 <_vfiprintf_r+0x12c>
 800f420:	06d1      	lsls	r1, r2, #27
 800f422:	bf44      	itt	mi
 800f424:	2320      	movmi	r3, #32
 800f426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f42a:	0713      	lsls	r3, r2, #28
 800f42c:	bf44      	itt	mi
 800f42e:	232b      	movmi	r3, #43	; 0x2b
 800f430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f434:	f89a 3000 	ldrb.w	r3, [sl]
 800f438:	2b2a      	cmp	r3, #42	; 0x2a
 800f43a:	d015      	beq.n	800f468 <_vfiprintf_r+0x13c>
 800f43c:	9a07      	ldr	r2, [sp, #28]
 800f43e:	4654      	mov	r4, sl
 800f440:	2000      	movs	r0, #0
 800f442:	f04f 0c0a 	mov.w	ip, #10
 800f446:	4621      	mov	r1, r4
 800f448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f44c:	3b30      	subs	r3, #48	; 0x30
 800f44e:	2b09      	cmp	r3, #9
 800f450:	d94e      	bls.n	800f4f0 <_vfiprintf_r+0x1c4>
 800f452:	b1b0      	cbz	r0, 800f482 <_vfiprintf_r+0x156>
 800f454:	9207      	str	r2, [sp, #28]
 800f456:	e014      	b.n	800f482 <_vfiprintf_r+0x156>
 800f458:	eba0 0308 	sub.w	r3, r0, r8
 800f45c:	fa09 f303 	lsl.w	r3, r9, r3
 800f460:	4313      	orrs	r3, r2
 800f462:	9304      	str	r3, [sp, #16]
 800f464:	46a2      	mov	sl, r4
 800f466:	e7d2      	b.n	800f40e <_vfiprintf_r+0xe2>
 800f468:	9b03      	ldr	r3, [sp, #12]
 800f46a:	1d19      	adds	r1, r3, #4
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	9103      	str	r1, [sp, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	bfbb      	ittet	lt
 800f474:	425b      	neglt	r3, r3
 800f476:	f042 0202 	orrlt.w	r2, r2, #2
 800f47a:	9307      	strge	r3, [sp, #28]
 800f47c:	9307      	strlt	r3, [sp, #28]
 800f47e:	bfb8      	it	lt
 800f480:	9204      	strlt	r2, [sp, #16]
 800f482:	7823      	ldrb	r3, [r4, #0]
 800f484:	2b2e      	cmp	r3, #46	; 0x2e
 800f486:	d10c      	bne.n	800f4a2 <_vfiprintf_r+0x176>
 800f488:	7863      	ldrb	r3, [r4, #1]
 800f48a:	2b2a      	cmp	r3, #42	; 0x2a
 800f48c:	d135      	bne.n	800f4fa <_vfiprintf_r+0x1ce>
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	1d1a      	adds	r2, r3, #4
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	9203      	str	r2, [sp, #12]
 800f496:	2b00      	cmp	r3, #0
 800f498:	bfb8      	it	lt
 800f49a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f49e:	3402      	adds	r4, #2
 800f4a0:	9305      	str	r3, [sp, #20]
 800f4a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f588 <_vfiprintf_r+0x25c>
 800f4a6:	7821      	ldrb	r1, [r4, #0]
 800f4a8:	2203      	movs	r2, #3
 800f4aa:	4650      	mov	r0, sl
 800f4ac:	f7f0 fea0 	bl	80001f0 <memchr>
 800f4b0:	b140      	cbz	r0, 800f4c4 <_vfiprintf_r+0x198>
 800f4b2:	2340      	movs	r3, #64	; 0x40
 800f4b4:	eba0 000a 	sub.w	r0, r0, sl
 800f4b8:	fa03 f000 	lsl.w	r0, r3, r0
 800f4bc:	9b04      	ldr	r3, [sp, #16]
 800f4be:	4303      	orrs	r3, r0
 800f4c0:	3401      	adds	r4, #1
 800f4c2:	9304      	str	r3, [sp, #16]
 800f4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4c8:	482c      	ldr	r0, [pc, #176]	; (800f57c <_vfiprintf_r+0x250>)
 800f4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4ce:	2206      	movs	r2, #6
 800f4d0:	f7f0 fe8e 	bl	80001f0 <memchr>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d03f      	beq.n	800f558 <_vfiprintf_r+0x22c>
 800f4d8:	4b29      	ldr	r3, [pc, #164]	; (800f580 <_vfiprintf_r+0x254>)
 800f4da:	bb1b      	cbnz	r3, 800f524 <_vfiprintf_r+0x1f8>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	3307      	adds	r3, #7
 800f4e0:	f023 0307 	bic.w	r3, r3, #7
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	9303      	str	r3, [sp, #12]
 800f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ea:	443b      	add	r3, r7
 800f4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ee:	e767      	b.n	800f3c0 <_vfiprintf_r+0x94>
 800f4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4f4:	460c      	mov	r4, r1
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	e7a5      	b.n	800f446 <_vfiprintf_r+0x11a>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	3401      	adds	r4, #1
 800f4fe:	9305      	str	r3, [sp, #20]
 800f500:	4619      	mov	r1, r3
 800f502:	f04f 0c0a 	mov.w	ip, #10
 800f506:	4620      	mov	r0, r4
 800f508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f50c:	3a30      	subs	r2, #48	; 0x30
 800f50e:	2a09      	cmp	r2, #9
 800f510:	d903      	bls.n	800f51a <_vfiprintf_r+0x1ee>
 800f512:	2b00      	cmp	r3, #0
 800f514:	d0c5      	beq.n	800f4a2 <_vfiprintf_r+0x176>
 800f516:	9105      	str	r1, [sp, #20]
 800f518:	e7c3      	b.n	800f4a2 <_vfiprintf_r+0x176>
 800f51a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f51e:	4604      	mov	r4, r0
 800f520:	2301      	movs	r3, #1
 800f522:	e7f0      	b.n	800f506 <_vfiprintf_r+0x1da>
 800f524:	ab03      	add	r3, sp, #12
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	462a      	mov	r2, r5
 800f52a:	4b16      	ldr	r3, [pc, #88]	; (800f584 <_vfiprintf_r+0x258>)
 800f52c:	a904      	add	r1, sp, #16
 800f52e:	4630      	mov	r0, r6
 800f530:	f7fd fdc6 	bl	800d0c0 <_printf_float>
 800f534:	4607      	mov	r7, r0
 800f536:	1c78      	adds	r0, r7, #1
 800f538:	d1d6      	bne.n	800f4e8 <_vfiprintf_r+0x1bc>
 800f53a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f53c:	07d9      	lsls	r1, r3, #31
 800f53e:	d405      	bmi.n	800f54c <_vfiprintf_r+0x220>
 800f540:	89ab      	ldrh	r3, [r5, #12]
 800f542:	059a      	lsls	r2, r3, #22
 800f544:	d402      	bmi.n	800f54c <_vfiprintf_r+0x220>
 800f546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f548:	f000 faaf 	bl	800faaa <__retarget_lock_release_recursive>
 800f54c:	89ab      	ldrh	r3, [r5, #12]
 800f54e:	065b      	lsls	r3, r3, #25
 800f550:	f53f af12 	bmi.w	800f378 <_vfiprintf_r+0x4c>
 800f554:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f556:	e711      	b.n	800f37c <_vfiprintf_r+0x50>
 800f558:	ab03      	add	r3, sp, #12
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	462a      	mov	r2, r5
 800f55e:	4b09      	ldr	r3, [pc, #36]	; (800f584 <_vfiprintf_r+0x258>)
 800f560:	a904      	add	r1, sp, #16
 800f562:	4630      	mov	r0, r6
 800f564:	f7fe f850 	bl	800d608 <_printf_i>
 800f568:	e7e4      	b.n	800f534 <_vfiprintf_r+0x208>
 800f56a:	bf00      	nop
 800f56c:	0803d53c 	.word	0x0803d53c
 800f570:	0803d55c 	.word	0x0803d55c
 800f574:	0803d51c 	.word	0x0803d51c
 800f578:	0803d3c4 	.word	0x0803d3c4
 800f57c:	0803d3ce 	.word	0x0803d3ce
 800f580:	0800d0c1 	.word	0x0800d0c1
 800f584:	0800f309 	.word	0x0800f309
 800f588:	0803d3ca 	.word	0x0803d3ca

0800f58c <__swbuf_r>:
 800f58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58e:	460e      	mov	r6, r1
 800f590:	4614      	mov	r4, r2
 800f592:	4605      	mov	r5, r0
 800f594:	b118      	cbz	r0, 800f59e <__swbuf_r+0x12>
 800f596:	6983      	ldr	r3, [r0, #24]
 800f598:	b90b      	cbnz	r3, 800f59e <__swbuf_r+0x12>
 800f59a:	f000 f9e7 	bl	800f96c <__sinit>
 800f59e:	4b21      	ldr	r3, [pc, #132]	; (800f624 <__swbuf_r+0x98>)
 800f5a0:	429c      	cmp	r4, r3
 800f5a2:	d12b      	bne.n	800f5fc <__swbuf_r+0x70>
 800f5a4:	686c      	ldr	r4, [r5, #4]
 800f5a6:	69a3      	ldr	r3, [r4, #24]
 800f5a8:	60a3      	str	r3, [r4, #8]
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	071a      	lsls	r2, r3, #28
 800f5ae:	d52f      	bpl.n	800f610 <__swbuf_r+0x84>
 800f5b0:	6923      	ldr	r3, [r4, #16]
 800f5b2:	b36b      	cbz	r3, 800f610 <__swbuf_r+0x84>
 800f5b4:	6923      	ldr	r3, [r4, #16]
 800f5b6:	6820      	ldr	r0, [r4, #0]
 800f5b8:	1ac0      	subs	r0, r0, r3
 800f5ba:	6963      	ldr	r3, [r4, #20]
 800f5bc:	b2f6      	uxtb	r6, r6
 800f5be:	4283      	cmp	r3, r0
 800f5c0:	4637      	mov	r7, r6
 800f5c2:	dc04      	bgt.n	800f5ce <__swbuf_r+0x42>
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f000 f93c 	bl	800f844 <_fflush_r>
 800f5cc:	bb30      	cbnz	r0, 800f61c <__swbuf_r+0x90>
 800f5ce:	68a3      	ldr	r3, [r4, #8]
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	60a3      	str	r3, [r4, #8]
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	1c5a      	adds	r2, r3, #1
 800f5d8:	6022      	str	r2, [r4, #0]
 800f5da:	701e      	strb	r6, [r3, #0]
 800f5dc:	6963      	ldr	r3, [r4, #20]
 800f5de:	3001      	adds	r0, #1
 800f5e0:	4283      	cmp	r3, r0
 800f5e2:	d004      	beq.n	800f5ee <__swbuf_r+0x62>
 800f5e4:	89a3      	ldrh	r3, [r4, #12]
 800f5e6:	07db      	lsls	r3, r3, #31
 800f5e8:	d506      	bpl.n	800f5f8 <__swbuf_r+0x6c>
 800f5ea:	2e0a      	cmp	r6, #10
 800f5ec:	d104      	bne.n	800f5f8 <__swbuf_r+0x6c>
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	f000 f927 	bl	800f844 <_fflush_r>
 800f5f6:	b988      	cbnz	r0, 800f61c <__swbuf_r+0x90>
 800f5f8:	4638      	mov	r0, r7
 800f5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5fc:	4b0a      	ldr	r3, [pc, #40]	; (800f628 <__swbuf_r+0x9c>)
 800f5fe:	429c      	cmp	r4, r3
 800f600:	d101      	bne.n	800f606 <__swbuf_r+0x7a>
 800f602:	68ac      	ldr	r4, [r5, #8]
 800f604:	e7cf      	b.n	800f5a6 <__swbuf_r+0x1a>
 800f606:	4b09      	ldr	r3, [pc, #36]	; (800f62c <__swbuf_r+0xa0>)
 800f608:	429c      	cmp	r4, r3
 800f60a:	bf08      	it	eq
 800f60c:	68ec      	ldreq	r4, [r5, #12]
 800f60e:	e7ca      	b.n	800f5a6 <__swbuf_r+0x1a>
 800f610:	4621      	mov	r1, r4
 800f612:	4628      	mov	r0, r5
 800f614:	f000 f81a 	bl	800f64c <__swsetup_r>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d0cb      	beq.n	800f5b4 <__swbuf_r+0x28>
 800f61c:	f04f 37ff 	mov.w	r7, #4294967295
 800f620:	e7ea      	b.n	800f5f8 <__swbuf_r+0x6c>
 800f622:	bf00      	nop
 800f624:	0803d53c 	.word	0x0803d53c
 800f628:	0803d55c 	.word	0x0803d55c
 800f62c:	0803d51c 	.word	0x0803d51c

0800f630 <__ascii_wctomb>:
 800f630:	b149      	cbz	r1, 800f646 <__ascii_wctomb+0x16>
 800f632:	2aff      	cmp	r2, #255	; 0xff
 800f634:	bf85      	ittet	hi
 800f636:	238a      	movhi	r3, #138	; 0x8a
 800f638:	6003      	strhi	r3, [r0, #0]
 800f63a:	700a      	strbls	r2, [r1, #0]
 800f63c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f640:	bf98      	it	ls
 800f642:	2001      	movls	r0, #1
 800f644:	4770      	bx	lr
 800f646:	4608      	mov	r0, r1
 800f648:	4770      	bx	lr
	...

0800f64c <__swsetup_r>:
 800f64c:	4b32      	ldr	r3, [pc, #200]	; (800f718 <__swsetup_r+0xcc>)
 800f64e:	b570      	push	{r4, r5, r6, lr}
 800f650:	681d      	ldr	r5, [r3, #0]
 800f652:	4606      	mov	r6, r0
 800f654:	460c      	mov	r4, r1
 800f656:	b125      	cbz	r5, 800f662 <__swsetup_r+0x16>
 800f658:	69ab      	ldr	r3, [r5, #24]
 800f65a:	b913      	cbnz	r3, 800f662 <__swsetup_r+0x16>
 800f65c:	4628      	mov	r0, r5
 800f65e:	f000 f985 	bl	800f96c <__sinit>
 800f662:	4b2e      	ldr	r3, [pc, #184]	; (800f71c <__swsetup_r+0xd0>)
 800f664:	429c      	cmp	r4, r3
 800f666:	d10f      	bne.n	800f688 <__swsetup_r+0x3c>
 800f668:	686c      	ldr	r4, [r5, #4]
 800f66a:	89a3      	ldrh	r3, [r4, #12]
 800f66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f670:	0719      	lsls	r1, r3, #28
 800f672:	d42c      	bmi.n	800f6ce <__swsetup_r+0x82>
 800f674:	06dd      	lsls	r5, r3, #27
 800f676:	d411      	bmi.n	800f69c <__swsetup_r+0x50>
 800f678:	2309      	movs	r3, #9
 800f67a:	6033      	str	r3, [r6, #0]
 800f67c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f680:	81a3      	strh	r3, [r4, #12]
 800f682:	f04f 30ff 	mov.w	r0, #4294967295
 800f686:	e03e      	b.n	800f706 <__swsetup_r+0xba>
 800f688:	4b25      	ldr	r3, [pc, #148]	; (800f720 <__swsetup_r+0xd4>)
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d101      	bne.n	800f692 <__swsetup_r+0x46>
 800f68e:	68ac      	ldr	r4, [r5, #8]
 800f690:	e7eb      	b.n	800f66a <__swsetup_r+0x1e>
 800f692:	4b24      	ldr	r3, [pc, #144]	; (800f724 <__swsetup_r+0xd8>)
 800f694:	429c      	cmp	r4, r3
 800f696:	bf08      	it	eq
 800f698:	68ec      	ldreq	r4, [r5, #12]
 800f69a:	e7e6      	b.n	800f66a <__swsetup_r+0x1e>
 800f69c:	0758      	lsls	r0, r3, #29
 800f69e:	d512      	bpl.n	800f6c6 <__swsetup_r+0x7a>
 800f6a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6a2:	b141      	cbz	r1, 800f6b6 <__swsetup_r+0x6a>
 800f6a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6a8:	4299      	cmp	r1, r3
 800f6aa:	d002      	beq.n	800f6b2 <__swsetup_r+0x66>
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	f7ff fb31 	bl	800ed14 <_free_r>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	6363      	str	r3, [r4, #52]	; 0x34
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6bc:	81a3      	strh	r3, [r4, #12]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	6063      	str	r3, [r4, #4]
 800f6c2:	6923      	ldr	r3, [r4, #16]
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	89a3      	ldrh	r3, [r4, #12]
 800f6c8:	f043 0308 	orr.w	r3, r3, #8
 800f6cc:	81a3      	strh	r3, [r4, #12]
 800f6ce:	6923      	ldr	r3, [r4, #16]
 800f6d0:	b94b      	cbnz	r3, 800f6e6 <__swsetup_r+0x9a>
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6dc:	d003      	beq.n	800f6e6 <__swsetup_r+0x9a>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f000 fa09 	bl	800faf8 <__smakebuf_r>
 800f6e6:	89a0      	ldrh	r0, [r4, #12]
 800f6e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6ec:	f010 0301 	ands.w	r3, r0, #1
 800f6f0:	d00a      	beq.n	800f708 <__swsetup_r+0xbc>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60a3      	str	r3, [r4, #8]
 800f6f6:	6963      	ldr	r3, [r4, #20]
 800f6f8:	425b      	negs	r3, r3
 800f6fa:	61a3      	str	r3, [r4, #24]
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	b943      	cbnz	r3, 800f712 <__swsetup_r+0xc6>
 800f700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f704:	d1ba      	bne.n	800f67c <__swsetup_r+0x30>
 800f706:	bd70      	pop	{r4, r5, r6, pc}
 800f708:	0781      	lsls	r1, r0, #30
 800f70a:	bf58      	it	pl
 800f70c:	6963      	ldrpl	r3, [r4, #20]
 800f70e:	60a3      	str	r3, [r4, #8]
 800f710:	e7f4      	b.n	800f6fc <__swsetup_r+0xb0>
 800f712:	2000      	movs	r0, #0
 800f714:	e7f7      	b.n	800f706 <__swsetup_r+0xba>
 800f716:	bf00      	nop
 800f718:	20000250 	.word	0x20000250
 800f71c:	0803d53c 	.word	0x0803d53c
 800f720:	0803d55c 	.word	0x0803d55c
 800f724:	0803d51c 	.word	0x0803d51c

0800f728 <abort>:
 800f728:	b508      	push	{r3, lr}
 800f72a:	2006      	movs	r0, #6
 800f72c:	f000 fa54 	bl	800fbd8 <raise>
 800f730:	2001      	movs	r0, #1
 800f732:	f7f5 fff3 	bl	800571c <_exit>
	...

0800f738 <__sflush_r>:
 800f738:	898a      	ldrh	r2, [r1, #12]
 800f73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73e:	4605      	mov	r5, r0
 800f740:	0710      	lsls	r0, r2, #28
 800f742:	460c      	mov	r4, r1
 800f744:	d458      	bmi.n	800f7f8 <__sflush_r+0xc0>
 800f746:	684b      	ldr	r3, [r1, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	dc05      	bgt.n	800f758 <__sflush_r+0x20>
 800f74c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f74e:	2b00      	cmp	r3, #0
 800f750:	dc02      	bgt.n	800f758 <__sflush_r+0x20>
 800f752:	2000      	movs	r0, #0
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f75a:	2e00      	cmp	r6, #0
 800f75c:	d0f9      	beq.n	800f752 <__sflush_r+0x1a>
 800f75e:	2300      	movs	r3, #0
 800f760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f764:	682f      	ldr	r7, [r5, #0]
 800f766:	602b      	str	r3, [r5, #0]
 800f768:	d032      	beq.n	800f7d0 <__sflush_r+0x98>
 800f76a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f76c:	89a3      	ldrh	r3, [r4, #12]
 800f76e:	075a      	lsls	r2, r3, #29
 800f770:	d505      	bpl.n	800f77e <__sflush_r+0x46>
 800f772:	6863      	ldr	r3, [r4, #4]
 800f774:	1ac0      	subs	r0, r0, r3
 800f776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f778:	b10b      	cbz	r3, 800f77e <__sflush_r+0x46>
 800f77a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f77c:	1ac0      	subs	r0, r0, r3
 800f77e:	2300      	movs	r3, #0
 800f780:	4602      	mov	r2, r0
 800f782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f784:	6a21      	ldr	r1, [r4, #32]
 800f786:	4628      	mov	r0, r5
 800f788:	47b0      	blx	r6
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	89a3      	ldrh	r3, [r4, #12]
 800f78e:	d106      	bne.n	800f79e <__sflush_r+0x66>
 800f790:	6829      	ldr	r1, [r5, #0]
 800f792:	291d      	cmp	r1, #29
 800f794:	d82c      	bhi.n	800f7f0 <__sflush_r+0xb8>
 800f796:	4a2a      	ldr	r2, [pc, #168]	; (800f840 <__sflush_r+0x108>)
 800f798:	40ca      	lsrs	r2, r1
 800f79a:	07d6      	lsls	r6, r2, #31
 800f79c:	d528      	bpl.n	800f7f0 <__sflush_r+0xb8>
 800f79e:	2200      	movs	r2, #0
 800f7a0:	6062      	str	r2, [r4, #4]
 800f7a2:	04d9      	lsls	r1, r3, #19
 800f7a4:	6922      	ldr	r2, [r4, #16]
 800f7a6:	6022      	str	r2, [r4, #0]
 800f7a8:	d504      	bpl.n	800f7b4 <__sflush_r+0x7c>
 800f7aa:	1c42      	adds	r2, r0, #1
 800f7ac:	d101      	bne.n	800f7b2 <__sflush_r+0x7a>
 800f7ae:	682b      	ldr	r3, [r5, #0]
 800f7b0:	b903      	cbnz	r3, 800f7b4 <__sflush_r+0x7c>
 800f7b2:	6560      	str	r0, [r4, #84]	; 0x54
 800f7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7b6:	602f      	str	r7, [r5, #0]
 800f7b8:	2900      	cmp	r1, #0
 800f7ba:	d0ca      	beq.n	800f752 <__sflush_r+0x1a>
 800f7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7c0:	4299      	cmp	r1, r3
 800f7c2:	d002      	beq.n	800f7ca <__sflush_r+0x92>
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	f7ff faa5 	bl	800ed14 <_free_r>
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	6360      	str	r0, [r4, #52]	; 0x34
 800f7ce:	e7c1      	b.n	800f754 <__sflush_r+0x1c>
 800f7d0:	6a21      	ldr	r1, [r4, #32]
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	47b0      	blx	r6
 800f7d8:	1c41      	adds	r1, r0, #1
 800f7da:	d1c7      	bne.n	800f76c <__sflush_r+0x34>
 800f7dc:	682b      	ldr	r3, [r5, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0c4      	beq.n	800f76c <__sflush_r+0x34>
 800f7e2:	2b1d      	cmp	r3, #29
 800f7e4:	d001      	beq.n	800f7ea <__sflush_r+0xb2>
 800f7e6:	2b16      	cmp	r3, #22
 800f7e8:	d101      	bne.n	800f7ee <__sflush_r+0xb6>
 800f7ea:	602f      	str	r7, [r5, #0]
 800f7ec:	e7b1      	b.n	800f752 <__sflush_r+0x1a>
 800f7ee:	89a3      	ldrh	r3, [r4, #12]
 800f7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7f4:	81a3      	strh	r3, [r4, #12]
 800f7f6:	e7ad      	b.n	800f754 <__sflush_r+0x1c>
 800f7f8:	690f      	ldr	r7, [r1, #16]
 800f7fa:	2f00      	cmp	r7, #0
 800f7fc:	d0a9      	beq.n	800f752 <__sflush_r+0x1a>
 800f7fe:	0793      	lsls	r3, r2, #30
 800f800:	680e      	ldr	r6, [r1, #0]
 800f802:	bf08      	it	eq
 800f804:	694b      	ldreq	r3, [r1, #20]
 800f806:	600f      	str	r7, [r1, #0]
 800f808:	bf18      	it	ne
 800f80a:	2300      	movne	r3, #0
 800f80c:	eba6 0807 	sub.w	r8, r6, r7
 800f810:	608b      	str	r3, [r1, #8]
 800f812:	f1b8 0f00 	cmp.w	r8, #0
 800f816:	dd9c      	ble.n	800f752 <__sflush_r+0x1a>
 800f818:	6a21      	ldr	r1, [r4, #32]
 800f81a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f81c:	4643      	mov	r3, r8
 800f81e:	463a      	mov	r2, r7
 800f820:	4628      	mov	r0, r5
 800f822:	47b0      	blx	r6
 800f824:	2800      	cmp	r0, #0
 800f826:	dc06      	bgt.n	800f836 <__sflush_r+0xfe>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f82e:	81a3      	strh	r3, [r4, #12]
 800f830:	f04f 30ff 	mov.w	r0, #4294967295
 800f834:	e78e      	b.n	800f754 <__sflush_r+0x1c>
 800f836:	4407      	add	r7, r0
 800f838:	eba8 0800 	sub.w	r8, r8, r0
 800f83c:	e7e9      	b.n	800f812 <__sflush_r+0xda>
 800f83e:	bf00      	nop
 800f840:	20400001 	.word	0x20400001

0800f844 <_fflush_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	690b      	ldr	r3, [r1, #16]
 800f848:	4605      	mov	r5, r0
 800f84a:	460c      	mov	r4, r1
 800f84c:	b913      	cbnz	r3, 800f854 <_fflush_r+0x10>
 800f84e:	2500      	movs	r5, #0
 800f850:	4628      	mov	r0, r5
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	b118      	cbz	r0, 800f85e <_fflush_r+0x1a>
 800f856:	6983      	ldr	r3, [r0, #24]
 800f858:	b90b      	cbnz	r3, 800f85e <_fflush_r+0x1a>
 800f85a:	f000 f887 	bl	800f96c <__sinit>
 800f85e:	4b14      	ldr	r3, [pc, #80]	; (800f8b0 <_fflush_r+0x6c>)
 800f860:	429c      	cmp	r4, r3
 800f862:	d11b      	bne.n	800f89c <_fflush_r+0x58>
 800f864:	686c      	ldr	r4, [r5, #4]
 800f866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0ef      	beq.n	800f84e <_fflush_r+0xa>
 800f86e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f870:	07d0      	lsls	r0, r2, #31
 800f872:	d404      	bmi.n	800f87e <_fflush_r+0x3a>
 800f874:	0599      	lsls	r1, r3, #22
 800f876:	d402      	bmi.n	800f87e <_fflush_r+0x3a>
 800f878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f87a:	f000 f915 	bl	800faa8 <__retarget_lock_acquire_recursive>
 800f87e:	4628      	mov	r0, r5
 800f880:	4621      	mov	r1, r4
 800f882:	f7ff ff59 	bl	800f738 <__sflush_r>
 800f886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f888:	07da      	lsls	r2, r3, #31
 800f88a:	4605      	mov	r5, r0
 800f88c:	d4e0      	bmi.n	800f850 <_fflush_r+0xc>
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	059b      	lsls	r3, r3, #22
 800f892:	d4dd      	bmi.n	800f850 <_fflush_r+0xc>
 800f894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f896:	f000 f908 	bl	800faaa <__retarget_lock_release_recursive>
 800f89a:	e7d9      	b.n	800f850 <_fflush_r+0xc>
 800f89c:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <_fflush_r+0x70>)
 800f89e:	429c      	cmp	r4, r3
 800f8a0:	d101      	bne.n	800f8a6 <_fflush_r+0x62>
 800f8a2:	68ac      	ldr	r4, [r5, #8]
 800f8a4:	e7df      	b.n	800f866 <_fflush_r+0x22>
 800f8a6:	4b04      	ldr	r3, [pc, #16]	; (800f8b8 <_fflush_r+0x74>)
 800f8a8:	429c      	cmp	r4, r3
 800f8aa:	bf08      	it	eq
 800f8ac:	68ec      	ldreq	r4, [r5, #12]
 800f8ae:	e7da      	b.n	800f866 <_fflush_r+0x22>
 800f8b0:	0803d53c 	.word	0x0803d53c
 800f8b4:	0803d55c 	.word	0x0803d55c
 800f8b8:	0803d51c 	.word	0x0803d51c

0800f8bc <std>:
 800f8bc:	2300      	movs	r3, #0
 800f8be:	b510      	push	{r4, lr}
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	e9c0 3300 	strd	r3, r3, [r0]
 800f8c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8ca:	6083      	str	r3, [r0, #8]
 800f8cc:	8181      	strh	r1, [r0, #12]
 800f8ce:	6643      	str	r3, [r0, #100]	; 0x64
 800f8d0:	81c2      	strh	r2, [r0, #14]
 800f8d2:	6183      	str	r3, [r0, #24]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	2208      	movs	r2, #8
 800f8d8:	305c      	adds	r0, #92	; 0x5c
 800f8da:	f7fd fb49 	bl	800cf70 <memset>
 800f8de:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <std+0x38>)
 800f8e0:	6263      	str	r3, [r4, #36]	; 0x24
 800f8e2:	4b05      	ldr	r3, [pc, #20]	; (800f8f8 <std+0x3c>)
 800f8e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8e6:	4b05      	ldr	r3, [pc, #20]	; (800f8fc <std+0x40>)
 800f8e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8ea:	4b05      	ldr	r3, [pc, #20]	; (800f900 <std+0x44>)
 800f8ec:	6224      	str	r4, [r4, #32]
 800f8ee:	6323      	str	r3, [r4, #48]	; 0x30
 800f8f0:	bd10      	pop	{r4, pc}
 800f8f2:	bf00      	nop
 800f8f4:	0800fc11 	.word	0x0800fc11
 800f8f8:	0800fc33 	.word	0x0800fc33
 800f8fc:	0800fc6b 	.word	0x0800fc6b
 800f900:	0800fc8f 	.word	0x0800fc8f

0800f904 <_cleanup_r>:
 800f904:	4901      	ldr	r1, [pc, #4]	; (800f90c <_cleanup_r+0x8>)
 800f906:	f000 b8af 	b.w	800fa68 <_fwalk_reent>
 800f90a:	bf00      	nop
 800f90c:	0800f845 	.word	0x0800f845

0800f910 <__sfmoreglue>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	2268      	movs	r2, #104	; 0x68
 800f914:	1e4d      	subs	r5, r1, #1
 800f916:	4355      	muls	r5, r2
 800f918:	460e      	mov	r6, r1
 800f91a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f91e:	f7ff fa65 	bl	800edec <_malloc_r>
 800f922:	4604      	mov	r4, r0
 800f924:	b140      	cbz	r0, 800f938 <__sfmoreglue+0x28>
 800f926:	2100      	movs	r1, #0
 800f928:	e9c0 1600 	strd	r1, r6, [r0]
 800f92c:	300c      	adds	r0, #12
 800f92e:	60a0      	str	r0, [r4, #8]
 800f930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f934:	f7fd fb1c 	bl	800cf70 <memset>
 800f938:	4620      	mov	r0, r4
 800f93a:	bd70      	pop	{r4, r5, r6, pc}

0800f93c <__sfp_lock_acquire>:
 800f93c:	4801      	ldr	r0, [pc, #4]	; (800f944 <__sfp_lock_acquire+0x8>)
 800f93e:	f000 b8b3 	b.w	800faa8 <__retarget_lock_acquire_recursive>
 800f942:	bf00      	nop
 800f944:	200008d5 	.word	0x200008d5

0800f948 <__sfp_lock_release>:
 800f948:	4801      	ldr	r0, [pc, #4]	; (800f950 <__sfp_lock_release+0x8>)
 800f94a:	f000 b8ae 	b.w	800faaa <__retarget_lock_release_recursive>
 800f94e:	bf00      	nop
 800f950:	200008d5 	.word	0x200008d5

0800f954 <__sinit_lock_acquire>:
 800f954:	4801      	ldr	r0, [pc, #4]	; (800f95c <__sinit_lock_acquire+0x8>)
 800f956:	f000 b8a7 	b.w	800faa8 <__retarget_lock_acquire_recursive>
 800f95a:	bf00      	nop
 800f95c:	200008d6 	.word	0x200008d6

0800f960 <__sinit_lock_release>:
 800f960:	4801      	ldr	r0, [pc, #4]	; (800f968 <__sinit_lock_release+0x8>)
 800f962:	f000 b8a2 	b.w	800faaa <__retarget_lock_release_recursive>
 800f966:	bf00      	nop
 800f968:	200008d6 	.word	0x200008d6

0800f96c <__sinit>:
 800f96c:	b510      	push	{r4, lr}
 800f96e:	4604      	mov	r4, r0
 800f970:	f7ff fff0 	bl	800f954 <__sinit_lock_acquire>
 800f974:	69a3      	ldr	r3, [r4, #24]
 800f976:	b11b      	cbz	r3, 800f980 <__sinit+0x14>
 800f978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f97c:	f7ff bff0 	b.w	800f960 <__sinit_lock_release>
 800f980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f984:	6523      	str	r3, [r4, #80]	; 0x50
 800f986:	4b13      	ldr	r3, [pc, #76]	; (800f9d4 <__sinit+0x68>)
 800f988:	4a13      	ldr	r2, [pc, #76]	; (800f9d8 <__sinit+0x6c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f98e:	42a3      	cmp	r3, r4
 800f990:	bf04      	itt	eq
 800f992:	2301      	moveq	r3, #1
 800f994:	61a3      	streq	r3, [r4, #24]
 800f996:	4620      	mov	r0, r4
 800f998:	f000 f820 	bl	800f9dc <__sfp>
 800f99c:	6060      	str	r0, [r4, #4]
 800f99e:	4620      	mov	r0, r4
 800f9a0:	f000 f81c 	bl	800f9dc <__sfp>
 800f9a4:	60a0      	str	r0, [r4, #8]
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f000 f818 	bl	800f9dc <__sfp>
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	60e0      	str	r0, [r4, #12]
 800f9b0:	2104      	movs	r1, #4
 800f9b2:	6860      	ldr	r0, [r4, #4]
 800f9b4:	f7ff ff82 	bl	800f8bc <std>
 800f9b8:	68a0      	ldr	r0, [r4, #8]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	2109      	movs	r1, #9
 800f9be:	f7ff ff7d 	bl	800f8bc <std>
 800f9c2:	68e0      	ldr	r0, [r4, #12]
 800f9c4:	2202      	movs	r2, #2
 800f9c6:	2112      	movs	r1, #18
 800f9c8:	f7ff ff78 	bl	800f8bc <std>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	61a3      	str	r3, [r4, #24]
 800f9d0:	e7d2      	b.n	800f978 <__sinit+0xc>
 800f9d2:	bf00      	nop
 800f9d4:	0803d1a4 	.word	0x0803d1a4
 800f9d8:	0800f905 	.word	0x0800f905

0800f9dc <__sfp>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	4607      	mov	r7, r0
 800f9e0:	f7ff ffac 	bl	800f93c <__sfp_lock_acquire>
 800f9e4:	4b1e      	ldr	r3, [pc, #120]	; (800fa60 <__sfp+0x84>)
 800f9e6:	681e      	ldr	r6, [r3, #0]
 800f9e8:	69b3      	ldr	r3, [r6, #24]
 800f9ea:	b913      	cbnz	r3, 800f9f2 <__sfp+0x16>
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7ff ffbd 	bl	800f96c <__sinit>
 800f9f2:	3648      	adds	r6, #72	; 0x48
 800f9f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	d503      	bpl.n	800fa04 <__sfp+0x28>
 800f9fc:	6833      	ldr	r3, [r6, #0]
 800f9fe:	b30b      	cbz	r3, 800fa44 <__sfp+0x68>
 800fa00:	6836      	ldr	r6, [r6, #0]
 800fa02:	e7f7      	b.n	800f9f4 <__sfp+0x18>
 800fa04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa08:	b9d5      	cbnz	r5, 800fa40 <__sfp+0x64>
 800fa0a:	4b16      	ldr	r3, [pc, #88]	; (800fa64 <__sfp+0x88>)
 800fa0c:	60e3      	str	r3, [r4, #12]
 800fa0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa12:	6665      	str	r5, [r4, #100]	; 0x64
 800fa14:	f000 f847 	bl	800faa6 <__retarget_lock_init_recursive>
 800fa18:	f7ff ff96 	bl	800f948 <__sfp_lock_release>
 800fa1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa24:	6025      	str	r5, [r4, #0]
 800fa26:	61a5      	str	r5, [r4, #24]
 800fa28:	2208      	movs	r2, #8
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa30:	f7fd fa9e 	bl	800cf70 <memset>
 800fa34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa40:	3468      	adds	r4, #104	; 0x68
 800fa42:	e7d9      	b.n	800f9f8 <__sfp+0x1c>
 800fa44:	2104      	movs	r1, #4
 800fa46:	4638      	mov	r0, r7
 800fa48:	f7ff ff62 	bl	800f910 <__sfmoreglue>
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	6030      	str	r0, [r6, #0]
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d1d5      	bne.n	800fa00 <__sfp+0x24>
 800fa54:	f7ff ff78 	bl	800f948 <__sfp_lock_release>
 800fa58:	230c      	movs	r3, #12
 800fa5a:	603b      	str	r3, [r7, #0]
 800fa5c:	e7ee      	b.n	800fa3c <__sfp+0x60>
 800fa5e:	bf00      	nop
 800fa60:	0803d1a4 	.word	0x0803d1a4
 800fa64:	ffff0001 	.word	0xffff0001

0800fa68 <_fwalk_reent>:
 800fa68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa6c:	4606      	mov	r6, r0
 800fa6e:	4688      	mov	r8, r1
 800fa70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa74:	2700      	movs	r7, #0
 800fa76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa7a:	f1b9 0901 	subs.w	r9, r9, #1
 800fa7e:	d505      	bpl.n	800fa8c <_fwalk_reent+0x24>
 800fa80:	6824      	ldr	r4, [r4, #0]
 800fa82:	2c00      	cmp	r4, #0
 800fa84:	d1f7      	bne.n	800fa76 <_fwalk_reent+0xe>
 800fa86:	4638      	mov	r0, r7
 800fa88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa8c:	89ab      	ldrh	r3, [r5, #12]
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d907      	bls.n	800faa2 <_fwalk_reent+0x3a>
 800fa92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa96:	3301      	adds	r3, #1
 800fa98:	d003      	beq.n	800faa2 <_fwalk_reent+0x3a>
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	47c0      	blx	r8
 800faa0:	4307      	orrs	r7, r0
 800faa2:	3568      	adds	r5, #104	; 0x68
 800faa4:	e7e9      	b.n	800fa7a <_fwalk_reent+0x12>

0800faa6 <__retarget_lock_init_recursive>:
 800faa6:	4770      	bx	lr

0800faa8 <__retarget_lock_acquire_recursive>:
 800faa8:	4770      	bx	lr

0800faaa <__retarget_lock_release_recursive>:
 800faaa:	4770      	bx	lr

0800faac <__swhatbuf_r>:
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	460e      	mov	r6, r1
 800fab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fab4:	2900      	cmp	r1, #0
 800fab6:	b096      	sub	sp, #88	; 0x58
 800fab8:	4614      	mov	r4, r2
 800faba:	461d      	mov	r5, r3
 800fabc:	da08      	bge.n	800fad0 <__swhatbuf_r+0x24>
 800fabe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	602a      	str	r2, [r5, #0]
 800fac6:	061a      	lsls	r2, r3, #24
 800fac8:	d410      	bmi.n	800faec <__swhatbuf_r+0x40>
 800faca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800face:	e00e      	b.n	800faee <__swhatbuf_r+0x42>
 800fad0:	466a      	mov	r2, sp
 800fad2:	f000 f903 	bl	800fcdc <_fstat_r>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	dbf1      	blt.n	800fabe <__swhatbuf_r+0x12>
 800fada:	9a01      	ldr	r2, [sp, #4]
 800fadc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fae0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fae4:	425a      	negs	r2, r3
 800fae6:	415a      	adcs	r2, r3
 800fae8:	602a      	str	r2, [r5, #0]
 800faea:	e7ee      	b.n	800faca <__swhatbuf_r+0x1e>
 800faec:	2340      	movs	r3, #64	; 0x40
 800faee:	2000      	movs	r0, #0
 800faf0:	6023      	str	r3, [r4, #0]
 800faf2:	b016      	add	sp, #88	; 0x58
 800faf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800faf8 <__smakebuf_r>:
 800faf8:	898b      	ldrh	r3, [r1, #12]
 800fafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fafc:	079d      	lsls	r5, r3, #30
 800fafe:	4606      	mov	r6, r0
 800fb00:	460c      	mov	r4, r1
 800fb02:	d507      	bpl.n	800fb14 <__smakebuf_r+0x1c>
 800fb04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	6123      	str	r3, [r4, #16]
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	6163      	str	r3, [r4, #20]
 800fb10:	b002      	add	sp, #8
 800fb12:	bd70      	pop	{r4, r5, r6, pc}
 800fb14:	ab01      	add	r3, sp, #4
 800fb16:	466a      	mov	r2, sp
 800fb18:	f7ff ffc8 	bl	800faac <__swhatbuf_r>
 800fb1c:	9900      	ldr	r1, [sp, #0]
 800fb1e:	4605      	mov	r5, r0
 800fb20:	4630      	mov	r0, r6
 800fb22:	f7ff f963 	bl	800edec <_malloc_r>
 800fb26:	b948      	cbnz	r0, 800fb3c <__smakebuf_r+0x44>
 800fb28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb2c:	059a      	lsls	r2, r3, #22
 800fb2e:	d4ef      	bmi.n	800fb10 <__smakebuf_r+0x18>
 800fb30:	f023 0303 	bic.w	r3, r3, #3
 800fb34:	f043 0302 	orr.w	r3, r3, #2
 800fb38:	81a3      	strh	r3, [r4, #12]
 800fb3a:	e7e3      	b.n	800fb04 <__smakebuf_r+0xc>
 800fb3c:	4b0d      	ldr	r3, [pc, #52]	; (800fb74 <__smakebuf_r+0x7c>)
 800fb3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb40:	89a3      	ldrh	r3, [r4, #12]
 800fb42:	6020      	str	r0, [r4, #0]
 800fb44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb48:	81a3      	strh	r3, [r4, #12]
 800fb4a:	9b00      	ldr	r3, [sp, #0]
 800fb4c:	6163      	str	r3, [r4, #20]
 800fb4e:	9b01      	ldr	r3, [sp, #4]
 800fb50:	6120      	str	r0, [r4, #16]
 800fb52:	b15b      	cbz	r3, 800fb6c <__smakebuf_r+0x74>
 800fb54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f000 f8d1 	bl	800fd00 <_isatty_r>
 800fb5e:	b128      	cbz	r0, 800fb6c <__smakebuf_r+0x74>
 800fb60:	89a3      	ldrh	r3, [r4, #12]
 800fb62:	f023 0303 	bic.w	r3, r3, #3
 800fb66:	f043 0301 	orr.w	r3, r3, #1
 800fb6a:	81a3      	strh	r3, [r4, #12]
 800fb6c:	89a0      	ldrh	r0, [r4, #12]
 800fb6e:	4305      	orrs	r5, r0
 800fb70:	81a5      	strh	r5, [r4, #12]
 800fb72:	e7cd      	b.n	800fb10 <__smakebuf_r+0x18>
 800fb74:	0800f905 	.word	0x0800f905

0800fb78 <_malloc_usable_size_r>:
 800fb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb7c:	1f18      	subs	r0, r3, #4
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	bfbc      	itt	lt
 800fb82:	580b      	ldrlt	r3, [r1, r0]
 800fb84:	18c0      	addlt	r0, r0, r3
 800fb86:	4770      	bx	lr

0800fb88 <_raise_r>:
 800fb88:	291f      	cmp	r1, #31
 800fb8a:	b538      	push	{r3, r4, r5, lr}
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	460d      	mov	r5, r1
 800fb90:	d904      	bls.n	800fb9c <_raise_r+0x14>
 800fb92:	2316      	movs	r3, #22
 800fb94:	6003      	str	r3, [r0, #0]
 800fb96:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb9e:	b112      	cbz	r2, 800fba6 <_raise_r+0x1e>
 800fba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fba4:	b94b      	cbnz	r3, 800fbba <_raise_r+0x32>
 800fba6:	4620      	mov	r0, r4
 800fba8:	f000 f830 	bl	800fc0c <_getpid_r>
 800fbac:	462a      	mov	r2, r5
 800fbae:	4601      	mov	r1, r0
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbb6:	f000 b817 	b.w	800fbe8 <_kill_r>
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d00a      	beq.n	800fbd4 <_raise_r+0x4c>
 800fbbe:	1c59      	adds	r1, r3, #1
 800fbc0:	d103      	bne.n	800fbca <_raise_r+0x42>
 800fbc2:	2316      	movs	r3, #22
 800fbc4:	6003      	str	r3, [r0, #0]
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	e7e7      	b.n	800fb9a <_raise_r+0x12>
 800fbca:	2400      	movs	r4, #0
 800fbcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	4798      	blx	r3
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	e7e0      	b.n	800fb9a <_raise_r+0x12>

0800fbd8 <raise>:
 800fbd8:	4b02      	ldr	r3, [pc, #8]	; (800fbe4 <raise+0xc>)
 800fbda:	4601      	mov	r1, r0
 800fbdc:	6818      	ldr	r0, [r3, #0]
 800fbde:	f7ff bfd3 	b.w	800fb88 <_raise_r>
 800fbe2:	bf00      	nop
 800fbe4:	20000250 	.word	0x20000250

0800fbe8 <_kill_r>:
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	4d07      	ldr	r5, [pc, #28]	; (800fc08 <_kill_r+0x20>)
 800fbec:	2300      	movs	r3, #0
 800fbee:	4604      	mov	r4, r0
 800fbf0:	4608      	mov	r0, r1
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	602b      	str	r3, [r5, #0]
 800fbf6:	f7f5 fd81 	bl	80056fc <_kill>
 800fbfa:	1c43      	adds	r3, r0, #1
 800fbfc:	d102      	bne.n	800fc04 <_kill_r+0x1c>
 800fbfe:	682b      	ldr	r3, [r5, #0]
 800fc00:	b103      	cbz	r3, 800fc04 <_kill_r+0x1c>
 800fc02:	6023      	str	r3, [r4, #0]
 800fc04:	bd38      	pop	{r3, r4, r5, pc}
 800fc06:	bf00      	nop
 800fc08:	200008d0 	.word	0x200008d0

0800fc0c <_getpid_r>:
 800fc0c:	f7f5 bd6e 	b.w	80056ec <_getpid>

0800fc10 <__sread>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	460c      	mov	r4, r1
 800fc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc18:	f000 f894 	bl	800fd44 <_read_r>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	bfab      	itete	ge
 800fc20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc22:	89a3      	ldrhlt	r3, [r4, #12]
 800fc24:	181b      	addge	r3, r3, r0
 800fc26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc2a:	bfac      	ite	ge
 800fc2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc2e:	81a3      	strhlt	r3, [r4, #12]
 800fc30:	bd10      	pop	{r4, pc}

0800fc32 <__swrite>:
 800fc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc36:	461f      	mov	r7, r3
 800fc38:	898b      	ldrh	r3, [r1, #12]
 800fc3a:	05db      	lsls	r3, r3, #23
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	460c      	mov	r4, r1
 800fc40:	4616      	mov	r6, r2
 800fc42:	d505      	bpl.n	800fc50 <__swrite+0x1e>
 800fc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc48:	2302      	movs	r3, #2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f000 f868 	bl	800fd20 <_lseek_r>
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc5a:	81a3      	strh	r3, [r4, #12]
 800fc5c:	4632      	mov	r2, r6
 800fc5e:	463b      	mov	r3, r7
 800fc60:	4628      	mov	r0, r5
 800fc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc66:	f000 b817 	b.w	800fc98 <_write_r>

0800fc6a <__sseek>:
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	460c      	mov	r4, r1
 800fc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc72:	f000 f855 	bl	800fd20 <_lseek_r>
 800fc76:	1c43      	adds	r3, r0, #1
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	bf15      	itete	ne
 800fc7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc86:	81a3      	strheq	r3, [r4, #12]
 800fc88:	bf18      	it	ne
 800fc8a:	81a3      	strhne	r3, [r4, #12]
 800fc8c:	bd10      	pop	{r4, pc}

0800fc8e <__sclose>:
 800fc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc92:	f000 b813 	b.w	800fcbc <_close_r>
	...

0800fc98 <_write_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4d07      	ldr	r5, [pc, #28]	; (800fcb8 <_write_r+0x20>)
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	4608      	mov	r0, r1
 800fca0:	4611      	mov	r1, r2
 800fca2:	2200      	movs	r2, #0
 800fca4:	602a      	str	r2, [r5, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	f7f5 fd5f 	bl	800576a <_write>
 800fcac:	1c43      	adds	r3, r0, #1
 800fcae:	d102      	bne.n	800fcb6 <_write_r+0x1e>
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	b103      	cbz	r3, 800fcb6 <_write_r+0x1e>
 800fcb4:	6023      	str	r3, [r4, #0]
 800fcb6:	bd38      	pop	{r3, r4, r5, pc}
 800fcb8:	200008d0 	.word	0x200008d0

0800fcbc <_close_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d06      	ldr	r5, [pc, #24]	; (800fcd8 <_close_r+0x1c>)
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	602b      	str	r3, [r5, #0]
 800fcc8:	f7f5 fd6b 	bl	80057a2 <_close>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	d102      	bne.n	800fcd6 <_close_r+0x1a>
 800fcd0:	682b      	ldr	r3, [r5, #0]
 800fcd2:	b103      	cbz	r3, 800fcd6 <_close_r+0x1a>
 800fcd4:	6023      	str	r3, [r4, #0]
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}
 800fcd8:	200008d0 	.word	0x200008d0

0800fcdc <_fstat_r>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	4d07      	ldr	r5, [pc, #28]	; (800fcfc <_fstat_r+0x20>)
 800fce0:	2300      	movs	r3, #0
 800fce2:	4604      	mov	r4, r0
 800fce4:	4608      	mov	r0, r1
 800fce6:	4611      	mov	r1, r2
 800fce8:	602b      	str	r3, [r5, #0]
 800fcea:	f7f5 fd66 	bl	80057ba <_fstat>
 800fcee:	1c43      	adds	r3, r0, #1
 800fcf0:	d102      	bne.n	800fcf8 <_fstat_r+0x1c>
 800fcf2:	682b      	ldr	r3, [r5, #0]
 800fcf4:	b103      	cbz	r3, 800fcf8 <_fstat_r+0x1c>
 800fcf6:	6023      	str	r3, [r4, #0]
 800fcf8:	bd38      	pop	{r3, r4, r5, pc}
 800fcfa:	bf00      	nop
 800fcfc:	200008d0 	.word	0x200008d0

0800fd00 <_isatty_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4d06      	ldr	r5, [pc, #24]	; (800fd1c <_isatty_r+0x1c>)
 800fd04:	2300      	movs	r3, #0
 800fd06:	4604      	mov	r4, r0
 800fd08:	4608      	mov	r0, r1
 800fd0a:	602b      	str	r3, [r5, #0]
 800fd0c:	f7f5 fd65 	bl	80057da <_isatty>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_isatty_r+0x1a>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_isatty_r+0x1a>
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	200008d0 	.word	0x200008d0

0800fd20 <_lseek_r>:
 800fd20:	b538      	push	{r3, r4, r5, lr}
 800fd22:	4d07      	ldr	r5, [pc, #28]	; (800fd40 <_lseek_r+0x20>)
 800fd24:	4604      	mov	r4, r0
 800fd26:	4608      	mov	r0, r1
 800fd28:	4611      	mov	r1, r2
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	602a      	str	r2, [r5, #0]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	f7f5 fd5e 	bl	80057f0 <_lseek>
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d102      	bne.n	800fd3e <_lseek_r+0x1e>
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	b103      	cbz	r3, 800fd3e <_lseek_r+0x1e>
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	bd38      	pop	{r3, r4, r5, pc}
 800fd40:	200008d0 	.word	0x200008d0

0800fd44 <_read_r>:
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	4d07      	ldr	r5, [pc, #28]	; (800fd64 <_read_r+0x20>)
 800fd48:	4604      	mov	r4, r0
 800fd4a:	4608      	mov	r0, r1
 800fd4c:	4611      	mov	r1, r2
 800fd4e:	2200      	movs	r2, #0
 800fd50:	602a      	str	r2, [r5, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	f7f5 fcec 	bl	8005730 <_read>
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	d102      	bne.n	800fd62 <_read_r+0x1e>
 800fd5c:	682b      	ldr	r3, [r5, #0]
 800fd5e:	b103      	cbz	r3, 800fd62 <_read_r+0x1e>
 800fd60:	6023      	str	r3, [r4, #0]
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
 800fd64:	200008d0 	.word	0x200008d0

0800fd68 <trunc>:
 800fd68:	ec51 0b10 	vmov	r0, r1, d0
 800fd6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd70:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fd74:	2b13      	cmp	r3, #19
 800fd76:	b5d0      	push	{r4, r6, r7, lr}
 800fd78:	460c      	mov	r4, r1
 800fd7a:	dc10      	bgt.n	800fd9e <trunc+0x36>
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	bfa5      	ittet	ge
 800fd80:	4a11      	ldrge	r2, [pc, #68]	; (800fdc8 <trunc+0x60>)
 800fd82:	fa42 f303 	asrge.w	r3, r2, r3
 800fd86:	2100      	movlt	r1, #0
 800fd88:	2100      	movge	r1, #0
 800fd8a:	bfb9      	ittee	lt
 800fd8c:	2000      	movlt	r0, #0
 800fd8e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800fd92:	2000      	movge	r0, #0
 800fd94:	ea24 0103 	bicge.w	r1, r4, r3
 800fd98:	ec41 0b10 	vmov	d0, r0, r1
 800fd9c:	bdd0      	pop	{r4, r6, r7, pc}
 800fd9e:	2b33      	cmp	r3, #51	; 0x33
 800fda0:	dd08      	ble.n	800fdb4 <trunc+0x4c>
 800fda2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fda6:	d1f7      	bne.n	800fd98 <trunc+0x30>
 800fda8:	ee10 2a10 	vmov	r2, s0
 800fdac:	460b      	mov	r3, r1
 800fdae:	f7f0 fa75 	bl	800029c <__adddf3>
 800fdb2:	e7f1      	b.n	800fd98 <trunc+0x30>
 800fdb4:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdbc:	fa23 f202 	lsr.w	r2, r3, r2
 800fdc0:	ea20 0602 	bic.w	r6, r0, r2
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	e7e7      	b.n	800fd98 <trunc+0x30>
 800fdc8:	000fffff 	.word	0x000fffff

0800fdcc <ceilf>:
 800fdcc:	ee10 3a10 	vmov	r3, s0
 800fdd0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fdd4:	3a7f      	subs	r2, #127	; 0x7f
 800fdd6:	2a16      	cmp	r2, #22
 800fdd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fddc:	dc2a      	bgt.n	800fe34 <ceilf+0x68>
 800fdde:	2a00      	cmp	r2, #0
 800fde0:	da11      	bge.n	800fe06 <ceilf+0x3a>
 800fde2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fe48 <ceilf+0x7c>
 800fde6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fdea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf2:	dd05      	ble.n	800fe00 <ceilf+0x34>
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	db23      	blt.n	800fe40 <ceilf+0x74>
 800fdf8:	2900      	cmp	r1, #0
 800fdfa:	bf18      	it	ne
 800fdfc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800fe00:	ee00 3a10 	vmov	s0, r3
 800fe04:	4770      	bx	lr
 800fe06:	4911      	ldr	r1, [pc, #68]	; (800fe4c <ceilf+0x80>)
 800fe08:	4111      	asrs	r1, r2
 800fe0a:	420b      	tst	r3, r1
 800fe0c:	d0fa      	beq.n	800fe04 <ceilf+0x38>
 800fe0e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fe48 <ceilf+0x7c>
 800fe12:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1e:	ddef      	ble.n	800fe00 <ceilf+0x34>
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	bfc2      	ittt	gt
 800fe24:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800fe28:	fa40 f202 	asrgt.w	r2, r0, r2
 800fe2c:	189b      	addgt	r3, r3, r2
 800fe2e:	ea23 0301 	bic.w	r3, r3, r1
 800fe32:	e7e5      	b.n	800fe00 <ceilf+0x34>
 800fe34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fe38:	d3e4      	bcc.n	800fe04 <ceilf+0x38>
 800fe3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe3e:	4770      	bx	lr
 800fe40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe44:	e7dc      	b.n	800fe00 <ceilf+0x34>
 800fe46:	bf00      	nop
 800fe48:	7149f2ca 	.word	0x7149f2ca
 800fe4c:	007fffff 	.word	0x007fffff

0800fe50 <_init>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	bf00      	nop
 800fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe56:	bc08      	pop	{r3}
 800fe58:	469e      	mov	lr, r3
 800fe5a:	4770      	bx	lr

0800fe5c <_fini>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	bf00      	nop
 800fe60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe62:	bc08      	pop	{r3}
 800fe64:	469e      	mov	lr, r3
 800fe66:	4770      	bx	lr
