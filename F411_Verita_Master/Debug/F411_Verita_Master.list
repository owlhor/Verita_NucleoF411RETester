
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000baac  0800dcd8  0800dcd8  0001dcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019784  08019784  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  08019784  08019784  00029784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801978c  0801978c  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801978c  0801978c  0002978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019790  08019790  00029790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  08019794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000288  08019a18  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08019a18  000306d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188e9  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003349  00000000  00000000  00048b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0004bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0004d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e6f  00000000  00000000  0004e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196d8  00000000  00000000  00068717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099234  00000000  00000000  00081def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  0011b074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dcc0 	.word	0x0800dcc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0800dcc0 	.word	0x0800dcc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f004 fcd7 	bl	80059c4 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00c fdc6 	bl	800dbd8 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00c fda1 	bl	800dbd8 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 fc7c 	bl	80059c4 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	200002a8 	.word	0x200002a8
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fd46 	bl	8005bb8 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002a4 	.word	0x200002a4
 800114c:	200002a5 	.word	0x200002a5

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f004 fd1e 	bl	8005bb8 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002a4 	.word	0x200002a4
 8001194:	200002a5 	.word	0x200002a5

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f004 fcfa 	bl	8005bb8 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200002a4 	.word	0x200002a4
 8001208:	200002a5 	.word	0x200002a5
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f004 fcbe 	bl	8005bb8 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	200002a4 	.word	0x200002a4
 800129c:	200002a5 	.word	0x200002a5
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f004 f9ed 	bl	80056a4 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 fbea 	bl	8008ab2 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f004 f9de 	bl	80056a4 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 800135e:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	f040 80b5 	bne.w	80014da <Rx_Verita_engine_callBak+0x18a>
 8001370:	4b67      	ldr	r3, [pc, #412]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b52      	cmp	r3, #82	; 0x52
 800137e:	f040 80ac 	bne.w	80014da <Rx_Verita_engine_callBak+0x18a>
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	f040 80a3 	bne.w	80014da <Rx_Verita_engine_callBak+0x18a>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001394:	2400      	movs	r4, #0
 8001396:	e009      	b.n	80013ac <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8001398:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4423      	add	r3, r4
 800139e:	3303      	adds	r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 80013a8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013aa:	3401      	adds	r4, #1
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	ddf3      	ble.n	8001398 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e006      	b.n	80013c2 <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b57      	ldr	r3, [pc, #348]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 80013b8:	5d1b      	ldrb	r3, [r3, r4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 80013c0:	3401      	adds	r4, #1
 80013c2:	2c04      	cmp	r4, #4
 80013c4:	ddf6      	ble.n	80013b4 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d17e      	bne.n	80014d6 <Rx_Verita_engine_callBak+0x186>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3309      	adds	r3, #9
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b48      	ldr	r3, [pc, #288]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80013f0:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b48      	ldr	r3, [pc, #288]	; (8001518 <Rx_Verita_engine_callBak+0x1c8>)
 80013f8:	fba3 1302 	umull	r1, r3, r3, r2
 80013fc:	0859      	lsrs	r1, r3, #1
 80013fe:	460b      	mov	r3, r1
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b41      	ldr	r3, [pc, #260]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 800140a:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800140c:	4b41      	ldr	r3, [pc, #260]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 8001414:	789b      	ldrb	r3, [r3, #2]
 8001416:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 8001418:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001424:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b20      	cmp	r3, #32
 800142a:	d808      	bhi.n	800143e <Rx_Verita_engine_callBak+0xee>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 800143a:	2391      	movs	r3, #145	; 0x91
 800143c:	e063      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 800143e:	4b35      	ldr	r3, [pc, #212]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b8f      	cmp	r3, #143	; 0x8f
 8001444:	d95d      	bls.n	8001502 <Rx_Verita_engine_callBak+0x1b2>
					switch(logger[0]){
 8001446:	4b33      	ldr	r3, [pc, #204]	; (8001514 <Rx_Verita_engine_callBak+0x1c4>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3b91      	subs	r3, #145	; 0x91
 800144c:	2b11      	cmp	r3, #17
 800144e:	d827      	bhi.n	80014a0 <Rx_Verita_engine_callBak+0x150>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <Rx_Verita_engine_callBak+0x108>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	080014a5 	.word	0x080014a5
 800145c:	080014a9 	.word	0x080014a9
 8001460:	080014ad 	.word	0x080014ad
 8001464:	080014b1 	.word	0x080014b1
 8001468:	080014a1 	.word	0x080014a1
 800146c:	080014a1 	.word	0x080014a1
 8001470:	080014a1 	.word	0x080014a1
 8001474:	080014a1 	.word	0x080014a1
 8001478:	080014a1 	.word	0x080014a1
 800147c:	080014a1 	.word	0x080014a1
 8001480:	080014a1 	.word	0x080014a1
 8001484:	080014a1 	.word	0x080014a1
 8001488:	080014a1 	.word	0x080014a1
 800148c:	080014a1 	.word	0x080014a1
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014b5 	.word	0x080014b5
 8001498:	080014bf 	.word	0x080014bf
 800149c:	080014cb 	.word	0x080014cb
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80014a0:	2390      	movs	r3, #144	; 0x90
 80014a2:	e030      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
						case 0x91:
							return VRT_OK;
 80014a4:	2391      	movs	r3, #145	; 0x91
 80014a6:	e02e      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
						case 0x92:
							return VRT_Busy;
 80014a8:	2392      	movs	r3, #146	; 0x92
 80014aa:	e02c      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
						case 0x93:
							return VRT_DataLoss;
 80014ac:	2393      	movs	r3, #147	; 0x93
 80014ae:	e02a      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
						case 0x94:
							return VRT_UnEnc;
 80014b0:	2394      	movs	r3, #148	; 0x94
 80014b2:	e028      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80014ba:	2391      	movs	r3, #145	; 0x91
 80014bc:	e023      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
						case VRC_Next:

							regisk->Mark.Flag_next = 0xFF;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
							return VRC_Next;
 80014c6:	23a1      	movs	r3, #161	; 0xa1
 80014c8:	e01d      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
						case VRC_Flag_1:
							regisk->Mark.Flag_ger = logu.U8[0];
 80014ca:	7a3a      	ldrb	r2, [r7, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80014d2:	2391      	movs	r3, #145	; 0x91
 80014d4:	e017      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 80014d6:	2393      	movs	r3, #147	; 0x93
 80014d8:	e015      	b.n	8001506 <Rx_Verita_engine_callBak+0x1b6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3309      	adds	r3, #9
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80014e4:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <Rx_Verita_engine_callBak+0x1c8>)
 80014ec:	fba3 1302 	umull	r1, r3, r3, r2
 80014f0:	0859      	lsrs	r1, r3, #1
 80014f2:	460b      	mov	r3, r1
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <Rx_Verita_engine_callBak+0x1c0>)
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	e000      	b.n	8001504 <Rx_Verita_engine_callBak+0x1b4>
			if( chksum[1] == logger[5]){
 8001502:	bf00      	nop
		}


	return VRT_ERROR;
 8001504:	2390      	movs	r3, #144	; 0x90
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bc90      	pop	{r4, r7}
 800150e:	4770      	bx	lr
 8001510:	200002aa 	.word	0x200002aa
 8001514:	200002ac 	.word	0x200002ac
 8001518:	38e38e39 	.word	0x38e38e39

0800151c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f80b 	bl	800155c <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 8001552:	2391      	movs	r3, #145	; 0x91
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	460b      	mov	r3, r1
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	2356      	movs	r3, #86	; 0x56
 800157a:	753b      	strb	r3, [r7, #20]
 800157c:	2352      	movs	r3, #82	; 0x52
 800157e:	757b      	strb	r3, [r7, #21]
 8001580:	2354      	movs	r3, #84	; 0x54
 8001582:	75bb      	strb	r3, [r7, #22]
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 8001588:	2304      	movs	r3, #4
 800158a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 8001598:	2404      	movs	r4, #4
 800159a:	e00f      	b.n	80015bc <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 800159c:	1f23      	subs	r3, r4, #4
 800159e:	3328      	adds	r3, #40	; 0x28
 80015a0:	443b      	add	r3, r7
 80015a2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015a6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015aa:	443b      	add	r3, r7
 80015ac:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80015b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b4:	3301      	adds	r3, #1
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80015ba:	3401      	adds	r4, #1
 80015bc:	2c07      	cmp	r4, #7
 80015be:	dded      	ble.n	800159c <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80015c0:	2403      	movs	r4, #3
 80015c2:	e00a      	b.n	80015da <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80015c4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015c8:	443b      	add	r3, r7
 80015ca:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80015ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d2:	4413      	add	r3, r2
 80015d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80015d8:	3401      	adds	r4, #1
 80015da:	2c07      	cmp	r4, #7
 80015dc:	ddf2      	ble.n	80015c4 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80015de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015e6:	43d2      	mvns	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	3328      	adds	r3, #40	; 0x28
 80015ec:	443b      	add	r3, r7
 80015ee:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 80015f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f107 0114 	add.w	r1, r7, #20
 8001600:	2332      	movs	r3, #50	; 0x32
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f008 f97d 	bl	8009902 <HAL_UART_Transmit>
}
 8001608:	bf00      	nop
 800160a:	372c      	adds	r7, #44	; 0x2c
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}

08001610 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
 800161c:	4613      	mov	r3, r2
 800161e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	2356      	movs	r3, #86	; 0x56
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	2352      	movs	r3, #82	; 0x52
 8001634:	737b      	strb	r3, [r7, #13]
 8001636:	2354      	movs	r3, #84	; 0x54
 8001638:	73bb      	strb	r3, [r7, #14]
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	78bb      	ldrb	r3, [r7, #2]
 8001640:	743b      	strb	r3, [r7, #16]
 8001642:	23ff      	movs	r3, #255	; 0xff
 8001644:	74bb      	strb	r3, [r7, #18]
 8001646:	23aa      	movs	r3, #170	; 0xaa
 8001648:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 800164e:	2403      	movs	r4, #3
 8001650:	e008      	b.n	8001664 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001652:	f104 0320 	add.w	r3, r4, #32
 8001656:	443b      	add	r3, r7
 8001658:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800165c:	7ffb      	ldrb	r3, [r7, #31]
 800165e:	4413      	add	r3, r2
 8001660:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001662:	3401      	adds	r4, #1
 8001664:	2c07      	cmp	r4, #7
 8001666:	ddf4      	ble.n	8001652 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	43db      	mvns	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 8001670:	f107 010c 	add.w	r1, r7, #12
 8001674:	231e      	movs	r3, #30
 8001676:	2209      	movs	r2, #9
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f008 f942 	bl	8009902 <HAL_UART_Transmit>
}
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}
	...

08001688 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 8001690:	237f      	movs	r3, #127	; 0x7f
 8001692:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <BL_UART_Start+0x58>)
 800169c:	f004 f802 	bl	80056a4 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2140      	movs	r1, #64	; 0x40
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <BL_UART_Start+0x5c>)
 80016a6:	f003 fffd 	bl	80056a4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016aa:	2014      	movs	r0, #20
 80016ac:	f003 f930 	bl	8004910 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <BL_UART_Start+0x5c>)
 80016b6:	f003 fff5 	bl	80056a4 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80016ba:	2055      	movs	r0, #85	; 0x55
 80016bc:	f003 f928 	bl	8004910 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80016c0:	f107 010f 	add.w	r1, r7, #15
 80016c4:	230a      	movs	r3, #10
 80016c6:	2201      	movs	r2, #1
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f008 f91a 	bl	8009902 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80016ce:	2114      	movs	r1, #20
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f999 	bl	8001a08 <BL_UART_wait_ACK>

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020800 	.word	0x40020800

080016e8 <BL_UART_Finish>:

void BL_UART_Finish(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 80016ec:	2064      	movs	r0, #100	; 0x64
 80016ee:	f003 f90f 	bl	8004910 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <BL_UART_Finish+0x34>)
 80016fa:	f003 ffd3 	bl	80056a4 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <BL_UART_Finish+0x38>)
 8001704:	f003 ffce 	bl	80056a4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001708:	2014      	movs	r0, #20
 800170a:	f003 f901 	bl	8004910 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <BL_UART_Finish+0x38>)
 8001714:	f003 ffc6 	bl	80056a4 <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800

08001724 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b0cb      	sub	sp, #300	; 0x12c
 8001728:	af00      	add	r7, sp, #0
 800172a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800172e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001732:	6020      	str	r0, [r4, #0]
 8001734:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001738:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800173c:	6001      	str	r1, [r0, #0]
 800173e:	4611      	mov	r1, r2
 8001740:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001744:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800174e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001752:	460a      	mov	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 8001756:	f64c 6331 	movw	r3, #52785	; 0xce31
 800175a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001764:	2300      	movs	r3, #0
 8001766:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001770:	2300      	movs	r3, #0
 8001772:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 8001776:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800177a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	3304      	adds	r3, #4
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f009 fb3a 	bl	800ae04 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 8001790:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001794:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a77      	ldr	r2, [pc, #476]	; (8001978 <BL_UART_WriteMem+0x254>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d909      	bls.n	80017b4 <BL_UART_WriteMem+0x90>
 80017a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ae:	d201      	bcs.n	80017b4 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80017b0:	23bc      	movs	r3, #188	; 0xbc
 80017b2:	e0dc      	b.n	800196e <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80017b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017bc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017c0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80017c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017d0:	78db      	ldrb	r3, [r3, #3]
 80017d2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80017d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 80017e4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 80017f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001800:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001804:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001808:	4053      	eors	r3, r2
 800180a:	b2da      	uxtb	r2, r3
 800180c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001810:	4053      	eors	r3, r2
 8001812:	b2da      	uxtb	r2, r3
 8001814:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001818:	4053      	eors	r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001820:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001824:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800182e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001832:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001836:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800183a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800183e:	7812      	ldrb	r2, [r2, #0]
 8001840:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001842:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001846:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001850:	2400      	movs	r4, #0
 8001852:	e01c      	b.n	800188e <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001854:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001858:	4621      	mov	r1, r4
 800185a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800185e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	440b      	add	r3, r1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4053      	eors	r3, r2
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001870:	4622      	mov	r2, r4
 8001872:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001876:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	441a      	add	r2, r3
 800187e:	1c63      	adds	r3, r4, #1
 8001880:	7811      	ldrb	r1, [r2, #0]
 8001882:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001886:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800188a:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 800188c:	3401      	adds	r4, #1
 800188e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001892:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	429c      	cmp	r4, r3
 800189a:	dddb      	ble.n	8001854 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 800189c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3302      	adds	r3, #2
 80018a8:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80018ac:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018b0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018b4:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80018b6:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80018ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018be:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018c2:	230a      	movs	r3, #10
 80018c4:	2202      	movs	r2, #2
 80018c6:	6800      	ldr	r0, [r0, #0]
 80018c8:	f008 f81b 	bl	8009902 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018d4:	210a      	movs	r1, #10
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f000 f896 	bl	8001a08 <BL_UART_wait_ACK>
 80018dc:	4603      	mov	r3, r0
 80018de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 80018e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80018e6:	2b79      	cmp	r3, #121	; 0x79
 80018e8:	d140      	bne.n	800196c <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 80018ea:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80018ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f2:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018f6:	230f      	movs	r3, #15
 80018f8:	2205      	movs	r2, #5
 80018fa:	6800      	ldr	r0, [r0, #0]
 80018fc:	f008 f801 	bl	8009902 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001900:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001904:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001908:	210a      	movs	r1, #10
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f000 f87c 	bl	8001a08 <BL_UART_wait_ACK>
 8001910:	4603      	mov	r3, r0
 8001912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800191a:	2b79      	cmp	r3, #121	; 0x79
 800191c:	d124      	bne.n	8001968 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800191e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001922:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	3303      	adds	r3, #3
 800192c:	b29a      	uxth	r2, r3
 800192e:	f107 0114 	add.w	r1, r7, #20
 8001932:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001936:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	6800      	ldr	r0, [r0, #0]
 800193e:	f007 ffe0 	bl	8009902 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001942:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001946:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800194a:	210a      	movs	r1, #10
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f000 f85b 	bl	8001a08 <BL_UART_wait_ACK>
 8001952:	4603      	mov	r3, r0
 8001954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 8001958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800195c:	2b79      	cmp	r3, #121	; 0x79
 800195e:	d101      	bne.n	8001964 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001960:	2379      	movs	r3, #121	; 0x79
 8001962:	e004      	b.n	800196e <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001964:	231f      	movs	r3, #31
 8001966:	e002      	b.n	800196e <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 8001968:	231f      	movs	r3, #31
 800196a:	e000      	b.n	800196e <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 800196c:	231f      	movs	r3, #31

	return UB_NACK;
}
 800196e:	4618      	mov	r0, r3
 8001970:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	1ffeffff 	.word	0x1ffeffff

0800197c <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 8001988:	f64b 3344 	movw	r3, #47940	; 0xbb44
 800198c:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <BL_UART_ExtendEraseMem_SP+0x88>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	823b      	strh	r3, [r7, #16]
 8001998:	2300      	movs	r3, #0
 800199a:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 80019a4:	7b3b      	ldrb	r3, [r7, #12]
 80019a6:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 80019a8:	7b3a      	ldrb	r2, [r7, #12]
 80019aa:	7b7b      	ldrb	r3, [r7, #13]
 80019ac:	4053      	eors	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80019b2:	f107 0114 	add.w	r1, r7, #20
 80019b6:	230a      	movs	r3, #10
 80019b8:	2202      	movs	r2, #2
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f007 ffa1 	bl	8009902 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80019c0:	210a      	movs	r1, #10
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f820 	bl	8001a08 <BL_UART_wait_ACK>
 80019c8:	4603      	mov	r3, r0
 80019ca:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b79      	cmp	r3, #121	; 0x79
 80019d0:	d113      	bne.n	80019fa <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80019d2:	f107 0110 	add.w	r1, r7, #16
 80019d6:	230f      	movs	r3, #15
 80019d8:	2203      	movs	r2, #3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f007 ff91 	bl	8009902 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 80019e0:	210a      	movs	r1, #10
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f810 	bl	8001a08 <BL_UART_wait_ACK>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b79      	cmp	r3, #121	; 0x79
 80019f0:	d101      	bne.n	80019f6 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 80019f2:	2379      	movs	r3, #121	; 0x79
 80019f4:	e002      	b.n	80019fc <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 80019f6:	231f      	movs	r3, #31
 80019f8:	e000      	b.n	80019fc <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 80019fa:	231f      	movs	r3, #31

	return UB_NACK;
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800dcd8 	.word	0x0800dcd8

08001a08 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a1c:	f002 ff6c 	bl	80048f8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	4413      	add	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a28:	e018      	b.n	8001a5c <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a2a:	f107 010f 	add.w	r1, r7, #15
 8001a2e:	2302      	movs	r3, #2
 8001a30:	2201      	movs	r2, #1
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f007 fff7 	bl	8009a26 <HAL_UART_Receive>

		if(response == 0x79){
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b79      	cmp	r3, #121	; 0x79
 8001a3c:	d101      	bne.n	8001a42 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a3e:	2379      	movs	r3, #121	; 0x79
 8001a40:	e010      	b.n	8001a64 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b1f      	cmp	r3, #31
 8001a46:	d101      	bne.n	8001a4c <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001a48:	231f      	movs	r3, #31
 8001a4a:	e00b      	b.n	8001a64 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001a4c:	f002 ff54 	bl	80048f8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d801      	bhi.n	8001a5c <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001a58:	23ab      	movs	r3, #171	; 0xab
 8001a5a:	e003      	b.n	8001a64 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1e3      	bne.n	8001a2a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001a62:	231f      	movs	r3, #31
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a70:	b09a      	sub	sp, #104	; 0x68
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a74:	f002 feda 	bl	800482c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a78:	f000 fa28 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7c:	f000 fc0a 	bl	8002294 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a80:	f000 fbe8 	bl	8002254 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a84:	f000 fb92 	bl	80021ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a88:	f000 fa88 	bl	8001f9c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001a8c:	f000 fbb8 	bl	8002200 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001a90:	f000 fab2 	bl	8001ff8 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001a94:	f000 fb3a 	bl	800210c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001a98:	f000 fb5c 	bl	8002154 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001a9c:	f000 fae2 	bl	8002064 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001aa0:	4877      	ldr	r0, [pc, #476]	; (8001c80 <main+0x214>)
 8001aa2:	f007 fac3 	bl	800902c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4876      	ldr	r0, [pc, #472]	; (8001c84 <main+0x218>)
 8001aaa:	f007 fbf6 	bl	800929a <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001aae:	4a76      	ldr	r2, [pc, #472]	; (8001c88 <main+0x21c>)
 8001ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab4:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001ab6:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <main+0x21c>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4a73      	ldr	r2, [pc, #460]	; (8001c8c <main+0x220>)
 8001abe:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001ac0:	4a73      	ldr	r2, [pc, #460]	; (8001c90 <main+0x224>)
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001ac6:	4a72      	ldr	r2, [pc, #456]	; (8001c90 <main+0x224>)
 8001ac8:	23fa      	movs	r3, #250	; 0xfa
 8001aca:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001acc:	4a70      	ldr	r2, [pc, #448]	; (8001c90 <main+0x224>)
 8001ace:	2364      	movs	r3, #100	; 0x64
 8001ad0:	8093      	strh	r3, [r2, #4]
  buzzr.timestamp = 0;
 8001ad2:	4a6f      	ldr	r2, [pc, #444]	; (8001c90 <main+0x224>)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6093      	str	r3, [r2, #8]

  stboxp.flag_start = 0;
 8001ad8:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <main+0x228>)
 8001ada:	2300      	movs	r3, #0
 8001adc:	7013      	strb	r3, [r2, #0]
  stboxp.choice_set = bpoxy_lobby;
 8001ade:	4a6d      	ldr	r2, [pc, #436]	; (8001c94 <main+0x228>)
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	7053      	strb	r3, [r2, #1]
  stboxp.ch_is = 0;
 8001ae4:	4a6b      	ldr	r2, [pc, #428]	; (8001c94 <main+0x228>)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	7093      	strb	r3, [r2, #2]

  gScr.counter_overcurrent = 0;
 8001aea:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <main+0x22c>)
 8001aec:	2300      	movs	r3, #0
 8001aee:	7053      	strb	r3, [r2, #1]
  gScr.fullflag = 0;
 8001af0:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <main+0x22c>)
 8001af2:	2300      	movs	r3, #0
 8001af4:	7013      	strb	r3, [r2, #0]

  k_flag.cnt = 0; k_flag.dn = 0; k_flag.up = 0;
 8001af6:	4a69      	ldr	r2, [pc, #420]	; (8001c9c <main+0x230>)
 8001af8:	2300      	movs	r3, #0
 8001afa:	7093      	strb	r3, [r2, #2]
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <main+0x230>)
 8001afe:	2300      	movs	r3, #0
 8001b00:	7053      	strb	r3, [r2, #1]
 8001b02:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <main+0x230>)
 8001b04:	2300      	movs	r3, #0
 8001b06:	7013      	strb	r3, [r2, #0]


  ili9341_Init();
 8001b08:	f001 ff4a 	bl	80039a0 <ili9341_Init>
  ili9341_DisplayOn();
 8001b0c:	f001 ff2c 	bl	8003968 <ili9341_DisplayOn>
//  ili9341_FillRect(50, 20, 50, 20, cl_RED);
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	4863      	ldr	r0, [pc, #396]	; (8001ca0 <main+0x234>)
 8001b14:	f7ff fa44 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001b18:	2188      	movs	r1, #136	; 0x88
 8001b1a:	4861      	ldr	r0, [pc, #388]	; (8001ca0 <main+0x234>)
 8001b1c:	f7ff fa40 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001b20:	4b60      	ldr	r3, [pc, #384]	; (8001ca4 <main+0x238>)
 8001b22:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001b26:	461c      	mov	r4, r3
 8001b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb4d 	bl	80001e0 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b4e:	230a      	movs	r3, #10
 8001b50:	4855      	ldr	r0, [pc, #340]	; (8001ca8 <main+0x23c>)
 8001b52:	f007 fed6 	bl	8009902 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 8001b56:	2209      	movs	r2, #9
 8001b58:	4954      	ldr	r1, [pc, #336]	; (8001cac <main+0x240>)
 8001b5a:	4855      	ldr	r0, [pc, #340]	; (8001cb0 <main+0x244>)
 8001b5c:	f008 f805 	bl	8009b6a <HAL_UART_Receive_DMA>

  gpio_BL_UART_Deactivate();
 8001b60:	f001 faf8 	bl	8003154 <gpio_BL_UART_Deactivate>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001b64:	f000 fd3e 	bl	80025e4 <Button_machine>
	  ////  ------------- Verita UART Recieve --------------------------
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  //Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  VRB_CL.U32, Use callback instead
	  Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 8001b68:	4952      	ldr	r1, [pc, #328]	; (8001cb4 <main+0x248>)
 8001b6a:	4851      	ldr	r0, [pc, #324]	; (8001cb0 <main+0x244>)
 8001b6c:	f7ff fcd6 	bl	800151c <Tx_Rq_Verita_engine>
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001b70:	f002 fec2 	bl	80048f8 <HAL_GetTick>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2200      	movs	r2, #0
 8001b78:	469a      	mov	sl, r3
 8001b7a:	4693      	mov	fp, r2
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <main+0x24c>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	4592      	cmp	sl, r2
 8001b84:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001b88:	d378      	bcc.n	8001c7c <main+0x210>
		timestamp_buzbtn += 100;
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <main+0x24c>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001b94:	6239      	str	r1, [r7, #32]
 8001b96:	f143 0300 	adc.w	r3, r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <main+0x24c>)
 8001b9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001ba2:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001ba6:	f000 fd6d 	bl	8002684 <knob_rotter>

		//running_box();

		if(stboxp.choice_set){
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <main+0x228>)
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d064      	beq.n	8001c7c <main+0x210>

		switch (boxpoint_runner){
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <main+0x250>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d037      	beq.n	8001c2a <main+0x1be>

		default:
		case a_wait:

			if(k_flag.up){ //flag_k_up
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <main+0x230>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01e      	beq.n	8001c00 <main+0x194>

				//state_box_choice_is++;
				//state_box_choice_is %= state_box_choice_n;
				stboxp.ch_is++;
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <main+0x228>)
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <main+0x228>)
 8001bcc:	7093      	strb	r3, [r2, #2]
				stboxp.ch_is %= bposxy[stboxp.choice_set].n_s; // don't be more than spec of Grandstate sub
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <main+0x228>)
 8001bd0:	7898      	ldrb	r0, [r3, #2]
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <main+0x228>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4a39      	ldr	r2, [pc, #228]	; (8001cc0 <main+0x254>)
 8001bda:	232a      	movs	r3, #42	; 0x2a
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	fbb0 f3f2 	udiv	r3, r0, r2
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	1ac3      	subs	r3, r0, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <main+0x228>)
 8001bf2:	7093      	strb	r3, [r2, #2]


				k_flag.up = 0;
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <main+0x230>)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	7013      	strb	r3, [r2, #0]
				boxpoint_runner = a_change;}
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <main+0x250>)
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){ //flag_k_dn
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <main+0x230>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d05d      	beq.n	8001cc4 <main+0x258>

				stboxp.ch_is--;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <main+0x228>)
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <main+0x228>)
 8001c12:	7093      	strb	r3, [r2, #2]
				stboxp.ch_is = (stboxp.ch_is < 0) ? bposxy[stboxp.choice_set].n_s - 1 : stboxp.ch_is;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <main+0x228>)
 8001c16:	789b      	ldrb	r3, [r3, #2]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <main+0x228>)
 8001c1a:	7093      	strb	r3, [r2, #2]
				//if(state_box_choice_is < 0){state_box_choice_is = state_box_choice_n - 1;}

				 k_flag.dn = 0;
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <main+0x230>)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	7053      	strb	r3, [r2, #1]
				 boxpoint_runner = a_change;}
 8001c22:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <main+0x250>)
 8001c24:	2301      	movs	r3, #1
 8001c26:	7013      	strb	r3, [r2, #0]

			break;
 8001c28:	e04c      	b.n	8001cc4 <main+0x258>

		case a_change:

			box_pointer(bposxy[stboxp.choice_set].x[stboxp.ch_is], bposxy[stboxp.choice_set].y[stboxp.ch_is]);
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <main+0x228>)
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <main+0x228>)
 8001c32:	789b      	ldrb	r3, [r3, #2]
 8001c34:	461c      	mov	r4, r3
 8001c36:	4922      	ldr	r1, [pc, #136]	; (8001cc0 <main+0x254>)
 8001c38:	4602      	mov	r2, r0
 8001c3a:	0052      	lsls	r2, r2, #1
 8001c3c:	4402      	add	r2, r0
 8001c3e:	00d3      	lsls	r3, r2, #3
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	4423      	add	r3, r4
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	440b      	add	r3, r1
 8001c48:	885d      	ldrh	r5, [r3, #2]
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <main+0x228>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <main+0x228>)
 8001c52:	789b      	ldrb	r3, [r3, #2]
 8001c54:	461c      	mov	r4, r3
 8001c56:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <main+0x254>)
 8001c58:	460a      	mov	r2, r1
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	440a      	add	r2, r1
 8001c5e:	00d3      	lsls	r3, r2, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	4423      	add	r3, r4
 8001c64:	3308      	adds	r3, #8
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4403      	add	r3, r0
 8001c6a:	88db      	ldrh	r3, [r3, #6]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f000 fc1e 	bl	80024b0 <box_pointer>
			boxpoint_runner = a_wait;
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <main+0x250>)
 8001c76:	2300      	movs	r3, #0
 8001c78:	7013      	strb	r3, [r2, #0]
			break;
 8001c7a:	e024      	b.n	8001cc6 <main+0x25a>

			}
		}
 8001c7c:	bf00      	nop
 8001c7e:	e022      	b.n	8001cc6 <main+0x25a>
 8001c80:	200003ac 	.word	0x200003ac
 8001c84:	20000364 	.word	0x20000364
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	20000694 	.word	0x20000694
 8001c90:	20000680 	.word	0x20000680
 8001c94:	200006a8 	.word	0x200006a8
 8001c98:	2000069c 	.word	0x2000069c
 8001c9c:	20000698 	.word	0x20000698
 8001ca0:	200002b8 	.word	0x200002b8
 8001ca4:	0800dcdc 	.word	0x0800dcdc
 8001ca8:	20000438 	.word	0x20000438
 8001cac:	200005ec 	.word	0x200005ec
 8001cb0:	2000047c 	.word	0x2000047c
 8001cb4:	20000588 	.word	0x20000588
 8001cb8:	20000670 	.word	0x20000670
 8001cbc:	200006ab 	.word	0x200006ab
 8001cc0:	20000008 	.word	0x20000008
			break;
 8001cc4:	bf00      	nop


	  }// timestamp_dis


	  if (HAL_GetTick() >= timestamp_one){
 8001cc6:	f002 fe17 	bl	80048f8 <HAL_GetTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	61fa      	str	r2, [r7, #28]
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <main+0x434>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001cdc:	4621      	mov	r1, r4
 8001cde:	4291      	cmp	r1, r2
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	eb71 0303 	sbcs.w	r3, r1, r3
 8001ce6:	d313      	bcc.n	8001d10 <main+0x2a4>
		  timestamp_one += 500;
 8001ce8:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <main+0x434>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001cf2:	6139      	str	r1, [r7, #16]
 8001cf4:	f143 0300 	adc.w	r3, r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <main+0x434>)
 8001cfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d00:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d04:	2120      	movs	r1, #32
 8001d06:	4867      	ldr	r0, [pc, #412]	; (8001ea4 <main+0x438>)
 8001d08:	f003 fce5 	bl	80056d6 <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001d0c:	f000 fd76 	bl	80027fc <GrandState_Verita>

		  } // timestamp_one


	  if(HAL_GetTick() >= timestamp_sensors + 250){
 8001d10:	f002 fdf2 	bl	80048f8 <HAL_GetTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2200      	movs	r2, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <main+0x43c>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f112 08fa 	adds.w	r8, r2, #250	; 0xfa
 8001d26:	f143 0900 	adc.w	r9, r3, #0
 8001d2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4543      	cmp	r3, r8
 8001d32:	4613      	mov	r3, r2
 8001d34:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d38:	f4ff af14 	bcc.w	8001b64 <main+0xf8>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001d3c:	f002 fddc 	bl	80048f8 <HAL_GetTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2200      	movs	r2, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <main+0x43c>)
 8001d4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d4e:	e9c3 1200 	strd	r1, r2, [r3]
		   *  - INA219#1 INA219#2
		   *  - MCP3208 CH[0..7]
		   *  - Client's MCU temp
		   * */

		  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
 8001d52:	2211      	movs	r2, #17
 8001d54:	21a0      	movs	r1, #160	; 0xa0
 8001d56:	4855      	ldr	r0, [pc, #340]	; (8001eac <main+0x440>)
 8001d58:	f7ff fc5a 	bl	8001610 <Tx_UART_Verita_Command>

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	4854      	ldr	r0, [pc, #336]	; (8001eb0 <main+0x444>)
 8001d60:	f7ff f9ce 	bl	8001100 <INA219Read_BusV>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a53      	ldr	r2, [pc, #332]	; (8001eb4 <main+0x448>)
 8001d68:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	4850      	ldr	r0, [pc, #320]	; (8001eb0 <main+0x444>)
 8001d6e:	f7ff f9ef 	bl	8001150 <INA219Read_Current>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4a4f      	ldr	r2, [pc, #316]	; (8001eb4 <main+0x448>)
 8001d78:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	484c      	ldr	r0, [pc, #304]	; (8001eb0 <main+0x444>)
 8001d7e:	f7ff fa47 	bl	8001210 <INA219Read_Power>
 8001d82:	eef0 7a40 	vmov.f32	s15, s0
 8001d86:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <main+0x448>)
 8001d88:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	4848      	ldr	r0, [pc, #288]	; (8001eb0 <main+0x444>)
 8001d90:	f7ff fa02 	bl	8001198 <INA219Read_ShuntV>
 8001d94:	eef0 7a40 	vmov.f32	s15, s0
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <main+0x448>)
 8001d9a:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001d9e:	2188      	movs	r1, #136	; 0x88
 8001da0:	4843      	ldr	r0, [pc, #268]	; (8001eb0 <main+0x444>)
 8001da2:	f7ff f9ad 	bl	8001100 <INA219Read_BusV>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a43      	ldr	r2, [pc, #268]	; (8001eb8 <main+0x44c>)
 8001daa:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001dac:	2188      	movs	r1, #136	; 0x88
 8001dae:	4840      	ldr	r0, [pc, #256]	; (8001eb0 <main+0x444>)
 8001db0:	f7ff f9ce 	bl	8001150 <INA219Read_Current>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <main+0x44c>)
 8001dba:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001dbc:	2188      	movs	r1, #136	; 0x88
 8001dbe:	483c      	ldr	r0, [pc, #240]	; (8001eb0 <main+0x444>)
 8001dc0:	f7ff fa26 	bl	8001210 <INA219Read_Power>
 8001dc4:	eef0 7a40 	vmov.f32	s15, s0
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <main+0x44c>)
 8001dca:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001dce:	2188      	movs	r1, #136	; 0x88
 8001dd0:	4837      	ldr	r0, [pc, #220]	; (8001eb0 <main+0x444>)
 8001dd2:	f7ff f9e1 	bl	8001198 <INA219Read_ShuntV>
 8001dd6:	eef0 7a40 	vmov.f32	s15, s0
 8001dda:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <main+0x44c>)
 8001ddc:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001de0:	2118      	movs	r1, #24
 8001de2:	4836      	ldr	r0, [pc, #216]	; (8001ebc <main+0x450>)
 8001de4:	f7ff fa5e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <main+0x454>)
 8001dec:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001dee:	2119      	movs	r1, #25
 8001df0:	4832      	ldr	r0, [pc, #200]	; (8001ebc <main+0x450>)
 8001df2:	f7ff fa57 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a31      	ldr	r2, [pc, #196]	; (8001ec0 <main+0x454>)
 8001dfa:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001dfc:	211a      	movs	r1, #26
 8001dfe:	482f      	ldr	r0, [pc, #188]	; (8001ebc <main+0x450>)
 8001e00:	f7ff fa50 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <main+0x454>)
 8001e08:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001e0a:	211b      	movs	r1, #27
 8001e0c:	482b      	ldr	r0, [pc, #172]	; (8001ebc <main+0x450>)
 8001e0e:	f7ff fa49 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <main+0x454>)
 8001e16:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001e18:	211c      	movs	r1, #28
 8001e1a:	4828      	ldr	r0, [pc, #160]	; (8001ebc <main+0x450>)
 8001e1c:	f7ff fa42 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <main+0x454>)
 8001e24:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001e26:	211d      	movs	r1, #29
 8001e28:	4824      	ldr	r0, [pc, #144]	; (8001ebc <main+0x450>)
 8001e2a:	f7ff fa3b 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <main+0x454>)
 8001e32:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001e34:	211e      	movs	r1, #30
 8001e36:	4821      	ldr	r0, [pc, #132]	; (8001ebc <main+0x450>)
 8001e38:	f7ff fa34 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <main+0x454>)
 8001e40:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001e42:	211f      	movs	r1, #31
 8001e44:	481d      	ldr	r0, [pc, #116]	; (8001ebc <main+0x450>)
 8001e46:	f7ff fa2d 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <main+0x454>)
 8001e4e:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i < 7;i++){
 8001e50:	2400      	movs	r4, #0
 8001e52:	e00e      	b.n	8001e72 <main+0x406>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <main+0x454>)
 8001e56:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fa58 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001e60:	eef0 7a40 	vmov.f32	s15, s0
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <main+0x454>)
 8001e66:	1d23      	adds	r3, r4, #4
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i < 7;i++){
 8001e70:	3401      	adds	r4, #1
 8001e72:	2c06      	cmp	r4, #6
 8001e74:	ddee      	ble.n	8001e54 <main+0x3e8>
		  }

		  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <main+0x458>)
 8001e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 f8d3 	bl	8003028 <ADCTVolta>
 8001e82:	eef0 7a40 	vmov.f32	s15, s0
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f001 f8fd 	bl	8003088 <TempEquat>
 8001e8e:	eef0 7a40 	vmov.f32	s15, s0
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <main+0x45c>)
 8001e94:	edc3 7a00 	vstr	s15, [r3]

		  //Protection_machine();
		  manual_relay();
 8001e98:	f000 fc20 	bl	80026dc <manual_relay>
	  Button_machine();
 8001e9c:	e662      	b.n	8001b64 <main+0xf8>
 8001e9e:	bf00      	nop
 8001ea0:	20000660 	.word	0x20000660
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	20000668 	.word	0x20000668
 8001eac:	2000047c 	.word	0x2000047c
 8001eb0:	200002b8 	.word	0x200002b8
 8001eb4:	200005fc 	.word	0x200005fc
 8001eb8:	20000614 	.word	0x20000614
 8001ebc:	2000030c 	.word	0x2000030c
 8001ec0:	2000062c 	.word	0x2000062c
 8001ec4:	20000588 	.word	0x20000588
 8001ec8:	200005f8 	.word	0x200005f8

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	; 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f008 ff92 	bl	800ae04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <SystemClock_Config+0xc8>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <SystemClock_Config+0xc8>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <SystemClock_Config+0xc8>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <SystemClock_Config+0xcc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <SystemClock_Config+0xcc>)
 8001f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <SystemClock_Config+0xcc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f30:	2310      	movs	r3, #16
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f34:	2302      	movs	r3, #2
 8001f36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f48:	2304      	movs	r3, #4
 8001f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	4618      	mov	r0, r3
 8001f52:	f006 f88d 	bl	8008070 <HAL_RCC_OscConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f5c:	f001 f984 	bl	8003268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f60:	230f      	movs	r3, #15
 8001f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f64:	2302      	movs	r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f006 faef 	bl	8008560 <HAL_RCC_ClockConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f88:	f001 f96e 	bl	8003268 <Error_Handler>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3750      	adds	r7, #80	; 0x50
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000

08001f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <MX_I2C1_Init+0x54>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_I2C1_Init+0x58>)
 8001faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	; (8001fec <MX_I2C1_Init+0x50>)
 8001fda:	f003 fbaf 	bl	800573c <HAL_I2C_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fe4:	f001 f940 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200002b8 	.word	0x200002b8
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	00061a80 	.word	0x00061a80

08001ff8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_SPI3_Init+0x64>)
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <MX_SPI3_Init+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_SPI3_Init+0x64>)
 8002004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002008:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_SPI3_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_SPI3_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_SPI3_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_SPI3_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_SPI3_Init+0x64>)
 8002024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002028:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_SPI3_Init+0x64>)
 800202c:	2220      	movs	r2, #32
 800202e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <MX_SPI3_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_SPI3_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <MX_SPI3_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_SPI3_Init+0x64>)
 8002044:	220a      	movs	r2, #10
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_SPI3_Init+0x64>)
 800204a:	f006 fca9 	bl	80089a0 <HAL_SPI_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002054:	f001 f908 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000030c 	.word	0x2000030c
 8002060:	40003c00 	.word	0x40003c00

08002064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f008 fec6 	bl	800ae04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002080:	4b20      	ldr	r3, [pc, #128]	; (8002104 <MX_TIM3_Init+0xa0>)
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <MX_TIM3_Init+0xa4>)
 8002084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <MX_TIM3_Init+0xa0>)
 8002088:	2201      	movs	r2, #1
 800208a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <MX_TIM3_Init+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <MX_TIM3_Init+0xa0>)
 8002094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002098:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_TIM3_Init+0xa0>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_TIM3_Init+0xa0>)
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020a6:	2303      	movs	r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020aa:	2302      	movs	r3, #2
 80020ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020b2:	2304      	movs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80020b6:	2308      	movs	r3, #8
 80020b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020be:	2301      	movs	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 80020c2:	2304      	movs	r3, #4
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80020c6:	2308      	movs	r3, #8
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <MX_TIM3_Init+0xa0>)
 80020d2:	f007 f83c 	bl	800914e <HAL_TIM_Encoder_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020dc:	f001 f8c4 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_TIM3_Init+0xa0>)
 80020ee:	f007 fb39 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020f8:	f001 f8b6 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3730      	adds	r7, #48	; 0x30
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000364 	.word	0x20000364
 8002108:	40000400 	.word	0x40000400

0800210c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_TIM10_Init+0x40>)
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <MX_TIM10_Init+0x44>)
 8002114:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <MX_TIM10_Init+0x40>)
 8002118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800211c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_TIM10_Init+0x40>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_TIM10_Init+0x40>)
 8002126:	f241 3287 	movw	r2, #4999	; 0x1387
 800212a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <MX_TIM10_Init+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_TIM10_Init+0x40>)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_TIM10_Init+0x40>)
 800213a:	f006 ff27 	bl	8008f8c <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002144:	f001 f890 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200003ac 	.word	0x200003ac
 8002150:	40014400 	.word	0x40014400

08002154 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <MX_USART1_UART_Init+0x54>)
 800215c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 8002160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002164:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 8002168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800216c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_USART1_UART_Init+0x50>)
 8002190:	f007 fb6a 	bl	8009868 <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800219a:	f001 f865 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003f4 	.word	0x200003f4
 80021a8:	40011000 	.word	0x40011000

080021ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART2_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f007 fb40 	bl	8009868 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f001 f83b 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000438 	.word	0x20000438
 80021fc:	40004400 	.word	0x40004400

08002200 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_USART6_UART_Init+0x50>)
 8002208:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART6_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART6_UART_Init+0x4c>)
 8002238:	f007 fb16 	bl	8009868 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002242:	f001 f811 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000047c 	.word	0x2000047c
 8002250:	40011400 	.word	0x40011400

08002254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_DMA_Init+0x3c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <MX_DMA_Init+0x3c>)
 8002264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_DMA_Init+0x3c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2039      	movs	r0, #57	; 0x39
 800227c:	f002 fc47 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002280:	2039      	movs	r0, #57	; 0x39
 8002282:	f002 fc60 	bl	8004b46 <HAL_NVIC_EnableIRQ>

}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b7b      	ldr	r3, [pc, #492]	; (800249c <MX_GPIO_Init+0x208>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a7a      	ldr	r2, [pc, #488]	; (800249c <MX_GPIO_Init+0x208>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b78      	ldr	r3, [pc, #480]	; (800249c <MX_GPIO_Init+0x208>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b74      	ldr	r3, [pc, #464]	; (800249c <MX_GPIO_Init+0x208>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <MX_GPIO_Init+0x208>)
 80022d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b71      	ldr	r3, [pc, #452]	; (800249c <MX_GPIO_Init+0x208>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <MX_GPIO_Init+0x208>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a6c      	ldr	r2, [pc, #432]	; (800249c <MX_GPIO_Init+0x208>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b6a      	ldr	r3, [pc, #424]	; (800249c <MX_GPIO_Init+0x208>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <MX_GPIO_Init+0x208>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a65      	ldr	r2, [pc, #404]	; (800249c <MX_GPIO_Init+0x208>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b63      	ldr	r3, [pc, #396]	; (800249c <MX_GPIO_Init+0x208>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <MX_GPIO_Init+0x208>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a5e      	ldr	r2, [pc, #376]	; (800249c <MX_GPIO_Init+0x208>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b5c      	ldr	r3, [pc, #368]	; (800249c <MX_GPIO_Init+0x208>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 8002336:	2200      	movs	r2, #0
 8002338:	f240 314b 	movw	r1, #843	; 0x34b
 800233c:	4858      	ldr	r0, [pc, #352]	; (80024a0 <MX_GPIO_Init+0x20c>)
 800233e:	f003 f9b1 	bl	80056a4 <HAL_GPIO_WritePin>
                          |RelayClient_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002348:	4856      	ldr	r0, [pc, #344]	; (80024a4 <MX_GPIO_Init+0x210>)
 800234a:	f003 f9ab 	bl	80056a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2101      	movs	r1, #1
 8002352:	4855      	ldr	r0, [pc, #340]	; (80024a8 <MX_GPIO_Init+0x214>)
 8002354:	f003 f9a6 	bl	80056a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	2104      	movs	r1, #4
 800235c:	4853      	ldr	r0, [pc, #332]	; (80024ac <MX_GPIO_Init+0x218>)
 800235e:	f003 f9a1 	bl	80056a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002368:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800236c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4849      	ldr	r0, [pc, #292]	; (80024a0 <MX_GPIO_Init+0x20c>)
 800237a:	f003 f80f 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin RelayClient_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|RelayClient_Pin
 800237e:	f240 3343 	movw	r3, #835	; 0x343
 8002382:	617b      	str	r3, [r7, #20]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4842      	ldr	r0, [pc, #264]	; (80024a0 <MX_GPIO_Init+0x20c>)
 8002398:	f003 f800 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 800239c:	2304      	movs	r3, #4
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	483c      	ldr	r0, [pc, #240]	; (80024a0 <MX_GPIO_Init+0x20c>)
 80023b0:	f002 fff4 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80023b4:	2308      	movs	r3, #8
 80023b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c0:	2302      	movs	r3, #2
 80023c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4835      	ldr	r0, [pc, #212]	; (80024a0 <MX_GPIO_Init+0x20c>)
 80023cc:	f002 ffe6 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 80023d0:	f44f 7398 	mov.w	r3, #304	; 0x130
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	482e      	ldr	r0, [pc, #184]	; (80024a4 <MX_GPIO_Init+0x210>)
 80023ea:	f002 ffd7 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 80023ee:	2301      	movs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023fa:	2301      	movs	r3, #1
 80023fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4828      	ldr	r0, [pc, #160]	; (80024a8 <MX_GPIO_Init+0x214>)
 8002406:	f002 ffc9 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 800240a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800240e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4822      	ldr	r0, [pc, #136]	; (80024a8 <MX_GPIO_Init+0x214>)
 8002420:	f002 ffbc 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002428:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800242c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242e:	2301      	movs	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	4819      	ldr	r0, [pc, #100]	; (80024a0 <MX_GPIO_Init+0x20c>)
 800243a:	f002 ffaf 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800243e:	2304      	movs	r3, #4
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	2301      	movs	r3, #1
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	4815      	ldr	r0, [pc, #84]	; (80024ac <MX_GPIO_Init+0x218>)
 8002456:	f002 ffa1 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 800245a:	2340      	movs	r3, #64	; 0x40
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002462:	2301      	movs	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	480e      	ldr	r0, [pc, #56]	; (80024a8 <MX_GPIO_Init+0x214>)
 800246e:	f002 ff95 	bl	800539c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2017      	movs	r0, #23
 8002478:	f002 fb49 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800247c:	2017      	movs	r0, #23
 800247e:	f002 fb62 	bl	8004b46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	2028      	movs	r0, #40	; 0x28
 8002488:	f002 fb41 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800248c:	2028      	movs	r0, #40	; 0x28
 800248e:	f002 fb5a 	bl	8004b46 <HAL_NVIC_EnableIRQ>

}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020800 	.word	0x40020800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	4603      	mov	r3, r0
 80024b8:	460a      	mov	r2, r1
 80024ba:	80fb      	strh	r3, [r7, #6]
 80024bc:	4613      	mov	r3, r2
 80024be:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <box_pointer+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <box_pointer+0x5c>)
 80024ca:	8818      	ldrh	r0, [r3, #0]
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <box_pointer+0x5c>)
 80024ce:	8859      	ldrh	r1, [r3, #2]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	230f      	movs	r3, #15
 80024d6:	220f      	movs	r2, #15
 80024d8:	f001 fbd1 	bl	8003c7e <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 80024dc:	88b9      	ldrh	r1, [r7, #4]
 80024de:	88f8      	ldrh	r0, [r7, #6]
 80024e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	230f      	movs	r3, #15
 80024e8:	220f      	movs	r2, #15
 80024ea:	f001 fbc8 	bl	8003c7e <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <box_pointer+0x5c>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <box_pointer+0x5c>)
 80024f6:	88bb      	ldrh	r3, [r7, #4]
 80024f8:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <box_pointer+0x58>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200006a4 	.word	0x200006a4
 800250c:	200006ac 	.word	0x200006ac

08002510 <simple_scr>:

void simple_scr(){
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <simple_scr+0xa8>)
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	461a      	mov	r2, r3
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <simple_scr+0xa8>)
 800251e:	789b      	ldrb	r3, [r3, #2]
 8002520:	4619      	mov	r1, r3
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <simple_scr+0xac>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	460b      	mov	r3, r1
 800252a:	4925      	ldr	r1, [pc, #148]	; (80025c0 <simple_scr+0xb0>)
 800252c:	4825      	ldr	r0, [pc, #148]	; (80025c4 <simple_scr+0xb4>)
 800252e:	f009 f8db 	bl	800b6e8 <siprintf>
	  ili9341_WriteString(210, 185, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <simple_scr+0xb8>)
 8002534:	2200      	movs	r2, #0
 8002536:	9202      	str	r2, [sp, #8]
 8002538:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800253c:	9201      	str	r2, [sp, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <simple_scr+0xb4>)
 8002546:	21b9      	movs	r1, #185	; 0xb9
 8002548:	20d2      	movs	r0, #210	; 0xd2
 800254a:	f001 fd1f 	bl	8003f8c <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], k_flag.cnt, k_flag.up); //flag_k_up
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <simple_scr+0xbc>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <simple_scr+0xc0>)
 8002556:	789b      	ldrb	r3, [r3, #2]
 8002558:	4619      	mov	r1, r3
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <simple_scr+0xc0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	460b      	mov	r3, r1
 8002562:	491c      	ldr	r1, [pc, #112]	; (80025d4 <simple_scr+0xc4>)
 8002564:	4817      	ldr	r0, [pc, #92]	; (80025c4 <simple_scr+0xb4>)
 8002566:	f009 f8bf 	bl	800b6e8 <siprintf>
	  ili9341_WriteString(210, 200, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <simple_scr+0xb8>)
 800256c:	2200      	movs	r2, #0
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002574:	9201      	str	r2, [sp, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <simple_scr+0xb4>)
 800257e:	21c8      	movs	r1, #200	; 0xc8
 8002580:	20d2      	movs	r0, #210	; 0xd2
 8002582:	f001 fd03 	bl	8003f8c <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is); //state_box_choice_is
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <simple_scr+0xc8>)
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <simple_scr+0xcc>)
 800258c:	789b      	ldrb	r3, [r3, #2]
 800258e:	4914      	ldr	r1, [pc, #80]	; (80025e0 <simple_scr+0xd0>)
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <simple_scr+0xb4>)
 8002592:	f009 f8a9 	bl	800b6e8 <siprintf>
	  ili9341_WriteString(240, 215, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <simple_scr+0xb8>)
 8002598:	2200      	movs	r2, #0
 800259a:	9202      	str	r2, [sp, #8]
 800259c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	9200      	str	r2, [sp, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <simple_scr+0xb4>)
 80025aa:	21d7      	movs	r1, #215	; 0xd7
 80025ac:	20f0      	movs	r0, #240	; 0xf0
 80025ae:	f001 fced 	bl	8003f8c <ili9341_WriteString>

}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000068c 	.word	0x2000068c
 80025bc:	20000690 	.word	0x20000690
 80025c0:	0800dd18 	.word	0x0800dd18
 80025c4:	20000520 	.word	0x20000520
 80025c8:	2000008c 	.word	0x2000008c
 80025cc:	20000694 	.word	0x20000694
 80025d0:	20000698 	.word	0x20000698
 80025d4:	0800dd28 	.word	0x0800dd28
 80025d8:	40000400 	.word	0x40000400
 80025dc:	200006a8 	.word	0x200006a8
 80025e0:	0800dd38 	.word	0x0800dd38

080025e4 <Button_machine>:
		 }
	}
}


void Button_machine(){
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <Button_machine+0x88>)
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b1f      	ldr	r3, [pc, #124]	; (800266c <Button_machine+0x88>)
 80025ee:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <Button_machine+0x8c>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	0b1b      	lsrs	r3, r3, #12
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <Button_machine+0x88>)
 8002604:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <Button_machine+0x88>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <Button_machine+0x5a>
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <Button_machine+0x88>)
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d113      	bne.n	800263e <Button_machine+0x5a>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <Button_machine+0x88>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <Button_machine+0x90>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	4413      	add	r3, r2
 8002622:	b29a      	uxth	r2, r3
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <Button_machine+0x90>)
 8002626:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <Button_machine+0x88>)
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <Button_machine+0x88>)
 800262e:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <Button_machine+0x88>)
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <Button_machine+0x88>)
 8002636:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try
			flag_manual_relay = 1;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <Button_machine+0x94>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
//		}

//		knob_rotter();

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <Button_machine+0x98>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d905      	bls.n	8002652 <Button_machine+0x6e>
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <Button_machine+0x98>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800264e:	4293      	cmp	r3, r2
 8002650:	d907      	bls.n	8002662 <Button_machine+0x7e>
			TIM3->CNT = 0x8000; // back to center
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <Button_machine+0x9c>)
 8002654:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <Button_machine+0x98>)
 800265c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002660:	801a      	strh	r2, [r3, #0]
		}


}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	2000068c 	.word	0x2000068c
 8002670:	40020400 	.word	0x40020400
 8002674:	20000690 	.word	0x20000690
 8002678:	2000067c 	.word	0x2000067c
 800267c:	20000694 	.word	0x20000694
 8002680:	40000400 	.word	0x40000400

08002684 <knob_rotter>:

void knob_rotter(){
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <knob_rotter+0x4c>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <knob_rotter+0x50>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d908      	bls.n	80026a8 <knob_rotter+0x24>
		//flag_k_up = 1;
		k_flag.up = 1;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <knob_rotter+0x54>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <knob_rotter+0x4c>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <knob_rotter+0x50>)
 80026a4:	801a      	strh	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;

	}
	else{}

}
 80026a6:	e00e      	b.n	80026c6 <knob_rotter+0x42>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <knob_rotter+0x4c>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <knob_rotter+0x50>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d207      	bcs.n	80026c6 <knob_rotter+0x42>
		k_flag.dn = 1;
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <knob_rotter+0x54>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <knob_rotter+0x4c>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <knob_rotter+0x50>)
 80026c4:	801a      	strh	r2, [r3, #0]
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40000400 	.word	0x40000400
 80026d4:	20000694 	.word	0x20000694
 80026d8:	20000698 	.word	0x20000698

080026dc <manual_relay>:
		}
	}else{gScr.counter_overcurrent = 0;}

}

void manual_relay(){
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <manual_relay+0x28>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <manual_relay+0x24>

		if(GrandState == monitor){
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <manual_relay+0x2c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b06      	cmp	r3, #6
 80026ee:	d104      	bne.n	80026fa <manual_relay+0x1e>
			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 80026f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <manual_relay+0x30>)
 80026f6:	f002 ffee 	bl	80056d6 <HAL_GPIO_TogglePin>
		}
		flag_manual_relay = 0;
 80026fa:	4b02      	ldr	r3, [pc, #8]	; (8002704 <manual_relay+0x28>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
	}
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000067c 	.word	0x2000067c
 8002708:	20000006 	.word	0x20000006
 800270c:	40020800 	.word	0x40020800

08002710 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8002710:	b598      	push	{r3, r4, r7, lr}
 8002712:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <buzzer_scream_cnt+0xdc>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d039      	beq.n	8002790 <buzzer_scream_cnt+0x80>
 800271c:	2b02      	cmp	r3, #2
 800271e:	d01d      	beq.n	800275c <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002728:	4832      	ldr	r0, [pc, #200]	; (80027f4 <buzzer_scream_cnt+0xe4>)
 800272a:	f006 fc7f 	bl	800902c <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 800272e:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002730:	885b      	ldrh	r3, [r3, #2]
 8002732:	461c      	mov	r4, r3
 8002734:	f002 f8e0 	bl	80048f8 <HAL_GetTick>
 8002738:	4603      	mov	r3, r0
 800273a:	4423      	add	r3, r4
 800273c:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 800273e:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <buzzer_scream_cnt+0xdc>)
 8002742:	2202      	movs	r2, #2
 8002744:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002750:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002752:	e048      	b.n	80027e6 <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002754:	4827      	ldr	r0, [pc, #156]	; (80027f4 <buzzer_scream_cnt+0xe4>)
 8002756:	f006 fccb 	bl	80090f0 <HAL_TIM_Base_Stop_IT>
			break;
 800275a:	e044      	b.n	80027e6 <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002762:	4825      	ldr	r0, [pc, #148]	; (80027f8 <buzzer_scream_cnt+0xe8>)
 8002764:	f002 ff9e 	bl	80056a4 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002768:	f002 f8c6 	bl	80048f8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d334      	bcc.n	80027e0 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002778:	889b      	ldrh	r3, [r3, #4]
 800277a:	461c      	mov	r4, r3
 800277c:	f002 f8bc 	bl	80048f8 <HAL_GetTick>
 8002780:	4603      	mov	r3, r0
 8002782:	4423      	add	r3, r4
 8002784:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 8002786:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <buzzer_scream_cnt+0xdc>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800278e:	e027      	b.n	80027e0 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002796:	4818      	ldr	r0, [pc, #96]	; (80027f8 <buzzer_scream_cnt+0xe8>)
 8002798:	f002 ff84 	bl	80056a4 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 800279c:	f002 f8ac 	bl	80048f8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d31c      	bcc.n	80027e4 <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d012      	beq.n	80027d8 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 80027b4:	885b      	ldrh	r3, [r3, #2]
 80027b6:	461c      	mov	r4, r3
 80027b8:	f002 f89e 	bl	80048f8 <HAL_GetTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	4423      	add	r3, r4
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 80027c2:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <buzzer_scream_cnt+0xe0>)
 80027ce:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <buzzer_scream_cnt+0xdc>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 80027d6:	e005      	b.n	80027e4 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <buzzer_scream_cnt+0xdc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			break;
 80027de:	e001      	b.n	80027e4 <buzzer_scream_cnt+0xd4>
			break;
 80027e0:	bf00      	nop
 80027e2:	e000      	b.n	80027e6 <buzzer_scream_cnt+0xd6>
			break;
 80027e4:	bf00      	nop
		}

}
 80027e6:	bf00      	nop
 80027e8:	bd98      	pop	{r3, r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200006b0 	.word	0x200006b0
 80027f0:	20000680 	.word	0x20000680
 80027f4:	200003ac 	.word	0x200003ac
 80027f8:	40020800 	.word	0x40020800

080027fc <GrandState_Verita>:


void GrandState_Verita(){
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b085      	sub	sp, #20
 8002800:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002802:	4bb1      	ldr	r3, [pc, #708]	; (8002ac8 <GrandState_Verita+0x2cc>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b08      	cmp	r3, #8
 8002808:	f200 80a1 	bhi.w	800294e <GrandState_Verita+0x152>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <GrandState_Verita+0x18>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	080029a1 	.word	0x080029a1
 8002818:	08002839 	.word	0x08002839
 800281c:	0800294f 	.word	0x0800294f
 8002820:	080029c3 	.word	0x080029c3
 8002824:	08002a1b 	.word	0x08002a1b
 8002828:	08002b1d 	.word	0x08002b1d
 800282c:	08002d13 	.word	0x08002d13
 8002830:	08002f9f 	.word	0x08002f9f
 8002834:	08002fc9 	.word	0x08002fc9

	case pre_lobby:

		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002838:	4ba4      	ldr	r3, [pc, #656]	; (8002acc <GrandState_Verita+0x2d0>)
 800283a:	2201      	movs	r2, #1
 800283c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	23f0      	movs	r3, #240	; 0xf0
 8002844:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002848:	2100      	movs	r1, #0
 800284a:	2000      	movs	r0, #0
 800284c:	f001 fa17 	bl	8003c7e <ili9341_FillRect>

		ili9341_FillRect(0, 0, 320, 32, cl_GRAY);
 8002850:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2320      	movs	r3, #32
 8002858:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800285c:	2100      	movs	r1, #0
 800285e:	2000      	movs	r0, #0
 8002860:	f001 fa0d 	bl	8003c7e <ili9341_FillRect>

		ili9341_FillRect(305, 0, 15, 240, cl_ORANGE);
 8002864:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	23f0      	movs	r3, #240	; 0xf0
 800286c:	220f      	movs	r2, #15
 800286e:	2100      	movs	r1, #0
 8002870:	f240 1031 	movw	r0, #305	; 0x131
 8002874:	f001 fa03 	bl	8003c7e <ili9341_FillRect>

		sprintf(TextDispBuffer,"Nucleo-F411RE Tester");
 8002878:	4995      	ldr	r1, [pc, #596]	; (8002ad0 <GrandState_Verita+0x2d4>)
 800287a:	4896      	ldr	r0, [pc, #600]	; (8002ad4 <GrandState_Verita+0x2d8>)
 800287c:	f008 ff34 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(10, 10, TextDispBuffer, Font20, cl_BLACK);
 8002880:	4b95      	ldr	r3, [pc, #596]	; (8002ad8 <GrandState_Verita+0x2dc>)
 8002882:	2200      	movs	r2, #0
 8002884:	9201      	str	r2, [sp, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	9200      	str	r2, [sp, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a91      	ldr	r2, [pc, #580]	; (8002ad4 <GrandState_Verita+0x2d8>)
 800288e:	210a      	movs	r1, #10
 8002890:	200a      	movs	r0, #10
 8002892:	f001 fbc8 	bl	8004026 <ili9341_WriteStringNoBG>
		ili9341_DrawHLine(cl_ORANGE, 0, 33, 320);
 8002896:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800289a:	2221      	movs	r2, #33	; 0x21
 800289c:	2100      	movs	r1, #0
 800289e:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
 80028a2:	f001 f995 	bl	8003bd0 <ili9341_DrawHLine>

		sprintf(TextDispBuffer,"Full-Script");
 80028a6:	498d      	ldr	r1, [pc, #564]	; (8002adc <GrandState_Verita+0x2e0>)
 80028a8:	488a      	ldr	r0, [pc, #552]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80028aa:	f008 ff1d 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 80028ae:	4b8c      	ldr	r3, [pc, #560]	; (8002ae0 <GrandState_Verita+0x2e4>)
 80028b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80028b4:	9201      	str	r2, [sp, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	9200      	str	r2, [sp, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a85      	ldr	r2, [pc, #532]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80028be:	213c      	movs	r1, #60	; 0x3c
 80028c0:	2032      	movs	r0, #50	; 0x32
 80028c2:	f001 fbb0 	bl	8004026 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR_Monitor");
 80028c6:	4987      	ldr	r1, [pc, #540]	; (8002ae4 <GrandState_Verita+0x2e8>)
 80028c8:	4882      	ldr	r0, [pc, #520]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80028ca:	f008 ff0d 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(50, 90, TextDispBuffer, Font16, cl_CYAN);
 80028ce:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <GrandState_Verita+0x2e4>)
 80028d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80028d4:	9201      	str	r2, [sp, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	9200      	str	r2, [sp, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a7d      	ldr	r2, [pc, #500]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80028de:	215a      	movs	r1, #90	; 0x5a
 80028e0:	2032      	movs	r0, #50	; 0x32
 80028e2:	f001 fba0 	bl	8004026 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Hardware-mode");
 80028e6:	4980      	ldr	r1, [pc, #512]	; (8002ae8 <GrandState_Verita+0x2ec>)
 80028e8:	487a      	ldr	r0, [pc, #488]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80028ea:	f008 fefd 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(50, 120, TextDispBuffer, Font16, cl_CYAN);
 80028ee:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <GrandState_Verita+0x2e4>)
 80028f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80028f4:	9201      	str	r2, [sp, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	9200      	str	r2, [sp, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80028fe:	2178      	movs	r1, #120	; 0x78
 8002900:	2032      	movs	r0, #50	; 0x32
 8002902:	f001 fb90 	bl	8004026 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware-mode");
 8002906:	4979      	ldr	r1, [pc, #484]	; (8002aec <GrandState_Verita+0x2f0>)
 8002908:	4872      	ldr	r0, [pc, #456]	; (8002ad4 <GrandState_Verita+0x2d8>)
 800290a:	f008 feed 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(50, 150, TextDispBuffer, Font16, cl_CYAN);
 800290e:	4b74      	ldr	r3, [pc, #464]	; (8002ae0 <GrandState_Verita+0x2e4>)
 8002910:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002914:	9201      	str	r2, [sp, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6d      	ldr	r2, [pc, #436]	; (8002ad4 <GrandState_Verita+0x2d8>)
 800291e:	2196      	movs	r1, #150	; 0x96
 8002920:	2032      	movs	r0, #50	; 0x32
 8002922:	f001 fb80 	bl	8004026 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"About Verita");
 8002926:	4972      	ldr	r1, [pc, #456]	; (8002af0 <GrandState_Verita+0x2f4>)
 8002928:	486a      	ldr	r0, [pc, #424]	; (8002ad4 <GrandState_Verita+0x2d8>)
 800292a:	f008 fedd 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(50, 180, TextDispBuffer, Font16, cl_CYAN);
 800292e:	4b6c      	ldr	r3, [pc, #432]	; (8002ae0 <GrandState_Verita+0x2e4>)
 8002930:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002934:	9201      	str	r2, [sp, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	9200      	str	r2, [sp, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <GrandState_Verita+0x2d8>)
 800293e:	21b4      	movs	r1, #180	; 0xb4
 8002940:	2032      	movs	r0, #50	; 0x32
 8002942:	f001 fb70 	bl	8004026 <ili9341_WriteStringNoBG>

		GrandState = lobby;
 8002946:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <GrandState_Verita+0x2cc>)
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
		break; // pre-lobby
 800294c:	e345      	b.n	8002fda <GrandState_Verita+0x7de>

	default:
	case lobby:
		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <GrandState_Verita+0x2d0>)
 8002950:	2201      	movs	r2, #1
 8002952:	705a      	strb	r2, [r3, #1]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is);
 8002954:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <GrandState_Verita+0x2f8>)
 8002956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002958:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <GrandState_Verita+0x2d0>)
 800295a:	789b      	ldrb	r3, [r3, #2]
 800295c:	4966      	ldr	r1, [pc, #408]	; (8002af8 <GrandState_Verita+0x2fc>)
 800295e:	485d      	ldr	r0, [pc, #372]	; (8002ad4 <GrandState_Verita+0x2d8>)
 8002960:	f008 fec2 	bl	800b6e8 <siprintf>
		ili9341_WriteString(200, 220, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002964:	4b65      	ldr	r3, [pc, #404]	; (8002afc <GrandState_Verita+0x300>)
 8002966:	2200      	movs	r2, #0
 8002968:	9202      	str	r2, [sp, #8]
 800296a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296e:	9201      	str	r2, [sp, #4]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	9200      	str	r2, [sp, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <GrandState_Verita+0x2d8>)
 8002978:	21dc      	movs	r1, #220	; 0xdc
 800297a:	20c8      	movs	r0, #200	; 0xc8
 800297c:	f001 fb06 	bl	8003f8c <ili9341_WriteString>
		//simple_scr();
		if(k_flag.cnt){
 8002980:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <GrandState_Verita+0x304>)
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8323 	beq.w	8002fd0 <GrandState_Verita+0x7d4>

			if (stboxp.ch_is == 2){GrandState = pre_monitor;}
 800298a:	4b50      	ldr	r3, [pc, #320]	; (8002acc <GrandState_Verita+0x2d0>)
 800298c:	789b      	ldrb	r3, [r3, #2]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d102      	bne.n	8002998 <GrandState_Verita+0x19c>
 8002992:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <GrandState_Verita+0x2cc>)
 8002994:	2205      	movs	r2, #5
 8002996:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <GrandState_Verita+0x304>)
 800299a:	2200      	movs	r2, #0
 800299c:	709a      	strb	r2, [r3, #2]
		}

		break; // lobby
 800299e:	e317      	b.n	8002fd0 <GrandState_Verita+0x7d4>

	case init:
		stboxp.choice_set = bpoxy_def;
 80029a0:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <GrandState_Verita+0x2d0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	705a      	strb	r2, [r3, #1]
//		}
//		//// last round: send only left bit (less 255)
//		HAL_Delay(2);
//		BL_UART_WriteMem_d(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);

		BL_UART_Start(&huart1);
 80029a6:	4857      	ldr	r0, [pc, #348]	; (8002b04 <GrandState_Verita+0x308>)
 80029a8:	f7fe fe6e 	bl	8001688 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 80029ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029b0:	4854      	ldr	r0, [pc, #336]	; (8002b04 <GrandState_Verita+0x308>)
 80029b2:	f7fe ffe3 	bl	800197c <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 80029b6:	f7fe fe97 	bl	80016e8 <BL_UART_Finish>

		GrandState = lobby;
 80029ba:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <GrandState_Verita+0x2cc>)
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
		break;
 80029c0:	e30b      	b.n	8002fda <GrandState_Verita+0x7de>

	case pre_bootloader:
		stboxp.choice_set = bpoxy_def;
 80029c2:	4b42      	ldr	r3, [pc, #264]	; (8002acc <GrandState_Verita+0x2d0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	23f0      	movs	r3, #240	; 0xf0
 80029ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029d2:	2100      	movs	r1, #0
 80029d4:	2000      	movs	r0, #0
 80029d6:	f001 f952 	bl	8003c7e <ili9341_FillRect>
		ili9341_FillRect(0, 0, 10, 10, cl_PURPLE);
 80029da:	f647 030f 	movw	r3, #30735	; 0x780f
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	230a      	movs	r3, #10
 80029e2:	220a      	movs	r2, #10
 80029e4:	2100      	movs	r1, #0
 80029e6:	2000      	movs	r0, #0
 80029e8:	f001 f949 	bl	8003c7e <ili9341_FillRect>

		sprintf(TextDispBuffer,"Boot...");
 80029ec:	4946      	ldr	r1, [pc, #280]	; (8002b08 <GrandState_Verita+0x30c>)
 80029ee:	4839      	ldr	r0, [pc, #228]	; (8002ad4 <GrandState_Verita+0x2d8>)
 80029f0:	f008 fe7a 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(60, 120, TextDispBuffer, Font24, cl_WHITE);
 80029f4:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <GrandState_Verita+0x310>)
 80029f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fa:	9201      	str	r2, [sp, #4]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	9200      	str	r2, [sp, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a34      	ldr	r2, [pc, #208]	; (8002ad4 <GrandState_Verita+0x2d8>)
 8002a04:	2178      	movs	r1, #120	; 0x78
 8002a06:	203c      	movs	r0, #60	; 0x3c
 8002a08:	f001 fb0d 	bl	8004026 <ili9341_WriteStringNoBG>

		k_flag.cnt = 0;
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	; (8002b00 <GrandState_Verita+0x304>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	709a      	strb	r2, [r3, #2]
		GrandState = s_bootloader;
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <GrandState_Verita+0x2cc>)
 8002a14:	2204      	movs	r2, #4
 8002a16:	701a      	strb	r2, [r3, #0]
		break;
 8002a18:	e2df      	b.n	8002fda <GrandState_Verita+0x7de>

	case s_bootloader:
		stboxp.choice_set = bpoxy_def;
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <GrandState_Verita+0x2d0>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	705a      	strb	r2, [r3, #1]

		//// enable UART, disable after endboot, prevent misunderstanding when GPIO test
		gpio_BL_UART_activate();
 8002a20:	f000 fb6c 	bl	80030fc <gpio_BL_UART_activate>

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <GrandState_Verita+0x314>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <GrandState_Verita+0x314>)
 8002a30:	8812      	ldrh	r2, [r2, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	b292      	uxth	r2, r2
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2201      	movne	r2, #1
 8002a3c:	2200      	moveq	r2, #0
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	4413      	add	r3, r2
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <GrandState_Verita+0x318>)
 8002a46:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8002a48:	482e      	ldr	r0, [pc, #184]	; (8002b04 <GrandState_Verita+0x308>)
 8002a4a:	f7fe fe1d 	bl	8001688 <BL_UART_Start>

		//// Flash Memory Erase ============,
		//// Erase1_Mass_CMD makes bootloader not response to ALL write CMD / dont know why
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank1_CMD);
 8002a4e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002a52:	482c      	ldr	r0, [pc, #176]	; (8002b04 <GrandState_Verita+0x308>)
 8002a54:	f7fe ff92 	bl	800197c <BL_UART_ExtendEraseMem_SP>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank2_CMD);
 8002a58:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8002a5c:	4829      	ldr	r0, [pc, #164]	; (8002b04 <GrandState_Verita+0x308>)
 8002a5e:	f7fe ff8d 	bl	800197c <BL_UART_ExtendEraseMem_SP>

		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002a62:	2400      	movs	r4, #0
 8002a64:	e00b      	b.n	8002a7e <GrandState_Verita+0x282>
			BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8002a66:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	0223      	lsls	r3, r4, #8
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <GrandState_Verita+0x31c>)
 8002a72:	4413      	add	r3, r2
 8002a74:	22ff      	movs	r2, #255	; 0xff
 8002a76:	4823      	ldr	r0, [pc, #140]	; (8002b04 <GrandState_Verita+0x308>)
 8002a78:	f7fe fe54 	bl	8001724 <BL_UART_WriteMem>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8002a7c:	3401      	adds	r4, #1
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <GrandState_Verita+0x318>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	429c      	cmp	r4, r3
 8002a86:	dbee      	blt.n	8002a66 <GrandState_Verita+0x26a>
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <GrandState_Verita+0x318>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8002a90:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	4618      	mov	r0, r3
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <GrandState_Verita+0x314>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <GrandState_Verita+0x318>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	491c      	ldr	r1, [pc, #112]	; (8002b18 <GrandState_Verita+0x31c>)
 8002aa8:	440b      	add	r3, r1
 8002aaa:	4601      	mov	r1, r0
 8002aac:	4815      	ldr	r0, [pc, #84]	; (8002b04 <GrandState_Verita+0x308>)
 8002aae:	f7fe fe39 	bl	8001724 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8002ab2:	f7fe fe19 	bl	80016e8 <BL_UART_Finish>

		//// disable UART, disable after endboot, prevent misunderstanding when GPIO test
		gpio_BL_UART_Deactivate();
 8002ab6:	f000 fb4d 	bl	8003154 <gpio_BL_UART_Deactivate>

		k_flag.cnt = 0;//// prevent over state jump
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <GrandState_Verita+0x304>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	709a      	strb	r2, [r3, #2]
		GrandState = lobby;
 8002ac0:	4b01      	ldr	r3, [pc, #4]	; (8002ac8 <GrandState_Verita+0x2cc>)
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	701a      	strb	r2, [r3, #0]

		break;
 8002ac6:	e288      	b.n	8002fda <GrandState_Verita+0x7de>
 8002ac8:	20000006 	.word	0x20000006
 8002acc:	200006a8 	.word	0x200006a8
 8002ad0:	0800dd40 	.word	0x0800dd40
 8002ad4:	20000520 	.word	0x20000520
 8002ad8:	2000009c 	.word	0x2000009c
 8002adc:	0800dd58 	.word	0x0800dd58
 8002ae0:	20000094 	.word	0x20000094
 8002ae4:	0800dd64 	.word	0x0800dd64
 8002ae8:	0800dd70 	.word	0x0800dd70
 8002aec:	0800dd80 	.word	0x0800dd80
 8002af0:	0800dd90 	.word	0x0800dd90
 8002af4:	40000400 	.word	0x40000400
 8002af8:	0800dd38 	.word	0x0800dd38
 8002afc:	2000008c 	.word	0x2000008c
 8002b00:	20000698 	.word	0x20000698
 8002b04:	200003f4 	.word	0x200003f4
 8002b08:	0800dda0 	.word	0x0800dda0
 8002b0c:	200000a4 	.word	0x200000a4
 8002b10:	20000004 	.word	0x20000004
 8002b14:	20000584 	.word	0x20000584
 8002b18:	0800de80 	.word	0x0800de80

	case pre_monitor:
		stboxp.choice_set = bpoxy_def;
 8002b1c:	4ba1      	ldr	r3, [pc, #644]	; (8002da4 <GrandState_Verita+0x5a8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002b22:	2300      	movs	r3, #0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	23d2      	movs	r3, #210	; 0xd2
 8002b28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b2c:	211e      	movs	r1, #30
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f001 f8a5 	bl	8003c7e <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_BLUE);
 8002b34:	231f      	movs	r3, #31
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	231e      	movs	r3, #30
 8002b3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2000      	movs	r0, #0
 8002b42:	f001 f89c 	bl	8003c7e <ili9341_FillRect>

		sprintf(TextDispBuffer,"PWR_Monitor");
 8002b46:	4998      	ldr	r1, [pc, #608]	; (8002da8 <GrandState_Verita+0x5ac>)
 8002b48:	4898      	ldr	r0, [pc, #608]	; (8002dac <GrandState_Verita+0x5b0>)
 8002b4a:	f008 fdcd 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8002b4e:	4b98      	ldr	r3, [pc, #608]	; (8002db0 <GrandState_Verita+0x5b4>)
 8002b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b54:	9201      	str	r2, [sp, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	9200      	str	r2, [sp, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a93      	ldr	r2, [pc, #588]	; (8002dac <GrandState_Verita+0x5b0>)
 8002b5e:	2105      	movs	r1, #5
 8002b60:	203c      	movs	r0, #60	; 0x3c
 8002b62:	f001 fa60 	bl	8004026 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 8002b66:	4993      	ldr	r1, [pc, #588]	; (8002db4 <GrandState_Verita+0x5b8>)
 8002b68:	4890      	ldr	r0, [pc, #576]	; (8002dac <GrandState_Verita+0x5b0>)
 8002b6a:	f008 fdbd 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(60, 220, TextDispBuffer, Font16, cl_WHITE);
 8002b6e:	4b92      	ldr	r3, [pc, #584]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a8b      	ldr	r2, [pc, #556]	; (8002dac <GrandState_Verita+0x5b0>)
 8002b7e:	21dc      	movs	r1, #220	; 0xdc
 8002b80:	203c      	movs	r0, #60	; 0x3c
 8002b82:	f001 fa50 	bl	8004026 <ili9341_WriteStringNoBG>

		//sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
		//ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);

		sprintf(TextDispBuffer,"5Vin:");
 8002b86:	498d      	ldr	r1, [pc, #564]	; (8002dbc <GrandState_Verita+0x5c0>)
 8002b88:	4888      	ldr	r0, [pc, #544]	; (8002dac <GrandState_Verita+0x5b0>)
 8002b8a:	f008 fdad 	bl	800b6e8 <siprintf>
		ili9341_WriteString(15, 50, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002b8e:	4b8a      	ldr	r3, [pc, #552]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	9202      	str	r2, [sp, #8]
 8002b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b98:	9201      	str	r2, [sp, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a82      	ldr	r2, [pc, #520]	; (8002dac <GrandState_Verita+0x5b0>)
 8002ba2:	2132      	movs	r1, #50	; 0x32
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	f001 f9f1 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"3V3:");
 8002baa:	4985      	ldr	r1, [pc, #532]	; (8002dc0 <GrandState_Verita+0x5c4>)
 8002bac:	487f      	ldr	r0, [pc, #508]	; (8002dac <GrandState_Verita+0x5b0>)
 8002bae:	f008 fd9b 	bl	800b6e8 <siprintf>
		ili9341_WriteString(15, 75, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002bb2:	4b81      	ldr	r3, [pc, #516]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	9202      	str	r2, [sp, #8]
 8002bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bbc:	9201      	str	r2, [sp, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	9200      	str	r2, [sp, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a79      	ldr	r2, [pc, #484]	; (8002dac <GrandState_Verita+0x5b0>)
 8002bc6:	214b      	movs	r1, #75	; 0x4b
 8002bc8:	200f      	movs	r0, #15
 8002bca:	f001 f9df 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"I MCU:");
 8002bce:	497d      	ldr	r1, [pc, #500]	; (8002dc4 <GrandState_Verita+0x5c8>)
 8002bd0:	4876      	ldr	r0, [pc, #472]	; (8002dac <GrandState_Verita+0x5b0>)
 8002bd2:	f008 fd89 	bl	800b6e8 <siprintf>
		ili9341_WriteString(15, 100, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002bd6:	4b78      	ldr	r3, [pc, #480]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	9202      	str	r2, [sp, #8]
 8002bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be0:	9201      	str	r2, [sp, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a70      	ldr	r2, [pc, #448]	; (8002dac <GrandState_Verita+0x5b0>)
 8002bea:	2164      	movs	r1, #100	; 0x64
 8002bec:	200f      	movs	r0, #15
 8002bee:	f001 f9cd 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"I Brd:");
 8002bf2:	4975      	ldr	r1, [pc, #468]	; (8002dc8 <GrandState_Verita+0x5cc>)
 8002bf4:	486d      	ldr	r0, [pc, #436]	; (8002dac <GrandState_Verita+0x5b0>)
 8002bf6:	f008 fd77 	bl	800b6e8 <siprintf>
		ili9341_WriteString(15, 125, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002bfa:	4b6f      	ldr	r3, [pc, #444]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	9202      	str	r2, [sp, #8]
 8002c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c04:	9201      	str	r2, [sp, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	9200      	str	r2, [sp, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a67      	ldr	r2, [pc, #412]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c0e:	217d      	movs	r1, #125	; 0x7d
 8002c10:	200f      	movs	r0, #15
 8002c12:	f001 f9bb 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"PWR");
 8002c16:	496d      	ldr	r1, [pc, #436]	; (8002dcc <GrandState_Verita+0x5d0>)
 8002c18:	4864      	ldr	r0, [pc, #400]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c1a:	f008 fd65 	bl	800b6e8 <siprintf>
		ili9341_WriteString(15, 150, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002c1e:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	9202      	str	r2, [sp, #8]
 8002c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	9200      	str	r2, [sp, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5e      	ldr	r2, [pc, #376]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c32:	2196      	movs	r1, #150	; 0x96
 8002c34:	200f      	movs	r0, #15
 8002c36:	f001 f9a9 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"MCU");
 8002c3a:	4965      	ldr	r1, [pc, #404]	; (8002dd0 <GrandState_Verita+0x5d4>)
 8002c3c:	485b      	ldr	r0, [pc, #364]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c3e:	f008 fd53 	bl	800b6e8 <siprintf>
		ili9341_WriteString(70, 150, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	9202      	str	r2, [sp, #8]
 8002c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c4c:	9201      	str	r2, [sp, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	9200      	str	r2, [sp, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a55      	ldr	r2, [pc, #340]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c56:	2196      	movs	r1, #150	; 0x96
 8002c58:	2046      	movs	r0, #70	; 0x46
 8002c5a:	f001 f997 	bl	8003f8c <ili9341_WriteString>
		sprintf(TextDispBuffer,"Brd");
 8002c5e:	495d      	ldr	r1, [pc, #372]	; (8002dd4 <GrandState_Verita+0x5d8>)
 8002c60:	4852      	ldr	r0, [pc, #328]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c62:	f008 fd41 	bl	800b6e8 <siprintf>
		ili9341_WriteString(70, 170, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	9202      	str	r2, [sp, #8]
 8002c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c70:	9201      	str	r2, [sp, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c7a:	21aa      	movs	r1, #170	; 0xaa
 8002c7c:	2046      	movs	r0, #70	; 0x46
 8002c7e:	f001 f985 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"MCP3208");
 8002c82:	4955      	ldr	r1, [pc, #340]	; (8002dd8 <GrandState_Verita+0x5dc>)
 8002c84:	4849      	ldr	r0, [pc, #292]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c86:	f008 fd2f 	bl	800b6e8 <siprintf>
		ili9341_WriteString(220, 40, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	9202      	str	r2, [sp, #8]
 8002c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c94:	9201      	str	r2, [sp, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	9200      	str	r2, [sp, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a43      	ldr	r2, [pc, #268]	; (8002dac <GrandState_Verita+0x5b0>)
 8002c9e:	2128      	movs	r1, #40	; 0x28
 8002ca0:	20dc      	movs	r0, #220	; 0xdc
 8002ca2:	f001 f973 	bl	8003f8c <ili9341_WriteString>

		for(register int t = 0; t < 7; t++){
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	e018      	b.n	8002cdc <GrandState_Verita+0x4e0>
			sprintf(TextDispBuffer,"CH%d",t);
 8002caa:	4622      	mov	r2, r4
 8002cac:	494b      	ldr	r1, [pc, #300]	; (8002ddc <GrandState_Verita+0x5e0>)
 8002cae:	483f      	ldr	r0, [pc, #252]	; (8002dac <GrandState_Verita+0x5b0>)
 8002cb0:	f008 fd1a 	bl	800b6e8 <siprintf>
			ili9341_WriteStringNoBG(220, 65 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 8002cb4:	b2a3      	uxth	r3, r4
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	0052      	lsls	r2, r2, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3341      	adds	r3, #65	; 0x41
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <GrandState_Verita+0x5e4>)
 8002cc6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002cca:	9201      	str	r2, [sp, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a36      	ldr	r2, [pc, #216]	; (8002dac <GrandState_Verita+0x5b0>)
 8002cd4:	20dc      	movs	r0, #220	; 0xdc
 8002cd6:	f001 f9a6 	bl	8004026 <ili9341_WriteStringNoBG>
		for(register int t = 0; t < 7; t++){
 8002cda:	3401      	adds	r4, #1
 8002cdc:	2c06      	cmp	r4, #6
 8002cde:	dde4      	ble.n	8002caa <GrandState_Verita+0x4ae>
		}

		sprintf(TextDispBuffer,"MCU_Cl_Temp:");
 8002ce0:	4940      	ldr	r1, [pc, #256]	; (8002de4 <GrandState_Verita+0x5e8>)
 8002ce2:	4832      	ldr	r0, [pc, #200]	; (8002dac <GrandState_Verita+0x5b0>)
 8002ce4:	f008 fd00 	bl	800b6e8 <siprintf>
		ili9341_WriteString(20, 190, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <GrandState_Verita+0x5e4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf2:	9201      	str	r2, [sp, #4]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	9200      	str	r2, [sp, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <GrandState_Verita+0x5b0>)
 8002cfc:	21be      	movs	r1, #190	; 0xbe
 8002cfe:	2014      	movs	r0, #20
 8002d00:	f001 f944 	bl	8003f8c <ili9341_WriteString>

		k_flag.cnt = 0; //// prevent over state jump
 8002d04:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <GrandState_Verita+0x5ec>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	709a      	strb	r2, [r3, #2]
		GrandState = monitor;
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <GrandState_Verita+0x5f0>)
 8002d0c:	2206      	movs	r2, #6
 8002d0e:	701a      	strb	r2, [r3, #0]
		break;
 8002d10:	e163      	b.n	8002fda <GrandState_Verita+0x7de>


	case monitor:
		stboxp.choice_set = bpoxy_def;
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <GrandState_Verita+0x5a8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	705a      	strb	r2, [r3, #1]
		simple_scr();
 8002d18:	f7ff fbfa 	bl	8002510 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 8002d1c:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <GrandState_Verita+0x5f4>)
 8002d1e:	8a1b      	ldrh	r3, [r3, #16]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4934      	ldr	r1, [pc, #208]	; (8002df4 <GrandState_Verita+0x5f8>)
 8002d24:	4821      	ldr	r0, [pc, #132]	; (8002dac <GrandState_Verita+0x5b0>)
 8002d26:	f008 fcdf 	bl	800b6e8 <siprintf>
		if(inata.Bus_V < 2000){
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <GrandState_Verita+0x5f4>)
 8002d2c:	8a1b      	ldrh	r3, [r3, #16]
 8002d2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d32:	d20e      	bcs.n	8002d52 <GrandState_Verita+0x556>
			ili9341_WriteString(100, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	9202      	str	r2, [sp, #8]
 8002d3a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d3e:	9201      	str	r2, [sp, #4]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	9200      	str	r2, [sp, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a19      	ldr	r2, [pc, #100]	; (8002dac <GrandState_Verita+0x5b0>)
 8002d48:	2132      	movs	r1, #50	; 0x32
 8002d4a:	2064      	movs	r0, #100	; 0x64
 8002d4c:	f001 f91e 	bl	8003f8c <ili9341_WriteString>
 8002d50:	e00d      	b.n	8002d6e <GrandState_Verita+0x572>
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	9202      	str	r2, [sp, #8]
 8002d58:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d5c:	9201      	str	r2, [sp, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <GrandState_Verita+0x5b0>)
 8002d66:	2132      	movs	r1, #50	; 0x32
 8002d68:	2064      	movs	r0, #100	; 0x64
 8002d6a:	f001 f90f 	bl	8003f8c <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <GrandState_Verita+0x5fc>)
 8002d70:	8a1b      	ldrh	r3, [r3, #16]
 8002d72:	461a      	mov	r2, r3
 8002d74:	491f      	ldr	r1, [pc, #124]	; (8002df4 <GrandState_Verita+0x5f8>)
 8002d76:	480d      	ldr	r0, [pc, #52]	; (8002dac <GrandState_Verita+0x5b0>)
 8002d78:	f008 fcb6 	bl	800b6e8 <siprintf>
				if(inatb.Bus_V < 2000){
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <GrandState_Verita+0x5fc>)
 8002d7e:	8a1b      	ldrh	r3, [r3, #16]
 8002d80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d84:	d23a      	bcs.n	8002dfc <GrandState_Verita+0x600>
					ili9341_WriteString(100, 70, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <GrandState_Verita+0x5bc>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	9202      	str	r2, [sp, #8]
 8002d8c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d90:	9201      	str	r2, [sp, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	9200      	str	r2, [sp, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <GrandState_Verita+0x5b0>)
 8002d9a:	2146      	movs	r1, #70	; 0x46
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	f001 f8f5 	bl	8003f8c <ili9341_WriteString>
 8002da2:	e039      	b.n	8002e18 <GrandState_Verita+0x61c>
 8002da4:	200006a8 	.word	0x200006a8
 8002da8:	0800dd64 	.word	0x0800dd64
 8002dac:	20000520 	.word	0x20000520
 8002db0:	2000009c 	.word	0x2000009c
 8002db4:	0800dda8 	.word	0x0800dda8
 8002db8:	20000094 	.word	0x20000094
 8002dbc:	0800ddb0 	.word	0x0800ddb0
 8002dc0:	0800ddb8 	.word	0x0800ddb8
 8002dc4:	0800ddc0 	.word	0x0800ddc0
 8002dc8:	0800ddc8 	.word	0x0800ddc8
 8002dcc:	0800ddd0 	.word	0x0800ddd0
 8002dd0:	0800ddd4 	.word	0x0800ddd4
 8002dd4:	0800ddd8 	.word	0x0800ddd8
 8002dd8:	0800dddc 	.word	0x0800dddc
 8002ddc:	0800dde4 	.word	0x0800dde4
 8002de0:	2000008c 	.word	0x2000008c
 8002de4:	0800ddec 	.word	0x0800ddec
 8002de8:	20000698 	.word	0x20000698
 8002dec:	20000006 	.word	0x20000006
 8002df0:	200005fc 	.word	0x200005fc
 8002df4:	0800ddfc 	.word	0x0800ddfc
 8002df8:	20000614 	.word	0x20000614
				}else{
					ili9341_WriteString(100, 70, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8002dfc:	4b79      	ldr	r3, [pc, #484]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	9202      	str	r2, [sp, #8]
 8002e02:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e06:	9201      	str	r2, [sp, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a76      	ldr	r2, [pc, #472]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e10:	2146      	movs	r1, #70	; 0x46
 8002e12:	2064      	movs	r0, #100	; 0x64
 8002e14:	f001 f8ba 	bl	8003f8c <ili9341_WriteString>
				}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8002e18:	4b74      	ldr	r3, [pc, #464]	; (8002fec <GrandState_Verita+0x7f0>)
 8002e1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4973      	ldr	r1, [pc, #460]	; (8002ff0 <GrandState_Verita+0x7f4>)
 8002e22:	4871      	ldr	r0, [pc, #452]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e24:	f008 fc60 	bl	800b6e8 <siprintf>
		ili9341_WriteString(100, 90, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002e28:	4b6e      	ldr	r3, [pc, #440]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	9202      	str	r2, [sp, #8]
 8002e2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	9200      	str	r2, [sp, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6b      	ldr	r2, [pc, #428]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e3c:	215a      	movs	r1, #90	; 0x5a
 8002e3e:	2064      	movs	r0, #100	; 0x64
 8002e40:	f001 f8a4 	bl	8003f8c <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <GrandState_Verita+0x7f8>)
 8002e46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4968      	ldr	r1, [pc, #416]	; (8002ff0 <GrandState_Verita+0x7f4>)
 8002e4e:	4866      	ldr	r0, [pc, #408]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e50:	f008 fc4a 	bl	800b6e8 <siprintf>
		ili9341_WriteString(100, 110, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002e54:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	9202      	str	r2, [sp, #8]
 8002e5a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e5e:	9201      	str	r2, [sp, #4]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	9200      	str	r2, [sp, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a60      	ldr	r2, [pc, #384]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e68:	216e      	movs	r1, #110	; 0x6e
 8002e6a:	2064      	movs	r0, #100	; 0x64
 8002e6c:	f001 f88e 	bl	8003f8c <ili9341_WriteString>

		sprintf(TextDispBuffer,"%.2f", inata.POWER);
 8002e70:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <GrandState_Verita+0x7f0>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb6f 	bl	8000558 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	495e      	ldr	r1, [pc, #376]	; (8002ff8 <GrandState_Verita+0x7fc>)
 8002e80:	4859      	ldr	r0, [pc, #356]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e82:	f008 fc31 	bl	800b6e8 <siprintf>
		ili9341_WriteString(100, 130, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8002e86:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	9202      	str	r2, [sp, #8]
 8002e8c:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002e90:	9201      	str	r2, [sp, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a53      	ldr	r2, [pc, #332]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002e9a:	2182      	movs	r1, #130	; 0x82
 8002e9c:	2064      	movs	r0, #100	; 0x64
 8002e9e:	f001 f875 	bl	8003f8c <ili9341_WriteString>
		sprintf(TextDispBuffer,"%.2f", inatb.POWER);
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <GrandState_Verita+0x7f8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb56 	bl	8000558 <__aeabi_f2d>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4951      	ldr	r1, [pc, #324]	; (8002ff8 <GrandState_Verita+0x7fc>)
 8002eb2:	484d      	ldr	r0, [pc, #308]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002eb4:	f008 fc18 	bl	800b6e8 <siprintf>
		ili9341_WriteString(100, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8002eb8:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	9202      	str	r2, [sp, #8]
 8002ebe:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	9200      	str	r2, [sp, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a47      	ldr	r2, [pc, #284]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002ecc:	2196      	movs	r1, #150	; 0x96
 8002ece:	2064      	movs	r0, #100	; 0x64
 8002ed0:	f001 f85c 	bl	8003f8c <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		ili9341_FillRect(250, 65, 30, 84, cl_BLACK);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2354      	movs	r3, #84	; 0x54
 8002eda:	221e      	movs	r2, #30
 8002edc:	2141      	movs	r1, #65	; 0x41
 8002ede:	20fa      	movs	r0, #250	; 0xfa
 8002ee0:	f000 fecd 	bl	8003c7e <ili9341_FillRect>
		for(register int t = 0; t < 7; t++){
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	e01b      	b.n	8002f20 <GrandState_Verita+0x724>
			sprintf(TextDispBuffer,"%d",mcp_read.raw[t]);
 8002ee8:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <GrandState_Verita+0x800>)
 8002eea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4943      	ldr	r1, [pc, #268]	; (8003000 <GrandState_Verita+0x804>)
 8002ef2:	483d      	ldr	r0, [pc, #244]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002ef4:	f008 fbf8 	bl	800b6e8 <siprintf>
		ili9341_WriteStringNoBG(250, 65 + (12*t), TextDispBuffer, Font12, cl_WHITE);
 8002ef8:	b2a3      	uxth	r3, r4
 8002efa:	461a      	mov	r2, r3
 8002efc:	0052      	lsls	r2, r2, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3341      	adds	r3, #65	; 0x41
 8002f06:	b299      	uxth	r1, r3
 8002f08:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <GrandState_Verita+0x808>)
 8002f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0e:	9201      	str	r2, [sp, #4]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002f18:	20fa      	movs	r0, #250	; 0xfa
 8002f1a:	f001 f884 	bl	8004026 <ili9341_WriteStringNoBG>
		for(register int t = 0; t < 7; t++){
 8002f1e:	3401      	adds	r4, #1
 8002f20:	2c06      	cmp	r4, #6
 8002f22:	dde1      	ble.n	8002ee8 <GrandState_Verita+0x6ec>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.2f", client_temp_mcuCC);
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <GrandState_Verita+0x80c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fb15 	bl	8000558 <__aeabi_f2d>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4936      	ldr	r1, [pc, #216]	; (800300c <GrandState_Verita+0x810>)
 8002f34:	482c      	ldr	r0, [pc, #176]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002f36:	f008 fbd7 	bl	800b6e8 <siprintf>
			if(client_temp_mcuCC < 65){
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <GrandState_Verita+0x80c>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003010 <GrandState_Verita+0x814>
 8002f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d50e      	bpl.n	8002f6c <GrandState_Verita+0x770>
				ili9341_WriteString(100, 180, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	9202      	str	r2, [sp, #8]
 8002f54:	f24c 6218 	movw	r2, #50712	; 0xc618
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002f62:	21b4      	movs	r1, #180	; 0xb4
 8002f64:	2064      	movs	r0, #100	; 0x64
 8002f66:	f001 f811 	bl	8003f8c <ili9341_WriteString>
 8002f6a:	e00d      	b.n	8002f88 <GrandState_Verita+0x78c>
			}else{
				ili9341_WriteString(100, 180, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <GrandState_Verita+0x7e8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	9202      	str	r2, [sp, #8]
 8002f72:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f76:	9201      	str	r2, [sp, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <GrandState_Verita+0x7ec>)
 8002f80:	21b4      	movs	r1, #180	; 0xb4
 8002f82:	2064      	movs	r0, #100	; 0x64
 8002f84:	f001 f802 	bl	8003f8c <ili9341_WriteString>
			}


		if(k_flag.cnt){ //// Back to lobby
 8002f88:	4b22      	ldr	r3, [pc, #136]	; (8003014 <GrandState_Verita+0x818>)
 8002f8a:	789b      	ldrb	r3, [r3, #2]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d021      	beq.n	8002fd4 <GrandState_Verita+0x7d8>
			GrandState = pre_lobby;
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <GrandState_Verita+0x81c>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <GrandState_Verita+0x818>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	709a      	strb	r2, [r3, #2]
			}
		break; // monitor
 8002f9c:	e01a      	b.n	8002fd4 <GrandState_Verita+0x7d8>

	case pre_gpio_chk:
		stboxp.choice_set = bpoxy_def;
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	; (800301c <GrandState_Verita+0x820>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	705a      	strb	r2, [r3, #1]

		//// Send CMD to client to run GPIO testscript
		Tx_UART_Verita_Command(&huart6, VRC_Flag_1, VRF_GPIO_Runalltest);
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	21a2      	movs	r1, #162	; 0xa2
 8002fa8:	481d      	ldr	r0, [pc, #116]	; (8003020 <GrandState_Verita+0x824>)
 8002faa:	f7fe fb31 	bl	8001610 <Tx_UART_Verita_Command>
		//// Set UI

		//// checkif GPIO test is finished ?
		if(VRB_CL.Mark.Flag_next){
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <GrandState_Verita+0x828>)
 8002fb0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00f      	beq.n	8002fd8 <GrandState_Verita+0x7dc>
			GrandState = gpio_chk;
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <GrandState_Verita+0x81c>)
 8002fba:	2208      	movs	r2, #8
 8002fbc:	701a      	strb	r2, [r3, #0]
			VRB_CL.Mark.Flag_next = 0;
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <GrandState_Verita+0x828>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		}
		break; //// pre_gpio_chk
 8002fc6:	e007      	b.n	8002fd8 <GrandState_Verita+0x7dc>

	case gpio_chk:
		stboxp.choice_set = bpoxy_def;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <GrandState_Verita+0x820>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	705a      	strb	r2, [r3, #1]


		break; //gpio_chk
 8002fce:	e004      	b.n	8002fda <GrandState_Verita+0x7de>
		break; // lobby
 8002fd0:	bf00      	nop
 8002fd2:	e002      	b.n	8002fda <GrandState_Verita+0x7de>
		break; // monitor
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <GrandState_Verita+0x7de>
		break; //// pre_gpio_chk
 8002fd8:	bf00      	nop
	}
}
 8002fda:	bf00      	nop
 8002fdc:	3704      	adds	r7, #4
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000094 	.word	0x20000094
 8002fe8:	20000520 	.word	0x20000520
 8002fec:	200005fc 	.word	0x200005fc
 8002ff0:	0800ddfc 	.word	0x0800ddfc
 8002ff4:	20000614 	.word	0x20000614
 8002ff8:	0800de00 	.word	0x0800de00
 8002ffc:	2000062c 	.word	0x2000062c
 8003000:	0800de08 	.word	0x0800de08
 8003004:	2000008c 	.word	0x2000008c
 8003008:	200005f8 	.word	0x200005f8
 800300c:	0800de0c 	.word	0x0800de0c
 8003010:	42820000 	.word	0x42820000
 8003014:	20000698 	.word	0x20000698
 8003018:	20000006 	.word	0x20000006
 800301c:	200006a8 	.word	0x200006a8
 8003020:	2000047c 	.word	0x2000047c
 8003024:	20000588 	.word	0x20000588

08003028 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa7d 	bl	8000534 <__aeabi_i2d>
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <ADCTVolta+0x58>)
 8003040:	f7fd fc0c 	bl	800085c <__aeabi_ddiv>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	a30a      	add	r3, pc, #40	; (adr r3, 8003078 <ADCTVolta+0x50>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd fad9 	bl	8000608 <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fdcb 	bl	8000bf8 <__aeabi_d2f>
 8003062:	4603      	mov	r3, r0
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eeb0 0a67 	vmov.f32	s0, s15
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	f3af 8000 	nop.w
 8003078:	66666666 	.word	0x66666666
 800307c:	400a6666 	.word	0x400a6666
 8003080:	40b00000 	.word	0x40b00000
 8003084:	00000000 	.word	0x00000000

08003088 <TempEquat>:
float TempEquat(float Vs){
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fa60 	bl	8000558 <__aeabi_f2d>
 8003098:	a314      	add	r3, pc, #80	; (adr r3, 80030ec <TempEquat+0x64>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd f8fb 	bl	8000298 <__aeabi_dsub>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	a312      	add	r3, pc, #72	; (adr r3, 80030f4 <TempEquat+0x6c>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fbd4 	bl	800085c <__aeabi_ddiv>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <TempEquat+0x60>)
 80030c2:	f7fd f8eb 	bl	800029c <__adddf3>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7fd fd93 	bl	8000bf8 <__aeabi_d2f>
 80030d2:	4603      	mov	r3, r0
 80030d4:	ee07 3a90 	vmov	s15, r3
}
 80030d8:	eeb0 0a67 	vmov.f32	s0, s15
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	f3af 8000 	nop.w
 80030e8:	40390000 	.word	0x40390000
 80030ec:	851eb852 	.word	0x851eb852
 80030f0:	3fe851eb 	.word	0x3fe851eb
 80030f4:	47ae147b 	.word	0x47ae147b
 80030f8:	3f647ae1 	.word	0x3f647ae1

080030fc <gpio_BL_UART_activate>:

void gpio_BL_UART_activate(){
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	 * PA9 PA10 is block 1, 2 in AFR[1]
	 * AF7(USART1) = 0x07 | AF0(System) = 0x0
	 *
	 * RM0383 P150 Fig 17 AFR Mux & P164 GPIOx_AFR register map
	 * */
	  UA_BL_Break = GPIOA->AFR[1];
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <gpio_BL_UART_activate+0x50>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <gpio_BL_UART_activate+0x54>)
 8003106:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (1 * 4U));
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <gpio_BL_UART_activate+0x54>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <gpio_BL_UART_activate+0x54>)
 8003112:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (2 * 4U));
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <gpio_BL_UART_activate+0x54>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800311c:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <gpio_BL_UART_activate+0x54>)
 800311e:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x7 << (1 * 4U));
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <gpio_BL_UART_activate+0x54>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003128:	4a09      	ldr	r2, [pc, #36]	; (8003150 <gpio_BL_UART_activate+0x54>)
 800312a:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x7 << (2 * 4U));
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <gpio_BL_UART_activate+0x54>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <gpio_BL_UART_activate+0x54>)
 8003136:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[1] = UA_BL_Break;
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <gpio_BL_UART_activate+0x50>)
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <gpio_BL_UART_activate+0x54>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40020000 	.word	0x40020000
 8003150:	200006a0 	.word	0x200006a0

08003154 <gpio_BL_UART_Deactivate>:

void gpio_BL_UART_Deactivate(){
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
	/* Change AFRH (AFR[1]) for PA9 PA10 from Init UART to default GPIO, prevent UART High distrub the client
	 * PA9 PA10 is block 1, 2 in AFR[1]
	 * AF7(USART1) = 0x07 | AF0(System) = 0x0
	 * */
	  UA_BL_Break = GPIOA->AFR[1];
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <gpio_BL_UART_Deactivate+0x48>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	4a10      	ldr	r2, [pc, #64]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 800315e:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (1 * 4U));
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 800316a:	6013      	str	r3, [r2, #0]
	  UA_BL_Break &= ~( 0b1111 << (2 * 4U));
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 8003176:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x0 << (1 * 4U));
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 800317e:	6013      	str	r3, [r2, #0]
	  UA_BL_Break |= ( 0x0 << (2 * 4U));
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 8003186:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[1] = UA_BL_Break;
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <gpio_BL_UART_Deactivate+0x48>)
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <gpio_BL_UART_Deactivate+0x4c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40020000 	.word	0x40020000
 80031a0:	200006a0 	.word	0x200006a0

080031a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d116      	bne.n	80031e4 <HAL_GPIO_EXTI_Callback+0x40>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_GPIO_EXTI_Callback+0x5c>)
 80031b8:	2208      	movs	r2, #8
 80031ba:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 80031bc:	f7ff faa8 	bl	8002710 <buzzer_scream_cnt>
		//// bootloader test
		GrandState = s_bootloader;
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_GPIO_EXTI_Callback+0x60>)
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);
 80031c6:	2211      	movs	r2, #17
 80031c8:	21a0      	movs	r1, #160	; 0xa0
 80031ca:	480f      	ldr	r0, [pc, #60]	; (8003208 <HAL_GPIO_EXTI_Callback+0x64>)
 80031cc:	f7fe fa20 	bl	8001610 <Tx_UART_Verita_Command>
		Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);
 80031d0:	2212      	movs	r2, #18
 80031d2:	21a0      	movs	r1, #160	; 0xa0
 80031d4:	480c      	ldr	r0, [pc, #48]	; (8003208 <HAL_GPIO_EXTI_Callback+0x64>)
 80031d6:	f7fe fa1b 	bl	8001610 <Tx_UART_Verita_Command>
		Tx_UART_Verita_Command(&huart6, VRC_Flag_1, 0x02);
 80031da:	2202      	movs	r2, #2
 80031dc:	21a2      	movs	r1, #162	; 0xa2
 80031de:	480a      	ldr	r0, [pc, #40]	; (8003208 <HAL_GPIO_EXTI_Callback+0x64>)
 80031e0:	f7fe fa16 	bl	8001610 <Tx_UART_Verita_Command>

		}

	if(GPIO_Pin == GPIO_PIN_7){
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d105      	bne.n	80031f6 <HAL_GPIO_EXTI_Callback+0x52>
		k_flag.cnt++;
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_GPIO_EXTI_Callback+0x68>)
 80031ec:	789b      	ldrb	r3, [r3, #2]
 80031ee:	3301      	adds	r3, #1
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_GPIO_EXTI_Callback+0x68>)
 80031f4:	709a      	strb	r2, [r3, #2]
	}
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000680 	.word	0x20000680
 8003204:	20000006 	.word	0x20000006
 8003208:	2000047c 	.word	0x2000047c
 800320c:	20000698 	.word	0x20000698

08003210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PeriodElapsedCallback+0x24>
		_millis++;
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	4a06      	ldr	r2, [pc, #24]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003228:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzr.priod_up = 250;
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800322c:	22fa      	movs	r2, #250	; 0xfa
 800322e:	805a      	strh	r2, [r3, #2]
		buzzer_scream_cnt();
 8003230:	f7ff fa6e 	bl	8002710 <buzzer_scream_cnt>
	}
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200003ac 	.word	0x200003ac
 8003240:	20000678 	.word	0x20000678
 8003244:	20000680 	.word	0x20000680

08003248 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VRB_CL); //// try using only 1 slot 9 Buffer
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_UART_RxCpltCallback+0x18>)
 8003252:	4804      	ldr	r0, [pc, #16]	; (8003264 <HAL_UART_RxCpltCallback+0x1c>)
 8003254:	f7fe f87c 	bl	8001350 <Rx_Verita_engine_callBak>
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000588 	.word	0x20000588
 8003264:	200005ec 	.word	0x200005ec

08003268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800326c:	b672      	cpsid	i
}
 800326e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003270:	e7fe      	b.n	8003270 <Error_Handler+0x8>
	...

08003274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_MspInit+0x4c>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_MspInit+0x4c>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_MspInit+0x4c>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_MspInit+0x4c>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_MspInit+0x4c>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_MspInit+0x4c>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032b2:	2007      	movs	r0, #7
 80032b4:	f001 fc20 	bl	8004af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <HAL_I2C_MspInit+0xa4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d13c      	bne.n	8003360 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_I2C_MspInit+0xa8>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a1f      	ldr	r2, [pc, #124]	; (800336c <HAL_I2C_MspInit+0xa8>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_I2C_MspInit+0xa8>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003308:	2312      	movs	r3, #18
 800330a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003314:	2304      	movs	r3, #4
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4619      	mov	r1, r3
 800331e:	4814      	ldr	r0, [pc, #80]	; (8003370 <HAL_I2C_MspInit+0xac>)
 8003320:	f002 f83c 	bl	800539c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_I2C_MspInit+0xa8>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_I2C_MspInit+0xa8>)
 800332e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003332:	6413      	str	r3, [r2, #64]	; 0x40
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_I2C_MspInit+0xa8>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	201f      	movs	r0, #31
 8003346:	f001 fbe2 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800334a:	201f      	movs	r0, #31
 800334c:	f001 fbfb 	bl	8004b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003350:	2200      	movs	r2, #0
 8003352:	2100      	movs	r1, #0
 8003354:	2020      	movs	r0, #32
 8003356:	f001 fbda 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800335a:	2020      	movs	r0, #32
 800335c:	f001 fbf3 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003360:	bf00      	nop
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40005400 	.word	0x40005400
 800336c:	40023800 	.word	0x40023800
 8003370:	40020400 	.word	0x40020400

08003374 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_SPI_MspInit+0x84>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d12c      	bne.n	80033f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_SPI_MspInit+0x88>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a17      	ldr	r2, [pc, #92]	; (80033fc <HAL_SPI_MspInit+0x88>)
 80033a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_SPI_MspInit+0x88>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_SPI_MspInit+0x88>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_SPI_MspInit+0x88>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_SPI_MspInit+0x88>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80033ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033e0:	2306      	movs	r3, #6
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <HAL_SPI_MspInit+0x8c>)
 80033ec:	f001 ffd6 	bl	800539c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40003c00 	.word	0x40003c00
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020800 	.word	0x40020800

08003404 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_TIM_Encoder_MspInit+0x84>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12b      	bne.n	800347e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_TIM_Encoder_MspInit+0x88>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_TIM_Encoder_MspInit+0x88>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_TIM_Encoder_MspInit+0x88>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_TIM_Encoder_MspInit+0x88>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_TIM_Encoder_MspInit+0x88>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_TIM_Encoder_MspInit+0x88>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800345e:	23c0      	movs	r3, #192	; 0xc0
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800346e:	2302      	movs	r3, #2
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	4805      	ldr	r0, [pc, #20]	; (8003490 <HAL_TIM_Encoder_MspInit+0x8c>)
 800347a:	f001 ff8f 	bl	800539c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800347e:	bf00      	nop
 8003480:	3728      	adds	r7, #40	; 0x28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40000400 	.word	0x40000400
 800348c:	40023800 	.word	0x40023800
 8003490:	40020000 	.word	0x40020000

08003494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <HAL_TIM_Base_MspInit+0x48>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d115      	bne.n	80034d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_TIM_Base_MspInit+0x4c>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <HAL_TIM_Base_MspInit+0x4c>)
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	6453      	str	r3, [r2, #68]	; 0x44
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_TIM_Base_MspInit+0x4c>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	2019      	movs	r0, #25
 80034c8:	f001 fb21 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034cc:	2019      	movs	r0, #25
 80034ce:	f001 fb3a 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6b      	ldr	r2, [pc, #428]	; (80036b0 <HAL_UART_MspInit+0x1cc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d135      	bne.n	8003572 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	4a69      	ldr	r2, [pc, #420]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003510:	f043 0310 	orr.w	r3, r3, #16
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a62      	ldr	r2, [pc, #392]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800353e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003550:	2307      	movs	r3, #7
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003558:	4619      	mov	r1, r3
 800355a:	4857      	ldr	r0, [pc, #348]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800355c:	f001 ff1e 	bl	800539c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	2100      	movs	r1, #0
 8003564:	2025      	movs	r0, #37	; 0x25
 8003566:	f001 fad2 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800356a:	2025      	movs	r0, #37	; 0x25
 800356c:	f001 faeb 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003570:	e09a      	b.n	80036a8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a51      	ldr	r2, [pc, #324]	; (80036bc <HAL_UART_MspInit+0x1d8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d12c      	bne.n	80035d6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4a4b      	ldr	r2, [pc, #300]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358a:	6413      	str	r3, [r2, #64]	; 0x40
 800358c:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6313      	str	r3, [r2, #48]	; 0x30
 80035a8:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035b4:	230c      	movs	r3, #12
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c0:	2303      	movs	r3, #3
 80035c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035c4:	2307      	movs	r3, #7
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035cc:	4619      	mov	r1, r3
 80035ce:	483a      	ldr	r0, [pc, #232]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 80035d0:	f001 fee4 	bl	800539c <HAL_GPIO_Init>
}
 80035d4:	e068      	b.n	80036a8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART6)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a39      	ldr	r2, [pc, #228]	; (80036c0 <HAL_UART_MspInit+0x1dc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d163      	bne.n	80036a8 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 80035ea:	f043 0320 	orr.w	r3, r3, #32
 80035ee:	6453      	str	r3, [r2, #68]	; 0x44
 80035f0:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 80035f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6313      	str	r3, [r2, #48]	; 0x30
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003618:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800362a:	2308      	movs	r3, #8
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003632:	4619      	mov	r1, r3
 8003634:	4820      	ldr	r0, [pc, #128]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003636:	f001 feb1 	bl	800539c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 800363c:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <HAL_UART_MspInit+0x1e4>)
 800363e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003642:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003646:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 800366a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003672:	2200      	movs	r2, #0
 8003674:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800367c:	4811      	ldr	r0, [pc, #68]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 800367e:	f001 fa7d 	bl	8004b7c <HAL_DMA_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003688:	f7ff fdee 	bl	8003268 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
 8003692:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <HAL_UART_MspInit+0x1e0>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	2047      	movs	r0, #71	; 0x47
 800369e:	f001 fa36 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80036a2:	2047      	movs	r0, #71	; 0x47
 80036a4:	f001 fa4f 	bl	8004b46 <HAL_NVIC_EnableIRQ>
}
 80036a8:	bf00      	nop
 80036aa:	3738      	adds	r7, #56	; 0x38
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40011000 	.word	0x40011000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40004400 	.word	0x40004400
 80036c0:	40011400 	.word	0x40011400
 80036c4:	200004c0 	.word	0x200004c0
 80036c8:	40026428 	.word	0x40026428

080036cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <NMI_Handler+0x4>

080036d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d6:	e7fe      	b.n	80036d6 <HardFault_Handler+0x4>

080036d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036dc:	e7fe      	b.n	80036dc <MemManage_Handler+0x4>

080036de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <BusFault_Handler+0x4>

080036e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <UsageFault_Handler+0x4>

080036ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003718:	f001 f8da 	bl	80048d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003724:	2080      	movs	r0, #128	; 0x80
 8003726:	f001 fff1 	bl	800570c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003736:	f005 fe3e 	bl	80093b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200003ac 	.word	0x200003ac

08003744 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <I2C1_EV_IRQHandler+0x10>)
 800374a:	f002 fc5b 	bl	8006004 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200002b8 	.word	0x200002b8

08003758 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <I2C1_ER_IRQHandler+0x10>)
 800375e:	f002 fdc2 	bl	80062e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200002b8 	.word	0x200002b8

0800376c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <USART1_IRQHandler+0x10>)
 8003772:	f006 fa2b 	bl	8009bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200003f4 	.word	0x200003f4

08003780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003788:	f001 ffc0 	bl	800570c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800378c:	bf00      	nop
 800378e:	bd80      	pop	{r7, pc}

08003790 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <DMA2_Stream1_IRQHandler+0x10>)
 8003796:	f001 fb89 	bl	8004eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200004c0 	.word	0x200004c0

080037a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <USART6_IRQHandler+0x10>)
 80037aa:	f006 fa0f 	bl	8009bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000047c 	.word	0x2000047c

080037b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
	return 1;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_kill>:

int _kill(int pid, int sig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037d2:	f007 faed 	bl	800adb0 <__errno>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2216      	movs	r2, #22
 80037da:	601a      	str	r2, [r3, #0]
	return -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_exit>:

void _exit (int status)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ffe7 	bl	80037c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037fa:	e7fe      	b.n	80037fa <_exit+0x12>

080037fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e00a      	b.n	8003824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800380e:	f3af 8000 	nop.w
 8003812:	4601      	mov	r1, r0
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	60ba      	str	r2, [r7, #8]
 800381a:	b2ca      	uxtb	r2, r1
 800381c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3301      	adds	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	dbf0      	blt.n	800380e <_read+0x12>
	}

return len;
 800382c:	687b      	ldr	r3, [r7, #4]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e009      	b.n	800385c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	60ba      	str	r2, [r7, #8]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3301      	adds	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	dbf1      	blt.n	8003848 <_write+0x12>
	}
	return len;
 8003864:	687b      	ldr	r3, [r7, #4]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <_close>:

int _close(int file)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
	return -1;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003896:	605a      	str	r2, [r3, #4]
	return 0;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <_isatty>:

int _isatty(int file)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
	return 1;
 80038ae:	2301      	movs	r3, #1
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	return 0;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <_sbrk+0x5c>)
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <_sbrk+0x60>)
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <_sbrk+0x64>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <_sbrk+0x64>)
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <_sbrk+0x68>)
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <_sbrk+0x64>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	429a      	cmp	r2, r3
 8003906:	d207      	bcs.n	8003918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003908:	f007 fa52 	bl	800adb0 <__errno>
 800390c:	4603      	mov	r3, r0
 800390e:	220c      	movs	r2, #12
 8003910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e009      	b.n	800392c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <_sbrk+0x64>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <_sbrk+0x64>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <_sbrk+0x64>)
 8003928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20020000 	.word	0x20020000
 8003938:	00000400 	.word	0x00000400
 800393c:	200006b4 	.word	0x200006b4
 8003940:	200006d0 	.word	0x200006d0

08003944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <SystemInit+0x20>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <SystemInit+0x20>)
 8003950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 800396c:	2001      	movs	r0, #1
 800396e:	f000 fe1c 	bl	80045aa <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8003972:	2011      	movs	r0, #17
 8003974:	f000 fea0 	bl	80046b8 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}

0800397c <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8003980:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8003992:	23f0      	movs	r3, #240	; 0xf0
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80039a6:	4b52      	ldr	r3, [pc, #328]	; (8003af0 <ili9341_Init+0x150>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d115      	bne.n	80039de <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80039b2:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <ili9341_Init+0x150>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <ili9341_Init+0x150>)
 80039be:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80039c0:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <ili9341_Init+0x150>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <ili9341_Init+0x30>
      LCD_IO_Init();
 80039cc:	f000 fdf8 	bl	80045c0 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80039d0:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <ili9341_Init+0x150>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b45      	ldr	r3, [pc, #276]	; (8003af0 <ili9341_Init+0x150>)
 80039dc:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80039de:	200a      	movs	r0, #10
 80039e0:	f000 fdd8 	bl	8004594 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80039e4:	2001      	movs	r0, #1
 80039e6:	f000 fe67 	bl	80046b8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80039ea:	200a      	movs	r0, #10
 80039ec:	f000 fdd2 	bl	8004594 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80039f0:	2203      	movs	r2, #3
 80039f2:	4940      	ldr	r1, [pc, #256]	; (8003af4 <ili9341_Init+0x154>)
 80039f4:	20ef      	movs	r0, #239	; 0xef
 80039f6:	f000 fecd 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80039fa:	2203      	movs	r2, #3
 80039fc:	493e      	ldr	r1, [pc, #248]	; (8003af8 <ili9341_Init+0x158>)
 80039fe:	20cf      	movs	r0, #207	; 0xcf
 8003a00:	f000 fec8 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8003a04:	2204      	movs	r2, #4
 8003a06:	493d      	ldr	r1, [pc, #244]	; (8003afc <ili9341_Init+0x15c>)
 8003a08:	20ed      	movs	r0, #237	; 0xed
 8003a0a:	f000 fec3 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8003a0e:	2203      	movs	r2, #3
 8003a10:	493b      	ldr	r1, [pc, #236]	; (8003b00 <ili9341_Init+0x160>)
 8003a12:	20e8      	movs	r0, #232	; 0xe8
 8003a14:	f000 febe 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8003a18:	2205      	movs	r2, #5
 8003a1a:	493a      	ldr	r1, [pc, #232]	; (8003b04 <ili9341_Init+0x164>)
 8003a1c:	20cb      	movs	r0, #203	; 0xcb
 8003a1e:	f000 feb9 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8003a22:	2201      	movs	r2, #1
 8003a24:	4938      	ldr	r1, [pc, #224]	; (8003b08 <ili9341_Init+0x168>)
 8003a26:	20f7      	movs	r0, #247	; 0xf7
 8003a28:	f000 feb4 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4937      	ldr	r1, [pc, #220]	; (8003b0c <ili9341_Init+0x16c>)
 8003a30:	20ea      	movs	r0, #234	; 0xea
 8003a32:	f000 feaf 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8003a36:	2201      	movs	r2, #1
 8003a38:	4935      	ldr	r1, [pc, #212]	; (8003b10 <ili9341_Init+0x170>)
 8003a3a:	20c0      	movs	r0, #192	; 0xc0
 8003a3c:	f000 feaa 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8003a40:	2201      	movs	r2, #1
 8003a42:	4934      	ldr	r1, [pc, #208]	; (8003b14 <ili9341_Init+0x174>)
 8003a44:	20c1      	movs	r0, #193	; 0xc1
 8003a46:	f000 fea5 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4932      	ldr	r1, [pc, #200]	; (8003b18 <ili9341_Init+0x178>)
 8003a4e:	20c5      	movs	r0, #197	; 0xc5
 8003a50:	f000 fea0 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8003a54:	2201      	movs	r2, #1
 8003a56:	4931      	ldr	r1, [pc, #196]	; (8003b1c <ili9341_Init+0x17c>)
 8003a58:	20c7      	movs	r0, #199	; 0xc7
 8003a5a:	f000 fe9b 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8003a5e:	2201      	movs	r2, #1
 8003a60:	492f      	ldr	r1, [pc, #188]	; (8003b20 <ili9341_Init+0x180>)
 8003a62:	2037      	movs	r0, #55	; 0x37
 8003a64:	f000 fe96 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	492e      	ldr	r1, [pc, #184]	; (8003b24 <ili9341_Init+0x184>)
 8003a6c:	203a      	movs	r0, #58	; 0x3a
 8003a6e:	f000 fe91 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8003a72:	2202      	movs	r2, #2
 8003a74:	492c      	ldr	r1, [pc, #176]	; (8003b28 <ili9341_Init+0x188>)
 8003a76:	20b1      	movs	r0, #177	; 0xb1
 8003a78:	f000 fe8c 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	492b      	ldr	r1, [pc, #172]	; (8003b2c <ili9341_Init+0x18c>)
 8003a80:	20b6      	movs	r0, #182	; 0xb6
 8003a82:	f000 fe87 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8003a86:	2201      	movs	r2, #1
 8003a88:	4925      	ldr	r1, [pc, #148]	; (8003b20 <ili9341_Init+0x180>)
 8003a8a:	20f2      	movs	r0, #242	; 0xf2
 8003a8c:	f000 fe82 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8003a90:	2201      	movs	r2, #1
 8003a92:	4927      	ldr	r1, [pc, #156]	; (8003b30 <ili9341_Init+0x190>)
 8003a94:	2026      	movs	r0, #38	; 0x26
 8003a96:	f000 fe7d 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	4925      	ldr	r1, [pc, #148]	; (8003b34 <ili9341_Init+0x194>)
 8003a9e:	20e0      	movs	r0, #224	; 0xe0
 8003aa0:	f000 fe78 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	4924      	ldr	r1, [pc, #144]	; (8003b38 <ili9341_Init+0x198>)
 8003aa8:	20e1      	movs	r0, #225	; 0xe1
 8003aaa:	f000 fe73 	bl	8004794 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8003aae:	2036      	movs	r0, #54	; 0x36
 8003ab0:	f000 fe02 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003ab4:	20e8      	movs	r0, #232	; 0xe8
 8003ab6:	f000 fe1d 	bl	80046f4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8003aba:	2011      	movs	r0, #17
 8003abc:	f000 fdfc 	bl	80046b8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8003ac0:	200a      	movs	r0, #10
 8003ac2:	f000 fd67 	bl	8004594 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	23f0      	movs	r3, #240	; 0xf0
 8003acc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f000 f8d3 	bl	8003c7e <ili9341_FillRect>
  LCD_Delay(10);
 8003ad8:	200a      	movs	r0, #10
 8003ada:	f000 fd5b 	bl	8004594 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8003ade:	2029      	movs	r0, #41	; 0x29
 8003ae0:	f000 fdea 	bl	80046b8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8003ae4:	200a      	movs	r0, #10
 8003ae6:	f000 fd55 	bl	8004594 <LCD_Delay>
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	200006b8 	.word	0x200006b8
 8003af4:	0800de14 	.word	0x0800de14
 8003af8:	0800de18 	.word	0x0800de18
 8003afc:	0800de1c 	.word	0x0800de1c
 8003b00:	0800de24 	.word	0x0800de24
 8003b04:	0800de28 	.word	0x0800de28
 8003b08:	0800de30 	.word	0x0800de30
 8003b0c:	0800de34 	.word	0x0800de34
 8003b10:	0800de38 	.word	0x0800de38
 8003b14:	0800de3c 	.word	0x0800de3c
 8003b18:	0800de40 	.word	0x0800de40
 8003b1c:	0800de44 	.word	0x0800de44
 8003b20:	0800de48 	.word	0x0800de48
 8003b24:	0800de4c 	.word	0x0800de4c
 8003b28:	0800de50 	.word	0x0800de50
 8003b2c:	0800de54 	.word	0x0800de54
 8003b30:	0800de58 	.word	0x0800de58
 8003b34:	0800de5c 	.word	0x0800de5c
 8003b38:	0800de6c 	.word	0x0800de6c

08003b3c <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
 8003b46:	460b      	mov	r3, r1
 8003b48:	80bb      	strh	r3, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8003b4e:	202a      	movs	r0, #42	; 0x2a
 8003b50:	f000 fdb2 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fdc9 	bl	80046f4 <LCD_IO_WriteData8>
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fdc4 	bl	80046f4 <LCD_IO_WriteData8>
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fdbd 	bl	80046f4 <LCD_IO_WriteData8>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fdb8 	bl	80046f4 <LCD_IO_WriteData8>
 8003b84:	202b      	movs	r0, #43	; 0x2b
 8003b86:	f000 fd97 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003b8a:	88bb      	ldrh	r3, [r7, #4]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fdae 	bl	80046f4 <LCD_IO_WriteData8>
 8003b98:	88bb      	ldrh	r3, [r7, #4]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fda9 	bl	80046f4 <LCD_IO_WriteData8>
 8003ba2:	88bb      	ldrh	r3, [r7, #4]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fda2 	bl	80046f4 <LCD_IO_WriteData8>
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fd9d 	bl	80046f4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8003bba:	202c      	movs	r0, #44	; 0x2c
 8003bbc:	f000 fd7c 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fdac 	bl	8004720 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	80fb      	strh	r3, [r7, #6]
 8003be2:	4603      	mov	r3, r0
 8003be4:	80bb      	strh	r3, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	807b      	strh	r3, [r7, #2]
 8003bea:	4613      	mov	r3, r2
 8003bec:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8003bee:	202a      	movs	r0, #42	; 0x2a
 8003bf0:	f000 fd62 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fd79 	bl	80046f4 <LCD_IO_WriteData8>
 8003c02:	88bb      	ldrh	r3, [r7, #4]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fd74 	bl	80046f4 <LCD_IO_WriteData8>
 8003c0c:	88ba      	ldrh	r2, [r7, #4]
 8003c0e:	883b      	ldrh	r3, [r7, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	3b01      	subs	r3, #1
 8003c14:	121b      	asrs	r3, r3, #8
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fd6b 	bl	80046f4 <LCD_IO_WriteData8>
 8003c1e:	88bb      	ldrh	r3, [r7, #4]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	883b      	ldrh	r3, [r7, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fd60 	bl	80046f4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8003c34:	202b      	movs	r0, #43	; 0x2b
 8003c36:	f000 fd3f 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fd56 	bl	80046f4 <LCD_IO_WriteData8>
 8003c48:	887b      	ldrh	r3, [r7, #2]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fd51 	bl	80046f4 <LCD_IO_WriteData8>
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fd4a 	bl	80046f4 <LCD_IO_WriteData8>
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fd45 	bl	80046f4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8003c6a:	883a      	ldrh	r2, [r7, #0]
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	202c      	movs	r0, #44	; 0x2c
 8003c72:	f000 fd6b 	bl	800474c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}

08003c7e <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8003c7e:	b590      	push	{r4, r7, lr}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4604      	mov	r4, r0
 8003c86:	4608      	mov	r0, r1
 8003c88:	4611      	mov	r1, r2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	80fb      	strh	r3, [r7, #6]
 8003c90:	4603      	mov	r3, r0
 8003c92:	80bb      	strh	r3, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8003c9c:	202a      	movs	r0, #42	; 0x2a
 8003c9e:	f000 fd0b 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fd22 	bl	80046f4 <LCD_IO_WriteData8>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd1d 	bl	80046f4 <LCD_IO_WriteData8>
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	121b      	asrs	r3, r3, #8
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fd14 	bl	80046f4 <LCD_IO_WriteData8>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fd09 	bl	80046f4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8003ce2:	202b      	movs	r0, #43	; 0x2b
 8003ce4:	f000 fce8 	bl	80046b8 <LCD_IO_WriteCmd8>
 8003ce8:	88bb      	ldrh	r3, [r7, #4]
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fcff 	bl	80046f4 <LCD_IO_WriteData8>
 8003cf6:	88bb      	ldrh	r3, [r7, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fcfa 	bl	80046f4 <LCD_IO_WriteData8>
 8003d00:	88ba      	ldrh	r2, [r7, #4]
 8003d02:	883b      	ldrh	r3, [r7, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	3b01      	subs	r3, #1
 8003d08:	121b      	asrs	r3, r3, #8
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fcf1 	bl	80046f4 <LCD_IO_WriteData8>
 8003d12:	88bb      	ldrh	r3, [r7, #4]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fce6 	bl	80046f4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	883a      	ldrh	r2, [r7, #0]
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	8b3b      	ldrh	r3, [r7, #24]
 8003d34:	4619      	mov	r1, r3
 8003d36:	202c      	movs	r0, #44	; 0x2c
 8003d38:	f000 fd08 	bl	800474c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}

08003d44 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003d44:	b082      	sub	sp, #8
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	; 0x28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	603a      	str	r2, [r7, #0]
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	4603      	mov	r3, r0
 8003d52:	80fb      	strh	r3, [r7, #6]
 8003d54:	460b      	mov	r3, r1
 8003d56:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003d60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003d6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d72:	eeb0 0a47 	vmov.f32	s0, s14
 8003d76:	f009 ff61 	bl	800dc3c <ceilf>
 8003d7a:	eef0 7a40 	vmov.f32	s15, s0
 8003d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d82:	ee17 3a90 	vmov	r3, s15
 8003d86:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8003d96:	2300      	movs	r3, #0
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	e060      	b.n	8003e5e <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e024      	b.n	8003df0 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8003da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	3a20      	subs	r2, #32
 8003dae:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003db0:	fb01 f202 	mul.w	r2, r1, r2
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	fb02 f101 	mul.w	r1, r2, r1
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	6978      	ldr	r0, [r7, #20]
 8003dbe:	fb00 f202 	mul.w	r2, r0, r2
 8003dc2:	4411      	add	r1, r2
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	4413      	add	r3, r2
 8003dca:	7819      	ldrb	r1, [r3, #0]
 8003dcc:	f107 020c 	add.w	r2, r7, #12
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	460a      	mov	r2, r1
 8003dd6:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	f107 010c 	add.w	r1, r7, #12
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	440a      	add	r2, r1
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dbd6      	blt.n	8003da6 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	e027      	b.n	8003e4e <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	409a      	lsls	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	4413      	add	r3, r2
 8003e14:	b298      	uxth	r0, r3
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	88bb      	ldrh	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003e22:	4619      	mov	r1, r3
 8003e24:	f7ff fe8a 	bl	8003b3c <ili9341_WritePixel>
 8003e28:	e00e      	b.n	8003e48 <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4413      	add	r3, r2
 8003e32:	b298      	uxth	r0, r3
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	88bb      	ldrh	r3, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003e42:	4619      	mov	r1, r3
 8003e44:	f7ff fe7a 	bl	8003b3c <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e50:	461a      	mov	r2, r3
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	dbd2      	blt.n	8003dfe <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e60:	461a      	mov	r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	db99      	blt.n	8003d9c <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	; 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e74:	b002      	add	sp, #8
 8003e76:	4770      	bx	lr

08003e78 <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 8003e78:	b082      	sub	sp, #8
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b08a      	sub	sp, #40	; 0x28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	603a      	str	r2, [r7, #0]
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
 8003e84:	4603      	mov	r3, r0
 8003e86:	80fb      	strh	r3, [r7, #6]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8003e94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003ea2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eaa:	f009 fec7 	bl	800dc3c <ceilf>
 8003eae:	eef0 7a40 	vmov.f32	s15, s0
 8003eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb6:	ee17 3a90 	vmov	r3, s15
 8003eba:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e050      	b.n	8003f72 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	e024      	b.n	8003f24 <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	3a20      	subs	r2, #32
 8003ee2:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8003ee4:	fb01 f202 	mul.w	r2, r1, r2
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	fb02 f101 	mul.w	r1, r2, r1
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	6978      	ldr	r0, [r7, #20]
 8003ef2:	fb00 f202 	mul.w	r2, r0, r2
 8003ef6:	4411      	add	r1, r2
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	4413      	add	r3, r2
 8003efe:	7819      	ldrb	r1, [r3, #0]
 8003f00:	f107 020c 	add.w	r2, r7, #12
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	460a      	mov	r2, r1
 8003f0a:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	f107 010c 	add.w	r1, r7, #12
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	dbd6      	blt.n	8003eda <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e017      	b.n	8003f62 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	409a      	lsls	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	4413      	add	r3, r2
 8003f48:	b298      	uxth	r0, r3
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	88bb      	ldrh	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003f56:	4619      	mov	r1, r3
 8003f58:	f7ff fdf0 	bl	8003b3c <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f64:	461a      	mov	r2, r3
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	dbe2      	blt.n	8003f32 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f74:	461a      	mov	r2, r3
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	dba9      	blt.n	8003ed0 <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3728      	adds	r7, #40	; 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f88:	b002      	add	sp, #8
 8003f8a:	4770      	bx	lr

08003f8c <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b088      	sub	sp, #32
 8003f92:	af04      	add	r7, sp, #16
 8003f94:	603a      	str	r2, [r7, #0]
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	4603      	mov	r3, r0
 8003f9a:	80fb      	strh	r3, [r7, #6]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8003fa0:	f7ff fcf5 	bl	800398e <ili9341_GetLcdPixelHeight>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8003fa8:	f7ff fce8 	bl	800397c <ili9341_GetLcdPixelWidth>
 8003fac:	4603      	mov	r3, r0
 8003fae:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8003fb0:	e02c      	b.n	800400c <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	8c3a      	ldrh	r2, [r7, #32]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	89bb      	ldrh	r3, [r7, #12]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	db13      	blt.n	8003fe6 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8003fc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003fc4:	88bb      	ldrh	r3, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8003fca:	88bb      	ldrh	r3, [r7, #4]
 8003fcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003fce:	441a      	add	r2, r3
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	da1f      	bge.n	8004016 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d103      	bne.n	8003fe6 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	603b      	str	r3, [r7, #0]
				continue;
 8003fe4:	e012      	b.n	800400c <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8003fe6:	88b9      	ldrh	r1, [r7, #4]
 8003fe8:	88f8      	ldrh	r0, [r7, #6]
 8003fea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fec:	9302      	str	r3, [sp, #8]
 8003fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	f7ff fea3 	bl	8003d44 <ili9341_WriteChar>
		Xpo += fonto.Width;
 8003ffe:	8c3a      	ldrh	r2, [r7, #32]
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	4413      	add	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
		strr++;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	603b      	str	r3, [r7, #0]
	while(*strr){
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1ce      	bne.n	8003fb2 <ili9341_WriteString+0x26>
	}
}
 8004014:	e000      	b.n	8004018 <ili9341_WriteString+0x8c>
				break;
 8004016:	bf00      	nop
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004022:	b002      	add	sp, #8
 8004024:	4770      	bx	lr

08004026 <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8004026:	b082      	sub	sp, #8
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	603a      	str	r2, [r7, #0]
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
 8004036:	460b      	mov	r3, r1
 8004038:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 800403a:	f7ff fca8 	bl	800398e <ili9341_GetLcdPixelHeight>
 800403e:	4603      	mov	r3, r0
 8004040:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8004042:	f7ff fc9b 	bl	800397c <ili9341_GetLcdPixelWidth>
 8004046:	4603      	mov	r3, r0
 8004048:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 800404a:	e02a      	b.n	80040a2 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	8c3a      	ldrh	r2, [r7, #32]
 8004050:	441a      	add	r2, r3
 8004052:	89bb      	ldrh	r3, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	db13      	blt.n	8004080 <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 800405c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800405e:	88bb      	ldrh	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8004064:	88bb      	ldrh	r3, [r7, #4]
 8004066:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004068:	441a      	add	r2, r3
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	429a      	cmp	r2, r3
 800406e:	da1d      	bge.n	80040ac <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b20      	cmp	r3, #32
 8004076:	d103      	bne.n	8004080 <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	603b      	str	r3, [r7, #0]
				continue;
 800407e:	e010      	b.n	80040a2 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8004080:	88b9      	ldrh	r1, [r7, #4]
 8004082:	88f8      	ldrh	r0, [r7, #6]
 8004084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	f7ff fef2 	bl	8003e78 <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8004094:	8c3a      	ldrh	r2, [r7, #32]
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	4413      	add	r3, r2
 800409a:	80fb      	strh	r3, [r7, #6]
		strr++;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	603b      	str	r3, [r7, #0]
	while(*strr){
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1d0      	bne.n	800404c <ili9341_WriteStringNoBG+0x26>
	}
}
 80040aa:	e000      	b.n	80040ae <ili9341_WriteStringNoBG+0x88>
				break;
 80040ac:	bf00      	nop
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b8:	b002      	add	sp, #8
 80040ba:	4770      	bx	lr

080040bc <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	015b      	lsls	r3, r3, #5
 80040d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80040d4:	f023 031f 	bic.w	r3, r3, #31
 80040d8:	4313      	orrs	r3, r2
 80040da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80040de:	331c      	adds	r3, #28
 80040e0:	4a53      	ldr	r2, [pc, #332]	; (8004230 <LcdWrite8+0x174>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80040e6:	4b53      	ldr	r3, [pc, #332]	; (8004234 <LcdWrite8+0x178>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	4b51      	ldr	r3, [pc, #324]	; (8004234 <LcdWrite8+0x178>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 80040f2:	1dfb      	adds	r3, r7, #7
 80040f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	015b      	lsls	r3, r3, #5
 80040fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004100:	f023 031f 	bic.w	r3, r3, #31
 8004104:	4313      	orrs	r3, r2
 8004106:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800410a:	3318      	adds	r3, #24
 800410c:	4a48      	ldr	r2, [pc, #288]	; (8004230 <LcdWrite8+0x174>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004112:	4b48      	ldr	r3, [pc, #288]	; (8004234 <LcdWrite8+0x178>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	4b46      	ldr	r3, [pc, #280]	; (8004234 <LcdWrite8+0x178>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	015b      	lsls	r3, r3, #5
 8004128:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800412c:	f023 031f 	bic.w	r3, r3, #31
 8004130:	4313      	orrs	r3, r2
 8004132:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004136:	3314      	adds	r3, #20
 8004138:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <LcdWrite8+0x174>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <LcdWrite8+0x178>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <LcdWrite8+0x178>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004150:	1dfb      	adds	r3, r7, #7
 8004152:	015b      	lsls	r3, r3, #5
 8004154:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004158:	f023 031f 	bic.w	r3, r3, #31
 800415c:	4313      	orrs	r3, r2
 800415e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004162:	3310      	adds	r3, #16
 8004164:	4a32      	ldr	r2, [pc, #200]	; (8004230 <LcdWrite8+0x174>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800416a:	4b32      	ldr	r3, [pc, #200]	; (8004234 <LcdWrite8+0x178>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <LcdWrite8+0x178>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800417c:	1dfb      	adds	r3, r7, #7
 800417e:	015b      	lsls	r3, r3, #5
 8004180:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004184:	f023 031f 	bic.w	r3, r3, #31
 8004188:	4313      	orrs	r3, r2
 800418a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800418e:	330c      	adds	r3, #12
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <LcdWrite8+0x174>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <LcdWrite8+0x178>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <LcdWrite8+0x178>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	015b      	lsls	r3, r3, #5
 80041ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80041b0:	f023 031f 	bic.w	r3, r3, #31
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80041ba:	3308      	adds	r3, #8
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <LcdWrite8+0x174>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <LcdWrite8+0x178>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <LcdWrite8+0x178>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 80041ce:	1dfb      	adds	r3, r7, #7
 80041d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80041dc:	f023 031f 	bic.w	r3, r3, #31
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80041e6:	3304      	adds	r3, #4
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <LcdWrite8+0x174>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <LcdWrite8+0x178>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <LcdWrite8+0x178>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004200:	1dfb      	adds	r3, r7, #7
 8004202:	015b      	lsls	r3, r3, #5
 8004204:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004208:	f023 031f 	bic.w	r3, r3, #31
 800420c:	4313      	orrs	r3, r2
 800420e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <LcdWrite8+0x174>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <LcdWrite8+0x178>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <LcdWrite8+0x178>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	4241028c 	.word	0x4241028c
 8004234:	42408280 	.word	0x42408280

08004238 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8004242:	1dbb      	adds	r3, r7, #6
 8004244:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004248:	1dbb      	adds	r3, r7, #6
 800424a:	015b      	lsls	r3, r3, #5
 800424c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004250:	f023 031f 	bic.w	r3, r3, #31
 8004254:	4313      	orrs	r3, r2
 8004256:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800425a:	333c      	adds	r3, #60	; 0x3c
 800425c:	4aab      	ldr	r2, [pc, #684]	; (800450c <LcdWrite16+0x2d4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004262:	4bab      	ldr	r3, [pc, #684]	; (8004510 <LcdWrite16+0x2d8>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	4ba9      	ldr	r3, [pc, #676]	; (8004510 <LcdWrite16+0x2d8>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 800426e:	1dbb      	adds	r3, r7, #6
 8004270:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004274:	1dbb      	adds	r3, r7, #6
 8004276:	015b      	lsls	r3, r3, #5
 8004278:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800427c:	f023 031f 	bic.w	r3, r3, #31
 8004280:	4313      	orrs	r3, r2
 8004282:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004286:	3338      	adds	r3, #56	; 0x38
 8004288:	4aa0      	ldr	r2, [pc, #640]	; (800450c <LcdWrite16+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800428e:	4ba0      	ldr	r3, [pc, #640]	; (8004510 <LcdWrite16+0x2d8>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	4b9e      	ldr	r3, [pc, #632]	; (8004510 <LcdWrite16+0x2d8>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 800429a:	1dbb      	adds	r3, r7, #6
 800429c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80042a0:	1dbb      	adds	r3, r7, #6
 80042a2:	015b      	lsls	r3, r3, #5
 80042a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80042a8:	f023 031f 	bic.w	r3, r3, #31
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80042b2:	3334      	adds	r3, #52	; 0x34
 80042b4:	4a95      	ldr	r2, [pc, #596]	; (800450c <LcdWrite16+0x2d4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80042ba:	4b95      	ldr	r3, [pc, #596]	; (8004510 <LcdWrite16+0x2d8>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	4b93      	ldr	r3, [pc, #588]	; (8004510 <LcdWrite16+0x2d8>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 80042c6:	1dbb      	adds	r3, r7, #6
 80042c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80042cc:	1dbb      	adds	r3, r7, #6
 80042ce:	015b      	lsls	r3, r3, #5
 80042d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80042d4:	f023 031f 	bic.w	r3, r3, #31
 80042d8:	4313      	orrs	r3, r2
 80042da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80042de:	3330      	adds	r3, #48	; 0x30
 80042e0:	4a8a      	ldr	r2, [pc, #552]	; (800450c <LcdWrite16+0x2d4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80042e6:	4b8a      	ldr	r3, [pc, #552]	; (8004510 <LcdWrite16+0x2d8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	4b88      	ldr	r3, [pc, #544]	; (8004510 <LcdWrite16+0x2d8>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 80042f2:	1dbb      	adds	r3, r7, #6
 80042f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80042f8:	1dbb      	adds	r3, r7, #6
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004300:	f023 031f 	bic.w	r3, r3, #31
 8004304:	4313      	orrs	r3, r2
 8004306:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800430a:	332c      	adds	r3, #44	; 0x2c
 800430c:	4a7f      	ldr	r2, [pc, #508]	; (800450c <LcdWrite16+0x2d4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004312:	4b7f      	ldr	r3, [pc, #508]	; (8004510 <LcdWrite16+0x2d8>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <LcdWrite16+0x2d8>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 800431e:	1dbb      	adds	r3, r7, #6
 8004320:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004324:	1dbb      	adds	r3, r7, #6
 8004326:	015b      	lsls	r3, r3, #5
 8004328:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800432c:	f023 031f 	bic.w	r3, r3, #31
 8004330:	4313      	orrs	r3, r2
 8004332:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004336:	3328      	adds	r3, #40	; 0x28
 8004338:	4a74      	ldr	r2, [pc, #464]	; (800450c <LcdWrite16+0x2d4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800433e:	4b74      	ldr	r3, [pc, #464]	; (8004510 <LcdWrite16+0x2d8>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	4b72      	ldr	r3, [pc, #456]	; (8004510 <LcdWrite16+0x2d8>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 800434a:	1dbb      	adds	r3, r7, #6
 800434c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004350:	1dbb      	adds	r3, r7, #6
 8004352:	015b      	lsls	r3, r3, #5
 8004354:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004358:	f023 031f 	bic.w	r3, r3, #31
 800435c:	4313      	orrs	r3, r2
 800435e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	4a69      	ldr	r2, [pc, #420]	; (800450c <LcdWrite16+0x2d4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800436a:	4b69      	ldr	r3, [pc, #420]	; (8004510 <LcdWrite16+0x2d8>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	4b67      	ldr	r3, [pc, #412]	; (8004510 <LcdWrite16+0x2d8>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8004376:	1dbb      	adds	r3, r7, #6
 8004378:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800437c:	1dbb      	adds	r3, r7, #6
 800437e:	015b      	lsls	r3, r3, #5
 8004380:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004384:	f023 031f 	bic.w	r3, r3, #31
 8004388:	4313      	orrs	r3, r2
 800438a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800438e:	3320      	adds	r3, #32
 8004390:	4a5e      	ldr	r2, [pc, #376]	; (800450c <LcdWrite16+0x2d4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004396:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <LcdWrite16+0x2d8>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <LcdWrite16+0x2d8>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80043a8:	1dbb      	adds	r3, r7, #6
 80043aa:	015b      	lsls	r3, r3, #5
 80043ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80043b0:	f023 031f 	bic.w	r3, r3, #31
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80043ba:	331c      	adds	r3, #28
 80043bc:	4a53      	ldr	r2, [pc, #332]	; (800450c <LcdWrite16+0x2d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80043c2:	4b53      	ldr	r3, [pc, #332]	; (8004510 <LcdWrite16+0x2d8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	4b51      	ldr	r3, [pc, #324]	; (8004510 <LcdWrite16+0x2d8>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 80043ce:	1dbb      	adds	r3, r7, #6
 80043d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80043d4:	1dbb      	adds	r3, r7, #6
 80043d6:	015b      	lsls	r3, r3, #5
 80043d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80043dc:	f023 031f 	bic.w	r3, r3, #31
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80043e6:	3318      	adds	r3, #24
 80043e8:	4a48      	ldr	r2, [pc, #288]	; (800450c <LcdWrite16+0x2d4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80043ee:	4b48      	ldr	r3, [pc, #288]	; (8004510 <LcdWrite16+0x2d8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	4b46      	ldr	r3, [pc, #280]	; (8004510 <LcdWrite16+0x2d8>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 80043fa:	1dbb      	adds	r3, r7, #6
 80043fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004400:	1dbb      	adds	r3, r7, #6
 8004402:	015b      	lsls	r3, r3, #5
 8004404:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004408:	f023 031f 	bic.w	r3, r3, #31
 800440c:	4313      	orrs	r3, r2
 800440e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004412:	3314      	adds	r3, #20
 8004414:	4a3d      	ldr	r2, [pc, #244]	; (800450c <LcdWrite16+0x2d4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <LcdWrite16+0x2d8>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <LcdWrite16+0x2d8>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800442c:	1dbb      	adds	r3, r7, #6
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004434:	f023 031f 	bic.w	r3, r3, #31
 8004438:	4313      	orrs	r3, r2
 800443a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800443e:	3310      	adds	r3, #16
 8004440:	4a32      	ldr	r2, [pc, #200]	; (800450c <LcdWrite16+0x2d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004446:	4b32      	ldr	r3, [pc, #200]	; (8004510 <LcdWrite16+0x2d8>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <LcdWrite16+0x2d8>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004458:	1dbb      	adds	r3, r7, #6
 800445a:	015b      	lsls	r3, r3, #5
 800445c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004460:	f023 031f 	bic.w	r3, r3, #31
 8004464:	4313      	orrs	r3, r2
 8004466:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800446a:	330c      	adds	r3, #12
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <LcdWrite16+0x2d4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <LcdWrite16+0x2d8>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <LcdWrite16+0x2d8>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 800447e:	1dbb      	adds	r3, r7, #6
 8004480:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004484:	1dbb      	adds	r3, r7, #6
 8004486:	015b      	lsls	r3, r3, #5
 8004488:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800448c:	f023 031f 	bic.w	r3, r3, #31
 8004490:	4313      	orrs	r3, r2
 8004492:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004496:	3308      	adds	r3, #8
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <LcdWrite16+0x2d4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <LcdWrite16+0x2d8>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <LcdWrite16+0x2d8>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 80044aa:	1dbb      	adds	r3, r7, #6
 80044ac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80044b0:	1dbb      	adds	r3, r7, #6
 80044b2:	015b      	lsls	r3, r3, #5
 80044b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80044b8:	f023 031f 	bic.w	r3, r3, #31
 80044bc:	4313      	orrs	r3, r2
 80044be:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80044c2:	3304      	adds	r3, #4
 80044c4:	4a11      	ldr	r2, [pc, #68]	; (800450c <LcdWrite16+0x2d4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <LcdWrite16+0x2d8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <LcdWrite16+0x2d8>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 80044d6:	1dbb      	adds	r3, r7, #6
 80044d8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80044dc:	1dbb      	adds	r3, r7, #6
 80044de:	015b      	lsls	r3, r3, #5
 80044e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80044e4:	f023 031f 	bic.w	r3, r3, #31
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80044ee:	4a07      	ldr	r2, [pc, #28]	; (800450c <LcdWrite16+0x2d4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <LcdWrite16+0x2d8>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <LcdWrite16+0x2d8>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	4241028c 	.word	0x4241028c
 8004510:	42408280 	.word	0x42408280

08004514 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8004520:	e00a      	b.n	8004538 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff fdc8 	bl	80040bc <LcdWrite8>
    if(dinc)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3301      	adds	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	60ba      	str	r2, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ef      	bne.n	8004522 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8004542:	4b03      	ldr	r3, [pc, #12]	; (8004550 <LCD_IO_WriteMultiData8+0x3c>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	42410284 	.word	0x42410284

08004554 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8004560:	e00a      	b.n	8004578 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe66 	bl	8004238 <LcdWrite16>
    if(dinc)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3302      	adds	r3, #2
 8004576:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	60ba      	str	r2, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ef      	bne.n	8004562 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8004582:	4b03      	ldr	r3, [pc, #12]	; (8004590 <LCD_IO_WriteMultiData16+0x3c>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	42410284 	.word	0x42410284

08004594 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9b7 	bl	8004910 <HAL_Delay>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80045c4:	4b34      	ldr	r3, [pc, #208]	; (8004698 <LCD_IO_Init+0xd8>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a33      	ldr	r2, [pc, #204]	; (8004698 <LCD_IO_Init+0xd8>)
 80045ca:	f043 0307 	orr.w	r3, r3, #7
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <LCD_IO_Init+0xdc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	4a30      	ldr	r2, [pc, #192]	; (800469c <LCD_IO_Init+0xdc>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80045e0:	4b2e      	ldr	r3, [pc, #184]	; (800469c <LCD_IO_Init+0xdc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a2d      	ldr	r2, [pc, #180]	; (800469c <LCD_IO_Init+0xdc>)
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80045ec:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <LCD_IO_Init+0xe0>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <LCD_IO_Init+0xe4>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <LCD_IO_Init+0xe8>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80045fe:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <LCD_IO_Init+0xec>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	4a29      	ldr	r2, [pc, #164]	; (80046ac <LCD_IO_Init+0xec>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <LCD_IO_Init+0xec>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 030c 	bic.w	r3, r3, #12
 8004616:	4a25      	ldr	r2, [pc, #148]	; (80046ac <LCD_IO_Init+0xec>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <LCD_IO_Init+0xec>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <LCD_IO_Init+0xec>)
 8004624:	f043 0303 	orr.w	r3, r3, #3
 8004628:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <LCD_IO_Init+0xec>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <LCD_IO_Init+0xec>)
 8004630:	f043 030c 	orr.w	r3, r3, #12
 8004634:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <LCD_IO_Init+0xf0>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <LCD_IO_Init+0xf0>)
 800463c:	f043 0303 	orr.w	r3, r3, #3
 8004640:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <LCD_IO_Init+0xec>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	4a19      	ldr	r2, [pc, #100]	; (80046ac <LCD_IO_Init+0xec>)
 8004648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800464c:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 800464e:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <LCD_IO_Init+0xf4>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8004654:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <LCD_IO_Init+0xf0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 0303 	bic.w	r3, r3, #3
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <LCD_IO_Init+0xf0>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <LCD_IO_Init+0xec>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800466c:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <LCD_IO_Init+0xec>)
 800466e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004672:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8004674:	200a      	movs	r0, #10
 8004676:	f7ff ff8d 	bl	8004594 <LCD_Delay>
  LCD_RST_ON;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <LCD_IO_Init+0xe0>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8004680:	200a      	movs	r0, #10
 8004682:	f7ff ff87 	bl	8004594 <LCD_Delay>
  LCD_RST_OFF;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <LCD_IO_Init+0xe0>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 800468c:	200a      	movs	r0, #10
 800468e:	f7ff ff81 	bl	8004594 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	40020000 	.word	0x40020000
 80046a0:	42400290 	.word	0x42400290
 80046a4:	42410280 	.word	0x42410280
 80046a8:	42410284 	.word	0x42410284
 80046ac:	40020800 	.word	0x40020800
 80046b0:	40020400 	.word	0x40020400
 80046b4:	42408280 	.word	0x42408280

080046b8 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <LCD_IO_WriteCmd8+0x34>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <LCD_IO_WriteCmd8+0x38>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fcf3 	bl	80040bc <LcdWrite8>
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <LCD_IO_WriteCmd8+0x38>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <LCD_IO_WriteCmd8+0x34>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	42410284 	.word	0x42410284
 80046f0:	42410280 	.word	0x42410280

080046f4 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <LCD_IO_WriteData8+0x28>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fcd8 	bl	80040bc <LcdWrite8>
  LCD_CS_OFF;
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <LCD_IO_WriteData8+0x28>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	42410284 	.word	0x42410284

08004720 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <LCD_IO_WriteData16+0x28>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fd80 	bl	8004238 <LcdWrite16>
  LCD_CS_OFF;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <LCD_IO_WriteData16+0x28>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	42410284 	.word	0x42410284

0800474c <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	603a      	str	r2, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
 8004758:	460b      	mov	r3, r1
 800475a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <LCD_IO_WriteCmd8DataFill16+0x40>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fca6 	bl	80040bc <LcdWrite8>
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	2200      	movs	r2, #0
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fee9 	bl	8004554 <LCD_IO_WriteMultiData16>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	42410284 	.word	0x42410284
 8004790:	42410280 	.word	0x42410280

08004794 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fc83 	bl	80040bc <LcdWrite8>
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80047bc:	2201      	movs	r2, #1
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	68b8      	ldr	r0, [r7, #8]
 80047c2:	f7ff fea7 	bl	8004514 <LCD_IO_WriteMultiData8>
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	42410284 	.word	0x42410284
 80047d4:	42410280 	.word	0x42410280

080047d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80047d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004810 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047dc:	480d      	ldr	r0, [pc, #52]	; (8004814 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047de:	490e      	ldr	r1, [pc, #56]	; (8004818 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047e0:	4a0e      	ldr	r2, [pc, #56]	; (800481c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047e4:	e002      	b.n	80047ec <LoopCopyDataInit>

080047e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ea:	3304      	adds	r3, #4

080047ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047f0:	d3f9      	bcc.n	80047e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047f2:	4a0b      	ldr	r2, [pc, #44]	; (8004820 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80047f4:	4c0b      	ldr	r4, [pc, #44]	; (8004824 <LoopFillZerobss+0x26>)
  movs r3, #0
 80047f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f8:	e001      	b.n	80047fe <LoopFillZerobss>

080047fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047fc:	3204      	adds	r2, #4

080047fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004800:	d3fb      	bcc.n	80047fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004802:	f7ff f89f 	bl	8003944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004806:	f006 fad9 	bl	800adbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800480a:	f7fd f92f 	bl	8001a6c <main>
  bx  lr    
 800480e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004818:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 800481c:	08019794 	.word	0x08019794
  ldr r2, =_sbss
 8004820:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004824:	200006d0 	.word	0x200006d0

08004828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004828:	e7fe      	b.n	8004828 <ADC_IRQHandler>
	...

0800482c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <HAL_Init+0x40>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_Init+0x40>)
 8004836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800483a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_Init+0x40>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <HAL_Init+0x40>)
 8004842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_Init+0x40>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a07      	ldr	r2, [pc, #28]	; (800486c <HAL_Init+0x40>)
 800484e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004854:	2003      	movs	r0, #3
 8004856:	f000 f94f 	bl	8004af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800485a:	2000      	movs	r0, #0
 800485c:	f000 f808 	bl	8004870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004860:	f7fe fd08 	bl	8003274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023c00 	.word	0x40023c00

08004870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_InitTick+0x54>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_InitTick+0x58>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4619      	mov	r1, r3
 8004882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004886:	fbb3 f3f1 	udiv	r3, r3, r1
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f967 	bl	8004b62 <HAL_SYSTICK_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e00e      	b.n	80048bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b0f      	cmp	r3, #15
 80048a2:	d80a      	bhi.n	80048ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048a4:	2200      	movs	r2, #0
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	f000 f92f 	bl	8004b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048b0:	4a06      	ldr	r2, [pc, #24]	; (80048cc <HAL_InitTick+0x5c>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000088 	.word	0x20000088
 80048c8:	200000b0 	.word	0x200000b0
 80048cc:	200000ac 	.word	0x200000ac

080048d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_IncTick+0x20>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_IncTick+0x24>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4413      	add	r3, r2
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_IncTick+0x24>)
 80048e2:	6013      	str	r3, [r2, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200000b0 	.word	0x200000b0
 80048f4:	200006bc 	.word	0x200006bc

080048f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return uwTick;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <HAL_GetTick+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200006bc 	.word	0x200006bc

08004910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004918:	f7ff ffee 	bl	80048f8 <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d005      	beq.n	8004936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <HAL_Delay+0x44>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004936:	bf00      	nop
 8004938:	f7ff ffde 	bl	80048f8 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	429a      	cmp	r2, r3
 8004946:	d8f7      	bhi.n	8004938 <HAL_Delay+0x28>
  {
  }
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200000b0 	.word	0x200000b0

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db0a      	blt.n	8004a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <__NVIC_SetPriority+0x4c>)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a20:	e00a      	b.n	8004a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <__NVIC_SetPriority+0x50>)
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	440b      	add	r3, r1
 8004a36:	761a      	strb	r2, [r3, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f1c3 0307 	rsb	r3, r3, #7
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	bf28      	it	cs
 8004a6a:	2304      	movcs	r3, #4
 8004a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d902      	bls.n	8004a7c <NVIC_EncodePriority+0x30>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3b03      	subs	r3, #3
 8004a7a:	e000      	b.n	8004a7e <NVIC_EncodePriority+0x32>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	4313      	orrs	r3, r2
         );
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac4:	d301      	bcc.n	8004aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e00f      	b.n	8004aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <SysTick_Config+0x40>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	f7ff ff8e 	bl	80049f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <SysTick_Config+0x40>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <SysTick_Config+0x40>)
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000e010 	.word	0xe000e010

08004af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff29 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b20:	f7ff ff3e 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7ff ff8e 	bl	8004a4c <NVIC_EncodePriority>
 8004b30:	4602      	mov	r2, r0
 8004b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff5d 	bl	80049f8 <__NVIC_SetPriority>
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ff31 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ffa2 	bl	8004ab4 <SysTick_Config>
 8004b70:	4603      	mov	r3, r0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b88:	f7ff feb6 	bl	80048f8 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e099      	b.n	8004ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bb8:	e00f      	b.n	8004bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bba:	f7ff fe9d 	bl	80048f8 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	d908      	bls.n	8004bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e078      	b.n	8004ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e8      	bne.n	8004bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <HAL_DMA_Init+0x158>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d107      	bne.n	8004c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0307 	bic.w	r3, r3, #7
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d117      	bne.n	8004c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00e      	beq.n	8004c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fb0f 	bl	80052a4 <DMA_CheckFifoParam>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e016      	b.n	8004ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fac6 	bl	8005238 <DMA_CalcBaseAndBitshift>
 8004cac:	4603      	mov	r3, r0
 8004cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	223f      	movs	r2, #63	; 0x3f
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	f010803f 	.word	0xf010803f

08004cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_DMA_Start_IT+0x26>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e040      	b.n	8004d80 <HAL_DMA_Start_IT+0xa8>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d12f      	bne.n	8004d72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fa58 	bl	80051dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	223f      	movs	r2, #63	; 0x3f
 8004d32:	409a      	lsls	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0216 	orr.w	r2, r2, #22
 8004d46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0208 	orr.w	r2, r2, #8
 8004d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e005      	b.n	8004d7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d96:	f7ff fdaf 	bl	80048f8 <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d008      	beq.n	8004dba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2280      	movs	r2, #128	; 0x80
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e052      	b.n	8004e60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0216 	bic.w	r2, r2, #22
 8004dc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <HAL_DMA_Abort+0x62>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0208 	bic.w	r2, r2, #8
 8004df8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e0a:	e013      	b.n	8004e34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e0c:	f7ff fd74 	bl	80048f8 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d90c      	bls.n	8004e34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2203      	movs	r2, #3
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e015      	b.n	8004e60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e4      	bne.n	8004e0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e46:	223f      	movs	r2, #63	; 0x3f
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2280      	movs	r2, #128	; 0x80
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e00c      	b.n	8004ea0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2205      	movs	r2, #5
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004eb8:	4b8e      	ldr	r3, [pc, #568]	; (80050f4 <HAL_DMA_IRQHandler+0x248>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a8e      	ldr	r2, [pc, #568]	; (80050f8 <HAL_DMA_IRQHandler+0x24c>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	0a9b      	lsrs	r3, r3, #10
 8004ec4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01a      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d013      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f04:	2208      	movs	r2, #8
 8004f06:	409a      	lsls	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d012      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f043 0202 	orr.w	r2, r3, #2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	2204      	movs	r2, #4
 8004f54:	409a      	lsls	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d012      	beq.n	8004f84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	2204      	movs	r2, #4
 8004f72:	409a      	lsls	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	2210      	movs	r2, #16
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d043      	beq.n	800501c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d03c      	beq.n	800501c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d018      	beq.n	8004fee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d024      	beq.n	800501c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
 8004fda:	e01f      	b.n	800501c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
 8004fec:	e016      	b.n	800501c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0208 	bic.w	r2, r2, #8
 800500a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005020:	2220      	movs	r2, #32
 8005022:	409a      	lsls	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 808f 	beq.w	800514c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8087 	beq.w	800514c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005042:	2220      	movs	r2, #32
 8005044:	409a      	lsls	r2, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b05      	cmp	r3, #5
 8005054:	d136      	bne.n	80050c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0216 	bic.w	r2, r2, #22
 8005064:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005074:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <HAL_DMA_IRQHandler+0x1da>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0208 	bic.w	r2, r2, #8
 8005094:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	223f      	movs	r2, #63	; 0x3f
 800509c:	409a      	lsls	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d07e      	beq.n	80051b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
        }
        return;
 80050c2:	e079      	b.n	80051b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01d      	beq.n	800510e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10d      	bne.n	80050fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d031      	beq.n	800514c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
 80050f0:	e02c      	b.n	800514c <HAL_DMA_IRQHandler+0x2a0>
 80050f2:	bf00      	nop
 80050f4:	20000088 	.word	0x20000088
 80050f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d023      	beq.n	800514c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
 800510c:	e01e      	b.n	800514c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10f      	bne.n	800513c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0210 	bic.w	r2, r2, #16
 800512a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	2b00      	cmp	r3, #0
 8005152:	d032      	beq.n	80051ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d022      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2205      	movs	r2, #5
 8005164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3301      	adds	r3, #1
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	429a      	cmp	r2, r3
 8005182:	d307      	bcc.n	8005194 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f2      	bne.n	8005178 <HAL_DMA_IRQHandler+0x2cc>
 8005192:	e000      	b.n	8005196 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005194:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e000      	b.n	80051ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80051b8:	bf00      	nop
    }
  }
}
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d108      	bne.n	800521c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800521a:	e007      	b.n	800522c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	3b10      	subs	r3, #16
 8005248:	4a14      	ldr	r2, [pc, #80]	; (800529c <DMA_CalcBaseAndBitshift+0x64>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d909      	bls.n	800527a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	659a      	str	r2, [r3, #88]	; 0x58
 8005278:	e007      	b.n	800528a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	aaaaaaab 	.word	0xaaaaaaab
 80052a0:	080193a0 	.word	0x080193a0

080052a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11f      	bne.n	80052fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d856      	bhi.n	8005372 <DMA_CheckFifoParam+0xce>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <DMA_CheckFifoParam+0x28>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052ef 	.word	0x080052ef
 80052d4:	080052dd 	.word	0x080052dd
 80052d8:	08005373 	.word	0x08005373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d046      	beq.n	8005376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ec:	e043      	b.n	8005376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052f6:	d140      	bne.n	800537a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052fc:	e03d      	b.n	800537a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005306:	d121      	bne.n	800534c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d837      	bhi.n	800537e <DMA_CheckFifoParam+0xda>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <DMA_CheckFifoParam+0x70>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005325 	.word	0x08005325
 8005318:	0800532b 	.word	0x0800532b
 800531c:	08005325 	.word	0x08005325
 8005320:	0800533d 	.word	0x0800533d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e030      	b.n	800538c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d025      	beq.n	8005382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533a:	e022      	b.n	8005382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005344:	d11f      	bne.n	8005386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800534a:	e01c      	b.n	8005386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d903      	bls.n	800535a <DMA_CheckFifoParam+0xb6>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d003      	beq.n	8005360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005358:	e018      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
      break;
 800535e:	e015      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00e      	beq.n	800538a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e00b      	b.n	800538a <DMA_CheckFifoParam+0xe6>
      break;
 8005372:	bf00      	nop
 8005374:	e00a      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      break;
 8005376:	bf00      	nop
 8005378:	e008      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      break;
 800537a:	bf00      	nop
 800537c:	e006      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      break;
 800537e:	bf00      	nop
 8005380:	e004      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      break;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      break;   
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <DMA_CheckFifoParam+0xe8>
      break;
 800538a:	bf00      	nop
    }
  } 
  
  return status; 
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	e159      	b.n	800566c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053b8:	2201      	movs	r2, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4013      	ands	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	f040 8148 	bne.w	8005666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d005      	beq.n	80053ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d130      	bne.n	8005450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	2203      	movs	r2, #3
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4013      	ands	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4313      	orrs	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005424:	2201      	movs	r2, #1
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 0201 	and.w	r2, r3, #1
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	2b03      	cmp	r3, #3
 800545a:	d017      	beq.n	800548c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	2203      	movs	r2, #3
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	43db      	mvns	r3, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d123      	bne.n	80054e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	08da      	lsrs	r2, r3, #3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3208      	adds	r2, #8
 80054a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	220f      	movs	r2, #15
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	08da      	lsrs	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3208      	adds	r2, #8
 80054da:	69b9      	ldr	r1, [r7, #24]
 80054dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	2203      	movs	r2, #3
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 0203 	and.w	r2, r3, #3
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80a2 	beq.w	8005666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	4b57      	ldr	r3, [pc, #348]	; (8005684 <HAL_GPIO_Init+0x2e8>)
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	4a56      	ldr	r2, [pc, #344]	; (8005684 <HAL_GPIO_Init+0x2e8>)
 800552c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005530:	6453      	str	r3, [r2, #68]	; 0x44
 8005532:	4b54      	ldr	r3, [pc, #336]	; (8005684 <HAL_GPIO_Init+0x2e8>)
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800553e:	4a52      	ldr	r2, [pc, #328]	; (8005688 <HAL_GPIO_Init+0x2ec>)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	3302      	adds	r3, #2
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	220f      	movs	r2, #15
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a49      	ldr	r2, [pc, #292]	; (800568c <HAL_GPIO_Init+0x2f0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d019      	beq.n	800559e <HAL_GPIO_Init+0x202>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a48      	ldr	r2, [pc, #288]	; (8005690 <HAL_GPIO_Init+0x2f4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_GPIO_Init+0x1fe>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a47      	ldr	r2, [pc, #284]	; (8005694 <HAL_GPIO_Init+0x2f8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00d      	beq.n	8005596 <HAL_GPIO_Init+0x1fa>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a46      	ldr	r2, [pc, #280]	; (8005698 <HAL_GPIO_Init+0x2fc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <HAL_GPIO_Init+0x1f6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a45      	ldr	r2, [pc, #276]	; (800569c <HAL_GPIO_Init+0x300>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d101      	bne.n	800558e <HAL_GPIO_Init+0x1f2>
 800558a:	2304      	movs	r3, #4
 800558c:	e008      	b.n	80055a0 <HAL_GPIO_Init+0x204>
 800558e:	2307      	movs	r3, #7
 8005590:	e006      	b.n	80055a0 <HAL_GPIO_Init+0x204>
 8005592:	2303      	movs	r3, #3
 8005594:	e004      	b.n	80055a0 <HAL_GPIO_Init+0x204>
 8005596:	2302      	movs	r3, #2
 8005598:	e002      	b.n	80055a0 <HAL_GPIO_Init+0x204>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <HAL_GPIO_Init+0x204>
 800559e:	2300      	movs	r3, #0
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	f002 0203 	and.w	r2, r2, #3
 80055a6:	0092      	lsls	r2, r2, #2
 80055a8:	4093      	lsls	r3, r2
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055b0:	4935      	ldr	r1, [pc, #212]	; (8005688 <HAL_GPIO_Init+0x2ec>)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	3302      	adds	r3, #2
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055be:	4b38      	ldr	r3, [pc, #224]	; (80056a0 <HAL_GPIO_Init+0x304>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055e2:	4a2f      	ldr	r2, [pc, #188]	; (80056a0 <HAL_GPIO_Init+0x304>)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055e8:	4b2d      	ldr	r3, [pc, #180]	; (80056a0 <HAL_GPIO_Init+0x304>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800560c:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <HAL_GPIO_Init+0x304>)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <HAL_GPIO_Init+0x304>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	43db      	mvns	r3, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4013      	ands	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005636:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_GPIO_Init+0x304>)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800563c:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <HAL_GPIO_Init+0x304>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005660:	4a0f      	ldr	r2, [pc, #60]	; (80056a0 <HAL_GPIO_Init+0x304>)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	f67f aea2 	bls.w	80053b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	3724      	adds	r7, #36	; 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	40013800 	.word	0x40013800
 800568c:	40020000 	.word	0x40020000
 8005690:	40020400 	.word	0x40020400
 8005694:	40020800 	.word	0x40020800
 8005698:	40020c00 	.word	0x40020c00
 800569c:	40021000 	.word	0x40021000
 80056a0:	40013c00 	.word	0x40013c00

080056a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	807b      	strh	r3, [r7, #2]
 80056b0:	4613      	mov	r3, r2
 80056b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056b4:	787b      	ldrb	r3, [r7, #1]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056ba:	887a      	ldrh	r2, [r7, #2]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056c0:	e003      	b.n	80056ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056c2:	887b      	ldrh	r3, [r7, #2]
 80056c4:	041a      	lsls	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	619a      	str	r2, [r3, #24]
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056e8:	887a      	ldrh	r2, [r7, #2]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4013      	ands	r3, r2
 80056ee:	041a      	lsls	r2, r3, #16
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	43d9      	mvns	r1, r3
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	400b      	ands	r3, r1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	619a      	str	r2, [r3, #24]
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d006      	beq.n	8005730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005722:	4a05      	ldr	r2, [pc, #20]	; (8005738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fd3a 	bl	80031a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40013c00 	.word	0x40013c00

0800573c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e12b      	b.n	80059a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fd fdae 	bl	80032c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	; 0x24
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800578e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800579e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057a0:	f003 f8d6 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 80057a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4a81      	ldr	r2, [pc, #516]	; (80059b0 <HAL_I2C_Init+0x274>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d807      	bhi.n	80057c0 <HAL_I2C_Init+0x84>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a80      	ldr	r2, [pc, #512]	; (80059b4 <HAL_I2C_Init+0x278>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	bf94      	ite	ls
 80057b8:	2301      	movls	r3, #1
 80057ba:	2300      	movhi	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e006      	b.n	80057ce <HAL_I2C_Init+0x92>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a7d      	ldr	r2, [pc, #500]	; (80059b8 <HAL_I2C_Init+0x27c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bf94      	ite	ls
 80057c8:	2301      	movls	r3, #1
 80057ca:	2300      	movhi	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e0e7      	b.n	80059a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a78      	ldr	r2, [pc, #480]	; (80059bc <HAL_I2C_Init+0x280>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	0c9b      	lsrs	r3, r3, #18
 80057e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4a6a      	ldr	r2, [pc, #424]	; (80059b0 <HAL_I2C_Init+0x274>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d802      	bhi.n	8005810 <HAL_I2C_Init+0xd4>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3301      	adds	r3, #1
 800580e:	e009      	b.n	8005824 <HAL_I2C_Init+0xe8>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005816:	fb02 f303 	mul.w	r3, r2, r3
 800581a:	4a69      	ldr	r2, [pc, #420]	; (80059c0 <HAL_I2C_Init+0x284>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	099b      	lsrs	r3, r3, #6
 8005822:	3301      	adds	r3, #1
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	430b      	orrs	r3, r1
 800582a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	495c      	ldr	r1, [pc, #368]	; (80059b0 <HAL_I2C_Init+0x274>)
 8005840:	428b      	cmp	r3, r1
 8005842:	d819      	bhi.n	8005878 <HAL_I2C_Init+0x13c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1e59      	subs	r1, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005858:	400b      	ands	r3, r1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_I2C_Init+0x138>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1e59      	subs	r1, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	fbb1 f3f3 	udiv	r3, r1, r3
 800586c:	3301      	adds	r3, #1
 800586e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005872:	e051      	b.n	8005918 <HAL_I2C_Init+0x1dc>
 8005874:	2304      	movs	r3, #4
 8005876:	e04f      	b.n	8005918 <HAL_I2C_Init+0x1dc>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d111      	bne.n	80058a4 <HAL_I2C_Init+0x168>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	1e58      	subs	r0, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6859      	ldr	r1, [r3, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	440b      	add	r3, r1
 800588e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005892:	3301      	adds	r3, #1
 8005894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e012      	b.n	80058ca <HAL_I2C_Init+0x18e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1e58      	subs	r0, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	0099      	lsls	r1, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ba:	3301      	adds	r3, #1
 80058bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_Init+0x196>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e022      	b.n	8005918 <HAL_I2C_Init+0x1dc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10e      	bne.n	80058f8 <HAL_I2C_Init+0x1bc>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1e58      	subs	r0, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	440b      	add	r3, r1
 80058e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ec:	3301      	adds	r3, #1
 80058ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f6:	e00f      	b.n	8005918 <HAL_I2C_Init+0x1dc>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1e58      	subs	r0, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	0099      	lsls	r1, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	fbb0 f3f3 	udiv	r3, r0, r3
 800590e:	3301      	adds	r3, #1
 8005910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	6809      	ldr	r1, [r1, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6911      	ldr	r1, [r2, #16]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	68d2      	ldr	r2, [r2, #12]
 8005952:	4311      	orrs	r1, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	430b      	orrs	r3, r1
 800595a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	000186a0 	.word	0x000186a0
 80059b4:	001e847f 	.word	0x001e847f
 80059b8:	003d08ff 	.word	0x003d08ff
 80059bc:	431bde83 	.word	0x431bde83
 80059c0:	10624dd3 	.word	0x10624dd3

080059c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	817b      	strh	r3, [r7, #10]
 80059d6:	460b      	mov	r3, r1
 80059d8:	813b      	strh	r3, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059de:	f7fe ff8b 	bl	80048f8 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	f040 80d9 	bne.w	8005ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2319      	movs	r3, #25
 80059f8:	2201      	movs	r2, #1
 80059fa:	496d      	ldr	r1, [pc, #436]	; (8005bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f002 f90d 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e0cc      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_I2C_Mem_Write+0x56>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e0c5      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d007      	beq.n	8005a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2221      	movs	r2, #33	; 0x21
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2240      	movs	r2, #64	; 0x40
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a4d      	ldr	r2, [pc, #308]	; (8005bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8005a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a82:	88f8      	ldrh	r0, [r7, #6]
 8005a84:	893a      	ldrh	r2, [r7, #8]
 8005a86:	8979      	ldrh	r1, [r7, #10]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4603      	mov	r3, r0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 fe9c 	bl	80077d0 <I2C_RequestMemoryWrite>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d052      	beq.n	8005b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e081      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f002 f98e 	bl	8007dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d107      	bne.n	8005aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e06b      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d11b      	bne.n	8005b44 <HAL_I2C_Mem_Write+0x180>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d017      	beq.n	8005b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1aa      	bne.n	8005aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f002 f97a 	bl	8007e4a <I2C_WaitOnBTFFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d107      	bne.n	8005b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e016      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	00100002 	.word	0x00100002
 8005bb4:	ffff0000 	.word	0xffff0000

08005bb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08c      	sub	sp, #48	; 0x30
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	817b      	strh	r3, [r7, #10]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	813b      	strh	r3, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bd2:	f7fe fe91 	bl	80048f8 <HAL_GetTick>
 8005bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	f040 8208 	bne.w	8005ff6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	2319      	movs	r3, #25
 8005bec:	2201      	movs	r2, #1
 8005bee:	497b      	ldr	r1, [pc, #492]	; (8005ddc <HAL_I2C_Mem_Read+0x224>)
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f002 f813 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e1fb      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_I2C_Mem_Read+0x56>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e1f4      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d007      	beq.n	8005c34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	; 0x22
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a5b      	ldr	r2, [pc, #364]	; (8005de0 <HAL_I2C_Mem_Read+0x228>)
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c76:	88f8      	ldrh	r0, [r7, #6]
 8005c78:	893a      	ldrh	r2, [r7, #8]
 8005c7a:	8979      	ldrh	r1, [r7, #10]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	4603      	mov	r3, r0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f001 fe38 	bl	80078fc <I2C_RequestMemoryRead>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e1b0      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d113      	bne.n	8005cc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e184      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d11b      	bne.n	8005d06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e164      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d11b      	bne.n	8005d46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	e144      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d5c:	e138      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	f200 80f1 	bhi.w	8005f4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d123      	bne.n	8005db8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f002 f8db 	bl	8007f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e139      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db6:	e10b      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d14e      	bne.n	8005e5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4906      	ldr	r1, [pc, #24]	; (8005de4 <HAL_I2C_Mem_Read+0x22c>)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f001 ff26 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e10e      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
 8005dda:	bf00      	nop
 8005ddc:	00100002 	.word	0x00100002
 8005de0:	ffff0000 	.word	0xffff0000
 8005de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e5c:	e0b8      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2200      	movs	r2, #0
 8005e66:	4966      	ldr	r1, [pc, #408]	; (8006000 <HAL_I2C_Mem_Read+0x448>)
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f001 fed7 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0bf      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	494f      	ldr	r1, [pc, #316]	; (8006000 <HAL_I2C_Mem_Read+0x448>)
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f001 fea9 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e091      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f48:	e042      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f001 ffee 	bl	8007f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e04c      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d118      	bne.n	8005fd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f47f aec2 	bne.w	8005d5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
  }
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3728      	adds	r7, #40	; 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	00010004 	.word	0x00010004

08006004 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006024:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2b10      	cmp	r3, #16
 8006032:	d003      	beq.n	800603c <HAL_I2C_EV_IRQHandler+0x38>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	f040 80c1 	bne.w	80061be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <HAL_I2C_EV_IRQHandler+0x6e>
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800605c:	d003      	beq.n	8006066 <HAL_I2C_EV_IRQHandler+0x62>
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006064:	d101      	bne.n	800606a <HAL_I2C_EV_IRQHandler+0x66>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <HAL_I2C_EV_IRQHandler+0x68>
 800606a:	2300      	movs	r3, #0
 800606c:	2b01      	cmp	r3, #1
 800606e:	f000 8132 	beq.w	80062d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_I2C_EV_IRQHandler+0x92>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	0a5b      	lsrs	r3, r3, #9
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d006      	beq.n	8006096 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 ffd6 	bl	800803a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fd83 	bl	8006b9a <I2C_Master_SB>
 8006094:	e092      	b.n	80061bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	0a5b      	lsrs	r3, r3, #9
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fdf9 	bl	8006ca6 <I2C_Master_ADD10>
 80060b4:	e082      	b.n	80061bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	0a5b      	lsrs	r3, r3, #9
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fe13 	bl	8006cfa <I2C_Master_ADDR>
 80060d4:	e072      	b.n	80061bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	089b      	lsrs	r3, r3, #2
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03b      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f0:	f000 80f3 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	09db      	lsrs	r3, r3, #7
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00f      	beq.n	8006120 <HAL_I2C_EV_IRQHandler+0x11c>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	0a9b      	lsrs	r3, r3, #10
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_I2C_EV_IRQHandler+0x11c>
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	089b      	lsrs	r3, r3, #2
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f9f3 	bl	8006504 <I2C_MasterTransmit_TXE>
 800611e:	e04d      	b.n	80061bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80d6 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	0a5b      	lsrs	r3, r3, #9
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80cf 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b21      	cmp	r3, #33	; 0x21
 8006140:	d103      	bne.n	800614a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa7a 	bl	800663c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006148:	e0c7      	b.n	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	f040 80c4 	bne.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fae8 	bl	8006728 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006158:	e0bf      	b.n	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006168:	f000 80b7 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	099b      	lsrs	r3, r3, #6
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00f      	beq.n	8006198 <HAL_I2C_EV_IRQHandler+0x194>
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	0a9b      	lsrs	r3, r3, #10
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <HAL_I2C_EV_IRQHandler+0x194>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fb5d 	bl	8006850 <I2C_MasterReceive_RXNE>
 8006196:	e011      	b.n	80061bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	089b      	lsrs	r3, r3, #2
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 809a 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	0a5b      	lsrs	r3, r3, #9
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8093 	beq.w	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fc06 	bl	80069c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ba:	e08e      	b.n	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
 80061bc:	e08d      	b.n	80062da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	e007      	b.n	80061e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d012      	beq.n	8006212 <HAL_I2C_EV_IRQHandler+0x20e>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	0a5b      	lsrs	r3, r3, #9
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00c      	beq.n	8006212 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006208:	69b9      	ldr	r1, [r7, #24]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 ffc4 	bl	8007198 <I2C_Slave_ADDR>
 8006210:	e066      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	091b      	lsrs	r3, r3, #4
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_I2C_EV_IRQHandler+0x22e>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	0a5b      	lsrs	r3, r3, #9
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fffe 	bl	800722c <I2C_Slave_STOPF>
 8006230:	e056      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b21      	cmp	r3, #33	; 0x21
 8006236:	d002      	beq.n	800623e <HAL_I2C_EV_IRQHandler+0x23a>
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2b29      	cmp	r3, #41	; 0x29
 800623c:	d125      	bne.n	800628a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	09db      	lsrs	r3, r3, #7
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00f      	beq.n	800626a <HAL_I2C_EV_IRQHandler+0x266>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	0a9b      	lsrs	r3, r3, #10
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <HAL_I2C_EV_IRQHandler+0x266>
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 feda 	bl	800701c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006268:	e039      	b.n	80062de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d033      	beq.n	80062de <HAL_I2C_EV_IRQHandler+0x2da>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	0a5b      	lsrs	r3, r3, #9
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d02d      	beq.n	80062de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 ff07 	bl	8007096 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006288:	e029      	b.n	80062de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	099b      	lsrs	r3, r3, #6
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00f      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	0a9b      	lsrs	r3, r3, #10
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 ff12 	bl	80070d8 <I2C_SlaveReceive_RXNE>
 80062b4:	e014      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	089b      	lsrs	r3, r3, #2
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	0a5b      	lsrs	r3, r3, #9
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ff40 	bl	8007154 <I2C_SlaveReceive_BTF>
 80062d4:	e004      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b08a      	sub	sp, #40	; 0x28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006308:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <HAL_I2C_ER_IRQHandler+0x4e>
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006332:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	0a5b      	lsrs	r3, r3, #9
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <HAL_I2C_ER_IRQHandler+0x78>
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800635c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	0a9b      	lsrs	r3, r3, #10
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d03f      	beq.n	80063ea <HAL_I2C_ER_IRQHandler+0x104>
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d039      	beq.n	80063ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006376:	7efb      	ldrb	r3, [r7, #27]
 8006378:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006388:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006390:	7ebb      	ldrb	r3, [r7, #26]
 8006392:	2b20      	cmp	r3, #32
 8006394:	d112      	bne.n	80063bc <HAL_I2C_ER_IRQHandler+0xd6>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <HAL_I2C_ER_IRQHandler+0xd6>
 800639c:	7cfb      	ldrb	r3, [r7, #19]
 800639e:	2b21      	cmp	r3, #33	; 0x21
 80063a0:	d008      	beq.n	80063b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	2b29      	cmp	r3, #41	; 0x29
 80063a6:	d005      	beq.n	80063b4 <HAL_I2C_ER_IRQHandler+0xce>
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	2b28      	cmp	r3, #40	; 0x28
 80063ac:	d106      	bne.n	80063bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b21      	cmp	r3, #33	; 0x21
 80063b2:	d103      	bne.n	80063bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f869 	bl	800748c <I2C_Slave_AF>
 80063ba:	e016      	b.n	80063ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	f043 0304 	orr.w	r3, r3, #4
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063ce:	7efb      	ldrb	r3, [r7, #27]
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d002      	beq.n	80063da <HAL_I2C_ER_IRQHandler+0xf4>
 80063d4:	7efb      	ldrb	r3, [r7, #27]
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d107      	bne.n	80063ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	0adb      	lsrs	r3, r3, #11
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00e      	beq.n	8006414 <HAL_I2C_ER_IRQHandler+0x12e>
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	f043 0308 	orr.w	r3, r3, #8
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006412:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d008      	beq.n	800642c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f8a0 	bl	800756c <I2C_ITError>
  }
}
 800642c:	bf00      	nop
 800642e:	3728      	adds	r7, #40	; 0x28
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
 8006490:	4613      	mov	r3, r2
 8006492:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006512:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800651a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d150      	bne.n	80065cc <I2C_MasterTransmit_TXE+0xc8>
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b21      	cmp	r3, #33	; 0x21
 800652e:	d14d      	bne.n	80065cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b08      	cmp	r3, #8
 8006534:	d01d      	beq.n	8006572 <I2C_MasterTransmit_TXE+0x6e>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b20      	cmp	r3, #32
 800653a:	d01a      	beq.n	8006572 <I2C_MasterTransmit_TXE+0x6e>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006542:	d016      	beq.n	8006572 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006552:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2211      	movs	r2, #17
 8006558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff ff62 	bl	8006434 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006570:	e060      	b.n	8006634 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006580:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006590:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d107      	bne.n	80065bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff7d 	bl	80064b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ba:	e03b      	b.n	8006634 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff35 	bl	8006434 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ca:	e033      	b.n	8006634 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b21      	cmp	r3, #33	; 0x21
 80065d0:	d005      	beq.n	80065de <I2C_MasterTransmit_TXE+0xda>
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d12d      	bne.n	8006634 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	2b22      	cmp	r3, #34	; 0x22
 80065dc:	d12a      	bne.n	8006634 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d108      	bne.n	80065fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80065f8:	e01c      	b.n	8006634 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d103      	bne.n	800660e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f88e 	bl	8006728 <I2C_MemoryTransmit_TXE_BTF>
}
 800660c:	e012      	b.n	8006634 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006632:	e7ff      	b.n	8006634 <I2C_MasterTransmit_TXE+0x130>
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b21      	cmp	r3, #33	; 0x21
 8006654:	d164      	bne.n	8006720 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006684:	e04c      	b.n	8006720 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b08      	cmp	r3, #8
 800668a:	d01d      	beq.n	80066c8 <I2C_MasterTransmit_BTF+0x8c>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b20      	cmp	r3, #32
 8006690:	d01a      	beq.n	80066c8 <I2C_MasterTransmit_BTF+0x8c>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006698:	d016      	beq.n	80066c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2211      	movs	r2, #17
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff feb7 	bl	8006434 <HAL_I2C_MasterTxCpltCallback>
}
 80066c6:	e02b      	b.n	8006720 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d107      	bne.n	8006712 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff fed2 	bl	80064b4 <HAL_I2C_MemTxCpltCallback>
}
 8006710:	e006      	b.n	8006720 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fe8a 	bl	8006434 <HAL_I2C_MasterTxCpltCallback>
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006736:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	2b00      	cmp	r3, #0
 800673e:	d11d      	bne.n	800677c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10b      	bne.n	8006760 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674c:	b2da      	uxtb	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006758:	1c9a      	adds	r2, r3, #2
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800675e:	e073      	b.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006764:	b29b      	uxth	r3, r3
 8006766:	121b      	asrs	r3, r3, #8
 8006768:	b2da      	uxtb	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800677a:	e065      	b.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10b      	bne.n	800679c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006788:	b2da      	uxtb	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	651a      	str	r2, [r3, #80]	; 0x50
}
 800679a:	e055      	b.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d151      	bne.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b22      	cmp	r3, #34	; 0x22
 80067a8:	d10d      	bne.n	80067c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067c4:	e040      	b.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d015      	beq.n	80067fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b21      	cmp	r3, #33	; 0x21
 80067d4:	d112      	bne.n	80067fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067fa:	e025      	b.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d120      	bne.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b21      	cmp	r3, #33	; 0x21
 800680a:	d11d      	bne.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800681a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fe36 	bl	80064b4 <HAL_I2C_MemTxCpltCallback>
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b22      	cmp	r3, #34	; 0x22
 8006862:	f040 80ac 	bne.w	80069be <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d921      	bls.n	80068b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	f040 808c 	bne.w	80069be <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80068b6:	e082      	b.n	80069be <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d075      	beq.n	80069ac <I2C_MasterReceive_RXNE+0x15c>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d002      	beq.n	80068cc <I2C_MasterReceive_RXNE+0x7c>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d16f      	bne.n	80069ac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fafd 	bl	8007ecc <I2C_WaitOnSTOPRequestThroughIT>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d142      	bne.n	800695e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d10a      	bne.n	8006948 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fdc1 	bl	80064c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006946:	e03a      	b.n	80069be <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2212      	movs	r2, #18
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fd76 	bl	8006448 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800695c:	e02f      	b.n	80069be <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800696c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fd99 	bl	80064dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069aa:	e008      	b.n	80069be <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ba:	605a      	str	r2, [r3, #4]
}
 80069bc:	e7ff      	b.n	80069be <I2C_MasterReceive_RXNE+0x16e>
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d11b      	bne.n	8006a16 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006a14:	e0bd      	b.n	8006b92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d129      	bne.n	8006a74 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d00a      	beq.n	8006a4c <I2C_MasterReceive_BTF+0x86>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d007      	beq.n	8006a4c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a72:	e08e      	b.n	8006b92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d176      	bne.n	8006b6c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d002      	beq.n	8006a8a <I2C_MasterReceive_BTF+0xc4>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d108      	bne.n	8006a9c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e019      	b.n	8006ad0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d002      	beq.n	8006aa8 <I2C_MasterReceive_BTF+0xe2>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d108      	bne.n	8006aba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	e00a      	b.n	8006ad0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b10      	cmp	r3, #16
 8006abe:	d007      	beq.n	8006ad0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ace:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b2a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d10a      	bne.n	8006b56 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff fcba 	bl	80064c8 <HAL_I2C_MemRxCpltCallback>
}
 8006b54:	e01d      	b.n	8006b92 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2212      	movs	r2, #18
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fc6f 	bl	8006448 <HAL_I2C_MasterRxCpltCallback>
}
 8006b6a:	e012      	b.n	8006b92 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d117      	bne.n	8006bde <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006bc8:	e067      	b.n	8006c9a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f043 0301 	orr.w	r3, r3, #1
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	611a      	str	r2, [r3, #16]
}
 8006bdc:	e05d      	b.n	8006c9a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be6:	d133      	bne.n	8006c50 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b21      	cmp	r3, #33	; 0x21
 8006bf2:	d109      	bne.n	8006c08 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c04:	611a      	str	r2, [r3, #16]
 8006c06:	e008      	b.n	8006c1a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <I2C_Master_SB+0x92>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d108      	bne.n	8006c3e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d032      	beq.n	8006c9a <I2C_Master_SB+0x100>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02d      	beq.n	8006c9a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4c:	605a      	str	r2, [r3, #4]
}
 8006c4e:	e024      	b.n	8006c9a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10e      	bne.n	8006c76 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	11db      	asrs	r3, r3, #7
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 0306 	and.w	r3, r3, #6
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f063 030f 	orn	r3, r3, #15
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]
}
 8006c74:	e011      	b.n	8006c9a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d10d      	bne.n	8006c9a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	11db      	asrs	r3, r3, #7
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 0306 	and.w	r3, r3, #6
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f063 030e 	orn	r3, r3, #14
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	611a      	str	r2, [r3, #16]
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <I2C_Master_ADD10+0x26>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d108      	bne.n	8006cde <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <I2C_Master_ADD10+0x48>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cec:	605a      	str	r2, [r3, #4]
  }
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b091      	sub	sp, #68	; 0x44
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b22      	cmp	r3, #34	; 0x22
 8006d22:	f040 8169 	bne.w	8006ff8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <I2C_Master_ADDR+0x54>
 8006d2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d32:	2b40      	cmp	r3, #64	; 0x40
 8006d34:	d10b      	bne.n	8006d4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d36:	2300      	movs	r3, #0
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	e160      	b.n	8007010 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11d      	bne.n	8006d92 <I2C_Master_ADDR+0x98>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d5e:	d118      	bne.n	8006d92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d60:	2300      	movs	r3, #0
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	651a      	str	r2, [r3, #80]	; 0x50
 8006d90:	e13e      	b.n	8007010 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d113      	bne.n	8006dc4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e115      	b.n	8006ff0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	f040 808a 	bne.w	8006ee4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dd6:	d137      	bne.n	8006e48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df6:	d113      	bne.n	8006e20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	e0e7      	b.n	8006ff0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e20:	2300      	movs	r3, #0
 8006e22:	623b      	str	r3, [r7, #32]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	623b      	str	r3, [r7, #32]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e0d3      	b.n	8006ff0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d02e      	beq.n	8006eac <I2C_Master_ADDR+0x1b2>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d02b      	beq.n	8006eac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	2b12      	cmp	r3, #18
 8006e58:	d102      	bne.n	8006e60 <I2C_Master_ADDR+0x166>
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d125      	bne.n	8006eac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00e      	beq.n	8006e84 <I2C_Master_ADDR+0x18a>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d00b      	beq.n	8006e84 <I2C_Master_ADDR+0x18a>
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d008      	beq.n	8006e84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e007      	b.n	8006e94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	e0a1      	b.n	8006ff0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e085      	b.n	8006ff0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d14d      	bne.n	8006f8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d016      	beq.n	8006f22 <I2C_Master_ADDR+0x228>
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d013      	beq.n	8006f22 <I2C_Master_ADDR+0x228>
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d010      	beq.n	8006f22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e007      	b.n	8006f32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f40:	d117      	bne.n	8006f72 <I2C_Master_ADDR+0x278>
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f48:	d00b      	beq.n	8006f62 <I2C_Master_ADDR+0x268>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d008      	beq.n	8006f62 <I2C_Master_ADDR+0x268>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d005      	beq.n	8006f62 <I2C_Master_ADDR+0x268>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d002      	beq.n	8006f62 <I2C_Master_ADDR+0x268>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d107      	bne.n	8006f72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	e032      	b.n	8006ff0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	d117      	bne.n	8006fda <I2C_Master_ADDR+0x2e0>
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fb0:	d00b      	beq.n	8006fca <I2C_Master_ADDR+0x2d0>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d008      	beq.n	8006fca <I2C_Master_ADDR+0x2d0>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d005      	beq.n	8006fca <I2C_Master_ADDR+0x2d0>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d002      	beq.n	8006fca <I2C_Master_ADDR+0x2d0>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d107      	bne.n	8006fda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006ff6:	e00b      	b.n	8007010 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	e7ff      	b.n	8007010 <I2C_Master_ADDR+0x316>
 8007010:	bf00      	nop
 8007012:	3744      	adds	r7, #68	; 0x44
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d02b      	beq.n	800708e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d114      	bne.n	800708e <I2C_SlaveTransmit_TXE+0x72>
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b29      	cmp	r3, #41	; 0x29
 8007068:	d111      	bne.n	800708e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007078:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2221      	movs	r2, #33	; 0x21
 800707e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2228      	movs	r2, #40	; 0x28
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff f9e7 	bl	800645c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d011      	beq.n	80070cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d02c      	beq.n	800714c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d114      	bne.n	800714c <I2C_SlaveReceive_RXNE+0x74>
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	2b2a      	cmp	r3, #42	; 0x2a
 8007126:	d111      	bne.n	800714c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007136:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2222      	movs	r2, #34	; 0x22
 800713c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2228      	movs	r2, #40	; 0x28
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff f992 	bl	8006470 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071b2:	2b28      	cmp	r3, #40	; 0x28
 80071b4:	d127      	bne.n	8007206 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	089b      	lsrs	r3, r3, #2
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80071d2:	2301      	movs	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	09db      	lsrs	r3, r3, #7
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	81bb      	strh	r3, [r7, #12]
 80071e8:	e002      	b.n	80071f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80071f8:	89ba      	ldrh	r2, [r7, #12]
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff f940 	bl	8006484 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007204:	e00e      	b.n	8007224 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800724c:	2300      	movs	r3, #0
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007278:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007288:	d172      	bne.n	8007370 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b22      	cmp	r3, #34	; 0x22
 800728e:	d002      	beq.n	8007296 <I2C_Slave_STOPF+0x6a>
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b2a      	cmp	r3, #42	; 0x2a
 8007294:	d135      	bne.n	8007302 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0204 	orr.w	r2, r3, #4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fd ff76 	bl	80051c0 <HAL_DMA_GetState>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d049      	beq.n	800736e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	4a69      	ldr	r2, [pc, #420]	; (8007484 <I2C_Slave_STOPF+0x258>)
 80072e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd fdbe 	bl	8004e68 <HAL_DMA_Abort_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d03d      	beq.n	800736e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007300:	e035      	b.n	800736e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f043 0204 	orr.w	r2, r3, #4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007334:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	4618      	mov	r0, r3
 800733c:	f7fd ff40 	bl	80051c0 <HAL_DMA_GetState>
 8007340:	4603      	mov	r3, r0
 8007342:	2b01      	cmp	r3, #1
 8007344:	d014      	beq.n	8007370 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	4a4e      	ldr	r2, [pc, #312]	; (8007484 <I2C_Slave_STOPF+0x258>)
 800734c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd fd88 	bl	8004e68 <HAL_DMA_Abort_IT>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	e000      	b.n	8007370 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800736e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d03e      	beq.n	80073f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d112      	bne.n	80073ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d112      	bne.n	80073e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b29a      	uxth	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	f043 0204 	orr.w	r2, r3, #4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f8b3 	bl	800756c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007406:	e039      	b.n	800747c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b2a      	cmp	r3, #42	; 0x2a
 800740c:	d109      	bne.n	8007422 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2228      	movs	r2, #40	; 0x28
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff f827 	bl	8006470 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b28      	cmp	r3, #40	; 0x28
 800742c:	d111      	bne.n	8007452 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a15      	ldr	r2, [pc, #84]	; (8007488 <I2C_Slave_STOPF+0x25c>)
 8007432:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff f828 	bl	80064a0 <HAL_I2C_ListenCpltCallback>
}
 8007450:	e014      	b.n	800747c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	2b22      	cmp	r3, #34	; 0x22
 8007458:	d002      	beq.n	8007460 <I2C_Slave_STOPF+0x234>
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b22      	cmp	r3, #34	; 0x22
 800745e:	d10d      	bne.n	800747c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fe fffa 	bl	8006470 <HAL_I2C_SlaveRxCpltCallback>
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	08007acd 	.word	0x08007acd
 8007488:	ffff0000 	.word	0xffff0000

0800748c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d002      	beq.n	80074ae <I2C_Slave_AF+0x22>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d129      	bne.n	8007502 <I2C_Slave_AF+0x76>
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b28      	cmp	r3, #40	; 0x28
 80074b2:	d126      	bne.n	8007502 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a2c      	ldr	r2, [pc, #176]	; (8007568 <I2C_Slave_AF+0xdc>)
 80074b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fe ffd0 	bl	80064a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007500:	e02e      	b.n	8007560 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b21      	cmp	r3, #33	; 0x21
 8007506:	d126      	bne.n	8007556 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a17      	ldr	r2, [pc, #92]	; (8007568 <I2C_Slave_AF+0xdc>)
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2221      	movs	r2, #33	; 0x21
 8007512:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007532:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800753c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fe ff84 	bl	800645c <HAL_I2C_SlaveTxCpltCallback>
}
 8007554:	e004      	b.n	8007560 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800755e:	615a      	str	r2, [r3, #20]
}
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	ffff0000 	.word	0xffff0000

0800756c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007582:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b10      	cmp	r3, #16
 8007588:	d002      	beq.n	8007590 <I2C_ITError+0x24>
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d10a      	bne.n	80075a6 <I2C_ITError+0x3a>
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b22      	cmp	r3, #34	; 0x22
 8007594:	d107      	bne.n	80075a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075ac:	2b28      	cmp	r3, #40	; 0x28
 80075ae:	d107      	bne.n	80075c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2228      	movs	r2, #40	; 0x28
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075be:	e015      	b.n	80075ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ce:	d00a      	beq.n	80075e6 <I2C_ITError+0x7a>
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b60      	cmp	r3, #96	; 0x60
 80075d4:	d007      	beq.n	80075e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fa:	d162      	bne.n	80076c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800760a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d020      	beq.n	800765c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	4a6a      	ldr	r2, [pc, #424]	; (80077c8 <I2C_ITError+0x25c>)
 8007620:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007626:	4618      	mov	r0, r3
 8007628:	f7fd fc1e 	bl	8004e68 <HAL_DMA_Abort_IT>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8089 	beq.w	8007746 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007656:	4610      	mov	r0, r2
 8007658:	4798      	blx	r3
 800765a:	e074      	b.n	8007746 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	4a59      	ldr	r2, [pc, #356]	; (80077c8 <I2C_ITError+0x25c>)
 8007662:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	4618      	mov	r0, r3
 800766a:	f7fd fbfd 	bl	8004e68 <HAL_DMA_Abort_IT>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d068      	beq.n	8007746 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d10b      	bne.n	800769a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0201 	bic.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
 80076c0:	e041      	b.n	8007746 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b60      	cmp	r3, #96	; 0x60
 80076cc:	d125      	bne.n	800771a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d10b      	bne.n	8007702 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0201 	bic.w	r2, r2, #1
 8007710:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fe feec 	bl	80064f0 <HAL_I2C_AbortCpltCallback>
 8007718:	e015      	b.n	8007746 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	d10b      	bne.n	8007740 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fe fecb 	bl	80064dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10e      	bne.n	8007774 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007782:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	2b04      	cmp	r3, #4
 8007796:	d113      	bne.n	80077c0 <I2C_ITError+0x254>
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b28      	cmp	r3, #40	; 0x28
 800779c:	d110      	bne.n	80077c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <I2C_ITError+0x260>)
 80077a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fe fe70 	bl	80064a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	08007acd 	.word	0x08007acd
 80077cc:	ffff0000 	.word	0xffff0000

080077d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	461a      	mov	r2, r3
 80077de:	4603      	mov	r3, r0
 80077e0:	817b      	strh	r3, [r7, #10]
 80077e2:	460b      	mov	r3, r1
 80077e4:	813b      	strh	r3, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	2200      	movs	r2, #0
 8007802:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fa08 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00d      	beq.n	800782e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007820:	d103      	bne.n	800782a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e05f      	b.n	80078ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800782e:	897b      	ldrh	r3, [r7, #10]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800783c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	6a3a      	ldr	r2, [r7, #32]
 8007842:	492d      	ldr	r1, [pc, #180]	; (80078f8 <I2C_RequestMemoryWrite+0x128>)
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fa40 	bl	8007cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e04c      	b.n	80078ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	6a39      	ldr	r1, [r7, #32]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 faaa 	bl	8007dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	2b04      	cmp	r3, #4
 8007880:	d107      	bne.n	8007892 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007890:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e02b      	b.n	80078ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d105      	bne.n	80078a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800789c:	893b      	ldrh	r3, [r7, #8]
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	611a      	str	r2, [r3, #16]
 80078a6:	e021      	b.n	80078ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078a8:	893b      	ldrh	r3, [r7, #8]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	6a39      	ldr	r1, [r7, #32]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa84 	bl	8007dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d107      	bne.n	80078de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e005      	b.n	80078ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e2:	893b      	ldrh	r3, [r7, #8]
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	00010002 	.word	0x00010002

080078fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af02      	add	r7, sp, #8
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	461a      	mov	r2, r3
 800790a:	4603      	mov	r3, r0
 800790c:	817b      	strh	r3, [r7, #10]
 800790e:	460b      	mov	r3, r1
 8007910:	813b      	strh	r3, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007924:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	2200      	movs	r2, #0
 800793e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f96a 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00d      	beq.n	800796a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795c:	d103      	bne.n	8007966 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007964:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e0aa      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007978:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	6a3a      	ldr	r2, [r7, #32]
 800797e:	4952      	ldr	r1, [pc, #328]	; (8007ac8 <I2C_RequestMemoryRead+0x1cc>)
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f9a2 	bl	8007cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e097      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a8:	6a39      	ldr	r1, [r7, #32]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fa0c 	bl	8007dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d107      	bne.n	80079ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e076      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d105      	bne.n	80079e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079d8:	893b      	ldrh	r3, [r7, #8]
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	611a      	str	r2, [r3, #16]
 80079e2:	e021      	b.n	8007a28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079e4:	893b      	ldrh	r3, [r7, #8]
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f4:	6a39      	ldr	r1, [r7, #32]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f9e6 	bl	8007dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d107      	bne.n	8007a1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e050      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2a:	6a39      	ldr	r1, [r7, #32]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f9cb 	bl	8007dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00d      	beq.n	8007a54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d107      	bne.n	8007a50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e035      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f8d3 	bl	8007c1c <I2C_WaitOnFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8a:	d103      	bne.n	8007a94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e013      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a98:	897b      	ldrh	r3, [r7, #10]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	6a3a      	ldr	r2, [r7, #32]
 8007aac:	4906      	ldr	r1, [pc, #24]	; (8007ac8 <I2C_RequestMemoryRead+0x1cc>)
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f90b 	bl	8007cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	00010002 	.word	0x00010002

08007acc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ae6:	4b4b      	ldr	r3, [pc, #300]	; (8007c14 <I2C_DMAAbort+0x148>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	08db      	lsrs	r3, r3, #3
 8007aec:	4a4a      	ldr	r2, [pc, #296]	; (8007c18 <I2C_DMAAbort+0x14c>)
 8007aee:	fba2 2303 	umull	r2, r3, r2, r3
 8007af2:	0a1a      	lsrs	r2, r3, #8
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	00da      	lsls	r2, r3, #3
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f043 0220 	orr.w	r2, r3, #32
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007b12:	e00a      	b.n	8007b2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b28:	d0ea      	beq.n	8007b00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	2200      	movs	r2, #0
 8007b38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	2200      	movs	r2, #0
 8007b48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b60      	cmp	r3, #96	; 0x60
 8007b9a:	d10e      	bne.n	8007bba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bb2:	6978      	ldr	r0, [r7, #20]
 8007bb4:	f7fe fc9c 	bl	80064f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bb8:	e027      	b.n	8007c0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bba:	7cfb      	ldrb	r3, [r7, #19]
 8007bbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bc0:	2b28      	cmp	r3, #40	; 0x28
 8007bc2:	d117      	bne.n	8007bf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007be2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2228      	movs	r2, #40	; 0x28
 8007bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bf2:	e007      	b.n	8007c04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007c04:	6978      	ldr	r0, [r7, #20]
 8007c06:	f7fe fc69 	bl	80064dc <HAL_I2C_ErrorCallback>
}
 8007c0a:	bf00      	nop
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000088 	.word	0x20000088
 8007c18:	14f8b589 	.word	0x14f8b589

08007c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c2c:	e025      	b.n	8007c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d021      	beq.n	8007c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c36:	f7fc fe5f 	bl	80048f8 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d302      	bcc.n	8007c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d116      	bne.n	8007c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e023      	b.n	8007cc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10d      	bne.n	8007ca0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	43da      	mvns	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	e00c      	b.n	8007cba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	43da      	mvns	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4013      	ands	r3, r2
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bf0c      	ite	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	2300      	movne	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d0b6      	beq.n	8007c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cd8:	e051      	b.n	8007d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce8:	d123      	bne.n	8007d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	f043 0204 	orr.w	r2, r3, #4
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e046      	b.n	8007dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d021      	beq.n	8007d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3a:	f7fc fddd 	bl	80048f8 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d302      	bcc.n	8007d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d116      	bne.n	8007d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	f043 0220 	orr.w	r2, r3, #32
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e020      	b.n	8007dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d10c      	bne.n	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	43da      	mvns	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4013      	ands	r3, r2
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bf14      	ite	ne
 8007d9a:	2301      	movne	r3, #1
 8007d9c:	2300      	moveq	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	e00b      	b.n	8007dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	43da      	mvns	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4013      	ands	r3, r2
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf14      	ite	ne
 8007db4:	2301      	movne	r3, #1
 8007db6:	2300      	moveq	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d18d      	bne.n	8007cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dd4:	e02d      	b.n	8007e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f900 	bl	8007fdc <I2C_IsAcknowledgeFailed>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e02d      	b.n	8007e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d021      	beq.n	8007e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dee:	f7fc fd83 	bl	80048f8 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d302      	bcc.n	8007e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d116      	bne.n	8007e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f043 0220 	orr.w	r2, r3, #32
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e007      	b.n	8007e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3c:	2b80      	cmp	r3, #128	; 0x80
 8007e3e:	d1ca      	bne.n	8007dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e56:	e02d      	b.n	8007eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f8bf 	bl	8007fdc <I2C_IsAcknowledgeFailed>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e02d      	b.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d021      	beq.n	8007eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e70:	f7fc fd42 	bl	80048f8 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d116      	bne.n	8007eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f043 0220 	orr.w	r2, r3, #32
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e007      	b.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d1ca      	bne.n	8007e58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	4a13      	ldr	r2, [pc, #76]	; (8007f2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	0a1a      	lsrs	r2, r3, #8
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	f043 0220 	orr.w	r2, r3, #32
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e008      	b.n	8007f1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f18:	d0e9      	beq.n	8007eee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	20000088 	.word	0x20000088
 8007f2c:	14f8b589 	.word	0x14f8b589

08007f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f3c:	e042      	b.n	8007fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d119      	bne.n	8007f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0210 	mvn.w	r2, #16
 8007f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e029      	b.n	8007fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f80:	f7fc fcba 	bl	80048f8 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d116      	bne.n	8007fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	f043 0220 	orr.w	r2, r3, #32
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e007      	b.n	8007fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d1b5      	bne.n	8007f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff2:	d11b      	bne.n	800802c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	f043 0204 	orr.w	r2, r3, #4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800804a:	d103      	bne.n	8008054 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008052:	e007      	b.n	8008064 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800805c:	d102      	bne.n	8008064 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2208      	movs	r2, #8
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e267      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d075      	beq.n	800817a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800808e:	4b88      	ldr	r3, [pc, #544]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 030c 	and.w	r3, r3, #12
 8008096:	2b04      	cmp	r3, #4
 8008098:	d00c      	beq.n	80080b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800809a:	4b85      	ldr	r3, [pc, #532]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d112      	bne.n	80080cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080a6:	4b82      	ldr	r3, [pc, #520]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b2:	d10b      	bne.n	80080cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080b4:	4b7e      	ldr	r3, [pc, #504]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d05b      	beq.n	8008178 <HAL_RCC_OscConfig+0x108>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d157      	bne.n	8008178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e242      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d4:	d106      	bne.n	80080e4 <HAL_RCC_OscConfig+0x74>
 80080d6:	4b76      	ldr	r3, [pc, #472]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a75      	ldr	r2, [pc, #468]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	e01d      	b.n	8008120 <HAL_RCC_OscConfig+0xb0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080ec:	d10c      	bne.n	8008108 <HAL_RCC_OscConfig+0x98>
 80080ee:	4b70      	ldr	r3, [pc, #448]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a6f      	ldr	r2, [pc, #444]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	4b6d      	ldr	r3, [pc, #436]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a6c      	ldr	r2, [pc, #432]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	e00b      	b.n	8008120 <HAL_RCC_OscConfig+0xb0>
 8008108:	4b69      	ldr	r3, [pc, #420]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a68      	ldr	r2, [pc, #416]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800810e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	4b66      	ldr	r3, [pc, #408]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a65      	ldr	r2, [pc, #404]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800811a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d013      	beq.n	8008150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008128:	f7fc fbe6 	bl	80048f8 <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008130:	f7fc fbe2 	bl	80048f8 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b64      	cmp	r3, #100	; 0x64
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e207      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008142:	4b5b      	ldr	r3, [pc, #364]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0xc0>
 800814e:	e014      	b.n	800817a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008150:	f7fc fbd2 	bl	80048f8 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008158:	f7fc fbce 	bl	80048f8 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b64      	cmp	r3, #100	; 0x64
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e1f3      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816a:	4b51      	ldr	r3, [pc, #324]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0xe8>
 8008176:	e000      	b.n	800817a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d063      	beq.n	800824e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008186:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 030c 	and.w	r3, r3, #12
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00b      	beq.n	80081aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008192:	4b47      	ldr	r3, [pc, #284]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800819a:	2b08      	cmp	r3, #8
 800819c:	d11c      	bne.n	80081d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800819e:	4b44      	ldr	r3, [pc, #272]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d116      	bne.n	80081d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081aa:	4b41      	ldr	r3, [pc, #260]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_RCC_OscConfig+0x152>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e1c7      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c2:	4b3b      	ldr	r3, [pc, #236]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4937      	ldr	r1, [pc, #220]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081d6:	e03a      	b.n	800824e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d020      	beq.n	8008222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081e0:	4b34      	ldr	r3, [pc, #208]	; (80082b4 <HAL_RCC_OscConfig+0x244>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e6:	f7fc fb87 	bl	80048f8 <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ee:	f7fc fb83 	bl	80048f8 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e1a8      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008200:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0f0      	beq.n	80081ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820c:	4b28      	ldr	r3, [pc, #160]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4925      	ldr	r1, [pc, #148]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 800821c:	4313      	orrs	r3, r2
 800821e:	600b      	str	r3, [r1, #0]
 8008220:	e015      	b.n	800824e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008222:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <HAL_RCC_OscConfig+0x244>)
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008228:	f7fc fb66 	bl	80048f8 <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800822e:	e008      	b.n	8008242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008230:	f7fc fb62 	bl	80048f8 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e187      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008242:	4b1b      	ldr	r3, [pc, #108]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f0      	bne.n	8008230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d036      	beq.n	80082c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d016      	beq.n	8008290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <HAL_RCC_OscConfig+0x248>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008268:	f7fc fb46 	bl	80048f8 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008270:	f7fc fb42 	bl	80048f8 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e167      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008282:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <HAL_RCC_OscConfig+0x240>)
 8008284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0f0      	beq.n	8008270 <HAL_RCC_OscConfig+0x200>
 800828e:	e01b      	b.n	80082c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <HAL_RCC_OscConfig+0x248>)
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008296:	f7fc fb2f 	bl	80048f8 <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800829c:	e00e      	b.n	80082bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800829e:	f7fc fb2b 	bl	80048f8 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d907      	bls.n	80082bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e150      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
 80082b0:	40023800 	.word	0x40023800
 80082b4:	42470000 	.word	0x42470000
 80082b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082bc:	4b88      	ldr	r3, [pc, #544]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80082be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1ea      	bne.n	800829e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8097 	beq.w	8008404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082da:	4b81      	ldr	r3, [pc, #516]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10f      	bne.n	8008306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	4b7d      	ldr	r3, [pc, #500]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	4a7c      	ldr	r2, [pc, #496]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80082f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f4:	6413      	str	r3, [r2, #64]	; 0x40
 80082f6:	4b7a      	ldr	r3, [pc, #488]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fe:	60bb      	str	r3, [r7, #8]
 8008300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008306:	4b77      	ldr	r3, [pc, #476]	; (80084e4 <HAL_RCC_OscConfig+0x474>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830e:	2b00      	cmp	r3, #0
 8008310:	d118      	bne.n	8008344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008312:	4b74      	ldr	r3, [pc, #464]	; (80084e4 <HAL_RCC_OscConfig+0x474>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a73      	ldr	r2, [pc, #460]	; (80084e4 <HAL_RCC_OscConfig+0x474>)
 8008318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800831c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800831e:	f7fc faeb 	bl	80048f8 <HAL_GetTick>
 8008322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008326:	f7fc fae7 	bl	80048f8 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e10c      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008338:	4b6a      	ldr	r3, [pc, #424]	; (80084e4 <HAL_RCC_OscConfig+0x474>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0f0      	beq.n	8008326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d106      	bne.n	800835a <HAL_RCC_OscConfig+0x2ea>
 800834c:	4b64      	ldr	r3, [pc, #400]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 800834e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008350:	4a63      	ldr	r2, [pc, #396]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	6713      	str	r3, [r2, #112]	; 0x70
 8008358:	e01c      	b.n	8008394 <HAL_RCC_OscConfig+0x324>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b05      	cmp	r3, #5
 8008360:	d10c      	bne.n	800837c <HAL_RCC_OscConfig+0x30c>
 8008362:	4b5f      	ldr	r3, [pc, #380]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	4a5e      	ldr	r2, [pc, #376]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008368:	f043 0304 	orr.w	r3, r3, #4
 800836c:	6713      	str	r3, [r2, #112]	; 0x70
 800836e:	4b5c      	ldr	r3, [pc, #368]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008372:	4a5b      	ldr	r2, [pc, #364]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	6713      	str	r3, [r2, #112]	; 0x70
 800837a:	e00b      	b.n	8008394 <HAL_RCC_OscConfig+0x324>
 800837c:	4b58      	ldr	r3, [pc, #352]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	4a57      	ldr	r2, [pc, #348]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008382:	f023 0301 	bic.w	r3, r3, #1
 8008386:	6713      	str	r3, [r2, #112]	; 0x70
 8008388:	4b55      	ldr	r3, [pc, #340]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	4a54      	ldr	r2, [pc, #336]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 800838e:	f023 0304 	bic.w	r3, r3, #4
 8008392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d015      	beq.n	80083c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839c:	f7fc faac 	bl	80048f8 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a2:	e00a      	b.n	80083ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083a4:	f7fc faa8 	bl	80048f8 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e0cb      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ba:	4b49      	ldr	r3, [pc, #292]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0ee      	beq.n	80083a4 <HAL_RCC_OscConfig+0x334>
 80083c6:	e014      	b.n	80083f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c8:	f7fc fa96 	bl	80048f8 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083ce:	e00a      	b.n	80083e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083d0:	f7fc fa92 	bl	80048f8 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	f241 3288 	movw	r2, #5000	; 0x1388
 80083de:	4293      	cmp	r3, r2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e0b5      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e6:	4b3e      	ldr	r3, [pc, #248]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1ee      	bne.n	80083d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d105      	bne.n	8008404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083f8:	4b39      	ldr	r3, [pc, #228]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	4a38      	ldr	r2, [pc, #224]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80083fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80a1 	beq.w	8008550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800840e:	4b34      	ldr	r3, [pc, #208]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f003 030c 	and.w	r3, r3, #12
 8008416:	2b08      	cmp	r3, #8
 8008418:	d05c      	beq.n	80084d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d141      	bne.n	80084a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008422:	4b31      	ldr	r3, [pc, #196]	; (80084e8 <HAL_RCC_OscConfig+0x478>)
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008428:	f7fc fa66 	bl	80048f8 <HAL_GetTick>
 800842c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800842e:	e008      	b.n	8008442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008430:	f7fc fa62 	bl	80048f8 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e087      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008442:	4b27      	ldr	r3, [pc, #156]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f0      	bne.n	8008430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69da      	ldr	r2, [r3, #28]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	019b      	lsls	r3, r3, #6
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	085b      	lsrs	r3, r3, #1
 8008466:	3b01      	subs	r3, #1
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	061b      	lsls	r3, r3, #24
 8008472:	491b      	ldr	r1, [pc, #108]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 8008474:	4313      	orrs	r3, r2
 8008476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008478:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <HAL_RCC_OscConfig+0x478>)
 800847a:	2201      	movs	r2, #1
 800847c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800847e:	f7fc fa3b 	bl	80048f8 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008486:	f7fc fa37 	bl	80048f8 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e05c      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008498:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0f0      	beq.n	8008486 <HAL_RCC_OscConfig+0x416>
 80084a4:	e054      	b.n	8008550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <HAL_RCC_OscConfig+0x478>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ac:	f7fc fa24 	bl	80048f8 <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084b4:	f7fc fa20 	bl	80048f8 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e045      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084c6:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <HAL_RCC_OscConfig+0x470>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f0      	bne.n	80084b4 <HAL_RCC_OscConfig+0x444>
 80084d2:	e03d      	b.n	8008550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d107      	bne.n	80084ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e038      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
 80084e0:	40023800 	.word	0x40023800
 80084e4:	40007000 	.word	0x40007000
 80084e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <HAL_RCC_OscConfig+0x4ec>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d028      	beq.n	800854c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008504:	429a      	cmp	r2, r3
 8008506:	d121      	bne.n	800854c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008512:	429a      	cmp	r2, r3
 8008514:	d11a      	bne.n	800854c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800851c:	4013      	ands	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008524:	4293      	cmp	r3, r2
 8008526:	d111      	bne.n	800854c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	3b01      	subs	r3, #1
 8008536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008538:	429a      	cmp	r2, r3
 800853a:	d107      	bne.n	800854c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008548:	429a      	cmp	r2, r3
 800854a:	d001      	beq.n	8008550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40023800 	.word	0x40023800

08008560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e0cc      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008574:	4b68      	ldr	r3, [pc, #416]	; (8008718 <HAL_RCC_ClockConfig+0x1b8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	d90c      	bls.n	800859c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008582:	4b65      	ldr	r3, [pc, #404]	; (8008718 <HAL_RCC_ClockConfig+0x1b8>)
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800858a:	4b63      	ldr	r3, [pc, #396]	; (8008718 <HAL_RCC_ClockConfig+0x1b8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d001      	beq.n	800859c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0b8      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d020      	beq.n	80085ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085b4:	4b59      	ldr	r3, [pc, #356]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	4a58      	ldr	r2, [pc, #352]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085cc:	4b53      	ldr	r3, [pc, #332]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4a52      	ldr	r2, [pc, #328]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085d8:	4b50      	ldr	r3, [pc, #320]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	494d      	ldr	r1, [pc, #308]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d044      	beq.n	8008680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d107      	bne.n	800860e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085fe:	4b47      	ldr	r3, [pc, #284]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d119      	bne.n	800863e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e07f      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d003      	beq.n	800861e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800861a:	2b03      	cmp	r3, #3
 800861c:	d107      	bne.n	800862e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800861e:	4b3f      	ldr	r3, [pc, #252]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e06f      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800862e:	4b3b      	ldr	r3, [pc, #236]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e067      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800863e:	4b37      	ldr	r3, [pc, #220]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f023 0203 	bic.w	r2, r3, #3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4934      	ldr	r1, [pc, #208]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 800864c:	4313      	orrs	r3, r2
 800864e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008650:	f7fc f952 	bl	80048f8 <HAL_GetTick>
 8008654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008656:	e00a      	b.n	800866e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008658:	f7fc f94e 	bl	80048f8 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	f241 3288 	movw	r2, #5000	; 0x1388
 8008666:	4293      	cmp	r3, r2
 8008668:	d901      	bls.n	800866e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e04f      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866e:	4b2b      	ldr	r3, [pc, #172]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 020c 	and.w	r2, r3, #12
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	429a      	cmp	r2, r3
 800867e:	d1eb      	bne.n	8008658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008680:	4b25      	ldr	r3, [pc, #148]	; (8008718 <HAL_RCC_ClockConfig+0x1b8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d20c      	bcs.n	80086a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800868e:	4b22      	ldr	r3, [pc, #136]	; (8008718 <HAL_RCC_ClockConfig+0x1b8>)
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008696:	4b20      	ldr	r3, [pc, #128]	; (8008718 <HAL_RCC_ClockConfig+0x1b8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d001      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e032      	b.n	800870e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086b4:	4b19      	ldr	r3, [pc, #100]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	4916      	ldr	r1, [pc, #88]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0308 	and.w	r3, r3, #8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	490e      	ldr	r1, [pc, #56]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086e6:	f000 f821 	bl	800872c <HAL_RCC_GetSysClockFreq>
 80086ea:	4602      	mov	r2, r0
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <HAL_RCC_ClockConfig+0x1bc>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	091b      	lsrs	r3, r3, #4
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	490a      	ldr	r1, [pc, #40]	; (8008720 <HAL_RCC_ClockConfig+0x1c0>)
 80086f8:	5ccb      	ldrb	r3, [r1, r3]
 80086fa:	fa22 f303 	lsr.w	r3, r2, r3
 80086fe:	4a09      	ldr	r2, [pc, #36]	; (8008724 <HAL_RCC_ClockConfig+0x1c4>)
 8008700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <HAL_RCC_ClockConfig+0x1c8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7fc f8b2 	bl	8004870 <HAL_InitTick>

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40023c00 	.word	0x40023c00
 800871c:	40023800 	.word	0x40023800
 8008720:	0801595c 	.word	0x0801595c
 8008724:	20000088 	.word	0x20000088
 8008728:	200000ac 	.word	0x200000ac

0800872c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800872c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008730:	b094      	sub	sp, #80	; 0x50
 8008732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	647b      	str	r3, [r7, #68]	; 0x44
 8008738:	2300      	movs	r3, #0
 800873a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873c:	2300      	movs	r3, #0
 800873e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008744:	4b79      	ldr	r3, [pc, #484]	; (800892c <HAL_RCC_GetSysClockFreq+0x200>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 030c 	and.w	r3, r3, #12
 800874c:	2b08      	cmp	r3, #8
 800874e:	d00d      	beq.n	800876c <HAL_RCC_GetSysClockFreq+0x40>
 8008750:	2b08      	cmp	r3, #8
 8008752:	f200 80e1 	bhi.w	8008918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <HAL_RCC_GetSysClockFreq+0x34>
 800875a:	2b04      	cmp	r3, #4
 800875c:	d003      	beq.n	8008766 <HAL_RCC_GetSysClockFreq+0x3a>
 800875e:	e0db      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008760:	4b73      	ldr	r3, [pc, #460]	; (8008930 <HAL_RCC_GetSysClockFreq+0x204>)
 8008762:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008764:	e0db      	b.n	800891e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008766:	4b73      	ldr	r3, [pc, #460]	; (8008934 <HAL_RCC_GetSysClockFreq+0x208>)
 8008768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800876a:	e0d8      	b.n	800891e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800876c:	4b6f      	ldr	r3, [pc, #444]	; (800892c <HAL_RCC_GetSysClockFreq+0x200>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008774:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008776:	4b6d      	ldr	r3, [pc, #436]	; (800892c <HAL_RCC_GetSysClockFreq+0x200>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d063      	beq.n	800884a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008782:	4b6a      	ldr	r3, [pc, #424]	; (800892c <HAL_RCC_GetSysClockFreq+0x200>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	099b      	lsrs	r3, r3, #6
 8008788:	2200      	movs	r2, #0
 800878a:	63bb      	str	r3, [r7, #56]	; 0x38
 800878c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008794:	633b      	str	r3, [r7, #48]	; 0x30
 8008796:	2300      	movs	r3, #0
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
 800879a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800879e:	4622      	mov	r2, r4
 80087a0:	462b      	mov	r3, r5
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f04f 0100 	mov.w	r1, #0
 80087aa:	0159      	lsls	r1, r3, #5
 80087ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087b0:	0150      	lsls	r0, r2, #5
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4621      	mov	r1, r4
 80087b8:	1a51      	subs	r1, r2, r1
 80087ba:	6139      	str	r1, [r7, #16]
 80087bc:	4629      	mov	r1, r5
 80087be:	eb63 0301 	sbc.w	r3, r3, r1
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087d0:	4659      	mov	r1, fp
 80087d2:	018b      	lsls	r3, r1, #6
 80087d4:	4651      	mov	r1, sl
 80087d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087da:	4651      	mov	r1, sl
 80087dc:	018a      	lsls	r2, r1, #6
 80087de:	4651      	mov	r1, sl
 80087e0:	ebb2 0801 	subs.w	r8, r2, r1
 80087e4:	4659      	mov	r1, fp
 80087e6:	eb63 0901 	sbc.w	r9, r3, r1
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087fe:	4690      	mov	r8, r2
 8008800:	4699      	mov	r9, r3
 8008802:	4623      	mov	r3, r4
 8008804:	eb18 0303 	adds.w	r3, r8, r3
 8008808:	60bb      	str	r3, [r7, #8]
 800880a:	462b      	mov	r3, r5
 800880c:	eb49 0303 	adc.w	r3, r9, r3
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800881e:	4629      	mov	r1, r5
 8008820:	024b      	lsls	r3, r1, #9
 8008822:	4621      	mov	r1, r4
 8008824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008828:	4621      	mov	r1, r4
 800882a:	024a      	lsls	r2, r1, #9
 800882c:	4610      	mov	r0, r2
 800882e:	4619      	mov	r1, r3
 8008830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008832:	2200      	movs	r2, #0
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
 8008836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800883c:	f7f8 fa2c 	bl	8000c98 <__aeabi_uldivmod>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4613      	mov	r3, r2
 8008846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008848:	e058      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800884a:	4b38      	ldr	r3, [pc, #224]	; (800892c <HAL_RCC_GetSysClockFreq+0x200>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	099b      	lsrs	r3, r3, #6
 8008850:	2200      	movs	r2, #0
 8008852:	4618      	mov	r0, r3
 8008854:	4611      	mov	r1, r2
 8008856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800885a:	623b      	str	r3, [r7, #32]
 800885c:	2300      	movs	r3, #0
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
 8008860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008864:	4642      	mov	r2, r8
 8008866:	464b      	mov	r3, r9
 8008868:	f04f 0000 	mov.w	r0, #0
 800886c:	f04f 0100 	mov.w	r1, #0
 8008870:	0159      	lsls	r1, r3, #5
 8008872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008876:	0150      	lsls	r0, r2, #5
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4641      	mov	r1, r8
 800887e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008882:	4649      	mov	r1, r9
 8008884:	eb63 0b01 	sbc.w	fp, r3, r1
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	f04f 0300 	mov.w	r3, #0
 8008890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800889c:	ebb2 040a 	subs.w	r4, r2, sl
 80088a0:	eb63 050b 	sbc.w	r5, r3, fp
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	f04f 0300 	mov.w	r3, #0
 80088ac:	00eb      	lsls	r3, r5, #3
 80088ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088b2:	00e2      	lsls	r2, r4, #3
 80088b4:	4614      	mov	r4, r2
 80088b6:	461d      	mov	r5, r3
 80088b8:	4643      	mov	r3, r8
 80088ba:	18e3      	adds	r3, r4, r3
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	464b      	mov	r3, r9
 80088c0:	eb45 0303 	adc.w	r3, r5, r3
 80088c4:	607b      	str	r3, [r7, #4]
 80088c6:	f04f 0200 	mov.w	r2, #0
 80088ca:	f04f 0300 	mov.w	r3, #0
 80088ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088d2:	4629      	mov	r1, r5
 80088d4:	028b      	lsls	r3, r1, #10
 80088d6:	4621      	mov	r1, r4
 80088d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088dc:	4621      	mov	r1, r4
 80088de:	028a      	lsls	r2, r1, #10
 80088e0:	4610      	mov	r0, r2
 80088e2:	4619      	mov	r1, r3
 80088e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e6:	2200      	movs	r2, #0
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	61fa      	str	r2, [r7, #28]
 80088ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088f0:	f7f8 f9d2 	bl	8000c98 <__aeabi_uldivmod>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4613      	mov	r3, r2
 80088fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <HAL_RCC_GetSysClockFreq+0x200>)
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	0c1b      	lsrs	r3, r3, #16
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	3301      	adds	r3, #1
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800890c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800890e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008916:	e002      	b.n	800891e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <HAL_RCC_GetSysClockFreq+0x204>)
 800891a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800891c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800891e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008920:	4618      	mov	r0, r3
 8008922:	3750      	adds	r7, #80	; 0x50
 8008924:	46bd      	mov	sp, r7
 8008926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800892a:	bf00      	nop
 800892c:	40023800 	.word	0x40023800
 8008930:	00f42400 	.word	0x00f42400
 8008934:	007a1200 	.word	0x007a1200

08008938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800893c:	4b03      	ldr	r3, [pc, #12]	; (800894c <HAL_RCC_GetHCLKFreq+0x14>)
 800893e:	681b      	ldr	r3, [r3, #0]
}
 8008940:	4618      	mov	r0, r3
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000088 	.word	0x20000088

08008950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008954:	f7ff fff0 	bl	8008938 <HAL_RCC_GetHCLKFreq>
 8008958:	4602      	mov	r2, r0
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	0a9b      	lsrs	r3, r3, #10
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	4903      	ldr	r1, [pc, #12]	; (8008974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008966:	5ccb      	ldrb	r3, [r1, r3]
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd80      	pop	{r7, pc}
 8008970:	40023800 	.word	0x40023800
 8008974:	0801596c 	.word	0x0801596c

08008978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800897c:	f7ff ffdc 	bl	8008938 <HAL_RCC_GetHCLKFreq>
 8008980:	4602      	mov	r2, r0
 8008982:	4b05      	ldr	r3, [pc, #20]	; (8008998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	0b5b      	lsrs	r3, r3, #13
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	4903      	ldr	r1, [pc, #12]	; (800899c <HAL_RCC_GetPCLK2Freq+0x24>)
 800898e:	5ccb      	ldrb	r3, [r1, r3]
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40023800 	.word	0x40023800
 800899c:	0801596c 	.word	0x0801596c

080089a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e07b      	b.n	8008aaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c2:	d009      	beq.n	80089d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	61da      	str	r2, [r3, #28]
 80089ca:	e005      	b.n	80089d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fa fcbe 	bl	8003374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5c:	ea42 0103 	orr.w	r1, r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	f003 0104 	and.w	r1, r3, #4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	f003 0210 	and.w	r2, r3, #16
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69da      	ldr	r2, [r3, #28]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b08c      	sub	sp, #48	; 0x30
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
 8008abe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_SPI_TransmitReceive+0x26>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e18a      	b.n	8008dee <HAL_SPI_TransmitReceive+0x33c>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ae0:	f7fb ff0a 	bl	80048f8 <HAL_GetTick>
 8008ae4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008af6:	887b      	ldrh	r3, [r7, #2]
 8008af8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d00f      	beq.n	8008b22 <HAL_SPI_TransmitReceive+0x70>
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b08:	d107      	bne.n	8008b1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_SPI_TransmitReceive+0x68>
 8008b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d003      	beq.n	8008b22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b20:	e15b      	b.n	8008dda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x82>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x82>
 8008b2e:	887b      	ldrh	r3, [r7, #2]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d103      	bne.n	8008b3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b3a:	e14e      	b.n	8008dda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d003      	beq.n	8008b50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	887a      	ldrh	r2, [r7, #2]
 8008b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	887a      	ldrh	r2, [r7, #2]
 8008b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	887a      	ldrh	r2, [r7, #2]
 8008b72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	887a      	ldrh	r2, [r7, #2]
 8008b78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b40      	cmp	r3, #64	; 0x40
 8008b92:	d007      	beq.n	8008ba4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bac:	d178      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_SPI_TransmitReceive+0x10a>
 8008bb6:	8b7b      	ldrh	r3, [r7, #26]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d166      	bne.n	8008c8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008be0:	e053      	b.n	8008c8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d11b      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x176>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d016      	beq.n	8008c28 <HAL_SPI_TransmitReceive+0x176>
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d113      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	881a      	ldrh	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	1c9a      	adds	r2, r3, #2
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d119      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x1b8>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d014      	beq.n	8008c6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	b292      	uxth	r2, r2
 8008c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	1c9a      	adds	r2, r3, #2
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c66:	2301      	movs	r3, #1
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c6a:	f7fb fe45 	bl	80048f8 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d807      	bhi.n	8008c8a <HAL_SPI_TransmitReceive+0x1d8>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d003      	beq.n	8008c8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c88:	e0a7      	b.n	8008dda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1a6      	bne.n	8008be2 <HAL_SPI_TransmitReceive+0x130>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1a1      	bne.n	8008be2 <HAL_SPI_TransmitReceive+0x130>
 8008c9e:	e07c      	b.n	8008d9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <HAL_SPI_TransmitReceive+0x1fc>
 8008ca8:	8b7b      	ldrh	r3, [r7, #26]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d16b      	bne.n	8008d86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	7812      	ldrb	r2, [r2, #0]
 8008cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cd4:	e057      	b.n	8008d86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d11c      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x26c>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d017      	beq.n	8008d1e <HAL_SPI_TransmitReceive+0x26c>
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d114      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	7812      	ldrb	r2, [r2, #0]
 8008d00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d119      	bne.n	8008d60 <HAL_SPI_TransmitReceive+0x2ae>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d014      	beq.n	8008d60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d60:	f7fb fdca 	bl	80048f8 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d803      	bhi.n	8008d78 <HAL_SPI_TransmitReceive+0x2c6>
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d102      	bne.n	8008d7e <HAL_SPI_TransmitReceive+0x2cc>
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d84:	e029      	b.n	8008dda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1a2      	bne.n	8008cd6 <HAL_SPI_TransmitReceive+0x224>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d19d      	bne.n	8008cd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f8b2 	bl	8008f08 <SPI_EndRxTxTransaction>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008db6:	e010      	b.n	8008dda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	e000      	b.n	8008dda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008dd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3730      	adds	r7, #48	; 0x30
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	4613      	mov	r3, r2
 8008e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e08:	f7fb fd76 	bl	80048f8 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	1a9b      	subs	r3, r3, r2
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4413      	add	r3, r2
 8008e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e18:	f7fb fd6e 	bl	80048f8 <HAL_GetTick>
 8008e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e1e:	4b39      	ldr	r3, [pc, #228]	; (8008f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	015b      	lsls	r3, r3, #5
 8008e24:	0d1b      	lsrs	r3, r3, #20
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	fb02 f303 	mul.w	r3, r2, r3
 8008e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e2e:	e054      	b.n	8008eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e36:	d050      	beq.n	8008eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e38:	f7fb fd5e 	bl	80048f8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d902      	bls.n	8008e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d13d      	bne.n	8008eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e66:	d111      	bne.n	8008e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e70:	d004      	beq.n	8008e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e7a:	d107      	bne.n	8008e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e94:	d10f      	bne.n	8008eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e017      	b.n	8008efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	bf0c      	ite	eq
 8008eea:	2301      	moveq	r3, #1
 8008eec:	2300      	movne	r3, #0
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d19b      	bne.n	8008e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000088 	.word	0x20000088

08008f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f14:	4b1b      	ldr	r3, [pc, #108]	; (8008f84 <SPI_EndRxTxTransaction+0x7c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <SPI_EndRxTxTransaction+0x80>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	0d5b      	lsrs	r3, r3, #21
 8008f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f24:	fb02 f303 	mul.w	r3, r2, r3
 8008f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f32:	d112      	bne.n	8008f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2180      	movs	r1, #128	; 0x80
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff ff5a 	bl	8008df8 <SPI_WaitFlagStateUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d016      	beq.n	8008f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4e:	f043 0220 	orr.w	r2, r3, #32
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e00f      	b.n	8008f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f70:	2b80      	cmp	r3, #128	; 0x80
 8008f72:	d0f2      	beq.n	8008f5a <SPI_EndRxTxTransaction+0x52>
 8008f74:	e000      	b.n	8008f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8008f76:	bf00      	nop
  }

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000088 	.word	0x20000088
 8008f88:	165e9f81 	.word	0x165e9f81

08008f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e041      	b.n	8009022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7fa fa6e 	bl	8003494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f000 fb24 	bl	8009618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b01      	cmp	r3, #1
 800903e:	d001      	beq.n	8009044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e044      	b.n	80090ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1e      	ldr	r2, [pc, #120]	; (80090dc <HAL_TIM_Base_Start_IT+0xb0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d018      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x6c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906e:	d013      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x6c>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1a      	ldr	r2, [pc, #104]	; (80090e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d00e      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x6c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a19      	ldr	r2, [pc, #100]	; (80090e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d009      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x6c>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d004      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x6c>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a16      	ldr	r2, [pc, #88]	; (80090ec <HAL_TIM_Base_Start_IT+0xc0>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d111      	bne.n	80090bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b06      	cmp	r3, #6
 80090a8:	d010      	beq.n	80090cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ba:	e007      	b.n	80090cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0201 	orr.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40000400 	.word	0x40000400
 80090e4:	40000800 	.word	0x40000800
 80090e8:	40000c00 	.word	0x40000c00
 80090ec:	40014000 	.word	0x40014000

080090f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6a1a      	ldr	r2, [r3, #32]
 800910e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009112:	4013      	ands	r3, r2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10f      	bne.n	8009138 <HAL_TIM_Base_Stop_IT+0x48>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6a1a      	ldr	r2, [r3, #32]
 800911e:	f240 4344 	movw	r3, #1092	; 0x444
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d107      	bne.n	8009138 <HAL_TIM_Base_Stop_IT+0x48>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0201 	bic.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b086      	sub	sp, #24
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e097      	b.n	8009292 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fa f944 	bl	8003404 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6812      	ldr	r2, [r2, #0]
 800918e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009192:	f023 0307 	bic.w	r3, r3, #7
 8009196:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f000 fa38 	bl	8009618 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	4313      	orrs	r3, r2
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80091ee:	f023 030c 	bic.w	r3, r3, #12
 80091f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	4313      	orrs	r3, r2
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	011a      	lsls	r2, r3, #4
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	031b      	lsls	r3, r3, #12
 800921e:	4313      	orrs	r3, r2
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800922c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009234:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	4313      	orrs	r3, r2
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092ba:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092c2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d110      	bne.n	80092ec <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d102      	bne.n	80092d6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092d0:	7b7b      	ldrb	r3, [r7, #13]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d001      	beq.n	80092da <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e069      	b.n	80093ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2202      	movs	r2, #2
 80092de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092ea:	e031      	b.n	8009350 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d110      	bne.n	8009314 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d102      	bne.n	80092fe <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092f8:	7b3b      	ldrb	r3, [r7, #12]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d001      	beq.n	8009302 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e055      	b.n	80093ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009312:	e01d      	b.n	8009350 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d108      	bne.n	800932c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d105      	bne.n	800932c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009320:	7b7b      	ldrb	r3, [r7, #13]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d102      	bne.n	800932c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009326:	7b3b      	ldrb	r3, [r7, #12]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d001      	beq.n	8009330 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e03e      	b.n	80093ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_Encoder_Start+0xc4>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d008      	beq.n	800936e <HAL_TIM_Encoder_Start+0xd4>
 800935c:	e00f      	b.n	800937e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2201      	movs	r2, #1
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f9d6 	bl	8009718 <TIM_CCxChannelCmd>
      break;
 800936c:	e016      	b.n	800939c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2201      	movs	r2, #1
 8009374:	2104      	movs	r1, #4
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f9ce 	bl	8009718 <TIM_CCxChannelCmd>
      break;
 800937c:	e00e      	b.n	800939c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2201      	movs	r2, #1
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f000 f9c6 	bl	8009718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2201      	movs	r2, #1
 8009392:	2104      	movs	r1, #4
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f9bf 	bl	8009718 <TIM_CCxChannelCmd>
      break;
 800939a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0201 	orr.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d122      	bne.n	8009412 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d11b      	bne.n	8009412 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f06f 0202 	mvn.w	r2, #2
 80093e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8ee 	bl	80095da <HAL_TIM_IC_CaptureCallback>
 80093fe:	e005      	b.n	800940c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f8e0 	bl	80095c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8f1 	bl	80095ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b04      	cmp	r3, #4
 800941e:	d122      	bne.n	8009466 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b04      	cmp	r3, #4
 800942c:	d11b      	bne.n	8009466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f06f 0204 	mvn.w	r2, #4
 8009436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f8c4 	bl	80095da <HAL_TIM_IC_CaptureCallback>
 8009452:	e005      	b.n	8009460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f8b6 	bl	80095c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f8c7 	bl	80095ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b08      	cmp	r3, #8
 8009472:	d122      	bne.n	80094ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f003 0308 	and.w	r3, r3, #8
 800947e:	2b08      	cmp	r3, #8
 8009480:	d11b      	bne.n	80094ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f06f 0208 	mvn.w	r2, #8
 800948a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2204      	movs	r2, #4
 8009490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f89a 	bl	80095da <HAL_TIM_IC_CaptureCallback>
 80094a6:	e005      	b.n	80094b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f88c 	bl	80095c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f89d 	bl	80095ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b10      	cmp	r3, #16
 80094c6:	d122      	bne.n	800950e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0310 	and.w	r3, r3, #16
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d11b      	bne.n	800950e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f06f 0210 	mvn.w	r2, #16
 80094de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2208      	movs	r2, #8
 80094e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d003      	beq.n	80094fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f870 	bl	80095da <HAL_TIM_IC_CaptureCallback>
 80094fa:	e005      	b.n	8009508 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f862 	bl	80095c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f873 	bl	80095ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b01      	cmp	r3, #1
 800951a:	d10e      	bne.n	800953a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b01      	cmp	r3, #1
 8009528:	d107      	bne.n	800953a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f06f 0201 	mvn.w	r2, #1
 8009532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7f9 fe6b 	bl	8003210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009544:	2b80      	cmp	r3, #128	; 0x80
 8009546:	d10e      	bne.n	8009566 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b80      	cmp	r3, #128	; 0x80
 8009554:	d107      	bne.n	8009566 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800955e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f977 	bl	8009854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d10e      	bne.n	8009592 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d107      	bne.n	8009592 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800958a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f838 	bl	8009602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b20      	cmp	r3, #32
 800959e:	d10e      	bne.n	80095be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d107      	bne.n	80095be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f06f 0220 	mvn.w	r2, #32
 80095b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f941 	bl	8009840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095e2:	bf00      	nop
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800960a:	bf00      	nop
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
	...

08009618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a34      	ldr	r2, [pc, #208]	; (80096fc <TIM_Base_SetConfig+0xe4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00f      	beq.n	8009650 <TIM_Base_SetConfig+0x38>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009636:	d00b      	beq.n	8009650 <TIM_Base_SetConfig+0x38>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a31      	ldr	r2, [pc, #196]	; (8009700 <TIM_Base_SetConfig+0xe8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d007      	beq.n	8009650 <TIM_Base_SetConfig+0x38>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a30      	ldr	r2, [pc, #192]	; (8009704 <TIM_Base_SetConfig+0xec>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_Base_SetConfig+0x38>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a2f      	ldr	r2, [pc, #188]	; (8009708 <TIM_Base_SetConfig+0xf0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d108      	bne.n	8009662 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a25      	ldr	r2, [pc, #148]	; (80096fc <TIM_Base_SetConfig+0xe4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d01b      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009670:	d017      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a22      	ldr	r2, [pc, #136]	; (8009700 <TIM_Base_SetConfig+0xe8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d013      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a21      	ldr	r2, [pc, #132]	; (8009704 <TIM_Base_SetConfig+0xec>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d00f      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a20      	ldr	r2, [pc, #128]	; (8009708 <TIM_Base_SetConfig+0xf0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00b      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1f      	ldr	r2, [pc, #124]	; (800970c <TIM_Base_SetConfig+0xf4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d007      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a1e      	ldr	r2, [pc, #120]	; (8009710 <TIM_Base_SetConfig+0xf8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d003      	beq.n	80096a2 <TIM_Base_SetConfig+0x8a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1d      	ldr	r2, [pc, #116]	; (8009714 <TIM_Base_SetConfig+0xfc>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d108      	bne.n	80096b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a08      	ldr	r2, [pc, #32]	; (80096fc <TIM_Base_SetConfig+0xe4>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d103      	bne.n	80096e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	615a      	str	r2, [r3, #20]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40010000 	.word	0x40010000
 8009700:	40000400 	.word	0x40000400
 8009704:	40000800 	.word	0x40000800
 8009708:	40000c00 	.word	0x40000c00
 800970c:	40014000 	.word	0x40014000
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800

08009718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 031f 	and.w	r3, r3, #31
 800972a:	2201      	movs	r2, #1
 800972c:	fa02 f303 	lsl.w	r3, r2, r3
 8009730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	43db      	mvns	r3, r3
 800973a:	401a      	ands	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a1a      	ldr	r2, [r3, #32]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 031f 	and.w	r3, r3, #31
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	fa01 f303 	lsl.w	r3, r1, r3
 8009750:	431a      	orrs	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	621a      	str	r2, [r3, #32]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
	...

08009764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009778:	2302      	movs	r3, #2
 800977a:	e050      	b.n	800981e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d018      	beq.n	80097f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c8:	d013      	beq.n	80097f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a18      	ldr	r2, [pc, #96]	; (8009830 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d00e      	beq.n	80097f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a16      	ldr	r2, [pc, #88]	; (8009834 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d009      	beq.n	80097f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a15      	ldr	r2, [pc, #84]	; (8009838 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d004      	beq.n	80097f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a13      	ldr	r2, [pc, #76]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d10c      	bne.n	800980c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	4313      	orrs	r3, r2
 8009802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	40010000 	.word	0x40010000
 8009830:	40000400 	.word	0x40000400
 8009834:	40000800 	.word	0x40000800
 8009838:	40000c00 	.word	0x40000c00
 800983c:	40014000 	.word	0x40014000

08009840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e03f      	b.n	80098fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f9 fe28 	bl	80034e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2224      	movs	r2, #36	; 0x24
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 f80b 	bl	800a8c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695a      	ldr	r2, [r3, #20]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68da      	ldr	r2, [r3, #12]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b08a      	sub	sp, #40	; 0x28
 8009906:	af02      	add	r7, sp, #8
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	4613      	mov	r3, r2
 8009910:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b20      	cmp	r3, #32
 8009920:	d17c      	bne.n	8009a1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <HAL_UART_Transmit+0x2c>
 8009928:	88fb      	ldrh	r3, [r7, #6]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e075      	b.n	8009a1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_UART_Transmit+0x3e>
 800993c:	2302      	movs	r3, #2
 800993e:	e06e      	b.n	8009a1e <HAL_UART_Transmit+0x11c>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2221      	movs	r2, #33	; 0x21
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009956:	f7fa ffcf 	bl	80048f8 <HAL_GetTick>
 800995a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	88fa      	ldrh	r2, [r7, #6]
 8009966:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009970:	d108      	bne.n	8009984 <HAL_UART_Transmit+0x82>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d104      	bne.n	8009984 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	e003      	b.n	800998c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009994:	e02a      	b.n	80099ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2200      	movs	r2, #0
 800999e:	2180      	movs	r1, #128	; 0x80
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fcc3 	bl	800a32c <UART_WaitOnFlagUntilTimeout>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e036      	b.n	8009a1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	3302      	adds	r3, #2
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	e007      	b.n	80099de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	3301      	adds	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1cf      	bne.n	8009996 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2200      	movs	r2, #0
 80099fe:	2140      	movs	r1, #64	; 0x40
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 fc93 	bl	800a32c <UART_WaitOnFlagUntilTimeout>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e006      	b.n	8009a1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e000      	b.n	8009a1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009a1c:	2302      	movs	r3, #2
  }
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b08a      	sub	sp, #40	; 0x28
 8009a2a:	af02      	add	r7, sp, #8
 8009a2c:	60f8      	str	r0, [r7, #12]
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	603b      	str	r3, [r7, #0]
 8009a32:	4613      	mov	r3, r2
 8009a34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	f040 808c 	bne.w	8009b60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <HAL_UART_Receive+0x2e>
 8009a4e:	88fb      	ldrh	r3, [r7, #6]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e084      	b.n	8009b62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d101      	bne.n	8009a66 <HAL_UART_Receive+0x40>
 8009a62:	2302      	movs	r3, #2
 8009a64:	e07d      	b.n	8009b62 <HAL_UART_Receive+0x13c>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2222      	movs	r2, #34	; 0x22
 8009a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a82:	f7fa ff39 	bl	80048f8 <HAL_GetTick>
 8009a86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	88fa      	ldrh	r2, [r7, #6]
 8009a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	88fa      	ldrh	r2, [r7, #6]
 8009a92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a9c:	d108      	bne.n	8009ab0 <HAL_UART_Receive+0x8a>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d104      	bne.n	8009ab0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	e003      	b.n	8009ab8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009ac0:	e043      	b.n	8009b4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2120      	movs	r1, #32
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 fc2d 	bl	800a32c <UART_WaitOnFlagUntilTimeout>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e042      	b.n	8009b62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10c      	bne.n	8009afc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	3302      	adds	r3, #2
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e01f      	b.n	8009b3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b04:	d007      	beq.n	8009b16 <HAL_UART_Receive+0xf0>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <HAL_UART_Receive+0xfe>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	e008      	b.n	8009b36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1b6      	bne.n	8009ac2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e000      	b.n	8009b62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009b60:	2302      	movs	r3, #2
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	4613      	mov	r3, r2
 8009b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	d11d      	bne.n	8009bc0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <HAL_UART_Receive_DMA+0x26>
 8009b8a:	88fb      	ldrh	r3, [r7, #6]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e016      	b.n	8009bc2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_UART_Receive_DMA+0x38>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e00f      	b.n	8009bc2 <HAL_UART_Receive_DMA+0x58>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 fc26 	bl	800a408 <UART_Start_Receive_DMA>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	e000      	b.n	8009bc2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009bc0:	2302      	movs	r3, #2
  }
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b0ba      	sub	sp, #232	; 0xe8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c02:	f003 030f 	and.w	r3, r3, #15
 8009c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10f      	bne.n	8009c32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d009      	beq.n	8009c32 <HAL_UART_IRQHandler+0x66>
 8009c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fd91 	bl	800a752 <UART_Receive_IT>
      return;
 8009c30:	e256      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 80de 	beq.w	8009df8 <HAL_UART_IRQHandler+0x22c>
 8009c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 80d1 	beq.w	8009df8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00b      	beq.n	8009c7a <HAL_UART_IRQHandler+0xae>
 8009c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	f043 0201 	orr.w	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <HAL_UART_IRQHandler+0xd2>
 8009c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	f043 0202 	orr.w	r2, r3, #2
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00b      	beq.n	8009cc2 <HAL_UART_IRQHandler+0xf6>
 8009caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	f043 0204 	orr.w	r2, r3, #4
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d011      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x126>
 8009cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f043 0208 	orr.w	r2, r3, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 81ed 	beq.w	800a0d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d008      	beq.n	8009d1a <HAL_UART_IRQHandler+0x14e>
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fd1c 	bl	800a752 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	bf0c      	ite	eq
 8009d28:	2301      	moveq	r3, #1
 8009d2a:	2300      	movne	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <HAL_UART_IRQHandler+0x17a>
 8009d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d04f      	beq.n	8009de6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fc24 	bl	800a594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d56:	2b40      	cmp	r3, #64	; 0x40
 8009d58:	d141      	bne.n	8009dde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3314      	adds	r3, #20
 8009d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d68:	e853 3f00 	ldrex	r3, [r3]
 8009d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3314      	adds	r3, #20
 8009d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1d9      	bne.n	8009d5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d013      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	4a7d      	ldr	r2, [pc, #500]	; (8009fa8 <HAL_UART_IRQHandler+0x3dc>)
 8009db4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fb f854 	bl	8004e68 <HAL_DMA_Abort_IT>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d016      	beq.n	8009df4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	e00e      	b.n	8009df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f99a 	bl	800a110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ddc:	e00a      	b.n	8009df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f996 	bl	800a110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de4:	e006      	b.n	8009df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f992 	bl	800a110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009df2:	e170      	b.n	800a0d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df4:	bf00      	nop
    return;
 8009df6:	e16e      	b.n	800a0d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	f040 814a 	bne.w	800a096 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e06:	f003 0310 	and.w	r3, r3, #16
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 8143 	beq.w	800a096 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 813c 	beq.w	800a096 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60bb      	str	r3, [r7, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60bb      	str	r3, [r7, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3e:	2b40      	cmp	r3, #64	; 0x40
 8009e40:	f040 80b4 	bne.w	8009fac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8140 	beq.w	800a0da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e62:	429a      	cmp	r2, r3
 8009e64:	f080 8139 	bcs.w	800a0da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e7a:	f000 8088 	beq.w	8009f8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	330c      	adds	r3, #12
 8009e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	330c      	adds	r3, #12
 8009ea6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009eaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1d9      	bne.n	8009e7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3314      	adds	r3, #20
 8009ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ed4:	e853 3f00 	ldrex	r3, [r3]
 8009ed8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3314      	adds	r3, #20
 8009eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009eee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e1      	bne.n	8009eca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3314      	adds	r3, #20
 8009f0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3314      	adds	r3, #20
 8009f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e3      	bne.n	8009f06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2220      	movs	r2, #32
 8009f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	330c      	adds	r3, #12
 8009f52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f56:	e853 3f00 	ldrex	r3, [r3]
 8009f5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f5e:	f023 0310 	bic.w	r3, r3, #16
 8009f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	330c      	adds	r3, #12
 8009f6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f70:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f78:	e841 2300 	strex	r3, r2, [r1]
 8009f7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e3      	bne.n	8009f4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fa fefd 	bl	8004d88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f8c0 	bl	800a124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fa4:	e099      	b.n	800a0da <HAL_UART_IRQHandler+0x50e>
 8009fa6:	bf00      	nop
 8009fa8:	0800a65b 	.word	0x0800a65b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 808b 	beq.w	800a0de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8086 	beq.w	800a0de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	330c      	adds	r3, #12
 8009ff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ff6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e3      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3314      	adds	r3, #20
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	623b      	str	r3, [r7, #32]
   return(result);
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3314      	adds	r3, #20
 800a02a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a02e:	633a      	str	r2, [r7, #48]	; 0x30
 800a030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e3      	bne.n	800a00a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2220      	movs	r2, #32
 800a046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	330c      	adds	r3, #12
 800a070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a074:	61fa      	str	r2, [r7, #28]
 800a076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	69b9      	ldr	r1, [r7, #24]
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	617b      	str	r3, [r7, #20]
   return(result);
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e3      	bne.n	800a050 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f848 	bl	800a124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a094:	e023      	b.n	800a0de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x4ea>
 800a0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fae7 	bl	800a682 <UART_Transmit_IT>
    return;
 800a0b4:	e014      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00e      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x514>
 800a0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d008      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb27 	bl	800a722 <UART_EndTransmit_IT>
    return;
 800a0d4:	e004      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
    return;
 800a0d6:	bf00      	nop
 800a0d8:	e002      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0da:	bf00      	nop
 800a0dc:	e000      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0de:	bf00      	nop
  }
}
 800a0e0:	37e8      	adds	r7, #232	; 0xe8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop

0800a0e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b09c      	sub	sp, #112	; 0x70
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a154:	2b00      	cmp	r3, #0
 800a156:	d172      	bne.n	800a23e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15a:	2200      	movs	r2, #0
 800a15c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	330c      	adds	r3, #12
 800a164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a174:	66bb      	str	r3, [r7, #104]	; 0x68
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	330c      	adds	r3, #12
 800a17c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a17e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a180:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3314      	adds	r3, #20
 800a198:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	667b      	str	r3, [r7, #100]	; 0x64
 800a1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3314      	adds	r3, #20
 800a1b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1b2:	647a      	str	r2, [r7, #68]	; 0x44
 800a1b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e5      	bne.n	800a192 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3314      	adds	r3, #20
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1dc:	663b      	str	r3, [r7, #96]	; 0x60
 800a1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3314      	adds	r3, #20
 800a1e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1e6:	633a      	str	r2, [r7, #48]	; 0x30
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e5      	bne.n	800a1c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a206:	2b01      	cmp	r3, #1
 800a208:	d119      	bne.n	800a23e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a20a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	330c      	adds	r3, #12
 800a210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	60fb      	str	r3, [r7, #12]
   return(result);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f023 0310 	bic.w	r3, r3, #16
 800a220:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	330c      	adds	r3, #12
 800a228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a22a:	61fa      	str	r2, [r7, #28]
 800a22c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	69b9      	ldr	r1, [r7, #24]
 800a230:	69fa      	ldr	r2, [r7, #28]
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	617b      	str	r3, [r7, #20]
   return(result);
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e5      	bne.n	800a20a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	2b01      	cmp	r3, #1
 800a244:	d106      	bne.n	800a254 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a24a:	4619      	mov	r1, r3
 800a24c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a24e:	f7ff ff69 	bl	800a124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a252:	e002      	b.n	800a25a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a254:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a256:	f7f8 fff7 	bl	8003248 <HAL_UART_RxCpltCallback>
}
 800a25a:	bf00      	nop
 800a25c:	3770      	adds	r7, #112	; 0x70
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a274:	2b01      	cmp	r3, #1
 800a276:	d108      	bne.n	800a28a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a27c:	085b      	lsrs	r3, r3, #1
 800a27e:	b29b      	uxth	r3, r3
 800a280:	4619      	mov	r1, r3
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff ff4e 	bl	800a124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a288:	e002      	b.n	800a290 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff ff36 	bl	800a0fc <HAL_UART_RxHalfCpltCallback>
}
 800a290:	bf00      	nop
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b4:	2b80      	cmp	r3, #128	; 0x80
 800a2b6:	bf0c      	ite	eq
 800a2b8:	2301      	moveq	r3, #1
 800a2ba:	2300      	movne	r3, #0
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b21      	cmp	r3, #33	; 0x21
 800a2ca:	d108      	bne.n	800a2de <UART_DMAError+0x46>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f000 f933 	bl	800a544 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b40      	cmp	r3, #64	; 0x40
 800a2ea:	bf0c      	ite	eq
 800a2ec:	2301      	moveq	r3, #1
 800a2ee:	2300      	movne	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b22      	cmp	r3, #34	; 0x22
 800a2fe:	d108      	bne.n	800a312 <UART_DMAError+0x7a>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d005      	beq.n	800a312 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2200      	movs	r2, #0
 800a30a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a30c:	68b8      	ldr	r0, [r7, #8]
 800a30e:	f000 f941 	bl	800a594 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	f043 0210 	orr.w	r2, r3, #16
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a31e:	68b8      	ldr	r0, [r7, #8]
 800a320:	f7ff fef6 	bl	800a110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a324:	bf00      	nop
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b090      	sub	sp, #64	; 0x40
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	4613      	mov	r3, r2
 800a33a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a33c:	e050      	b.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	d04c      	beq.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d007      	beq.n	800a35c <UART_WaitOnFlagUntilTimeout+0x30>
 800a34c:	f7fa fad4 	bl	80048f8 <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a358:	429a      	cmp	r2, r3
 800a35a:	d241      	bcs.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	330c      	adds	r3, #12
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	330c      	adds	r3, #12
 800a37a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a37c:	637a      	str	r2, [r7, #52]	; 0x34
 800a37e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e5      	bne.n	800a35c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3314      	adds	r3, #20
 800a396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f023 0301 	bic.w	r3, r3, #1
 800a3a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3314      	adds	r3, #20
 800a3ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3b0:	623a      	str	r2, [r7, #32]
 800a3b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	69f9      	ldr	r1, [r7, #28]
 800a3b6:	6a3a      	ldr	r2, [r7, #32]
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e5      	bne.n	800a390 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e00f      	b.n	800a400 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	bf0c      	ite	eq
 800a3f0:	2301      	moveq	r3, #1
 800a3f2:	2300      	movne	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d09f      	beq.n	800a33e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3740      	adds	r7, #64	; 0x40
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b098      	sub	sp, #96	; 0x60
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	4613      	mov	r3, r2
 800a414:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	88fa      	ldrh	r2, [r7, #6]
 800a420:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2222      	movs	r2, #34	; 0x22
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a434:	4a40      	ldr	r2, [pc, #256]	; (800a538 <UART_Start_Receive_DMA+0x130>)
 800a436:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	4a3f      	ldr	r2, [pc, #252]	; (800a53c <UART_Start_Receive_DMA+0x134>)
 800a43e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	4a3e      	ldr	r2, [pc, #248]	; (800a540 <UART_Start_Receive_DMA+0x138>)
 800a446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	2200      	movs	r2, #0
 800a44e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a450:	f107 0308 	add.w	r3, r7, #8
 800a454:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	88fb      	ldrh	r3, [r7, #6]
 800a468:	f7fa fc36 	bl	8004cd8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a46c:	2300      	movs	r3, #0
 800a46e:	613b      	str	r3, [r7, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	613b      	str	r3, [r7, #16]
 800a480:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d019      	beq.n	800a4c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	330c      	adds	r3, #12
 800a498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	330c      	adds	r3, #12
 800a4b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a4b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a4b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e5      	bne.n	800a492 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	f043 0301 	orr.w	r3, r3, #1
 800a4dc:	657b      	str	r3, [r7, #84]	; 0x54
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3314      	adds	r3, #20
 800a4e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4e6:	63ba      	str	r2, [r7, #56]	; 0x38
 800a4e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e5      	bne.n	800a4c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3314      	adds	r3, #20
 800a500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	617b      	str	r3, [r7, #20]
   return(result);
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a510:	653b      	str	r3, [r7, #80]	; 0x50
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3314      	adds	r3, #20
 800a518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a51a:	627a      	str	r2, [r7, #36]	; 0x24
 800a51c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6a39      	ldr	r1, [r7, #32]
 800a520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	61fb      	str	r3, [r7, #28]
   return(result);
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e5      	bne.n	800a4fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3760      	adds	r7, #96	; 0x60
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	0800a13d 	.word	0x0800a13d
 800a53c:	0800a263 	.word	0x0800a263
 800a540:	0800a299 	.word	0x0800a299

0800a544 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b089      	sub	sp, #36	; 0x24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	330c      	adds	r3, #12
 800a552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	e853 3f00 	ldrex	r3, [r3]
 800a55a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a562:	61fb      	str	r3, [r7, #28]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	330c      	adds	r3, #12
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	61ba      	str	r2, [r7, #24]
 800a56e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a570:	6979      	ldr	r1, [r7, #20]
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	e841 2300 	strex	r3, r2, [r1]
 800a578:	613b      	str	r3, [r7, #16]
   return(result);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e5      	bne.n	800a54c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2220      	movs	r2, #32
 800a584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a588:	bf00      	nop
 800a58a:	3724      	adds	r7, #36	; 0x24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b095      	sub	sp, #84	; 0x54
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	330c      	adds	r3, #12
 800a5a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5bc:	643a      	str	r2, [r7, #64]	; 0x40
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e5      	bne.n	800a59c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3314      	adds	r3, #20
 800a5d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	f023 0301 	bic.w	r3, r3, #1
 800a5e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3314      	adds	r3, #20
 800a5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e5      	bne.n	800a5d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d119      	bne.n	800a640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	330c      	adds	r3, #12
 800a612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f023 0310 	bic.w	r3, r3, #16
 800a622:	647b      	str	r3, [r7, #68]	; 0x44
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	330c      	adds	r3, #12
 800a62a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a62c:	61ba      	str	r2, [r7, #24]
 800a62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	6979      	ldr	r1, [r7, #20]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	613b      	str	r3, [r7, #16]
   return(result);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e5      	bne.n	800a60c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a64e:	bf00      	nop
 800a650:	3754      	adds	r7, #84	; 0x54
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7ff fd4b 	bl	800a110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a682:	b480      	push	{r7}
 800a684:	b085      	sub	sp, #20
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b21      	cmp	r3, #33	; 0x21
 800a694:	d13e      	bne.n	800a714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a69e:	d114      	bne.n	800a6ca <UART_Transmit_IT+0x48>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d110      	bne.n	800a6ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	1c9a      	adds	r2, r3, #2
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	621a      	str	r2, [r3, #32]
 800a6c8:	e008      	b.n	800a6dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	1c59      	adds	r1, r3, #1
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6211      	str	r1, [r2, #32]
 800a6d4:	781a      	ldrb	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10f      	bne.n	800a710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a70e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	e000      	b.n	800a716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a714:	2302      	movs	r3, #2
  }
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a738:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff fcd0 	bl	800a0e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b08c      	sub	sp, #48	; 0x30
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b22      	cmp	r3, #34	; 0x22
 800a764:	f040 80ab 	bne.w	800a8be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a770:	d117      	bne.n	800a7a2 <UART_Receive_IT+0x50>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d113      	bne.n	800a7a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a790:	b29a      	uxth	r2, r3
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79a:	1c9a      	adds	r2, r3, #2
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	629a      	str	r2, [r3, #40]	; 0x28
 800a7a0:	e026      	b.n	800a7f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7b4:	d007      	beq.n	800a7c6 <UART_Receive_IT+0x74>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <UART_Receive_IT+0x82>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e008      	b.n	800a7e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a800:	2b00      	cmp	r3, #0
 800a802:	d15a      	bne.n	800a8ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f022 0220 	bic.w	r2, r2, #32
 800a812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68da      	ldr	r2, [r3, #12]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	695a      	ldr	r2, [r3, #20]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0201 	bic.w	r2, r2, #1
 800a832:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	2b01      	cmp	r3, #1
 800a842:	d135      	bne.n	800a8b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	330c      	adds	r3, #12
 800a850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	613b      	str	r3, [r7, #16]
   return(result);
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	f023 0310 	bic.w	r3, r3, #16
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	330c      	adds	r3, #12
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	623a      	str	r2, [r7, #32]
 800a86c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	69f9      	ldr	r1, [r7, #28]
 800a870:	6a3a      	ldr	r2, [r7, #32]
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	61bb      	str	r3, [r7, #24]
   return(result);
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e5      	bne.n	800a84a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0310 	and.w	r3, r3, #16
 800a888:	2b10      	cmp	r3, #16
 800a88a:	d10a      	bne.n	800a8a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fc3b 	bl	800a124 <HAL_UARTEx_RxEventCallback>
 800a8ae:	e002      	b.n	800a8b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7f8 fcc9 	bl	8003248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e002      	b.n	800a8c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e000      	b.n	800a8c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a8be:	2302      	movs	r3, #2
  }
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3730      	adds	r7, #48	; 0x30
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8cc:	b0c0      	sub	sp, #256	; 0x100
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e4:	68d9      	ldr	r1, [r3, #12]
 800a8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	ea40 0301 	orr.w	r3, r0, r1
 800a8f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	431a      	orrs	r2, r3
 800a908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	4313      	orrs	r3, r2
 800a910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a920:	f021 010c 	bic.w	r1, r1, #12
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a92e:	430b      	orrs	r3, r1
 800a930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a942:	6999      	ldr	r1, [r3, #24]
 800a944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	ea40 0301 	orr.w	r3, r0, r1
 800a94e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	4b8f      	ldr	r3, [pc, #572]	; (800ab94 <UART_SetConfig+0x2cc>)
 800a958:	429a      	cmp	r2, r3
 800a95a:	d005      	beq.n	800a968 <UART_SetConfig+0xa0>
 800a95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	4b8d      	ldr	r3, [pc, #564]	; (800ab98 <UART_SetConfig+0x2d0>)
 800a964:	429a      	cmp	r2, r3
 800a966:	d104      	bne.n	800a972 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a968:	f7fe f806 	bl	8008978 <HAL_RCC_GetPCLK2Freq>
 800a96c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a970:	e003      	b.n	800a97a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a972:	f7fd ffed 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800a976:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a984:	f040 810c 	bne.w	800aba0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a992:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a996:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a99a:	4622      	mov	r2, r4
 800a99c:	462b      	mov	r3, r5
 800a99e:	1891      	adds	r1, r2, r2
 800a9a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a9a2:	415b      	adcs	r3, r3
 800a9a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	eb12 0801 	adds.w	r8, r2, r1
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	eb43 0901 	adc.w	r9, r3, r1
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	f04f 0300 	mov.w	r3, #0
 800a9be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9ca:	4690      	mov	r8, r2
 800a9cc:	4699      	mov	r9, r3
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	eb18 0303 	adds.w	r3, r8, r3
 800a9d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9d8:	462b      	mov	r3, r5
 800a9da:	eb49 0303 	adc.w	r3, r9, r3
 800a9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	18db      	adds	r3, r3, r3
 800a9fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	eb42 0303 	adc.w	r3, r2, r3
 800aa02:	657b      	str	r3, [r7, #84]	; 0x54
 800aa04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa0c:	f7f6 f944 	bl	8000c98 <__aeabi_uldivmod>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4b61      	ldr	r3, [pc, #388]	; (800ab9c <UART_SetConfig+0x2d4>)
 800aa16:	fba3 2302 	umull	r2, r3, r3, r2
 800aa1a:	095b      	lsrs	r3, r3, #5
 800aa1c:	011c      	lsls	r4, r3, #4
 800aa1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa30:	4642      	mov	r2, r8
 800aa32:	464b      	mov	r3, r9
 800aa34:	1891      	adds	r1, r2, r2
 800aa36:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa38:	415b      	adcs	r3, r3
 800aa3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa40:	4641      	mov	r1, r8
 800aa42:	eb12 0a01 	adds.w	sl, r2, r1
 800aa46:	4649      	mov	r1, r9
 800aa48:	eb43 0b01 	adc.w	fp, r3, r1
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa60:	4692      	mov	sl, r2
 800aa62:	469b      	mov	fp, r3
 800aa64:	4643      	mov	r3, r8
 800aa66:	eb1a 0303 	adds.w	r3, sl, r3
 800aa6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	eb4b 0303 	adc.w	r3, fp, r3
 800aa74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	18db      	adds	r3, r3, r3
 800aa90:	643b      	str	r3, [r7, #64]	; 0x40
 800aa92:	4613      	mov	r3, r2
 800aa94:	eb42 0303 	adc.w	r3, r2, r3
 800aa98:	647b      	str	r3, [r7, #68]	; 0x44
 800aa9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aaa2:	f7f6 f8f9 	bl	8000c98 <__aeabi_uldivmod>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4b3b      	ldr	r3, [pc, #236]	; (800ab9c <UART_SetConfig+0x2d4>)
 800aaae:	fba3 2301 	umull	r2, r3, r3, r1
 800aab2:	095b      	lsrs	r3, r3, #5
 800aab4:	2264      	movs	r2, #100	; 0x64
 800aab6:	fb02 f303 	mul.w	r3, r2, r3
 800aaba:	1acb      	subs	r3, r1, r3
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aac2:	4b36      	ldr	r3, [pc, #216]	; (800ab9c <UART_SetConfig+0x2d4>)
 800aac4:	fba3 2302 	umull	r2, r3, r3, r2
 800aac8:	095b      	lsrs	r3, r3, #5
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aad0:	441c      	add	r4, r3
 800aad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aadc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aae0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aae4:	4642      	mov	r2, r8
 800aae6:	464b      	mov	r3, r9
 800aae8:	1891      	adds	r1, r2, r2
 800aaea:	63b9      	str	r1, [r7, #56]	; 0x38
 800aaec:	415b      	adcs	r3, r3
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aaf4:	4641      	mov	r1, r8
 800aaf6:	1851      	adds	r1, r2, r1
 800aaf8:	6339      	str	r1, [r7, #48]	; 0x30
 800aafa:	4649      	mov	r1, r9
 800aafc:	414b      	adcs	r3, r1
 800aafe:	637b      	str	r3, [r7, #52]	; 0x34
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	f04f 0300 	mov.w	r3, #0
 800ab08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	00cb      	lsls	r3, r1, #3
 800ab10:	4651      	mov	r1, sl
 800ab12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab16:	4651      	mov	r1, sl
 800ab18:	00ca      	lsls	r2, r1, #3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4642      	mov	r2, r8
 800ab22:	189b      	adds	r3, r3, r2
 800ab24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab28:	464b      	mov	r3, r9
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	eb42 0303 	adc.w	r3, r2, r3
 800ab30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab48:	460b      	mov	r3, r1
 800ab4a:	18db      	adds	r3, r3, r3
 800ab4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab4e:	4613      	mov	r3, r2
 800ab50:	eb42 0303 	adc.w	r3, r2, r3
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab5e:	f7f6 f89b 	bl	8000c98 <__aeabi_uldivmod>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <UART_SetConfig+0x2d4>)
 800ab68:	fba3 1302 	umull	r1, r3, r3, r2
 800ab6c:	095b      	lsrs	r3, r3, #5
 800ab6e:	2164      	movs	r1, #100	; 0x64
 800ab70:	fb01 f303 	mul.w	r3, r1, r3
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	3332      	adds	r3, #50	; 0x32
 800ab7a:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <UART_SetConfig+0x2d4>)
 800ab7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab80:	095b      	lsrs	r3, r3, #5
 800ab82:	f003 0207 	and.w	r2, r3, #7
 800ab86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4422      	add	r2, r4
 800ab8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab90:	e105      	b.n	800ad9e <UART_SetConfig+0x4d6>
 800ab92:	bf00      	nop
 800ab94:	40011000 	.word	0x40011000
 800ab98:	40011400 	.word	0x40011400
 800ab9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aba4:	2200      	movs	r2, #0
 800aba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800abaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800abae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800abb2:	4642      	mov	r2, r8
 800abb4:	464b      	mov	r3, r9
 800abb6:	1891      	adds	r1, r2, r2
 800abb8:	6239      	str	r1, [r7, #32]
 800abba:	415b      	adcs	r3, r3
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
 800abbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abc2:	4641      	mov	r1, r8
 800abc4:	1854      	adds	r4, r2, r1
 800abc6:	4649      	mov	r1, r9
 800abc8:	eb43 0501 	adc.w	r5, r3, r1
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	f04f 0300 	mov.w	r3, #0
 800abd4:	00eb      	lsls	r3, r5, #3
 800abd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abda:	00e2      	lsls	r2, r4, #3
 800abdc:	4614      	mov	r4, r2
 800abde:	461d      	mov	r5, r3
 800abe0:	4643      	mov	r3, r8
 800abe2:	18e3      	adds	r3, r4, r3
 800abe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abe8:	464b      	mov	r3, r9
 800abea:	eb45 0303 	adc.w	r3, r5, r3
 800abee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac02:	f04f 0200 	mov.w	r2, #0
 800ac06:	f04f 0300 	mov.w	r3, #0
 800ac0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac0e:	4629      	mov	r1, r5
 800ac10:	008b      	lsls	r3, r1, #2
 800ac12:	4621      	mov	r1, r4
 800ac14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac18:	4621      	mov	r1, r4
 800ac1a:	008a      	lsls	r2, r1, #2
 800ac1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac20:	f7f6 f83a 	bl	8000c98 <__aeabi_uldivmod>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4b60      	ldr	r3, [pc, #384]	; (800adac <UART_SetConfig+0x4e4>)
 800ac2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	011c      	lsls	r4, r3, #4
 800ac32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac44:	4642      	mov	r2, r8
 800ac46:	464b      	mov	r3, r9
 800ac48:	1891      	adds	r1, r2, r2
 800ac4a:	61b9      	str	r1, [r7, #24]
 800ac4c:	415b      	adcs	r3, r3
 800ac4e:	61fb      	str	r3, [r7, #28]
 800ac50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac54:	4641      	mov	r1, r8
 800ac56:	1851      	adds	r1, r2, r1
 800ac58:	6139      	str	r1, [r7, #16]
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	414b      	adcs	r3, r1
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	f04f 0200 	mov.w	r2, #0
 800ac64:	f04f 0300 	mov.w	r3, #0
 800ac68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	00cb      	lsls	r3, r1, #3
 800ac70:	4651      	mov	r1, sl
 800ac72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac76:	4651      	mov	r1, sl
 800ac78:	00ca      	lsls	r2, r1, #3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4642      	mov	r2, r8
 800ac82:	189b      	adds	r3, r3, r2
 800ac84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac88:	464b      	mov	r3, r9
 800ac8a:	460a      	mov	r2, r1
 800ac8c:	eb42 0303 	adc.w	r3, r2, r3
 800ac90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aca0:	f04f 0200 	mov.w	r2, #0
 800aca4:	f04f 0300 	mov.w	r3, #0
 800aca8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800acac:	4649      	mov	r1, r9
 800acae:	008b      	lsls	r3, r1, #2
 800acb0:	4641      	mov	r1, r8
 800acb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acb6:	4641      	mov	r1, r8
 800acb8:	008a      	lsls	r2, r1, #2
 800acba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800acbe:	f7f5 ffeb 	bl	8000c98 <__aeabi_uldivmod>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4b39      	ldr	r3, [pc, #228]	; (800adac <UART_SetConfig+0x4e4>)
 800acc8:	fba3 1302 	umull	r1, r3, r3, r2
 800accc:	095b      	lsrs	r3, r3, #5
 800acce:	2164      	movs	r1, #100	; 0x64
 800acd0:	fb01 f303 	mul.w	r3, r1, r3
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	3332      	adds	r3, #50	; 0x32
 800acda:	4a34      	ldr	r2, [pc, #208]	; (800adac <UART_SetConfig+0x4e4>)
 800acdc:	fba2 2303 	umull	r2, r3, r2, r3
 800ace0:	095b      	lsrs	r3, r3, #5
 800ace2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ace6:	441c      	add	r4, r3
 800ace8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acec:	2200      	movs	r2, #0
 800acee:	673b      	str	r3, [r7, #112]	; 0x70
 800acf0:	677a      	str	r2, [r7, #116]	; 0x74
 800acf2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800acf6:	4642      	mov	r2, r8
 800acf8:	464b      	mov	r3, r9
 800acfa:	1891      	adds	r1, r2, r2
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	415b      	adcs	r3, r3
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad06:	4641      	mov	r1, r8
 800ad08:	1851      	adds	r1, r2, r1
 800ad0a:	6039      	str	r1, [r7, #0]
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	414b      	adcs	r3, r1
 800ad10:	607b      	str	r3, [r7, #4]
 800ad12:	f04f 0200 	mov.w	r2, #0
 800ad16:	f04f 0300 	mov.w	r3, #0
 800ad1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad1e:	4659      	mov	r1, fp
 800ad20:	00cb      	lsls	r3, r1, #3
 800ad22:	4651      	mov	r1, sl
 800ad24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad28:	4651      	mov	r1, sl
 800ad2a:	00ca      	lsls	r2, r1, #3
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4603      	mov	r3, r0
 800ad32:	4642      	mov	r2, r8
 800ad34:	189b      	adds	r3, r3, r2
 800ad36:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad38:	464b      	mov	r3, r9
 800ad3a:	460a      	mov	r2, r1
 800ad3c:	eb42 0303 	adc.w	r3, r2, r3
 800ad40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	663b      	str	r3, [r7, #96]	; 0x60
 800ad4c:	667a      	str	r2, [r7, #100]	; 0x64
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	008b      	lsls	r3, r1, #2
 800ad5e:	4641      	mov	r1, r8
 800ad60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad64:	4641      	mov	r1, r8
 800ad66:	008a      	lsls	r2, r1, #2
 800ad68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad6c:	f7f5 ff94 	bl	8000c98 <__aeabi_uldivmod>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4b0d      	ldr	r3, [pc, #52]	; (800adac <UART_SetConfig+0x4e4>)
 800ad76:	fba3 1302 	umull	r1, r3, r3, r2
 800ad7a:	095b      	lsrs	r3, r3, #5
 800ad7c:	2164      	movs	r1, #100	; 0x64
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	3332      	adds	r3, #50	; 0x32
 800ad88:	4a08      	ldr	r2, [pc, #32]	; (800adac <UART_SetConfig+0x4e4>)
 800ad8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8e:	095b      	lsrs	r3, r3, #5
 800ad90:	f003 020f 	and.w	r2, r3, #15
 800ad94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4422      	add	r2, r4
 800ad9c:	609a      	str	r2, [r3, #8]
}
 800ad9e:	bf00      	nop
 800ada0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ada4:	46bd      	mov	sp, r7
 800ada6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adaa:	bf00      	nop
 800adac:	51eb851f 	.word	0x51eb851f

0800adb0 <__errno>:
 800adb0:	4b01      	ldr	r3, [pc, #4]	; (800adb8 <__errno+0x8>)
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	200000b4 	.word	0x200000b4

0800adbc <__libc_init_array>:
 800adbc:	b570      	push	{r4, r5, r6, lr}
 800adbe:	4d0d      	ldr	r5, [pc, #52]	; (800adf4 <__libc_init_array+0x38>)
 800adc0:	4c0d      	ldr	r4, [pc, #52]	; (800adf8 <__libc_init_array+0x3c>)
 800adc2:	1b64      	subs	r4, r4, r5
 800adc4:	10a4      	asrs	r4, r4, #2
 800adc6:	2600      	movs	r6, #0
 800adc8:	42a6      	cmp	r6, r4
 800adca:	d109      	bne.n	800ade0 <__libc_init_array+0x24>
 800adcc:	4d0b      	ldr	r5, [pc, #44]	; (800adfc <__libc_init_array+0x40>)
 800adce:	4c0c      	ldr	r4, [pc, #48]	; (800ae00 <__libc_init_array+0x44>)
 800add0:	f002 ff76 	bl	800dcc0 <_init>
 800add4:	1b64      	subs	r4, r4, r5
 800add6:	10a4      	asrs	r4, r4, #2
 800add8:	2600      	movs	r6, #0
 800adda:	42a6      	cmp	r6, r4
 800addc:	d105      	bne.n	800adea <__libc_init_array+0x2e>
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade4:	4798      	blx	r3
 800ade6:	3601      	adds	r6, #1
 800ade8:	e7ee      	b.n	800adc8 <__libc_init_array+0xc>
 800adea:	f855 3b04 	ldr.w	r3, [r5], #4
 800adee:	4798      	blx	r3
 800adf0:	3601      	adds	r6, #1
 800adf2:	e7f2      	b.n	800adda <__libc_init_array+0x1e>
 800adf4:	0801978c 	.word	0x0801978c
 800adf8:	0801978c 	.word	0x0801978c
 800adfc:	0801978c 	.word	0x0801978c
 800ae00:	08019790 	.word	0x08019790

0800ae04 <memset>:
 800ae04:	4402      	add	r2, r0
 800ae06:	4603      	mov	r3, r0
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d100      	bne.n	800ae0e <memset+0xa>
 800ae0c:	4770      	bx	lr
 800ae0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae12:	e7f9      	b.n	800ae08 <memset+0x4>

0800ae14 <__cvt>:
 800ae14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	ec55 4b10 	vmov	r4, r5, d0
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	460e      	mov	r6, r1
 800ae20:	4619      	mov	r1, r3
 800ae22:	462b      	mov	r3, r5
 800ae24:	bfbb      	ittet	lt
 800ae26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae2a:	461d      	movlt	r5, r3
 800ae2c:	2300      	movge	r3, #0
 800ae2e:	232d      	movlt	r3, #45	; 0x2d
 800ae30:	700b      	strb	r3, [r1, #0]
 800ae32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae38:	4691      	mov	r9, r2
 800ae3a:	f023 0820 	bic.w	r8, r3, #32
 800ae3e:	bfbc      	itt	lt
 800ae40:	4622      	movlt	r2, r4
 800ae42:	4614      	movlt	r4, r2
 800ae44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae48:	d005      	beq.n	800ae56 <__cvt+0x42>
 800ae4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae4e:	d100      	bne.n	800ae52 <__cvt+0x3e>
 800ae50:	3601      	adds	r6, #1
 800ae52:	2102      	movs	r1, #2
 800ae54:	e000      	b.n	800ae58 <__cvt+0x44>
 800ae56:	2103      	movs	r1, #3
 800ae58:	ab03      	add	r3, sp, #12
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	ab02      	add	r3, sp, #8
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	ec45 4b10 	vmov	d0, r4, r5
 800ae64:	4653      	mov	r3, sl
 800ae66:	4632      	mov	r2, r6
 800ae68:	f000 fcea 	bl	800b840 <_dtoa_r>
 800ae6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae70:	4607      	mov	r7, r0
 800ae72:	d102      	bne.n	800ae7a <__cvt+0x66>
 800ae74:	f019 0f01 	tst.w	r9, #1
 800ae78:	d022      	beq.n	800aec0 <__cvt+0xac>
 800ae7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae7e:	eb07 0906 	add.w	r9, r7, r6
 800ae82:	d110      	bne.n	800aea6 <__cvt+0x92>
 800ae84:	783b      	ldrb	r3, [r7, #0]
 800ae86:	2b30      	cmp	r3, #48	; 0x30
 800ae88:	d10a      	bne.n	800aea0 <__cvt+0x8c>
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4620      	mov	r0, r4
 800ae90:	4629      	mov	r1, r5
 800ae92:	f7f5 fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae96:	b918      	cbnz	r0, 800aea0 <__cvt+0x8c>
 800ae98:	f1c6 0601 	rsb	r6, r6, #1
 800ae9c:	f8ca 6000 	str.w	r6, [sl]
 800aea0:	f8da 3000 	ldr.w	r3, [sl]
 800aea4:	4499      	add	r9, r3
 800aea6:	2200      	movs	r2, #0
 800aea8:	2300      	movs	r3, #0
 800aeaa:	4620      	mov	r0, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	f7f5 fe13 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeb2:	b108      	cbz	r0, 800aeb8 <__cvt+0xa4>
 800aeb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800aeb8:	2230      	movs	r2, #48	; 0x30
 800aeba:	9b03      	ldr	r3, [sp, #12]
 800aebc:	454b      	cmp	r3, r9
 800aebe:	d307      	bcc.n	800aed0 <__cvt+0xbc>
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aec4:	1bdb      	subs	r3, r3, r7
 800aec6:	4638      	mov	r0, r7
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	b004      	add	sp, #16
 800aecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed0:	1c59      	adds	r1, r3, #1
 800aed2:	9103      	str	r1, [sp, #12]
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e7f0      	b.n	800aeba <__cvt+0xa6>

0800aed8 <__exponent>:
 800aed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeda:	4603      	mov	r3, r0
 800aedc:	2900      	cmp	r1, #0
 800aede:	bfb8      	it	lt
 800aee0:	4249      	neglt	r1, r1
 800aee2:	f803 2b02 	strb.w	r2, [r3], #2
 800aee6:	bfb4      	ite	lt
 800aee8:	222d      	movlt	r2, #45	; 0x2d
 800aeea:	222b      	movge	r2, #43	; 0x2b
 800aeec:	2909      	cmp	r1, #9
 800aeee:	7042      	strb	r2, [r0, #1]
 800aef0:	dd2a      	ble.n	800af48 <__exponent+0x70>
 800aef2:	f10d 0407 	add.w	r4, sp, #7
 800aef6:	46a4      	mov	ip, r4
 800aef8:	270a      	movs	r7, #10
 800aefa:	46a6      	mov	lr, r4
 800aefc:	460a      	mov	r2, r1
 800aefe:	fb91 f6f7 	sdiv	r6, r1, r7
 800af02:	fb07 1516 	mls	r5, r7, r6, r1
 800af06:	3530      	adds	r5, #48	; 0x30
 800af08:	2a63      	cmp	r2, #99	; 0x63
 800af0a:	f104 34ff 	add.w	r4, r4, #4294967295
 800af0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af12:	4631      	mov	r1, r6
 800af14:	dcf1      	bgt.n	800aefa <__exponent+0x22>
 800af16:	3130      	adds	r1, #48	; 0x30
 800af18:	f1ae 0502 	sub.w	r5, lr, #2
 800af1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af20:	1c44      	adds	r4, r0, #1
 800af22:	4629      	mov	r1, r5
 800af24:	4561      	cmp	r1, ip
 800af26:	d30a      	bcc.n	800af3e <__exponent+0x66>
 800af28:	f10d 0209 	add.w	r2, sp, #9
 800af2c:	eba2 020e 	sub.w	r2, r2, lr
 800af30:	4565      	cmp	r5, ip
 800af32:	bf88      	it	hi
 800af34:	2200      	movhi	r2, #0
 800af36:	4413      	add	r3, r2
 800af38:	1a18      	subs	r0, r3, r0
 800af3a:	b003      	add	sp, #12
 800af3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af46:	e7ed      	b.n	800af24 <__exponent+0x4c>
 800af48:	2330      	movs	r3, #48	; 0x30
 800af4a:	3130      	adds	r1, #48	; 0x30
 800af4c:	7083      	strb	r3, [r0, #2]
 800af4e:	70c1      	strb	r1, [r0, #3]
 800af50:	1d03      	adds	r3, r0, #4
 800af52:	e7f1      	b.n	800af38 <__exponent+0x60>

0800af54 <_printf_float>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	ed2d 8b02 	vpush	{d8}
 800af5c:	b08d      	sub	sp, #52	; 0x34
 800af5e:	460c      	mov	r4, r1
 800af60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af64:	4616      	mov	r6, r2
 800af66:	461f      	mov	r7, r3
 800af68:	4605      	mov	r5, r0
 800af6a:	f001 fa57 	bl	800c41c <_localeconv_r>
 800af6e:	f8d0 a000 	ldr.w	sl, [r0]
 800af72:	4650      	mov	r0, sl
 800af74:	f7f5 f934 	bl	80001e0 <strlen>
 800af78:	2300      	movs	r3, #0
 800af7a:	930a      	str	r3, [sp, #40]	; 0x28
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	9305      	str	r3, [sp, #20]
 800af80:	f8d8 3000 	ldr.w	r3, [r8]
 800af84:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af88:	3307      	adds	r3, #7
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	f103 0208 	add.w	r2, r3, #8
 800af92:	f8c8 2000 	str.w	r2, [r8]
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afa6:	9307      	str	r3, [sp, #28]
 800afa8:	f8cd 8018 	str.w	r8, [sp, #24]
 800afac:	ee08 0a10 	vmov	s16, r0
 800afb0:	4b9f      	ldr	r3, [pc, #636]	; (800b230 <_printf_float+0x2dc>)
 800afb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	f7f5 fdbf 	bl	8000b3c <__aeabi_dcmpun>
 800afbe:	bb88      	cbnz	r0, 800b024 <_printf_float+0xd0>
 800afc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc4:	4b9a      	ldr	r3, [pc, #616]	; (800b230 <_printf_float+0x2dc>)
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295
 800afca:	f7f5 fd99 	bl	8000b00 <__aeabi_dcmple>
 800afce:	bb48      	cbnz	r0, 800b024 <_printf_float+0xd0>
 800afd0:	2200      	movs	r2, #0
 800afd2:	2300      	movs	r3, #0
 800afd4:	4640      	mov	r0, r8
 800afd6:	4649      	mov	r1, r9
 800afd8:	f7f5 fd88 	bl	8000aec <__aeabi_dcmplt>
 800afdc:	b110      	cbz	r0, 800afe4 <_printf_float+0x90>
 800afde:	232d      	movs	r3, #45	; 0x2d
 800afe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe4:	4b93      	ldr	r3, [pc, #588]	; (800b234 <_printf_float+0x2e0>)
 800afe6:	4894      	ldr	r0, [pc, #592]	; (800b238 <_printf_float+0x2e4>)
 800afe8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afec:	bf94      	ite	ls
 800afee:	4698      	movls	r8, r3
 800aff0:	4680      	movhi	r8, r0
 800aff2:	2303      	movs	r3, #3
 800aff4:	6123      	str	r3, [r4, #16]
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	f023 0204 	bic.w	r2, r3, #4
 800affc:	6022      	str	r2, [r4, #0]
 800affe:	f04f 0900 	mov.w	r9, #0
 800b002:	9700      	str	r7, [sp, #0]
 800b004:	4633      	mov	r3, r6
 800b006:	aa0b      	add	r2, sp, #44	; 0x2c
 800b008:	4621      	mov	r1, r4
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 f9d8 	bl	800b3c0 <_printf_common>
 800b010:	3001      	adds	r0, #1
 800b012:	f040 8090 	bne.w	800b136 <_printf_float+0x1e2>
 800b016:	f04f 30ff 	mov.w	r0, #4294967295
 800b01a:	b00d      	add	sp, #52	; 0x34
 800b01c:	ecbd 8b02 	vpop	{d8}
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	4642      	mov	r2, r8
 800b026:	464b      	mov	r3, r9
 800b028:	4640      	mov	r0, r8
 800b02a:	4649      	mov	r1, r9
 800b02c:	f7f5 fd86 	bl	8000b3c <__aeabi_dcmpun>
 800b030:	b140      	cbz	r0, 800b044 <_printf_float+0xf0>
 800b032:	464b      	mov	r3, r9
 800b034:	2b00      	cmp	r3, #0
 800b036:	bfbc      	itt	lt
 800b038:	232d      	movlt	r3, #45	; 0x2d
 800b03a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b03e:	487f      	ldr	r0, [pc, #508]	; (800b23c <_printf_float+0x2e8>)
 800b040:	4b7f      	ldr	r3, [pc, #508]	; (800b240 <_printf_float+0x2ec>)
 800b042:	e7d1      	b.n	800afe8 <_printf_float+0x94>
 800b044:	6863      	ldr	r3, [r4, #4]
 800b046:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b04a:	9206      	str	r2, [sp, #24]
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	d13f      	bne.n	800b0d0 <_printf_float+0x17c>
 800b050:	2306      	movs	r3, #6
 800b052:	6063      	str	r3, [r4, #4]
 800b054:	9b05      	ldr	r3, [sp, #20]
 800b056:	6861      	ldr	r1, [r4, #4]
 800b058:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b05c:	2300      	movs	r3, #0
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	ab0a      	add	r3, sp, #40	; 0x28
 800b062:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b066:	ab09      	add	r3, sp, #36	; 0x24
 800b068:	ec49 8b10 	vmov	d0, r8, r9
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	6022      	str	r2, [r4, #0]
 800b070:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b074:	4628      	mov	r0, r5
 800b076:	f7ff fecd 	bl	800ae14 <__cvt>
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b07e:	2b47      	cmp	r3, #71	; 0x47
 800b080:	4680      	mov	r8, r0
 800b082:	d108      	bne.n	800b096 <_printf_float+0x142>
 800b084:	1cc8      	adds	r0, r1, #3
 800b086:	db02      	blt.n	800b08e <_printf_float+0x13a>
 800b088:	6863      	ldr	r3, [r4, #4]
 800b08a:	4299      	cmp	r1, r3
 800b08c:	dd41      	ble.n	800b112 <_printf_float+0x1be>
 800b08e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b092:	fa5f fb8b 	uxtb.w	fp, fp
 800b096:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b09a:	d820      	bhi.n	800b0de <_printf_float+0x18a>
 800b09c:	3901      	subs	r1, #1
 800b09e:	465a      	mov	r2, fp
 800b0a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0a4:	9109      	str	r1, [sp, #36]	; 0x24
 800b0a6:	f7ff ff17 	bl	800aed8 <__exponent>
 800b0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ac:	1813      	adds	r3, r2, r0
 800b0ae:	2a01      	cmp	r2, #1
 800b0b0:	4681      	mov	r9, r0
 800b0b2:	6123      	str	r3, [r4, #16]
 800b0b4:	dc02      	bgt.n	800b0bc <_printf_float+0x168>
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	07d2      	lsls	r2, r2, #31
 800b0ba:	d501      	bpl.n	800b0c0 <_printf_float+0x16c>
 800b0bc:	3301      	adds	r3, #1
 800b0be:	6123      	str	r3, [r4, #16]
 800b0c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d09c      	beq.n	800b002 <_printf_float+0xae>
 800b0c8:	232d      	movs	r3, #45	; 0x2d
 800b0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ce:	e798      	b.n	800b002 <_printf_float+0xae>
 800b0d0:	9a06      	ldr	r2, [sp, #24]
 800b0d2:	2a47      	cmp	r2, #71	; 0x47
 800b0d4:	d1be      	bne.n	800b054 <_printf_float+0x100>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1bc      	bne.n	800b054 <_printf_float+0x100>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e7b9      	b.n	800b052 <_printf_float+0xfe>
 800b0de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0e2:	d118      	bne.n	800b116 <_printf_float+0x1c2>
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	6863      	ldr	r3, [r4, #4]
 800b0e8:	dd0b      	ble.n	800b102 <_printf_float+0x1ae>
 800b0ea:	6121      	str	r1, [r4, #16]
 800b0ec:	b913      	cbnz	r3, 800b0f4 <_printf_float+0x1a0>
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	07d0      	lsls	r0, r2, #31
 800b0f2:	d502      	bpl.n	800b0fa <_printf_float+0x1a6>
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	440b      	add	r3, r1
 800b0f8:	6123      	str	r3, [r4, #16]
 800b0fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0fc:	f04f 0900 	mov.w	r9, #0
 800b100:	e7de      	b.n	800b0c0 <_printf_float+0x16c>
 800b102:	b913      	cbnz	r3, 800b10a <_printf_float+0x1b6>
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	07d2      	lsls	r2, r2, #31
 800b108:	d501      	bpl.n	800b10e <_printf_float+0x1ba>
 800b10a:	3302      	adds	r3, #2
 800b10c:	e7f4      	b.n	800b0f8 <_printf_float+0x1a4>
 800b10e:	2301      	movs	r3, #1
 800b110:	e7f2      	b.n	800b0f8 <_printf_float+0x1a4>
 800b112:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	4299      	cmp	r1, r3
 800b11a:	db05      	blt.n	800b128 <_printf_float+0x1d4>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	6121      	str	r1, [r4, #16]
 800b120:	07d8      	lsls	r0, r3, #31
 800b122:	d5ea      	bpl.n	800b0fa <_printf_float+0x1a6>
 800b124:	1c4b      	adds	r3, r1, #1
 800b126:	e7e7      	b.n	800b0f8 <_printf_float+0x1a4>
 800b128:	2900      	cmp	r1, #0
 800b12a:	bfd4      	ite	le
 800b12c:	f1c1 0202 	rsble	r2, r1, #2
 800b130:	2201      	movgt	r2, #1
 800b132:	4413      	add	r3, r2
 800b134:	e7e0      	b.n	800b0f8 <_printf_float+0x1a4>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	055a      	lsls	r2, r3, #21
 800b13a:	d407      	bmi.n	800b14c <_printf_float+0x1f8>
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	4642      	mov	r2, r8
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	d12c      	bne.n	800b1a4 <_printf_float+0x250>
 800b14a:	e764      	b.n	800b016 <_printf_float+0xc2>
 800b14c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b150:	f240 80e0 	bls.w	800b314 <_printf_float+0x3c0>
 800b154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	f7f5 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b160:	2800      	cmp	r0, #0
 800b162:	d034      	beq.n	800b1ce <_printf_float+0x27a>
 800b164:	4a37      	ldr	r2, [pc, #220]	; (800b244 <_printf_float+0x2f0>)
 800b166:	2301      	movs	r3, #1
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	f43f af51 	beq.w	800b016 <_printf_float+0xc2>
 800b174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b178:	429a      	cmp	r2, r3
 800b17a:	db02      	blt.n	800b182 <_printf_float+0x22e>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	07d8      	lsls	r0, r3, #31
 800b180:	d510      	bpl.n	800b1a4 <_printf_float+0x250>
 800b182:	ee18 3a10 	vmov	r3, s16
 800b186:	4652      	mov	r2, sl
 800b188:	4631      	mov	r1, r6
 800b18a:	4628      	mov	r0, r5
 800b18c:	47b8      	blx	r7
 800b18e:	3001      	adds	r0, #1
 800b190:	f43f af41 	beq.w	800b016 <_printf_float+0xc2>
 800b194:	f04f 0800 	mov.w	r8, #0
 800b198:	f104 091a 	add.w	r9, r4, #26
 800b19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	4543      	cmp	r3, r8
 800b1a2:	dc09      	bgt.n	800b1b8 <_printf_float+0x264>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	079b      	lsls	r3, r3, #30
 800b1a8:	f100 8105 	bmi.w	800b3b6 <_printf_float+0x462>
 800b1ac:	68e0      	ldr	r0, [r4, #12]
 800b1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b0:	4298      	cmp	r0, r3
 800b1b2:	bfb8      	it	lt
 800b1b4:	4618      	movlt	r0, r3
 800b1b6:	e730      	b.n	800b01a <_printf_float+0xc6>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	464a      	mov	r2, r9
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b8      	blx	r7
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	f43f af27 	beq.w	800b016 <_printf_float+0xc2>
 800b1c8:	f108 0801 	add.w	r8, r8, #1
 800b1cc:	e7e6      	b.n	800b19c <_printf_float+0x248>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dc39      	bgt.n	800b248 <_printf_float+0x2f4>
 800b1d4:	4a1b      	ldr	r2, [pc, #108]	; (800b244 <_printf_float+0x2f0>)
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f af19 	beq.w	800b016 <_printf_float+0xc2>
 800b1e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	d102      	bne.n	800b1f2 <_printf_float+0x29e>
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	07d9      	lsls	r1, r3, #31
 800b1f0:	d5d8      	bpl.n	800b1a4 <_printf_float+0x250>
 800b1f2:	ee18 3a10 	vmov	r3, s16
 800b1f6:	4652      	mov	r2, sl
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f af09 	beq.w	800b016 <_printf_float+0xc2>
 800b204:	f04f 0900 	mov.w	r9, #0
 800b208:	f104 0a1a 	add.w	sl, r4, #26
 800b20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20e:	425b      	negs	r3, r3
 800b210:	454b      	cmp	r3, r9
 800b212:	dc01      	bgt.n	800b218 <_printf_float+0x2c4>
 800b214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b216:	e792      	b.n	800b13e <_printf_float+0x1ea>
 800b218:	2301      	movs	r3, #1
 800b21a:	4652      	mov	r2, sl
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	f43f aef7 	beq.w	800b016 <_printf_float+0xc2>
 800b228:	f109 0901 	add.w	r9, r9, #1
 800b22c:	e7ee      	b.n	800b20c <_printf_float+0x2b8>
 800b22e:	bf00      	nop
 800b230:	7fefffff 	.word	0x7fefffff
 800b234:	080193ac 	.word	0x080193ac
 800b238:	080193b0 	.word	0x080193b0
 800b23c:	080193b8 	.word	0x080193b8
 800b240:	080193b4 	.word	0x080193b4
 800b244:	080193bc 	.word	0x080193bc
 800b248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b24a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b24c:	429a      	cmp	r2, r3
 800b24e:	bfa8      	it	ge
 800b250:	461a      	movge	r2, r3
 800b252:	2a00      	cmp	r2, #0
 800b254:	4691      	mov	r9, r2
 800b256:	dc37      	bgt.n	800b2c8 <_printf_float+0x374>
 800b258:	f04f 0b00 	mov.w	fp, #0
 800b25c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b260:	f104 021a 	add.w	r2, r4, #26
 800b264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b266:	9305      	str	r3, [sp, #20]
 800b268:	eba3 0309 	sub.w	r3, r3, r9
 800b26c:	455b      	cmp	r3, fp
 800b26e:	dc33      	bgt.n	800b2d8 <_printf_float+0x384>
 800b270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b274:	429a      	cmp	r2, r3
 800b276:	db3b      	blt.n	800b2f0 <_printf_float+0x39c>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	07da      	lsls	r2, r3, #31
 800b27c:	d438      	bmi.n	800b2f0 <_printf_float+0x39c>
 800b27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b280:	9a05      	ldr	r2, [sp, #20]
 800b282:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b284:	1a9a      	subs	r2, r3, r2
 800b286:	eba3 0901 	sub.w	r9, r3, r1
 800b28a:	4591      	cmp	r9, r2
 800b28c:	bfa8      	it	ge
 800b28e:	4691      	movge	r9, r2
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	dc35      	bgt.n	800b302 <_printf_float+0x3ae>
 800b296:	f04f 0800 	mov.w	r8, #0
 800b29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b29e:	f104 0a1a 	add.w	sl, r4, #26
 800b2a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2a6:	1a9b      	subs	r3, r3, r2
 800b2a8:	eba3 0309 	sub.w	r3, r3, r9
 800b2ac:	4543      	cmp	r3, r8
 800b2ae:	f77f af79 	ble.w	800b1a4 <_printf_float+0x250>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b8      	blx	r7
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f43f aeaa 	beq.w	800b016 <_printf_float+0xc2>
 800b2c2:	f108 0801 	add.w	r8, r8, #1
 800b2c6:	e7ec      	b.n	800b2a2 <_printf_float+0x34e>
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	47b8      	blx	r7
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	d1c0      	bne.n	800b258 <_printf_float+0x304>
 800b2d6:	e69e      	b.n	800b016 <_printf_float+0xc2>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	9205      	str	r2, [sp, #20]
 800b2e0:	47b8      	blx	r7
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f43f ae97 	beq.w	800b016 <_printf_float+0xc2>
 800b2e8:	9a05      	ldr	r2, [sp, #20]
 800b2ea:	f10b 0b01 	add.w	fp, fp, #1
 800b2ee:	e7b9      	b.n	800b264 <_printf_float+0x310>
 800b2f0:	ee18 3a10 	vmov	r3, s16
 800b2f4:	4652      	mov	r2, sl
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	47b8      	blx	r7
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d1be      	bne.n	800b27e <_printf_float+0x32a>
 800b300:	e689      	b.n	800b016 <_printf_float+0xc2>
 800b302:	9a05      	ldr	r2, [sp, #20]
 800b304:	464b      	mov	r3, r9
 800b306:	4442      	add	r2, r8
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	d1c1      	bne.n	800b296 <_printf_float+0x342>
 800b312:	e680      	b.n	800b016 <_printf_float+0xc2>
 800b314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b316:	2a01      	cmp	r2, #1
 800b318:	dc01      	bgt.n	800b31e <_printf_float+0x3ca>
 800b31a:	07db      	lsls	r3, r3, #31
 800b31c:	d538      	bpl.n	800b390 <_printf_float+0x43c>
 800b31e:	2301      	movs	r3, #1
 800b320:	4642      	mov	r2, r8
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	f43f ae74 	beq.w	800b016 <_printf_float+0xc2>
 800b32e:	ee18 3a10 	vmov	r3, s16
 800b332:	4652      	mov	r2, sl
 800b334:	4631      	mov	r1, r6
 800b336:	4628      	mov	r0, r5
 800b338:	47b8      	blx	r7
 800b33a:	3001      	adds	r0, #1
 800b33c:	f43f ae6b 	beq.w	800b016 <_printf_float+0xc2>
 800b340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b344:	2200      	movs	r2, #0
 800b346:	2300      	movs	r3, #0
 800b348:	f7f5 fbc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b34c:	b9d8      	cbnz	r0, 800b386 <_printf_float+0x432>
 800b34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b350:	f108 0201 	add.w	r2, r8, #1
 800b354:	3b01      	subs	r3, #1
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	d10e      	bne.n	800b37e <_printf_float+0x42a>
 800b360:	e659      	b.n	800b016 <_printf_float+0xc2>
 800b362:	2301      	movs	r3, #1
 800b364:	4652      	mov	r2, sl
 800b366:	4631      	mov	r1, r6
 800b368:	4628      	mov	r0, r5
 800b36a:	47b8      	blx	r7
 800b36c:	3001      	adds	r0, #1
 800b36e:	f43f ae52 	beq.w	800b016 <_printf_float+0xc2>
 800b372:	f108 0801 	add.w	r8, r8, #1
 800b376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b378:	3b01      	subs	r3, #1
 800b37a:	4543      	cmp	r3, r8
 800b37c:	dcf1      	bgt.n	800b362 <_printf_float+0x40e>
 800b37e:	464b      	mov	r3, r9
 800b380:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b384:	e6dc      	b.n	800b140 <_printf_float+0x1ec>
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	f104 0a1a 	add.w	sl, r4, #26
 800b38e:	e7f2      	b.n	800b376 <_printf_float+0x422>
 800b390:	2301      	movs	r3, #1
 800b392:	4642      	mov	r2, r8
 800b394:	e7df      	b.n	800b356 <_printf_float+0x402>
 800b396:	2301      	movs	r3, #1
 800b398:	464a      	mov	r2, r9
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	47b8      	blx	r7
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	f43f ae38 	beq.w	800b016 <_printf_float+0xc2>
 800b3a6:	f108 0801 	add.w	r8, r8, #1
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3ae:	1a5b      	subs	r3, r3, r1
 800b3b0:	4543      	cmp	r3, r8
 800b3b2:	dcf0      	bgt.n	800b396 <_printf_float+0x442>
 800b3b4:	e6fa      	b.n	800b1ac <_printf_float+0x258>
 800b3b6:	f04f 0800 	mov.w	r8, #0
 800b3ba:	f104 0919 	add.w	r9, r4, #25
 800b3be:	e7f4      	b.n	800b3aa <_printf_float+0x456>

0800b3c0 <_printf_common>:
 800b3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	4699      	mov	r9, r3
 800b3c8:	688a      	ldr	r2, [r1, #8]
 800b3ca:	690b      	ldr	r3, [r1, #16]
 800b3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	bfb8      	it	lt
 800b3d4:	4613      	movlt	r3, r2
 800b3d6:	6033      	str	r3, [r6, #0]
 800b3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3dc:	4607      	mov	r7, r0
 800b3de:	460c      	mov	r4, r1
 800b3e0:	b10a      	cbz	r2, 800b3e6 <_printf_common+0x26>
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	6033      	str	r3, [r6, #0]
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	0699      	lsls	r1, r3, #26
 800b3ea:	bf42      	ittt	mi
 800b3ec:	6833      	ldrmi	r3, [r6, #0]
 800b3ee:	3302      	addmi	r3, #2
 800b3f0:	6033      	strmi	r3, [r6, #0]
 800b3f2:	6825      	ldr	r5, [r4, #0]
 800b3f4:	f015 0506 	ands.w	r5, r5, #6
 800b3f8:	d106      	bne.n	800b408 <_printf_common+0x48>
 800b3fa:	f104 0a19 	add.w	sl, r4, #25
 800b3fe:	68e3      	ldr	r3, [r4, #12]
 800b400:	6832      	ldr	r2, [r6, #0]
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	42ab      	cmp	r3, r5
 800b406:	dc26      	bgt.n	800b456 <_printf_common+0x96>
 800b408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b40c:	1e13      	subs	r3, r2, #0
 800b40e:	6822      	ldr	r2, [r4, #0]
 800b410:	bf18      	it	ne
 800b412:	2301      	movne	r3, #1
 800b414:	0692      	lsls	r2, r2, #26
 800b416:	d42b      	bmi.n	800b470 <_printf_common+0xb0>
 800b418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b41c:	4649      	mov	r1, r9
 800b41e:	4638      	mov	r0, r7
 800b420:	47c0      	blx	r8
 800b422:	3001      	adds	r0, #1
 800b424:	d01e      	beq.n	800b464 <_printf_common+0xa4>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	68e5      	ldr	r5, [r4, #12]
 800b42a:	6832      	ldr	r2, [r6, #0]
 800b42c:	f003 0306 	and.w	r3, r3, #6
 800b430:	2b04      	cmp	r3, #4
 800b432:	bf08      	it	eq
 800b434:	1aad      	subeq	r5, r5, r2
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	6922      	ldr	r2, [r4, #16]
 800b43a:	bf0c      	ite	eq
 800b43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b440:	2500      	movne	r5, #0
 800b442:	4293      	cmp	r3, r2
 800b444:	bfc4      	itt	gt
 800b446:	1a9b      	subgt	r3, r3, r2
 800b448:	18ed      	addgt	r5, r5, r3
 800b44a:	2600      	movs	r6, #0
 800b44c:	341a      	adds	r4, #26
 800b44e:	42b5      	cmp	r5, r6
 800b450:	d11a      	bne.n	800b488 <_printf_common+0xc8>
 800b452:	2000      	movs	r0, #0
 800b454:	e008      	b.n	800b468 <_printf_common+0xa8>
 800b456:	2301      	movs	r3, #1
 800b458:	4652      	mov	r2, sl
 800b45a:	4649      	mov	r1, r9
 800b45c:	4638      	mov	r0, r7
 800b45e:	47c0      	blx	r8
 800b460:	3001      	adds	r0, #1
 800b462:	d103      	bne.n	800b46c <_printf_common+0xac>
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46c:	3501      	adds	r5, #1
 800b46e:	e7c6      	b.n	800b3fe <_printf_common+0x3e>
 800b470:	18e1      	adds	r1, r4, r3
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	2030      	movs	r0, #48	; 0x30
 800b476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b47a:	4422      	add	r2, r4
 800b47c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b484:	3302      	adds	r3, #2
 800b486:	e7c7      	b.n	800b418 <_printf_common+0x58>
 800b488:	2301      	movs	r3, #1
 800b48a:	4622      	mov	r2, r4
 800b48c:	4649      	mov	r1, r9
 800b48e:	4638      	mov	r0, r7
 800b490:	47c0      	blx	r8
 800b492:	3001      	adds	r0, #1
 800b494:	d0e6      	beq.n	800b464 <_printf_common+0xa4>
 800b496:	3601      	adds	r6, #1
 800b498:	e7d9      	b.n	800b44e <_printf_common+0x8e>
	...

0800b49c <_printf_i>:
 800b49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	7e0f      	ldrb	r7, [r1, #24]
 800b4a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4a4:	2f78      	cmp	r7, #120	; 0x78
 800b4a6:	4691      	mov	r9, r2
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	469a      	mov	sl, r3
 800b4ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4b2:	d807      	bhi.n	800b4c4 <_printf_i+0x28>
 800b4b4:	2f62      	cmp	r7, #98	; 0x62
 800b4b6:	d80a      	bhi.n	800b4ce <_printf_i+0x32>
 800b4b8:	2f00      	cmp	r7, #0
 800b4ba:	f000 80d8 	beq.w	800b66e <_printf_i+0x1d2>
 800b4be:	2f58      	cmp	r7, #88	; 0x58
 800b4c0:	f000 80a3 	beq.w	800b60a <_printf_i+0x16e>
 800b4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4cc:	e03a      	b.n	800b544 <_printf_i+0xa8>
 800b4ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4d2:	2b15      	cmp	r3, #21
 800b4d4:	d8f6      	bhi.n	800b4c4 <_printf_i+0x28>
 800b4d6:	a101      	add	r1, pc, #4	; (adr r1, 800b4dc <_printf_i+0x40>)
 800b4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4dc:	0800b535 	.word	0x0800b535
 800b4e0:	0800b549 	.word	0x0800b549
 800b4e4:	0800b4c5 	.word	0x0800b4c5
 800b4e8:	0800b4c5 	.word	0x0800b4c5
 800b4ec:	0800b4c5 	.word	0x0800b4c5
 800b4f0:	0800b4c5 	.word	0x0800b4c5
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b4c5 	.word	0x0800b4c5
 800b4fc:	0800b4c5 	.word	0x0800b4c5
 800b500:	0800b4c5 	.word	0x0800b4c5
 800b504:	0800b4c5 	.word	0x0800b4c5
 800b508:	0800b655 	.word	0x0800b655
 800b50c:	0800b579 	.word	0x0800b579
 800b510:	0800b637 	.word	0x0800b637
 800b514:	0800b4c5 	.word	0x0800b4c5
 800b518:	0800b4c5 	.word	0x0800b4c5
 800b51c:	0800b677 	.word	0x0800b677
 800b520:	0800b4c5 	.word	0x0800b4c5
 800b524:	0800b579 	.word	0x0800b579
 800b528:	0800b4c5 	.word	0x0800b4c5
 800b52c:	0800b4c5 	.word	0x0800b4c5
 800b530:	0800b63f 	.word	0x0800b63f
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	1d1a      	adds	r2, r3, #4
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	602a      	str	r2, [r5, #0]
 800b53c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b544:	2301      	movs	r3, #1
 800b546:	e0a3      	b.n	800b690 <_printf_i+0x1f4>
 800b548:	6820      	ldr	r0, [r4, #0]
 800b54a:	6829      	ldr	r1, [r5, #0]
 800b54c:	0606      	lsls	r6, r0, #24
 800b54e:	f101 0304 	add.w	r3, r1, #4
 800b552:	d50a      	bpl.n	800b56a <_printf_i+0xce>
 800b554:	680e      	ldr	r6, [r1, #0]
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	2e00      	cmp	r6, #0
 800b55a:	da03      	bge.n	800b564 <_printf_i+0xc8>
 800b55c:	232d      	movs	r3, #45	; 0x2d
 800b55e:	4276      	negs	r6, r6
 800b560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b564:	485e      	ldr	r0, [pc, #376]	; (800b6e0 <_printf_i+0x244>)
 800b566:	230a      	movs	r3, #10
 800b568:	e019      	b.n	800b59e <_printf_i+0x102>
 800b56a:	680e      	ldr	r6, [r1, #0]
 800b56c:	602b      	str	r3, [r5, #0]
 800b56e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b572:	bf18      	it	ne
 800b574:	b236      	sxthne	r6, r6
 800b576:	e7ef      	b.n	800b558 <_printf_i+0xbc>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	6820      	ldr	r0, [r4, #0]
 800b57c:	1d19      	adds	r1, r3, #4
 800b57e:	6029      	str	r1, [r5, #0]
 800b580:	0601      	lsls	r1, r0, #24
 800b582:	d501      	bpl.n	800b588 <_printf_i+0xec>
 800b584:	681e      	ldr	r6, [r3, #0]
 800b586:	e002      	b.n	800b58e <_printf_i+0xf2>
 800b588:	0646      	lsls	r6, r0, #25
 800b58a:	d5fb      	bpl.n	800b584 <_printf_i+0xe8>
 800b58c:	881e      	ldrh	r6, [r3, #0]
 800b58e:	4854      	ldr	r0, [pc, #336]	; (800b6e0 <_printf_i+0x244>)
 800b590:	2f6f      	cmp	r7, #111	; 0x6f
 800b592:	bf0c      	ite	eq
 800b594:	2308      	moveq	r3, #8
 800b596:	230a      	movne	r3, #10
 800b598:	2100      	movs	r1, #0
 800b59a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b59e:	6865      	ldr	r5, [r4, #4]
 800b5a0:	60a5      	str	r5, [r4, #8]
 800b5a2:	2d00      	cmp	r5, #0
 800b5a4:	bfa2      	ittt	ge
 800b5a6:	6821      	ldrge	r1, [r4, #0]
 800b5a8:	f021 0104 	bicge.w	r1, r1, #4
 800b5ac:	6021      	strge	r1, [r4, #0]
 800b5ae:	b90e      	cbnz	r6, 800b5b4 <_printf_i+0x118>
 800b5b0:	2d00      	cmp	r5, #0
 800b5b2:	d04d      	beq.n	800b650 <_printf_i+0x1b4>
 800b5b4:	4615      	mov	r5, r2
 800b5b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b5be:	5dc7      	ldrb	r7, [r0, r7]
 800b5c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5c4:	4637      	mov	r7, r6
 800b5c6:	42bb      	cmp	r3, r7
 800b5c8:	460e      	mov	r6, r1
 800b5ca:	d9f4      	bls.n	800b5b6 <_printf_i+0x11a>
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d10b      	bne.n	800b5e8 <_printf_i+0x14c>
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	07de      	lsls	r6, r3, #31
 800b5d4:	d508      	bpl.n	800b5e8 <_printf_i+0x14c>
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	6861      	ldr	r1, [r4, #4]
 800b5da:	4299      	cmp	r1, r3
 800b5dc:	bfde      	ittt	le
 800b5de:	2330      	movle	r3, #48	; 0x30
 800b5e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5e8:	1b52      	subs	r2, r2, r5
 800b5ea:	6122      	str	r2, [r4, #16]
 800b5ec:	f8cd a000 	str.w	sl, [sp]
 800b5f0:	464b      	mov	r3, r9
 800b5f2:	aa03      	add	r2, sp, #12
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	f7ff fee2 	bl	800b3c0 <_printf_common>
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d14c      	bne.n	800b69a <_printf_i+0x1fe>
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	b004      	add	sp, #16
 800b606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60a:	4835      	ldr	r0, [pc, #212]	; (800b6e0 <_printf_i+0x244>)
 800b60c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b610:	6829      	ldr	r1, [r5, #0]
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	f851 6b04 	ldr.w	r6, [r1], #4
 800b618:	6029      	str	r1, [r5, #0]
 800b61a:	061d      	lsls	r5, r3, #24
 800b61c:	d514      	bpl.n	800b648 <_printf_i+0x1ac>
 800b61e:	07df      	lsls	r7, r3, #31
 800b620:	bf44      	itt	mi
 800b622:	f043 0320 	orrmi.w	r3, r3, #32
 800b626:	6023      	strmi	r3, [r4, #0]
 800b628:	b91e      	cbnz	r6, 800b632 <_printf_i+0x196>
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	f023 0320 	bic.w	r3, r3, #32
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	2310      	movs	r3, #16
 800b634:	e7b0      	b.n	800b598 <_printf_i+0xfc>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	f043 0320 	orr.w	r3, r3, #32
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	2378      	movs	r3, #120	; 0x78
 800b640:	4828      	ldr	r0, [pc, #160]	; (800b6e4 <_printf_i+0x248>)
 800b642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b646:	e7e3      	b.n	800b610 <_printf_i+0x174>
 800b648:	0659      	lsls	r1, r3, #25
 800b64a:	bf48      	it	mi
 800b64c:	b2b6      	uxthmi	r6, r6
 800b64e:	e7e6      	b.n	800b61e <_printf_i+0x182>
 800b650:	4615      	mov	r5, r2
 800b652:	e7bb      	b.n	800b5cc <_printf_i+0x130>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	6826      	ldr	r6, [r4, #0]
 800b658:	6961      	ldr	r1, [r4, #20]
 800b65a:	1d18      	adds	r0, r3, #4
 800b65c:	6028      	str	r0, [r5, #0]
 800b65e:	0635      	lsls	r5, r6, #24
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	d501      	bpl.n	800b668 <_printf_i+0x1cc>
 800b664:	6019      	str	r1, [r3, #0]
 800b666:	e002      	b.n	800b66e <_printf_i+0x1d2>
 800b668:	0670      	lsls	r0, r6, #25
 800b66a:	d5fb      	bpl.n	800b664 <_printf_i+0x1c8>
 800b66c:	8019      	strh	r1, [r3, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	4615      	mov	r5, r2
 800b674:	e7ba      	b.n	800b5ec <_printf_i+0x150>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	1d1a      	adds	r2, r3, #4
 800b67a:	602a      	str	r2, [r5, #0]
 800b67c:	681d      	ldr	r5, [r3, #0]
 800b67e:	6862      	ldr	r2, [r4, #4]
 800b680:	2100      	movs	r1, #0
 800b682:	4628      	mov	r0, r5
 800b684:	f7f4 fdb4 	bl	80001f0 <memchr>
 800b688:	b108      	cbz	r0, 800b68e <_printf_i+0x1f2>
 800b68a:	1b40      	subs	r0, r0, r5
 800b68c:	6060      	str	r0, [r4, #4]
 800b68e:	6863      	ldr	r3, [r4, #4]
 800b690:	6123      	str	r3, [r4, #16]
 800b692:	2300      	movs	r3, #0
 800b694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b698:	e7a8      	b.n	800b5ec <_printf_i+0x150>
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	462a      	mov	r2, r5
 800b69e:	4649      	mov	r1, r9
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	47d0      	blx	sl
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d0ab      	beq.n	800b600 <_printf_i+0x164>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	079b      	lsls	r3, r3, #30
 800b6ac:	d413      	bmi.n	800b6d6 <_printf_i+0x23a>
 800b6ae:	68e0      	ldr	r0, [r4, #12]
 800b6b0:	9b03      	ldr	r3, [sp, #12]
 800b6b2:	4298      	cmp	r0, r3
 800b6b4:	bfb8      	it	lt
 800b6b6:	4618      	movlt	r0, r3
 800b6b8:	e7a4      	b.n	800b604 <_printf_i+0x168>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4649      	mov	r1, r9
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	47d0      	blx	sl
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d09b      	beq.n	800b600 <_printf_i+0x164>
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	68e3      	ldr	r3, [r4, #12]
 800b6cc:	9903      	ldr	r1, [sp, #12]
 800b6ce:	1a5b      	subs	r3, r3, r1
 800b6d0:	42ab      	cmp	r3, r5
 800b6d2:	dcf2      	bgt.n	800b6ba <_printf_i+0x21e>
 800b6d4:	e7eb      	b.n	800b6ae <_printf_i+0x212>
 800b6d6:	2500      	movs	r5, #0
 800b6d8:	f104 0619 	add.w	r6, r4, #25
 800b6dc:	e7f5      	b.n	800b6ca <_printf_i+0x22e>
 800b6de:	bf00      	nop
 800b6e0:	080193be 	.word	0x080193be
 800b6e4:	080193cf 	.word	0x080193cf

0800b6e8 <siprintf>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	b500      	push	{lr}
 800b6ec:	b09c      	sub	sp, #112	; 0x70
 800b6ee:	ab1d      	add	r3, sp, #116	; 0x74
 800b6f0:	9002      	str	r0, [sp, #8]
 800b6f2:	9006      	str	r0, [sp, #24]
 800b6f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6f8:	4809      	ldr	r0, [pc, #36]	; (800b720 <siprintf+0x38>)
 800b6fa:	9107      	str	r1, [sp, #28]
 800b6fc:	9104      	str	r1, [sp, #16]
 800b6fe:	4909      	ldr	r1, [pc, #36]	; (800b724 <siprintf+0x3c>)
 800b700:	f853 2b04 	ldr.w	r2, [r3], #4
 800b704:	9105      	str	r1, [sp, #20]
 800b706:	6800      	ldr	r0, [r0, #0]
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	a902      	add	r1, sp, #8
 800b70c:	f001 fb76 	bl	800cdfc <_svfiprintf_r>
 800b710:	9b02      	ldr	r3, [sp, #8]
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	b01c      	add	sp, #112	; 0x70
 800b718:	f85d eb04 	ldr.w	lr, [sp], #4
 800b71c:	b003      	add	sp, #12
 800b71e:	4770      	bx	lr
 800b720:	200000b4 	.word	0x200000b4
 800b724:	ffff0208 	.word	0xffff0208

0800b728 <quorem>:
 800b728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	6903      	ldr	r3, [r0, #16]
 800b72e:	690c      	ldr	r4, [r1, #16]
 800b730:	42a3      	cmp	r3, r4
 800b732:	4607      	mov	r7, r0
 800b734:	f2c0 8081 	blt.w	800b83a <quorem+0x112>
 800b738:	3c01      	subs	r4, #1
 800b73a:	f101 0814 	add.w	r8, r1, #20
 800b73e:	f100 0514 	add.w	r5, r0, #20
 800b742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b74c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b750:	3301      	adds	r3, #1
 800b752:	429a      	cmp	r2, r3
 800b754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b75c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b760:	d331      	bcc.n	800b7c6 <quorem+0x9e>
 800b762:	f04f 0e00 	mov.w	lr, #0
 800b766:	4640      	mov	r0, r8
 800b768:	46ac      	mov	ip, r5
 800b76a:	46f2      	mov	sl, lr
 800b76c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b770:	b293      	uxth	r3, r2
 800b772:	fb06 e303 	mla	r3, r6, r3, lr
 800b776:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	ebaa 0303 	sub.w	r3, sl, r3
 800b780:	f8dc a000 	ldr.w	sl, [ip]
 800b784:	0c12      	lsrs	r2, r2, #16
 800b786:	fa13 f38a 	uxtah	r3, r3, sl
 800b78a:	fb06 e202 	mla	r2, r6, r2, lr
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	9b00      	ldr	r3, [sp, #0]
 800b792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b796:	b292      	uxth	r2, r2
 800b798:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b79c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7a4:	4581      	cmp	r9, r0
 800b7a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7aa:	f84c 3b04 	str.w	r3, [ip], #4
 800b7ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7b2:	d2db      	bcs.n	800b76c <quorem+0x44>
 800b7b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7b8:	b92b      	cbnz	r3, 800b7c6 <quorem+0x9e>
 800b7ba:	9b01      	ldr	r3, [sp, #4]
 800b7bc:	3b04      	subs	r3, #4
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	d32e      	bcc.n	800b822 <quorem+0xfa>
 800b7c4:	613c      	str	r4, [r7, #16]
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f001 f8c4 	bl	800c954 <__mcmp>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	db24      	blt.n	800b81a <quorem+0xf2>
 800b7d0:	3601      	adds	r6, #1
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f04f 0c00 	mov.w	ip, #0
 800b7d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7dc:	f8d0 e000 	ldr.w	lr, [r0]
 800b7e0:	b293      	uxth	r3, r2
 800b7e2:	ebac 0303 	sub.w	r3, ip, r3
 800b7e6:	0c12      	lsrs	r2, r2, #16
 800b7e8:	fa13 f38e 	uxtah	r3, r3, lr
 800b7ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7fa:	45c1      	cmp	r9, r8
 800b7fc:	f840 3b04 	str.w	r3, [r0], #4
 800b800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b804:	d2e8      	bcs.n	800b7d8 <quorem+0xb0>
 800b806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b80a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b80e:	b922      	cbnz	r2, 800b81a <quorem+0xf2>
 800b810:	3b04      	subs	r3, #4
 800b812:	429d      	cmp	r5, r3
 800b814:	461a      	mov	r2, r3
 800b816:	d30a      	bcc.n	800b82e <quorem+0x106>
 800b818:	613c      	str	r4, [r7, #16]
 800b81a:	4630      	mov	r0, r6
 800b81c:	b003      	add	sp, #12
 800b81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b822:	6812      	ldr	r2, [r2, #0]
 800b824:	3b04      	subs	r3, #4
 800b826:	2a00      	cmp	r2, #0
 800b828:	d1cc      	bne.n	800b7c4 <quorem+0x9c>
 800b82a:	3c01      	subs	r4, #1
 800b82c:	e7c7      	b.n	800b7be <quorem+0x96>
 800b82e:	6812      	ldr	r2, [r2, #0]
 800b830:	3b04      	subs	r3, #4
 800b832:	2a00      	cmp	r2, #0
 800b834:	d1f0      	bne.n	800b818 <quorem+0xf0>
 800b836:	3c01      	subs	r4, #1
 800b838:	e7eb      	b.n	800b812 <quorem+0xea>
 800b83a:	2000      	movs	r0, #0
 800b83c:	e7ee      	b.n	800b81c <quorem+0xf4>
	...

0800b840 <_dtoa_r>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	ed2d 8b04 	vpush	{d8-d9}
 800b848:	ec57 6b10 	vmov	r6, r7, d0
 800b84c:	b093      	sub	sp, #76	; 0x4c
 800b84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b854:	9106      	str	r1, [sp, #24]
 800b856:	ee10 aa10 	vmov	sl, s0
 800b85a:	4604      	mov	r4, r0
 800b85c:	9209      	str	r2, [sp, #36]	; 0x24
 800b85e:	930c      	str	r3, [sp, #48]	; 0x30
 800b860:	46bb      	mov	fp, r7
 800b862:	b975      	cbnz	r5, 800b882 <_dtoa_r+0x42>
 800b864:	2010      	movs	r0, #16
 800b866:	f000 fddd 	bl	800c424 <malloc>
 800b86a:	4602      	mov	r2, r0
 800b86c:	6260      	str	r0, [r4, #36]	; 0x24
 800b86e:	b920      	cbnz	r0, 800b87a <_dtoa_r+0x3a>
 800b870:	4ba7      	ldr	r3, [pc, #668]	; (800bb10 <_dtoa_r+0x2d0>)
 800b872:	21ea      	movs	r1, #234	; 0xea
 800b874:	48a7      	ldr	r0, [pc, #668]	; (800bb14 <_dtoa_r+0x2d4>)
 800b876:	f001 fbd1 	bl	800d01c <__assert_func>
 800b87a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b87e:	6005      	str	r5, [r0, #0]
 800b880:	60c5      	str	r5, [r0, #12]
 800b882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b884:	6819      	ldr	r1, [r3, #0]
 800b886:	b151      	cbz	r1, 800b89e <_dtoa_r+0x5e>
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	604a      	str	r2, [r1, #4]
 800b88c:	2301      	movs	r3, #1
 800b88e:	4093      	lsls	r3, r2
 800b890:	608b      	str	r3, [r1, #8]
 800b892:	4620      	mov	r0, r4
 800b894:	f000 fe1c 	bl	800c4d0 <_Bfree>
 800b898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	1e3b      	subs	r3, r7, #0
 800b8a0:	bfaa      	itet	ge
 800b8a2:	2300      	movge	r3, #0
 800b8a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b8a8:	f8c8 3000 	strge.w	r3, [r8]
 800b8ac:	4b9a      	ldr	r3, [pc, #616]	; (800bb18 <_dtoa_r+0x2d8>)
 800b8ae:	bfbc      	itt	lt
 800b8b0:	2201      	movlt	r2, #1
 800b8b2:	f8c8 2000 	strlt.w	r2, [r8]
 800b8b6:	ea33 030b 	bics.w	r3, r3, fp
 800b8ba:	d11b      	bne.n	800b8f4 <_dtoa_r+0xb4>
 800b8bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8be:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8c8:	4333      	orrs	r3, r6
 800b8ca:	f000 8592 	beq.w	800c3f2 <_dtoa_r+0xbb2>
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	b963      	cbnz	r3, 800b8ec <_dtoa_r+0xac>
 800b8d2:	4b92      	ldr	r3, [pc, #584]	; (800bb1c <_dtoa_r+0x2dc>)
 800b8d4:	e022      	b.n	800b91c <_dtoa_r+0xdc>
 800b8d6:	4b92      	ldr	r3, [pc, #584]	; (800bb20 <_dtoa_r+0x2e0>)
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	9801      	ldr	r0, [sp, #4]
 800b8e2:	b013      	add	sp, #76	; 0x4c
 800b8e4:	ecbd 8b04 	vpop	{d8-d9}
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	4b8b      	ldr	r3, [pc, #556]	; (800bb1c <_dtoa_r+0x2dc>)
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	3303      	adds	r3, #3
 800b8f2:	e7f3      	b.n	800b8dc <_dtoa_r+0x9c>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	4659      	mov	r1, fp
 800b8fc:	f7f5 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 800b900:	ec4b ab19 	vmov	d9, sl, fp
 800b904:	4680      	mov	r8, r0
 800b906:	b158      	cbz	r0, 800b920 <_dtoa_r+0xe0>
 800b908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b90a:	2301      	movs	r3, #1
 800b90c:	6013      	str	r3, [r2, #0]
 800b90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 856b 	beq.w	800c3ec <_dtoa_r+0xbac>
 800b916:	4883      	ldr	r0, [pc, #524]	; (800bb24 <_dtoa_r+0x2e4>)
 800b918:	6018      	str	r0, [r3, #0]
 800b91a:	1e43      	subs	r3, r0, #1
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	e7df      	b.n	800b8e0 <_dtoa_r+0xa0>
 800b920:	ec4b ab10 	vmov	d0, sl, fp
 800b924:	aa10      	add	r2, sp, #64	; 0x40
 800b926:	a911      	add	r1, sp, #68	; 0x44
 800b928:	4620      	mov	r0, r4
 800b92a:	f001 f8b9 	bl	800caa0 <__d2b>
 800b92e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b932:	ee08 0a10 	vmov	s16, r0
 800b936:	2d00      	cmp	r5, #0
 800b938:	f000 8084 	beq.w	800ba44 <_dtoa_r+0x204>
 800b93c:	ee19 3a90 	vmov	r3, s19
 800b940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b944:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b948:	4656      	mov	r6, sl
 800b94a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b952:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b956:	4b74      	ldr	r3, [pc, #464]	; (800bb28 <_dtoa_r+0x2e8>)
 800b958:	2200      	movs	r2, #0
 800b95a:	4630      	mov	r0, r6
 800b95c:	4639      	mov	r1, r7
 800b95e:	f7f4 fc9b 	bl	8000298 <__aeabi_dsub>
 800b962:	a365      	add	r3, pc, #404	; (adr r3, 800baf8 <_dtoa_r+0x2b8>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fe4e 	bl	8000608 <__aeabi_dmul>
 800b96c:	a364      	add	r3, pc, #400	; (adr r3, 800bb00 <_dtoa_r+0x2c0>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fc93 	bl	800029c <__adddf3>
 800b976:	4606      	mov	r6, r0
 800b978:	4628      	mov	r0, r5
 800b97a:	460f      	mov	r7, r1
 800b97c:	f7f4 fdda 	bl	8000534 <__aeabi_i2d>
 800b980:	a361      	add	r3, pc, #388	; (adr r3, 800bb08 <_dtoa_r+0x2c8>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fe3f 	bl	8000608 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	f7f4 fc83 	bl	800029c <__adddf3>
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	f7f5 f8e5 	bl	8000b68 <__aeabi_d2iz>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	9000      	str	r0, [sp, #0]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f5 f8a0 	bl	8000aec <__aeabi_dcmplt>
 800b9ac:	b150      	cbz	r0, 800b9c4 <_dtoa_r+0x184>
 800b9ae:	9800      	ldr	r0, [sp, #0]
 800b9b0:	f7f4 fdc0 	bl	8000534 <__aeabi_i2d>
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	f7f5 f88e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9bc:	b910      	cbnz	r0, 800b9c4 <_dtoa_r+0x184>
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	9b00      	ldr	r3, [sp, #0]
 800b9c6:	2b16      	cmp	r3, #22
 800b9c8:	d85a      	bhi.n	800ba80 <_dtoa_r+0x240>
 800b9ca:	9a00      	ldr	r2, [sp, #0]
 800b9cc:	4b57      	ldr	r3, [pc, #348]	; (800bb2c <_dtoa_r+0x2ec>)
 800b9ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	ec51 0b19 	vmov	r0, r1, d9
 800b9da:	f7f5 f887 	bl	8000aec <__aeabi_dcmplt>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d050      	beq.n	800ba84 <_dtoa_r+0x244>
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ee:	1b5d      	subs	r5, r3, r5
 800b9f0:	1e6b      	subs	r3, r5, #1
 800b9f2:	9305      	str	r3, [sp, #20]
 800b9f4:	bf45      	ittet	mi
 800b9f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9fa:	9304      	strmi	r3, [sp, #16]
 800b9fc:	2300      	movpl	r3, #0
 800b9fe:	2300      	movmi	r3, #0
 800ba00:	bf4c      	ite	mi
 800ba02:	9305      	strmi	r3, [sp, #20]
 800ba04:	9304      	strpl	r3, [sp, #16]
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	db3d      	blt.n	800ba88 <_dtoa_r+0x248>
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	9a00      	ldr	r2, [sp, #0]
 800ba10:	920a      	str	r2, [sp, #40]	; 0x28
 800ba12:	4413      	add	r3, r2
 800ba14:	9305      	str	r3, [sp, #20]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	2b09      	cmp	r3, #9
 800ba1e:	f200 8089 	bhi.w	800bb34 <_dtoa_r+0x2f4>
 800ba22:	2b05      	cmp	r3, #5
 800ba24:	bfc4      	itt	gt
 800ba26:	3b04      	subgt	r3, #4
 800ba28:	9306      	strgt	r3, [sp, #24]
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	f1a3 0302 	sub.w	r3, r3, #2
 800ba30:	bfcc      	ite	gt
 800ba32:	2500      	movgt	r5, #0
 800ba34:	2501      	movle	r5, #1
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	f200 8087 	bhi.w	800bb4a <_dtoa_r+0x30a>
 800ba3c:	e8df f003 	tbb	[pc, r3]
 800ba40:	59383a2d 	.word	0x59383a2d
 800ba44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba48:	441d      	add	r5, r3
 800ba4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	bfc1      	itttt	gt
 800ba52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba62:	bfda      	itte	le
 800ba64:	f1c3 0320 	rsble	r3, r3, #32
 800ba68:	fa06 f003 	lslle.w	r0, r6, r3
 800ba6c:	4318      	orrgt	r0, r3
 800ba6e:	f7f4 fd51 	bl	8000514 <__aeabi_ui2d>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4606      	mov	r6, r0
 800ba76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba7a:	3d01      	subs	r5, #1
 800ba7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba7e:	e76a      	b.n	800b956 <_dtoa_r+0x116>
 800ba80:	2301      	movs	r3, #1
 800ba82:	e7b2      	b.n	800b9ea <_dtoa_r+0x1aa>
 800ba84:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba86:	e7b1      	b.n	800b9ec <_dtoa_r+0x1ac>
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	9a00      	ldr	r2, [sp, #0]
 800ba8c:	1a9b      	subs	r3, r3, r2
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	4253      	negs	r3, r2
 800ba92:	9307      	str	r3, [sp, #28]
 800ba94:	2300      	movs	r3, #0
 800ba96:	930a      	str	r3, [sp, #40]	; 0x28
 800ba98:	e7bf      	b.n	800ba1a <_dtoa_r+0x1da>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	9308      	str	r3, [sp, #32]
 800ba9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	dc55      	bgt.n	800bb50 <_dtoa_r+0x310>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baaa:	461a      	mov	r2, r3
 800baac:	9209      	str	r2, [sp, #36]	; 0x24
 800baae:	e00c      	b.n	800baca <_dtoa_r+0x28a>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e7f3      	b.n	800ba9c <_dtoa_r+0x25c>
 800bab4:	2300      	movs	r3, #0
 800bab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab8:	9308      	str	r3, [sp, #32]
 800baba:	9b00      	ldr	r3, [sp, #0]
 800babc:	4413      	add	r3, r2
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	3301      	adds	r3, #1
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	bfb8      	it	lt
 800bac8:	2301      	movlt	r3, #1
 800baca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bacc:	2200      	movs	r2, #0
 800bace:	6042      	str	r2, [r0, #4]
 800bad0:	2204      	movs	r2, #4
 800bad2:	f102 0614 	add.w	r6, r2, #20
 800bad6:	429e      	cmp	r6, r3
 800bad8:	6841      	ldr	r1, [r0, #4]
 800bada:	d93d      	bls.n	800bb58 <_dtoa_r+0x318>
 800badc:	4620      	mov	r0, r4
 800bade:	f000 fcb7 	bl	800c450 <_Balloc>
 800bae2:	9001      	str	r0, [sp, #4]
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d13b      	bne.n	800bb60 <_dtoa_r+0x320>
 800bae8:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <_dtoa_r+0x2f0>)
 800baea:	4602      	mov	r2, r0
 800baec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800baf0:	e6c0      	b.n	800b874 <_dtoa_r+0x34>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7df      	b.n	800bab6 <_dtoa_r+0x276>
 800baf6:	bf00      	nop
 800baf8:	636f4361 	.word	0x636f4361
 800bafc:	3fd287a7 	.word	0x3fd287a7
 800bb00:	8b60c8b3 	.word	0x8b60c8b3
 800bb04:	3fc68a28 	.word	0x3fc68a28
 800bb08:	509f79fb 	.word	0x509f79fb
 800bb0c:	3fd34413 	.word	0x3fd34413
 800bb10:	080193ed 	.word	0x080193ed
 800bb14:	08019404 	.word	0x08019404
 800bb18:	7ff00000 	.word	0x7ff00000
 800bb1c:	080193e9 	.word	0x080193e9
 800bb20:	080193e0 	.word	0x080193e0
 800bb24:	080193bd 	.word	0x080193bd
 800bb28:	3ff80000 	.word	0x3ff80000
 800bb2c:	080194f8 	.word	0x080194f8
 800bb30:	0801945f 	.word	0x0801945f
 800bb34:	2501      	movs	r5, #1
 800bb36:	2300      	movs	r3, #0
 800bb38:	9306      	str	r3, [sp, #24]
 800bb3a:	9508      	str	r5, [sp, #32]
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb44:	2200      	movs	r2, #0
 800bb46:	2312      	movs	r3, #18
 800bb48:	e7b0      	b.n	800baac <_dtoa_r+0x26c>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	9308      	str	r3, [sp, #32]
 800bb4e:	e7f5      	b.n	800bb3c <_dtoa_r+0x2fc>
 800bb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb56:	e7b8      	b.n	800baca <_dtoa_r+0x28a>
 800bb58:	3101      	adds	r1, #1
 800bb5a:	6041      	str	r1, [r0, #4]
 800bb5c:	0052      	lsls	r2, r2, #1
 800bb5e:	e7b8      	b.n	800bad2 <_dtoa_r+0x292>
 800bb60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb62:	9a01      	ldr	r2, [sp, #4]
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	2b0e      	cmp	r3, #14
 800bb6a:	f200 809d 	bhi.w	800bca8 <_dtoa_r+0x468>
 800bb6e:	2d00      	cmp	r5, #0
 800bb70:	f000 809a 	beq.w	800bca8 <_dtoa_r+0x468>
 800bb74:	9b00      	ldr	r3, [sp, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	dd32      	ble.n	800bbe0 <_dtoa_r+0x3a0>
 800bb7a:	4ab7      	ldr	r2, [pc, #732]	; (800be58 <_dtoa_r+0x618>)
 800bb7c:	f003 030f 	and.w	r3, r3, #15
 800bb80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb88:	9b00      	ldr	r3, [sp, #0]
 800bb8a:	05d8      	lsls	r0, r3, #23
 800bb8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb90:	d516      	bpl.n	800bbc0 <_dtoa_r+0x380>
 800bb92:	4bb2      	ldr	r3, [pc, #712]	; (800be5c <_dtoa_r+0x61c>)
 800bb94:	ec51 0b19 	vmov	r0, r1, d9
 800bb98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb9c:	f7f4 fe5e 	bl	800085c <__aeabi_ddiv>
 800bba0:	f007 070f 	and.w	r7, r7, #15
 800bba4:	4682      	mov	sl, r0
 800bba6:	468b      	mov	fp, r1
 800bba8:	2503      	movs	r5, #3
 800bbaa:	4eac      	ldr	r6, [pc, #688]	; (800be5c <_dtoa_r+0x61c>)
 800bbac:	b957      	cbnz	r7, 800bbc4 <_dtoa_r+0x384>
 800bbae:	4642      	mov	r2, r8
 800bbb0:	464b      	mov	r3, r9
 800bbb2:	4650      	mov	r0, sl
 800bbb4:	4659      	mov	r1, fp
 800bbb6:	f7f4 fe51 	bl	800085c <__aeabi_ddiv>
 800bbba:	4682      	mov	sl, r0
 800bbbc:	468b      	mov	fp, r1
 800bbbe:	e028      	b.n	800bc12 <_dtoa_r+0x3d2>
 800bbc0:	2502      	movs	r5, #2
 800bbc2:	e7f2      	b.n	800bbaa <_dtoa_r+0x36a>
 800bbc4:	07f9      	lsls	r1, r7, #31
 800bbc6:	d508      	bpl.n	800bbda <_dtoa_r+0x39a>
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4649      	mov	r1, r9
 800bbcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbd0:	f7f4 fd1a 	bl	8000608 <__aeabi_dmul>
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4689      	mov	r9, r1
 800bbda:	107f      	asrs	r7, r7, #1
 800bbdc:	3608      	adds	r6, #8
 800bbde:	e7e5      	b.n	800bbac <_dtoa_r+0x36c>
 800bbe0:	f000 809b 	beq.w	800bd1a <_dtoa_r+0x4da>
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	4f9d      	ldr	r7, [pc, #628]	; (800be5c <_dtoa_r+0x61c>)
 800bbe8:	425e      	negs	r6, r3
 800bbea:	4b9b      	ldr	r3, [pc, #620]	; (800be58 <_dtoa_r+0x618>)
 800bbec:	f006 020f 	and.w	r2, r6, #15
 800bbf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	ec51 0b19 	vmov	r0, r1, d9
 800bbfc:	f7f4 fd04 	bl	8000608 <__aeabi_dmul>
 800bc00:	1136      	asrs	r6, r6, #4
 800bc02:	4682      	mov	sl, r0
 800bc04:	468b      	mov	fp, r1
 800bc06:	2300      	movs	r3, #0
 800bc08:	2502      	movs	r5, #2
 800bc0a:	2e00      	cmp	r6, #0
 800bc0c:	d17a      	bne.n	800bd04 <_dtoa_r+0x4c4>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1d3      	bne.n	800bbba <_dtoa_r+0x37a>
 800bc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8082 	beq.w	800bd1e <_dtoa_r+0x4de>
 800bc1a:	4b91      	ldr	r3, [pc, #580]	; (800be60 <_dtoa_r+0x620>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4650      	mov	r0, sl
 800bc20:	4659      	mov	r1, fp
 800bc22:	f7f4 ff63 	bl	8000aec <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d079      	beq.n	800bd1e <_dtoa_r+0x4de>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d076      	beq.n	800bd1e <_dtoa_r+0x4de>
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dd36      	ble.n	800bca4 <_dtoa_r+0x464>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	4650      	mov	r0, sl
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	1e5f      	subs	r7, r3, #1
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4b88      	ldr	r3, [pc, #544]	; (800be64 <_dtoa_r+0x624>)
 800bc42:	f7f4 fce1 	bl	8000608 <__aeabi_dmul>
 800bc46:	9e02      	ldr	r6, [sp, #8]
 800bc48:	4682      	mov	sl, r0
 800bc4a:	468b      	mov	fp, r1
 800bc4c:	3501      	adds	r5, #1
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f7f4 fc70 	bl	8000534 <__aeabi_i2d>
 800bc54:	4652      	mov	r2, sl
 800bc56:	465b      	mov	r3, fp
 800bc58:	f7f4 fcd6 	bl	8000608 <__aeabi_dmul>
 800bc5c:	4b82      	ldr	r3, [pc, #520]	; (800be68 <_dtoa_r+0x628>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f7f4 fb1c 	bl	800029c <__adddf3>
 800bc64:	46d0      	mov	r8, sl
 800bc66:	46d9      	mov	r9, fp
 800bc68:	4682      	mov	sl, r0
 800bc6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d158      	bne.n	800bd24 <_dtoa_r+0x4e4>
 800bc72:	4b7e      	ldr	r3, [pc, #504]	; (800be6c <_dtoa_r+0x62c>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	f7f4 fb0d 	bl	8000298 <__aeabi_dsub>
 800bc7e:	4652      	mov	r2, sl
 800bc80:	465b      	mov	r3, fp
 800bc82:	4680      	mov	r8, r0
 800bc84:	4689      	mov	r9, r1
 800bc86:	f7f4 ff4f 	bl	8000b28 <__aeabi_dcmpgt>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f040 8295 	bne.w	800c1ba <_dtoa_r+0x97a>
 800bc90:	4652      	mov	r2, sl
 800bc92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	f7f4 ff27 	bl	8000aec <__aeabi_dcmplt>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f040 8289 	bne.w	800c1b6 <_dtoa_r+0x976>
 800bca4:	ec5b ab19 	vmov	sl, fp, d9
 800bca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f2c0 8148 	blt.w	800bf40 <_dtoa_r+0x700>
 800bcb0:	9a00      	ldr	r2, [sp, #0]
 800bcb2:	2a0e      	cmp	r2, #14
 800bcb4:	f300 8144 	bgt.w	800bf40 <_dtoa_r+0x700>
 800bcb8:	4b67      	ldr	r3, [pc, #412]	; (800be58 <_dtoa_r+0x618>)
 800bcba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f280 80d5 	bge.w	800be74 <_dtoa_r+0x634>
 800bcca:	9b03      	ldr	r3, [sp, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f300 80d1 	bgt.w	800be74 <_dtoa_r+0x634>
 800bcd2:	f040 826f 	bne.w	800c1b4 <_dtoa_r+0x974>
 800bcd6:	4b65      	ldr	r3, [pc, #404]	; (800be6c <_dtoa_r+0x62c>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fc93 	bl	8000608 <__aeabi_dmul>
 800bce2:	4652      	mov	r2, sl
 800bce4:	465b      	mov	r3, fp
 800bce6:	f7f4 ff15 	bl	8000b14 <__aeabi_dcmpge>
 800bcea:	9e03      	ldr	r6, [sp, #12]
 800bcec:	4637      	mov	r7, r6
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f040 8245 	bne.w	800c17e <_dtoa_r+0x93e>
 800bcf4:	9d01      	ldr	r5, [sp, #4]
 800bcf6:	2331      	movs	r3, #49	; 0x31
 800bcf8:	f805 3b01 	strb.w	r3, [r5], #1
 800bcfc:	9b00      	ldr	r3, [sp, #0]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	e240      	b.n	800c186 <_dtoa_r+0x946>
 800bd04:	07f2      	lsls	r2, r6, #31
 800bd06:	d505      	bpl.n	800bd14 <_dtoa_r+0x4d4>
 800bd08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd0c:	f7f4 fc7c 	bl	8000608 <__aeabi_dmul>
 800bd10:	3501      	adds	r5, #1
 800bd12:	2301      	movs	r3, #1
 800bd14:	1076      	asrs	r6, r6, #1
 800bd16:	3708      	adds	r7, #8
 800bd18:	e777      	b.n	800bc0a <_dtoa_r+0x3ca>
 800bd1a:	2502      	movs	r5, #2
 800bd1c:	e779      	b.n	800bc12 <_dtoa_r+0x3d2>
 800bd1e:	9f00      	ldr	r7, [sp, #0]
 800bd20:	9e03      	ldr	r6, [sp, #12]
 800bd22:	e794      	b.n	800bc4e <_dtoa_r+0x40e>
 800bd24:	9901      	ldr	r1, [sp, #4]
 800bd26:	4b4c      	ldr	r3, [pc, #304]	; (800be58 <_dtoa_r+0x618>)
 800bd28:	4431      	add	r1, r6
 800bd2a:	910d      	str	r1, [sp, #52]	; 0x34
 800bd2c:	9908      	ldr	r1, [sp, #32]
 800bd2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	d043      	beq.n	800bdc2 <_dtoa_r+0x582>
 800bd3a:	494d      	ldr	r1, [pc, #308]	; (800be70 <_dtoa_r+0x630>)
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f7f4 fd8d 	bl	800085c <__aeabi_ddiv>
 800bd42:	4652      	mov	r2, sl
 800bd44:	465b      	mov	r3, fp
 800bd46:	f7f4 faa7 	bl	8000298 <__aeabi_dsub>
 800bd4a:	9d01      	ldr	r5, [sp, #4]
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	468b      	mov	fp, r1
 800bd50:	4649      	mov	r1, r9
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7f4 ff08 	bl	8000b68 <__aeabi_d2iz>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	f7f4 fbeb 	bl	8000534 <__aeabi_i2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	f7f4 fa97 	bl	8000298 <__aeabi_dsub>
 800bd6a:	3630      	adds	r6, #48	; 0x30
 800bd6c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd70:	4652      	mov	r2, sl
 800bd72:	465b      	mov	r3, fp
 800bd74:	4680      	mov	r8, r0
 800bd76:	4689      	mov	r9, r1
 800bd78:	f7f4 feb8 	bl	8000aec <__aeabi_dcmplt>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d163      	bne.n	800be48 <_dtoa_r+0x608>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	4936      	ldr	r1, [pc, #216]	; (800be60 <_dtoa_r+0x620>)
 800bd86:	2000      	movs	r0, #0
 800bd88:	f7f4 fa86 	bl	8000298 <__aeabi_dsub>
 800bd8c:	4652      	mov	r2, sl
 800bd8e:	465b      	mov	r3, fp
 800bd90:	f7f4 feac 	bl	8000aec <__aeabi_dcmplt>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	f040 80b5 	bne.w	800bf04 <_dtoa_r+0x6c4>
 800bd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd9c:	429d      	cmp	r5, r3
 800bd9e:	d081      	beq.n	800bca4 <_dtoa_r+0x464>
 800bda0:	4b30      	ldr	r3, [pc, #192]	; (800be64 <_dtoa_r+0x624>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	f7f4 fc2e 	bl	8000608 <__aeabi_dmul>
 800bdac:	4b2d      	ldr	r3, [pc, #180]	; (800be64 <_dtoa_r+0x624>)
 800bdae:	4682      	mov	sl, r0
 800bdb0:	468b      	mov	fp, r1
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f7f4 fc26 	bl	8000608 <__aeabi_dmul>
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	e7c6      	b.n	800bd50 <_dtoa_r+0x510>
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	f7f4 fc1f 	bl	8000608 <__aeabi_dmul>
 800bdca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdcc:	9d01      	ldr	r5, [sp, #4]
 800bdce:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	468b      	mov	fp, r1
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	f7f4 fec6 	bl	8000b68 <__aeabi_d2iz>
 800bddc:	4606      	mov	r6, r0
 800bdde:	f7f4 fba9 	bl	8000534 <__aeabi_i2d>
 800bde2:	3630      	adds	r6, #48	; 0x30
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 fa54 	bl	8000298 <__aeabi_dsub>
 800bdf0:	f805 6b01 	strb.w	r6, [r5], #1
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf6:	429d      	cmp	r5, r3
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	4689      	mov	r9, r1
 800bdfc:	f04f 0200 	mov.w	r2, #0
 800be00:	d124      	bne.n	800be4c <_dtoa_r+0x60c>
 800be02:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <_dtoa_r+0x630>)
 800be04:	4650      	mov	r0, sl
 800be06:	4659      	mov	r1, fp
 800be08:	f7f4 fa48 	bl	800029c <__adddf3>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4640      	mov	r0, r8
 800be12:	4649      	mov	r1, r9
 800be14:	f7f4 fe88 	bl	8000b28 <__aeabi_dcmpgt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d173      	bne.n	800bf04 <_dtoa_r+0x6c4>
 800be1c:	4652      	mov	r2, sl
 800be1e:	465b      	mov	r3, fp
 800be20:	4913      	ldr	r1, [pc, #76]	; (800be70 <_dtoa_r+0x630>)
 800be22:	2000      	movs	r0, #0
 800be24:	f7f4 fa38 	bl	8000298 <__aeabi_dsub>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4640      	mov	r0, r8
 800be2e:	4649      	mov	r1, r9
 800be30:	f7f4 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800be34:	2800      	cmp	r0, #0
 800be36:	f43f af35 	beq.w	800bca4 <_dtoa_r+0x464>
 800be3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be3c:	1e6b      	subs	r3, r5, #1
 800be3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be44:	2b30      	cmp	r3, #48	; 0x30
 800be46:	d0f8      	beq.n	800be3a <_dtoa_r+0x5fa>
 800be48:	9700      	str	r7, [sp, #0]
 800be4a:	e049      	b.n	800bee0 <_dtoa_r+0x6a0>
 800be4c:	4b05      	ldr	r3, [pc, #20]	; (800be64 <_dtoa_r+0x624>)
 800be4e:	f7f4 fbdb 	bl	8000608 <__aeabi_dmul>
 800be52:	4680      	mov	r8, r0
 800be54:	4689      	mov	r9, r1
 800be56:	e7bd      	b.n	800bdd4 <_dtoa_r+0x594>
 800be58:	080194f8 	.word	0x080194f8
 800be5c:	080194d0 	.word	0x080194d0
 800be60:	3ff00000 	.word	0x3ff00000
 800be64:	40240000 	.word	0x40240000
 800be68:	401c0000 	.word	0x401c0000
 800be6c:	40140000 	.word	0x40140000
 800be70:	3fe00000 	.word	0x3fe00000
 800be74:	9d01      	ldr	r5, [sp, #4]
 800be76:	4656      	mov	r6, sl
 800be78:	465f      	mov	r7, fp
 800be7a:	4642      	mov	r2, r8
 800be7c:	464b      	mov	r3, r9
 800be7e:	4630      	mov	r0, r6
 800be80:	4639      	mov	r1, r7
 800be82:	f7f4 fceb 	bl	800085c <__aeabi_ddiv>
 800be86:	f7f4 fe6f 	bl	8000b68 <__aeabi_d2iz>
 800be8a:	4682      	mov	sl, r0
 800be8c:	f7f4 fb52 	bl	8000534 <__aeabi_i2d>
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	f7f4 fbb8 	bl	8000608 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bea4:	f7f4 f9f8 	bl	8000298 <__aeabi_dsub>
 800bea8:	f805 6b01 	strb.w	r6, [r5], #1
 800beac:	9e01      	ldr	r6, [sp, #4]
 800beae:	9f03      	ldr	r7, [sp, #12]
 800beb0:	1bae      	subs	r6, r5, r6
 800beb2:	42b7      	cmp	r7, r6
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	d135      	bne.n	800bf26 <_dtoa_r+0x6e6>
 800beba:	f7f4 f9ef 	bl	800029c <__adddf3>
 800bebe:	4642      	mov	r2, r8
 800bec0:	464b      	mov	r3, r9
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	f7f4 fe2f 	bl	8000b28 <__aeabi_dcmpgt>
 800beca:	b9d0      	cbnz	r0, 800bf02 <_dtoa_r+0x6c2>
 800becc:	4642      	mov	r2, r8
 800bece:	464b      	mov	r3, r9
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed8:	b110      	cbz	r0, 800bee0 <_dtoa_r+0x6a0>
 800beda:	f01a 0f01 	tst.w	sl, #1
 800bede:	d110      	bne.n	800bf02 <_dtoa_r+0x6c2>
 800bee0:	4620      	mov	r0, r4
 800bee2:	ee18 1a10 	vmov	r1, s16
 800bee6:	f000 faf3 	bl	800c4d0 <_Bfree>
 800beea:	2300      	movs	r3, #0
 800beec:	9800      	ldr	r0, [sp, #0]
 800beee:	702b      	strb	r3, [r5, #0]
 800bef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bef2:	3001      	adds	r0, #1
 800bef4:	6018      	str	r0, [r3, #0]
 800bef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f43f acf1 	beq.w	800b8e0 <_dtoa_r+0xa0>
 800befe:	601d      	str	r5, [r3, #0]
 800bf00:	e4ee      	b.n	800b8e0 <_dtoa_r+0xa0>
 800bf02:	9f00      	ldr	r7, [sp, #0]
 800bf04:	462b      	mov	r3, r5
 800bf06:	461d      	mov	r5, r3
 800bf08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf0c:	2a39      	cmp	r2, #57	; 0x39
 800bf0e:	d106      	bne.n	800bf1e <_dtoa_r+0x6de>
 800bf10:	9a01      	ldr	r2, [sp, #4]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d1f7      	bne.n	800bf06 <_dtoa_r+0x6c6>
 800bf16:	9901      	ldr	r1, [sp, #4]
 800bf18:	2230      	movs	r2, #48	; 0x30
 800bf1a:	3701      	adds	r7, #1
 800bf1c:	700a      	strb	r2, [r1, #0]
 800bf1e:	781a      	ldrb	r2, [r3, #0]
 800bf20:	3201      	adds	r2, #1
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	e790      	b.n	800be48 <_dtoa_r+0x608>
 800bf26:	4ba6      	ldr	r3, [pc, #664]	; (800c1c0 <_dtoa_r+0x980>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f7f4 fb6d 	bl	8000608 <__aeabi_dmul>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2300      	movs	r3, #0
 800bf32:	4606      	mov	r6, r0
 800bf34:	460f      	mov	r7, r1
 800bf36:	f7f4 fdcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d09d      	beq.n	800be7a <_dtoa_r+0x63a>
 800bf3e:	e7cf      	b.n	800bee0 <_dtoa_r+0x6a0>
 800bf40:	9a08      	ldr	r2, [sp, #32]
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	f000 80d7 	beq.w	800c0f6 <_dtoa_r+0x8b6>
 800bf48:	9a06      	ldr	r2, [sp, #24]
 800bf4a:	2a01      	cmp	r2, #1
 800bf4c:	f300 80ba 	bgt.w	800c0c4 <_dtoa_r+0x884>
 800bf50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	f000 80b2 	beq.w	800c0bc <_dtoa_r+0x87c>
 800bf58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf5c:	9e07      	ldr	r6, [sp, #28]
 800bf5e:	9d04      	ldr	r5, [sp, #16]
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	441a      	add	r2, r3
 800bf64:	9204      	str	r2, [sp, #16]
 800bf66:	9a05      	ldr	r2, [sp, #20]
 800bf68:	2101      	movs	r1, #1
 800bf6a:	441a      	add	r2, r3
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	9205      	str	r2, [sp, #20]
 800bf70:	f000 fb66 	bl	800c640 <__i2b>
 800bf74:	4607      	mov	r7, r0
 800bf76:	2d00      	cmp	r5, #0
 800bf78:	dd0c      	ble.n	800bf94 <_dtoa_r+0x754>
 800bf7a:	9b05      	ldr	r3, [sp, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd09      	ble.n	800bf94 <_dtoa_r+0x754>
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	9a04      	ldr	r2, [sp, #16]
 800bf84:	bfa8      	it	ge
 800bf86:	462b      	movge	r3, r5
 800bf88:	1ad2      	subs	r2, r2, r3
 800bf8a:	9204      	str	r2, [sp, #16]
 800bf8c:	9a05      	ldr	r2, [sp, #20]
 800bf8e:	1aed      	subs	r5, r5, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	b31b      	cbz	r3, 800bfe0 <_dtoa_r+0x7a0>
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 80af 	beq.w	800c0fe <_dtoa_r+0x8be>
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	dd13      	ble.n	800bfcc <_dtoa_r+0x78c>
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 fc09 	bl	800c7c0 <__pow5mult>
 800bfae:	ee18 2a10 	vmov	r2, s16
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 fb58 	bl	800c66c <__multiply>
 800bfbc:	ee18 1a10 	vmov	r1, s16
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 fa84 	bl	800c4d0 <_Bfree>
 800bfc8:	ee08 8a10 	vmov	s16, r8
 800bfcc:	9b07      	ldr	r3, [sp, #28]
 800bfce:	1b9a      	subs	r2, r3, r6
 800bfd0:	d006      	beq.n	800bfe0 <_dtoa_r+0x7a0>
 800bfd2:	ee18 1a10 	vmov	r1, s16
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fbf2 	bl	800c7c0 <__pow5mult>
 800bfdc:	ee08 0a10 	vmov	s16, r0
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 fb2c 	bl	800c640 <__i2b>
 800bfe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	4606      	mov	r6, r0
 800bfee:	f340 8088 	ble.w	800c102 <_dtoa_r+0x8c2>
 800bff2:	461a      	mov	r2, r3
 800bff4:	4601      	mov	r1, r0
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fbe2 	bl	800c7c0 <__pow5mult>
 800bffc:	9b06      	ldr	r3, [sp, #24]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	4606      	mov	r6, r0
 800c002:	f340 8081 	ble.w	800c108 <_dtoa_r+0x8c8>
 800c006:	f04f 0800 	mov.w	r8, #0
 800c00a:	6933      	ldr	r3, [r6, #16]
 800c00c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c010:	6918      	ldr	r0, [r3, #16]
 800c012:	f000 fac5 	bl	800c5a0 <__hi0bits>
 800c016:	f1c0 0020 	rsb	r0, r0, #32
 800c01a:	9b05      	ldr	r3, [sp, #20]
 800c01c:	4418      	add	r0, r3
 800c01e:	f010 001f 	ands.w	r0, r0, #31
 800c022:	f000 8092 	beq.w	800c14a <_dtoa_r+0x90a>
 800c026:	f1c0 0320 	rsb	r3, r0, #32
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	f340 808a 	ble.w	800c144 <_dtoa_r+0x904>
 800c030:	f1c0 001c 	rsb	r0, r0, #28
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	4403      	add	r3, r0
 800c038:	9304      	str	r3, [sp, #16]
 800c03a:	9b05      	ldr	r3, [sp, #20]
 800c03c:	4403      	add	r3, r0
 800c03e:	4405      	add	r5, r0
 800c040:	9305      	str	r3, [sp, #20]
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	dd07      	ble.n	800c058 <_dtoa_r+0x818>
 800c048:	ee18 1a10 	vmov	r1, s16
 800c04c:	461a      	mov	r2, r3
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 fc10 	bl	800c874 <__lshift>
 800c054:	ee08 0a10 	vmov	s16, r0
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	dd05      	ble.n	800c06a <_dtoa_r+0x82a>
 800c05e:	4631      	mov	r1, r6
 800c060:	461a      	mov	r2, r3
 800c062:	4620      	mov	r0, r4
 800c064:	f000 fc06 	bl	800c874 <__lshift>
 800c068:	4606      	mov	r6, r0
 800c06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d06e      	beq.n	800c14e <_dtoa_r+0x90e>
 800c070:	ee18 0a10 	vmov	r0, s16
 800c074:	4631      	mov	r1, r6
 800c076:	f000 fc6d 	bl	800c954 <__mcmp>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	da67      	bge.n	800c14e <_dtoa_r+0x90e>
 800c07e:	9b00      	ldr	r3, [sp, #0]
 800c080:	3b01      	subs	r3, #1
 800c082:	ee18 1a10 	vmov	r1, s16
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	220a      	movs	r2, #10
 800c08a:	2300      	movs	r3, #0
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 fa41 	bl	800c514 <__multadd>
 800c092:	9b08      	ldr	r3, [sp, #32]
 800c094:	ee08 0a10 	vmov	s16, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 81b1 	beq.w	800c400 <_dtoa_r+0xbc0>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	4639      	mov	r1, r7
 800c0a2:	220a      	movs	r2, #10
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 fa35 	bl	800c514 <__multadd>
 800c0aa:	9b02      	ldr	r3, [sp, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	f300 808e 	bgt.w	800c1d0 <_dtoa_r+0x990>
 800c0b4:	9b06      	ldr	r3, [sp, #24]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	dc51      	bgt.n	800c15e <_dtoa_r+0x91e>
 800c0ba:	e089      	b.n	800c1d0 <_dtoa_r+0x990>
 800c0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0c2:	e74b      	b.n	800bf5c <_dtoa_r+0x71c>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	1e5e      	subs	r6, r3, #1
 800c0c8:	9b07      	ldr	r3, [sp, #28]
 800c0ca:	42b3      	cmp	r3, r6
 800c0cc:	bfbf      	itttt	lt
 800c0ce:	9b07      	ldrlt	r3, [sp, #28]
 800c0d0:	9607      	strlt	r6, [sp, #28]
 800c0d2:	1af2      	sublt	r2, r6, r3
 800c0d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0d6:	bfb6      	itet	lt
 800c0d8:	189b      	addlt	r3, r3, r2
 800c0da:	1b9e      	subge	r6, r3, r6
 800c0dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	bfb8      	it	lt
 800c0e2:	2600      	movlt	r6, #0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bfb7      	itett	lt
 800c0e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0f0:	1a9d      	sublt	r5, r3, r2
 800c0f2:	2300      	movlt	r3, #0
 800c0f4:	e734      	b.n	800bf60 <_dtoa_r+0x720>
 800c0f6:	9e07      	ldr	r6, [sp, #28]
 800c0f8:	9d04      	ldr	r5, [sp, #16]
 800c0fa:	9f08      	ldr	r7, [sp, #32]
 800c0fc:	e73b      	b.n	800bf76 <_dtoa_r+0x736>
 800c0fe:	9a07      	ldr	r2, [sp, #28]
 800c100:	e767      	b.n	800bfd2 <_dtoa_r+0x792>
 800c102:	9b06      	ldr	r3, [sp, #24]
 800c104:	2b01      	cmp	r3, #1
 800c106:	dc18      	bgt.n	800c13a <_dtoa_r+0x8fa>
 800c108:	f1ba 0f00 	cmp.w	sl, #0
 800c10c:	d115      	bne.n	800c13a <_dtoa_r+0x8fa>
 800c10e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c112:	b993      	cbnz	r3, 800c13a <_dtoa_r+0x8fa>
 800c114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c118:	0d1b      	lsrs	r3, r3, #20
 800c11a:	051b      	lsls	r3, r3, #20
 800c11c:	b183      	cbz	r3, 800c140 <_dtoa_r+0x900>
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	3301      	adds	r3, #1
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	3301      	adds	r3, #1
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	f04f 0801 	mov.w	r8, #1
 800c12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c130:	2b00      	cmp	r3, #0
 800c132:	f47f af6a 	bne.w	800c00a <_dtoa_r+0x7ca>
 800c136:	2001      	movs	r0, #1
 800c138:	e76f      	b.n	800c01a <_dtoa_r+0x7da>
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	e7f6      	b.n	800c12e <_dtoa_r+0x8ee>
 800c140:	4698      	mov	r8, r3
 800c142:	e7f4      	b.n	800c12e <_dtoa_r+0x8ee>
 800c144:	f43f af7d 	beq.w	800c042 <_dtoa_r+0x802>
 800c148:	4618      	mov	r0, r3
 800c14a:	301c      	adds	r0, #28
 800c14c:	e772      	b.n	800c034 <_dtoa_r+0x7f4>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dc37      	bgt.n	800c1c4 <_dtoa_r+0x984>
 800c154:	9b06      	ldr	r3, [sp, #24]
 800c156:	2b02      	cmp	r3, #2
 800c158:	dd34      	ble.n	800c1c4 <_dtoa_r+0x984>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	9302      	str	r3, [sp, #8]
 800c15e:	9b02      	ldr	r3, [sp, #8]
 800c160:	b96b      	cbnz	r3, 800c17e <_dtoa_r+0x93e>
 800c162:	4631      	mov	r1, r6
 800c164:	2205      	movs	r2, #5
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f9d4 	bl	800c514 <__multadd>
 800c16c:	4601      	mov	r1, r0
 800c16e:	4606      	mov	r6, r0
 800c170:	ee18 0a10 	vmov	r0, s16
 800c174:	f000 fbee 	bl	800c954 <__mcmp>
 800c178:	2800      	cmp	r0, #0
 800c17a:	f73f adbb 	bgt.w	800bcf4 <_dtoa_r+0x4b4>
 800c17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c180:	9d01      	ldr	r5, [sp, #4]
 800c182:	43db      	mvns	r3, r3
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	4631      	mov	r1, r6
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 f99f 	bl	800c4d0 <_Bfree>
 800c192:	2f00      	cmp	r7, #0
 800c194:	f43f aea4 	beq.w	800bee0 <_dtoa_r+0x6a0>
 800c198:	f1b8 0f00 	cmp.w	r8, #0
 800c19c:	d005      	beq.n	800c1aa <_dtoa_r+0x96a>
 800c19e:	45b8      	cmp	r8, r7
 800c1a0:	d003      	beq.n	800c1aa <_dtoa_r+0x96a>
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 f993 	bl	800c4d0 <_Bfree>
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f000 f98f 	bl	800c4d0 <_Bfree>
 800c1b2:	e695      	b.n	800bee0 <_dtoa_r+0x6a0>
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	4637      	mov	r7, r6
 800c1b8:	e7e1      	b.n	800c17e <_dtoa_r+0x93e>
 800c1ba:	9700      	str	r7, [sp, #0]
 800c1bc:	4637      	mov	r7, r6
 800c1be:	e599      	b.n	800bcf4 <_dtoa_r+0x4b4>
 800c1c0:	40240000 	.word	0x40240000
 800c1c4:	9b08      	ldr	r3, [sp, #32]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 80ca 	beq.w	800c360 <_dtoa_r+0xb20>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	9302      	str	r3, [sp, #8]
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	dd05      	ble.n	800c1e0 <_dtoa_r+0x9a0>
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fb4b 	bl	800c874 <__lshift>
 800c1de:	4607      	mov	r7, r0
 800c1e0:	f1b8 0f00 	cmp.w	r8, #0
 800c1e4:	d05b      	beq.n	800c29e <_dtoa_r+0xa5e>
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 f931 	bl	800c450 <_Balloc>
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b928      	cbnz	r0, 800c1fe <_dtoa_r+0x9be>
 800c1f2:	4b87      	ldr	r3, [pc, #540]	; (800c410 <_dtoa_r+0xbd0>)
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1fa:	f7ff bb3b 	b.w	800b874 <_dtoa_r+0x34>
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	3202      	adds	r2, #2
 800c202:	0092      	lsls	r2, r2, #2
 800c204:	f107 010c 	add.w	r1, r7, #12
 800c208:	300c      	adds	r0, #12
 800c20a:	f000 f913 	bl	800c434 <memcpy>
 800c20e:	2201      	movs	r2, #1
 800c210:	4629      	mov	r1, r5
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fb2e 	bl	800c874 <__lshift>
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	f103 0901 	add.w	r9, r3, #1
 800c21e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c222:	4413      	add	r3, r2
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	f00a 0301 	and.w	r3, sl, #1
 800c22a:	46b8      	mov	r8, r7
 800c22c:	9304      	str	r3, [sp, #16]
 800c22e:	4607      	mov	r7, r0
 800c230:	4631      	mov	r1, r6
 800c232:	ee18 0a10 	vmov	r0, s16
 800c236:	f7ff fa77 	bl	800b728 <quorem>
 800c23a:	4641      	mov	r1, r8
 800c23c:	9002      	str	r0, [sp, #8]
 800c23e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c242:	ee18 0a10 	vmov	r0, s16
 800c246:	f000 fb85 	bl	800c954 <__mcmp>
 800c24a:	463a      	mov	r2, r7
 800c24c:	9003      	str	r0, [sp, #12]
 800c24e:	4631      	mov	r1, r6
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fb9b 	bl	800c98c <__mdiff>
 800c256:	68c2      	ldr	r2, [r0, #12]
 800c258:	f109 3bff 	add.w	fp, r9, #4294967295
 800c25c:	4605      	mov	r5, r0
 800c25e:	bb02      	cbnz	r2, 800c2a2 <_dtoa_r+0xa62>
 800c260:	4601      	mov	r1, r0
 800c262:	ee18 0a10 	vmov	r0, s16
 800c266:	f000 fb75 	bl	800c954 <__mcmp>
 800c26a:	4602      	mov	r2, r0
 800c26c:	4629      	mov	r1, r5
 800c26e:	4620      	mov	r0, r4
 800c270:	9207      	str	r2, [sp, #28]
 800c272:	f000 f92d 	bl	800c4d0 <_Bfree>
 800c276:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c27a:	ea43 0102 	orr.w	r1, r3, r2
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	430b      	orrs	r3, r1
 800c282:	464d      	mov	r5, r9
 800c284:	d10f      	bne.n	800c2a6 <_dtoa_r+0xa66>
 800c286:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c28a:	d02a      	beq.n	800c2e2 <_dtoa_r+0xaa2>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	dd02      	ble.n	800c298 <_dtoa_r+0xa58>
 800c292:	9b02      	ldr	r3, [sp, #8]
 800c294:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c298:	f88b a000 	strb.w	sl, [fp]
 800c29c:	e775      	b.n	800c18a <_dtoa_r+0x94a>
 800c29e:	4638      	mov	r0, r7
 800c2a0:	e7ba      	b.n	800c218 <_dtoa_r+0x9d8>
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	e7e2      	b.n	800c26c <_dtoa_r+0xa2c>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	db04      	blt.n	800c2b6 <_dtoa_r+0xa76>
 800c2ac:	9906      	ldr	r1, [sp, #24]
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	9904      	ldr	r1, [sp, #16]
 800c2b2:	430b      	orrs	r3, r1
 800c2b4:	d122      	bne.n	800c2fc <_dtoa_r+0xabc>
 800c2b6:	2a00      	cmp	r2, #0
 800c2b8:	ddee      	ble.n	800c298 <_dtoa_r+0xa58>
 800c2ba:	ee18 1a10 	vmov	r1, s16
 800c2be:	2201      	movs	r2, #1
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fad7 	bl	800c874 <__lshift>
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	ee08 0a10 	vmov	s16, r0
 800c2cc:	f000 fb42 	bl	800c954 <__mcmp>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	dc03      	bgt.n	800c2dc <_dtoa_r+0xa9c>
 800c2d4:	d1e0      	bne.n	800c298 <_dtoa_r+0xa58>
 800c2d6:	f01a 0f01 	tst.w	sl, #1
 800c2da:	d0dd      	beq.n	800c298 <_dtoa_r+0xa58>
 800c2dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2e0:	d1d7      	bne.n	800c292 <_dtoa_r+0xa52>
 800c2e2:	2339      	movs	r3, #57	; 0x39
 800c2e4:	f88b 3000 	strb.w	r3, [fp]
 800c2e8:	462b      	mov	r3, r5
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2f2:	2a39      	cmp	r2, #57	; 0x39
 800c2f4:	d071      	beq.n	800c3da <_dtoa_r+0xb9a>
 800c2f6:	3201      	adds	r2, #1
 800c2f8:	701a      	strb	r2, [r3, #0]
 800c2fa:	e746      	b.n	800c18a <_dtoa_r+0x94a>
 800c2fc:	2a00      	cmp	r2, #0
 800c2fe:	dd07      	ble.n	800c310 <_dtoa_r+0xad0>
 800c300:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c304:	d0ed      	beq.n	800c2e2 <_dtoa_r+0xaa2>
 800c306:	f10a 0301 	add.w	r3, sl, #1
 800c30a:	f88b 3000 	strb.w	r3, [fp]
 800c30e:	e73c      	b.n	800c18a <_dtoa_r+0x94a>
 800c310:	9b05      	ldr	r3, [sp, #20]
 800c312:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c316:	4599      	cmp	r9, r3
 800c318:	d047      	beq.n	800c3aa <_dtoa_r+0xb6a>
 800c31a:	ee18 1a10 	vmov	r1, s16
 800c31e:	2300      	movs	r3, #0
 800c320:	220a      	movs	r2, #10
 800c322:	4620      	mov	r0, r4
 800c324:	f000 f8f6 	bl	800c514 <__multadd>
 800c328:	45b8      	cmp	r8, r7
 800c32a:	ee08 0a10 	vmov	s16, r0
 800c32e:	f04f 0300 	mov.w	r3, #0
 800c332:	f04f 020a 	mov.w	r2, #10
 800c336:	4641      	mov	r1, r8
 800c338:	4620      	mov	r0, r4
 800c33a:	d106      	bne.n	800c34a <_dtoa_r+0xb0a>
 800c33c:	f000 f8ea 	bl	800c514 <__multadd>
 800c340:	4680      	mov	r8, r0
 800c342:	4607      	mov	r7, r0
 800c344:	f109 0901 	add.w	r9, r9, #1
 800c348:	e772      	b.n	800c230 <_dtoa_r+0x9f0>
 800c34a:	f000 f8e3 	bl	800c514 <__multadd>
 800c34e:	4639      	mov	r1, r7
 800c350:	4680      	mov	r8, r0
 800c352:	2300      	movs	r3, #0
 800c354:	220a      	movs	r2, #10
 800c356:	4620      	mov	r0, r4
 800c358:	f000 f8dc 	bl	800c514 <__multadd>
 800c35c:	4607      	mov	r7, r0
 800c35e:	e7f1      	b.n	800c344 <_dtoa_r+0xb04>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	9302      	str	r3, [sp, #8]
 800c364:	9d01      	ldr	r5, [sp, #4]
 800c366:	ee18 0a10 	vmov	r0, s16
 800c36a:	4631      	mov	r1, r6
 800c36c:	f7ff f9dc 	bl	800b728 <quorem>
 800c370:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	f805 ab01 	strb.w	sl, [r5], #1
 800c37a:	1aea      	subs	r2, r5, r3
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	4293      	cmp	r3, r2
 800c380:	dd09      	ble.n	800c396 <_dtoa_r+0xb56>
 800c382:	ee18 1a10 	vmov	r1, s16
 800c386:	2300      	movs	r3, #0
 800c388:	220a      	movs	r2, #10
 800c38a:	4620      	mov	r0, r4
 800c38c:	f000 f8c2 	bl	800c514 <__multadd>
 800c390:	ee08 0a10 	vmov	s16, r0
 800c394:	e7e7      	b.n	800c366 <_dtoa_r+0xb26>
 800c396:	9b02      	ldr	r3, [sp, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfc8      	it	gt
 800c39c:	461d      	movgt	r5, r3
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	bfd8      	it	le
 800c3a2:	2501      	movle	r5, #1
 800c3a4:	441d      	add	r5, r3
 800c3a6:	f04f 0800 	mov.w	r8, #0
 800c3aa:	ee18 1a10 	vmov	r1, s16
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 fa5f 	bl	800c874 <__lshift>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	ee08 0a10 	vmov	s16, r0
 800c3bc:	f000 faca 	bl	800c954 <__mcmp>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	dc91      	bgt.n	800c2e8 <_dtoa_r+0xaa8>
 800c3c4:	d102      	bne.n	800c3cc <_dtoa_r+0xb8c>
 800c3c6:	f01a 0f01 	tst.w	sl, #1
 800c3ca:	d18d      	bne.n	800c2e8 <_dtoa_r+0xaa8>
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	461d      	mov	r5, r3
 800c3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3d4:	2a30      	cmp	r2, #48	; 0x30
 800c3d6:	d0fa      	beq.n	800c3ce <_dtoa_r+0xb8e>
 800c3d8:	e6d7      	b.n	800c18a <_dtoa_r+0x94a>
 800c3da:	9a01      	ldr	r2, [sp, #4]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d184      	bne.n	800c2ea <_dtoa_r+0xaaa>
 800c3e0:	9b00      	ldr	r3, [sp, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	2331      	movs	r3, #49	; 0x31
 800c3e8:	7013      	strb	r3, [r2, #0]
 800c3ea:	e6ce      	b.n	800c18a <_dtoa_r+0x94a>
 800c3ec:	4b09      	ldr	r3, [pc, #36]	; (800c414 <_dtoa_r+0xbd4>)
 800c3ee:	f7ff ba95 	b.w	800b91c <_dtoa_r+0xdc>
 800c3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f47f aa6e 	bne.w	800b8d6 <_dtoa_r+0x96>
 800c3fa:	4b07      	ldr	r3, [pc, #28]	; (800c418 <_dtoa_r+0xbd8>)
 800c3fc:	f7ff ba8e 	b.w	800b91c <_dtoa_r+0xdc>
 800c400:	9b02      	ldr	r3, [sp, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	dcae      	bgt.n	800c364 <_dtoa_r+0xb24>
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	2b02      	cmp	r3, #2
 800c40a:	f73f aea8 	bgt.w	800c15e <_dtoa_r+0x91e>
 800c40e:	e7a9      	b.n	800c364 <_dtoa_r+0xb24>
 800c410:	0801945f 	.word	0x0801945f
 800c414:	080193bc 	.word	0x080193bc
 800c418:	080193e0 	.word	0x080193e0

0800c41c <_localeconv_r>:
 800c41c:	4800      	ldr	r0, [pc, #0]	; (800c420 <_localeconv_r+0x4>)
 800c41e:	4770      	bx	lr
 800c420:	20000208 	.word	0x20000208

0800c424 <malloc>:
 800c424:	4b02      	ldr	r3, [pc, #8]	; (800c430 <malloc+0xc>)
 800c426:	4601      	mov	r1, r0
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	f000 bc17 	b.w	800cc5c <_malloc_r>
 800c42e:	bf00      	nop
 800c430:	200000b4 	.word	0x200000b4

0800c434 <memcpy>:
 800c434:	440a      	add	r2, r1
 800c436:	4291      	cmp	r1, r2
 800c438:	f100 33ff 	add.w	r3, r0, #4294967295
 800c43c:	d100      	bne.n	800c440 <memcpy+0xc>
 800c43e:	4770      	bx	lr
 800c440:	b510      	push	{r4, lr}
 800c442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c44a:	4291      	cmp	r1, r2
 800c44c:	d1f9      	bne.n	800c442 <memcpy+0xe>
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <_Balloc>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c454:	4604      	mov	r4, r0
 800c456:	460d      	mov	r5, r1
 800c458:	b976      	cbnz	r6, 800c478 <_Balloc+0x28>
 800c45a:	2010      	movs	r0, #16
 800c45c:	f7ff ffe2 	bl	800c424 <malloc>
 800c460:	4602      	mov	r2, r0
 800c462:	6260      	str	r0, [r4, #36]	; 0x24
 800c464:	b920      	cbnz	r0, 800c470 <_Balloc+0x20>
 800c466:	4b18      	ldr	r3, [pc, #96]	; (800c4c8 <_Balloc+0x78>)
 800c468:	4818      	ldr	r0, [pc, #96]	; (800c4cc <_Balloc+0x7c>)
 800c46a:	2166      	movs	r1, #102	; 0x66
 800c46c:	f000 fdd6 	bl	800d01c <__assert_func>
 800c470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c474:	6006      	str	r6, [r0, #0]
 800c476:	60c6      	str	r6, [r0, #12]
 800c478:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c47a:	68f3      	ldr	r3, [r6, #12]
 800c47c:	b183      	cbz	r3, 800c4a0 <_Balloc+0x50>
 800c47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c486:	b9b8      	cbnz	r0, 800c4b8 <_Balloc+0x68>
 800c488:	2101      	movs	r1, #1
 800c48a:	fa01 f605 	lsl.w	r6, r1, r5
 800c48e:	1d72      	adds	r2, r6, #5
 800c490:	0092      	lsls	r2, r2, #2
 800c492:	4620      	mov	r0, r4
 800c494:	f000 fb60 	bl	800cb58 <_calloc_r>
 800c498:	b160      	cbz	r0, 800c4b4 <_Balloc+0x64>
 800c49a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c49e:	e00e      	b.n	800c4be <_Balloc+0x6e>
 800c4a0:	2221      	movs	r2, #33	; 0x21
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 fb57 	bl	800cb58 <_calloc_r>
 800c4aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ac:	60f0      	str	r0, [r6, #12]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e4      	bne.n	800c47e <_Balloc+0x2e>
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	6802      	ldr	r2, [r0, #0]
 800c4ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4c4:	e7f7      	b.n	800c4b6 <_Balloc+0x66>
 800c4c6:	bf00      	nop
 800c4c8:	080193ed 	.word	0x080193ed
 800c4cc:	08019470 	.word	0x08019470

0800c4d0 <_Bfree>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	b976      	cbnz	r6, 800c4f8 <_Bfree+0x28>
 800c4da:	2010      	movs	r0, #16
 800c4dc:	f7ff ffa2 	bl	800c424 <malloc>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	6268      	str	r0, [r5, #36]	; 0x24
 800c4e4:	b920      	cbnz	r0, 800c4f0 <_Bfree+0x20>
 800c4e6:	4b09      	ldr	r3, [pc, #36]	; (800c50c <_Bfree+0x3c>)
 800c4e8:	4809      	ldr	r0, [pc, #36]	; (800c510 <_Bfree+0x40>)
 800c4ea:	218a      	movs	r1, #138	; 0x8a
 800c4ec:	f000 fd96 	bl	800d01c <__assert_func>
 800c4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4f4:	6006      	str	r6, [r0, #0]
 800c4f6:	60c6      	str	r6, [r0, #12]
 800c4f8:	b13c      	cbz	r4, 800c50a <_Bfree+0x3a>
 800c4fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4fc:	6862      	ldr	r2, [r4, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c504:	6021      	str	r1, [r4, #0]
 800c506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	080193ed 	.word	0x080193ed
 800c510:	08019470 	.word	0x08019470

0800c514 <__multadd>:
 800c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	690d      	ldr	r5, [r1, #16]
 800c51a:	4607      	mov	r7, r0
 800c51c:	460c      	mov	r4, r1
 800c51e:	461e      	mov	r6, r3
 800c520:	f101 0c14 	add.w	ip, r1, #20
 800c524:	2000      	movs	r0, #0
 800c526:	f8dc 3000 	ldr.w	r3, [ip]
 800c52a:	b299      	uxth	r1, r3
 800c52c:	fb02 6101 	mla	r1, r2, r1, r6
 800c530:	0c1e      	lsrs	r6, r3, #16
 800c532:	0c0b      	lsrs	r3, r1, #16
 800c534:	fb02 3306 	mla	r3, r2, r6, r3
 800c538:	b289      	uxth	r1, r1
 800c53a:	3001      	adds	r0, #1
 800c53c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c540:	4285      	cmp	r5, r0
 800c542:	f84c 1b04 	str.w	r1, [ip], #4
 800c546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c54a:	dcec      	bgt.n	800c526 <__multadd+0x12>
 800c54c:	b30e      	cbz	r6, 800c592 <__multadd+0x7e>
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	42ab      	cmp	r3, r5
 800c552:	dc19      	bgt.n	800c588 <__multadd+0x74>
 800c554:	6861      	ldr	r1, [r4, #4]
 800c556:	4638      	mov	r0, r7
 800c558:	3101      	adds	r1, #1
 800c55a:	f7ff ff79 	bl	800c450 <_Balloc>
 800c55e:	4680      	mov	r8, r0
 800c560:	b928      	cbnz	r0, 800c56e <__multadd+0x5a>
 800c562:	4602      	mov	r2, r0
 800c564:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <__multadd+0x84>)
 800c566:	480d      	ldr	r0, [pc, #52]	; (800c59c <__multadd+0x88>)
 800c568:	21b5      	movs	r1, #181	; 0xb5
 800c56a:	f000 fd57 	bl	800d01c <__assert_func>
 800c56e:	6922      	ldr	r2, [r4, #16]
 800c570:	3202      	adds	r2, #2
 800c572:	f104 010c 	add.w	r1, r4, #12
 800c576:	0092      	lsls	r2, r2, #2
 800c578:	300c      	adds	r0, #12
 800c57a:	f7ff ff5b 	bl	800c434 <memcpy>
 800c57e:	4621      	mov	r1, r4
 800c580:	4638      	mov	r0, r7
 800c582:	f7ff ffa5 	bl	800c4d0 <_Bfree>
 800c586:	4644      	mov	r4, r8
 800c588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c58c:	3501      	adds	r5, #1
 800c58e:	615e      	str	r6, [r3, #20]
 800c590:	6125      	str	r5, [r4, #16]
 800c592:	4620      	mov	r0, r4
 800c594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c598:	0801945f 	.word	0x0801945f
 800c59c:	08019470 	.word	0x08019470

0800c5a0 <__hi0bits>:
 800c5a0:	0c03      	lsrs	r3, r0, #16
 800c5a2:	041b      	lsls	r3, r3, #16
 800c5a4:	b9d3      	cbnz	r3, 800c5dc <__hi0bits+0x3c>
 800c5a6:	0400      	lsls	r0, r0, #16
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5ae:	bf04      	itt	eq
 800c5b0:	0200      	lsleq	r0, r0, #8
 800c5b2:	3308      	addeq	r3, #8
 800c5b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5b8:	bf04      	itt	eq
 800c5ba:	0100      	lsleq	r0, r0, #4
 800c5bc:	3304      	addeq	r3, #4
 800c5be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5c2:	bf04      	itt	eq
 800c5c4:	0080      	lsleq	r0, r0, #2
 800c5c6:	3302      	addeq	r3, #2
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	db05      	blt.n	800c5d8 <__hi0bits+0x38>
 800c5cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5d0:	f103 0301 	add.w	r3, r3, #1
 800c5d4:	bf08      	it	eq
 800c5d6:	2320      	moveq	r3, #32
 800c5d8:	4618      	mov	r0, r3
 800c5da:	4770      	bx	lr
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e7e4      	b.n	800c5aa <__hi0bits+0xa>

0800c5e0 <__lo0bits>:
 800c5e0:	6803      	ldr	r3, [r0, #0]
 800c5e2:	f013 0207 	ands.w	r2, r3, #7
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	d00b      	beq.n	800c602 <__lo0bits+0x22>
 800c5ea:	07da      	lsls	r2, r3, #31
 800c5ec:	d423      	bmi.n	800c636 <__lo0bits+0x56>
 800c5ee:	0798      	lsls	r0, r3, #30
 800c5f0:	bf49      	itett	mi
 800c5f2:	085b      	lsrmi	r3, r3, #1
 800c5f4:	089b      	lsrpl	r3, r3, #2
 800c5f6:	2001      	movmi	r0, #1
 800c5f8:	600b      	strmi	r3, [r1, #0]
 800c5fa:	bf5c      	itt	pl
 800c5fc:	600b      	strpl	r3, [r1, #0]
 800c5fe:	2002      	movpl	r0, #2
 800c600:	4770      	bx	lr
 800c602:	b298      	uxth	r0, r3
 800c604:	b9a8      	cbnz	r0, 800c632 <__lo0bits+0x52>
 800c606:	0c1b      	lsrs	r3, r3, #16
 800c608:	2010      	movs	r0, #16
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	b90a      	cbnz	r2, 800c612 <__lo0bits+0x32>
 800c60e:	3008      	adds	r0, #8
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	071a      	lsls	r2, r3, #28
 800c614:	bf04      	itt	eq
 800c616:	091b      	lsreq	r3, r3, #4
 800c618:	3004      	addeq	r0, #4
 800c61a:	079a      	lsls	r2, r3, #30
 800c61c:	bf04      	itt	eq
 800c61e:	089b      	lsreq	r3, r3, #2
 800c620:	3002      	addeq	r0, #2
 800c622:	07da      	lsls	r2, r3, #31
 800c624:	d403      	bmi.n	800c62e <__lo0bits+0x4e>
 800c626:	085b      	lsrs	r3, r3, #1
 800c628:	f100 0001 	add.w	r0, r0, #1
 800c62c:	d005      	beq.n	800c63a <__lo0bits+0x5a>
 800c62e:	600b      	str	r3, [r1, #0]
 800c630:	4770      	bx	lr
 800c632:	4610      	mov	r0, r2
 800c634:	e7e9      	b.n	800c60a <__lo0bits+0x2a>
 800c636:	2000      	movs	r0, #0
 800c638:	4770      	bx	lr
 800c63a:	2020      	movs	r0, #32
 800c63c:	4770      	bx	lr
	...

0800c640 <__i2b>:
 800c640:	b510      	push	{r4, lr}
 800c642:	460c      	mov	r4, r1
 800c644:	2101      	movs	r1, #1
 800c646:	f7ff ff03 	bl	800c450 <_Balloc>
 800c64a:	4602      	mov	r2, r0
 800c64c:	b928      	cbnz	r0, 800c65a <__i2b+0x1a>
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <__i2b+0x24>)
 800c650:	4805      	ldr	r0, [pc, #20]	; (800c668 <__i2b+0x28>)
 800c652:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c656:	f000 fce1 	bl	800d01c <__assert_func>
 800c65a:	2301      	movs	r3, #1
 800c65c:	6144      	str	r4, [r0, #20]
 800c65e:	6103      	str	r3, [r0, #16]
 800c660:	bd10      	pop	{r4, pc}
 800c662:	bf00      	nop
 800c664:	0801945f 	.word	0x0801945f
 800c668:	08019470 	.word	0x08019470

0800c66c <__multiply>:
 800c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c670:	4691      	mov	r9, r2
 800c672:	690a      	ldr	r2, [r1, #16]
 800c674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c678:	429a      	cmp	r2, r3
 800c67a:	bfb8      	it	lt
 800c67c:	460b      	movlt	r3, r1
 800c67e:	460c      	mov	r4, r1
 800c680:	bfbc      	itt	lt
 800c682:	464c      	movlt	r4, r9
 800c684:	4699      	movlt	r9, r3
 800c686:	6927      	ldr	r7, [r4, #16]
 800c688:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c68c:	68a3      	ldr	r3, [r4, #8]
 800c68e:	6861      	ldr	r1, [r4, #4]
 800c690:	eb07 060a 	add.w	r6, r7, sl
 800c694:	42b3      	cmp	r3, r6
 800c696:	b085      	sub	sp, #20
 800c698:	bfb8      	it	lt
 800c69a:	3101      	addlt	r1, #1
 800c69c:	f7ff fed8 	bl	800c450 <_Balloc>
 800c6a0:	b930      	cbnz	r0, 800c6b0 <__multiply+0x44>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4b44      	ldr	r3, [pc, #272]	; (800c7b8 <__multiply+0x14c>)
 800c6a6:	4845      	ldr	r0, [pc, #276]	; (800c7bc <__multiply+0x150>)
 800c6a8:	f240 115d 	movw	r1, #349	; 0x15d
 800c6ac:	f000 fcb6 	bl	800d01c <__assert_func>
 800c6b0:	f100 0514 	add.w	r5, r0, #20
 800c6b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	4543      	cmp	r3, r8
 800c6be:	d321      	bcc.n	800c704 <__multiply+0x98>
 800c6c0:	f104 0314 	add.w	r3, r4, #20
 800c6c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6c8:	f109 0314 	add.w	r3, r9, #20
 800c6cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6d0:	9202      	str	r2, [sp, #8]
 800c6d2:	1b3a      	subs	r2, r7, r4
 800c6d4:	3a15      	subs	r2, #21
 800c6d6:	f022 0203 	bic.w	r2, r2, #3
 800c6da:	3204      	adds	r2, #4
 800c6dc:	f104 0115 	add.w	r1, r4, #21
 800c6e0:	428f      	cmp	r7, r1
 800c6e2:	bf38      	it	cc
 800c6e4:	2204      	movcc	r2, #4
 800c6e6:	9201      	str	r2, [sp, #4]
 800c6e8:	9a02      	ldr	r2, [sp, #8]
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d80c      	bhi.n	800c70a <__multiply+0x9e>
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	dd03      	ble.n	800c6fc <__multiply+0x90>
 800c6f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d05a      	beq.n	800c7b2 <__multiply+0x146>
 800c6fc:	6106      	str	r6, [r0, #16]
 800c6fe:	b005      	add	sp, #20
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	f843 2b04 	str.w	r2, [r3], #4
 800c708:	e7d8      	b.n	800c6bc <__multiply+0x50>
 800c70a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c70e:	f1ba 0f00 	cmp.w	sl, #0
 800c712:	d024      	beq.n	800c75e <__multiply+0xf2>
 800c714:	f104 0e14 	add.w	lr, r4, #20
 800c718:	46a9      	mov	r9, r5
 800c71a:	f04f 0c00 	mov.w	ip, #0
 800c71e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c722:	f8d9 1000 	ldr.w	r1, [r9]
 800c726:	fa1f fb82 	uxth.w	fp, r2
 800c72a:	b289      	uxth	r1, r1
 800c72c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c730:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c734:	f8d9 2000 	ldr.w	r2, [r9]
 800c738:	4461      	add	r1, ip
 800c73a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c73e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c746:	b289      	uxth	r1, r1
 800c748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c74c:	4577      	cmp	r7, lr
 800c74e:	f849 1b04 	str.w	r1, [r9], #4
 800c752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c756:	d8e2      	bhi.n	800c71e <__multiply+0xb2>
 800c758:	9a01      	ldr	r2, [sp, #4]
 800c75a:	f845 c002 	str.w	ip, [r5, r2]
 800c75e:	9a03      	ldr	r2, [sp, #12]
 800c760:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c764:	3304      	adds	r3, #4
 800c766:	f1b9 0f00 	cmp.w	r9, #0
 800c76a:	d020      	beq.n	800c7ae <__multiply+0x142>
 800c76c:	6829      	ldr	r1, [r5, #0]
 800c76e:	f104 0c14 	add.w	ip, r4, #20
 800c772:	46ae      	mov	lr, r5
 800c774:	f04f 0a00 	mov.w	sl, #0
 800c778:	f8bc b000 	ldrh.w	fp, [ip]
 800c77c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c780:	fb09 220b 	mla	r2, r9, fp, r2
 800c784:	4492      	add	sl, r2
 800c786:	b289      	uxth	r1, r1
 800c788:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c78c:	f84e 1b04 	str.w	r1, [lr], #4
 800c790:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c794:	f8be 1000 	ldrh.w	r1, [lr]
 800c798:	0c12      	lsrs	r2, r2, #16
 800c79a:	fb09 1102 	mla	r1, r9, r2, r1
 800c79e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c7a2:	4567      	cmp	r7, ip
 800c7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7a8:	d8e6      	bhi.n	800c778 <__multiply+0x10c>
 800c7aa:	9a01      	ldr	r2, [sp, #4]
 800c7ac:	50a9      	str	r1, [r5, r2]
 800c7ae:	3504      	adds	r5, #4
 800c7b0:	e79a      	b.n	800c6e8 <__multiply+0x7c>
 800c7b2:	3e01      	subs	r6, #1
 800c7b4:	e79c      	b.n	800c6f0 <__multiply+0x84>
 800c7b6:	bf00      	nop
 800c7b8:	0801945f 	.word	0x0801945f
 800c7bc:	08019470 	.word	0x08019470

0800c7c0 <__pow5mult>:
 800c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c4:	4615      	mov	r5, r2
 800c7c6:	f012 0203 	ands.w	r2, r2, #3
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	460f      	mov	r7, r1
 800c7ce:	d007      	beq.n	800c7e0 <__pow5mult+0x20>
 800c7d0:	4c25      	ldr	r4, [pc, #148]	; (800c868 <__pow5mult+0xa8>)
 800c7d2:	3a01      	subs	r2, #1
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7da:	f7ff fe9b 	bl	800c514 <__multadd>
 800c7de:	4607      	mov	r7, r0
 800c7e0:	10ad      	asrs	r5, r5, #2
 800c7e2:	d03d      	beq.n	800c860 <__pow5mult+0xa0>
 800c7e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7e6:	b97c      	cbnz	r4, 800c808 <__pow5mult+0x48>
 800c7e8:	2010      	movs	r0, #16
 800c7ea:	f7ff fe1b 	bl	800c424 <malloc>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	6270      	str	r0, [r6, #36]	; 0x24
 800c7f2:	b928      	cbnz	r0, 800c800 <__pow5mult+0x40>
 800c7f4:	4b1d      	ldr	r3, [pc, #116]	; (800c86c <__pow5mult+0xac>)
 800c7f6:	481e      	ldr	r0, [pc, #120]	; (800c870 <__pow5mult+0xb0>)
 800c7f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7fc:	f000 fc0e 	bl	800d01c <__assert_func>
 800c800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c804:	6004      	str	r4, [r0, #0]
 800c806:	60c4      	str	r4, [r0, #12]
 800c808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c80c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c810:	b94c      	cbnz	r4, 800c826 <__pow5mult+0x66>
 800c812:	f240 2171 	movw	r1, #625	; 0x271
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff ff12 	bl	800c640 <__i2b>
 800c81c:	2300      	movs	r3, #0
 800c81e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c822:	4604      	mov	r4, r0
 800c824:	6003      	str	r3, [r0, #0]
 800c826:	f04f 0900 	mov.w	r9, #0
 800c82a:	07eb      	lsls	r3, r5, #31
 800c82c:	d50a      	bpl.n	800c844 <__pow5mult+0x84>
 800c82e:	4639      	mov	r1, r7
 800c830:	4622      	mov	r2, r4
 800c832:	4630      	mov	r0, r6
 800c834:	f7ff ff1a 	bl	800c66c <__multiply>
 800c838:	4639      	mov	r1, r7
 800c83a:	4680      	mov	r8, r0
 800c83c:	4630      	mov	r0, r6
 800c83e:	f7ff fe47 	bl	800c4d0 <_Bfree>
 800c842:	4647      	mov	r7, r8
 800c844:	106d      	asrs	r5, r5, #1
 800c846:	d00b      	beq.n	800c860 <__pow5mult+0xa0>
 800c848:	6820      	ldr	r0, [r4, #0]
 800c84a:	b938      	cbnz	r0, 800c85c <__pow5mult+0x9c>
 800c84c:	4622      	mov	r2, r4
 800c84e:	4621      	mov	r1, r4
 800c850:	4630      	mov	r0, r6
 800c852:	f7ff ff0b 	bl	800c66c <__multiply>
 800c856:	6020      	str	r0, [r4, #0]
 800c858:	f8c0 9000 	str.w	r9, [r0]
 800c85c:	4604      	mov	r4, r0
 800c85e:	e7e4      	b.n	800c82a <__pow5mult+0x6a>
 800c860:	4638      	mov	r0, r7
 800c862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c866:	bf00      	nop
 800c868:	080195c0 	.word	0x080195c0
 800c86c:	080193ed 	.word	0x080193ed
 800c870:	08019470 	.word	0x08019470

0800c874 <__lshift>:
 800c874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	6849      	ldr	r1, [r1, #4]
 800c87c:	6923      	ldr	r3, [r4, #16]
 800c87e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	4607      	mov	r7, r0
 800c886:	4691      	mov	r9, r2
 800c888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c88c:	f108 0601 	add.w	r6, r8, #1
 800c890:	42b3      	cmp	r3, r6
 800c892:	db0b      	blt.n	800c8ac <__lshift+0x38>
 800c894:	4638      	mov	r0, r7
 800c896:	f7ff fddb 	bl	800c450 <_Balloc>
 800c89a:	4605      	mov	r5, r0
 800c89c:	b948      	cbnz	r0, 800c8b2 <__lshift+0x3e>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	4b2a      	ldr	r3, [pc, #168]	; (800c94c <__lshift+0xd8>)
 800c8a2:	482b      	ldr	r0, [pc, #172]	; (800c950 <__lshift+0xdc>)
 800c8a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8a8:	f000 fbb8 	bl	800d01c <__assert_func>
 800c8ac:	3101      	adds	r1, #1
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	e7ee      	b.n	800c890 <__lshift+0x1c>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f100 0114 	add.w	r1, r0, #20
 800c8b8:	f100 0210 	add.w	r2, r0, #16
 800c8bc:	4618      	mov	r0, r3
 800c8be:	4553      	cmp	r3, sl
 800c8c0:	db37      	blt.n	800c932 <__lshift+0xbe>
 800c8c2:	6920      	ldr	r0, [r4, #16]
 800c8c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8c8:	f104 0314 	add.w	r3, r4, #20
 800c8cc:	f019 091f 	ands.w	r9, r9, #31
 800c8d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8d8:	d02f      	beq.n	800c93a <__lshift+0xc6>
 800c8da:	f1c9 0e20 	rsb	lr, r9, #32
 800c8de:	468a      	mov	sl, r1
 800c8e0:	f04f 0c00 	mov.w	ip, #0
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	fa02 f209 	lsl.w	r2, r2, r9
 800c8ea:	ea42 020c 	orr.w	r2, r2, ip
 800c8ee:	f84a 2b04 	str.w	r2, [sl], #4
 800c8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f6:	4298      	cmp	r0, r3
 800c8f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8fc:	d8f2      	bhi.n	800c8e4 <__lshift+0x70>
 800c8fe:	1b03      	subs	r3, r0, r4
 800c900:	3b15      	subs	r3, #21
 800c902:	f023 0303 	bic.w	r3, r3, #3
 800c906:	3304      	adds	r3, #4
 800c908:	f104 0215 	add.w	r2, r4, #21
 800c90c:	4290      	cmp	r0, r2
 800c90e:	bf38      	it	cc
 800c910:	2304      	movcc	r3, #4
 800c912:	f841 c003 	str.w	ip, [r1, r3]
 800c916:	f1bc 0f00 	cmp.w	ip, #0
 800c91a:	d001      	beq.n	800c920 <__lshift+0xac>
 800c91c:	f108 0602 	add.w	r6, r8, #2
 800c920:	3e01      	subs	r6, #1
 800c922:	4638      	mov	r0, r7
 800c924:	612e      	str	r6, [r5, #16]
 800c926:	4621      	mov	r1, r4
 800c928:	f7ff fdd2 	bl	800c4d0 <_Bfree>
 800c92c:	4628      	mov	r0, r5
 800c92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c932:	f842 0f04 	str.w	r0, [r2, #4]!
 800c936:	3301      	adds	r3, #1
 800c938:	e7c1      	b.n	800c8be <__lshift+0x4a>
 800c93a:	3904      	subs	r1, #4
 800c93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c940:	f841 2f04 	str.w	r2, [r1, #4]!
 800c944:	4298      	cmp	r0, r3
 800c946:	d8f9      	bhi.n	800c93c <__lshift+0xc8>
 800c948:	e7ea      	b.n	800c920 <__lshift+0xac>
 800c94a:	bf00      	nop
 800c94c:	0801945f 	.word	0x0801945f
 800c950:	08019470 	.word	0x08019470

0800c954 <__mcmp>:
 800c954:	b530      	push	{r4, r5, lr}
 800c956:	6902      	ldr	r2, [r0, #16]
 800c958:	690c      	ldr	r4, [r1, #16]
 800c95a:	1b12      	subs	r2, r2, r4
 800c95c:	d10e      	bne.n	800c97c <__mcmp+0x28>
 800c95e:	f100 0314 	add.w	r3, r0, #20
 800c962:	3114      	adds	r1, #20
 800c964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c96c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c974:	42a5      	cmp	r5, r4
 800c976:	d003      	beq.n	800c980 <__mcmp+0x2c>
 800c978:	d305      	bcc.n	800c986 <__mcmp+0x32>
 800c97a:	2201      	movs	r2, #1
 800c97c:	4610      	mov	r0, r2
 800c97e:	bd30      	pop	{r4, r5, pc}
 800c980:	4283      	cmp	r3, r0
 800c982:	d3f3      	bcc.n	800c96c <__mcmp+0x18>
 800c984:	e7fa      	b.n	800c97c <__mcmp+0x28>
 800c986:	f04f 32ff 	mov.w	r2, #4294967295
 800c98a:	e7f7      	b.n	800c97c <__mcmp+0x28>

0800c98c <__mdiff>:
 800c98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	460c      	mov	r4, r1
 800c992:	4606      	mov	r6, r0
 800c994:	4611      	mov	r1, r2
 800c996:	4620      	mov	r0, r4
 800c998:	4690      	mov	r8, r2
 800c99a:	f7ff ffdb 	bl	800c954 <__mcmp>
 800c99e:	1e05      	subs	r5, r0, #0
 800c9a0:	d110      	bne.n	800c9c4 <__mdiff+0x38>
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7ff fd53 	bl	800c450 <_Balloc>
 800c9aa:	b930      	cbnz	r0, 800c9ba <__mdiff+0x2e>
 800c9ac:	4b3a      	ldr	r3, [pc, #232]	; (800ca98 <__mdiff+0x10c>)
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	f240 2132 	movw	r1, #562	; 0x232
 800c9b4:	4839      	ldr	r0, [pc, #228]	; (800ca9c <__mdiff+0x110>)
 800c9b6:	f000 fb31 	bl	800d01c <__assert_func>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c4:	bfa4      	itt	ge
 800c9c6:	4643      	movge	r3, r8
 800c9c8:	46a0      	movge	r8, r4
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9d0:	bfa6      	itte	ge
 800c9d2:	461c      	movge	r4, r3
 800c9d4:	2500      	movge	r5, #0
 800c9d6:	2501      	movlt	r5, #1
 800c9d8:	f7ff fd3a 	bl	800c450 <_Balloc>
 800c9dc:	b920      	cbnz	r0, 800c9e8 <__mdiff+0x5c>
 800c9de:	4b2e      	ldr	r3, [pc, #184]	; (800ca98 <__mdiff+0x10c>)
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9e6:	e7e5      	b.n	800c9b4 <__mdiff+0x28>
 800c9e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9ec:	6926      	ldr	r6, [r4, #16]
 800c9ee:	60c5      	str	r5, [r0, #12]
 800c9f0:	f104 0914 	add.w	r9, r4, #20
 800c9f4:	f108 0514 	add.w	r5, r8, #20
 800c9f8:	f100 0e14 	add.w	lr, r0, #20
 800c9fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca04:	f108 0210 	add.w	r2, r8, #16
 800ca08:	46f2      	mov	sl, lr
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca14:	fa1f f883 	uxth.w	r8, r3
 800ca18:	fa11 f18b 	uxtah	r1, r1, fp
 800ca1c:	0c1b      	lsrs	r3, r3, #16
 800ca1e:	eba1 0808 	sub.w	r8, r1, r8
 800ca22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca2a:	fa1f f888 	uxth.w	r8, r8
 800ca2e:	1419      	asrs	r1, r3, #16
 800ca30:	454e      	cmp	r6, r9
 800ca32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca36:	f84a 3b04 	str.w	r3, [sl], #4
 800ca3a:	d8e7      	bhi.n	800ca0c <__mdiff+0x80>
 800ca3c:	1b33      	subs	r3, r6, r4
 800ca3e:	3b15      	subs	r3, #21
 800ca40:	f023 0303 	bic.w	r3, r3, #3
 800ca44:	3304      	adds	r3, #4
 800ca46:	3415      	adds	r4, #21
 800ca48:	42a6      	cmp	r6, r4
 800ca4a:	bf38      	it	cc
 800ca4c:	2304      	movcc	r3, #4
 800ca4e:	441d      	add	r5, r3
 800ca50:	4473      	add	r3, lr
 800ca52:	469e      	mov	lr, r3
 800ca54:	462e      	mov	r6, r5
 800ca56:	4566      	cmp	r6, ip
 800ca58:	d30e      	bcc.n	800ca78 <__mdiff+0xec>
 800ca5a:	f10c 0203 	add.w	r2, ip, #3
 800ca5e:	1b52      	subs	r2, r2, r5
 800ca60:	f022 0203 	bic.w	r2, r2, #3
 800ca64:	3d03      	subs	r5, #3
 800ca66:	45ac      	cmp	ip, r5
 800ca68:	bf38      	it	cc
 800ca6a:	2200      	movcc	r2, #0
 800ca6c:	441a      	add	r2, r3
 800ca6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca72:	b17b      	cbz	r3, 800ca94 <__mdiff+0x108>
 800ca74:	6107      	str	r7, [r0, #16]
 800ca76:	e7a3      	b.n	800c9c0 <__mdiff+0x34>
 800ca78:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca7c:	fa11 f288 	uxtah	r2, r1, r8
 800ca80:	1414      	asrs	r4, r2, #16
 800ca82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca86:	b292      	uxth	r2, r2
 800ca88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca8c:	f84e 2b04 	str.w	r2, [lr], #4
 800ca90:	1421      	asrs	r1, r4, #16
 800ca92:	e7e0      	b.n	800ca56 <__mdiff+0xca>
 800ca94:	3f01      	subs	r7, #1
 800ca96:	e7ea      	b.n	800ca6e <__mdiff+0xe2>
 800ca98:	0801945f 	.word	0x0801945f
 800ca9c:	08019470 	.word	0x08019470

0800caa0 <__d2b>:
 800caa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caa4:	4689      	mov	r9, r1
 800caa6:	2101      	movs	r1, #1
 800caa8:	ec57 6b10 	vmov	r6, r7, d0
 800caac:	4690      	mov	r8, r2
 800caae:	f7ff fccf 	bl	800c450 <_Balloc>
 800cab2:	4604      	mov	r4, r0
 800cab4:	b930      	cbnz	r0, 800cac4 <__d2b+0x24>
 800cab6:	4602      	mov	r2, r0
 800cab8:	4b25      	ldr	r3, [pc, #148]	; (800cb50 <__d2b+0xb0>)
 800caba:	4826      	ldr	r0, [pc, #152]	; (800cb54 <__d2b+0xb4>)
 800cabc:	f240 310a 	movw	r1, #778	; 0x30a
 800cac0:	f000 faac 	bl	800d01c <__assert_func>
 800cac4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cacc:	bb35      	cbnz	r5, 800cb1c <__d2b+0x7c>
 800cace:	2e00      	cmp	r6, #0
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	d028      	beq.n	800cb26 <__d2b+0x86>
 800cad4:	4668      	mov	r0, sp
 800cad6:	9600      	str	r6, [sp, #0]
 800cad8:	f7ff fd82 	bl	800c5e0 <__lo0bits>
 800cadc:	9900      	ldr	r1, [sp, #0]
 800cade:	b300      	cbz	r0, 800cb22 <__d2b+0x82>
 800cae0:	9a01      	ldr	r2, [sp, #4]
 800cae2:	f1c0 0320 	rsb	r3, r0, #32
 800cae6:	fa02 f303 	lsl.w	r3, r2, r3
 800caea:	430b      	orrs	r3, r1
 800caec:	40c2      	lsrs	r2, r0
 800caee:	6163      	str	r3, [r4, #20]
 800caf0:	9201      	str	r2, [sp, #4]
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	61a3      	str	r3, [r4, #24]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	bf14      	ite	ne
 800cafa:	2202      	movne	r2, #2
 800cafc:	2201      	moveq	r2, #1
 800cafe:	6122      	str	r2, [r4, #16]
 800cb00:	b1d5      	cbz	r5, 800cb38 <__d2b+0x98>
 800cb02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb06:	4405      	add	r5, r0
 800cb08:	f8c9 5000 	str.w	r5, [r9]
 800cb0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb10:	f8c8 0000 	str.w	r0, [r8]
 800cb14:	4620      	mov	r0, r4
 800cb16:	b003      	add	sp, #12
 800cb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb20:	e7d5      	b.n	800cace <__d2b+0x2e>
 800cb22:	6161      	str	r1, [r4, #20]
 800cb24:	e7e5      	b.n	800caf2 <__d2b+0x52>
 800cb26:	a801      	add	r0, sp, #4
 800cb28:	f7ff fd5a 	bl	800c5e0 <__lo0bits>
 800cb2c:	9b01      	ldr	r3, [sp, #4]
 800cb2e:	6163      	str	r3, [r4, #20]
 800cb30:	2201      	movs	r2, #1
 800cb32:	6122      	str	r2, [r4, #16]
 800cb34:	3020      	adds	r0, #32
 800cb36:	e7e3      	b.n	800cb00 <__d2b+0x60>
 800cb38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb40:	f8c9 0000 	str.w	r0, [r9]
 800cb44:	6918      	ldr	r0, [r3, #16]
 800cb46:	f7ff fd2b 	bl	800c5a0 <__hi0bits>
 800cb4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb4e:	e7df      	b.n	800cb10 <__d2b+0x70>
 800cb50:	0801945f 	.word	0x0801945f
 800cb54:	08019470 	.word	0x08019470

0800cb58 <_calloc_r>:
 800cb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb5a:	fba1 2402 	umull	r2, r4, r1, r2
 800cb5e:	b94c      	cbnz	r4, 800cb74 <_calloc_r+0x1c>
 800cb60:	4611      	mov	r1, r2
 800cb62:	9201      	str	r2, [sp, #4]
 800cb64:	f000 f87a 	bl	800cc5c <_malloc_r>
 800cb68:	9a01      	ldr	r2, [sp, #4]
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	b930      	cbnz	r0, 800cb7c <_calloc_r+0x24>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	b003      	add	sp, #12
 800cb72:	bd30      	pop	{r4, r5, pc}
 800cb74:	220c      	movs	r2, #12
 800cb76:	6002      	str	r2, [r0, #0]
 800cb78:	2500      	movs	r5, #0
 800cb7a:	e7f8      	b.n	800cb6e <_calloc_r+0x16>
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	f7fe f941 	bl	800ae04 <memset>
 800cb82:	e7f4      	b.n	800cb6e <_calloc_r+0x16>

0800cb84 <_free_r>:
 800cb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d044      	beq.n	800cc14 <_free_r+0x90>
 800cb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb8e:	9001      	str	r0, [sp, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f1a1 0404 	sub.w	r4, r1, #4
 800cb96:	bfb8      	it	lt
 800cb98:	18e4      	addlt	r4, r4, r3
 800cb9a:	f000 fa9b 	bl	800d0d4 <__malloc_lock>
 800cb9e:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <_free_r+0x94>)
 800cba0:	9801      	ldr	r0, [sp, #4]
 800cba2:	6813      	ldr	r3, [r2, #0]
 800cba4:	b933      	cbnz	r3, 800cbb4 <_free_r+0x30>
 800cba6:	6063      	str	r3, [r4, #4]
 800cba8:	6014      	str	r4, [r2, #0]
 800cbaa:	b003      	add	sp, #12
 800cbac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbb0:	f000 ba96 	b.w	800d0e0 <__malloc_unlock>
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	d908      	bls.n	800cbca <_free_r+0x46>
 800cbb8:	6825      	ldr	r5, [r4, #0]
 800cbba:	1961      	adds	r1, r4, r5
 800cbbc:	428b      	cmp	r3, r1
 800cbbe:	bf01      	itttt	eq
 800cbc0:	6819      	ldreq	r1, [r3, #0]
 800cbc2:	685b      	ldreq	r3, [r3, #4]
 800cbc4:	1949      	addeq	r1, r1, r5
 800cbc6:	6021      	streq	r1, [r4, #0]
 800cbc8:	e7ed      	b.n	800cba6 <_free_r+0x22>
 800cbca:	461a      	mov	r2, r3
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	b10b      	cbz	r3, 800cbd4 <_free_r+0x50>
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	d9fa      	bls.n	800cbca <_free_r+0x46>
 800cbd4:	6811      	ldr	r1, [r2, #0]
 800cbd6:	1855      	adds	r5, r2, r1
 800cbd8:	42a5      	cmp	r5, r4
 800cbda:	d10b      	bne.n	800cbf4 <_free_r+0x70>
 800cbdc:	6824      	ldr	r4, [r4, #0]
 800cbde:	4421      	add	r1, r4
 800cbe0:	1854      	adds	r4, r2, r1
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	6011      	str	r1, [r2, #0]
 800cbe6:	d1e0      	bne.n	800cbaa <_free_r+0x26>
 800cbe8:	681c      	ldr	r4, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	6053      	str	r3, [r2, #4]
 800cbee:	4421      	add	r1, r4
 800cbf0:	6011      	str	r1, [r2, #0]
 800cbf2:	e7da      	b.n	800cbaa <_free_r+0x26>
 800cbf4:	d902      	bls.n	800cbfc <_free_r+0x78>
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	6003      	str	r3, [r0, #0]
 800cbfa:	e7d6      	b.n	800cbaa <_free_r+0x26>
 800cbfc:	6825      	ldr	r5, [r4, #0]
 800cbfe:	1961      	adds	r1, r4, r5
 800cc00:	428b      	cmp	r3, r1
 800cc02:	bf04      	itt	eq
 800cc04:	6819      	ldreq	r1, [r3, #0]
 800cc06:	685b      	ldreq	r3, [r3, #4]
 800cc08:	6063      	str	r3, [r4, #4]
 800cc0a:	bf04      	itt	eq
 800cc0c:	1949      	addeq	r1, r1, r5
 800cc0e:	6021      	streq	r1, [r4, #0]
 800cc10:	6054      	str	r4, [r2, #4]
 800cc12:	e7ca      	b.n	800cbaa <_free_r+0x26>
 800cc14:	b003      	add	sp, #12
 800cc16:	bd30      	pop	{r4, r5, pc}
 800cc18:	200006c0 	.word	0x200006c0

0800cc1c <sbrk_aligned>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	4e0e      	ldr	r6, [pc, #56]	; (800cc58 <sbrk_aligned+0x3c>)
 800cc20:	460c      	mov	r4, r1
 800cc22:	6831      	ldr	r1, [r6, #0]
 800cc24:	4605      	mov	r5, r0
 800cc26:	b911      	cbnz	r1, 800cc2e <sbrk_aligned+0x12>
 800cc28:	f000 f9e8 	bl	800cffc <_sbrk_r>
 800cc2c:	6030      	str	r0, [r6, #0]
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4628      	mov	r0, r5
 800cc32:	f000 f9e3 	bl	800cffc <_sbrk_r>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d00a      	beq.n	800cc50 <sbrk_aligned+0x34>
 800cc3a:	1cc4      	adds	r4, r0, #3
 800cc3c:	f024 0403 	bic.w	r4, r4, #3
 800cc40:	42a0      	cmp	r0, r4
 800cc42:	d007      	beq.n	800cc54 <sbrk_aligned+0x38>
 800cc44:	1a21      	subs	r1, r4, r0
 800cc46:	4628      	mov	r0, r5
 800cc48:	f000 f9d8 	bl	800cffc <_sbrk_r>
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d101      	bne.n	800cc54 <sbrk_aligned+0x38>
 800cc50:	f04f 34ff 	mov.w	r4, #4294967295
 800cc54:	4620      	mov	r0, r4
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	200006c4 	.word	0x200006c4

0800cc5c <_malloc_r>:
 800cc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc60:	1ccd      	adds	r5, r1, #3
 800cc62:	f025 0503 	bic.w	r5, r5, #3
 800cc66:	3508      	adds	r5, #8
 800cc68:	2d0c      	cmp	r5, #12
 800cc6a:	bf38      	it	cc
 800cc6c:	250c      	movcc	r5, #12
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	4607      	mov	r7, r0
 800cc72:	db01      	blt.n	800cc78 <_malloc_r+0x1c>
 800cc74:	42a9      	cmp	r1, r5
 800cc76:	d905      	bls.n	800cc84 <_malloc_r+0x28>
 800cc78:	230c      	movs	r3, #12
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	2600      	movs	r6, #0
 800cc7e:	4630      	mov	r0, r6
 800cc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc84:	4e2e      	ldr	r6, [pc, #184]	; (800cd40 <_malloc_r+0xe4>)
 800cc86:	f000 fa25 	bl	800d0d4 <__malloc_lock>
 800cc8a:	6833      	ldr	r3, [r6, #0]
 800cc8c:	461c      	mov	r4, r3
 800cc8e:	bb34      	cbnz	r4, 800ccde <_malloc_r+0x82>
 800cc90:	4629      	mov	r1, r5
 800cc92:	4638      	mov	r0, r7
 800cc94:	f7ff ffc2 	bl	800cc1c <sbrk_aligned>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	d14d      	bne.n	800cd3a <_malloc_r+0xde>
 800cc9e:	6834      	ldr	r4, [r6, #0]
 800cca0:	4626      	mov	r6, r4
 800cca2:	2e00      	cmp	r6, #0
 800cca4:	d140      	bne.n	800cd28 <_malloc_r+0xcc>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	4631      	mov	r1, r6
 800ccaa:	4638      	mov	r0, r7
 800ccac:	eb04 0803 	add.w	r8, r4, r3
 800ccb0:	f000 f9a4 	bl	800cffc <_sbrk_r>
 800ccb4:	4580      	cmp	r8, r0
 800ccb6:	d13a      	bne.n	800cd2e <_malloc_r+0xd2>
 800ccb8:	6821      	ldr	r1, [r4, #0]
 800ccba:	3503      	adds	r5, #3
 800ccbc:	1a6d      	subs	r5, r5, r1
 800ccbe:	f025 0503 	bic.w	r5, r5, #3
 800ccc2:	3508      	adds	r5, #8
 800ccc4:	2d0c      	cmp	r5, #12
 800ccc6:	bf38      	it	cc
 800ccc8:	250c      	movcc	r5, #12
 800ccca:	4629      	mov	r1, r5
 800cccc:	4638      	mov	r0, r7
 800ccce:	f7ff ffa5 	bl	800cc1c <sbrk_aligned>
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	d02b      	beq.n	800cd2e <_malloc_r+0xd2>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	442b      	add	r3, r5
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	e00e      	b.n	800ccfc <_malloc_r+0xa0>
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	1b52      	subs	r2, r2, r5
 800cce2:	d41e      	bmi.n	800cd22 <_malloc_r+0xc6>
 800cce4:	2a0b      	cmp	r2, #11
 800cce6:	d916      	bls.n	800cd16 <_malloc_r+0xba>
 800cce8:	1961      	adds	r1, r4, r5
 800ccea:	42a3      	cmp	r3, r4
 800ccec:	6025      	str	r5, [r4, #0]
 800ccee:	bf18      	it	ne
 800ccf0:	6059      	strne	r1, [r3, #4]
 800ccf2:	6863      	ldr	r3, [r4, #4]
 800ccf4:	bf08      	it	eq
 800ccf6:	6031      	streq	r1, [r6, #0]
 800ccf8:	5162      	str	r2, [r4, r5]
 800ccfa:	604b      	str	r3, [r1, #4]
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f104 060b 	add.w	r6, r4, #11
 800cd02:	f000 f9ed 	bl	800d0e0 <__malloc_unlock>
 800cd06:	f026 0607 	bic.w	r6, r6, #7
 800cd0a:	1d23      	adds	r3, r4, #4
 800cd0c:	1af2      	subs	r2, r6, r3
 800cd0e:	d0b6      	beq.n	800cc7e <_malloc_r+0x22>
 800cd10:	1b9b      	subs	r3, r3, r6
 800cd12:	50a3      	str	r3, [r4, r2]
 800cd14:	e7b3      	b.n	800cc7e <_malloc_r+0x22>
 800cd16:	6862      	ldr	r2, [r4, #4]
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	bf0c      	ite	eq
 800cd1c:	6032      	streq	r2, [r6, #0]
 800cd1e:	605a      	strne	r2, [r3, #4]
 800cd20:	e7ec      	b.n	800ccfc <_malloc_r+0xa0>
 800cd22:	4623      	mov	r3, r4
 800cd24:	6864      	ldr	r4, [r4, #4]
 800cd26:	e7b2      	b.n	800cc8e <_malloc_r+0x32>
 800cd28:	4634      	mov	r4, r6
 800cd2a:	6876      	ldr	r6, [r6, #4]
 800cd2c:	e7b9      	b.n	800cca2 <_malloc_r+0x46>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	603b      	str	r3, [r7, #0]
 800cd32:	4638      	mov	r0, r7
 800cd34:	f000 f9d4 	bl	800d0e0 <__malloc_unlock>
 800cd38:	e7a1      	b.n	800cc7e <_malloc_r+0x22>
 800cd3a:	6025      	str	r5, [r4, #0]
 800cd3c:	e7de      	b.n	800ccfc <_malloc_r+0xa0>
 800cd3e:	bf00      	nop
 800cd40:	200006c0 	.word	0x200006c0

0800cd44 <__ssputs_r>:
 800cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd48:	688e      	ldr	r6, [r1, #8]
 800cd4a:	429e      	cmp	r6, r3
 800cd4c:	4682      	mov	sl, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	4690      	mov	r8, r2
 800cd52:	461f      	mov	r7, r3
 800cd54:	d838      	bhi.n	800cdc8 <__ssputs_r+0x84>
 800cd56:	898a      	ldrh	r2, [r1, #12]
 800cd58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd5c:	d032      	beq.n	800cdc4 <__ssputs_r+0x80>
 800cd5e:	6825      	ldr	r5, [r4, #0]
 800cd60:	6909      	ldr	r1, [r1, #16]
 800cd62:	eba5 0901 	sub.w	r9, r5, r1
 800cd66:	6965      	ldr	r5, [r4, #20]
 800cd68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd70:	3301      	adds	r3, #1
 800cd72:	444b      	add	r3, r9
 800cd74:	106d      	asrs	r5, r5, #1
 800cd76:	429d      	cmp	r5, r3
 800cd78:	bf38      	it	cc
 800cd7a:	461d      	movcc	r5, r3
 800cd7c:	0553      	lsls	r3, r2, #21
 800cd7e:	d531      	bpl.n	800cde4 <__ssputs_r+0xa0>
 800cd80:	4629      	mov	r1, r5
 800cd82:	f7ff ff6b 	bl	800cc5c <_malloc_r>
 800cd86:	4606      	mov	r6, r0
 800cd88:	b950      	cbnz	r0, 800cda0 <__ssputs_r+0x5c>
 800cd8a:	230c      	movs	r3, #12
 800cd8c:	f8ca 3000 	str.w	r3, [sl]
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda0:	6921      	ldr	r1, [r4, #16]
 800cda2:	464a      	mov	r2, r9
 800cda4:	f7ff fb46 	bl	800c434 <memcpy>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	6126      	str	r6, [r4, #16]
 800cdb6:	6165      	str	r5, [r4, #20]
 800cdb8:	444e      	add	r6, r9
 800cdba:	eba5 0509 	sub.w	r5, r5, r9
 800cdbe:	6026      	str	r6, [r4, #0]
 800cdc0:	60a5      	str	r5, [r4, #8]
 800cdc2:	463e      	mov	r6, r7
 800cdc4:	42be      	cmp	r6, r7
 800cdc6:	d900      	bls.n	800cdca <__ssputs_r+0x86>
 800cdc8:	463e      	mov	r6, r7
 800cdca:	6820      	ldr	r0, [r4, #0]
 800cdcc:	4632      	mov	r2, r6
 800cdce:	4641      	mov	r1, r8
 800cdd0:	f000 f966 	bl	800d0a0 <memmove>
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	1b9b      	subs	r3, r3, r6
 800cdd8:	60a3      	str	r3, [r4, #8]
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	4433      	add	r3, r6
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	2000      	movs	r0, #0
 800cde2:	e7db      	b.n	800cd9c <__ssputs_r+0x58>
 800cde4:	462a      	mov	r2, r5
 800cde6:	f000 f981 	bl	800d0ec <_realloc_r>
 800cdea:	4606      	mov	r6, r0
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d1e1      	bne.n	800cdb4 <__ssputs_r+0x70>
 800cdf0:	6921      	ldr	r1, [r4, #16]
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	f7ff fec6 	bl	800cb84 <_free_r>
 800cdf8:	e7c7      	b.n	800cd8a <__ssputs_r+0x46>
	...

0800cdfc <_svfiprintf_r>:
 800cdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce00:	4698      	mov	r8, r3
 800ce02:	898b      	ldrh	r3, [r1, #12]
 800ce04:	061b      	lsls	r3, r3, #24
 800ce06:	b09d      	sub	sp, #116	; 0x74
 800ce08:	4607      	mov	r7, r0
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	4614      	mov	r4, r2
 800ce0e:	d50e      	bpl.n	800ce2e <_svfiprintf_r+0x32>
 800ce10:	690b      	ldr	r3, [r1, #16]
 800ce12:	b963      	cbnz	r3, 800ce2e <_svfiprintf_r+0x32>
 800ce14:	2140      	movs	r1, #64	; 0x40
 800ce16:	f7ff ff21 	bl	800cc5c <_malloc_r>
 800ce1a:	6028      	str	r0, [r5, #0]
 800ce1c:	6128      	str	r0, [r5, #16]
 800ce1e:	b920      	cbnz	r0, 800ce2a <_svfiprintf_r+0x2e>
 800ce20:	230c      	movs	r3, #12
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	e0d1      	b.n	800cfce <_svfiprintf_r+0x1d2>
 800ce2a:	2340      	movs	r3, #64	; 0x40
 800ce2c:	616b      	str	r3, [r5, #20]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	9309      	str	r3, [sp, #36]	; 0x24
 800ce32:	2320      	movs	r3, #32
 800ce34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce3c:	2330      	movs	r3, #48	; 0x30
 800ce3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfe8 <_svfiprintf_r+0x1ec>
 800ce42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce46:	f04f 0901 	mov.w	r9, #1
 800ce4a:	4623      	mov	r3, r4
 800ce4c:	469a      	mov	sl, r3
 800ce4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce52:	b10a      	cbz	r2, 800ce58 <_svfiprintf_r+0x5c>
 800ce54:	2a25      	cmp	r2, #37	; 0x25
 800ce56:	d1f9      	bne.n	800ce4c <_svfiprintf_r+0x50>
 800ce58:	ebba 0b04 	subs.w	fp, sl, r4
 800ce5c:	d00b      	beq.n	800ce76 <_svfiprintf_r+0x7a>
 800ce5e:	465b      	mov	r3, fp
 800ce60:	4622      	mov	r2, r4
 800ce62:	4629      	mov	r1, r5
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7ff ff6d 	bl	800cd44 <__ssputs_r>
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f000 80aa 	beq.w	800cfc4 <_svfiprintf_r+0x1c8>
 800ce70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce72:	445a      	add	r2, fp
 800ce74:	9209      	str	r2, [sp, #36]	; 0x24
 800ce76:	f89a 3000 	ldrb.w	r3, [sl]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f000 80a2 	beq.w	800cfc4 <_svfiprintf_r+0x1c8>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f04f 32ff 	mov.w	r2, #4294967295
 800ce86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce8a:	f10a 0a01 	add.w	sl, sl, #1
 800ce8e:	9304      	str	r3, [sp, #16]
 800ce90:	9307      	str	r3, [sp, #28]
 800ce92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce96:	931a      	str	r3, [sp, #104]	; 0x68
 800ce98:	4654      	mov	r4, sl
 800ce9a:	2205      	movs	r2, #5
 800ce9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea0:	4851      	ldr	r0, [pc, #324]	; (800cfe8 <_svfiprintf_r+0x1ec>)
 800cea2:	f7f3 f9a5 	bl	80001f0 <memchr>
 800cea6:	9a04      	ldr	r2, [sp, #16]
 800cea8:	b9d8      	cbnz	r0, 800cee2 <_svfiprintf_r+0xe6>
 800ceaa:	06d0      	lsls	r0, r2, #27
 800ceac:	bf44      	itt	mi
 800ceae:	2320      	movmi	r3, #32
 800ceb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb4:	0711      	lsls	r1, r2, #28
 800ceb6:	bf44      	itt	mi
 800ceb8:	232b      	movmi	r3, #43	; 0x2b
 800ceba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cebe:	f89a 3000 	ldrb.w	r3, [sl]
 800cec2:	2b2a      	cmp	r3, #42	; 0x2a
 800cec4:	d015      	beq.n	800cef2 <_svfiprintf_r+0xf6>
 800cec6:	9a07      	ldr	r2, [sp, #28]
 800cec8:	4654      	mov	r4, sl
 800ceca:	2000      	movs	r0, #0
 800cecc:	f04f 0c0a 	mov.w	ip, #10
 800ced0:	4621      	mov	r1, r4
 800ced2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced6:	3b30      	subs	r3, #48	; 0x30
 800ced8:	2b09      	cmp	r3, #9
 800ceda:	d94e      	bls.n	800cf7a <_svfiprintf_r+0x17e>
 800cedc:	b1b0      	cbz	r0, 800cf0c <_svfiprintf_r+0x110>
 800cede:	9207      	str	r2, [sp, #28]
 800cee0:	e014      	b.n	800cf0c <_svfiprintf_r+0x110>
 800cee2:	eba0 0308 	sub.w	r3, r0, r8
 800cee6:	fa09 f303 	lsl.w	r3, r9, r3
 800ceea:	4313      	orrs	r3, r2
 800ceec:	9304      	str	r3, [sp, #16]
 800ceee:	46a2      	mov	sl, r4
 800cef0:	e7d2      	b.n	800ce98 <_svfiprintf_r+0x9c>
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	1d19      	adds	r1, r3, #4
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	9103      	str	r1, [sp, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bfbb      	ittet	lt
 800cefe:	425b      	neglt	r3, r3
 800cf00:	f042 0202 	orrlt.w	r2, r2, #2
 800cf04:	9307      	strge	r3, [sp, #28]
 800cf06:	9307      	strlt	r3, [sp, #28]
 800cf08:	bfb8      	it	lt
 800cf0a:	9204      	strlt	r2, [sp, #16]
 800cf0c:	7823      	ldrb	r3, [r4, #0]
 800cf0e:	2b2e      	cmp	r3, #46	; 0x2e
 800cf10:	d10c      	bne.n	800cf2c <_svfiprintf_r+0x130>
 800cf12:	7863      	ldrb	r3, [r4, #1]
 800cf14:	2b2a      	cmp	r3, #42	; 0x2a
 800cf16:	d135      	bne.n	800cf84 <_svfiprintf_r+0x188>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	1d1a      	adds	r2, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	9203      	str	r2, [sp, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfb8      	it	lt
 800cf24:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf28:	3402      	adds	r4, #2
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cff8 <_svfiprintf_r+0x1fc>
 800cf30:	7821      	ldrb	r1, [r4, #0]
 800cf32:	2203      	movs	r2, #3
 800cf34:	4650      	mov	r0, sl
 800cf36:	f7f3 f95b 	bl	80001f0 <memchr>
 800cf3a:	b140      	cbz	r0, 800cf4e <_svfiprintf_r+0x152>
 800cf3c:	2340      	movs	r3, #64	; 0x40
 800cf3e:	eba0 000a 	sub.w	r0, r0, sl
 800cf42:	fa03 f000 	lsl.w	r0, r3, r0
 800cf46:	9b04      	ldr	r3, [sp, #16]
 800cf48:	4303      	orrs	r3, r0
 800cf4a:	3401      	adds	r4, #1
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf52:	4826      	ldr	r0, [pc, #152]	; (800cfec <_svfiprintf_r+0x1f0>)
 800cf54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf58:	2206      	movs	r2, #6
 800cf5a:	f7f3 f949 	bl	80001f0 <memchr>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	d038      	beq.n	800cfd4 <_svfiprintf_r+0x1d8>
 800cf62:	4b23      	ldr	r3, [pc, #140]	; (800cff0 <_svfiprintf_r+0x1f4>)
 800cf64:	bb1b      	cbnz	r3, 800cfae <_svfiprintf_r+0x1b2>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	3307      	adds	r3, #7
 800cf6a:	f023 0307 	bic.w	r3, r3, #7
 800cf6e:	3308      	adds	r3, #8
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf74:	4433      	add	r3, r6
 800cf76:	9309      	str	r3, [sp, #36]	; 0x24
 800cf78:	e767      	b.n	800ce4a <_svfiprintf_r+0x4e>
 800cf7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf7e:	460c      	mov	r4, r1
 800cf80:	2001      	movs	r0, #1
 800cf82:	e7a5      	b.n	800ced0 <_svfiprintf_r+0xd4>
 800cf84:	2300      	movs	r3, #0
 800cf86:	3401      	adds	r4, #1
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f04f 0c0a 	mov.w	ip, #10
 800cf90:	4620      	mov	r0, r4
 800cf92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf96:	3a30      	subs	r2, #48	; 0x30
 800cf98:	2a09      	cmp	r2, #9
 800cf9a:	d903      	bls.n	800cfa4 <_svfiprintf_r+0x1a8>
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0c5      	beq.n	800cf2c <_svfiprintf_r+0x130>
 800cfa0:	9105      	str	r1, [sp, #20]
 800cfa2:	e7c3      	b.n	800cf2c <_svfiprintf_r+0x130>
 800cfa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e7f0      	b.n	800cf90 <_svfiprintf_r+0x194>
 800cfae:	ab03      	add	r3, sp, #12
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	4b0f      	ldr	r3, [pc, #60]	; (800cff4 <_svfiprintf_r+0x1f8>)
 800cfb6:	a904      	add	r1, sp, #16
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7fd ffcb 	bl	800af54 <_printf_float>
 800cfbe:	1c42      	adds	r2, r0, #1
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	d1d6      	bne.n	800cf72 <_svfiprintf_r+0x176>
 800cfc4:	89ab      	ldrh	r3, [r5, #12]
 800cfc6:	065b      	lsls	r3, r3, #25
 800cfc8:	f53f af2c 	bmi.w	800ce24 <_svfiprintf_r+0x28>
 800cfcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfce:	b01d      	add	sp, #116	; 0x74
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	ab03      	add	r3, sp, #12
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	462a      	mov	r2, r5
 800cfda:	4b06      	ldr	r3, [pc, #24]	; (800cff4 <_svfiprintf_r+0x1f8>)
 800cfdc:	a904      	add	r1, sp, #16
 800cfde:	4638      	mov	r0, r7
 800cfe0:	f7fe fa5c 	bl	800b49c <_printf_i>
 800cfe4:	e7eb      	b.n	800cfbe <_svfiprintf_r+0x1c2>
 800cfe6:	bf00      	nop
 800cfe8:	080195cc 	.word	0x080195cc
 800cfec:	080195d6 	.word	0x080195d6
 800cff0:	0800af55 	.word	0x0800af55
 800cff4:	0800cd45 	.word	0x0800cd45
 800cff8:	080195d2 	.word	0x080195d2

0800cffc <_sbrk_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	4d06      	ldr	r5, [pc, #24]	; (800d018 <_sbrk_r+0x1c>)
 800d000:	2300      	movs	r3, #0
 800d002:	4604      	mov	r4, r0
 800d004:	4608      	mov	r0, r1
 800d006:	602b      	str	r3, [r5, #0]
 800d008:	f7f6 fc66 	bl	80038d8 <_sbrk>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d102      	bne.n	800d016 <_sbrk_r+0x1a>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	b103      	cbz	r3, 800d016 <_sbrk_r+0x1a>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	200006c8 	.word	0x200006c8

0800d01c <__assert_func>:
 800d01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d01e:	4614      	mov	r4, r2
 800d020:	461a      	mov	r2, r3
 800d022:	4b09      	ldr	r3, [pc, #36]	; (800d048 <__assert_func+0x2c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4605      	mov	r5, r0
 800d028:	68d8      	ldr	r0, [r3, #12]
 800d02a:	b14c      	cbz	r4, 800d040 <__assert_func+0x24>
 800d02c:	4b07      	ldr	r3, [pc, #28]	; (800d04c <__assert_func+0x30>)
 800d02e:	9100      	str	r1, [sp, #0]
 800d030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d034:	4906      	ldr	r1, [pc, #24]	; (800d050 <__assert_func+0x34>)
 800d036:	462b      	mov	r3, r5
 800d038:	f000 f80e 	bl	800d058 <fiprintf>
 800d03c:	f000 faac 	bl	800d598 <abort>
 800d040:	4b04      	ldr	r3, [pc, #16]	; (800d054 <__assert_func+0x38>)
 800d042:	461c      	mov	r4, r3
 800d044:	e7f3      	b.n	800d02e <__assert_func+0x12>
 800d046:	bf00      	nop
 800d048:	200000b4 	.word	0x200000b4
 800d04c:	080195dd 	.word	0x080195dd
 800d050:	080195ea 	.word	0x080195ea
 800d054:	08019618 	.word	0x08019618

0800d058 <fiprintf>:
 800d058:	b40e      	push	{r1, r2, r3}
 800d05a:	b503      	push	{r0, r1, lr}
 800d05c:	4601      	mov	r1, r0
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	4805      	ldr	r0, [pc, #20]	; (800d078 <fiprintf+0x20>)
 800d062:	f853 2b04 	ldr.w	r2, [r3], #4
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f000 f897 	bl	800d19c <_vfiprintf_r>
 800d06e:	b002      	add	sp, #8
 800d070:	f85d eb04 	ldr.w	lr, [sp], #4
 800d074:	b003      	add	sp, #12
 800d076:	4770      	bx	lr
 800d078:	200000b4 	.word	0x200000b4

0800d07c <__ascii_mbtowc>:
 800d07c:	b082      	sub	sp, #8
 800d07e:	b901      	cbnz	r1, 800d082 <__ascii_mbtowc+0x6>
 800d080:	a901      	add	r1, sp, #4
 800d082:	b142      	cbz	r2, 800d096 <__ascii_mbtowc+0x1a>
 800d084:	b14b      	cbz	r3, 800d09a <__ascii_mbtowc+0x1e>
 800d086:	7813      	ldrb	r3, [r2, #0]
 800d088:	600b      	str	r3, [r1, #0]
 800d08a:	7812      	ldrb	r2, [r2, #0]
 800d08c:	1e10      	subs	r0, r2, #0
 800d08e:	bf18      	it	ne
 800d090:	2001      	movne	r0, #1
 800d092:	b002      	add	sp, #8
 800d094:	4770      	bx	lr
 800d096:	4610      	mov	r0, r2
 800d098:	e7fb      	b.n	800d092 <__ascii_mbtowc+0x16>
 800d09a:	f06f 0001 	mvn.w	r0, #1
 800d09e:	e7f8      	b.n	800d092 <__ascii_mbtowc+0x16>

0800d0a0 <memmove>:
 800d0a0:	4288      	cmp	r0, r1
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	eb01 0402 	add.w	r4, r1, r2
 800d0a8:	d902      	bls.n	800d0b0 <memmove+0x10>
 800d0aa:	4284      	cmp	r4, r0
 800d0ac:	4623      	mov	r3, r4
 800d0ae:	d807      	bhi.n	800d0c0 <memmove+0x20>
 800d0b0:	1e43      	subs	r3, r0, #1
 800d0b2:	42a1      	cmp	r1, r4
 800d0b4:	d008      	beq.n	800d0c8 <memmove+0x28>
 800d0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0be:	e7f8      	b.n	800d0b2 <memmove+0x12>
 800d0c0:	4402      	add	r2, r0
 800d0c2:	4601      	mov	r1, r0
 800d0c4:	428a      	cmp	r2, r1
 800d0c6:	d100      	bne.n	800d0ca <memmove+0x2a>
 800d0c8:	bd10      	pop	{r4, pc}
 800d0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0d2:	e7f7      	b.n	800d0c4 <memmove+0x24>

0800d0d4 <__malloc_lock>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	; (800d0dc <__malloc_lock+0x8>)
 800d0d6:	f000 bc1f 	b.w	800d918 <__retarget_lock_acquire_recursive>
 800d0da:	bf00      	nop
 800d0dc:	200006cc 	.word	0x200006cc

0800d0e0 <__malloc_unlock>:
 800d0e0:	4801      	ldr	r0, [pc, #4]	; (800d0e8 <__malloc_unlock+0x8>)
 800d0e2:	f000 bc1a 	b.w	800d91a <__retarget_lock_release_recursive>
 800d0e6:	bf00      	nop
 800d0e8:	200006cc 	.word	0x200006cc

0800d0ec <_realloc_r>:
 800d0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f0:	4680      	mov	r8, r0
 800d0f2:	4614      	mov	r4, r2
 800d0f4:	460e      	mov	r6, r1
 800d0f6:	b921      	cbnz	r1, 800d102 <_realloc_r+0x16>
 800d0f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	f7ff bdad 	b.w	800cc5c <_malloc_r>
 800d102:	b92a      	cbnz	r2, 800d110 <_realloc_r+0x24>
 800d104:	f7ff fd3e 	bl	800cb84 <_free_r>
 800d108:	4625      	mov	r5, r4
 800d10a:	4628      	mov	r0, r5
 800d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d110:	f000 fc6a 	bl	800d9e8 <_malloc_usable_size_r>
 800d114:	4284      	cmp	r4, r0
 800d116:	4607      	mov	r7, r0
 800d118:	d802      	bhi.n	800d120 <_realloc_r+0x34>
 800d11a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d11e:	d812      	bhi.n	800d146 <_realloc_r+0x5a>
 800d120:	4621      	mov	r1, r4
 800d122:	4640      	mov	r0, r8
 800d124:	f7ff fd9a 	bl	800cc5c <_malloc_r>
 800d128:	4605      	mov	r5, r0
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d0ed      	beq.n	800d10a <_realloc_r+0x1e>
 800d12e:	42bc      	cmp	r4, r7
 800d130:	4622      	mov	r2, r4
 800d132:	4631      	mov	r1, r6
 800d134:	bf28      	it	cs
 800d136:	463a      	movcs	r2, r7
 800d138:	f7ff f97c 	bl	800c434 <memcpy>
 800d13c:	4631      	mov	r1, r6
 800d13e:	4640      	mov	r0, r8
 800d140:	f7ff fd20 	bl	800cb84 <_free_r>
 800d144:	e7e1      	b.n	800d10a <_realloc_r+0x1e>
 800d146:	4635      	mov	r5, r6
 800d148:	e7df      	b.n	800d10a <_realloc_r+0x1e>

0800d14a <__sfputc_r>:
 800d14a:	6893      	ldr	r3, [r2, #8]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	b410      	push	{r4}
 800d152:	6093      	str	r3, [r2, #8]
 800d154:	da08      	bge.n	800d168 <__sfputc_r+0x1e>
 800d156:	6994      	ldr	r4, [r2, #24]
 800d158:	42a3      	cmp	r3, r4
 800d15a:	db01      	blt.n	800d160 <__sfputc_r+0x16>
 800d15c:	290a      	cmp	r1, #10
 800d15e:	d103      	bne.n	800d168 <__sfputc_r+0x1e>
 800d160:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d164:	f000 b94a 	b.w	800d3fc <__swbuf_r>
 800d168:	6813      	ldr	r3, [r2, #0]
 800d16a:	1c58      	adds	r0, r3, #1
 800d16c:	6010      	str	r0, [r2, #0]
 800d16e:	7019      	strb	r1, [r3, #0]
 800d170:	4608      	mov	r0, r1
 800d172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <__sfputs_r>:
 800d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	4614      	mov	r4, r2
 800d180:	18d5      	adds	r5, r2, r3
 800d182:	42ac      	cmp	r4, r5
 800d184:	d101      	bne.n	800d18a <__sfputs_r+0x12>
 800d186:	2000      	movs	r0, #0
 800d188:	e007      	b.n	800d19a <__sfputs_r+0x22>
 800d18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18e:	463a      	mov	r2, r7
 800d190:	4630      	mov	r0, r6
 800d192:	f7ff ffda 	bl	800d14a <__sfputc_r>
 800d196:	1c43      	adds	r3, r0, #1
 800d198:	d1f3      	bne.n	800d182 <__sfputs_r+0xa>
 800d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d19c <_vfiprintf_r>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	b09d      	sub	sp, #116	; 0x74
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	4698      	mov	r8, r3
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	b118      	cbz	r0, 800d1b4 <_vfiprintf_r+0x18>
 800d1ac:	6983      	ldr	r3, [r0, #24]
 800d1ae:	b90b      	cbnz	r3, 800d1b4 <_vfiprintf_r+0x18>
 800d1b0:	f000 fb14 	bl	800d7dc <__sinit>
 800d1b4:	4b89      	ldr	r3, [pc, #548]	; (800d3dc <_vfiprintf_r+0x240>)
 800d1b6:	429d      	cmp	r5, r3
 800d1b8:	d11b      	bne.n	800d1f2 <_vfiprintf_r+0x56>
 800d1ba:	6875      	ldr	r5, [r6, #4]
 800d1bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1be:	07d9      	lsls	r1, r3, #31
 800d1c0:	d405      	bmi.n	800d1ce <_vfiprintf_r+0x32>
 800d1c2:	89ab      	ldrh	r3, [r5, #12]
 800d1c4:	059a      	lsls	r2, r3, #22
 800d1c6:	d402      	bmi.n	800d1ce <_vfiprintf_r+0x32>
 800d1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ca:	f000 fba5 	bl	800d918 <__retarget_lock_acquire_recursive>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	071b      	lsls	r3, r3, #28
 800d1d2:	d501      	bpl.n	800d1d8 <_vfiprintf_r+0x3c>
 800d1d4:	692b      	ldr	r3, [r5, #16]
 800d1d6:	b9eb      	cbnz	r3, 800d214 <_vfiprintf_r+0x78>
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f000 f96e 	bl	800d4bc <__swsetup_r>
 800d1e0:	b1c0      	cbz	r0, 800d214 <_vfiprintf_r+0x78>
 800d1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1e4:	07dc      	lsls	r4, r3, #31
 800d1e6:	d50e      	bpl.n	800d206 <_vfiprintf_r+0x6a>
 800d1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ec:	b01d      	add	sp, #116	; 0x74
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	4b7b      	ldr	r3, [pc, #492]	; (800d3e0 <_vfiprintf_r+0x244>)
 800d1f4:	429d      	cmp	r5, r3
 800d1f6:	d101      	bne.n	800d1fc <_vfiprintf_r+0x60>
 800d1f8:	68b5      	ldr	r5, [r6, #8]
 800d1fa:	e7df      	b.n	800d1bc <_vfiprintf_r+0x20>
 800d1fc:	4b79      	ldr	r3, [pc, #484]	; (800d3e4 <_vfiprintf_r+0x248>)
 800d1fe:	429d      	cmp	r5, r3
 800d200:	bf08      	it	eq
 800d202:	68f5      	ldreq	r5, [r6, #12]
 800d204:	e7da      	b.n	800d1bc <_vfiprintf_r+0x20>
 800d206:	89ab      	ldrh	r3, [r5, #12]
 800d208:	0598      	lsls	r0, r3, #22
 800d20a:	d4ed      	bmi.n	800d1e8 <_vfiprintf_r+0x4c>
 800d20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d20e:	f000 fb84 	bl	800d91a <__retarget_lock_release_recursive>
 800d212:	e7e9      	b.n	800d1e8 <_vfiprintf_r+0x4c>
 800d214:	2300      	movs	r3, #0
 800d216:	9309      	str	r3, [sp, #36]	; 0x24
 800d218:	2320      	movs	r3, #32
 800d21a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d21e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d222:	2330      	movs	r3, #48	; 0x30
 800d224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3e8 <_vfiprintf_r+0x24c>
 800d228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d22c:	f04f 0901 	mov.w	r9, #1
 800d230:	4623      	mov	r3, r4
 800d232:	469a      	mov	sl, r3
 800d234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d238:	b10a      	cbz	r2, 800d23e <_vfiprintf_r+0xa2>
 800d23a:	2a25      	cmp	r2, #37	; 0x25
 800d23c:	d1f9      	bne.n	800d232 <_vfiprintf_r+0x96>
 800d23e:	ebba 0b04 	subs.w	fp, sl, r4
 800d242:	d00b      	beq.n	800d25c <_vfiprintf_r+0xc0>
 800d244:	465b      	mov	r3, fp
 800d246:	4622      	mov	r2, r4
 800d248:	4629      	mov	r1, r5
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7ff ff94 	bl	800d178 <__sfputs_r>
 800d250:	3001      	adds	r0, #1
 800d252:	f000 80aa 	beq.w	800d3aa <_vfiprintf_r+0x20e>
 800d256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d258:	445a      	add	r2, fp
 800d25a:	9209      	str	r2, [sp, #36]	; 0x24
 800d25c:	f89a 3000 	ldrb.w	r3, [sl]
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 80a2 	beq.w	800d3aa <_vfiprintf_r+0x20e>
 800d266:	2300      	movs	r3, #0
 800d268:	f04f 32ff 	mov.w	r2, #4294967295
 800d26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d270:	f10a 0a01 	add.w	sl, sl, #1
 800d274:	9304      	str	r3, [sp, #16]
 800d276:	9307      	str	r3, [sp, #28]
 800d278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d27c:	931a      	str	r3, [sp, #104]	; 0x68
 800d27e:	4654      	mov	r4, sl
 800d280:	2205      	movs	r2, #5
 800d282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d286:	4858      	ldr	r0, [pc, #352]	; (800d3e8 <_vfiprintf_r+0x24c>)
 800d288:	f7f2 ffb2 	bl	80001f0 <memchr>
 800d28c:	9a04      	ldr	r2, [sp, #16]
 800d28e:	b9d8      	cbnz	r0, 800d2c8 <_vfiprintf_r+0x12c>
 800d290:	06d1      	lsls	r1, r2, #27
 800d292:	bf44      	itt	mi
 800d294:	2320      	movmi	r3, #32
 800d296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d29a:	0713      	lsls	r3, r2, #28
 800d29c:	bf44      	itt	mi
 800d29e:	232b      	movmi	r3, #43	; 0x2b
 800d2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2aa:	d015      	beq.n	800d2d8 <_vfiprintf_r+0x13c>
 800d2ac:	9a07      	ldr	r2, [sp, #28]
 800d2ae:	4654      	mov	r4, sl
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	f04f 0c0a 	mov.w	ip, #10
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2bc:	3b30      	subs	r3, #48	; 0x30
 800d2be:	2b09      	cmp	r3, #9
 800d2c0:	d94e      	bls.n	800d360 <_vfiprintf_r+0x1c4>
 800d2c2:	b1b0      	cbz	r0, 800d2f2 <_vfiprintf_r+0x156>
 800d2c4:	9207      	str	r2, [sp, #28]
 800d2c6:	e014      	b.n	800d2f2 <_vfiprintf_r+0x156>
 800d2c8:	eba0 0308 	sub.w	r3, r0, r8
 800d2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	46a2      	mov	sl, r4
 800d2d6:	e7d2      	b.n	800d27e <_vfiprintf_r+0xe2>
 800d2d8:	9b03      	ldr	r3, [sp, #12]
 800d2da:	1d19      	adds	r1, r3, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	9103      	str	r1, [sp, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bfbb      	ittet	lt
 800d2e4:	425b      	neglt	r3, r3
 800d2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ea:	9307      	strge	r3, [sp, #28]
 800d2ec:	9307      	strlt	r3, [sp, #28]
 800d2ee:	bfb8      	it	lt
 800d2f0:	9204      	strlt	r2, [sp, #16]
 800d2f2:	7823      	ldrb	r3, [r4, #0]
 800d2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800d2f6:	d10c      	bne.n	800d312 <_vfiprintf_r+0x176>
 800d2f8:	7863      	ldrb	r3, [r4, #1]
 800d2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d2fc:	d135      	bne.n	800d36a <_vfiprintf_r+0x1ce>
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	1d1a      	adds	r2, r3, #4
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	9203      	str	r2, [sp, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	bfb8      	it	lt
 800d30a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d30e:	3402      	adds	r4, #2
 800d310:	9305      	str	r3, [sp, #20]
 800d312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3f8 <_vfiprintf_r+0x25c>
 800d316:	7821      	ldrb	r1, [r4, #0]
 800d318:	2203      	movs	r2, #3
 800d31a:	4650      	mov	r0, sl
 800d31c:	f7f2 ff68 	bl	80001f0 <memchr>
 800d320:	b140      	cbz	r0, 800d334 <_vfiprintf_r+0x198>
 800d322:	2340      	movs	r3, #64	; 0x40
 800d324:	eba0 000a 	sub.w	r0, r0, sl
 800d328:	fa03 f000 	lsl.w	r0, r3, r0
 800d32c:	9b04      	ldr	r3, [sp, #16]
 800d32e:	4303      	orrs	r3, r0
 800d330:	3401      	adds	r4, #1
 800d332:	9304      	str	r3, [sp, #16]
 800d334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d338:	482c      	ldr	r0, [pc, #176]	; (800d3ec <_vfiprintf_r+0x250>)
 800d33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d33e:	2206      	movs	r2, #6
 800d340:	f7f2 ff56 	bl	80001f0 <memchr>
 800d344:	2800      	cmp	r0, #0
 800d346:	d03f      	beq.n	800d3c8 <_vfiprintf_r+0x22c>
 800d348:	4b29      	ldr	r3, [pc, #164]	; (800d3f0 <_vfiprintf_r+0x254>)
 800d34a:	bb1b      	cbnz	r3, 800d394 <_vfiprintf_r+0x1f8>
 800d34c:	9b03      	ldr	r3, [sp, #12]
 800d34e:	3307      	adds	r3, #7
 800d350:	f023 0307 	bic.w	r3, r3, #7
 800d354:	3308      	adds	r3, #8
 800d356:	9303      	str	r3, [sp, #12]
 800d358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d35a:	443b      	add	r3, r7
 800d35c:	9309      	str	r3, [sp, #36]	; 0x24
 800d35e:	e767      	b.n	800d230 <_vfiprintf_r+0x94>
 800d360:	fb0c 3202 	mla	r2, ip, r2, r3
 800d364:	460c      	mov	r4, r1
 800d366:	2001      	movs	r0, #1
 800d368:	e7a5      	b.n	800d2b6 <_vfiprintf_r+0x11a>
 800d36a:	2300      	movs	r3, #0
 800d36c:	3401      	adds	r4, #1
 800d36e:	9305      	str	r3, [sp, #20]
 800d370:	4619      	mov	r1, r3
 800d372:	f04f 0c0a 	mov.w	ip, #10
 800d376:	4620      	mov	r0, r4
 800d378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d37c:	3a30      	subs	r2, #48	; 0x30
 800d37e:	2a09      	cmp	r2, #9
 800d380:	d903      	bls.n	800d38a <_vfiprintf_r+0x1ee>
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0c5      	beq.n	800d312 <_vfiprintf_r+0x176>
 800d386:	9105      	str	r1, [sp, #20]
 800d388:	e7c3      	b.n	800d312 <_vfiprintf_r+0x176>
 800d38a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d38e:	4604      	mov	r4, r0
 800d390:	2301      	movs	r3, #1
 800d392:	e7f0      	b.n	800d376 <_vfiprintf_r+0x1da>
 800d394:	ab03      	add	r3, sp, #12
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	462a      	mov	r2, r5
 800d39a:	4b16      	ldr	r3, [pc, #88]	; (800d3f4 <_vfiprintf_r+0x258>)
 800d39c:	a904      	add	r1, sp, #16
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f7fd fdd8 	bl	800af54 <_printf_float>
 800d3a4:	4607      	mov	r7, r0
 800d3a6:	1c78      	adds	r0, r7, #1
 800d3a8:	d1d6      	bne.n	800d358 <_vfiprintf_r+0x1bc>
 800d3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3ac:	07d9      	lsls	r1, r3, #31
 800d3ae:	d405      	bmi.n	800d3bc <_vfiprintf_r+0x220>
 800d3b0:	89ab      	ldrh	r3, [r5, #12]
 800d3b2:	059a      	lsls	r2, r3, #22
 800d3b4:	d402      	bmi.n	800d3bc <_vfiprintf_r+0x220>
 800d3b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3b8:	f000 faaf 	bl	800d91a <__retarget_lock_release_recursive>
 800d3bc:	89ab      	ldrh	r3, [r5, #12]
 800d3be:	065b      	lsls	r3, r3, #25
 800d3c0:	f53f af12 	bmi.w	800d1e8 <_vfiprintf_r+0x4c>
 800d3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3c6:	e711      	b.n	800d1ec <_vfiprintf_r+0x50>
 800d3c8:	ab03      	add	r3, sp, #12
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	462a      	mov	r2, r5
 800d3ce:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <_vfiprintf_r+0x258>)
 800d3d0:	a904      	add	r1, sp, #16
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f7fe f862 	bl	800b49c <_printf_i>
 800d3d8:	e7e4      	b.n	800d3a4 <_vfiprintf_r+0x208>
 800d3da:	bf00      	nop
 800d3dc:	08019744 	.word	0x08019744
 800d3e0:	08019764 	.word	0x08019764
 800d3e4:	08019724 	.word	0x08019724
 800d3e8:	080195cc 	.word	0x080195cc
 800d3ec:	080195d6 	.word	0x080195d6
 800d3f0:	0800af55 	.word	0x0800af55
 800d3f4:	0800d179 	.word	0x0800d179
 800d3f8:	080195d2 	.word	0x080195d2

0800d3fc <__swbuf_r>:
 800d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fe:	460e      	mov	r6, r1
 800d400:	4614      	mov	r4, r2
 800d402:	4605      	mov	r5, r0
 800d404:	b118      	cbz	r0, 800d40e <__swbuf_r+0x12>
 800d406:	6983      	ldr	r3, [r0, #24]
 800d408:	b90b      	cbnz	r3, 800d40e <__swbuf_r+0x12>
 800d40a:	f000 f9e7 	bl	800d7dc <__sinit>
 800d40e:	4b21      	ldr	r3, [pc, #132]	; (800d494 <__swbuf_r+0x98>)
 800d410:	429c      	cmp	r4, r3
 800d412:	d12b      	bne.n	800d46c <__swbuf_r+0x70>
 800d414:	686c      	ldr	r4, [r5, #4]
 800d416:	69a3      	ldr	r3, [r4, #24]
 800d418:	60a3      	str	r3, [r4, #8]
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	071a      	lsls	r2, r3, #28
 800d41e:	d52f      	bpl.n	800d480 <__swbuf_r+0x84>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	b36b      	cbz	r3, 800d480 <__swbuf_r+0x84>
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	6820      	ldr	r0, [r4, #0]
 800d428:	1ac0      	subs	r0, r0, r3
 800d42a:	6963      	ldr	r3, [r4, #20]
 800d42c:	b2f6      	uxtb	r6, r6
 800d42e:	4283      	cmp	r3, r0
 800d430:	4637      	mov	r7, r6
 800d432:	dc04      	bgt.n	800d43e <__swbuf_r+0x42>
 800d434:	4621      	mov	r1, r4
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f93c 	bl	800d6b4 <_fflush_r>
 800d43c:	bb30      	cbnz	r0, 800d48c <__swbuf_r+0x90>
 800d43e:	68a3      	ldr	r3, [r4, #8]
 800d440:	3b01      	subs	r3, #1
 800d442:	60a3      	str	r3, [r4, #8]
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	6022      	str	r2, [r4, #0]
 800d44a:	701e      	strb	r6, [r3, #0]
 800d44c:	6963      	ldr	r3, [r4, #20]
 800d44e:	3001      	adds	r0, #1
 800d450:	4283      	cmp	r3, r0
 800d452:	d004      	beq.n	800d45e <__swbuf_r+0x62>
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	07db      	lsls	r3, r3, #31
 800d458:	d506      	bpl.n	800d468 <__swbuf_r+0x6c>
 800d45a:	2e0a      	cmp	r6, #10
 800d45c:	d104      	bne.n	800d468 <__swbuf_r+0x6c>
 800d45e:	4621      	mov	r1, r4
 800d460:	4628      	mov	r0, r5
 800d462:	f000 f927 	bl	800d6b4 <_fflush_r>
 800d466:	b988      	cbnz	r0, 800d48c <__swbuf_r+0x90>
 800d468:	4638      	mov	r0, r7
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46c:	4b0a      	ldr	r3, [pc, #40]	; (800d498 <__swbuf_r+0x9c>)
 800d46e:	429c      	cmp	r4, r3
 800d470:	d101      	bne.n	800d476 <__swbuf_r+0x7a>
 800d472:	68ac      	ldr	r4, [r5, #8]
 800d474:	e7cf      	b.n	800d416 <__swbuf_r+0x1a>
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <__swbuf_r+0xa0>)
 800d478:	429c      	cmp	r4, r3
 800d47a:	bf08      	it	eq
 800d47c:	68ec      	ldreq	r4, [r5, #12]
 800d47e:	e7ca      	b.n	800d416 <__swbuf_r+0x1a>
 800d480:	4621      	mov	r1, r4
 800d482:	4628      	mov	r0, r5
 800d484:	f000 f81a 	bl	800d4bc <__swsetup_r>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d0cb      	beq.n	800d424 <__swbuf_r+0x28>
 800d48c:	f04f 37ff 	mov.w	r7, #4294967295
 800d490:	e7ea      	b.n	800d468 <__swbuf_r+0x6c>
 800d492:	bf00      	nop
 800d494:	08019744 	.word	0x08019744
 800d498:	08019764 	.word	0x08019764
 800d49c:	08019724 	.word	0x08019724

0800d4a0 <__ascii_wctomb>:
 800d4a0:	b149      	cbz	r1, 800d4b6 <__ascii_wctomb+0x16>
 800d4a2:	2aff      	cmp	r2, #255	; 0xff
 800d4a4:	bf85      	ittet	hi
 800d4a6:	238a      	movhi	r3, #138	; 0x8a
 800d4a8:	6003      	strhi	r3, [r0, #0]
 800d4aa:	700a      	strbls	r2, [r1, #0]
 800d4ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4b0:	bf98      	it	ls
 800d4b2:	2001      	movls	r0, #1
 800d4b4:	4770      	bx	lr
 800d4b6:	4608      	mov	r0, r1
 800d4b8:	4770      	bx	lr
	...

0800d4bc <__swsetup_r>:
 800d4bc:	4b32      	ldr	r3, [pc, #200]	; (800d588 <__swsetup_r+0xcc>)
 800d4be:	b570      	push	{r4, r5, r6, lr}
 800d4c0:	681d      	ldr	r5, [r3, #0]
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	460c      	mov	r4, r1
 800d4c6:	b125      	cbz	r5, 800d4d2 <__swsetup_r+0x16>
 800d4c8:	69ab      	ldr	r3, [r5, #24]
 800d4ca:	b913      	cbnz	r3, 800d4d2 <__swsetup_r+0x16>
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f000 f985 	bl	800d7dc <__sinit>
 800d4d2:	4b2e      	ldr	r3, [pc, #184]	; (800d58c <__swsetup_r+0xd0>)
 800d4d4:	429c      	cmp	r4, r3
 800d4d6:	d10f      	bne.n	800d4f8 <__swsetup_r+0x3c>
 800d4d8:	686c      	ldr	r4, [r5, #4]
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4e0:	0719      	lsls	r1, r3, #28
 800d4e2:	d42c      	bmi.n	800d53e <__swsetup_r+0x82>
 800d4e4:	06dd      	lsls	r5, r3, #27
 800d4e6:	d411      	bmi.n	800d50c <__swsetup_r+0x50>
 800d4e8:	2309      	movs	r3, #9
 800d4ea:	6033      	str	r3, [r6, #0]
 800d4ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f6:	e03e      	b.n	800d576 <__swsetup_r+0xba>
 800d4f8:	4b25      	ldr	r3, [pc, #148]	; (800d590 <__swsetup_r+0xd4>)
 800d4fa:	429c      	cmp	r4, r3
 800d4fc:	d101      	bne.n	800d502 <__swsetup_r+0x46>
 800d4fe:	68ac      	ldr	r4, [r5, #8]
 800d500:	e7eb      	b.n	800d4da <__swsetup_r+0x1e>
 800d502:	4b24      	ldr	r3, [pc, #144]	; (800d594 <__swsetup_r+0xd8>)
 800d504:	429c      	cmp	r4, r3
 800d506:	bf08      	it	eq
 800d508:	68ec      	ldreq	r4, [r5, #12]
 800d50a:	e7e6      	b.n	800d4da <__swsetup_r+0x1e>
 800d50c:	0758      	lsls	r0, r3, #29
 800d50e:	d512      	bpl.n	800d536 <__swsetup_r+0x7a>
 800d510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d512:	b141      	cbz	r1, 800d526 <__swsetup_r+0x6a>
 800d514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d518:	4299      	cmp	r1, r3
 800d51a:	d002      	beq.n	800d522 <__swsetup_r+0x66>
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff fb31 	bl	800cb84 <_free_r>
 800d522:	2300      	movs	r3, #0
 800d524:	6363      	str	r3, [r4, #52]	; 0x34
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d52c:	81a3      	strh	r3, [r4, #12]
 800d52e:	2300      	movs	r3, #0
 800d530:	6063      	str	r3, [r4, #4]
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f043 0308 	orr.w	r3, r3, #8
 800d53c:	81a3      	strh	r3, [r4, #12]
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	b94b      	cbnz	r3, 800d556 <__swsetup_r+0x9a>
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d54c:	d003      	beq.n	800d556 <__swsetup_r+0x9a>
 800d54e:	4621      	mov	r1, r4
 800d550:	4630      	mov	r0, r6
 800d552:	f000 fa09 	bl	800d968 <__smakebuf_r>
 800d556:	89a0      	ldrh	r0, [r4, #12]
 800d558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d55c:	f010 0301 	ands.w	r3, r0, #1
 800d560:	d00a      	beq.n	800d578 <__swsetup_r+0xbc>
 800d562:	2300      	movs	r3, #0
 800d564:	60a3      	str	r3, [r4, #8]
 800d566:	6963      	ldr	r3, [r4, #20]
 800d568:	425b      	negs	r3, r3
 800d56a:	61a3      	str	r3, [r4, #24]
 800d56c:	6923      	ldr	r3, [r4, #16]
 800d56e:	b943      	cbnz	r3, 800d582 <__swsetup_r+0xc6>
 800d570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d574:	d1ba      	bne.n	800d4ec <__swsetup_r+0x30>
 800d576:	bd70      	pop	{r4, r5, r6, pc}
 800d578:	0781      	lsls	r1, r0, #30
 800d57a:	bf58      	it	pl
 800d57c:	6963      	ldrpl	r3, [r4, #20]
 800d57e:	60a3      	str	r3, [r4, #8]
 800d580:	e7f4      	b.n	800d56c <__swsetup_r+0xb0>
 800d582:	2000      	movs	r0, #0
 800d584:	e7f7      	b.n	800d576 <__swsetup_r+0xba>
 800d586:	bf00      	nop
 800d588:	200000b4 	.word	0x200000b4
 800d58c:	08019744 	.word	0x08019744
 800d590:	08019764 	.word	0x08019764
 800d594:	08019724 	.word	0x08019724

0800d598 <abort>:
 800d598:	b508      	push	{r3, lr}
 800d59a:	2006      	movs	r0, #6
 800d59c:	f000 fa54 	bl	800da48 <raise>
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	f7f6 f921 	bl	80037e8 <_exit>
	...

0800d5a8 <__sflush_r>:
 800d5a8:	898a      	ldrh	r2, [r1, #12]
 800d5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	0710      	lsls	r0, r2, #28
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	d458      	bmi.n	800d668 <__sflush_r+0xc0>
 800d5b6:	684b      	ldr	r3, [r1, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	dc05      	bgt.n	800d5c8 <__sflush_r+0x20>
 800d5bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dc02      	bgt.n	800d5c8 <__sflush_r+0x20>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ca:	2e00      	cmp	r6, #0
 800d5cc:	d0f9      	beq.n	800d5c2 <__sflush_r+0x1a>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5d4:	682f      	ldr	r7, [r5, #0]
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	d032      	beq.n	800d640 <__sflush_r+0x98>
 800d5da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	075a      	lsls	r2, r3, #29
 800d5e0:	d505      	bpl.n	800d5ee <__sflush_r+0x46>
 800d5e2:	6863      	ldr	r3, [r4, #4]
 800d5e4:	1ac0      	subs	r0, r0, r3
 800d5e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5e8:	b10b      	cbz	r3, 800d5ee <__sflush_r+0x46>
 800d5ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5ec:	1ac0      	subs	r0, r0, r3
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5f4:	6a21      	ldr	r1, [r4, #32]
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	47b0      	blx	r6
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	d106      	bne.n	800d60e <__sflush_r+0x66>
 800d600:	6829      	ldr	r1, [r5, #0]
 800d602:	291d      	cmp	r1, #29
 800d604:	d82c      	bhi.n	800d660 <__sflush_r+0xb8>
 800d606:	4a2a      	ldr	r2, [pc, #168]	; (800d6b0 <__sflush_r+0x108>)
 800d608:	40ca      	lsrs	r2, r1
 800d60a:	07d6      	lsls	r6, r2, #31
 800d60c:	d528      	bpl.n	800d660 <__sflush_r+0xb8>
 800d60e:	2200      	movs	r2, #0
 800d610:	6062      	str	r2, [r4, #4]
 800d612:	04d9      	lsls	r1, r3, #19
 800d614:	6922      	ldr	r2, [r4, #16]
 800d616:	6022      	str	r2, [r4, #0]
 800d618:	d504      	bpl.n	800d624 <__sflush_r+0x7c>
 800d61a:	1c42      	adds	r2, r0, #1
 800d61c:	d101      	bne.n	800d622 <__sflush_r+0x7a>
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	b903      	cbnz	r3, 800d624 <__sflush_r+0x7c>
 800d622:	6560      	str	r0, [r4, #84]	; 0x54
 800d624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d626:	602f      	str	r7, [r5, #0]
 800d628:	2900      	cmp	r1, #0
 800d62a:	d0ca      	beq.n	800d5c2 <__sflush_r+0x1a>
 800d62c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d630:	4299      	cmp	r1, r3
 800d632:	d002      	beq.n	800d63a <__sflush_r+0x92>
 800d634:	4628      	mov	r0, r5
 800d636:	f7ff faa5 	bl	800cb84 <_free_r>
 800d63a:	2000      	movs	r0, #0
 800d63c:	6360      	str	r0, [r4, #52]	; 0x34
 800d63e:	e7c1      	b.n	800d5c4 <__sflush_r+0x1c>
 800d640:	6a21      	ldr	r1, [r4, #32]
 800d642:	2301      	movs	r3, #1
 800d644:	4628      	mov	r0, r5
 800d646:	47b0      	blx	r6
 800d648:	1c41      	adds	r1, r0, #1
 800d64a:	d1c7      	bne.n	800d5dc <__sflush_r+0x34>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0c4      	beq.n	800d5dc <__sflush_r+0x34>
 800d652:	2b1d      	cmp	r3, #29
 800d654:	d001      	beq.n	800d65a <__sflush_r+0xb2>
 800d656:	2b16      	cmp	r3, #22
 800d658:	d101      	bne.n	800d65e <__sflush_r+0xb6>
 800d65a:	602f      	str	r7, [r5, #0]
 800d65c:	e7b1      	b.n	800d5c2 <__sflush_r+0x1a>
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	e7ad      	b.n	800d5c4 <__sflush_r+0x1c>
 800d668:	690f      	ldr	r7, [r1, #16]
 800d66a:	2f00      	cmp	r7, #0
 800d66c:	d0a9      	beq.n	800d5c2 <__sflush_r+0x1a>
 800d66e:	0793      	lsls	r3, r2, #30
 800d670:	680e      	ldr	r6, [r1, #0]
 800d672:	bf08      	it	eq
 800d674:	694b      	ldreq	r3, [r1, #20]
 800d676:	600f      	str	r7, [r1, #0]
 800d678:	bf18      	it	ne
 800d67a:	2300      	movne	r3, #0
 800d67c:	eba6 0807 	sub.w	r8, r6, r7
 800d680:	608b      	str	r3, [r1, #8]
 800d682:	f1b8 0f00 	cmp.w	r8, #0
 800d686:	dd9c      	ble.n	800d5c2 <__sflush_r+0x1a>
 800d688:	6a21      	ldr	r1, [r4, #32]
 800d68a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d68c:	4643      	mov	r3, r8
 800d68e:	463a      	mov	r2, r7
 800d690:	4628      	mov	r0, r5
 800d692:	47b0      	blx	r6
 800d694:	2800      	cmp	r0, #0
 800d696:	dc06      	bgt.n	800d6a6 <__sflush_r+0xfe>
 800d698:	89a3      	ldrh	r3, [r4, #12]
 800d69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d69e:	81a3      	strh	r3, [r4, #12]
 800d6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a4:	e78e      	b.n	800d5c4 <__sflush_r+0x1c>
 800d6a6:	4407      	add	r7, r0
 800d6a8:	eba8 0800 	sub.w	r8, r8, r0
 800d6ac:	e7e9      	b.n	800d682 <__sflush_r+0xda>
 800d6ae:	bf00      	nop
 800d6b0:	20400001 	.word	0x20400001

0800d6b4 <_fflush_r>:
 800d6b4:	b538      	push	{r3, r4, r5, lr}
 800d6b6:	690b      	ldr	r3, [r1, #16]
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	b913      	cbnz	r3, 800d6c4 <_fflush_r+0x10>
 800d6be:	2500      	movs	r5, #0
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}
 800d6c4:	b118      	cbz	r0, 800d6ce <_fflush_r+0x1a>
 800d6c6:	6983      	ldr	r3, [r0, #24]
 800d6c8:	b90b      	cbnz	r3, 800d6ce <_fflush_r+0x1a>
 800d6ca:	f000 f887 	bl	800d7dc <__sinit>
 800d6ce:	4b14      	ldr	r3, [pc, #80]	; (800d720 <_fflush_r+0x6c>)
 800d6d0:	429c      	cmp	r4, r3
 800d6d2:	d11b      	bne.n	800d70c <_fflush_r+0x58>
 800d6d4:	686c      	ldr	r4, [r5, #4]
 800d6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d0ef      	beq.n	800d6be <_fflush_r+0xa>
 800d6de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6e0:	07d0      	lsls	r0, r2, #31
 800d6e2:	d404      	bmi.n	800d6ee <_fflush_r+0x3a>
 800d6e4:	0599      	lsls	r1, r3, #22
 800d6e6:	d402      	bmi.n	800d6ee <_fflush_r+0x3a>
 800d6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ea:	f000 f915 	bl	800d918 <__retarget_lock_acquire_recursive>
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	f7ff ff59 	bl	800d5a8 <__sflush_r>
 800d6f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6f8:	07da      	lsls	r2, r3, #31
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	d4e0      	bmi.n	800d6c0 <_fflush_r+0xc>
 800d6fe:	89a3      	ldrh	r3, [r4, #12]
 800d700:	059b      	lsls	r3, r3, #22
 800d702:	d4dd      	bmi.n	800d6c0 <_fflush_r+0xc>
 800d704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d706:	f000 f908 	bl	800d91a <__retarget_lock_release_recursive>
 800d70a:	e7d9      	b.n	800d6c0 <_fflush_r+0xc>
 800d70c:	4b05      	ldr	r3, [pc, #20]	; (800d724 <_fflush_r+0x70>)
 800d70e:	429c      	cmp	r4, r3
 800d710:	d101      	bne.n	800d716 <_fflush_r+0x62>
 800d712:	68ac      	ldr	r4, [r5, #8]
 800d714:	e7df      	b.n	800d6d6 <_fflush_r+0x22>
 800d716:	4b04      	ldr	r3, [pc, #16]	; (800d728 <_fflush_r+0x74>)
 800d718:	429c      	cmp	r4, r3
 800d71a:	bf08      	it	eq
 800d71c:	68ec      	ldreq	r4, [r5, #12]
 800d71e:	e7da      	b.n	800d6d6 <_fflush_r+0x22>
 800d720:	08019744 	.word	0x08019744
 800d724:	08019764 	.word	0x08019764
 800d728:	08019724 	.word	0x08019724

0800d72c <std>:
 800d72c:	2300      	movs	r3, #0
 800d72e:	b510      	push	{r4, lr}
 800d730:	4604      	mov	r4, r0
 800d732:	e9c0 3300 	strd	r3, r3, [r0]
 800d736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d73a:	6083      	str	r3, [r0, #8]
 800d73c:	8181      	strh	r1, [r0, #12]
 800d73e:	6643      	str	r3, [r0, #100]	; 0x64
 800d740:	81c2      	strh	r2, [r0, #14]
 800d742:	6183      	str	r3, [r0, #24]
 800d744:	4619      	mov	r1, r3
 800d746:	2208      	movs	r2, #8
 800d748:	305c      	adds	r0, #92	; 0x5c
 800d74a:	f7fd fb5b 	bl	800ae04 <memset>
 800d74e:	4b05      	ldr	r3, [pc, #20]	; (800d764 <std+0x38>)
 800d750:	6263      	str	r3, [r4, #36]	; 0x24
 800d752:	4b05      	ldr	r3, [pc, #20]	; (800d768 <std+0x3c>)
 800d754:	62a3      	str	r3, [r4, #40]	; 0x28
 800d756:	4b05      	ldr	r3, [pc, #20]	; (800d76c <std+0x40>)
 800d758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d75a:	4b05      	ldr	r3, [pc, #20]	; (800d770 <std+0x44>)
 800d75c:	6224      	str	r4, [r4, #32]
 800d75e:	6323      	str	r3, [r4, #48]	; 0x30
 800d760:	bd10      	pop	{r4, pc}
 800d762:	bf00      	nop
 800d764:	0800da81 	.word	0x0800da81
 800d768:	0800daa3 	.word	0x0800daa3
 800d76c:	0800dadb 	.word	0x0800dadb
 800d770:	0800daff 	.word	0x0800daff

0800d774 <_cleanup_r>:
 800d774:	4901      	ldr	r1, [pc, #4]	; (800d77c <_cleanup_r+0x8>)
 800d776:	f000 b8af 	b.w	800d8d8 <_fwalk_reent>
 800d77a:	bf00      	nop
 800d77c:	0800d6b5 	.word	0x0800d6b5

0800d780 <__sfmoreglue>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	2268      	movs	r2, #104	; 0x68
 800d784:	1e4d      	subs	r5, r1, #1
 800d786:	4355      	muls	r5, r2
 800d788:	460e      	mov	r6, r1
 800d78a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d78e:	f7ff fa65 	bl	800cc5c <_malloc_r>
 800d792:	4604      	mov	r4, r0
 800d794:	b140      	cbz	r0, 800d7a8 <__sfmoreglue+0x28>
 800d796:	2100      	movs	r1, #0
 800d798:	e9c0 1600 	strd	r1, r6, [r0]
 800d79c:	300c      	adds	r0, #12
 800d79e:	60a0      	str	r0, [r4, #8]
 800d7a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7a4:	f7fd fb2e 	bl	800ae04 <memset>
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}

0800d7ac <__sfp_lock_acquire>:
 800d7ac:	4801      	ldr	r0, [pc, #4]	; (800d7b4 <__sfp_lock_acquire+0x8>)
 800d7ae:	f000 b8b3 	b.w	800d918 <__retarget_lock_acquire_recursive>
 800d7b2:	bf00      	nop
 800d7b4:	200006cd 	.word	0x200006cd

0800d7b8 <__sfp_lock_release>:
 800d7b8:	4801      	ldr	r0, [pc, #4]	; (800d7c0 <__sfp_lock_release+0x8>)
 800d7ba:	f000 b8ae 	b.w	800d91a <__retarget_lock_release_recursive>
 800d7be:	bf00      	nop
 800d7c0:	200006cd 	.word	0x200006cd

0800d7c4 <__sinit_lock_acquire>:
 800d7c4:	4801      	ldr	r0, [pc, #4]	; (800d7cc <__sinit_lock_acquire+0x8>)
 800d7c6:	f000 b8a7 	b.w	800d918 <__retarget_lock_acquire_recursive>
 800d7ca:	bf00      	nop
 800d7cc:	200006ce 	.word	0x200006ce

0800d7d0 <__sinit_lock_release>:
 800d7d0:	4801      	ldr	r0, [pc, #4]	; (800d7d8 <__sinit_lock_release+0x8>)
 800d7d2:	f000 b8a2 	b.w	800d91a <__retarget_lock_release_recursive>
 800d7d6:	bf00      	nop
 800d7d8:	200006ce 	.word	0x200006ce

0800d7dc <__sinit>:
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	4604      	mov	r4, r0
 800d7e0:	f7ff fff0 	bl	800d7c4 <__sinit_lock_acquire>
 800d7e4:	69a3      	ldr	r3, [r4, #24]
 800d7e6:	b11b      	cbz	r3, 800d7f0 <__sinit+0x14>
 800d7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ec:	f7ff bff0 	b.w	800d7d0 <__sinit_lock_release>
 800d7f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800d7f6:	4b13      	ldr	r3, [pc, #76]	; (800d844 <__sinit+0x68>)
 800d7f8:	4a13      	ldr	r2, [pc, #76]	; (800d848 <__sinit+0x6c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7fe:	42a3      	cmp	r3, r4
 800d800:	bf04      	itt	eq
 800d802:	2301      	moveq	r3, #1
 800d804:	61a3      	streq	r3, [r4, #24]
 800d806:	4620      	mov	r0, r4
 800d808:	f000 f820 	bl	800d84c <__sfp>
 800d80c:	6060      	str	r0, [r4, #4]
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 f81c 	bl	800d84c <__sfp>
 800d814:	60a0      	str	r0, [r4, #8]
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f818 	bl	800d84c <__sfp>
 800d81c:	2200      	movs	r2, #0
 800d81e:	60e0      	str	r0, [r4, #12]
 800d820:	2104      	movs	r1, #4
 800d822:	6860      	ldr	r0, [r4, #4]
 800d824:	f7ff ff82 	bl	800d72c <std>
 800d828:	68a0      	ldr	r0, [r4, #8]
 800d82a:	2201      	movs	r2, #1
 800d82c:	2109      	movs	r1, #9
 800d82e:	f7ff ff7d 	bl	800d72c <std>
 800d832:	68e0      	ldr	r0, [r4, #12]
 800d834:	2202      	movs	r2, #2
 800d836:	2112      	movs	r1, #18
 800d838:	f7ff ff78 	bl	800d72c <std>
 800d83c:	2301      	movs	r3, #1
 800d83e:	61a3      	str	r3, [r4, #24]
 800d840:	e7d2      	b.n	800d7e8 <__sinit+0xc>
 800d842:	bf00      	nop
 800d844:	080193a8 	.word	0x080193a8
 800d848:	0800d775 	.word	0x0800d775

0800d84c <__sfp>:
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84e:	4607      	mov	r7, r0
 800d850:	f7ff ffac 	bl	800d7ac <__sfp_lock_acquire>
 800d854:	4b1e      	ldr	r3, [pc, #120]	; (800d8d0 <__sfp+0x84>)
 800d856:	681e      	ldr	r6, [r3, #0]
 800d858:	69b3      	ldr	r3, [r6, #24]
 800d85a:	b913      	cbnz	r3, 800d862 <__sfp+0x16>
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7ff ffbd 	bl	800d7dc <__sinit>
 800d862:	3648      	adds	r6, #72	; 0x48
 800d864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d868:	3b01      	subs	r3, #1
 800d86a:	d503      	bpl.n	800d874 <__sfp+0x28>
 800d86c:	6833      	ldr	r3, [r6, #0]
 800d86e:	b30b      	cbz	r3, 800d8b4 <__sfp+0x68>
 800d870:	6836      	ldr	r6, [r6, #0]
 800d872:	e7f7      	b.n	800d864 <__sfp+0x18>
 800d874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d878:	b9d5      	cbnz	r5, 800d8b0 <__sfp+0x64>
 800d87a:	4b16      	ldr	r3, [pc, #88]	; (800d8d4 <__sfp+0x88>)
 800d87c:	60e3      	str	r3, [r4, #12]
 800d87e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d882:	6665      	str	r5, [r4, #100]	; 0x64
 800d884:	f000 f847 	bl	800d916 <__retarget_lock_init_recursive>
 800d888:	f7ff ff96 	bl	800d7b8 <__sfp_lock_release>
 800d88c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d894:	6025      	str	r5, [r4, #0]
 800d896:	61a5      	str	r5, [r4, #24]
 800d898:	2208      	movs	r2, #8
 800d89a:	4629      	mov	r1, r5
 800d89c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8a0:	f7fd fab0 	bl	800ae04 <memset>
 800d8a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b0:	3468      	adds	r4, #104	; 0x68
 800d8b2:	e7d9      	b.n	800d868 <__sfp+0x1c>
 800d8b4:	2104      	movs	r1, #4
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	f7ff ff62 	bl	800d780 <__sfmoreglue>
 800d8bc:	4604      	mov	r4, r0
 800d8be:	6030      	str	r0, [r6, #0]
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d1d5      	bne.n	800d870 <__sfp+0x24>
 800d8c4:	f7ff ff78 	bl	800d7b8 <__sfp_lock_release>
 800d8c8:	230c      	movs	r3, #12
 800d8ca:	603b      	str	r3, [r7, #0]
 800d8cc:	e7ee      	b.n	800d8ac <__sfp+0x60>
 800d8ce:	bf00      	nop
 800d8d0:	080193a8 	.word	0x080193a8
 800d8d4:	ffff0001 	.word	0xffff0001

0800d8d8 <_fwalk_reent>:
 800d8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8dc:	4606      	mov	r6, r0
 800d8de:	4688      	mov	r8, r1
 800d8e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8e4:	2700      	movs	r7, #0
 800d8e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8ea:	f1b9 0901 	subs.w	r9, r9, #1
 800d8ee:	d505      	bpl.n	800d8fc <_fwalk_reent+0x24>
 800d8f0:	6824      	ldr	r4, [r4, #0]
 800d8f2:	2c00      	cmp	r4, #0
 800d8f4:	d1f7      	bne.n	800d8e6 <_fwalk_reent+0xe>
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8fc:	89ab      	ldrh	r3, [r5, #12]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d907      	bls.n	800d912 <_fwalk_reent+0x3a>
 800d902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d906:	3301      	adds	r3, #1
 800d908:	d003      	beq.n	800d912 <_fwalk_reent+0x3a>
 800d90a:	4629      	mov	r1, r5
 800d90c:	4630      	mov	r0, r6
 800d90e:	47c0      	blx	r8
 800d910:	4307      	orrs	r7, r0
 800d912:	3568      	adds	r5, #104	; 0x68
 800d914:	e7e9      	b.n	800d8ea <_fwalk_reent+0x12>

0800d916 <__retarget_lock_init_recursive>:
 800d916:	4770      	bx	lr

0800d918 <__retarget_lock_acquire_recursive>:
 800d918:	4770      	bx	lr

0800d91a <__retarget_lock_release_recursive>:
 800d91a:	4770      	bx	lr

0800d91c <__swhatbuf_r>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	460e      	mov	r6, r1
 800d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d924:	2900      	cmp	r1, #0
 800d926:	b096      	sub	sp, #88	; 0x58
 800d928:	4614      	mov	r4, r2
 800d92a:	461d      	mov	r5, r3
 800d92c:	da08      	bge.n	800d940 <__swhatbuf_r+0x24>
 800d92e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	061a      	lsls	r2, r3, #24
 800d938:	d410      	bmi.n	800d95c <__swhatbuf_r+0x40>
 800d93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93e:	e00e      	b.n	800d95e <__swhatbuf_r+0x42>
 800d940:	466a      	mov	r2, sp
 800d942:	f000 f903 	bl	800db4c <_fstat_r>
 800d946:	2800      	cmp	r0, #0
 800d948:	dbf1      	blt.n	800d92e <__swhatbuf_r+0x12>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d954:	425a      	negs	r2, r3
 800d956:	415a      	adcs	r2, r3
 800d958:	602a      	str	r2, [r5, #0]
 800d95a:	e7ee      	b.n	800d93a <__swhatbuf_r+0x1e>
 800d95c:	2340      	movs	r3, #64	; 0x40
 800d95e:	2000      	movs	r0, #0
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	b016      	add	sp, #88	; 0x58
 800d964:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d968 <__smakebuf_r>:
 800d968:	898b      	ldrh	r3, [r1, #12]
 800d96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d96c:	079d      	lsls	r5, r3, #30
 800d96e:	4606      	mov	r6, r0
 800d970:	460c      	mov	r4, r1
 800d972:	d507      	bpl.n	800d984 <__smakebuf_r+0x1c>
 800d974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2301      	movs	r3, #1
 800d97e:	6163      	str	r3, [r4, #20]
 800d980:	b002      	add	sp, #8
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	ab01      	add	r3, sp, #4
 800d986:	466a      	mov	r2, sp
 800d988:	f7ff ffc8 	bl	800d91c <__swhatbuf_r>
 800d98c:	9900      	ldr	r1, [sp, #0]
 800d98e:	4605      	mov	r5, r0
 800d990:	4630      	mov	r0, r6
 800d992:	f7ff f963 	bl	800cc5c <_malloc_r>
 800d996:	b948      	cbnz	r0, 800d9ac <__smakebuf_r+0x44>
 800d998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99c:	059a      	lsls	r2, r3, #22
 800d99e:	d4ef      	bmi.n	800d980 <__smakebuf_r+0x18>
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	f043 0302 	orr.w	r3, r3, #2
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7e3      	b.n	800d974 <__smakebuf_r+0xc>
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <__smakebuf_r+0x7c>)
 800d9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	6163      	str	r3, [r4, #20]
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	6120      	str	r0, [r4, #16]
 800d9c2:	b15b      	cbz	r3, 800d9dc <__smakebuf_r+0x74>
 800d9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 f8d1 	bl	800db70 <_isatty_r>
 800d9ce:	b128      	cbz	r0, 800d9dc <__smakebuf_r+0x74>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	89a0      	ldrh	r0, [r4, #12]
 800d9de:	4305      	orrs	r5, r0
 800d9e0:	81a5      	strh	r5, [r4, #12]
 800d9e2:	e7cd      	b.n	800d980 <__smakebuf_r+0x18>
 800d9e4:	0800d775 	.word	0x0800d775

0800d9e8 <_malloc_usable_size_r>:
 800d9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ec:	1f18      	subs	r0, r3, #4
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bfbc      	itt	lt
 800d9f2:	580b      	ldrlt	r3, [r1, r0]
 800d9f4:	18c0      	addlt	r0, r0, r3
 800d9f6:	4770      	bx	lr

0800d9f8 <_raise_r>:
 800d9f8:	291f      	cmp	r1, #31
 800d9fa:	b538      	push	{r3, r4, r5, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	d904      	bls.n	800da0c <_raise_r+0x14>
 800da02:	2316      	movs	r3, #22
 800da04:	6003      	str	r3, [r0, #0]
 800da06:	f04f 30ff 	mov.w	r0, #4294967295
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da0e:	b112      	cbz	r2, 800da16 <_raise_r+0x1e>
 800da10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da14:	b94b      	cbnz	r3, 800da2a <_raise_r+0x32>
 800da16:	4620      	mov	r0, r4
 800da18:	f000 f830 	bl	800da7c <_getpid_r>
 800da1c:	462a      	mov	r2, r5
 800da1e:	4601      	mov	r1, r0
 800da20:	4620      	mov	r0, r4
 800da22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da26:	f000 b817 	b.w	800da58 <_kill_r>
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d00a      	beq.n	800da44 <_raise_r+0x4c>
 800da2e:	1c59      	adds	r1, r3, #1
 800da30:	d103      	bne.n	800da3a <_raise_r+0x42>
 800da32:	2316      	movs	r3, #22
 800da34:	6003      	str	r3, [r0, #0]
 800da36:	2001      	movs	r0, #1
 800da38:	e7e7      	b.n	800da0a <_raise_r+0x12>
 800da3a:	2400      	movs	r4, #0
 800da3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da40:	4628      	mov	r0, r5
 800da42:	4798      	blx	r3
 800da44:	2000      	movs	r0, #0
 800da46:	e7e0      	b.n	800da0a <_raise_r+0x12>

0800da48 <raise>:
 800da48:	4b02      	ldr	r3, [pc, #8]	; (800da54 <raise+0xc>)
 800da4a:	4601      	mov	r1, r0
 800da4c:	6818      	ldr	r0, [r3, #0]
 800da4e:	f7ff bfd3 	b.w	800d9f8 <_raise_r>
 800da52:	bf00      	nop
 800da54:	200000b4 	.word	0x200000b4

0800da58 <_kill_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	4d07      	ldr	r5, [pc, #28]	; (800da78 <_kill_r+0x20>)
 800da5c:	2300      	movs	r3, #0
 800da5e:	4604      	mov	r4, r0
 800da60:	4608      	mov	r0, r1
 800da62:	4611      	mov	r1, r2
 800da64:	602b      	str	r3, [r5, #0]
 800da66:	f7f5 feaf 	bl	80037c8 <_kill>
 800da6a:	1c43      	adds	r3, r0, #1
 800da6c:	d102      	bne.n	800da74 <_kill_r+0x1c>
 800da6e:	682b      	ldr	r3, [r5, #0]
 800da70:	b103      	cbz	r3, 800da74 <_kill_r+0x1c>
 800da72:	6023      	str	r3, [r4, #0]
 800da74:	bd38      	pop	{r3, r4, r5, pc}
 800da76:	bf00      	nop
 800da78:	200006c8 	.word	0x200006c8

0800da7c <_getpid_r>:
 800da7c:	f7f5 be9c 	b.w	80037b8 <_getpid>

0800da80 <__sread>:
 800da80:	b510      	push	{r4, lr}
 800da82:	460c      	mov	r4, r1
 800da84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da88:	f000 f894 	bl	800dbb4 <_read_r>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	bfab      	itete	ge
 800da90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da92:	89a3      	ldrhlt	r3, [r4, #12]
 800da94:	181b      	addge	r3, r3, r0
 800da96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da9a:	bfac      	ite	ge
 800da9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800da9e:	81a3      	strhlt	r3, [r4, #12]
 800daa0:	bd10      	pop	{r4, pc}

0800daa2 <__swrite>:
 800daa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa6:	461f      	mov	r7, r3
 800daa8:	898b      	ldrh	r3, [r1, #12]
 800daaa:	05db      	lsls	r3, r3, #23
 800daac:	4605      	mov	r5, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	4616      	mov	r6, r2
 800dab2:	d505      	bpl.n	800dac0 <__swrite+0x1e>
 800dab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab8:	2302      	movs	r3, #2
 800daba:	2200      	movs	r2, #0
 800dabc:	f000 f868 	bl	800db90 <_lseek_r>
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	4632      	mov	r2, r6
 800dace:	463b      	mov	r3, r7
 800dad0:	4628      	mov	r0, r5
 800dad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad6:	f000 b817 	b.w	800db08 <_write_r>

0800dada <__sseek>:
 800dada:	b510      	push	{r4, lr}
 800dadc:	460c      	mov	r4, r1
 800dade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae2:	f000 f855 	bl	800db90 <_lseek_r>
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	bf15      	itete	ne
 800daec:	6560      	strne	r0, [r4, #84]	; 0x54
 800daee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800daf6:	81a3      	strheq	r3, [r4, #12]
 800daf8:	bf18      	it	ne
 800dafa:	81a3      	strhne	r3, [r4, #12]
 800dafc:	bd10      	pop	{r4, pc}

0800dafe <__sclose>:
 800dafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db02:	f000 b813 	b.w	800db2c <_close_r>
	...

0800db08 <_write_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d07      	ldr	r5, [pc, #28]	; (800db28 <_write_r+0x20>)
 800db0c:	4604      	mov	r4, r0
 800db0e:	4608      	mov	r0, r1
 800db10:	4611      	mov	r1, r2
 800db12:	2200      	movs	r2, #0
 800db14:	602a      	str	r2, [r5, #0]
 800db16:	461a      	mov	r2, r3
 800db18:	f7f5 fe8d 	bl	8003836 <_write>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_write_r+0x1e>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b103      	cbz	r3, 800db26 <_write_r+0x1e>
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	200006c8 	.word	0x200006c8

0800db2c <_close_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d06      	ldr	r5, [pc, #24]	; (800db48 <_close_r+0x1c>)
 800db30:	2300      	movs	r3, #0
 800db32:	4604      	mov	r4, r0
 800db34:	4608      	mov	r0, r1
 800db36:	602b      	str	r3, [r5, #0]
 800db38:	f7f5 fe99 	bl	800386e <_close>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_close_r+0x1a>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_close_r+0x1a>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	200006c8 	.word	0x200006c8

0800db4c <_fstat_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d07      	ldr	r5, [pc, #28]	; (800db6c <_fstat_r+0x20>)
 800db50:	2300      	movs	r3, #0
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	4611      	mov	r1, r2
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	f7f5 fe94 	bl	8003886 <_fstat>
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	d102      	bne.n	800db68 <_fstat_r+0x1c>
 800db62:	682b      	ldr	r3, [r5, #0]
 800db64:	b103      	cbz	r3, 800db68 <_fstat_r+0x1c>
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	bd38      	pop	{r3, r4, r5, pc}
 800db6a:	bf00      	nop
 800db6c:	200006c8 	.word	0x200006c8

0800db70 <_isatty_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d06      	ldr	r5, [pc, #24]	; (800db8c <_isatty_r+0x1c>)
 800db74:	2300      	movs	r3, #0
 800db76:	4604      	mov	r4, r0
 800db78:	4608      	mov	r0, r1
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	f7f5 fe93 	bl	80038a6 <_isatty>
 800db80:	1c43      	adds	r3, r0, #1
 800db82:	d102      	bne.n	800db8a <_isatty_r+0x1a>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	b103      	cbz	r3, 800db8a <_isatty_r+0x1a>
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	bd38      	pop	{r3, r4, r5, pc}
 800db8c:	200006c8 	.word	0x200006c8

0800db90 <_lseek_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4d07      	ldr	r5, [pc, #28]	; (800dbb0 <_lseek_r+0x20>)
 800db94:	4604      	mov	r4, r0
 800db96:	4608      	mov	r0, r1
 800db98:	4611      	mov	r1, r2
 800db9a:	2200      	movs	r2, #0
 800db9c:	602a      	str	r2, [r5, #0]
 800db9e:	461a      	mov	r2, r3
 800dba0:	f7f5 fe8c 	bl	80038bc <_lseek>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d102      	bne.n	800dbae <_lseek_r+0x1e>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	b103      	cbz	r3, 800dbae <_lseek_r+0x1e>
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	200006c8 	.word	0x200006c8

0800dbb4 <_read_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4d07      	ldr	r5, [pc, #28]	; (800dbd4 <_read_r+0x20>)
 800dbb8:	4604      	mov	r4, r0
 800dbba:	4608      	mov	r0, r1
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	602a      	str	r2, [r5, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	f7f5 fe1a 	bl	80037fc <_read>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d102      	bne.n	800dbd2 <_read_r+0x1e>
 800dbcc:	682b      	ldr	r3, [r5, #0]
 800dbce:	b103      	cbz	r3, 800dbd2 <_read_r+0x1e>
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	200006c8 	.word	0x200006c8

0800dbd8 <trunc>:
 800dbd8:	ec51 0b10 	vmov	r0, r1, d0
 800dbdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dbe0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800dbe4:	2b13      	cmp	r3, #19
 800dbe6:	b5d0      	push	{r4, r6, r7, lr}
 800dbe8:	460c      	mov	r4, r1
 800dbea:	dc10      	bgt.n	800dc0e <trunc+0x36>
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	bfa5      	ittet	ge
 800dbf0:	4a11      	ldrge	r2, [pc, #68]	; (800dc38 <trunc+0x60>)
 800dbf2:	fa42 f303 	asrge.w	r3, r2, r3
 800dbf6:	2100      	movlt	r1, #0
 800dbf8:	2100      	movge	r1, #0
 800dbfa:	bfb9      	ittee	lt
 800dbfc:	2000      	movlt	r0, #0
 800dbfe:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800dc02:	2000      	movge	r0, #0
 800dc04:	ea24 0103 	bicge.w	r1, r4, r3
 800dc08:	ec41 0b10 	vmov	d0, r0, r1
 800dc0c:	bdd0      	pop	{r4, r6, r7, pc}
 800dc0e:	2b33      	cmp	r3, #51	; 0x33
 800dc10:	dd08      	ble.n	800dc24 <trunc+0x4c>
 800dc12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc16:	d1f7      	bne.n	800dc08 <trunc+0x30>
 800dc18:	ee10 2a10 	vmov	r2, s0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	f7f2 fb3d 	bl	800029c <__adddf3>
 800dc22:	e7f1      	b.n	800dc08 <trunc+0x30>
 800dc24:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dc28:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2c:	fa23 f202 	lsr.w	r2, r3, r2
 800dc30:	ea20 0602 	bic.w	r6, r0, r2
 800dc34:	4630      	mov	r0, r6
 800dc36:	e7e7      	b.n	800dc08 <trunc+0x30>
 800dc38:	000fffff 	.word	0x000fffff

0800dc3c <ceilf>:
 800dc3c:	ee10 3a10 	vmov	r3, s0
 800dc40:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dc44:	3a7f      	subs	r2, #127	; 0x7f
 800dc46:	2a16      	cmp	r2, #22
 800dc48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc4c:	dc2a      	bgt.n	800dca4 <ceilf+0x68>
 800dc4e:	2a00      	cmp	r2, #0
 800dc50:	da11      	bge.n	800dc76 <ceilf+0x3a>
 800dc52:	eddf 7a19 	vldr	s15, [pc, #100]	; 800dcb8 <ceilf+0x7c>
 800dc56:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc62:	dd05      	ble.n	800dc70 <ceilf+0x34>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	db23      	blt.n	800dcb0 <ceilf+0x74>
 800dc68:	2900      	cmp	r1, #0
 800dc6a:	bf18      	it	ne
 800dc6c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800dc70:	ee00 3a10 	vmov	s0, r3
 800dc74:	4770      	bx	lr
 800dc76:	4911      	ldr	r1, [pc, #68]	; (800dcbc <ceilf+0x80>)
 800dc78:	4111      	asrs	r1, r2
 800dc7a:	420b      	tst	r3, r1
 800dc7c:	d0fa      	beq.n	800dc74 <ceilf+0x38>
 800dc7e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800dcb8 <ceilf+0x7c>
 800dc82:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8e:	ddef      	ble.n	800dc70 <ceilf+0x34>
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	bfc2      	ittt	gt
 800dc94:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800dc98:	fa40 f202 	asrgt.w	r2, r0, r2
 800dc9c:	189b      	addgt	r3, r3, r2
 800dc9e:	ea23 0301 	bic.w	r3, r3, r1
 800dca2:	e7e5      	b.n	800dc70 <ceilf+0x34>
 800dca4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dca8:	d3e4      	bcc.n	800dc74 <ceilf+0x38>
 800dcaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dcae:	4770      	bx	lr
 800dcb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcb4:	e7dc      	b.n	800dc70 <ceilf+0x34>
 800dcb6:	bf00      	nop
 800dcb8:	7149f2ca 	.word	0x7149f2ca
 800dcbc:	007fffff 	.word	0x007fffff

0800dcc0 <_init>:
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc2:	bf00      	nop
 800dcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcc6:	bc08      	pop	{r3}
 800dcc8:	469e      	mov	lr, r3
 800dcca:	4770      	bx	lr

0800dccc <_fini>:
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcce:	bf00      	nop
 800dcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd2:	bc08      	pop	{r3}
 800dcd4:	469e      	mov	lr, r3
 800dcd6:	4770      	bx	lr
